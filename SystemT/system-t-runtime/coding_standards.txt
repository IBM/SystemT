
                         ----------------------------
                     SystemT Runtime Project Coding Standards
                         ----------------------------

                                  Fred Reiss
                              frreiss@us.ibm.com


INTRODUCTION
------------

This document describes the basic standards to which code contributed to the
Runtime project should adhere.  These standards serve two purposes:
Communication and correctness.  In terms of communication, we aim to ensure
that the different developers working on the project can easily determine how
different components of the system work by examining the code.  For
correctness, the standards ensure that new code contributed to the project
meets a minimal standard of testing and that new functionality does not break
existing functionality.

CODE FORMATTING
---------------

All Java code in the "Runtime" project should be formatted according to the
default eclipse formatting.  That is, before checking in changes to a given
file, a developer should run the file through the Eclipse Java editor's
automatic formatting (control-shift-F).

For non-Java code, we are less strict.  Developers should try to make the
formatting of new source files consistent with that of existing files.

COMMENTS
--------

Every class must have a JavaDoc comment that describes the purpose and major
functionality of the class, as well as which developer (or developers) is the
primary owner of the class.  These comments must be kept up to date as classes
evolve over time.

All methods marked public and protected must also have up-to-date JavaDoc
comments.  These comments must describe the purpose of each argument to the
method.  It is not necessary to provide information about exceptions thrown.

Developers are encouraged, but not required, to provide JavaDoc comments for
class fields and private methods.

Developers are also encouraged to provide inline comments wherever those
comments are necessary to ensure quick comprehension of what the Java code is
doing.  If, while reading through someone else's code, you have difficulty
understanding a particular section of code, please add a comment that describes
the functionality of the section, so that other developers will not need to go
through the same process of decyphering the code.


TESTING
-------

All features added to the SystemT Runtime must have automated JUnit test cases that
exercise the major functional modes of the feature.  Writing these "core" test
cases is the responsibility of the developer who contributes the code for the
feature.  Additional tests for corner cases are encouraged. 

Every defect must have an automated regression test to prevent the defect from
recurring.



