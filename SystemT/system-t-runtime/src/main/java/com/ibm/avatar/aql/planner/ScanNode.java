/*******************************************************************************
 * Copyright IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *******************************************************************************/
package com.ibm.avatar.aql.planner;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.TreeSet;

import com.ibm.avatar.algebra.util.string.StringUtils;
import com.ibm.avatar.api.exceptions.FatalInternalError;
import com.ibm.avatar.aql.FromListItemNode;
import com.ibm.avatar.aql.FromListItemSubqueryNode;
import com.ibm.avatar.aql.FromListItemTableFuncNode;
import com.ibm.avatar.aql.FromListItemViewRefNode;
import com.ibm.avatar.aql.ParseException;
import com.ibm.avatar.aql.PredicateNode;
import com.ibm.avatar.aql.TableFnCallNode;
import com.ibm.avatar.aql.catalog.Catalog;

/**
 * Logical plan node for any operation that reads the tuples of a relation. Does not care whether
 * those tuples from an AnnotScan or from another operator tree; that's up to the physical plan to
 * decide.
 * 
 */
public class ScanNode extends PlanNode {

  /**
   * Instance of FromListItemViewRefNode or FromListItemTableFuncNode. Cannot be a
   * FromListItemSubqueryNode instance because the pre-processing step of the compilation transforms
   * each FromListItemSubqueryNode into a FromListItemViewRefNode.
   */
  private FromListItemNode whatToScan;

  private Catalog catalog;

  /**
   * Main constructor
   * 
   * @param whatToScan target of the scan, which can be either a table function or a reference to a
   *        view or table
   * @param colsToKeep a list of columns to pass through on the scan, or null to retain all columns.
   * @param catalog pointer to the catalog generated by the AQL parser, for dereferencing any names
   *        that occur in the expression being scanned
   * @throws ParseException
   */
  public ScanNode(FromListItemNode whatToScan, ArrayList<String> colsToKeep, Catalog catalog)
      throws ParseException {
    super(new PlanNode[] {});

    this.catalog = catalog;

    if (whatToScan instanceof FromListItemSubqueryNode) {
      throw new RuntimeException("A scan cannot be performed on a subquery in the from clause."
          + "The subquery should be rewritten to a view reference first.");
    }

    this.whatToScan = whatToScan;

    // System.err.printf("Keeping columns: %s\n", colsToKeep);

    if (null != colsToKeep && 0 == colsToKeep.size()) {
      throw new RuntimeException(
          "No columns selected to be retained by scan (use null to retain all columns)");
    }

    // Rename the columns of the input so that they are in the form
    // name.col, skipping over unused columns.
    if (null != colsToKeep) {
      for (String internalName : colsToKeep) {
        String externalName = whatToScan.getScopedName() + "." + internalName;
        addRenaming(internalName, externalName);
      }
    }
  }

  @Override
  public PlanNode deepCopyImpl() throws ParseException {
    // Note null argument for colsToKeep; renamings will be copied by the superclass.
    return new ScanNode(whatToScan, null, catalog);
  }

  @Override
  public void toAOGNoRename(PrintWriter stream, int indent, Catalog catalog) throws Exception {

    if (whatToScan instanceof FromListItemTableFuncNode) {
      // Table function; write out the AOG to call the table function.
      ((FromListItemTableFuncNode) whatToScan).getTabfunc().generateAOG(stream, indent, catalog);
      // tream.print("\n");
    } else if (whatToScan instanceof FromListItemViewRefNode) {
      // Write out the reference to the view.
      printIndent(stream, indent);
      stream.printf("%s", StringUtils
          .toAOGNick(((FromListItemViewRefNode) whatToScan).getOrigViewName().getNickname()));
    } else {
      throw new RuntimeException("Don't understand this from list item.");
    }
  }

  public FromListItemNode getWhatToScan() {
    return whatToScan;
  }

  @Override
  public void dump(PrintWriter stream, int indent) {
    printIndent(stream, indent);
    stream.printf("ScanNode\n");
    printIndent(stream, indent + 1);

    if (whatToScan instanceof FromListItemSubqueryNode) {
      throw new RuntimeException("Don't understand this from list item.");
    }

    stream.printf("Input: %s (%s)\n", whatToScan.getScopedName(),
        (whatToScan instanceof FromListItemTableFuncNode) ? "table func" : "view ref");

    if (whatToScan instanceof FromListItemTableFuncNode) {
      TableFnCallNode tabfunc = ((FromListItemTableFuncNode) whatToScan).getTabfunc();
      ArrayList<String> colnames = new ArrayList<String>();

      try {
        for (String name : tabfunc.getColNames(catalog)) {
          colnames.add(name);
        }
      } catch (ParseException e) {
        throw new FatalInternalError(e, "Error dumping information about table function call %s",
            tabfunc);
      }

      printIndent(stream, indent + 1);
      stream.printf("Input Schema: %s\n", colnames);
    }
  }

  /**
   * Point this scan at a different target.
   * 
   * @param newSource new source of tuples for scanning.
   */
  public void setWhatToScan(FromListItemNode newSource) {
    this.whatToScan = newSource;
  }

  @Override
  public void getPreds(TreeSet<PredicateNode> preds) {
    // No-op
  }

  @Override
  public void getRels(TreeSet<FromListItemNode> rels) {
    rels.add(whatToScan);
  }

}
