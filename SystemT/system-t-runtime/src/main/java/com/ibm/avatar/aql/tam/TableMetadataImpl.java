/*******************************************************************************
 * Copyright IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *******************************************************************************/
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference
// Implementation, vJAXB 2.1.10 in
// JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2012.06.19 at 04:26:09 PM IST
//

package com.ibm.avatar.aql.tam;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import com.ibm.avatar.algebra.datamodel.FieldType;
import com.ibm.avatar.algebra.datamodel.TupleSchema;
import com.ibm.avatar.api.exceptions.FatalInternalError;
import com.ibm.avatar.api.tam.TableMetadata;
import com.ibm.avatar.aql.ParseException;
import com.ibm.avatar.aql.doc.AQLDocComment;
import com.ibm.avatar.aql.tam.SchemaType.Column;

/**
 * JAXB class to present table metadata
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TableMetadataImpl", namespace = "http://www.ibm.com/aql",
    propOrder = {"schema", "comment"})
public class TableMetadataImpl implements TableMetadata {

  // UID for Java serialization
  private static final long serialVersionUID = 1L;

  @XmlElement(required = true)
  protected SchemaType schema;
  @XmlElement
  protected CommentType comment;
  @XmlAttribute
  protected String tableName;
  @XmlAttribute
  protected Boolean exported;
  @XmlAttribute
  protected Boolean external;
  @XmlAttribute
  protected Boolean allowEmpty;
  @XmlAttribute
  protected Boolean required;

  /**
   * Gets the value of the schema property.
   * 
   * @return possible object is {@link SchemaType }
   */
  public SchemaType getSchema() {
    return schema;
  }

  /**
   * Sets the value of the schema property.
   * 
   * @param value allowed object is {@link SchemaType }
   */
  public void setSchema(SchemaType value) {
    this.schema = value;
  }

  /**
   * Gets the value of the comment property.
   * 
   * @return the comment
   */
  @Override
  public String getComment() {
    if (null == comment)
      return null;
    return comment.getText();
  }

  /**
   * Sets the value of the comment property.
   * 
   * @param value allowed object is {@link CommentType }
   */
  public void setComment(CommentType value) {
    this.comment = value;
  }

  /**
   * Gets the value of the tableName property.
   * 
   * @return possible object is {@link String }
   */
  @Override
  public String getTableName() {
    return tableName;
  }

  /**
   * Sets the value of the tableName property.
   * 
   * @param value allowed object is {@link String }
   */
  public void setTableName(String value) {
    this.tableName = value;
  }

  /**
   * Gets the value of the exported property.
   * 
   * @return possible object is {@link Boolean }
   */
  public Boolean getExported() {
    return exported;
  }

  /**
   * Sets the value of the exported property.
   * 
   * @param value allowed object is {@link Boolean }
   */
  public void setExported(Boolean value) {
    this.exported = value;
  }

  /**
   * Gets the value of the external property.
   * 
   * @return possible object is {@link Boolean }
   */
  public Boolean getExternal() {
    return external;
  }

  /**
   * Sets the value of the external property.
   * 
   * @param value allowed object is {@link Boolean }
   */
  public void setExternal(Boolean value) {
    this.external = value;
  }

  /**
   * Gets the value of the allowEmpty property.
   * 
   * @return possible object is {@link Boolean }
   */
  public Boolean getAllowEmpty() {
    return allowEmpty;
  }

  /**
   * Sets the value of the allowEmpty property.
   * 
   * @param value allowed object is {@link Boolean }
   */
  public void setAllowEmpty(Boolean value) {
    this.allowEmpty = value;
  }

  @Override
  public TupleSchema getTableSchema() {

    List<Column> fields = schema.column;
    String colNames[] = new String[fields.size()];
    FieldType colTypes[] = new FieldType[fields.size()];

    for (int i = 0; i < fields.size(); i++) {
      colNames[i] = fields.get(i).name;
      try {
        colTypes[i] = FieldType.stringToFieldType(fields.get(i).type);
      } catch (ParseException e) {
        // Calling code doesn't have a way to handle ParseException
        throw new FatalInternalError(e, "Error reading type info from metadata");
      }
    }

    TupleSchema schema = new TupleSchema(colNames, colTypes);
    schema.setName(getTableName());

    return schema;
  }

  @Override
  public Boolean isAllowEmpty() {
    if (false == isExternal())
      throw new UnsupportedOperationException(
          "This method should never be called for internal tables");
    return getAllowEmpty();
  }

  @Override
  public Boolean isRequired() {
    if (false == isExternal())
      throw new UnsupportedOperationException(
          "This method should never be called for internal tables");
    return required;
  }

  /**
   * @param required the value to set the required flag to
   */
  public void setRequired(boolean required) {
    this.required = required;
  }

  @Override
  public boolean isExported() {
    return getExported().booleanValue();
  }

  @Override
  public boolean isExternal() {
    return getExternal().booleanValue();
  }

  public void setSchema(TupleSchema tableSchema) {
    SchemaType schema = new SchemaType();
    schema.column = new ArrayList<SchemaType.Column>();

    String colNames[] = tableSchema.getFieldNames();
    FieldType colTypes[] = tableSchema.getFieldTypes();

    for (int i = 0; i < colNames.length; ++i) {
      Column col = new Column();
      col.name = colNames[i];
      col.type = colTypes[i].getTypeName();
      schema.column.add(col);
    }

    setSchema(schema);
  }

  /**
   * Set the AQL doc comment string associated with this table. If the input comment exists, that
   * is, the AQL file where this statement was defined did contain an AQL doc comment for this
   * statement, we set the comment to be a lightly cleaned up version of the original comment text,
   * as provided by {@link AQLDocComment#getCleanedText()}.
   * 
   * @param comment AQL doc comment associated with this statement in the AQL code
   */
  public void setComment(AQLDocComment comment) {
    if (null != comment) {
      this.comment = new CommentType();
      this.comment.setText(comment.getCleanText());
    }
  }

  @Override
  public String toString() {
    return String.format("tableName: %s, exported: %s, external: %s, allowEmpty: %s", tableName,
        exported, external, allowEmpty);
  }

}
