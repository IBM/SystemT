/*******************************************************************************
 * Copyright IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *******************************************************************************/
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference
// Implementation, vJAXB 2.1.10 in
// JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2012.06.19 at 04:26:09 PM IST
//

package com.ibm.avatar.api.tam;

import java.util.List;

import com.ibm.avatar.algebra.datamodel.Pair;
import com.ibm.avatar.algebra.datamodel.TupleSchema;
import com.ibm.avatar.algebra.util.tokenize.Tokenizer;
import com.ibm.avatar.api.exceptions.InvalidModuleElementException;
import com.ibm.avatar.api.tam.ModuleMetadata.ElementType;

/**
 * This class provides APIs to retrieve metadata of various AQL elements from the loaded
 * {@link MultiModuleMetadata} object. An instance of this type can be obtained by invoking one of
 * the {@link ModuleMetadataFactory#readAllMetaData(String)} APIs. This class is similar to
 * {@link ModuleMetadata}, except that each object represents metadata associated with a set of
 * modules. This module set is guaranteed to be complete, containing every module that is referenced
 * by the modules in the input module list passed to the constructor.
 * 
 * @see ModuleMetadata
 */
public interface MultiModuleMetadata {
  /**
   * API METHODS
   */

  /**
   * Provides the schema of the input document to the extractor formed by the unionization of all
   * modules within the module set.
   * 
   * @return input document schema to the union of all modules within the module set
   */
  public TupleSchema getDocSchema();

  /**
   * Return the names of the modules in the module set represented by this metadata. Includes all
   * dependencies (transitive or direct).
   * 
   * @return the names of the modules in this module set
   */
  public String[] getModuleNames();

  /**
   * Returns metadata for a given module name.
   * 
   * @param moduleName name of the module whose metadata is to be retrieved
   * @return module metadata object; <code>null</code>, if metadata not found for the given module
   *         name
   */
  public ModuleMetadata getModuleMetadata(String moduleName);

  /**
   * Returns view metadata of a given view name.
   * 
   * @param viewName this name can be one of the following: an output alias, an external name (in
   *        case of external view), the fully qualified name for modular AQLs, an unqualified view
   *        name inside a genericModule(module generate for non-modular AQL code), or the view
   *        Document
   * @return view metadata object; <code>null</code>, if metadata not found for the given view name
   * @throws RuntimeException if multiple matches are found in the metadata for the given view name
   */
  public ViewMetadata getViewMetadata(String viewName);

  /**
   * Returns metadata for a given dictionary name.
   * 
   * @param dictName qualified dictionary name, if modular AQL; unqualified otherwise
   * @return dictionary metadata object;<code>null</code>, if metadata not found for the given
   *         dictionary name
   */
  public DictionaryMetadata getDictionaryMetadata(String dictName);

  /**
   * Returns metadata for a given table name.
   * 
   * @param tableName qualified table name, if modular AQL; unqualified otherwise
   * @return table metadata object; <code>null</code>, if metadata not found for the given table
   *         name
   */
  public TableMetadata getTableMetadata(String tableName);

  /**
   * Returns metadata for a given function name.
   * 
   * @param functionName qualified function name, if modular AQL; unqualified otherwise
   * @return function metadata object; <code>null</code>, if metadata not found for the given
   *         function name
   */
  public FunctionMetadata getFunctionMetadata(String functionName);

  /**
   * Retrieve the text of the AQL doc comment associated with the given element of the given type.
   * 
   * @param type type of element
   * @param name qualified name of the element. For elements of type {@link ElementType#VIEW},this
   *        name be either be an output alias, fully qualified name,external name (in case of
   *        external view), or unqualified name for view inside a genericModule(module generated for
   *        non-modular AQL)
   * @return string contains the AQL doc comment associated for given element name
   * @throws InvalidModuleElementException if an element of the given type with the given name does
   *         not exist
   */
  public String getComment(ElementType type, String name) throws InvalidModuleElementException;

  /**
   * Returns a list of names of the views marked as output view through the <code>output view</code>
   * statement. Names returned are either output view aliases created through
   * <code>output view</code> statement's 'as' clause, a view name qualified by containing module
   * name if alias is not declared, or an unqualified view name for genericModule (module compiled
   * from non-modular AQLs).
   * 
   * @return an array of output view names
   */
  public String[] getOutputViews();

  /**
   * Returns list of all external view name pairs within the module set, where the first element of
   * the pair is the view name as declared in an AQL <code>create external view</code> statement.
   * For modular AQL, the view name returned will be qualified with containing module name; the
   * second argument is the external name as declared in an AQL <code>create external view</code>
   * statement's <code>external_name</code> clause.
   * 
   * @return list of external view name pairs
   */
  public List<Pair<String, String>> getExternalViews();

  /**
   * Returns a list of qualified names of all views marked as exported via <code>export view</code>
   * statements within the module set.
   * 
   * @return a list of qualified names of all views marked as exported within the module set
   */
  public String[] getExportedViews();

  /**
   * Returns the list of qualified names for all external tables declared through the
   * <code>create external table</code> statement within the module set.
   * 
   * @return an array of all qualified names for declared external tables within the module set
   */
  public String[] getExternalTables();

  /**
   * Returns the qualified names of all tables marked as exported via the <code>export table</code>
   * statement within the module set.
   * 
   * @return an array of all qualified table names as exported within the module set
   */
  public String[] getExportedTables();

  /**
   * Returns a list of qualified names of the external dictionaries declared through the
   * <code>create external dictionary</code> statement.
   * 
   * @return an array of the qualified names of the declared external dictionary
   */
  public String[] getExternalDictionaries();

  /**
   * Returns a list of qualified names of dictionaries marked as exported through the
   * <code>export dictionary</code> statement.
   * 
   * @return list of qualified names of dictionaries marked as exported in the module
   */
  public String[] getExportedDictionaries();

  /**
   * Returns the list of all qualified function names marked as exported via
   * <code>export function</code> statements within the module set.
   * 
   * @return a list of qualified names of all functions marked as exported within the module set
   */
  public String[] getExportedFunctions();

  /**
   * Identifies the product version of each module within the module set and returns the most recent
   * product version.
   * 
   * @return the most recent product version used to compile the modules in the module set
   */
  public String getProductVersion();

  /**
   * Returns the tokenizer type used during compilation of the modules within the module set. This
   * type will be the same for all modules within the set, as it is validated within the
   * constructor.
   * 
   * @return tokenizer type used for compiling this module
   */
  public String getTokenizerType();
}
