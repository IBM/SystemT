/*******************************************************************************
 * Copyright IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *******************************************************************************/
package com.ibm.avatar.aql.catalog;

import java.io.IOException;

import com.ibm.avatar.algebra.util.udf.ByteArrayClassLoader;
import com.ibm.avatar.api.exceptions.FatalInternalError;
import com.ibm.avatar.aql.AQLParseTreeNode;

/**
 * Catalog entry for jar files that are stored on the heap as bye arrays. These jar files may come
 * from base64 strings inside AOG files as Base64 strings or inside the TAM file; or they may be
 * generated by the compiler, as with PMML functions.
 * 
 */
public class SerializedJarCatalogEntry extends AbstractJarCatalogEntry {
  /** The contents of the original jar file, serialized into a byte array. */
  byte[] serializedJar;

  /**
   * Main constructor.
   * 
   * @param name fully qualified identifier of the jar file; i.e. module name, plus the path to the
   *        jar file from the root of the source directory of the original AQL module.
   * @param serializedJar The contents of the original jar file, serialized into a byte array.
   */
  protected SerializedJarCatalogEntry(String name, byte[] serializedJar) {
    super(name);

    this.serializedJar = serializedJar;
  }

  @Override
  public ClassLoader makeClassLoader(ClassLoader parentClassLoader) {
    try {
      return ByteArrayClassLoader.fromJarContents(serializedJar, parentClassLoader);
    } catch (IOException e) {
      throw new FatalInternalError(
          "Error reading contents of jar file '%s' " + "out of operator graph descriptor: %s",
          getName(), e.getMessage());
    }
  }

  @Override
  public byte[] getJarBytes() throws IOException {
    return serializedJar;
  }

  @Override
  protected AQLParseTreeNode getNode() {
    // no parse tree node associated with this catalog entry.
    return null;
  }
}
