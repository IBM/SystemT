$Document = DocScan(
  (
    "text" => "Text"
  )
);

CreateTable("AliasToNBA",
  (
    "alias" => "Text",
    "norm" => "Text"
  ),
  ("#celtics", "Celtics"),
  ("#nets", "Nets"),
  ("#knicks", "Knicks"),
  ("#76ers", "76ers"),
  ("#raptors", "Toronto Raptors"),
  ("#bulls", "Bulls"),
  ("#chicagobulls", "Bulls"),
  ("#cavaliers", "Cleveland Cavaliers"),
  ("#pistons", "Pistons"),
  ("#pacers", "Indiana Pacers"),
  ("#bucks", "Milwaukee Bucks"),
  ("#hawks", "Atlanta Hawks"),
  ("#bobcats", "Charlotte Bobcats"),
  ("#miamiheat", "Miami Heat"),
  ("#orlandomagic", "Orlando Magic"),
  ("#washingtonwizards", "Washington Wizards"),
  ("#denvernuggets", "Denver Nuggets"),
  ("#timberwolves", "Timberwolves"),
  ("#utahjazz", "Utah Jazz")
);
$AliasToNBA = TableScan("AliasToNBA");
CreateTable("ME_LA_StateToAbbrv",
  (
    "state" => "Text",
    "abbrv" => "Text"
  ),
  ("AMERIAN SAMOA", "AS"),
  ("ALASKA", "AK"),
  ("WEST VIGINIA", "WV"),
  ("OKLAHOMA", "OK"),
  ("MARSHALL SLANDS", "MH"),
  ("IOWA", "IA"),
  ("NEW MEXICO", "NM"),
  ("NEBRASKA", "NE"),
  ("NEW HAMPSHIRE", "NH"),
  ("PENNSYLVANIA", "PA"),
  ("WASHINGTON", "WA"),
  ("ARIZONA", "AZ"),
  ("ARKANSAS", "AR"),
  ("HAWAII", "HI"),
  ("DELAWARE", "DE"),
  ("NEVADA", "NV"),
  ("NEW YORK", "NY"),
  ("NORTH CAROLINA", "NC"),
  ("RHODE ISLAND", "RI"),
  ("GEORGIA", "GA"),
  ("VIRGIN ISLANDS", "VI"),
  ("LOUISIANA", "LA"),
  ("SOUTH CAROLINA", "SC"),
  ("IDAHO", "ID"),
  ("SOUTH DAKOTA", "SD"),
  ("MISSOURI", "MO"),
  ("MASSACHUSETTS", "MA"),
  ("PUERTO RICO", "PR"),
  ("INDIANA", "IN"),
  ("CONNECTICUT", "CT"),
  ("COLORADO", "CO"),
  ("TEXAS", "TX"),
  ("VERMONT", "VT"),
  ("OHIO", "OH"),
  ("VIRGINIA", "VA"),
  ("FLORIDA", "FL"),
  ("CALIFORNIA", "CA"),
  ("KANSAS", "KS"),
  ("ALABAMA", "AL"),
  ("PALAU", "PW"),
  ("ILLINOIS", "IL"),
  ("ALASKA", "AL"),
  ("MINNESOTA", "MN"),
  ("MONTANA", "MT"),
  ("UTAH", "UT"),
  ("MARYLAND", "MD"),
  ("GUAM", "GU"),
  ("MICHIGAN", "MI"),
  ("KENTUCKY", "KY"),
  ("TENNESSEE", "TN"),
  ("WYOMING", "WY"),
  ("NORTH DAKOTA", "ND"),
  ("MAINE", "ME"),
  ("NORTHERN MARIANA ISLANDS", "MP"),
  ("WISCONSIN", "WI"),
  ("FEDERATED STATES OF MICRONESIA", "FM"),
  ("DISTRICT OF COLUMBIA", "DC"),
  ("OREGON", "OR"),
  ("MISSISSIPPI", "MS"),
  ("NEW JERSEY", "NJ")
);
$ME_LA_StateToAbbrv = TableScan("ME_LA_StateToAbbrv");
CreateTable("AliasToNFL",
  (
    "alias" => "Text",
    "norm" => "Text"
  ),
  ("#Patriots", "Patriots"),
  ("#Jets", "Jets"),
  ("#Ravens", "Ravens"),
  ("#Raiders", "Raiders"),
  ("#Steelers", "Steelers"),
  ("#Colts", "Colts"),
  ("#Raiders", "Raiders"),
  ("#Chargers", "Chargers"),
  ("#Redskins", "Redskins"),
  ("#Packers", "Packers"),
  ("#Vikings", "Vikings"),
  ("#49ers", "49ers"),
  ("#Bills", "Buffalo Bills"),
  ("#Lions", "Detroit Lions"),
  ("#Bengals", "Cincinnati Bengals"),
  ("#dolphins", "Miami Dolphins"),
  ("#jaguars", "Jacksonville Jaguars"),
  ("#titans", "Tennessee Titans"),
  ("#chiefs", "Kansas City Chiefs"),
  ("#cowboys", "Dallas Cowboys"),
  ("#eagles", "Philadelphia Eagles"),
  ("#bears", "Chicago Bears"),
  ("#falcons", "Atlanta Falcons"),
  ("#arizonacardinals", "Arizona Cardinals"),
  ("#saints", "New Orleans Saints"),
  ("#rams", "St. Louis Rams"),
  ("#seahawks", "Seattle Seahawks"),
  ("#panthers", "Carolina Panthers")
);
$AliasToNFL = TableScan("AliasToNFL");
CreateTable("SlangToRelation",
  (
    "slang" => "Text",
    "relationship" => "Text"
  ),
  ("auntie", "Aunt"),
  ("Auntie", "Aunt"),
  ("aunties", "Aunt"),
  ("Aunties", "Aunt"),
  ("aunty", "Aunt"),
  ("babygirl", "Acquaintance"),
  ("Babygirl", "Acquaintance"),
  ("BABAYGIRL", "Acquaintance"),
  ("BabyGirl", "Acquaintance"),
  ("babygal", "Acquaintance"),
  ("Babygal", "Acquaintance"),
  ("BABAYGAL", "Acquaintance"),
  ("BabyGal", "Acquaintance"),
  ("bestfriend", "Friend"),
  ("BESTFRIEND", "Friend"),
  ("BestFriend", "Friend"),
  ("BESTfriend", "Friend"),
  ("Bestfriend", "Friend"),
  ("bestie", "Friend"),
  ("Bestie", "Friend"),
  ("BESTIE", "Friend"),
  ("besties", "Friend"),
  ("Besties", "Friend"),
  ("BESTIES", "Friend"),
  ("bestfriends", "Friend"),
  ("Bestfriends", "Friend"),
  ("BESTFRIENDS", "Friend"),
  ("beztfriend", "Friend"),
  ("bf", "Friend"),
  ("BF", "Friend"),
  ("Bf", "Friend"),
  ("bff", "Friend"),
  ("Bff", "Friend"),
  ("BFF", "Friend"),
  ("bloke", "Friend"),
  ("boy", "Acquaintance"),
  ("BOY", "Acquaintance"),
  ("Boy", "Acquaintance"),
  ("boys", "Acquaintance"),
  ("BOYS", "Acquaintance"),
  ("Boys", "Acquaintance"),
  ("boyfriends", "Friend"),
  ("BOYFRIENDS", "Friend"),
  ("Boyfriends", "Friend"),
  ("boyfriend", "Friend"),
  ("BOYFRIEND", "Friend"),
  ("Boyfriend", "Friend"),
  ("boy friends", "Friend"),
  ("BOY FRIENDS", "Friend"),
  ("Boy friends", "Friend"),
  ("Boy Friends", "Friend"),
  ("boy friend", "Friend"),
  ("BOY FRIEND", "Friend"),
  ("Boy friend", "Friend"),
  ("Boy Friend", "Friend"),
  ("bride", "Wife"),
  ("Bride", "Wife"),
  ("BRIDE", "Wife"),
  ("bro", "Friend"),
  ("Bro", "Friend"),
  ("BRO", "Friend"),
  ("brothers", "Brother"),
  ("Brothers", "Brother"),
  ("BROTHERS", "Brother"),
  ("bros", "Friend"),
  ("Bros", "Friend"),
  ("BROS", "Friend"),
  ("buddy", "Friend"),
  ("Buddy", "Friend"),
  ("BUDDY", "Friend"),
  ("buddies", "Friend"),
  ("Buddies", "Friend"),
  ("BUDDIES", "Friend"),
  ("classmates", "Classmate"),
  ("Classmates", "Classmate"),
  ("CLASSMATES", "Classmate"),
  ("coworker", "Colleague"),
  ("Coworker", "Colleague"),
  ("COWORKER", "Colleague"),
  ("co-worker", "Colleague"),
  ("Co-worker", "Colleague"),
  ("CO-WORKER", "Colleague"),
  ("Co-Worker", "Colleague"),
  ("crew", "Teammate"),
  ("Crew", "Teammate"),
  ("CREW", "Teammate"),
  ("daddy", "Father"),
  ("Daddy", "Father"),
  ("DADDY", "Father"),
  ("dad", "Father"),
  ("Dad", "Father"),
  ("DAD", "Father"),
  ("dawg", "Friend"),
  ("Dawg", "Friend"),
  ("DAWG", "Friend"),
  ("DUDE", "Friend"),
  ("dude", "Friend"),
  ("Dude", "Friend"),
  ("DUDES", "Friend"),
  ("dudes", "Friend"),
  ("Dudes", "Friend"),
  ("fam", "Friend"),
  ("Fam", "Friend"),
  ("FAM", "Friend"),
  ("fella", "Friend"),
  ("Fella", "Friend"),
  ("FELLA", "Friend"),
  ("fellas", "Friend"),
  ("Fellas", "Friend"),
  ("FELLAS", "Friend"),
  ("fellow", "Friend"),
  ("Fellow", "Friend"),
  ("FELLOW", "Friend"),
  ("fellows", "Friend"),
  ("Fellows", "Friend"),
  ("FELLOWS", "Friend"),
  ("followers", "Follower"),
  ("Followers", "Follower"),
  ("FOLLOWERS", "Follower"),
  ("friends", "Friend"),
  ("Friends", "Friend"),
  ("FRIENDS", "Friend"),
  ("gal", "Acquaintance"),
  ("gf", "Friend"),
  ("GF", "Friend"),
  ("girl", "Acquaintance"),
  ("GIRL", "Acquaintance"),
  ("Girl", "Acquaintance"),
  ("girlfriends", "Friend"),
  ("GIRLFRIENDS", "Friend"),
  ("Girlfriends", "Friend"),
  ("girlfriend", "Friend"),
  ("GIRLFRIEND", "Friend"),
  ("Girlfriend", "Friend"),
  ("girl friends", "Friend"),
  ("GIRL FRIENDS", "Friend"),
  ("Girl friends", "Friend"),
  ("Girl Friends", "Friend"),
  ("girl friend", "Friend"),
  ("GIRL FRIEND", "Friend"),
  ("Girl friend", "Friend"),
  ("Girl Friend", "Friend"),
  ("girls", "Acquaintance"),
  ("GIRLS", "Acquaintance"),
  ("Girls", "Acquaintance"),
  ("gal pal", "Friend"),
  ("Gal Pal", "Friend"),
  ("GAL PAL", "Friend"),
  ("gal pals", "Friend"),
  ("Gal Pals", "Friend"),
  ("GAL PALS", "Friend"),
  ("GRANDDAD", "Grand Father"),
  ("granddad", "Grand Father"),
  ("Granddad", "Grand Father"),
  ("GRANDDAU", "Grand Daughter"),
  ("granddau", "Grand Daughter"),
  ("Granddau", "Grand Daughter"),
  ("GRANDM", "Grand Mother"),
  ("grandm", "Grand Mother"),
  ("Grandm", "Grand Mother"),
  ("GRANDPA", "Grand Father"),
  ("grandpa", "Grand Father"),
  ("Grandpa", "Grand Father"),
  ("homie", "Friend"),
  ("Homie", "Friend"),
  ("HOMIE", "Friend"),
  ("homies", "Friend"),
  ("Homies", "Friend"),
  ("HOMIES", "Friend"),
  ("hubby", "Husband"),
  ("HUBBY", "Husband"),
  ("Hubby", "Husband"),
  ("instructor", "Tutor"),
  ("INSTRUCTOR", "Tutor"),
  ("lad", "Son"),
  ("lady", "Friend"),
  ("LADY", "Friend"),
  ("Lady", "Friend"),
  ("ladies", "Acquaintance"),
  ("LADIES", "Acquaintance"),
  ("Ladies", "Acquaintance"),
  ("man", "Friend"),
  ("MAN", "Friend"),
  ("Man", "Friend"),
  ("manager", "Colleague"),
  ("MANAGER", "Colleague"),
  ("Manager", "Colleague"),
  ("Mgr", "Colleague"),
  ("mgr", "Colleague"),
  ("MGR", "Colleague"),
  ("momma", "Mother"),
  ("MOMMA", "Mother"),
  ("Momma", "Mother"),
  ("mommy", "Mother"),
  ("MOMMY", "Mother"),
  ("Mommy", "Mother"),
  ("mum", "Mother"),
  ("MUM", "Mother"),
  ("Mum", "Mother"),
  ("mom", "Mother"),
  ("MOM", "Mother"),
  ("Mom", "Mother"),
  ("mummy", "Mother"),
  ("MUMMY", "Mother"),
  ("Mummy", "Mother"),
  ("pal", "Friend"),
  ("PALS", "Friend"),
  ("Pal", "Friend"),
  ("pals", "Friend"),
  ("papa", "Father"),
  ("peer", "Colleague"),
  ("Peer", "Colleague"),
  ("PEER", "Colleague"),
  ("pops", "Father"),
  ("sir", "Tutor"),
  ("SIR", "Tutor"),
  ("Sir", "Tutor"),
  ("subordinate", "Colleague"),
  ("Subordinate", "Colleague"),
  ("SUBORDINATE", "Colleague"),
  ("Instructor", "Tutor"),
  ("Trainer", "Tutor"),
  ("trainer", "Tutor"),
  ("TRAINER", "Tutor"),
  ("Professor", "Tutor"),
  ("professor", "Tutor"),
  ("PROFESSOR", "Tutor"),
  ("roomie", "Roommate"),
  ("Roomie", "Roommate"),
  ("ROOMIE", "Roommate"),
  ("roomies", "Roommate"),
  ("Roomies", "Roommate"),
  ("ROOMIES", "Roommate"),
  ("sis", "Sister"),
  ("Sis", "Sister"),
  ("SIS", "Sister"),
  ("senior", "Acquaintance"),
  ("Senior", "Acquaintance"),
  ("SENIOR", "Acquaintance"),
  ("seniors", "Acquaintance"),
  ("Seniors", "Acquaintance"),
  ("SENIORS", "Acquaintance"),
  ("sisters", "Sister"),
  ("Sisters", "Sister"),
  ("SISTERS", "Sister"),
  ("STEPFAT", "Step Father"),
  ("STEPMOT", "Step Mother"),
  ("team", "Teammate"),
  ("Team", "Teammate"),
  ("TEAM", "Teammate"),
  ("twin", "Sibling"),
  ("Twin", "Sibling"),
  ("TWIN", "Sibling"),
  ("twinn", "Sibling"),
  ("Twinn", "Sibling"),
  ("TWINN", "Sibling"),
  ("wifey", "Wife"),
  ("WIFEY", "Wife"),
  ("Wifey", "Wife"),
  ("WIVE", "Wife"),
  ("Wive", "Wife"),
  ("wive", "Wife"),
  ("woman", "Wife"),
  ("Woman", "Wife"),
  ("WOMAN", "Wife")
);
$SlangToRelation = TableScan("SlangToRelation");
CreateTable("ME_LA_AliasToNormalized_Cities",
  (
    "alias" => "Text",
    "norm" => "Text"
  ),
  ("NEW YORK", "NEW YORK CITY"),
  ("BIG APPLE", "NEW YORK CITY"),
  ("NYC", "NEW YORK CITY"),
  ("MANHATTEN", "NEW YORK CITY"),
  ("MANHATTAN", "NEW YORK CITY"),
  ("LONG ISLAND", "NEW YORK CITY"),
  ("BROOKLYN", "NEW YORK CITY"),
  ("HARLEM", "NEW YORK CITY"),
  ("QUEENS", "NEW YORK CITY"),
  ("BRONX", "NEW YORK CITY"),
  ("STATEN ISLAND", "NEW YORK CITY"),
  ("SF", "SAN FRANCISCO"),
  ("BAY AREA", "SAN FRANCISCO"),
  ("FRISCO", "SAN FRANCISCO"),
  ("SAN FRAN", "SAN FRANCISCO"),
  ("CITY OF ANGELS", "LOS ANGELES"),
  ("L.A.", "LOS ANGELES"),
  ("HOLLYWOOD", "LOS ANGELES"),
  ("PHILLY", "PHILADELPHIA"),
  ("VEGAS", "LAS VEGAS")
);
$ME_LA_AliasToNormalized_Cities = TableScan("ME_LA_AliasToNormalized_Cities");
CreateTable("AliasToBaseball",
  (
    "alias" => "Text",
    "norm" => "Text"
  ),
  ("#orioles", "Baltimore Orioles"),
  ("#yankees", "Yankees"),
  ("#tampabayrays", "Tampa Bay Rays"),
  ("#bluejays", "Toronto Blue Jays"),
  ("#clevelandindians", "Cleveland Indians"),
  ("#cleveland#indians", "Cleveland Indians"),
  ("#dbacks", "Arizona Diamondbacks"),
  ("#giants", "Giants"),
  ("#sfgiants", "Giants"),
  ("#seattlemariners", "Seattle Mariners"),
  ("#cardinals", "Louis Cardinals"),
  ("#dodgers", "Dodgers")
);
$AliasToBaseball = TableScan("AliasToBaseball");
CreateTable("ME_Movies_Name2Nick_Map",
  (
    "formalName" => "Text",
    "nick" => "Text"
  ),
  ("A Warrior's Heart", "A Warrior's Heart"),
  ("A Warrior's Heart", "Warrior's Heart"),
  ("A Warrior's Heart", "Warriors Heart"),
  ("Answers to Nothing", "Answers to Nothing"),
  ("Outrage", "Outrage"),
  ("Pastorela", "Pastorela"),
  ("Redline", "Redline"),
  ("Sleeping Beauty", "Sleeping Beauty"),
  ("New Year's Eve", "New Year's Eve"),
  ("The Sitter", "The Sitter"),
  ("I Melt With You", "I Melt With You"),
  ("In Darkness", "In Darkness"),
  ("Ladies Vs. Ricky Bahl", "Ladies Vs. Ricky Bahl"),
  ("Ladies Vs. Ricky Bahl", "Ladies Vs Ricky Bahl"),
  ("Tinker, Tailor, Soldier, Spy", "Tinker, Tailor, Soldier, Spy"),
  ("Tinker, Tailor, Soldier, Spy", "Tinker, Tailor"),
  ("Tinker, Tailor, Soldier, Spy", "Tinker Tailor"),
  ("We Need To Talk About Kevin", "We Need To Talk About Kevin"),
  ("Young Adult", "Young Adult"),
  ("Addiction Incorporated", "Addiction Incorporated"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Alvin and the Chipmunks:  Chipwrecked"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Alvin and the Chipmunks"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Chipwrecked"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Alvin & the Chipmunks"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Alvin and the Chipmunks - Chipwrecked"),
  ("Sherlock Holmes: A Game of Shadows", "Sherlock Holmes: A Game of Shadows"),
  ("Sherlock Holmes: A Game of Shadows", "A Game of Shadows"),
  ("Sherlock Holmes: A Game of Shadows", "Sherlock Holmes 2"),
  ("Sherlock Holmes: A Game of Shadows", "Sherlock Holmes 2: A Game of Shadows"),
  ("Sherlock Holmes: A Game of Shadows", "Sherlock Holmes: A Game and Shadows"),
  ("Carnage", "Carnage"),
  ("Cook County", "Cook County"),
  ("Corman's World: Exploits of a Hollywood Rebel�", "Corman's World: Exploits of a Hollywood Rebel�"),
  ("Corman's World: Exploits of a Hollywood Rebel�", "Corman's World"),
  ("Mission:  Impossible - Ghost Protocol", "Mission:  Impossible - Ghost Protocol"),
  ("Mission:  Impossible - Ghost Protocol", "Mission Impossible"),
  ("Mission:  Impossible - Ghost Protocol", "Ghost Protocol"),
  ("Mission:  Impossible - Ghost Protocol", "MI4"),
  ("Mission:  Impossible - Ghost Protocol", "MI 4"),
  ("Mission:  Impossible - Ghost Protocol", "Mission Impossible Ghost Protocol"),
  ("Mission:  Impossible - Ghost Protocol", "MI4GP"),
  ("Mission:  Impossible - Ghost Protocol", "Mission Impossible: Ghost Protocol"),
  ("Mission:  Impossible - Ghost Protocol", "Mission Impossible - Ghost Protocol"),
  ("The Girl With The Dragon Tattoo", "The Girl With The Dragon Tattoo"),
  ("The Girl With The Dragon Tattoo", "Dragon Tattoo"),
  ("The Adventures of Tintin", "The Adventures of Tintin"),
  ("The Adventures of Tintin", "Tintin"),
  ("The Adventures of Tintin", "Tin Tin"),
  ("Albert Nobbs", "Albert Nobbs"),
  ("We Bought A Zoo", "We Bought A Zoo"),
  ("Don 2", "Don 2"),
  ("In The Land of Blood and Honey", "In The Land of Blood and Honey"),
  ("In The Land of Blood and Honey", "Blood and Honey"),
  ("Pina", "Pina"),
  ("The Darkest Hour", "The Darkest Hour"),
  ("War Horse", "War Horse"),
  ("Extremely Loud and Incredibly Close", "Extremely Loud and Incredibly Close"),
  ("Pariah", "Pariah"),
  ("A Separation", "A Separation"),
  ("Angels Crest", "Angels Crest"),
  ("The Iron Lady", "The Iron Lady"),
  ("The Iron Lady", "Iron Lady"),
  ("The Iron Lady", "the iron lady"),
  ("The Iron Lady", "ironlady"),
  ("Loosies", "Loosies"),
  ("The Devil Inside", "The Devil Inside"),
  ("The Devil Inside", "Devil Inside"),
  ("The Devil Inside", "devilinside"),
  ("The Devil Inside", "thedevilinside"),
  ("Beneath the Darkness", "Beneath the Darkness"),
  ("Roadie", "Roadie"),
  ("The Divide", "The Divide"),
  ("Beauty and the Beast 3D", "Beauty and the Beast 3D"),
  ("Joyful Noise", "Joyful Noise"),
  ("Underworld:  Awakening", "Underworld:  Awakening"),
  ("Red Tails", "Red Tails"),
  ("Coriolanus", "Coriolanus"),
  ("Haywire", "Haywire"),
  ("16-Love", "16-Love"),
  ("16-Love", "16 Love"),
  ("16-Love", "16Love"),
  ("One For the Money", "One For the Money"),
  ("The Grey", "The Grey"),
  ("The Grey", "thegrey"),
  ("Touchback", "Touchback"),
  ("Chronicle", "Chronicle"),
  ("The Woman in Black", "The Woman in Black"),
  ("The Woman in Black", "thewomaninblack"),
  ("The Woman in Black", "womaninblack"),
  ("The Innkeepers", "The Innkeepers"),
  ("Big Miracle", "Big Miracle"),
  ("Journey 2:  The Mysterious Island", "Journey 2:  The Mysterious Island"),
  ("Journey 2:  The Mysterious Island", "Journey 2"),
  ("Journey 2:  The Mysterious Island", "Journey2"),
  ("Safe House", "Safe House"),
  ("The Vow", "The Vow"),
  ("The Vow", "thevow"),
  ("Perfect Sense", "Perfect Sense"),
  ("Ghost Rider:  Spirit of Vengeance", "Ghost Rider:  Spirit of Vengeance"),
  ("Ghost Rider:  Spirit of Vengeance", "Ghost Rider"),
  ("Ghost Rider:  Spirit of Vengeance", "ghostrider"),
  ("This Means War", "This Means War"),
  ("The Secret World of Arrietty", "The Secret World of Arrietty"),
  ("The Secret World of Arrietty", "Arrietty"),
  ("The Secret World of Arrietty", "Ariety"),
  ("The Secret World of Arrietty", "Arriety"),
  ("The Secret World of Arrietty", "Arietty"),
  ("Act of Valor", "Act of Valor"),
  ("Act of Valor", "actofvalor"),
  ("Lookout", "Lookout"),
  ("Wanderlust", "Wanderlust"),
  ("Good Deeds", "Good Deeds"),
  ("Playback", "Playback"),
  ("Hansel and Gretel:  Witch Hunters", "Hansel and Gretel:  Witch Hunters"),
  ("Hansel and Gretel:  Witch Hunters", "Witch Hunters"),
  ("Hansel and Gretel:  Witch Hunters", "Hansel and Gretel"),
  ("Project X", "Project X"),
  ("Project X", "ProjectX"),
  ("Dr. Seuss' The Lorax", "Dr. Seuss' The Lorax"),
  ("Dr. Seuss' The Lorax", "The Lorax"),
  ("Jeff Who Lives at Home", "Jeff Who Lives at Home"),
  ("Being Flynn", "Being Flynn"),
  ("John Carter", "John Carter"),
  ("John Carter", "johncarter"),
  ("John Carter", "John Carter of Mars"),
  ("John Carter", "JC Movie"),
  ("John Carter", "JCoM"),
  ("John Carter", "johncarterofmars"),
  ("The Raven", "The Raven"),
  ("Silent House", "Silent House"),
  ("Silent House", "silenthouse"),
  ("Think Like a Man", "Think Like a Man"),
  ("Salmon Fishing in the Yemen", "Salmon Fishing in the Yemen"),
  ("Jiro Dreams of Sushi", "Jiro Dreams of Sushi"),
  ("21 Jump Street", "21 Jump Street"),
  ("21 Jump Street", "21Jump St"),
  ("21 Jump Street", "21 Jump St"),
  ("21 Jump Street", "21 JumpStreet"),
  ("Mirror Mirror", "Mirror Mirror"),
  ("Butter", "Butter"),
  ("Casa de Mi Padre", "Casa de Mi Padre"),
  ("The Hunger Games", "The Hunger Games"),
  ("The Hunger Games", "Hunger Games"),
  ("The Hunger Games", "HungerGames"),
  ("The Hunger Games", "theHungerGames"),
  ("Wrath of the Titans", "Wrath of the Titans"),
  ("Wrath of the Titans", "WrathOfTheTitans"),
  ("The Deep Blue Sea", "The Deep Blue Sea"),
  ("Snowtown", "Snowtown"),
  ("Dorothy of Oz", "Dorothy of Oz"),
  ("Intruders", "Intruders"),
  ("Intent", "Intent"),
  ("Iron Sky", "Iron Sky"),
  ("American Reunion", "American Reunion"),
  ("Damsels in Distress", "Damsels in Distress"),
  ("The Cold Light of Day", "The Cold Light of Day"),
  ("The Three Stooges", "The Three Stooges"),
  ("The Cabin In The Woods", "The Cabin In The Woods"),
  ("Bullet To The Head", "Bullet To The Head"),
  ("Scary Movie 5", "Scary Movie 5"),
  ("Scary Movie 5", "Scary Movie5"),
  ("Scary Movie 5", "Scary MovieV"),
  ("Scary Movie 5", "Scary Movie V"),
  ("House at the End of the Street", "House at the End of the Street"),
  ("Seeking a Friend for the End of the World", "Seeking a Friend for the End of the World"),
  ("The Lucky One", "The Lucky One"),
  ("Chimpanzee", "Chimpanzee"),
  ("Darling Companion", "Darling Companion"),
  ("The Five-Year Engagement", "The Five-Year Engagement"),
  ("The Five-Year Engagement", "The five year engagement"),
  ("Safe", "Safe"),
  ("The Avengers", "The Avengers"),
  ("The Avengers", "theavengers"),
  ("The Best Exotic Marigold Hotel", "The Best Exotic Marigold Hotel"),
  ("The Best Exotic Marigold Hotel", "Marigold Hotel"),
  ("Dark Shadows", "Dark Shadows"),
  ("The Dictator", "The Dictator"),
  ("What to Expect When You're Expecting", "What to Expect When You're Expecting"),
  ("Battleship", "Battleship"),
  ("Men In Black III", "Men In Black III"),
  ("Men In Black III", "MIB III"),
  ("Men In Black III", "MIB 3"),
  ("Men In Black III", "MIB3"),
  ("Men In Black III", "MIBIII"),
  ("Brave", "Brave"),
  ("Brave", "#Brave"),
  ("G.I. Joe:  Retaliation", "G.I. Joe:  Retaliation"),
  ("G.I. Joe:  Retaliation", "G.I. Joe 2"),
  ("G.I. Joe:  Retaliation", "GI Joe"),
  ("G.I. Joe:  Retaliation", "G.I. Joe Retaliation"),
  ("G.I. Joe:  Retaliation", "GI Joe Retaliation"),
  ("Snow White and the Huntsman", "Snow White and the Huntsman"),
  ("Titanic in 3D", "Titanic in 3D"),
  ("Titanic in 3D", "Titanic"),
  ("The Dark Knight Rises", "The Dark Knight Rises"),
  ("The Dark Knight Rises", "Dark Knight Rises"),
  ("The Amazing Spider-man", "The Amazing Spider-man"),
  ("The Amazing Spider-man", "Amazing Spider-man"),
  ("The Amazing Spider-man", "amazing spiderman"),
  ("Man on a Ledge", "Man on a Ledge")
);
$ME_Movies_Name2Nick_Map = TableScan("ME_Movies_Name2Nick_Map");
CreateTable("ME_LA_AliasToNormalized_NonUSCities",
  (
    "alias" => "Text",
    "norm" => "Text"
  ),
  ("WIEN", "VIENNA"),
  ("VIENA", "VIENNA"),
  ("JO'BURG", "JOHANNESBURG"),
  ("BOM", "MUMBAI")
);
$ME_LA_AliasToNormalized_NonUSCities = TableScan("ME_LA_AliasToNormalized_NonUSCities");
CreateTable("ME_Movies2Writer_Map",
  (
    "formalName" => "Text",
    "writer" => "Text"
  ),
  ("A Warrior's Heart", "Martin Dugard"),
  ("Answers to Nothing", "Matther Leutwyler"),
  ("Answers to Nothing", "Gillian Vigman"),
  ("Outrage", "Takeshi Kitano"),
  ("Pastorela", "Emilio Portes"),
  ("Redline", "Katsuhito Ishii"),
  ("Redline", "Yoji Enokido"),
  ("Redline", "Yoshiki Sakurai"),
  ("Sleeping Beauty", "Julia Leigh"),
  ("New Year's Eve", "Katherine Fugate"),
  ("The Sitter", "Brian Gatewood"),
  ("The Sitter", "Alessandro Tanaka"),
  ("Catch.44", "Malin Akerman / Tes"),
  ("Catch.44", "Nikki Reed / Kara"),
  ("Catch.44", "Deborah Ann Woll / Dawn"),
  ("I Melt With You", "Mark Porter"),
  ("In Darkness", "Robert Marshall"),
  ("In Darkness", "David F. Shamoon"),
  ("Ladies Vs. Ricky Bahl", "Aditya Chopra"),
  ("Ladies Vs. Ricky Bahl", "Devika Bhagat"),
  ("Tinker, Tailor, Soldier, Spy", "John le Carre"),
  ("Tinker, Tailor, Soldier, Spy", "Bridget O'Connor"),
  ("Tinker, Tailor, Soldier, Spy", "Peter Straughan"),
  ("We Need To Talk About Kevin", "Lynne Ramsay"),
  ("We Need To Talk About Kevin", "Rory Kinnear"),
  ("We Need To Talk About Kevin", "Lionel Shriver"),
  ("Young Adult", "Diablo Cody"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Jonathan Aibel"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Glenn Berger"),
  ("Sherlock Holmes: A Game of Shadows", "Michele Mulroney"),
  ("Sherlock Holmes: A Game of Shadows", "Kieran Mulroney"),
  ("Sherlock Holmes: A Game of Shadows", "Arthus Conan Doyle"),
  ("Carnage", "Roman Polanski"),
  ("Carnage", "Yasmina Reza"),
  ("Cook County", "David Pomes"),
  ("Corman's World: Exploits of a Hollywood Rebel�", "Alex Stapleton"),
  ("Corman's World: Exploits of a Hollywood Rebel�", "Gregory Locklear"),
  ("Mission:  Impossible - Ghost Protocol", "Josh Appelbaum"),
  ("Mission:  Impossible - Ghost Protocol", "Andre Nemec"),
  ("The Girl With The Dragon Tattoo", "Steven Zaillian"),
  ("The Adventures of Tintin", "Steven Moffat"),
  ("Albert Nobbs", "Glenn Close"),
  ("Albert Nobbs", "John Banville"),
  ("Albert Nobbs", "George Moore"),
  ("We Bought A Zoo", "Cameron Crowe"),
  ("We Bought A Zoo", "Aline Brosh McKenna"),
  ("Don 2", "Farhan Akhtar"),
  ("Don 2", "Javed Akhtar"),
  ("Don 2", "Salim Khan"),
  ("In The Land of Blood and Honey", "Angelina Jolie"),
  ("Pina", "Wim Wenders"),
  ("The Darkest Hour", "Jon Spaihts"),
  ("The Darkest Hour", "Leslie Bohem"),
  ("War Horse", "Lee Hall"),
  ("Extremely Loud and Incredibly Close", "Eric Roth"),
  ("Extremely Loud and Incredibly Close", "Jonathan Safran Foer"),
  ("Newlyweds", "Edward Burns / Fuzzy"),
  ("Newlyweds", "Kerry Bishe / Linda"),
  ("Newlyweds", "Caitlin Fitzgerald / Katie"),
  ("Pariah", "Dee Rees"),
  ("A Separation", "Asghar Farhadi"),
  ("Angels Crest", "Catherine Trieschmann"),
  ("Angels Crest", "Leslie Schwartz"),
  ("The Iron Lady", "Abi Morgan "),
  ("Loosies", "Peter Facinelli"),
  ("The Devil Inside", "William Brent Bell"),
  ("The Devil Inside", "Matthew Peterman"),
  ("Beneath the Darkness", "Bruce Wilkinson"),
  ("Roadie", "Gerald Cuesta"),
  ("Roadie", "Michael Cuesta"),
  ("Contraband", "Aaron Guzikowski"),
  ("Contraband", "Arnaldur Indri�ason"),
  ("The Divide", "Karl Mueller"),
  ("The Divide", "Eron Sheean"),
  ("Joyful Noise", "Todd Graff"),
  ("Underworld:  Awakening", "Len Wiseman"),
  ("Underworld:  Awakening", "John Hlavin"),
  ("Underworld:  Awakening", "J. Michael Straczynski"),
  ("Underworld:  Awakening", "Allison Burnett"),
  ("Underworld:  Awakening", "Len Wiseman"),
  ("Red Tails", "John Ridley"),
  ("Red Tails", "Aaron McGuder"),
  ("Red Tails", "John Ridley"),
  ("Red Tails", "Goerge Lucas"),
  ("Coriolanus", "John Logan"),
  ("Coriolanus", "William Shakespeare"),
  ("Haywire", "Lem Dobbs"),
  ("16-Love", "Leigh Dunlap"),
  ("One For the Money", "Stacey Sherman"),
  ("One For the Money", "Karen Ray"),
  ("One For the Money", "Liz Brixius"),
  ("One For the Money", "Janet Evanovich"),
  ("The Grey", "Joe Carnahan"),
  ("The Grey", "Ian Mackenzie Jeffers"),
  ("Touchback", "Don Handfield"),
  ("Chronicle", "Max Landis"),
  ("Chronicle", "Josh Track"),
  ("Chronicle", "Max Landis"),
  ("The Woman in Black", "Jane Goldman"),
  ("The Woman in Black", "Susan Hil"),
  ("The Innkeepers", "Ti West"),
  ("Big Miracle", "Jack Amiel"),
  ("Big Miracle", "Michael Begler"),
  ("Big Miracle", "Thomas Rose"),
  ("Journey 2:  The Mysterious Island", "Brian Gunn"),
  ("Journey 2:  The Mysterious Island", "Mark Gunn"),
  ("Journey 2:  The Mysterious Island", "Richard Outten"),
  ("Journey 2:  The Mysterious Island", "Brian Gunn"),
  ("Journey 2:  The Mysterious Island", "Mark Gunn"),
  ("Journey 2:  The Mysterious Island", "Jules Verne"),
  ("Safe House", "David Guggenheim"),
  ("The Vow", "Jason Katims"),
  ("The Vow", "Abby Kohn"),
  ("The Vow", "Marc Silverstein"),
  ("The Vow", "Michael Sucsy"),
  ("Perfect Sense", "Kim Fupz Aakeson"),
  ("Ghost Rider:  Spirit of Vengeance", "Scott M. Gimple"),
  ("Ghost Rider:  Spirit of Vengeance", "Seth Hoffman"),
  ("Ghost Rider:  Spirit of Vengeance", "David S. Goyer"),
  ("Ghost Rider:  Spirit of Vengeance", "David S. Goyer"),
  ("This Means War", "Timothy Dowling"),
  ("This Means War", "Simon Kinberg"),
  ("This Means War", "Timothy Dowling"),
  ("This Means War", "Marcus Gautesen"),
  ("The Secret World of Arrietty", "Hayao Miyazaki"),
  ("The Secret World of Arrietty", "Keiko Niwa"),
  ("The Secret World of Arrietty", "Karey Kirkpatrick"),
  ("The Secret World of Arrietty", "Mary Norton"),
  ("The Lady", "Michelle Yeoh / Aung San Suu Kyi"),
  ("The Lady", "David Thewlis / Michael Aris"),
  ("The Lady", "Jonathan Raggett / Kim Aris"),
  ("Act of Valor", "Kurt Johnstad"),
  ("Wanderlust", "David Wain"),
  ("Wanderlust", "Ken Marino"),
  ("Good Deeds", "Tyler Perry"),
  ("Playback", "Erik Lee"),
  ("Playback", "David Neiden"),
  ("Playback", "Michael A. Nickles"),
  ("Playback", "Kevyn Settle"),
  ("Playback", "Kevyn Settle"),
  ("Hansel and Gretel:  Witch Hunters", "Dante Harper"),
  ("Hansel and Gretel:  Witch Hunters", "Tommy Wirkola"),
  ("Project X", "Matt Drake"),
  ("Project X", "Michael Bacall"),
  ("Project X", "Michael Bacall"),
  ("Dr. Seuss' The Lorax", "Ken Daurio"),
  ("Dr. Seuss' The Lorax", "Cinco Paul"),
  ("Dr. Seuss' The Lorax", "Dr. Seuss"),
  ("Jeff Who Lives at Home", "Jay Duplass"),
  ("Jeff Who Lives at Home", "Mark Duplass"),
  ("Being Flynn", "Paul Weitz"),
  ("Being Flynn", "Nick Flynn"),
  ("John Carter", "Andrew Stanton"),
  ("John Carter", "Mark Andrews"),
  ("John Carter", "Michael Chabon"),
  ("John Carter", "Edgar Rice Burroughs"),
  ("The Raven", "Ben Livingston"),
  ("The Raven", "Hannah Shakespeare"),
  ("Silent House", "Laura Lau"),
  ("Silent House", "Gustavo Hernandez"),
  ("Think Like a Man", "Keith Merryman"),
  ("Think Like a Man", "David A. Newman"),
  ("Think Like a Man", "Steve Harvey"),
  ("Playing the Field", "Robbie Fox"),
  ("Salmon Fishing in the Yemen", "Simon Beaufoy"),
  ("Salmon Fishing in the Yemen", "Paul Torday"),
  ("Footnote", "Joseph Cedar"),
  ("21 Jump Street", "Michael Bacall"),
  ("21 Jump Street", "Jonah Hill"),
  ("Mirror Mirror", "Melissa Wallack"),
  ("Mirror Mirror", "Jason Keller"),
  ("Mirror Mirror", "Jacob Grimm"),
  ("Mirror Mirror", "Wilhelm Grimm"),
  ("Seeking Justice", "Robert Tannen"),
  ("Seeking Justice", "Robert Tannen"),
  ("Seeking Justice", "Todd Hickey"),
  ("Butter", "Jason A. Micallef"),
  ("Casa de Mi Padre", "Andrew Steele"),
  ("The Hunger Games", "Gary Ross"),
  ("The Hunger Games", "Billy Ray"),
  ("The Hunger Games", "Suzanne Collins"),
  ("A Thousand Words", "Steve Koren"),
  ("Wrath of the Titans", "Dan Mazeau"),
  ("Wrath of the Titans", "David Johnson"),
  ("Wrath of the Titans", "Greg Berlanti"),
  ("Wrath of the Titans", "Dan Mazeau"),
  ("Wrath of the Titans", "David Johnson"),
  ("The Deep Blue Sea", "Terence Davies"),
  ("The Deep Blue Sea", "Terence Rattigan"),
  ("Goon", "Jay Baruchel"),
  ("Goon", "Evan Goldberg"),
  ("Goon", "Adam Frattasio"),
  ("Goon", "Doug Smith"),
  ("Snowtown", "Shaun Grant"),
  ("Snowtown", "Shaun Grant"),
  ("Snowtown", "Justin Kurzel"),
  ("Snowtown", "Debi Marshall"),
  ("Snowtown", "Andrew McGarry"),
  ("Dorothy of Oz", "Adam Balsam"),
  ("Dorothy of Oz", "Barry Glasser"),
  ("Dorothy of Oz", "Randi Barnes"),
  ("Dorothy of Oz", "Roger S. Baum"),
  ("Intruders", "Nicolas Casariego"),
  ("Intruders", "Jaime Marques"),
  ("Iron Sky", "Johanna Sinisalo"),
  ("Iron Sky", "Michael Kalesniko"),
  ("Iron Sky", "Jarmo Puskala"),
  ("American Reunion", "Jon Hurwitz"),
  ("American Reunion", "Adam Schlossberg"),
  ("American Reunion", "Adam Herz"),
  ("Damsels in Distress", "Whit Stillman"),
  ("The Cold Light of Day", "Scott Wiper"),
  ("The Cold Light of Day", "John Petro"),
  ("The Three Stooges", "Bobby Farrelly"),
  ("The Three Stooges", "Peter Farrelly"),
  ("The Three Stooges", "Mike Cerrone"),
  ("The Cabin In The Woods", "Joss Whedon"),
  ("The Cabin In The Woods", "Drew Goddard"),
  ("Bullet To The Head", "Walter Hill"),
  ("Bullet To The Head", "Alessandro Camon"),
  ("Bullet To The Head", "Alexis Nolent"),
  ("Scary Movie 5", "John Aboud"),
  ("Scary Movie 5", "Michael Colton"),
  ("Scary Movie 5", "Stephen Leff"),
  ("House at the End of the Street", "David Loucka"),
  ("House at the End of the Street", "Jonathan Mostow"),
  ("Seeking a Friend for the End of the World", "Lorene Scafaria"),
  ("The Lucky One", "Will Fetters"),
  ("The Lucky One", "Nicholas Sparks"),
  ("Darling Companion", "Lawrence Kasdan"),
  ("Darling Companion", "Meg Kasdan"),
  ("The Five-Year Engagement", "Nicholas Stoller"),
  ("The Five-Year Engagement", "Jason Segel"),
  ("Safe", "Boaz Yakin"),
  ("The Avengers", "Zak Penn"),
  ("The Avengers", "Joss Whedon"),
  ("The Best Exotic Marigold Hotel", "Ol Parker"),
  ("The Best Exotic Marigold Hotel", "Deborah Moggach"),
  ("Dark Shadows", "Seth Grahame-Smith"),
  ("Dark Shadows", "Dan Curtis"),
  ("The Dictator", "Sacha Baron Cohen"),
  ("The Dictator", "Alec Berg"),
  ("The Dictator", "David mandel"),
  ("The Dictator", "Jeff Schaffer"),
  ("What to Expect When You're Expecting", "Shauna Cross"),
  ("What to Expect When You're Expecting", "Heather Hach"),
  ("What to Expect When You're Expecting", "Heidi Murkoff"),
  ("Battleship", "Erich Hoeber"),
  ("Battleship", "Jon Hoeber"),
  ("Men In Black III", "Etan Cohen"),
  ("Men In Black III", "David Koepp"),
  ("Men In Black III", "Jeff Nathanson"),
  ("Men In Black III", "Michael Soccio"),
  ("Men In Black III", "Lowell Cunningham"),
  ("Moonrise Kingdom", "Wes Anderson"),
  ("Moonrise Kingdom", "Roman Coppola"),
  ("Brave", "Brenda Chapman"),
  ("Brave", "Irene Mecchi"),
  ("G.I. Joe:  Retaliation", "Rhett Reese"),
  ("G.I. Joe:  Retaliation", "Paul Wernick"),
  ("Snow White and the Huntsman", "Hossein Amini"),
  ("Snow White and the Huntsman", "Evan Daugherty"),
  ("Snow White and the Huntsman", "Evan Spilotopolous"),
  ("Titanic in 3D", "James Cameron"),
  ("The Dark Knight Rises", "Christopher Nolan"),
  ("The Dark Knight Rises", "Jonathan Nolan"),
  ("The Dark Knight Rises", "Christopher Nolan"),
  ("The Dark Knight Rises", "David S. Goyer"),
  ("The Dark Knight Rises", "Bob Kane"),
  ("The Amazing Spider-man", "Alvin Sargent"),
  ("The Amazing Spider-man", "Steve Kloves"),
  ("The Amazing Spider-man", "James Vanderbilt"),
  ("The Amazing Spider-man", "Steve Ditko"),
  ("The Amazing Spider-man", "Stan Lee"),
  ("Man on a Ledge", "Fenjves")
);
$ME_Movies2Writer_Map = TableScan("ME_Movies2Writer_Map");
CreateTable("ME_Movies2Director_Map",
  (
    "formalName" => "Text",
    "director" => "Text"
  ),
  ("A Warrior's Heart", "Michael F. Sears"),
  ("Answers to Nothing", "Matther Leutwyler"),
  ("Outrage", "Takeshi Kitano"),
  ("Pastorela", "Emilio Portes"),
  ("Redline", "Takeshi Koike"),
  ("Sleeping Beauty", "Julia Leigh"),
  ("New Year's Eve", "Garry Marshall"),
  ("The Sitter", "David Gordon Green"),
  ("Catch.44", "Aaron Harvey"),
  ("I Melt With You", "Mark Pellington"),
  ("In Darkness", "Agnieszka Holland "),
  ("Ladies Vs. Ricky Bahl", "Maneesh Sharma"),
  ("Tinker, Tailor, Soldier, Spy", "Tomas Alfredson"),
  ("We Need To Talk About Kevin", "Lynne Ramsay"),
  ("Young Adult", "Jason Reitman"),
  ("Addiction Incorporated", "Charles Evans"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Mike Mitchell"),
  ("Sherlock Holmes: A Game of Shadows", "Guy Ritchie"),
  ("Carnage", "Roman Polanski"),
  ("Cook County", "David Pomes"),
  ("Corman's World: Exploits of a Hollywood Rebel�", "Alex Stapleton"),
  ("Mission:  Impossible - Ghost Protocol", "Brad Bird"),
  ("The Girl With The Dragon Tattoo", "David Fincher"),
  ("The Adventures of Tintin", "Steven Spielberg"),
  ("Albert Nobbs", "Rodrigo Garcia"),
  ("We Bought A Zoo", "Cameron Crowe"),
  ("Don 2", "Farhan Akhtar"),
  ("In The Land of Blood and Honey", "Angelina Jolie"),
  ("Pina", "Wim Wenders"),
  ("The Darkest Hour", "Chris Gorak"),
  ("War Horse", "Steven Spielberg"),
  ("Extremely Loud and Incredibly Close", "Stephen Daldry"),
  ("Newlyweds", "Edward Burns"),
  ("Pariah", "Dee Rees"),
  ("A Separation", "Asghar Farhadi"),
  ("Angels Crest", "Gaby Dellal"),
  ("The Iron Lady", "Phyllida Lloyd"),
  ("Loosies", "Michael Corrente"),
  ("The Devil Inside", "William Brent Bell"),
  ("Beneath the Darkness", "Martin Guigui"),
  ("Roadie", "Michael Cuesta"),
  ("Contraband", "Baltasar Kormakur"),
  ("The Divide", "Xavier Gens"),
  ("Joyful Noise", "Todd Graff"),
  ("Underworld:  Awakening", "M�ns M�rlind"),
  ("Underworld:  Awakening", "Bj�rn Stein"),
  ("Red Tails", "Anthony Hemingway"),
  ("Coriolanus", "Ralph Fiennes"),
  ("Haywire", "Steven Soderbergh"),
  ("16-Love", "Adam Lipsius"),
  ("One For the Money", "Julie Ann Robinson"),
  ("The Grey", "Joe Carnahan"),
  ("Lombardi", "David Murray"),
  ("Lombardi", "Eric Roth"),
  ("Lombardi", "Ron Semiao"),
  ("Lombardi", "Jerry Kramer"),
  ("Lombardi", "Dick Schaap"),
  ("Touchback", "Don Handfield"),
  ("Chronicle", "Josh Trank"),
  ("The Woman in Black", "James Watkins"),
  ("The Innkeepers", "Ti West"),
  ("Big Miracle", "Ken Kwapis"),
  ("Journey 2:  The Mysterious Island", "Brad Peyton"),
  ("Safe House", "Daniel Espinosa"),
  ("The Vow", "Michael Sucsy"),
  ("Perfect Sense", "David Mackenzie"),
  ("Ghost Rider:  Spirit of Vengeance", "Mark Neveldine"),
  ("Ghost Rider:  Spirit of Vengeance", "Brian Taylor"),
  ("This Means War", "McG"),
  ("The Secret World of Arrietty", "Hiromasa Yonebayashi"),
  ("The Secret World of Arrietty", "Gary Rydstrom"),
  ("The Lady", "Rebecca Frayn"),
  ("Act of Valor", "Mike McCoy"),
  ("Act of Valor", "Scott Waugh"),
  ("Wanderlust", "David Wain"),
  ("Good Deeds", "Tyler Perry"),
  ("Playback", "Michael A. Nickles"),
  ("Hansel and Gretel:  Witch Hunters", "Tommy Wirkola"),
  ("Project X", "Nima Nourizadeh"),
  ("Dr. Seuss' The Lorax", "Chris Reynaud"),
  ("Dr. Seuss' The Lorax", "Kyle Balda"),
  ("Jeff Who Lives at Home", "Jay Duplass"),
  ("Jeff Who Lives at Home", "Mark Duplass"),
  ("Being Flynn", "Paul Weitz"),
  ("John Carter", "Andrew Stanton"),
  ("The Raven", "James McTeigue"),
  ("Silent House", "Chris Kentis"),
  ("Silent House", "Laura Lau"),
  ("Think Like a Man", "Tim Story"),
  ("The Bully Project", "Cynthia Lowen"),
  ("Playing the Field", "Gabriele Muccino"),
  ("Salmon Fishing in the Yemen", "Lasse Hallstr�m"),
  ("Footnote", "Joseph Cedar"),
  ("Jiro Dreams of Sushi", "David Gelb"),
  ("21 Jump Street", "Phil Lord"),
  ("21 Jump Street", "Chris Miller"),
  ("Mirror Mirror", "Tarsem Singh"),
  ("Seeking Justice", "Roger Donaldson"),
  ("Butter", "Jim Field Smith"),
  ("Casa de Mi Padre", "Matt Piedmont"),
  ("The Hunger Games", "Gary Ross"),
  ("A Thousand Words", "Brian Robbins"),
  ("Wrath of the Titans", "Jonathan Liebesman"),
  ("The Deep Blue Sea", "Terence Davies"),
  ("Goon", "Michael Dowse"),
  ("Snowtown", "Justin Kurzel"),
  ("Dorothy of Oz", "Will Finn"),
  ("Dorothy of Oz", "Dan St. Pierre"),
  ("Intruders", "Juan Carlos Fresnadillo"),
  ("Iron Sky", "Timo Vuorensola"),
  ("American Reunion", "Jon Hurwitz"),
  ("American Reunion", "Hayden Schlossberg"),
  ("Damsels in Distress", "Whit Stillman"),
  ("The Cold Light of Day", "Mabroul El Mechri"),
  ("The Three Stooges", "Bobby Farrelly"),
  ("The Three Stooges", "Peter Farrelly"),
  ("The Cabin In The Woods", "Drew Goddard"),
  ("Bullet To The Head", "Walter Hill"),
  ("Scary Movie 5", "David Zucker"),
  ("House at the End of the Street", "Mark Tonderai"),
  ("Seeking a Friend for the End of the World", "Lorene Scafaria"),
  ("The Lucky One", "Scott Hicks"),
  ("Chimpanzee", "Alastair Fothergill"),
  ("Chimpanzee", "Mark Linfield"),
  ("Darling Companion", "Lawrence Kasdan"),
  ("The Five-Year Engagement", "Nicholas Stoller"),
  ("Safe", "Boaz Yakin"),
  ("The Avengers", "Joss Whedon"),
  ("The Best Exotic Marigold Hotel", "John Madden"),
  ("Dark Shadows", "Tim Burton"),
  ("The Dictator", "Larry Charles"),
  ("What to Expect When You're Expecting", "Kirk Jones"),
  ("Battleship", "Peter Berg"),
  ("Men In Black III", "Barry Sonnenfeld"),
  ("Moonrise Kingdom", "Wes Anderson"),
  ("Brave", "Mark Andrews"),
  ("Brave", "Brenda Chapman"),
  ("G.I. Joe:  Retaliation", "Jon M. Chu"),
  ("Snow White and the Huntsman", "Rupert Sanders"),
  ("Titanic in 3D", "James Cameron"),
  ("The Dark Knight Rises", "Christopher Nolan"),
  ("The Amazing Spider-man", "Marc Webb"),
  ("Man on a Ledge", "Asger Leth")
);
$ME_Movies2Director_Map = TableScan("ME_Movies2Director_Map");
CreateTable("ME_LA_CountryToCapital",
  (
    "country" => "Text",
    "city" => "Text"
  ),
  ("AFGHANISTAN", "KABUL"),
  ("ALBANIA", "TIRANE"),
  ("ALGERIA", "ALGIERS"),
  ("ANDORRA", "ANDORRA LA VELLA"),
  ("ANGOLA", "LUANDA"),
  ("ANTIGUA", "SAINT JOHN"),
  ("ARGENTINA", "BUENOS AIRES"),
  ("ARMENIA", "YEREVAN"),
  ("AUSTRALIA", "CANBERRA"),
  ("AUSTRIA", "VIENNA"),
  ("AZERBAIJAN", "BAKU"),
  ("THE BAHAMAS", "NASSAU"),
  ("BAHRAIN", "MANAMA"),
  ("BANGLADESH", "DHAKA"),
  ("BARBADOS", "BRIDGETOWN"),
  ("BELARUS", "MINSK"),
  ("BELGIUM", "BRUSSELS"),
  ("BELIZE", "BELMOPAN"),
  ("BENIN", "PORTO-NOVO"),
  ("BHUTAN", "THIMPHU"),
  ("BOLIVIA", "LA PAZ"),
  ("BOLIVIA", "SUCRE"),
  ("BOSNIA", "SARAJEVO"),
  ("HERZEGOVINA", "SARAJEVO"),
  ("BOTSWANA", "GABORONE"),
  ("BRAZIL", "BRASILIA"),
  ("BRUNEI", "BANDAR SERI BEGAWAN"),
  ("BULGARIA", "SOFIA"),
  ("BURKINA FASO", "OUAGADOUGOU"),
  ("BURUNDI", "BUJUMBURA"),
  ("CAMBODIA", "PHNOM PENH"),
  ("CAMEROON", "YAOUNDE"),
  ("CANADA", "OTTAWA"),
  ("CROATIA", "ZAGREB"),
  ("CUBA", "HAVANA"),
  ("CYPRUS", "NICOSIA"),
  ("CZECH REPUBLIC", "PRAGUE"),
  ("DENMARK", "COPENHAGEN"),
  ("DJIBOUTI", "DJIBOUTI"),
  ("DOMINICA", "ROSEAU"),
  ("DOMINICAN REPUBLIC", "SANTO DOMINGO"),
  ("EAST TIMOR", "DILI"),
  ("ECUADOR", "QUITO"),
  ("EGYPT", "CAIRO"),
  ("EL SALVADOR", "SAN SALVADOR"),
  ("EQUATORIAL GUINEA", "MALABO"),
  ("ERITREA", "ASMARA"),
  ("ESTONIA", "TALLINN"),
  ("ETHIOPIA", "ADDIS ABABA"),
  ("FIJI", "SUVA"),
  ("FINLAND", "HELSINKI"),
  ("FRANCE", "PARIS"),
  ("GABON", "LIBREVILLE"),
  ("THE GAMBIA", "BANJUL"),
  ("GEORGIA", "TBILISI"),
  ("GERMANY", "BERLIN"),
  ("GHANA", "ACCRA"),
  ("GREECE", "ATHENS"),
  ("GRENADA", "SAINT GEORGE"),
  ("GUATEMALA", "GUATEMALA CITY"),
  ("GUINEA", "CONAKRY"),
  ("GUINEA-BISSAU", "BISSAU"),
  ("GUYANA", "GEORGETOWN"),
  ("HAITI", "PORT-AU-PRINCE"),
  ("HONDURAS", "TEGUCIGALPA"),
  ("HUNGARY", "BUDAPEST"),
  ("ICELAND", "REYKJAVIK"),
  ("INDIA", "NEW DELHI"),
  ("INDONESIA", "JAKARTA"),
  ("IRAN", "TEHRAN"),
  ("IRAQ", "BAGHDAD"),
  ("IRELAND", "DUBLIN"),
  ("ISRAEL", "JERUSALEM"),
  ("ITALY", "ROME"),
  ("JAMAICA", "KINGSTON"),
  ("JAPAN", "TOKYO"),
  ("JORDAN", "AMMAN"),
  ("KAZAKHSTAN", "ASTANA"),
  ("KENYA", "NAIROBI"),
  ("KIRIBATI", "TARAWA ATOLL"),
  ("KOREA, NORTH", "PYONGYANG"),
  ("KOREA, SOUTH", "SEOUL"),
  ("KOSOVO", "PRISTINA"),
  ("KUWAIT", "KUWAIT CITY"),
  ("KYRGYZSTAN", "BISHKEK"),
  ("LAOS", "VIENTIANE"),
  ("LATVIA", "RIGA"),
  ("LEBANON", "BEIRUT"),
  ("LESOTHO", "MASERU"),
  ("LIBERIA", "MONROVIA"),
  ("LIBYA", "TRIPOLI"),
  ("LIECHTENSTEIN", "VADUZ"),
  ("LITHUANIA", "VILNIUS"),
  ("LUXEMBOURG", "LUXEMBOURG"),
  ("MACEDONIA", "SKOPJE"),
  ("MADAGASCAR", "ANTANANARIVO"),
  ("MALAWI", "LILONGWE"),
  ("MALAYSIA", "KUALA LUMPUR"),
  ("MALDIVES", "MALE"),
  ("MALI", "BAMAKO"),
  ("MALTA", "VALLETTA"),
  ("MARSHALL ISLANDS", "MAJURO"),
  ("MAURITANIA", "NOUAKCHOTT"),
  ("MAURITIUS", "PORT LOUIS"),
  ("MEXICO", "MEXICO CITY"),
  ("MICRONESIA", "PALIKIR"),
  ("MOLDOVA", "CHISINAU"),
  ("MONACO", "MONACO"),
  ("MONGOLIA", "ULAANBAATAR"),
  ("MONTENEGRO", "PODGORICA"),
  ("MOROCCO", "RABAT"),
  ("MOZAMBIQUE", "MAPUTO"),
  ("BURMA", "YANGON"),
  ("MYANMAR", "RANGOON"),
  ("NAMIBIA", "WINDHOEK"),
  ("NEPAL", "KATHMANDU"),
  ("NETHERLANDS", "AMSTERDAM"),
  ("NEW ZEALAND", "WELLINGTON"),
  ("NICARAGUA", "MANAGUA"),
  ("NIGER", "NIAMEY"),
  ("NIGERIA", "ABUJA"),
  ("NORWAY", "OSLO"),
  ("OMAN", "MUSCAT"),
  ("PAKISTAN", "ISLAMABAD"),
  ("PALAU", "MELEKEOK"),
  ("PANAMA", "PANAMA CITY"),
  ("PAPUA NEW GUINEA", "PORT MORESBY"),
  ("PARAGUAY", "ASUNCION"),
  ("PERU", "LIMA"),
  ("PHILIPPINES", "MANILA"),
  ("POLAND", "WARSAW"),
  ("PORTUGAL", "LISBON"),
  ("QATAR", "DOHA"),
  ("ROMANIA", "BUCHAREST"),
  ("RUSSIA", "MOSCOW"),
  ("RWANDA", "KIGALI"),
  ("SAINT KITTS AND NEVIS", "BASSETERRE"),
  ("SAINT LUCIA", "CASTRIES"),
  ("SAINT VINCENT AND THE GRENADINES", "KINGSTOWN"),
  ("SAMOA", "APIA"),
  ("SAN MARINO", "SAN MARINO"),
  ("SAO TOME AND PRINCIPE", "SAO TOME"),
  ("SAUDI ARABIA", "RIYADH"),
  ("SENEGAL", "DAKAR"),
  ("SERBIA", "BELGRADE"),
  ("SEYCHELLES", "VICTORIA"),
  ("SIERRA LEONE", "FREETOWN"),
  ("SINGAPORE", "SINGAPORE"),
  ("SLOVAKIA", "BRATISLAVA"),
  ("SLOVENIA", "LJUBLJANA"),
  ("SOLOMON ISLANDS", "HONIARA"),
  ("SOMALIA", "MOGADISHU"),
  ("SOUTH AFRICA", "CAPE TOWN"),
  ("SPAIN", "MADRID"),
  ("SRI LANKA", "COLOMBO"),
  ("SUDAN", "KHARTOUM"),
  ("SURINAME", "PARAMARIBO"),
  ("SWAZILAND", "MBABANE"),
  ("SWEDEN", "STOCKHOLM"),
  ("SWITZERLAND", "BERN"),
  ("SYRIA", "DAMASCUS"),
  ("TAIWAN", "TAIPEI"),
  ("TAJIKISTAN", "DUSHANBE"),
  ("TANZANIA", "DODOMA"),
  ("THAILAND", "BANGKOK"),
  ("TOGO", "LOME"),
  ("TRINIDAD AND TOBAGO", "PORT-OF-SPAIN"),
  ("TUNISIA", "TUNIS"),
  ("TURKEY", "ANKARA"),
  ("TURKMENISTAN ", "ASHGABAT"),
  ("TUVALU", "VAIAKU"),
  ("UGANDA", "KAMPALA"),
  ("UKRAINE", "KYIV"),
  ("UNITED ARAB EMIRATES", "ABU DHABI"),
  ("UNITED KINGDOM", "LONDON"),
  ("UNITED STATES OF AMERICA", "WASHINGTON D.C."),
  ("UNITED STATES", "WASHINGTON D.C."),
  ("URUGUAY", "MONTEVIDEO"),
  ("UZBEKISTAN", "TASHKENT"),
  ("VANUATU", "PORT-VILA"),
  ("VENEZUELA", "CARACAS"),
  ("VIETNAM", "HANOI"),
  ("YEMEN", "SANAA"),
  ("ZAMBIA", "LUSAKA"),
  ("ZIMBABWE", "HARARE"),
  ("CAPE VERDE", "PRAIA"),
  ("CENTRAL AFRICAN REPUBLIC", "BANGUI"),
  ("CHILE", "SANTIAGO"),
  ("CHINA", "BEIJING"),
  ("COLOMBIA", "BOGOTA"),
  ("COMOROS", "MORONI"),
  ("CONGO", "KINSHASA")
);
$ME_LA_CountryToCapital = TableScan("ME_LA_CountryToCapital");
CreateTable("ME_LA_AliasToNormalized_States",
  (
    "alias" => "Text",
    "norm" => "Text"
  ),
  ("CALI", "CALIFORNIA"),
  ("SOUTHERN CALI", "CALIFORNIA"),
  ("SOUTHERN CALIFORNIA", "CALIFORNIA"),
  ("NORTHERN CALI", "CALIFORNIA"),
  ("NORTHERN CALIFORNIA", "CALIFORNIA"),
  ("NORCAL", "CALIFORNIA"),
  ("SOCAL", "CALIFORNIA"),
  ("SUNSHINE STATE", "FLORIDA"),
  ("BAY AREA", "CALIFORNIA"),
  ("NORTH JERSEY", "NEW JERSEY")
);
$ME_LA_AliasToNormalized_States = TableScan("ME_LA_AliasToNormalized_States");
CreateTable("ME_LA_AliasToNormalized_Countries",
  (
    "alias" => "Text",
    "norm" => "Text"
  ),
  ("U.S.", "UNITED STATES"),
  ("USA", "UNITED STATES"),
  ("U.S.A.", "UNITED STATES"),
  ("UNITED STATES OF AMERICA", "UNITED STATES"),
  ("US OF A", "UNITED STATES"),
  ("ENGLAND", "UNITED KINGDOM"),
  ("UK", "UNITED KINGDOM"),
  ("U.K.", "UNITED KINGDOM"),
  ("GREAT BRITAIN", "UNITED KINGDOM"),
  ("SCOTLAND", "UNITED KINGDOM"),
  ("NORTHERN IRELAND", "UNITED KINGDOM"),
  ("BRASIL", "BRAZIL"),
  ("NZ", "NEW ZEALAND"),
  ("BELGIE", "BELGIUM"),
  ("ESPAÑA", "SPAIN"),
  ("MÉXICO", "MEXICO"),
  ("ITALIA", "ITALY"),
  ("KOREA", "SOUTH KOREA"),
  ("MÈXICO", "MEXICO"),
  ("MÉXICO", "MEXICO"),
  ("HOLLAND", "NETHERLANDS"),
  ("UAE", "UNITED ARAB EMIRATES"),
  ("IN", "INDIA")
);
$ME_LA_AliasToNormalized_Countries = TableScan("ME_LA_AliasToNormalized_Countries");
CreateTable("ME_LA_CityToState",
  (
    "city" => "Text",
    "state" => "Text"
  ),
  ("AARONSBURG", "PA"),
  ("ABANDA", "AL"),
  ("ABBEVILLE", "AL"),
  ("ABBEVILLE", "SC"),
  ("ABBEVILLE", "LA"),
  ("ABBEVILLE", "MS"),
  ("ABBEVILLE", "GA"),
  ("ABBOTSFORD", "WI"),
  ("ABBOTT", "TX"),
  ("ABBOTTSTOWN", "PA"),
  ("ABBYVILLE", "KS"),
  ("ABERCROMBIE", "ND"),
  ("ABERDEEN", "SD"),
  ("ABERDEEN", "MS"),
  ("ABERDEEN", "WA"),
  ("ABERDEEN", "NC"),
  ("ABERDEEN", "MD"),
  ("ABERDEEN", "OH"),
  ("ABERDEEN", "IN"),
  ("ABERDEEN", "ID"),
  ("ABERDEEN GARDENS", "WA"),
  ("ABERDEEN PROVING GROUND", "MD"),
  ("ABERNATHY", "TX"),
  ("ABEYTAS", "NM"),
  ("ABIE", "NE"),
  ("ABILENE", "TX"),
  ("ABILENE", "KS"),
  ("ABINGDON", "VA"),
  ("ABINGDON", "IL"),
  ("ABINGTON", "MA"),
  ("ABIQUIU", "NM"),
  ("ABITA SPRINGS", "LA"),
  ("ABRAM", "TX"),
  ("ABRAMS", "WI"),
  ("ABSAROKEE", "MT"),
  ("ABSECON", "NJ"),
  ("ACACIA VILLAS", "FL"),
  ("ACALANES RIDGE", "CA"),
  ("ACAMPO", "CA"),
  ("ACCIDENT", "MD"),
  ("ACCOKEEK", "MD"),
  ("ACCOMAC", "VA"),
  ("ACCORD", "NY"),
  ("ACCOVILLE", "WV"),
  ("ACEITUNAS", "PR"),
  ("ACEQUIA", "ID"),
  ("ACHILLE", "OK"),
  ("ACKERLY", "TX"),
  ("ACKERMAN", "MS"),
  ("ACKERMANVILLE", "PA"),
  ("ACKLEY", "IA"),
  ("ACKWORTH", "IA"),
  ("ACME", "WA"),
  ("ACOMITA LAKE", "NM"),
  ("ACRES GREEN", "CO"),
  ("ACTON", "CA"),
  ("ACUSHNET CENTER", "MA"),
  ("ACWORTH", "GA"),
  ("ADA", "OK"),
  ("ADA", "KS"),
  ("ADA", "OH"),
  ("ADA", "MN"),
  ("ADAIR", "OK"),
  ("ADAIR", "IA"),
  ("ADAIR", "IL"),
  ("ADAIR VILLAGE", "OR"),
  ("ADAIRSVILLE", "GA"),
  ("ADAIRVILLE", "KY"),
  ("ADAK", "AK"),
  ("ADAMS", "WI"),
  ("ADAMS", "TN"),
  ("ADAMS", "MA"),
  ("ADAMS", "NY"),
  ("ADAMS", "MN"),
  ("ADAMS", "ND"),
  ("ADAMS", "NE"),
  ("ADAMS", "OR"),
  ("ADAMS CENTER", "NY"),
  ("ADAMSBURG", "PA"),
  ("ADAMSTOWN", "MD"),
  ("ADAMSTOWN", "PA"),
  ("ADAMSVILLE", "AL"),
  ("ADAMSVILLE", "TN"),
  ("ADAMSVILLE", "PA"),
  ("ADAMSVILLE", "OH"),
  ("ADDIEVILLE", "IL"),
  ("ADDINGTON", "OK"),
  ("ADDIS", "LA"),
  ("ADDISON", "IL"),
  ("ADDISON", "TX"),
  ("ADDISON", "AL"),
  ("ADDISON", "NY"),
  ("ADDISON", "MI"),
  ("ADDISON", "PA"),
  ("ADDISON", "WV"),
  ("ADDY", "WA"),
  ("ADDYSTON", "OH"),
  ("ADEL", "GA"),
  ("ADEL", "IA"),
  ("ADELANTO", "CA"),
  ("ADELINE", "IL"),
  ("ADELINO", "NM"),
  ("ADELL", "WI"),
  ("ADELPHI", "MD"),
  ("ADELPHI", "OH"),
  ("ADENA", "OH"),
  ("ADIN", "CA"),
  ("ADJUNTAS", "PR"),
  ("ADMIRE", "KS"),
  ("ADONA", "AR"),
  ("ADRIAN", "MI"),
  ("ADRIAN", "MO"),
  ("ADRIAN", "GA"),
  ("ADRIAN", "MN"),
  ("ADRIAN", "TX"),
  ("ADRIAN", "OR"),
  ("ADVANCE", "NC"),
  ("ADVANCE", "MI"),
  ("ADVANCE", "MO"),
  ("ADVANCE", "IN"),
  ("ADWOLF", "VA"),
  ("AETNA ESTATES", "CO"),
  ("AFFTON", "MO"),
  ("AFTON", "MN"),
  ("AFTON", "WY"),
  ("AFTON", "OK"),
  ("AFTON", "NY"),
  ("AFTON", "IA"),
  ("AGAR", "SD"),
  ("AGAWAM TOWN", "MA"),
  ("AGENCY", "MO"),
  ("AGENCY", "IA"),
  ("AGENCY VILLAGE", "SD"),
  ("AGENDA", "KS"),
  ("AGOURA HILLS", "CA"),
  ("AGRA", "OK"),
  ("AGRA", "KS"),
  ("AGUA DULCE", "CA"),
  ("AGUA DULCE", "TX"),
  ("AGUA DULCE", "TX"),
  ("AGUA FRIA", "NM"),
  ("AGUADA", "PR"),
  ("AGUADILLA", "PR"),
  ("AGUANGA", "CA"),
  ("AGUAS BUENAS", "PR"),
  ("AGUAS CLARAS", "PR"),
  ("AGUILA", "AZ"),
  ("AGUILAR", "CO"),
  ("AGUILARES", "TX"),
  ("AGUILITA", "PR"),
  ("AHMEEK", "MI"),
  ("AHOSKIE", "NC"),
  ("AHTANUM", "WA"),
  ("AHUIMANU", "HI"),
  ("AHWAHNEE", "CA"),
  ("AIBONITO", "PR"),
  ("AIEA", "HI"),
  ("AIKEN", "SC"),
  ("AILEY", "GA"),
  ("AINALOA", "HI"),
  ("AINSWORTH", "NE"),
  ("AINSWORTH", "IA"),
  ("AIR FORCE ACADEMY", "CO"),
  ("AIRMONT", "NY"),
  ("AIRPORT", "CA"),
  ("AIRPORT DRIVE", "MO"),
  ("AIRPORT HEIGHTS", "TX"),
  ("AIRPORT ROAD ADDITION", "TX"),
  ("AIRWAY HEIGHTS", "WA"),
  ("AITKIN", "MN"),
  ("AJO", "AZ"),
  ("AK CHIN", "AZ"),
  ("AKASKA", "SD"),
  ("AK-CHIN VILLAGE", "AZ"),
  ("AKELEY", "MN"),
  ("AKHIOK", "AK"),
  ("AKIACHAK", "AK"),
  ("AKIAK", "AK"),
  ("AKINS", "OK"),
  ("AKRON", "OH"),
  ("AKRON", "CO"),
  ("AKRON", "NY"),
  ("AKRON", "PA"),
  ("AKRON", "IA"),
  ("AKRON", "MI"),
  ("AKRON", "AL"),
  ("AKRON", "IN"),
  ("AKUTAN", "AK"),
  ("ALABASTER", "AL"),
  ("ALACHUA", "FL"),
  ("ALAFAYA", "FL"),
  ("ALAKANUK", "AK"),
  ("ALAMANCE", "NC"),
  ("ALAMEDA", "CA"),
  ("ALAMILLO", "NM"),
  ("ALAMO", "NM"),
  ("ALAMO", "NV"),
  ("ALAMO", "CA"),
  ("ALAMO", "TX"),
  ("ALAMO", "TN"),
  ("ALAMO", "GA"),
  ("ALAMO", "ND"),
  ("ALAMO", "IN"),
  ("ALAMO HEIGHTS", "TX"),
  ("ALAMO LAKE", "AZ"),
  ("ALAMOGORDO", "NM"),
  ("ALAMOSA", "CO"),
  ("ALAMOSA EAST", "CO"),
  ("ALANSON", "MI"),
  ("ALAPAHA", "GA"),
  ("ALATNA", "AK"),
  ("ALBA", "MI"),
  ("ALBA", "TX"),
  ("ALBA", "PA"),
  ("ALBA", "MO"),
  ("ALBANY", "GA"),
  ("ALBANY", "NY"),
  ("ALBANY", "OR"),
  ("ALBANY", "WY"),
  ("ALBANY", "OK"),
  ("ALBANY", "MO"),
  ("ALBANY", "KY"),
  ("ALBANY", "MN"),
  ("ALBANY", "CA"),
  ("ALBANY", "IN"),
  ("ALBANY", "TX"),
  ("ALBANY", "VT"),
  ("ALBANY", "WI"),
  ("ALBANY", "OH"),
  ("ALBANY", "LA"),
  ("ALBANY", "IL"),
  ("ALBEE", "SD"),
  ("ALBEMARLE", "NC"),
  ("ALBERS", "IL"),
  ("ALBERT", "KS"),
  ("ALBERT CITY", "IA"),
  ("ALBERT LEA", "MN"),
  ("ALBERTA", "VA"),
  ("ALBERTA", "MN"),
  ("ALBERTON", "MT"),
  ("ALBERTSON", "NY"),
  ("ALBERTVILLE", "AL"),
  ("ALBERTVILLE", "MN"),
  ("ALBIA", "IA"),
  ("ALBIN", "WY"),
  ("ALBION", "MI"),
  ("ALBION", "NY"),
  ("ALBION", "IL"),
  ("ALBION", "IN"),
  ("ALBION", "CA"),
  ("ALBION", "PA"),
  ("ALBION", "NE"),
  ("ALBION", "IA"),
  ("ALBION", "ID"),
  ("ALBION", "WA"),
  ("ALBION", "OK"),
  ("ALBRIGHT", "WV"),
  ("ALBRIGHTSVILLE", "PA"),
  ("ALBUQUERQUE", "NM"),
  ("ALBURG", "VT"),
  ("ALBURNETT", "IA"),
  ("ALBURTIS", "PA"),
  ("ALCALDE", "NM"),
  ("ALCAN BORDER", "AK"),
  ("ALCESTER", "SD"),
  ("ALCOA", "TN"),
  ("ALCOLU", "SC"),
  ("ALCORN STATE UNIVERSITY", "MS"),
  ("ALCOVA", "WY"),
  ("ALDA", "NE"),
  ("ALDAN", "PA"),
  ("ALDEN", "NY"),
  ("ALDEN", "IA"),
  ("ALDEN", "MN"),
  ("ALDEN", "MI"),
  ("ALDEN", "KS"),
  ("ALDER", "WA"),
  ("ALDER", "MT"),
  ("ALDERPOINT", "CA"),
  ("ALDERSON", "WV"),
  ("ALDERSON", "OK"),
  ("ALDERTON", "WA"),
  ("ALDERWOOD MANOR", "WA"),
  ("ALDINE", "TX"),
  ("ALDORA", "GA"),
  ("ALDRICH", "MN"),
  ("ALDRICH", "MO"),
  ("ALEDO", "TX"),
  ("ALEDO", "IL"),
  ("ALEKNAGIK", "AK"),
  ("ALENEVA", "AK"),
  ("ALEX", "OK"),
  ("ALEXANDER", "IA"),
  ("ALEXANDER", "AR"),
  ("ALEXANDER", "ND"),
  ("ALEXANDER", "NY"),
  ("ALEXANDER", "KS"),
  ("ALEXANDER CITY", "AL"),
  ("ALEXANDRIA", "LA"),
  ("ALEXANDRIA", "MN"),
  ("ALEXANDRIA", "VA"),
  ("ALEXANDRIA", "AL"),
  ("ALEXANDRIA", "KY"),
  ("ALEXANDRIA", "IN"),
  ("ALEXANDRIA", "TN"),
  ("ALEXANDRIA", "SD"),
  ("ALEXANDRIA", "NE"),
  ("ALEXANDRIA", "MO"),
  ("ALEXANDRIA", "OH"),
  ("ALEXANDRIA", "PA"),
  ("ALEXANDRIA BAY", "NY"),
  ("ALEXIS", "IL"),
  ("ALFARATA", "PA"),
  ("ALFORD", "FL"),
  ("ALFORDSVILLE", "IN"),
  ("ALFRED", "TX"),
  ("ALFRED", "NY"),
  ("ALGER", "WA"),
  ("ALGER", "OH"),
  ("ALGODONES", "NM"),
  ("ALGOMA", "MS"),
  ("ALGOMA", "WI"),
  ("ALGONA", "IA"),
  ("ALGONA", "WA"),
  ("ALGONAC", "MI"),
  ("ALGONQUIN", "IL"),
  ("ALGONQUIN", "MD"),
  ("ALGOOD", "TN"),
  ("ALHAMBRA", "CA"),
  ("ALHAMBRA", "IL"),
  ("ALHAMBRA VALLEY", "CA"),
  ("ALI CHUK", "AZ"),
  ("ALI CHUKSON", "AZ"),
  ("ALI MOLINA", "AZ"),
  ("ALIANZA", "PR"),
  ("ALICE", "TX"),
  ("ALICE", "ND"),
  ("ALICE ACRES", "TX"),
  ("ALICEVILLE", "AL"),
  ("ALICIA", "AR"),
  ("ALINE", "OK"),
  ("ALIQUIPPA", "PA"),
  ("ALISO VIEJO", "CA"),
  ("ALLAKAKET", "AK"),
  ("ALLAMUCHY", "NJ"),
  ("ALLARDT", "TN"),
  ("ALLEGAN", "MI"),
  ("ALLEGANY", "NY"),
  ("ALLEGHANY", "CA"),
  ("ALLEGHENYVILLE", "PA"),
  ("ALLEMAN", "IA"),
  ("ALLEN", "TX"),
  ("ALLEN", "SD"),
  ("ALLEN", "OK"),
  ("ALLEN", "NE"),
  ("ALLEN", "MD"),
  ("ALLEN", "KS"),
  ("ALLEN", "KY"),
  ("ALLEN", "MI"),
  ("ALLEN PARK", "MI"),
  ("ALLENDALE", "MI"),
  ("ALLENDALE", "CA"),
  ("ALLENDALE", "SC"),
  ("ALLENDALE", "NJ"),
  ("ALLENDALE", "MO"),
  ("ALLENDALE", "IL"),
  ("ALLENHURST", "GA"),
  ("ALLENHURST", "NJ"),
  ("ALLENPORT", "PA"),
  ("ALLENPORT", "PA"),
  ("ALLENSPARK", "CO"),
  ("ALLENSVILLE", "PA"),
  ("ALLENSVILLE", "KY"),
  ("ALLENSWORTH", "CA"),
  ("ALLENTON", "WI"),
  ("ALLENTOWN", "FL"),
  ("ALLENTOWN", "PA"),
  ("ALLENTOWN", "GA"),
  ("ALLENTOWN", "NJ"),
  ("ALLENVILLE", "IL"),
  ("ALLENVILLE", "MO"),
  ("ALLENWOOD", "NJ"),
  ("ALLENWOOD", "PA"),
  ("ALLERTON", "IA"),
  ("ALLERTON", "IL"),
  ("ALLGOOD", "AL"),
  ("ALLIANCE", "OH"),
  ("ALLIANCE", "NE"),
  ("ALLIANCE", "NC"),
  ("ALLIGATOR", "MS"),
  ("ALLISON", "IA"),
  ("ALLISON", "PA"),
  ("ALLISON PARK", "PA"),
  ("ALLISONIA", "VA"),
  ("ALLOUEZ", "WI"),
  ("ALLOWAY", "NJ"),
  ("ALLPORT", "PA"),
  ("ALLPORT", "AR"),
  ("ALLYN", "WA"),
  ("ALMA", "MI"),
  ("ALMA", "GA"),
  ("ALMA", "TX"),
  ("ALMA", "AR"),
  ("ALMA", "WI"),
  ("ALMA", "IL"),
  ("ALMA", "NE"),
  ("ALMA", "KS"),
  ("ALMA", "CO"),
  ("ALMA", "MO"),
  ("ALMA CENTER", "WI"),
  ("ALMANOR", "CA"),
  ("ALMEDIA", "PA"),
  ("ALMENA", "WI"),
  ("ALMENA", "KS"),
  ("ALMIRA", "WA"),
  ("ALMOND", "WI"),
  ("ALMOND", "NY"),
  ("ALMONT", "ND"),
  ("ALMONT", "MI"),
  ("ALMYRA", "AR"),
  ("ALOHA", "OR"),
  ("ALONDRA PARK", "CA"),
  ("ALORTON", "IL"),
  ("ALPAUGH", "CA"),
  ("ALPENA", "MI"),
  ("ALPENA", "SD"),
  ("ALPENA", "AR"),
  ("ALPHA", "NJ"),
  ("ALPHA", "MI"),
  ("ALPHA", "IL"),
  ("ALPHA", "MN"),
  ("ALPHARETTA", "GA"),
  ("ALPINE", "CA"),
  ("ALPINE", "UT"),
  ("ALPINE", "NJ"),
  ("ALPINE", "TX"),
  ("ALPINE", "CO"),
  ("ALPINE", "OR"),
  ("ALPINE", "WY"),
  ("ALPINE", "AZ"),
  ("ALPINE NORTHEAST", "WY"),
  ("ALPINE NORTHWEST", "WY"),
  ("ALPINE VILLAGE", "CA"),
  ("ALSACE MANOR", "PA"),
  ("ALSEA", "OR"),
  ("ALSEN", "ND"),
  ("ALSEY", "IL"),
  ("ALSIP", "IL"),
  ("ALSTON", "GA"),
  ("ALTA", "WY"),
  ("ALTA", "UT"),
  ("ALTA", "CA"),
  ("ALTA", "IA"),
  ("ALTA SIERRA", "CA"),
  ("ALTA VISTA", "IA"),
  ("ALTA VISTA", "KS"),
  ("ALTADENA", "CA"),
  ("ALTAMAHAW", "NC"),
  ("ALTAMONT", "TN"),
  ("ALTAMONT", "OR"),
  ("ALTAMONT", "KS"),
  ("ALTAMONT", "IL"),
  ("ALTAMONT", "SD"),
  ("ALTAMONT", "NY"),
  ("ALTAMONT", "PA"),
  ("ALTAMONT", "MO"),
  ("ALTAMONT", "UT"),
  ("ALTAMONTE SPRINGS", "FL"),
  ("ALTAVISTA", "VA"),
  ("ALTENBURG", "MO"),
  ("ALTHA", "FL"),
  ("ALTHEIMER", "AR"),
  ("ALTMAR", "NY"),
  ("ALTO", "TX"),
  ("ALTO", "GA"),
  ("ALTO", "CA"),
  ("ALTO BONITO HEIGHTS", "TX"),
  ("ALTO PASS", "IL"),
  ("ALTON", "IL"),
  ("ALTON", "TX"),
  ("ALTON", "UT"),
  ("ALTON", "IA"),
  ("ALTON", "MO"),
  ("ALTON", "NH"),
  ("ALTON", "KS"),
  ("ALTON", "IN"),
  ("ALTONA", "NY"),
  ("ALTONA", "CO"),
  ("ALTONA", "IL"),
  ("ALTONA", "IN"),
  ("ALTOONA", "PA"),
  ("ALTOONA", "IA"),
  ("ALTOONA", "WA"),
  ("ALTOONA", "WI"),
  ("ALTOONA", "AL"),
  ("ALTOONA", "KS"),
  ("ALTOONA", "FL"),
  ("ALTURA", "MN"),
  ("ALTURAS", "FL"),
  ("ALTURAS", "CA"),
  ("ALTUS", "OK"),
  ("ALTUS", "AR"),
  ("ALUM CREEK", "WV"),
  ("ALUM ROCK", "CA"),
  ("ALVA", "FL"),
  ("ALVA", "OK"),
  ("ALVAN", "IL"),
  ("ALVARADO", "TX"),
  ("ALVARADO", "MN"),
  ("ALVIN", "TX"),
  ("ALVO", "NE"),
  ("ALVORD", "TX"),
  ("ALVORD", "IA"),
  ("ALVORDTON", "OH"),
  ("ALZADA", "MT"),
  ("AMA", "LA"),
  ("AMADA ACRES", "TX"),
  ("AMADO", "AZ"),
  ("AMADOR CITY", "CA"),
  ("AMAGANSETT", "NY"),
  ("AMAGON", "AR"),
  ("AMALGA", "UT"),
  ("AMANA", "IA"),
  ("AMANDA", "OH"),
  ("AMANDA PARK", "WA"),
  ("AMARGOSA", "TX"),
  ("AMARILLO", "TX"),
  ("AMASA", "MI"),
  ("AMAYA", "TX"),
  ("AMAZONIA", "MO"),
  ("AMBER", "OK"),
  ("AMBERG", "WI"),
  ("AMBERLEY", "OH"),
  ("AMBIA", "IN"),
  ("AMBLER", "AK"),
  ("AMBLER", "PA"),
  ("AMBOY", "WA"),
  ("AMBOY", "IL"),
  ("AMBOY", "IN"),
  ("AMBOY", "MN"),
  ("AMBRIDGE", "PA"),
  ("AMBROSE", "GA"),
  ("AMBROSE", "ND"),
  ("AMELIA", "LA"),
  ("AMELIA", "OH"),
  ("AMELIA COURT HOUSE", "VA"),
  ("AMENIA", "ND"),
  ("AMENIA", "NY"),
  ("AMERICAN CANYON", "CA"),
  ("AMERICAN FALLS", "ID"),
  ("AMERICAN FORK", "UT"),
  ("AMERICUS", "GA"),
  ("AMERICUS", "IN"),
  ("AMERICUS", "KS"),
  ("AMERY", "WI"),
  ("AMES", "IA"),
  ("AMES", "TX"),
  ("AMES", "NE"),
  ("AMES", "OK"),
  ("AMES", "NY"),
  ("AMES LAKE", "WA"),
  ("AMESBURY TOWN", "MA"),
  ("AMESTI", "CA"),
  ("AMESVILLE", "OH"),
  ("AMHERST", "OH"),
  ("AMHERST", "VA"),
  ("AMHERST", "WI"),
  ("AMHERST", "TX"),
  ("AMHERST", "NH"),
  ("AMHERST", "CO"),
  ("AMHERST", "NE"),
  ("AMHERST CENTER", "MA"),
  ("AMHERST JUNCTION", "WI"),
  ("AMHERSTDALE", "WV"),
  ("AMIDON", "ND"),
  ("AMISTAD", "TX"),
  ("AMITE CITY", "LA"),
  ("AMITY", "AR"),
  ("AMITY", "OR"),
  ("AMITY", "MO"),
  ("AMITY GARDENS", "PA"),
  ("AMITYVILLE", "NY"),
  ("AMMON", "ID"),
  ("AMO", "IN"),
  ("AMORET", "MO"),
  ("AMORITA", "OK"),
  ("AMORY", "MS"),
  ("AMSTERDAM", "NY"),
  ("AMSTERDAM", "MT"),
  ("AMSTERDAM", "MO"),
  ("AMSTERDAM", "OH"),
  ("ANACOCO", "LA"),
  ("ANACONDA-DEER LODGE COUNTY", "MT"),
  ("ANACORTES", "WA"),
  ("ANACUA", "TX"),
  ("ANADARKO", "OK"),
  ("ANAHEIM", "CA"),
  ("ANAHOLA", "HI"),
  ("ANAHUAC", "TX"),
  ("ANAKTUVUK PASS", "AK"),
  ("ANAMOOSE", "ND"),
  ("ANAMOSA", "IA"),
  ("ANAWALT", "WV"),
  ("ANCHOR", "IL"),
  ("ANCHOR BAY", "CA"),
  ("ANCHOR POINT", "AK"),
  ("ANCHORAGE", "AK"),
  ("ANCHORAGE", "KY"),
  ("ANCIENT OAKS", "PA"),
  ("ANDALE", "KS"),
  ("ANDALUSIA", "AL"),
  ("ANDALUSIA", "IL"),
  ("ANDERSON", "AK"),
  ("ANDERSON", "IN"),
  ("ANDERSON", "SC"),
  ("ANDERSON", "CA"),
  ("ANDERSON", "MO"),
  ("ANDERSON", "AL"),
  ("ANDERSON", "SD"),
  ("ANDERSON", "NJ"),
  ("ANDERSON", "TX"),
  ("ANDERSON", "IA"),
  ("ANDERSON ISLAND", "WA"),
  ("ANDERSONVILLE", "OH"),
  ("ANDERSONVILLE", "TN"),
  ("ANDERSONVILLE", "GA"),
  ("ANDES", "NY"),
  ("ANDOVER", "MN"),
  ("ANDOVER", "KS"),
  ("ANDOVER", "MA"),
  ("ANDOVER", "NJ"),
  ("ANDOVER", "OH"),
  ("ANDOVER", "NY"),
  ("ANDOVER", "IL"),
  ("ANDOVER", "SD"),
  ("ANDOVER", "IA"),
  ("ANDREW", "IA"),
  ("ANDREWS", "FL"),
  ("ANDREWS", "TX"),
  ("ANDREWS", "SC"),
  ("ANDREWS", "NC"),
  ("ANDREWS", "IN"),
  ("ANDREWS AFB", "MD"),
  ("ANEGAM", "AZ"),
  ("ANETA", "ND"),
  ("ANETH", "UT"),
  ("ANGEL FIRE", "NM"),
  ("ANGELICA", "NY"),
  ("ANGELICA", "WI"),
  ("ANGELS", "CA"),
  ("ANGIE", "LA"),
  ("ANGIER", "NC"),
  ("ANGLE INLET", "MN"),
  ("ANGLETON", "TX"),
  ("ANGOLA", "IN"),
  ("ANGOLA", "NY"),
  ("ANGOLA ON THE LAKE", "NY"),
  ("ANGOON", "AK"),
  ("ANGUILLA", "MS"),
  ("ANGUS", "TX"),
  ("ANGWIN", "CA"),
  ("ANIAK", "AK"),
  ("ANIMAS", "NM"),
  ("ANIMAS", "PR"),
  ("ANITA", "IA"),
  ("ANIWA", "WI"),
  ("ANKENY", "IA"),
  ("ANMOORE", "WV"),
  ("ANN ARBOR", "MI"),
  ("ANNA", "TX"),
  ("ANNA", "IL"),
  ("ANNA", "OH"),
  ("ANNA MARIA", "FL"),
  ("ANNABELLA", "UT"),
  ("ANNADA", "MO"),
  ("ANNANDALE", "VA"),
  ("ANNANDALE", "MN"),
  ("ANNANDALE", "NJ"),
  ("ANNAPOLIS", "MD"),
  ("ANNAPOLIS", "MO"),
  ("ANNAPOLIS", "IL"),
  ("ANNAPOLIS NECK", "MD"),
  ("ANNAWAN", "IL"),
  ("ANNETTA", "TX"),
  ("ANNETTA NORTH", "TX"),
  ("ANNETTA SOUTH", "TX"),
  ("ANNEX", "OR"),
  ("ANNISTON", "AL"),
  ("ANNISTON", "MO"),
  ("ANNONA", "TX"),
  ("ANNVILLE", "KY"),
  ("ANNVILLE", "PA"),
  ("ANOKA", "MN"),
  ("ANOKA", "NE"),
  ("ANON RAICES", "PR"),
  ("ANSELMO", "NE"),
  ("ANSLEY", "NE"),
  ("ANSON", "TX"),
  ("ANSON", "ME"),
  ("ANSONIA", "CT"),
  ("ANSONIA", "OH"),
  ("ANSONVILLE", "NC"),
  ("ANSTED", "WV"),
  ("ANTARES", "AZ"),
  ("ANTELOPE", "CA"),
  ("ANTELOPE", "SD"),
  ("ANTELOPE", "OR"),
  ("ANTELOPE", "MT"),
  ("ANTELOPE HILLS", "WY"),
  ("ANTELOPE VALLEY-CRESTVIEW", "WY"),
  ("ANTHEM", "AZ"),
  ("ANTHON", "IA"),
  ("ANTHONY", "TX"),
  ("ANTHONY", "NM"),
  ("ANTHONY", "KS"),
  ("ANTHONYVILLE", "AR"),
  ("ANTIETAM", "MD"),
  ("ANTIGO", "WI"),
  ("ANTIMONY", "UT"),
  ("ANTIOCH", "CA"),
  ("ANTIOCH", "IL"),
  ("ANTIOCH", "OH"),
  ("ANTLER", "ND"),
  ("ANTLERS", "OK"),
  ("ANTOINE", "AR"),
  ("ANTON", "TX"),
  ("ANTON CHICO", "NM"),
  ("ANTONITO", "CO"),
  ("ANTREVILLE", "SC"),
  ("ANTRIM", "NH"),
  ("ANTÛN RUÌZ", "PR"),
  ("ANTWERP", "OH"),
  ("ANTWERP", "NY"),
  ("ANVIK", "AK"),
  ("ANZA", "CA"),
  ("ANZAC VILLAGE", "NM"),
  ("AÒASCO", "PR"),
  ("APACHE", "OK"),
  ("APACHE CREEK", "NM"),
  ("APACHE JUNCTION", "AZ"),
  ("APALACHICOLA", "FL"),
  ("APALACHIN", "NY"),
  ("APEX", "NC"),
  ("APISON", "TN"),
  ("APLINGTON", "IA"),
  ("APOLLO", "PA"),
  ("APOLLO BEACH", "FL"),
  ("APOPKA", "FL"),
  ("APPALACHIA", "VA"),
  ("APPLE CANYON LAKE", "IL"),
  ("APPLE CREEK", "OH"),
  ("APPLE GROVE", "WV"),
  ("APPLE MOUNTAIN LAKE", "VA"),
  ("APPLE RIVER", "IL"),
  ("APPLE VALLEY", "CA"),
  ("APPLE VALLEY", "UT"),
  ("APPLE VALLEY", "MN"),
  ("APPLE VALLEY", "OH"),
  ("APPLEBY", "TX"),
  ("APPLEGATE", "MI"),
  ("APPLETON", "WI"),
  ("APPLETON", "MN"),
  ("APPLETON CITY", "MO"),
  ("APPLEWOLD", "PA"),
  ("APPLEWOOD", "CO"),
  ("APPOMATTOX", "VA"),
  ("APTOS", "CA"),
  ("APTOS HILLS-LARKIN VALLEY", "CA"),
  ("AQUADALE", "NC"),
  ("AQUASCO", "MD"),
  ("AQUEBOGUE", "NY"),
  ("AQUIA HARBOUR", "VA"),
  ("AQUILLA", "TX"),
  ("AQUILLA", "OH"),
  ("ARAB", "AL"),
  ("ARABI", "GA"),
  ("ARABI", "LA"),
  ("ARAGON", "NM"),
  ("ARAGON", "GA"),
  ("ARANSAS PASS", "TX"),
  ("ARAPAHO", "OK"),
  ("ARAPAHOE", "WY"),
  ("ARAPAHOE", "NC"),
  ("ARAPAHOE", "NE"),
  ("ARBELA", "MO"),
  ("ARBOLES", "CO"),
  ("ARBON VALLEY", "ID"),
  ("ARBUCKLE", "CA"),
  ("ARBUTUS", "MD"),
  ("ARBYRD", "MO"),
  ("ARCADE", "GA"),
  ("ARCADE", "NY"),
  ("ARCADIA", "CA"),
  ("ARCADIA", "FL"),
  ("ARCADIA", "LA"),
  ("ARCADIA", "WI"),
  ("ARCADIA", "SC"),
  ("ARCADIA", "OK"),
  ("ARCADIA", "IA"),
  ("ARCADIA", "MO"),
  ("ARCADIA", "OH"),
  ("ARCADIA", "NE"),
  ("ARCADIA", "IN"),
  ("ARCADIA", "MI"),
  ("ARCADIA", "KS"),
  ("ARCADIA LAKES", "SC"),
  ("ARCADIA UNIVERSITY", "PA"),
  ("ARCANUM", "OH"),
  ("ARCATA", "CA"),
  ("ARCHBALD", "PA"),
  ("ARCHBOLD", "OH"),
  ("ARCHDALE", "NC"),
  ("ARCHER", "FL"),
  ("ARCHER", "NE"),
  ("ARCHER", "IA"),
  ("ARCHER CITY", "TX"),
  ("ARCHER LODGE", "NC"),
  ("ARCHIE", "MO"),
  ("ARCO", "ID"),
  ("ARCO", "MN"),
  ("ARCOLA", "VA"),
  ("ARCOLA", "IL"),
  ("ARCOLA", "TX"),
  ("ARCOLA", "MO"),
  ("ARCOLA", "MS"),
  ("ARCTIC VILLAGE", "AK"),
  ("ARDEN", "DE"),
  ("ARDEN HILLS", "MN"),
  ("ARDEN ON THE SEVERN", "MD"),
  ("ARDEN-ARCADE", "CA"),
  ("ARDENCROFT", "DE"),
  ("ARDENTOWN", "DE"),
  ("ARDMORE", "OK"),
  ("ARDMORE", "TN"),
  ("ARDMORE", "AL"),
  ("ARDMORE", "PA"),
  ("ARDOCH", "ND"),
  ("ARDSLEY", "NY"),
  ("ARECIBO", "PR"),
  ("AREDALE", "IA"),
  ("ARENA", "WI"),
  ("ARENAS VALLEY", "NM"),
  ("ARENDTSVILLE", "PA"),
  ("ARENZVILLE", "IL"),
  ("ARGENTA", "IL"),
  ("ARGENTINE", "MI"),
  ("ARGO", "AL"),
  ("ARGONIA", "KS"),
  ("ARGONNE", "WI"),
  ("ARGOS", "IN"),
  ("ARGUSVILLE", "ND"),
  ("ARGYLE", "TX"),
  ("ARGYLE", "GA"),
  ("ARGYLE", "MN"),
  ("ARGYLE", "WI"),
  ("ARGYLE", "MO"),
  ("ARGYLE", "NY"),
  ("ARIAL", "SC"),
  ("ARIMO", "ID"),
  ("ARION", "IA"),
  ("ARIPEKA", "FL"),
  ("ARISPE", "IA"),
  ("ARISTES", "PA"),
  ("ARISTOCRAT RANCHETTES", "CO"),
  ("ARITON", "AL"),
  ("ARIVACA", "AZ"),
  ("ARIVACA JUNCTION", "AZ"),
  ("ARIZONA CITY", "AZ"),
  ("ARIZONA VILLAGE", "AZ"),
  ("ARKADELPHIA", "AR"),
  ("ARKANSAS CITY", "KS"),
  ("ARKANSAS CITY", "AR"),
  ("ARKANSAW", "WI"),
  ("ARKDALE", "WI"),
  ("ARKOE", "MO"),
  ("ARKOMA", "OK"),
  ("ARKPORT", "NY"),
  ("ARLEE", "MT"),
  ("ARLEY", "AL"),
  ("ARLINGTON", "TX"),
  ("ARLINGTON", "VA"),
  ("ARLINGTON", "TN"),
  ("ARLINGTON", "WA"),
  ("ARLINGTON", "MA"),
  ("ARLINGTON", "GA"),
  ("ARLINGTON", "WY"),
  ("ARLINGTON", "VT"),
  ("ARLINGTON", "AZ"),
  ("ARLINGTON", "OR"),
  ("ARLINGTON", "SD"),
  ("ARLINGTON", "MN"),
  ("ARLINGTON", "IN"),
  ("ARLINGTON", "KS"),
  ("ARLINGTON", "IA"),
  ("ARLINGTON", "WI"),
  ("ARLINGTON", "OH"),
  ("ARLINGTON", "NY"),
  ("ARLINGTON", "NE"),
  ("ARLINGTON", "IL"),
  ("ARLINGTON", "KY"),
  ("ARLINGTON HEIGHTS", "IL"),
  ("ARLINGTON HEIGHTS", "WA"),
  ("ARLINGTON HEIGHTS", "PA"),
  ("ARLINGTON HEIGHTS", "OH"),
  ("ARMA", "KS"),
  ("ARMADA", "MI"),
  ("ARMAGH", "PA"),
  ("ARMINGTON", "IL"),
  ("ARMONA", "CA"),
  ("ARMONK", "NY"),
  ("ARMOUR", "SD"),
  ("ARMSTRONG", "IA"),
  ("ARMSTRONG", "MO"),
  ("ARMSTRONG", "OK"),
  ("ARNAUDVILLE", "LA"),
  ("ARNEGARD", "ND"),
  ("ARNETT", "OK"),
  ("ARNOLD", "CA"),
  ("ARNOLD", "MO"),
  ("ARNOLD", "MN"),
  ("ARNOLD", "MD"),
  ("ARNOLD", "PA"),
  ("ARNOLD", "NE"),
  ("ARNOLD CITY", "PA"),
  ("ARNOLD LINE", "MS"),
  ("ARNOLDS PARK", "IA"),
  ("ARNOLDSVILLE", "GA"),
  ("ARNOT", "PA"),
  ("AROMA PARK", "IL"),
  ("AROMAS", "CA"),
  ("ARONA", "PA"),
  ("ARP", "TX"),
  ("ARPELAR", "OK"),
  ("ARPIN", "WI"),
  ("ARREY", "NM"),
  ("ARRIBA", "CO"),
  ("ARRINGTON", "VA"),
  ("ARROW POINT", "MO"),
  ("ARROW ROCK", "MO"),
  ("ARROWHEAD SPRINGS", "WY"),
  ("ARROWSMITH", "IL"),
  ("ARROYO COLORADO ESTATES", "TX"),
  ("ARROYO GARDENS", "TX"),
  ("ARROYO GRANDE", "CA"),
  ("ARROYO HONDO", "NM"),
  ("ARROYO SECO", "NM"),
  ("ARROYO", "PR"),
  ("ARTAS", "SD"),
  ("ARTEMUS", "KY"),
  ("ARTESIA", "NM"),
  ("ARTESIA", "CA"),
  ("ARTESIA", "MS"),
  ("ARTESIAN", "SD"),
  ("ARTHUR", "ND"),
  ("ARTHUR", "IL"),
  ("ARTHUR", "NE"),
  ("ARTHUR", "IA"),
  ("ARTOIS", "CA"),
  ("ARTONDALE", "WA"),
  ("ARVADA", "CO"),
  ("ARVADA", "WY"),
  ("ARVIN", "CA"),
  ("ASBURY", "IA"),
  ("ASBURY", "NJ"),
  ("ASBURY", "MO"),
  ("ASBURY LAKE", "FL"),
  ("ASBURY PARK", "NJ"),
  ("ASCUTNEY", "VT"),
  ("ASH FLAT", "AR"),
  ("ASH FORK", "AZ"),
  ("ASH GROVE", "MO"),
  ("ASHAROKEN", "NY"),
  ("ASHAWAY", "RI"),
  ("ASHBURN", "VA"),
  ("ASHBURN", "GA"),
  ("ASHBURN", "MO"),
  ("ASHBY", "MN"),
  ("ASHDOWN", "AR"),
  ("ASHEBORO", "NC"),
  ("ASHER", "OK"),
  ("ASHERTON", "TX"),
  ("ASHERVILLE", "KS"),
  ("ASHEVILLE", "NC"),
  ("ASHFORD", "AL"),
  ("ASHFORD", "WA"),
  ("ASHIPPUN", "WI"),
  ("ASHKUM", "IL"),
  ("ASHLAND", "LA"),
  ("ASHLAND", "MT"),
  ("ASHLAND", "WI"),
  ("ASHLAND", "OH"),
  ("ASHLAND", "KY"),
  ("ASHLAND", "AL"),
  ("ASHLAND", "VA"),
  ("ASHLAND", "OR"),
  ("ASHLAND", "MO"),
  ("ASHLAND", "ME"),
  ("ASHLAND", "NJ"),
  ("ASHLAND", "CA"),
  ("ASHLAND", "MS"),
  ("ASHLAND", "KS"),
  ("ASHLAND", "PA"),
  ("ASHLAND", "NH"),
  ("ASHLAND", "NE"),
  ("ASHLAND", "IL"),
  ("ASHLAND", "OK"),
  ("ASHLAND CITY", "TN"),
  ("ASHLAND HEIGHTS", "SD"),
  ("ASHLEY", "IN"),
  ("ASHLEY", "MO"),
  ("ASHLEY", "IL"),
  ("ASHLEY", "PA"),
  ("ASHLEY", "OH"),
  ("ASHLEY", "MI"),
  ("ASHLEY", "ND"),
  ("ASHLEY HEIGHTS", "NC"),
  ("ASHMORE", "IL"),
  ("ASHTABULA", "OH"),
  ("ASHTON", "IA"),
  ("ASHTON", "ID"),
  ("ASHTON", "IL"),
  ("ASHTON", "NE"),
  ("ASHTON", "SD"),
  ("ASHTON-SANDY SPRING", "MD"),
  ("ASHVILLE", "AL"),
  ("ASHVILLE", "OH"),
  ("ASHVILLE", "PA"),
  ("ASHWAUBENON", "WI"),
  ("ASKEWVILLE", "NC"),
  ("ASKOV", "MN"),
  ("ASOTIN", "WA"),
  ("ASPEN", "CO"),
  ("ASPEN HILL", "MD"),
  ("ASPEN PARK", "CO"),
  ("ASPEN SPRINGS", "CA"),
  ("ASPERMONT", "TX"),
  ("ASPERS", "PA"),
  ("ASPINWALL", "PA"),
  ("ASPINWALL", "IA"),
  ("ASSARIA", "KS"),
  ("ASSUMPTION", "IL"),
  ("ASTATULA", "FL"),
  ("ASTOR", "FL"),
  ("ASTORIA", "OR"),
  ("ASTORIA", "IL"),
  ("ASTORIA", "SD"),
  ("ATALISSA", "IA"),
  ("ATASCADERO", "CA"),
  ("ATASCOCITA", "TX"),
  ("ATCHISON", "KS"),
  ("ATEN", "NE"),
  ("ATGLEN", "PA"),
  ("ATHALIA", "OH"),
  ("ATHELSTAN", "IA"),
  ("ATHENA", "OR"),
  ("ATHENS", "AL"),
  ("ATHENS", "TX"),
  ("ATHENS", "TN"),
  ("ATHENS", "OH"),
  ("ATHENS", "NY"),
  ("ATHENS", "WI"),
  ("ATHENS", "LA"),
  ("ATHENS", "PA"),
  ("ATHENS", "IL"),
  ("ATHENS", "MI"),
  ("ATHENS", "WV"),
  ("ATHENS-CLARKE", "GA"),
  ("ATHERTON", "CA"),
  ("ATHOL", "MA"),
  ("ATHOL", "ID"),
  ("ATHOL", "KS"),
  ("ATKA", "AK"),
  ("ATKINS", "AR"),
  ("ATKINS", "VA"),
  ("ATKINS", "IA"),
  ("ATKINSON", "NE"),
  ("ATKINSON", "IL"),
  ("ATKINSON", "NC"),
  ("ATKINSON MILLS", "PA"),
  ("ATLANTA", "GA"),
  ("ATLANTA", "TX"),
  ("ATLANTA", "MI"),
  ("ATLANTA", "IL"),
  ("ATLANTA", "LA"),
  ("ATLANTA", "KS"),
  ("ATLANTA", "MO"),
  ("ATLANTA", "IN"),
  ("ATLANTA", "NE"),
  ("ATLANTIC", "IA"),
  ("ATLANTIC", "VA"),
  ("ATLANTIC", "NC"),
  ("ATLANTIC", "PA"),
  ("ATLANTIC BEACH", "FL"),
  ("ATLANTIC BEACH", "NC"),
  ("ATLANTIC BEACH", "NY"),
  ("ATLANTIC BEACH", "SC"),
  ("ATLANTIC CITY", "NJ"),
  ("ATLANTIC CITY", "WY"),
  ("ATLANTIC HIGHLANDS", "NJ"),
  ("ATLANTIS", "FL"),
  ("ATLAS", "PA"),
  ("ATLASBURG", "PA"),
  ("ATMAUTLUAK", "AK"),
  ("ATMORE", "AL"),
  ("ATOKA", "TN"),
  ("ATOKA", "OK"),
  ("ATOKA", "NM"),
  ("ATOMIC CITY", "ID"),
  ("ATQASUK", "AK"),
  ("ATTALLA", "AL"),
  ("ATTAPULGUS", "GA"),
  ("ATTICA", "MI"),
  ("ATTICA", "NY"),
  ("ATTICA", "IN"),
  ("ATTICA", "OH"),
  ("ATTICA", "KS"),
  ("ATTLEBORO", "MA"),
  ("ATTU STATION", "AK"),
  ("ATWATER", "CA"),
  ("ATWATER", "MN"),
  ("ATWATER", "OH"),
  ("ATWOOD", "PA"),
  ("ATWOOD", "TN"),
  ("ATWOOD", "KS"),
  ("ATWOOD", "CO"),
  ("ATWOOD", "IL"),
  ("ATWOOD", "OK"),
  ("AU GRES", "MI"),
  ("AU SABLE", "MI"),
  ("AU SABLE FORKS", "NY"),
  ("AUBERRY", "CA"),
  ("AUBREY", "TX"),
  ("AUBREY", "AR"),
  ("AUBURN", "ME"),
  ("AUBURN", "AL"),
  ("AUBURN", "WA"),
  ("AUBURN", "NY"),
  ("AUBURN", "CA"),
  ("AUBURN", "IN"),
  ("AUBURN", "GA"),
  ("AUBURN", "IL"),
  ("AUBURN", "NE"),
  ("AUBURN", "WY"),
  ("AUBURN", "PA"),
  ("AUBURN", "KY"),
  ("AUBURN", "MI"),
  ("AUBURN", "ND"),
  ("AUBURN", "KS"),
  ("AUBURN", "IA"),
  ("AUBURN", "WV"),
  ("AUBURN HILLS", "MI"),
  ("AUBURN LAKE TRAILS", "CA"),
  ("AUBURNDALE", "FL"),
  ("AUBURNDALE", "WI"),
  ("AUBURNTOWN", "TN"),
  ("AUCILLA", "FL"),
  ("AUDUBON", "PA"),
  ("AUDUBON", "IA"),
  ("AUDUBON", "NJ"),
  ("AUDUBON", "MN"),
  ("AUDUBON PARK", "KY"),
  ("AUDUBON PARK", "NJ"),
  ("AUGUST", "CA"),
  ("AUGUSTA", "ME"),
  ("AUGUSTA", "KS"),
  ("AUGUSTA", "WI"),
  ("AUGUSTA", "AR"),
  ("AUGUSTA", "KY"),
  ("AUGUSTA", "MI"),
  ("AUGUSTA", "MT"),
  ("AUGUSTA", "MO"),
  ("AUGUSTA", "IL"),
  ("AUGUSTA SPRINGS", "VA"),
  ("AUGUSTA-RICHMOND COUNTY CONSOLIDATED GOVERNMENT", "GA"),
  ("AULANDER", "NC"),
  ("AULLVILLE", "MO"),
  ("AULT", "CO"),
  ("AUMSVILLE", "OR"),
  ("AURELIA", "IA"),
  ("AURORA", "CO"),
  ("AURORA", "IL"),
  ("AURORA", "OH"),
  ("AURORA", "MO"),
  ("AURORA", "MN"),
  ("AURORA", "TX"),
  ("AURORA", "NE"),
  ("AURORA", "IN"),
  ("AURORA", "WV"),
  ("AURORA", "UT"),
  ("AURORA", "NC"),
  ("AURORA", "NY"),
  ("AURORA", "IA"),
  ("AURORA", "OR"),
  ("AURORA", "SD"),
  ("AURORA", "KS"),
  ("AURORA CENTER", "SD"),
  ("AUSTELL", "GA"),
  ("AUSTIN", "TX"),
  ("AUSTIN", "MN"),
  ("AUSTIN", "PA"),
  ("AUSTIN", "AR"),
  ("AUSTIN", "IN"),
  ("AUSTIN", "NV"),
  ("AUSTINBURG", "OH"),
  ("AUSTINTOWN", "OH"),
  ("AUSTWELL", "TX"),
  ("AUTAUGAVILLE", "AL"),
  ("AUTRYVILLE", "NC"),
  ("AUXIER", "KY"),
  ("AUXVASSE", "MO"),
  ("AVA", "MO"),
  ("AVA", "IL"),
  ("AVALON", "NJ"),
  ("AVALON", "FL"),
  ("AVALON", "CA"),
  ("AVALON", "GA"),
  ("AVALON", "PA"),
  ("AVANT", "OK"),
  ("AVELLA", "PA"),
  ("AVENAL", "CA"),
  ("AVENEL", "NJ"),
  ("AVENTURA", "FL"),
  ("AVENUE B AND C", "AZ"),
  ("AVERA", "GA"),
  ("AVERILL PARK", "NY"),
  ("AVERY", "CA"),
  ("AVERY", "TX"),
  ("AVERY CREEK", "NC"),
  ("AVILLA", "AR"),
  ("AVILLA", "IN"),
  ("AVILLA", "MO"),
  ("AVILLA BEACH", "CA"),
  ("AVINGER", "TX"),
  ("AVIS", "PA"),
  ("AVISTON", "IL"),
  ("AVOCA", "WI"),
  ("AVOCA", "IA"),
  ("AVOCA", "IN"),
  ("AVOCA", "AR"),
  ("AVOCA", "NY"),
  ("AVOCA", "PA"),
  ("AVOCA", "MN"),
  ("AVOCA", "NE"),
  ("AVOCADO HEIGHTS", "CA"),
  ("AVON", "OH"),
  ("AVON", "IN"),
  ("AVON", "MT"),
  ("AVON", "CO"),
  ("AVON", "UT"),
  ("AVON", "NY"),
  ("AVON", "AL"),
  ("AVON", "NC"),
  ("AVON", "MN"),
  ("AVON", "PA"),
  ("AVON", "SD"),
  ("AVON", "IL"),
  ("AVON LAKE", "OH"),
  ("AVON PARK", "FL"),
  ("AVON-BY-THE-SEA", "NJ"),
  ("AVONDALE", "AZ"),
  ("AVONDALE", "LA"),
  ("AVONDALE", "CO"),
  ("AVONDALE", "PA"),
  ("AVONDALE", "MO"),
  ("AVONDALE ESTATES", "GA"),
  ("AVONIA", "PA"),
  ("AVONMORE", "PA"),
  ("AVRA VALLEY", "AZ"),
  ("AWENDAW", "SC"),
  ("AXIS", "AL"),
  ("AXTELL", "KS"),
  ("AXTELL", "NE"),
  ("AYDEN", "NC"),
  ("AYER", "MA"),
  ("AYNOR", "SC"),
  ("AYR", "NE"),
  ("AYR", "ND"),
  ("AYRSHIRE", "IA"),
  ("AZALEA PARK", "FL"),
  ("AZLE", "TX"),
  ("AZTEC", "NM"),
  ("AZTEC", "AZ"),
  ("AZURE", "MT"),
  ("AZUSA", "CA"),
  ("B AND E", "TX"),
  ("B˙FALO", "PR"),
  ("BABB", "MT"),
  ("BABBIE", "AL"),
  ("BABBITT", "MN"),
  ("BABCOCK", "WI"),
  ("BABSON PARK", "FL"),
  ("BABYLON", "NY"),
  ("BACKUS", "MN"),
  ("BACLIFF", "TX"),
  ("BACONTON", "GA"),
  ("BAD AXE", "MI"),
  ("BADEN", "MD"),
  ("BADEN", "PA"),
  ("BADGER", "AK"),
  ("BADGER", "MN"),
  ("BADGER", "IA"),
  ("BADGER", "SD"),
  ("BADGER LEE", "OK"),
  ("BADIN", "NC"),
  ("BAGDAD", "AZ"),
  ("BAGDAD", "FL"),
  ("BAGGS", "WY"),
  ("BAGLEY", "MN"),
  ("BAGLEY", "WI"),
  ("BAGLEY", "IA"),
  ("BAGNELL", "MO"),
  ("BAGTOWN", "MD"),
  ("BAIDLAND", "PA"),
  ("BAILEY", "NC"),
  ("BAILEY", "TX"),
  ("BAILEY LAKES", "OH"),
  ("BAILEY'S CROSSROADS", "VA"),
  ("BAILEYS HARBOR", "WI"),
  ("BAILEY'S PRAIRIE", "TX"),
  ("BAILEYTON", "AL"),
  ("BAILEYTON", "TN"),
  ("BAILEYVILLE", "KS"),
  ("BAILEYVILLE", "PA"),
  ("BAINBRIDGE", "GA"),
  ("BAINBRIDGE", "OH"),
  ("BAINBRIDGE", "PA"),
  ("BAINBRIDGE", "NY"),
  ("BAINBRIDGE", "OH"),
  ("BAINBRIDGE", "IN"),
  ("BAINBRIDGE ISLAND", "WA"),
  ("BAINVILLE", "MT"),
  ("BAIRD", "TX"),
  ("BAIRDFORD", "PA"),
  ("BAIRDSTOWN", "OH"),
  ("BAIROA LA VIENTICINCO", "PR"),
  ("BAIROIL", "WY"),
  ("BAITING HOLLOW", "NY"),
  ("BAJADERO", "PR"),
  ("BAJANDAS", "PR"),
  ("BAKER", "LA"),
  ("BAKER", "CA"),
  ("BAKER", "MN"),
  ("BAKER", "MT"),
  ("BAKER", "NV"),
  ("BAKER", "MO"),
  ("BAKER CITY", "OR"),
  ("BAKERHILL", "AL"),
  ("BAKERSFIELD", "CA"),
  ("BAKERSFIELD", "MO"),
  ("BAKERSTOWN", "PA"),
  ("BAKERSVILLE", "NC"),
  ("BAKERSVILLE", "MD"),
  ("BAL HARBOUR", "FL"),
  ("BALATON", "MN"),
  ("BALCH SPRINGS", "TX"),
  ("BALCONES HEIGHTS", "TX"),
  ("BALD HEAD ISLAND", "NC"),
  ("BALD KNOB", "AR"),
  ("BALDWIN", "PA"),
  ("BALDWIN", "GA"),
  ("BALDWIN", "LA"),
  ("BALDWIN", "NY"),
  ("BALDWIN", "WI"),
  ("BALDWIN", "FL"),
  ("BALDWIN", "MI"),
  ("BALDWIN", "IL"),
  ("BALDWIN", "IA"),
  ("BALDWIN CITY", "KS"),
  ("BALDWIN HARBOR", "NY"),
  ("BALDWIN PARK", "CA"),
  ("BALDWIN PARK", "MO"),
  ("BALDWINSVILLE", "NY"),
  ("BALDWINVILLE", "MA"),
  ("BALDWYN", "MS"),
  ("BALFOUR", "NC"),
  ("BALFOUR", "ND"),
  ("BALL", "LA"),
  ("BALL CLUB", "MN"),
  ("BALL GROUND", "GA"),
  ("BALLANTINE", "MT"),
  ("BALLARD", "UT"),
  ("BALLARD", "CA"),
  ("BALLENGER CREEK", "MD"),
  ("BALLICO", "CA"),
  ("BALLINGER", "TX"),
  ("BALLOU", "OK"),
  ("BALLPLAY", "AL"),
  ("BALLSTON SPA", "NY"),
  ("BALLTOWN", "IA"),
  ("BALLVILLE", "OH"),
  ("BALLWIN", "MO"),
  ("BALLY", "PA"),
  ("BALM", "FL"),
  ("BALMORHEA", "TX"),
  ("BALMVILLE", "NY"),
  ("BALSAM LAKE", "WI"),
  ("BALTA", "ND"),
  ("BALTIC", "CT"),
  ("BALTIC", "OH"),
  ("BALTIC", "SD"),
  ("BALTIMORE", "MD"),
  ("BALTIMORE", "OH"),
  ("BALTIMORE HIGHLANDS", "MD"),
  ("BAMBERG", "SC"),
  ("BANCROFT", "WI"),
  ("BANCROFT", "ID"),
  ("BANCROFT", "MI"),
  ("BANCROFT", "IA"),
  ("BANCROFT", "NE"),
  ("BANCROFT", "SD"),
  ("BANCROFT", "KY"),
  ("BANCROFT", "WV"),
  ("BANDANA", "KY"),
  ("BANDERA", "TX"),
  ("BANDON", "OR"),
  ("BANEBERRY", "TN"),
  ("BANGOR", "ME"),
  ("BANGOR", "CA"),
  ("BANGOR", "MI"),
  ("BANGOR", "PA"),
  ("BANGOR", "WI"),
  ("BANGOR BASE", "WA"),
  ("BANGS", "TX"),
  ("BANKS", "ID"),
  ("BANKS", "AL"),
  ("BANKS", "AR"),
  ("BANKS", "OR"),
  ("BANKS LAKE SOUTH", "WA"),
  ("BANKS SPRINGS", "LA"),
  ("BANKSTON", "IA"),
  ("BANNER", "IL"),
  ("BANNER ELK", "NC"),
  ("BANNER HILL", "TN"),
  ("BANNING", "CA"),
  ("BANNOCK", "OH"),
  ("BANNOCKBURN", "IL"),
  ("BANQUETE", "TX"),
  ("BANTAM", "CT"),
  ("BANTRY", "ND"),
  ("BAR HARBOR", "ME"),
  ("BAR NUNN", "WY"),
  ("BARABOO", "WI"),
  ("BARADA", "NE"),
  ("BARAGA", "MI"),
  ("BARAHONA", "PR"),
  ("BARATARIA", "LA"),
  ("BARBERTON", "OH"),
  ("BARBERTON", "WA"),
  ("BARBOURMEADE", "KY"),
  ("BARBOURSVILLE", "WV"),
  ("BARBOURVILLE", "KY"),
  ("BARCELONETA", "PR"),
  ("BARCLAY", "NJ"),
  ("BARCLAY", "MD"),
  ("BARDMOOR", "FL"),
  ("BARDOLPH", "IL"),
  ("BARDONIA", "NY"),
  ("BARDSTOWN", "KY"),
  ("BARDWELL", "KY"),
  ("BARDWELL", "TX"),
  ("BARGERSVILLE", "IN"),
  ("BARING", "WA"),
  ("BARING", "MO"),
  ("BARK RANCH", "CO"),
  ("BARKER", "NY"),
  ("BARKER HEIGHTS", "NC"),
  ("BARKER TEN MILE", "NC"),
  ("BARKEYVILLE", "PA"),
  ("BARLING", "AR"),
  ("BARLOW", "KY"),
  ("BARLOW", "OR"),
  ("BARNARD", "KS"),
  ("BARNARD", "MO"),
  ("BARNEGAT", "NJ"),
  ("BARNEGAT LIGHT", "NJ"),
  ("BARNES", "KS"),
  ("BARNES CITY", "IA"),
  ("BARNES LAKE-MILLERS LAKE", "MI"),
  ("BARNESTON", "NE"),
  ("BARNESVILLE", "GA"),
  ("BARNESVILLE", "MN"),
  ("BARNESVILLE", "OH"),
  ("BARNESVILLE", "MD"),
  ("BARNET", "VT"),
  ("BARNETT", "MO"),
  ("BARNEVELD", "WI"),
  ("BARNEVELD", "NY"),
  ("BARNEY", "ND"),
  ("BARNEY'S JUNCTION", "WA"),
  ("BARNHART", "MO"),
  ("BARNHILL", "OH"),
  ("BARNSDALL", "OK"),
  ("BARNSTABLE TOWN", "MA"),
  ("BARNUM", "MN"),
  ("BARNUM", "IA"),
  ("BARNUM ISLAND", "NY"),
  ("BARNWELL", "SC"),
  ("BARODA", "MI"),
  ("BARRACKVILLE", "WV"),
  ("BARRANQUITAS", "PR"),
  ("BARRE", "VT"),
  ("BARRE", "MA"),
  ("BARRELVILLE", "MD"),
  ("BARRERA", "TX"),
  ("BARRETT", "TX"),
  ("BARRETT", "MN"),
  ("BARRINGTON", "IL"),
  ("BARRINGTON", "NJ"),
  ("BARRINGTON HILLS", "IL"),
  ("BARRON", "WI"),
  ("BARRONETT", "WI"),
  ("BARROW", "AK"),
  ("BARRVILLE", "PA"),
  ("BARRY", "IL"),
  ("BARRY", "TX"),
  ("BARRY", "MN"),
  ("BARRYTON", "MI"),
  ("BARSTOW", "CA"),
  ("BARSTOW", "TX"),
  ("BARSTOW", "WA"),
  ("BARTELSO", "IL"),
  ("BARTLESVILLE", "OK"),
  ("BARTLETT", "TN"),
  ("BARTLETT", "IL"),
  ("BARTLETT", "NH"),
  ("BARTLETT", "TX"),
  ("BARTLETT", "IA"),
  ("BARTLETT", "NE"),
  ("BARTLETT", "KS"),
  ("BARTLEY", "WV"),
  ("BARTLEY", "NE"),
  ("BARTOLO", "PR"),
  ("BARTON", "VT"),
  ("BARTON", "ND"),
  ("BARTON", "MD"),
  ("BARTON CREEK", "TX"),
  ("BARTON HILLS", "MI"),
  ("BARTONSVILLE", "MD"),
  ("BARTONVILLE", "IL"),
  ("BARTONVILLE", "TX"),
  ("BARTOW", "FL"),
  ("BARTOW", "GA"),
  ("BARTOW", "WV"),
  ("BARVIEW", "OR"),
  ("BARWICK", "GA"),
  ("BASALT", "CO"),
  ("BASALT", "ID"),
  ("BASCO", "IL"),
  ("BASCOM", "OH"),
  ("BASCOM", "FL"),
  ("BASEHOR", "KS"),
  ("BASILE", "LA"),
  ("BASIN", "MT"),
  ("BASIN", "WY"),
  ("BASIN CITY", "WA"),
  ("BASKERVILLE", "VA"),
  ("BASKIN", "LA"),
  ("BASS LAKE", "IN"),
  ("BASS LAKE", "CA"),
  ("BASSETT", "VA"),
  ("BASSETT", "NE"),
  ("BASSETT", "IA"),
  ("BASSETT", "AR"),
  ("BASSETT", "KS"),
  ("BASSFIELD", "MS"),
  ("BASTROP", "TX"),
  ("BASTROP", "LA"),
  ("BASYE", "VA"),
  ("BATAVIA", "IL"),
  ("BATAVIA", "NY"),
  ("BATAVIA", "MT"),
  ("BATAVIA", "OH"),
  ("BATAVIA", "IA"),
  ("BATCHTOWN", "IL"),
  ("BATES CITY", "MO"),
  ("BATESBURG-LEESVILLE", "SC"),
  ("BATESLAND", "SD"),
  ("BATESVILLE", "MS"),
  ("BATESVILLE", "AR"),
  ("BATESVILLE", "IN"),
  ("BATESVILLE", "TX"),
  ("BATESVILLE", "OH"),
  ("BATH", "ME"),
  ("BATH", "MI"),
  ("BATH", "NY"),
  ("BATH", "PA"),
  ("BATH", "IL"),
  ("BATH", "NC"),
  ("BATH", "SD"),
  ("BATH (BERKELEY SPRINGS)", "WV"),
  ("BATH CORNER", "SD"),
  ("BATHGATE", "ND"),
  ("BATON ROUGE", "LA"),
  ("BATTLE CREEK", "MI"),
  ("BATTLE CREEK", "NE"),
  ("BATTLE CREEK", "IA"),
  ("BATTLE GROUND", "WA"),
  ("BATTLE GROUND", "IN"),
  ("BATTLE LAKE", "MN"),
  ("BATTLE MOUNTAIN", "NV"),
  ("BATTLEFIELD", "MO"),
  ("BATTLEMENT MESA", "CO"),
  ("BAUDETTE", "MN"),
  ("BAUMSTOWN", "PA"),
  ("BAUXITE", "AR"),
  ("BAWCOMVILLE", "LA"),
  ("BAXLEY", "GA"),
  ("BAXTER", "MN"),
  ("BAXTER", "TN"),
  ("BAXTER", "IA"),
  ("BAXTER ESTATES", "NY"),
  ("BAXTER SPRINGS", "KS"),
  ("BAY", "AR"),
  ("BAY CENTER", "WA"),
  ("BAY CITY", "MI"),
  ("BAY CITY", "TX"),
  ("BAY CITY", "OR"),
  ("BAY CITY", "WI"),
  ("BAY HARBOR ISLANDS", "FL"),
  ("BAY HEAD", "NJ"),
  ("BAY HILL", "FL"),
  ("BAY LAKE", "FL"),
  ("BAY MINETTE", "AL"),
  ("BAY PARK", "NY"),
  ("BAY PINES", "FL"),
  ("BAY POINT", "CA"),
  ("BAY PORT", "MI"),
  ("BAY SHORE", "NY"),
  ("BAY SHORE", "MI"),
  ("BAY SPRINGS", "MS"),
  ("BAY ST. LOUIS", "MS"),
  ("BAY VIEW", "WA"),
  ("BAY VIEW", "MI"),
  ("BAY VIEW", "OH"),
  ("BAY VIEW GARDENS", "IL"),
  ("BAY VILLAGE", "OH"),
  ("BAYAMÛN", "PR"),
  ("BAYAMÛN", "PR"),
  ("BAYARD", "NM"),
  ("BAYARD", "NE"),
  ("BAYARD", "IA"),
  ("BAYARD", "WV"),
  ("BAYBORO", "NC"),
  ("BAYFIELD", "CO"),
  ("BAYFIELD", "WI"),
  ("BAYLIS", "IL"),
  ("BAYONET POINT", "FL"),
  ("BAYONNE", "NJ"),
  ("BAYOU BLUE", "LA"),
  ("BAYOU CANE", "LA"),
  ("BAYOU COUNTRY CLUB", "LA"),
  ("BAYOU GAUCHE", "LA"),
  ("BAYOU GOULA", "LA"),
  ("BAYOU LA BATRE", "AL"),
  ("BAYOU L'OURSE", "LA"),
  ("BAYOU VISTA", "LA"),
  ("BAYOU VISTA", "TX"),
  ("BAYPORT", "NY"),
  ("BAYPORT", "MN"),
  ("BAYPORT", "FL"),
  ("BAYSHORE", "NC"),
  ("BAYSHORE GARDENS", "FL"),
  ("BAYSIDE", "WI"),
  ("BAYSIDE", "VA"),
  ("BAYSIDE", "TX"),
  ("BAYSIDE GARDENS", "OR"),
  ("BAYTOWN", "TX"),
  ("BAYVIEW", "TX"),
  ("BAYVIEW", "NC"),
  ("BAYVIEW", "CA"),
  ("BAYVIEW", "CA"),
  ("BAYVILLE", "NY"),
  ("BAYWOOD", "NY"),
  ("BAZILE MILLS", "NE"),
  ("BAZINE", "KS"),
  ("BEACH", "ND"),
  ("BEACH CITY", "TX"),
  ("BEACH CITY", "OH"),
  ("BEACH HAVEN", "NJ"),
  ("BEACH HAVEN WEST", "NJ"),
  ("BEACH PARK", "IL"),
  ("BEACHWOOD", "OH"),
  ("BEACHWOOD", "NJ"),
  ("BEACON", "NY"),
  ("BEACON", "IA"),
  ("BEACON SQUARE", "FL"),
  ("BEACONSFIELD", "IA"),
  ("BEAL CITY", "MI"),
  ("BEALE AFB", "CA"),
  ("BEALETON", "VA"),
  ("BEALLSVILLE", "PA"),
  ("BEALLSVILLE", "OH"),
  ("BEAMAN", "IA"),
  ("BEAN STATION", "TN"),
  ("BEAR", "DE"),
  ("BEAR CREEK", "AK"),
  ("BEAR CREEK", "AL"),
  ("BEAR CREEK", "TX"),
  ("BEAR CREEK", "WI"),
  ("BEAR CREEK", "FL"),
  ("BEAR CREEK", "CA"),
  ("BEAR CREEK VILLAGE", "PA"),
  ("BEAR DANCE", "MT"),
  ("BEAR FLAT", "AZ"),
  ("BEAR GRASS", "NC"),
  ("BEAR LAKE", "MI"),
  ("BEAR LAKE", "PA"),
  ("BEAR LAKE", "MI"),
  ("BEAR RIVER", "WY"),
  ("BEAR RIVER CITY", "UT"),
  ("BEAR ROCKS", "PA"),
  ("BEAR VALLEY", "CA"),
  ("BEAR VALLEY", "CA"),
  ("BEAR VALLEY SPRINGS", "CA"),
  ("BEARCREEK", "MT"),
  ("BEARDEN", "OK"),
  ("BEARDEN", "AR"),
  ("BEARDS FORK", "WV"),
  ("BEARDSLEY", "MN"),
  ("BEARDSTOWN", "IL"),
  ("BEASLEY", "TX"),
  ("BEASON", "IL"),
  ("BEATRICE", "NE"),
  ("BEATRICE", "AL"),
  ("BEATTIE", "KS"),
  ("BEATTY", "NV"),
  ("BEATTYSTOWN", "NJ"),
  ("BEATTYVILLE", "KY"),
  ("BEAUFORT", "SC"),
  ("BEAUFORT", "NC"),
  ("BEAULIEU", "MN"),
  ("BEAUMONT", "TX"),
  ("BEAUMONT", "CA"),
  ("BEAUMONT", "MS"),
  ("BEAUREGARD", "MS"),
  ("BEAUX ARTS VILLAGE", "WA"),
  ("BEAVER", "AK"),
  ("BEAVER", "UT"),
  ("BEAVER", "WV"),
  ("BEAVER", "OK"),
  ("BEAVER", "PA"),
  ("BEAVER", "OH"),
  ("BEAVER", "OR"),
  ("BEAVER", "AR"),
  ("BEAVER", "IA"),
  ("BEAVER BAY", "MN"),
  ("BEAVER CITY", "NE"),
  ("BEAVER CREEK", "MT"),
  ("BEAVER CREEK", "MD"),
  ("BEAVER CREEK", "MN"),
  ("BEAVER CROSSING", "NE"),
  ("BEAVER DAM", "AZ"),
  ("BEAVER DAM", "WI"),
  ("BEAVER DAM", "KY"),
  ("BEAVER DAM LAKE", "NY"),
  ("BEAVER FALLS", "PA"),
  ("BEAVER MEADOWS", "PA"),
  ("BEAVER SPRINGS", "PA"),
  ("BEAVER VALLEY", "AZ"),
  ("BEAVERCREEK", "OH"),
  ("BEAVERCREEK", "OR"),
  ("BEAVERDALE", "IA"),
  ("BEAVERDALE", "PA"),
  ("BEAVERDAM", "NV"),
  ("BEAVERDAM", "OH"),
  ("BEAVERTON", "OR"),
  ("BEAVERTON", "AL"),
  ("BEAVERTON", "MI"),
  ("BEAVERTOWN", "PA"),
  ("BEAVERVILLE", "IL"),
  ("BECHTELSVILLE", "PA"),
  ("BECKEMEYER", "IL"),
  ("BECKER", "MN"),
  ("BECKETT", "NJ"),
  ("BECKETT RIDGE", "OH"),
  ("BECKLEY", "WV"),
  ("BECKVILLE", "TX"),
  ("BECKWOURTH", "CA"),
  ("BECLABITO", "NM"),
  ("BEDFORD", "IN"),
  ("BEDFORD", "TX"),
  ("BEDFORD", "VA"),
  ("BEDFORD", "OH"),
  ("BEDFORD", "NY"),
  ("BEDFORD", "IA"),
  ("BEDFORD", "WY"),
  ("BEDFORD", "PA"),
  ("BEDFORD", "KY"),
  ("BEDFORD HEIGHTS", "OH"),
  ("BEDFORD HILLS", "NY"),
  ("BEDFORD PARK", "IL"),
  ("BEDIAS", "TX"),
  ("BEE", "OK"),
  ("BEE", "NE"),
  ("BEE CAVE", "TX"),
  ("BEE RIDGE", "FL"),
  ("BEEBE", "AR"),
  ("BEECH BOTTOM", "WV"),
  ("BEECH CREEK", "PA"),
  ("BEECH GROVE", "IN"),
  ("BEECH GROVE", "KY"),
  ("BEECH MOUNTAIN", "NC"),
  ("BEECH MOUNTAIN LAKES", "PA"),
  ("BEECHER", "MI"),
  ("BEECHER", "IL"),
  ("BEECHER CITY", "IL"),
  ("BEECHER FALLS", "VT"),
  ("BEECHMONT", "KY"),
  ("BEECHWOOD", "MS"),
  ("BEECHWOOD", "MI"),
  ("BEECHWOOD TRAILS", "OH"),
  ("BEECHWOOD VILLAGE", "KY"),
  ("BEEDEVILLE", "AR"),
  ("BEEMER", "NE"),
  ("BEERSHEBA SPRINGS", "TN"),
  ("BEEVILLE", "TX"),
  ("BEGGS", "OK"),
  ("BEJOU", "MN"),
  ("BEL AIR", "MD"),
  ("BEL AIR", "MD"),
  ("BEL AIR NORTH", "MD"),
  ("BEL AIR SOUTH", "MD"),
  ("BEL AIRE", "KS"),
  ("BELCHER", "LA"),
  ("BELCHERTOWN", "MA"),
  ("BELCOURT", "ND"),
  ("BELDEN", "CA"),
  ("BELDEN", "NE"),
  ("BELDING", "MI"),
  ("BELEN", "NM"),
  ("BELFAIR", "WA"),
  ("BELFAST", "ME"),
  ("BELFAST", "NY"),
  ("BELFAST", "PA"),
  ("BELFIELD", "ND"),
  ("BELFONTE", "OK"),
  ("BELFORD", "NJ"),
  ("BELFRY", "MT"),
  ("BELGIUM", "WI"),
  ("BELGIUM", "IL"),
  ("BELGRADE", "MT"),
  ("BELGRADE", "MN"),
  ("BELGRADE", "NE"),
  ("BELGREEN", "AL"),
  ("BELHAVEN", "NC"),
  ("BELINGTON", "WV"),
  ("BELK", "AL"),
  ("BELKNAP", "MT"),
  ("BELKNAP", "IL"),
  ("BELL", "OK"),
  ("BELL", "CA"),
  ("BELL", "FL"),
  ("BELL ACRES", "PA"),
  ("BELL ARTHUR", "NC"),
  ("BELL BUCKLE", "TN"),
  ("BELL CANYON", "CA"),
  ("BELL CENTER", "WI"),
  ("BELL CITY", "MO"),
  ("BELL GARDENS", "CA"),
  ("BELL HILL", "WA"),
  ("BELLA VILLA", "MO"),
  ("BELLA VISTA", "AR"),
  ("BELLA VISTA", "CA"),
  ("BELLAIRE", "TX"),
  ("BELLAIRE", "MI"),
  ("BELLAIRE", "OH"),
  ("BELLAIR-MEADOWBROOK TERRACE", "FL"),
  ("BELLAMY", "AL"),
  ("BELLBROOK", "OH"),
  ("BELLE", "MO"),
  ("BELLE", "WV"),
  ("BELLE CENTER", "OH"),
  ("BELLE CHASSE", "LA"),
  ("BELLE FONTAINE", "AL"),
  ("BELLE FOURCHE", "SD"),
  ("BELLE GLADE", "FL"),
  ("BELLE HAVEN", "VA"),
  ("BELLE HAVEN", "VA"),
  ("BELLE ISLE", "FL"),
  ("BELLE MEAD", "NJ"),
  ("BELLE MEADE", "TN"),
  ("BELLE PLAINE", "MN"),
  ("BELLE PLAINE", "IA"),
  ("BELLE PLAINE", "KS"),
  ("BELLE PRAIRIE CITY", "IL"),
  ("BELLE RIVE", "IL"),
  ("BELLE ROSE", "LA"),
  ("BELLE TERRE", "NY"),
  ("BELLE VALLEY", "OH"),
  ("BELLE VERNON", "PA"),
  ("BELLEAIR", "FL"),
  ("BELLEAIR BEACH", "FL"),
  ("BELLEAIR BLUFFS", "FL"),
  ("BELLEAIR SHORE", "FL"),
  ("BELLECHESTER", "MN"),
  ("BELLEFONTAINE", "OH"),
  ("BELLEFONTAINE NEIGHBORS", "MO"),
  ("BELLEFONTE", "PA"),
  ("BELLEFONTE", "KY"),
  ("BELLEFONTE", "AR"),
  ("BELLEFONTE", "DE"),
  ("BELLEMEADE", "KY"),
  ("BELLEPLAIN", "NJ"),
  ("BELLERIVE", "MO"),
  ("BELLEROSE", "NY"),
  ("BELLEROSE TERRACE", "NY"),
  ("BELLEVIEW", "FL"),
  ("BELLEVIEW", "KY"),
  ("BELLEVILLE", "IL"),
  ("BELLEVILLE", "PA"),
  ("BELLEVILLE", "KS"),
  ("BELLEVILLE", "AR"),
  ("BELLEVILLE", "WI"),
  ("BELLEVILLE", "MI"),
  ("BELLEVILLE", "NY"),
  ("BELLEVUE", "WA"),
  ("BELLEVUE", "NE"),
  ("BELLEVUE", "WI"),
  ("BELLEVUE", "OH"),
  ("BELLEVUE", "IL"),
  ("BELLEVUE", "ID"),
  ("BELLEVUE", "IA"),
  ("BELLEVUE", "MI"),
  ("BELLEVUE", "PA"),
  ("BELLEVUE", "KY"),
  ("BELLEVUE", "TX"),
  ("BELLEWOOD", "KY"),
  ("BELLFLOWER", "CA"),
  ("BELLFLOWER", "MO"),
  ("BELLFLOWER", "IL"),
  ("BELLFOUNTAIN", "OR"),
  ("BELLINGHAM", "WA"),
  ("BELLINGHAM", "MA"),
  ("BELLINGHAM", "MN"),
  ("BELLMAWR", "NJ"),
  ("BELLMEAD", "TX"),
  ("BELLMONT", "IL"),
  ("BELLMORE", "NY"),
  ("BELLOWS FALLS", "VT"),
  ("BELLPORT", "NY"),
  ("BELLS", "TN"),
  ("BELLS", "TX"),
  ("BELLVIEW", "FL"),
  ("BELLVILLE", "OH"),
  ("BELLVILLE", "TX"),
  ("BELLVILLE", "GA"),
  ("BELLWOOD", "VA"),
  ("BELLWOOD", "IL"),
  ("BELLWOOD", "PA"),
  ("BELLWOOD", "NE"),
  ("BELMAR", "NE"),
  ("BELMAR", "NJ"),
  ("BELMOND", "IA"),
  ("BELMONT", "LA"),
  ("BELMONT", "NC"),
  ("BELMONT", "MS"),
  ("BELMONT", "MA"),
  ("BELMONT", "CA"),
  ("BELMONT", "VA"),
  ("BELMONT", "PA"),
  ("BELMONT", "NH"),
  ("BELMONT", "NY"),
  ("BELMONT", "WI"),
  ("BELMONT", "WV"),
  ("BELMONT", "OH"),
  ("BELMONT ESTATES", "VA"),
  ("BELMORE", "OH"),
  ("BEL-NOR", "MO"),
  ("BELOIT", "WI"),
  ("BELOIT", "KS"),
  ("BELOIT", "OH"),
  ("BELPRE", "OH"),
  ("BELPRE", "KS"),
  ("BEL-RIDGE", "MO"),
  ("BELSPRING", "VA"),
  ("BELT", "MT"),
  ("BELTON", "TX"),
  ("BELTON", "MO"),
  ("BELTON", "SC"),
  ("BELTRAMI", "MN"),
  ("BELTSVILLE", "MD"),
  ("BELUGA", "AK"),
  ("BELVA", "WV"),
  ("BELVEDERE", "SC"),
  ("BELVEDERE", "CA"),
  ("BELVEDERE PARK", "GA"),
  ("BELVIDERE", "IL"),
  ("BELVIDERE", "NJ"),
  ("BELVIDERE", "SD"),
  ("BELVIDERE", "NE"),
  ("BELVIEW", "VA"),
  ("BELVIEW", "MN"),
  ("BELVILLE", "NC"),
  ("BELVOIR", "NC"),
  ("BELVUE", "KS"),
  ("BELWOOD", "NC"),
  ("BELZONI", "MS"),
  ("BEMENT", "IL"),
  ("BEMIDJI", "MN"),
  ("BEMUS POINT", "NY"),
  ("BEN AVON", "PA"),
  ("BEN AVON HEIGHTS", "PA"),
  ("BEN LOMOND", "CA"),
  ("BEN LOMOND", "AR"),
  ("BENA", "MN"),
  ("BENAVIDES", "TX"),
  ("BENBOW", "CA"),
  ("BENBROOK", "TX"),
  ("BEND", "OR"),
  ("BEND", "CA"),
  ("BENDENA", "KS"),
  ("BENDERSVILLE", "PA"),
  ("BENDON", "MI"),
  ("BENEDICT", "ND"),
  ("BENEDICT", "MD"),
  ("BENEDICT", "NE"),
  ("BENEDICT", "KS"),
  ("BENHAM", "KY"),
  ("BENICIA", "CA"),
  ("BENÌTEZ", "PR"),
  ("BENJAMIN", "UT"),
  ("BENJAMIN", "TX"),
  ("BENJAMIN PEREZ", "TX"),
  ("BENKELMAN", "NE"),
  ("BENLD", "IL"),
  ("BENNET", "NE"),
  ("BENNETT", "CO"),
  ("BENNETT", "NC"),
  ("BENNETT", "IA"),
  ("BENNETT SPRINGS", "NV"),
  ("BENNETT SPRINGS", "MO"),
  ("BENNETTSVILLE", "SC"),
  ("BENNINGTON", "ID"),
  ("BENNINGTON", "VT"),
  ("BENNINGTON", "NE"),
  ("BENNINGTON", "OK"),
  ("BENNINGTON", "NH"),
  ("BENNINGTON", "KS"),
  ("BENNS CHURCH", "VA"),
  ("BENOIT", "MS"),
  ("BENSENVILLE", "IL"),
  ("BENSLEY", "VA"),
  ("BENSON", "AZ"),
  ("BENSON", "UT"),
  ("BENSON", "VT"),
  ("BENSON", "MN"),
  ("BENSON", "NC"),
  ("BENSON", "PA"),
  ("BENSON", "IL"),
  ("BENSVILLE", "MD"),
  ("BENT", "NM"),
  ("BENT CREEK", "NC"),
  ("BENTLEY", "IA"),
  ("BENTLEY", "KS"),
  ("BENTLEY", "IL"),
  ("BENTLEYVILLE", "PA"),
  ("BENTLEYVILLE", "OH"),
  ("BENTON", "CA"),
  ("BENTON", "AR"),
  ("BENTON", "IL"),
  ("BENTON", "KY"),
  ("BENTON", "TN"),
  ("BENTON", "LA"),
  ("BENTON", "KS"),
  ("BENTON", "WI"),
  ("BENTON", "IA"),
  ("BENTON", "PA"),
  ("BENTON", "MO"),
  ("BENTON", "AL"),
  ("BENTON CITY", "WA"),
  ("BENTON CITY", "MO"),
  ("BENTON HARBOR", "MI"),
  ("BENTON HEIGHTS", "MI"),
  ("BENTON RIDGE", "OH"),
  ("BENTONIA", "MS"),
  ("BENTONVILLE", "AR"),
  ("BENTONVILLE", "OH"),
  ("BENWOOD", "WV"),
  ("BENZONIA", "MI"),
  ("BEREA", "KY"),
  ("BEREA", "SC"),
  ("BEREA", "OH"),
  ("BEREA", "NE"),
  ("BERESFORD", "SD"),
  ("BERGEN", "NY"),
  ("BERGEN", "ND"),
  ("BERGENFIELD", "NJ"),
  ("BERGER", "MO"),
  ("BERGHOLZ", "OH"),
  ("BERGMAN", "AR"),
  ("BERGOO", "WV"),
  ("BERINO", "NM"),
  ("BERKELEY", "CA"),
  ("BERKELEY", "MO"),
  ("BERKELEY", "IL"),
  ("BERKELEY LAKE", "GA"),
  ("BERKEY", "OH"),
  ("BERKLEY", "CO"),
  ("BERKLEY", "MI"),
  ("BERKLEY", "IA"),
  ("BERLIN", "NH"),
  ("BERLIN", "WI"),
  ("BERLIN", "NJ"),
  ("BERLIN", "MD"),
  ("BERLIN", "OH"),
  ("BERLIN", "IL"),
  ("BERLIN", "PA"),
  ("BERLIN", "GA"),
  ("BERLIN", "ND"),
  ("BERLIN HEIGHTS", "OH"),
  ("BERMUDA DUNES", "CA"),
  ("BERMUDA RUN", "NC"),
  ("BERN", "KS"),
  ("BERNALILLO", "NM"),
  ("BERNARD", "IA"),
  ("BERNARDSVILLE", "NJ"),
  ("BERNE", "IN"),
  ("BERNICE", "LA"),
  ("BERNICE", "OK"),
  ("BERNIE", "MO"),
  ("BERNVILLE", "PA"),
  ("BERRIEN SPRINGS", "MI"),
  ("BERRY", "AL"),
  ("BERRY", "KY"),
  ("BERRY CREEK", "CA"),
  ("BERRY HILL", "TN"),
  ("BERRYDALE", "FL"),
  ("BERRYSBURG", "PA"),
  ("BERRYVILLE", "AR"),
  ("BERRYVILLE", "VA"),
  ("BERRYVILLE", "TX"),
  ("BERTHA", "MN"),
  ("BERTHOLD", "ND"),
  ("BERTHOUD", "CO"),
  ("BERTRAM", "IA"),
  ("BERTRAM", "TX"),
  ("BERTRAND", "MO"),
  ("BERTRAND", "NE"),
  ("BERTSCH-OCEANVIEW", "CA"),
  ("BERWICK", "LA"),
  ("BERWICK", "PA"),
  ("BERWICK", "ME"),
  ("BERWIND", "WV"),
  ("BERWYN", "IL"),
  ("BERWYN", "PA"),
  ("BERWYN", "NE"),
  ("BERWYN HEIGHTS", "MD"),
  ("BERYL JUNCTION", "UT"),
  ("BESSEMER", "AL"),
  ("BESSEMER", "MI"),
  ("BESSEMER", "PA"),
  ("BESSEMER BEND", "WY"),
  ("BESSEMER CITY", "NC"),
  ("BESSIE", "OK"),
  ("BETANCES", "PR"),
  ("BETHALTO", "IL"),
  ("BETHANIA", "NC"),
  ("BETHANY", "OK"),
  ("BETHANY", "OR"),
  ("BETHANY", "MO"),
  ("BETHANY", "IL"),
  ("BETHANY", "WV"),
  ("BETHANY", "PA"),
  ("BETHANY", "IN"),
  ("BETHANY BEACH", "DE"),
  ("BETHEL", "AK"),
  ("BETHEL", "CT"),
  ("BETHEL", "WA"),
  ("BETHEL", "VT"),
  ("BETHEL", "OH"),
  ("BETHEL", "NC"),
  ("BETHEL", "MN"),
  ("BETHEL", "PA"),
  ("BETHEL", "DE"),
  ("BETHEL", "MO"),
  ("BETHEL ACRES", "OK"),
  ("BETHEL HEIGHTS", "AR"),
  ("BETHEL ISLAND", "CA"),
  ("BETHEL MANOR", "VA"),
  ("BETHEL PARK", "PA"),
  ("BETHEL SPRINGS", "TN"),
  ("BETHESDA", "MD"),
  ("BETHESDA", "OH"),
  ("BETHLEHEM", "PA"),
  ("BETHLEHEM", "NC"),
  ("BETHLEHEM", "WV"),
  ("BETHLEHEM", "GA"),
  ("BETHLEHEM", "NH"),
  ("BETHLEHEM VILLAGE", "CT"),
  ("BETHPAGE", "NY"),
  ("BETHPAGE", "TN"),
  ("BETHUNE", "SC"),
  ("BETHUNE", "CO"),
  ("BETSY LAYNE", "KY"),
  ("BETTENDORF", "IA"),
  ("BETTERTON", "MD"),
  ("BETTLES", "AK"),
  ("BETTSVILLE", "OH"),
  ("BETWEEN", "GA"),
  ("BEULAH", "ND"),
  ("BEULAH", "WY"),
  ("BEULAH", "MS"),
  ("BEULAH", "MI"),
  ("BEULAH BEACH", "OH"),
  ("BEULAH VALLEY", "CO"),
  ("BEULAVILLE", "NC"),
  ("BEURYS LAKE", "PA"),
  ("BEVERLY", "MA"),
  ("BEVERLY", "OH"),
  ("BEVERLY", "NJ"),
  ("BEVERLY", "WV"),
  ("BEVERLY", "KS"),
  ("BEVERLY BEACH", "FL"),
  ("BEVERLY HILLS", "CA"),
  ("BEVERLY HILLS", "MI"),
  ("BEVERLY HILLS", "FL"),
  ("BEVERLY HILLS", "TX"),
  ("BEVERLY HILLS", "MO"),
  ("BEVERLY SHORES", "IN"),
  ("BEVIER", "MO"),
  ("BEVIL OAKS", "TX"),
  ("BEVINGTON", "IA"),
  ("BEXLEY", "OH"),
  ("BEYERVILLE", "AZ"),
  ("BIBO", "NM"),
  ("BICKLETON", "WA"),
  ("BICKNELL", "IN"),
  ("BICKNELL", "UT"),
  ("BIDDEFORD", "ME"),
  ("BIDDLE", "MT"),
  ("BIEBER", "CA"),
  ("BIEHLE", "MO"),
  ("BIENVILLE", "LA"),
  ("BIER", "MD"),
  ("BIG ARM", "MT"),
  ("BIG BASS LAKE", "PA"),
  ("BIG BAY", "MI"),
  ("BIG BEAR CITY", "CA"),
  ("BIG BEAR LAKE", "CA"),
  ("BIG BEAVER", "PA"),
  ("BIG BEND", "CA"),
  ("BIG BEND", "WI"),
  ("BIG CABIN", "OK"),
  ("BIG CHIMNEY", "WV"),
  ("BIG COPPITT KEY", "FL"),
  ("BIG CREEK", "MS"),
  ("BIG CREEK", "WV"),
  ("BIG CREEK", "CA"),
  ("BIG DELTA", "AK"),
  ("BIG FALLS", "MN"),
  ("BIG FALLS", "WI"),
  ("BIG FLAT", "AR"),
  ("BIG FLATS", "NY"),
  ("BIG HORN", "WY"),
  ("BIG ISLAND", "VA"),
  ("BIG LAGOON", "CA"),
  ("BIG LAKE", "AK"),
  ("BIG LAKE", "MN"),
  ("BIG LAKE", "WA"),
  ("BIG LAKE", "MN"),
  ("BIG LAKE", "MO"),
  ("BIG LAKE", "TX"),
  ("BIG PINE", "CA"),
  ("BIG PINE KEY", "FL"),
  ("BIG PINEY", "WY"),
  ("BIG POINT", "MS"),
  ("BIG POOL", "MD"),
  ("BIG RAPIDS", "MI"),
  ("BIG RIVER", "CA"),
  ("BIG ROCK", "IL"),
  ("BIG RUN", "PA"),
  ("BIG SANDY", "TX"),
  ("BIG SANDY", "TN"),
  ("BIG SANDY", "WV"),
  ("BIG SANDY", "MT"),
  ("BIG SKY", "MT"),
  ("BIG SPRING", "TX"),
  ("BIG SPRING", "MO"),
  ("BIG SPRING", "MD"),
  ("BIG SPRINGS", "NE"),
  ("BIG STONE CITY", "SD"),
  ("BIG STONE GAP", "VA"),
  ("BIG THICKET LAKE ESTATES", "TX"),
  ("BIG TIMBER", "MT"),
  ("BIG WATER", "UT"),
  ("BIG WELLS", "TX"),
  ("BIGELOW", "AR"),
  ("BIGELOW", "MN"),
  ("BIGELOW", "MO"),
  ("BIGFOOT", "TX"),
  ("BIGFORK", "MT"),
  ("BIGFORK", "MN"),
  ("BIGGERS", "AR"),
  ("BIGGS", "CA"),
  ("BIGGS JUNCTION", "OR"),
  ("BIGGSVILLE", "IL"),
  ("BIGLER", "PA"),
  ("BIGLERVILLE", "PA"),
  ("BIJOU HILLS", "SD"),
  ("BILLINGS", "MT"),
  ("BILLINGS", "MO"),
  ("BILLINGS", "OK"),
  ("BILLINGSLEY", "AL"),
  ("BILLINGTON HEIGHTS", "NY"),
  ("BILOXI", "MS"),
  ("BILTMORE FOREST", "NC"),
  ("BINFORD", "ND"),
  ("BINGEN", "WA"),
  ("BINGER", "OK"),
  ("BINGHAM", "ME"),
  ("BINGHAM", "IL"),
  ("BINGHAM FARMS", "MI"),
  ("BINGHAM LAKE", "MN"),
  ("BINGHAMTON", "NY"),
  ("BINGHAMTON UNIVERSITY", "NY"),
  ("BIOLA", "CA"),
  ("BIRCH BAY", "WA"),
  ("BIRCH CREEK", "AK"),
  ("BIRCH HILL", "WI"),
  ("BIRCH RIVER", "WV"),
  ("BIRCH RUN", "MI"),
  ("BIRCH TREE", "MO"),
  ("BIRCHWOOD", "WI"),
  ("BIRCHWOOD LAKES", "PA"),
  ("BIRCHWOOD VILLAGE", "MN"),
  ("BIRD CITY", "KS"),
  ("BIRD ISLAND", "MN"),
  ("BIRD-IN-HAND", "PA"),
  ("BIRDSBORO", "PA"),
  ("BIRDSEYE", "IN"),
  ("BIRDSONG", "AR"),
  ("BIRMINGHAM", "AL"),
  ("BIRMINGHAM", "MI"),
  ("BIRMINGHAM", "IA"),
  ("BIRMINGHAM", "MO"),
  ("BIRMINGHAM", "PA"),
  ("BIRNAMWOOD", "WI"),
  ("BIRNEY", "MT"),
  ("BIRON", "WI"),
  ("BISBEE", "AZ"),
  ("BISBEE", "ND"),
  ("BISCAY", "MN"),
  ("BISCAYNE PARK", "FL"),
  ("BISCOE", "NC"),
  ("BISHOP", "TX"),
  ("BISHOP", "CA"),
  ("BISHOP", "GA"),
  ("BISHOP HILL", "IL"),
  ("BISHOP HILLS", "TX"),
  ("BISHOPVILLE", "MD"),
  ("BISHOPVILLE", "SC"),
  ("BISMARCK", "ND"),
  ("BISMARCK", "MO"),
  ("BISMARCK", "IL"),
  ("BISON", "OK"),
  ("BISON", "SD"),
  ("BISON", "KS"),
  ("BITHLO", "FL"),
  ("BITTER SPRINGS", "AZ"),
  ("BIVALVE", "MD"),
  ("BIWABIK", "MN"),
  ("BIXBY", "OK"),
  ("BIXBY", "TX"),
  ("BLACK", "AL"),
  ("BLACK BUTTE RANCH", "OR"),
  ("BLACK CANYON CITY", "AZ"),
  ("BLACK CREEK", "WI"),
  ("BLACK CREEK", "NC"),
  ("BLACK DIAMOND", "WA"),
  ("BLACK DIAMOND", "FL"),
  ("BLACK EAGLE", "MT"),
  ("BLACK EARTH", "WI"),
  ("BLACK FOREST", "CO"),
  ("BLACK HAMMOCK", "FL"),
  ("BLACK HAWK", "CO"),
  ("BLACK JACK", "MO"),
  ("BLACK LICK", "PA"),
  ("BLACK MOUNTAIN", "NC"),
  ("BLACK OAK", "AR"),
  ("BLACK POINT-GREEN POINT", "CA"),
  ("BLACK RIVER", "NY"),
  ("BLACK RIVER FALLS", "WI"),
  ("BLACK ROCK", "AR"),
  ("BLACK ROCK", "NM"),
  ("BLACK SPRINGS", "AR"),
  ("BLACKBURN", "MO"),
  ("BLACKBURN", "OK"),
  ("BLACKDUCK", "MN"),
  ("BLACKEY", "KY"),
  ("BLACKFOOT", "ID"),
  ("BLACKGUM", "OK"),
  ("BLACKHAWK", "CA"),
  ("BLACKHAWK", "SD"),
  ("BLACKLAKE", "CA"),
  ("BLACKLICK ESTATES", "OH"),
  ("BLACKSBURG", "VA"),
  ("BLACKSBURG", "SC"),
  ("BLACKSHEAR", "GA"),
  ("BLACKSTONE", "VA"),
  ("BLACKSVILLE", "WV"),
  ("BLACKVILLE", "SC"),
  ("BLACKWATER", "AZ"),
  ("BLACKWATER", "MO"),
  ("BLACKWELL", "OK"),
  ("BLACKWELL", "TX"),
  ("BLACKWELLS MILLS", "NJ"),
  ("BLACKWOOD", "NJ"),
  ("BLADEN", "NE"),
  ("BLADENBORO", "NC"),
  ("BLADENSBURG", "MD"),
  ("BLADENSBURG", "OH"),
  ("BLADES", "DE"),
  ("BLAIN", "PA"),
  ("BLAINE", "MN"),
  ("BLAINE", "TN"),
  ("BLAINE", "WA"),
  ("BLAINE", "ME"),
  ("BLAINE", "KY"),
  ("BLAIR", "NE"),
  ("BLAIR", "WI"),
  ("BLAIR", "OK"),
  ("BLAIRS", "VA"),
  ("BLAIRSBURG", "IA"),
  ("BLAIRSDEN", "CA"),
  ("BLAIRSTOWN", "IA"),
  ("BLAIRSTOWN", "NJ"),
  ("BLAIRSTOWN", "MO"),
  ("BLAIRSVILLE", "PA"),
  ("BLAIRSVILLE", "GA"),
  ("BLAKELY", "GA"),
  ("BLAKELY", "PA"),
  ("BLAKESBURG", "IA"),
  ("BLAKESLEE", "OH"),
  ("BLANCA", "CO"),
  ("BLANCHARD", "OK"),
  ("BLANCHARD", "LA"),
  ("BLANCHARD", "ID"),
  ("BLANCHARD", "PA"),
  ("BLANCHARD", "MO"),
  ("BLANCHARD", "ND"),
  ("BLANCHARD", "IA"),
  ("BLANCHARDVILLE", "WI"),
  ("BLANCHESTER", "OH"),
  ("BLANCO", "NM"),
  ("BLANCO", "TX"),
  ("BLAND", "VA"),
  ("BLAND", "MO"),
  ("BLANDBURG", "PA"),
  ("BLANDFORD", "MA"),
  ("BLANDING", "UT"),
  ("BLANDINSVILLE", "IL"),
  ("BLANDON", "PA"),
  ("BLANDVILLE", "KY"),
  ("BLANFORD", "IN"),
  ("BLANKET", "TX"),
  ("BLASDELL", "NY"),
  ("BLAUVELT", "NY"),
  ("BLAWENBURG", "NJ"),
  ("BLAWNOX", "PA"),
  ("BLENCOE", "IA"),
  ("BLENDE", "CO"),
  ("BLENHEIM", "SC"),
  ("BLENNERHASSETT", "WV"),
  ("BLESSING", "TX"),
  ("BLEVINS", "AR"),
  ("BLISS", "NY"),
  ("BLISS", "ID"),
  ("BLISS CORNER", "MA"),
  ("BLISSFIELD", "MI"),
  ("BLOCKTON", "IA"),
  ("BLODGETT", "OR"),
  ("BLODGETT", "MO"),
  ("BLODGETT LANDING", "NH"),
  ("BLODGETT MILLS", "NY"),
  ("BLOMKEST", "MN"),
  ("BLOOMBURG", "TX"),
  ("BLOOMDALE", "OH"),
  ("BLOOMER", "WI"),
  ("BLOOMFIELD", "CA"),
  ("BLOOMFIELD", "NM"),
  ("BLOOMFIELD", "IA"),
  ("BLOOMFIELD", "NY"),
  ("BLOOMFIELD", "IN"),
  ("BLOOMFIELD", "MO"),
  ("BLOOMFIELD", "KY"),
  ("BLOOMFIELD", "NE"),
  ("BLOOMFIELD", "PA"),
  ("BLOOMFIELD HILLS", "MI"),
  ("BLOOMING GROVE", "TX"),
  ("BLOOMING PRAIRIE", "MN"),
  ("BLOOMING VALLEY", "PA"),
  ("BLOOMINGBURG", "OH"),
  ("BLOOMINGBURG", "NY"),
  ("BLOOMINGDALE", "GA"),
  ("BLOOMINGDALE", "TN"),
  ("BLOOMINGDALE", "NJ"),
  ("BLOOMINGDALE", "FL"),
  ("BLOOMINGDALE", "IL"),
  ("BLOOMINGDALE", "MI"),
  ("BLOOMINGDALE", "IN"),
  ("BLOOMINGDALE", "OH"),
  ("BLOOMINGTON", "MN"),
  ("BLOOMINGTON", "IL"),
  ("BLOOMINGTON", "IN"),
  ("BLOOMINGTON", "CA"),
  ("BLOOMINGTON", "TX"),
  ("BLOOMINGTON", "WI"),
  ("BLOOMINGTON", "ID"),
  ("BLOOMINGTON", "NE"),
  ("BLOOMINGTON", "MD"),
  ("BLOOMSBURG", "PA"),
  ("BLOOMSBURY", "NJ"),
  ("BLOOMSDALE", "MO"),
  ("BLOOMVILLE", "NY"),
  ("BLOOMVILLE", "OH"),
  ("BLOSSBURG", "PA"),
  ("BLOSSOM", "TX"),
  ("BLOUNTSTOWN", "FL"),
  ("BLOUNTSVILLE", "AL"),
  ("BLOUNTSVILLE", "IN"),
  ("BLOUNTVILLE", "TN"),
  ("BLOWING ROCK", "NC"),
  ("BLOXOM", "VA"),
  ("BLUCKSBERG MOUNTAIN", "SD"),
  ("BLUE", "OK"),
  ("BLUE ASH", "OH"),
  ("BLUE BALL", "PA"),
  ("BLUE BELL", "PA"),
  ("BLUE BERRY HILL", "TX"),
  ("BLUE CLAY FARMS", "NC"),
  ("BLUE DIAMOND", "NV"),
  ("BLUE EARTH", "MN"),
  ("BLUE EYE", "MO"),
  ("BLUE EYE", "AR"),
  ("BLUE GRASS", "IA"),
  ("BLUE HILL", "ME"),
  ("BLUE HILL", "NE"),
  ("BLUE HILLS", "CT"),
  ("BLUE ISLAND", "IL"),
  ("BLUE JAY", "OH"),
  ("BLUE LAKE", "CA"),
  ("BLUE MOUND", "KS"),
  ("BLUE MOUND", "IL"),
  ("BLUE MOUND", "TX"),
  ("BLUE MOUNDS", "WI"),
  ("BLUE MOUNTAIN", "MS"),
  ("BLUE MOUNTAIN", "AR"),
  ("BLUE POINT", "NY"),
  ("BLUE RAPIDS", "KS"),
  ("BLUE RIDGE", "AL"),
  ("BLUE RIDGE", "VA"),
  ("BLUE RIDGE", "GA"),
  ("BLUE RIDGE", "TX"),
  ("BLUE RIDGE MANOR", "KY"),
  ("BLUE RIDGE SHORES", "VA"),
  ("BLUE RIDGE SUMMIT", "PA"),
  ("BLUE RIVER", "CO"),
  ("BLUE RIVER", "WI"),
  ("BLUE SKY", "CO"),
  ("BLUE SPRINGS", "MO"),
  ("BLUE SPRINGS", "AL"),
  ("BLUE SPRINGS", "MS"),
  ("BLUE SPRINGS", "NE"),
  ("BLUEBELL", "UT"),
  ("BLUEFIELD", "VA"),
  ("BLUEFIELD", "WV"),
  ("BLUEJACKET", "OK"),
  ("BLUETOWN", "TX"),
  ("BLUEWATER", "AZ"),
  ("BLUEWATER", "CA"),
  ("BLUEWATER ACRES", "NM"),
  ("BLUEWATER VILLAGE", "NM"),
  ("BLUEWELL", "WV"),
  ("BLUFF", "UT"),
  ("BLUFF CITY", "AR"),
  ("BLUFF CITY", "TN"),
  ("BLUFF CITY", "KS"),
  ("BLUFFDALE", "UT"),
  ("BLUFFS", "IL"),
  ("BLUFFTON", "SC"),
  ("BLUFFTON", "IN"),
  ("BLUFFTON", "OH"),
  ("BLUFFTON", "MN"),
  ("BLUFFTON", "GA"),
  ("BLUFFVIEW", "WI"),
  ("BLUFORD", "IL"),
  ("BLUM", "TX"),
  ("BLUNT", "SD"),
  ("BLYN", "WA"),
  ("BLYTHE", "CA"),
  ("BLYTHE", "GA"),
  ("BLYTHEDALE", "MO"),
  ("BLYTHEVILLE", "AR"),
  ("BLYTHEWOOD", "SC"),
  ("BOALSBURG", "PA"),
  ("BOARDMAN", "OH"),
  ("BOARDMAN", "OR"),
  ("BOARDMAN", "NC"),
  ("BOAZ", "AL"),
  ("BOAZ", "WV"),
  ("BOAZ", "WI"),
  ("BOBTOWN", "VA"),
  ("BOBTOWN", "PA"),
  ("BOCA RATON", "FL"),
  ("BOCK", "MN"),
  ("BODCAW", "AR"),
  ("BODE", "IA"),
  ("BODEGA", "CA"),
  ("BODEGA BAY", "CA"),
  ("BODFISH", "CA"),
  ("BOERNE", "TX"),
  ("BOGALUSA", "LA"),
  ("BOGARD", "MO"),
  ("BOGART", "GA"),
  ("BOGATA", "TX"),
  ("BOGOTA", "NJ"),
  ("BOGUE", "NC"),
  ("BOGUE", "KS"),
  ("BOGUE CHITTO", "MS"),
  ("BOGUE CHITTO", "MS"),
  ("BOHEMIA", "NY"),
  ("BOHNERS LAKE", "WI"),
  ("BOILING SPRING LAKES", "NC"),
  ("BOILING SPRINGS", "SC"),
  ("BOILING SPRINGS", "NC"),
  ("BOILING SPRINGS", "PA"),
  ("BOISE CITY", "ID"),
  ("BOISE CITY", "OK"),
  ("BOKCHITO", "OK"),
  ("BOKEELIA", "FL"),
  ("BOKOSHE", "OK"),
  ("BOLAN", "IA"),
  ("BOLCKOW", "MO"),
  ("BOLES ACRES", "NM"),
  ("BOLEY", "OK"),
  ("BOLIGEE", "AL"),
  ("BOLINAS", "CA"),
  ("BOLINDALE", "OH"),
  ("BOLING", "TX"),
  ("BOLINGBROOK", "IL"),
  ("BOLIVAR", "TN"),
  ("BOLIVAR", "MO"),
  ("BOLIVAR", "NY"),
  ("BOLIVAR", "OH"),
  ("BOLIVAR", "WV"),
  ("BOLIVAR", "PA"),
  ("BOLIVAR PENINSULA", "TX"),
  ("BOLIVIA", "NC"),
  ("BOLT", "WV"),
  ("BOLTON", "NC"),
  ("BOLTON", "MS"),
  ("BOLTON LANDING", "NY"),
  ("BOMBAY BEACH", "CA"),
  ("BON AIR", "VA"),
  ("BON AIR", "AL"),
  ("BON AQUA JUNCTION", "TN"),
  ("BONADELLE RANCHOS-MADERA RANCHOS", "CA"),
  ("BONANZA", "UT"),
  ("BONANZA", "AR"),
  ("BONANZA", "GA"),
  ("BONANZA", "OR"),
  ("BONANZA", "CO"),
  ("BONANZA HILLS", "TX"),
  ("BONANZA MOUNTAIN ESTATES", "CO"),
  ("BONAPARTE", "IA"),
  ("BONDUEL", "WI"),
  ("BONDURANT", "WY"),
  ("BONDURANT", "IA"),
  ("BONDVILLE", "IL"),
  ("BONE GAP", "IL"),
  ("BONEAU", "MT"),
  ("BONESTEEL", "SD"),
  ("BONFIELD", "IL"),
  ("BONHAM", "TX"),
  ("BONIFAY", "FL"),
  ("BONITA", "CA"),
  ("BONITA", "LA"),
  ("BONITA SPRINGS", "FL"),
  ("BONNE TERRE", "MO"),
  ("BONNEAU", "SC"),
  ("BONNEAU BEACH", "SC"),
  ("BONNEAUVILLE", "PA"),
  ("BONNER SPRINGS", "KS"),
  ("BONNERS FERRY", "ID"),
  ("BONNER-WEST RIVERSIDE", "MT"),
  ("BONNETSVILLE", "NC"),
  ("BONNEY", "TX"),
  ("BONNEY LAKE", "WA"),
  ("BONNIE", "IL"),
  ("BONNIEVILLE", "KY"),
  ("BONNY DOON", "CA"),
  ("BONO", "AR"),
  ("BONSALL", "CA"),
  ("BOODY", "IL"),
  ("BOOKER", "TX"),
  ("BOOMER", "WV"),
  ("BOON", "MI"),
  ("BOONE", "IA"),
  ("BOONE", "NC"),
  ("BOONE", "CO"),
  ("BOONES MILL", "VA"),
  ("BOONEVILLE", "MS"),
  ("BOONEVILLE", "AR"),
  ("BOONEVILLE", "KY"),
  ("BOONSBORO", "MD"),
  ("BOONTON", "NJ"),
  ("BOONVILLE", "MO"),
  ("BOONVILLE", "CA"),
  ("BOONVILLE", "IN"),
  ("BOONVILLE", "NY"),
  ("BOONVILLE", "NC"),
  ("BOOTHBAY HARBOR", "ME"),
  ("BOOTHVILLE", "LA"),
  ("BOOTHWYN", "PA"),
  ("BOOTJACK", "CA"),
  ("BOQUERÛN", "PR"),
  ("BOQUERÛN", "PR"),
  ("BORDELONVILLE", "LA"),
  ("BORDEN", "IN"),
  ("BORDENTOWN", "NJ"),
  ("BORGER", "TX"),
  ("BORON", "CA"),
  ("BORONDA", "CA"),
  ("BORREGO SPRINGS", "CA"),
  ("BORUP", "MN"),
  ("BOSCOBEL", "WI"),
  ("BOSQUE FARMS", "NM"),
  ("BOSSIER CITY", "LA"),
  ("BOSTIC", "NC"),
  ("BOSTON", "MA"),
  ("BOSTON", "VA"),
  ("BOSTON", "GA"),
  ("BOSTON", "KY"),
  ("BOSTON", "PA"),
  ("BOSTON", "IN"),
  ("BOSTON HEIGHTS", "OH"),
  ("BOSTONIA", "CA"),
  ("BOSTWICK", "GA"),
  ("BOSWELL", "IN"),
  ("BOSWELL", "PA"),
  ("BOSWELL", "OK"),
  ("BOSWELL'S CORNER", "VA"),
  ("BOSWORTH", "MO"),
  ("BOTHELL", "WA"),
  ("BOTHELL EAST", "WA"),
  ("BOTHELL WEST", "WA"),
  ("BOTINES", "TX"),
  ("BOTKINS", "OH"),
  ("BOTTINEAU", "ND"),
  ("BOULDER", "CO"),
  ("BOULDER", "UT"),
  ("BOULDER", "WY"),
  ("BOULDER", "MT"),
  ("BOULDER CITY", "NV"),
  ("BOULDER CREEK", "CA"),
  ("BOULDER FLATS", "WY"),
  ("BOULDER HILL", "IL"),
  ("BOULDER JUNCTION", "WI"),
  ("BOULEVARD", "CA"),
  ("BOULEVARD GARDENS", "FL"),
  ("BOULEVARD PARK", "WA"),
  ("BOUND BROOK", "NJ"),
  ("BOUNTIFUL", "UT"),
  ("BOURBON", "MO"),
  ("BOURBON", "IN"),
  ("BOURBONNAIS", "IL"),
  ("BOURG", "LA"),
  ("BOURNE", "MA"),
  ("BOURNEVILLE", "OH"),
  ("BOUSE", "AZ"),
  ("BOUTON", "IA"),
  ("BOUTTE", "LA"),
  ("BOVEY", "MN"),
  ("BOVILL", "ID"),
  ("BOVINA", "TX"),
  ("BOW MAR", "CO"),
  ("BOW VALLEY", "NE"),
  ("BOWBELLS", "ND"),
  ("BOWDEN", "WV"),
  ("BOWDLE", "SD"),
  ("BOWDOINHAM", "ME"),
  ("BOWDON", "GA"),
  ("BOWDON", "ND"),
  ("BOWEN", "IL"),
  ("BOWERS", "PA"),
  ("BOWERS", "DE"),
  ("BOWERSTON", "OH"),
  ("BOWERSVILLE", "GA"),
  ("BOWERSVILLE", "OH"),
  ("BOWIE", "MD"),
  ("BOWIE", "TX"),
  ("BOWIE", "AZ"),
  ("BOWLEGS", "OK"),
  ("BOWLER", "WI"),
  ("BOWLES", "CA"),
  ("BOWLEYS QUARTERS", "MD"),
  ("BOWLING GREEN", "KY"),
  ("BOWLING GREEN", "OH"),
  ("BOWLING GREEN", "MO"),
  ("BOWLING GREEN", "VA"),
  ("BOWLING GREEN", "FL"),
  ("BOWLING GREEN", "MD"),
  ("BOWLUS", "MN"),
  ("BOWMAN", "GA"),
  ("BOWMAN", "TN"),
  ("BOWMAN", "ND"),
  ("BOWMAN", "SC"),
  ("BOWMANS ADDITION", "MD"),
  ("BOWMANSTOWN", "PA"),
  ("BOWMANSVILLE", "PA"),
  ("BOWMORE", "NC"),
  ("BOX", "OK"),
  ("BOX CANYON", "TX"),
  ("BOX ELDER", "SD"),
  ("BOX ELDER", "MT"),
  ("BOXFORD", "MA"),
  ("BOXHOLM", "IA"),
  ("BOY RIVER", "MN"),
  ("BOYCE", "LA"),
  ("BOYCE", "VA"),
  ("BOYCEVILLE", "WI"),
  ("BOYD", "TX"),
  ("BOYD", "WI"),
  ("BOYD", "MN"),
  ("BOYD", "MT"),
  ("BOYDEN", "IA"),
  ("BOYDS", "WA"),
  ("BOYDTON", "VA"),
  ("BOYERTOWN", "PA"),
  ("BOYES HOT SPRINGS", "CA"),
  ("BOYKIN", "SC"),
  ("BOYKIN", "AL"),
  ("BOYKIN", "GA"),
  ("BOYKINS", "VA"),
  ("BOYLE", "MS"),
  ("BOYNE CITY", "MI"),
  ("BOYNE FALLS", "MI"),
  ("BOYNTON", "OK"),
  ("BOYNTON BEACH", "FL"),
  ("BOYS RANCH", "TX"),
  ("BOYS TOWN", "NE"),
  ("BOZEMAN", "MT"),
  ("BRACEVILLE", "IL"),
  ("BRACEY", "VA"),
  ("BRACKENRIDGE", "PA"),
  ("BRACKETTVILLE", "TX"),
  ("BRADBURY", "CA"),
  ("BRADDOCK", "PA"),
  ("BRADDOCK", "ND"),
  ("BRADDOCK HEIGHTS", "MD"),
  ("BRADDOCK HILLS", "PA"),
  ("BRADDYVILLE", "IA"),
  ("BRADEN", "TN"),
  ("BRADENTON", "FL"),
  ("BRADENTON BEACH", "FL"),
  ("BRADENVILLE", "PA"),
  ("BRADFORD", "PA"),
  ("BRADFORD", "RI"),
  ("BRADFORD", "TN"),
  ("BRADFORD", "AR"),
  ("BRADFORD", "OH"),
  ("BRADFORD", "NH"),
  ("BRADFORD", "IA"),
  ("BRADFORD", "VT"),
  ("BRADFORD", "IL"),
  ("BRADFORD WOODS", "PA"),
  ("BRADFORDSVILLE", "KY"),
  ("BRADGATE", "IA"),
  ("BRADLEY", "SC"),
  ("BRADLEY", "IL"),
  ("BRADLEY", "WV"),
  ("BRADLEY", "AR"),
  ("BRADLEY", "SD"),
  ("BRADLEY", "OK"),
  ("BRADLEY", "CA"),
  ("BRADLEY BEACH", "NJ"),
  ("BRADLEY GARDENS", "NJ"),
  ("BRADLEY JUNCTION", "FL"),
  ("BRADNER", "OH"),
  ("BRADSHAW", "WV"),
  ("BRADSHAW", "NE"),
  ("BRADY", "TX"),
  ("BRADY", "WA"),
  ("BRADY", "MT"),
  ("BRADY", "NE"),
  ("BRADY LAKE", "OH"),
  ("BRAGG CITY", "MO"),
  ("BRAGGS", "OK"),
  ("BRAHAM", "MN"),
  ("BRAIDWOOD", "IL"),
  ("BRAINARD", "NE"),
  ("BRAINARDS", "NJ"),
  ("BRAINERD", "MN"),
  ("BRAINTREE TOWN", "MA"),
  ("BRAMAN", "OK"),
  ("BRAMBLETON", "VA"),
  ("BRAMWELL", "WV"),
  ("BRANCH", "LA"),
  ("BRANCH", "AR"),
  ("BRANCHDALE", "PA"),
  ("BRANCHVILLE", "SC"),
  ("BRANCHVILLE", "NJ"),
  ("BRANCHVILLE", "VA"),
  ("BRANDENBURG", "KY"),
  ("BRANDERMILL", "VA"),
  ("BRANDON", "FL"),
  ("BRANDON", "MS"),
  ("BRANDON", "SD"),
  ("BRANDON", "VT"),
  ("BRANDON", "WI"),
  ("BRANDON", "MN"),
  ("BRANDON", "IA"),
  ("BRANDON", "CO"),
  ("BRANDONVILLE", "PA"),
  ("BRANDONVILLE", "WV"),
  ("BRANDSVILLE", "MO"),
  ("BRANDT", "SD"),
  ("BRANDYWINE", "MD"),
  ("BRANDYWINE", "WV"),
  ("BRANFORD", "FL"),
  ("BRANFORD CENTER", "CT"),
  ("BRANSFORD", "TN"),
  ("BRANSON", "MO"),
  ("BRANSON", "CO"),
  ("BRANSON WEST", "MO"),
  ("BRANT LAKE", "SD"),
  ("BRANTLEY", "AL"),
  ("BRANTLEYVILLE", "AL"),
  ("BRASELTON", "GA"),
  ("BRASHEAR", "MO"),
  ("BRASHER FALLS", "NY"),
  ("BRASS CASTLE", "NJ"),
  ("BRASWELL", "GA"),
  ("BRATENAHL", "OH"),
  ("BRATTLEBORO", "VT"),
  ("BRAVE", "PA"),
  ("BRAWLEY", "CA"),
  ("BRAXTON", "MS"),
  ("BRAY", "OK"),
  ("BRAYMER", "MO"),
  ("BRAYTON", "IA"),
  ("BRAZIL", "IN"),
  ("BRAZORIA", "TX"),
  ("BRAZOS", "NM"),
  ("BRAZOS BEND", "TX"),
  ("BRAZOS COUNTRY", "TX"),
  ("BREA", "CA"),
  ("BREATHEDSVILLE", "MD"),
  ("BREAUX BRIDGE", "LA"),
  ("BRECKENRIDGE", "OK"),
  ("BRECKENRIDGE", "CO"),
  ("BRECKENRIDGE", "TX"),
  ("BRECKENRIDGE", "MN"),
  ("BRECKENRIDGE", "MI"),
  ("BRECKENRIDGE", "MO"),
  ("BRECKENRIDGE HILLS", "MO"),
  ("BRECKINRIDGE CENTER", "KY"),
  ("BRECKSVILLE", "OH"),
  ("BRECON", "OH"),
  ("BREDA", "IA"),
  ("BREEDSVILLE", "MI"),
  ("BREESE", "IL"),
  ("BREESPORT", "NY"),
  ("BREEZY POINT", "MN"),
  ("BREINIGSVILLE", "PA"),
  ("BREMEN", "GA"),
  ("BREMEN", "IN"),
  ("BREMEN", "OH"),
  ("BREMEN", "KY"),
  ("BREMERTON", "WA"),
  ("BREMOND", "TX"),
  ("BRENDA", "AZ"),
  ("BRENHAM", "TX"),
  ("BRENT", "OK"),
  ("BRENT", "FL"),
  ("BRENT", "AL"),
  ("BRENTFORD", "SD"),
  ("BRENTON", "WV"),
  ("BRENTWOOD", "TN"),
  ("BRENTWOOD", "CA"),
  ("BRENTWOOD", "NY"),
  ("BRENTWOOD", "MO"),
  ("BRENTWOOD", "PA"),
  ("BRENTWOOD", "MD"),
  ("BREÒAS", "PR"),
  ("BRESSLER", "PA"),
  ("BRET HARTE", "CA"),
  ("BRETHREN", "MI"),
  ("BREVARD", "NC"),
  ("BREVIG MISSION", "AK"),
  ("BREWER", "ME"),
  ("BREWER", "MO"),
  ("BREWERTON", "NY"),
  ("BREWSTER", "MA"),
  ("BREWSTER", "OH"),
  ("BREWSTER", "FL"),
  ("BREWSTER", "MN"),
  ("BREWSTER", "WA"),
  ("BREWSTER", "NY"),
  ("BREWSTER", "KS"),
  ("BREWSTER", "NE"),
  ("BREWSTER HILL", "NY"),
  ("BREWTON", "AL"),
  ("BRIAN HEAD", "UT"),
  ("BRIAR", "TX"),
  ("BRIAR CREEK", "PA"),
  ("BRIARCLIFF", "AR"),
  ("BRIARCLIFF", "TX"),
  ("BRIARCLIFF MANOR", "NY"),
  ("BRIARCLIFFE ACRES", "SC"),
  ("BRIAROAKS", "TX"),
  ("BRIARWOOD", "ND"),
  ("BRIARWOOD", "KY"),
  ("BRICE", "OH"),
  ("BRICE PRAIRIE", "WI"),
  ("BRICELYN", "MN"),
  ("BRICES CREEK", "NC"),
  ("BRICK CENTER", "CO"),
  ("BRICKERVILLE", "PA"),
  ("BRIDGE CITY", "TX"),
  ("BRIDGE CITY", "LA"),
  ("BRIDGE CREEK", "OK"),
  ("BRIDGEHAMPTON", "NY"),
  ("BRIDGEPORT", "CA"),
  ("BRIDGEPORT", "CT"),
  ("BRIDGEPORT", "WV"),
  ("BRIDGEPORT", "MI"),
  ("BRIDGEPORT", "TX"),
  ("BRIDGEPORT", "AL"),
  ("BRIDGEPORT", "NY"),
  ("BRIDGEPORT", "OH"),
  ("BRIDGEPORT", "NE"),
  ("BRIDGEPORT", "IL"),
  ("BRIDGEPORT", "WA"),
  ("BRIDGEPORT", "PA"),
  ("BRIDGEPORT", "OK"),
  ("BRIDGER", "MT"),
  ("BRIDGER", "MT"),
  ("BRIDGETON", "MO"),
  ("BRIDGETON", "NJ"),
  ("BRIDGETON", "NC"),
  ("BRIDGETOWN", "OH"),
  ("BRIDGETOWN", "MS"),
  ("BRIDGEVIEW", "IL"),
  ("BRIDGEVILLE", "DE"),
  ("BRIDGEVILLE", "PA"),
  ("BRIDGEVILLE", "NJ"),
  ("BRIDGEWATER", "VA"),
  ("BRIDGEWATER", "MA"),
  ("BRIDGEWATER", "SD"),
  ("BRIDGEWATER", "PA"),
  ("BRIDGEWATER", "NY"),
  ("BRIDGEWATER", "IA"),
  ("BRIDGMAN", "MI"),
  ("BRIDGTON", "ME"),
  ("BRIELLE", "NJ"),
  ("BRIER", "WA"),
  ("BRIGANTINE", "NJ"),
  ("BRIGGS", "OK"),
  ("BRIGHAM CITY", "UT"),
  ("BRIGHT", "IN"),
  ("BRIGHTON", "CO"),
  ("BRIGHTON", "NY"),
  ("BRIGHTON", "MI"),
  ("BRIGHTON", "TN"),
  ("BRIGHTON", "IL"),
  ("BRIGHTON", "AL"),
  ("BRIGHTON", "IA"),
  ("BRIGHTWATERS", "NY"),
  ("BRIGHTWOOD", "VA"),
  ("BRILLIANT", "AL"),
  ("BRILLIANT", "OH"),
  ("BRILLION", "WI"),
  ("BRIMFIELD", "OH"),
  ("BRIMFIELD", "IL"),
  ("BRIMHALL NIZHONI", "NM"),
  ("BRIMSON", "MO"),
  ("BRINCKERHOFF", "NY"),
  ("BRINKLEY", "AR"),
  ("BRINNON", "WA"),
  ("BRINSMADE", "ND"),
  ("BRINSON", "GA"),
  ("BRINY BREEZES", "FL"),
  ("BRISBANE", "CA"),
  ("BRISBIN", "PA"),
  ("BRISTOL", "TN"),
  ("BRISTOL", "CT"),
  ("BRISTOL", "VA"),
  ("BRISTOL", "WI"),
  ("BRISTOL", "TX"),
  ("BRISTOL", "NH"),
  ("BRISTOL", "IN"),
  ("BRISTOL", "VT"),
  ("BRISTOL", "FL"),
  ("BRISTOL", "PA"),
  ("BRISTOL", "SD"),
  ("BRISTOW", "OK"),
  ("BRISTOW", "IA"),
  ("BRISTOW", "NE"),
  ("BRISTOW COVE", "AL"),
  ("BRITT", "IA"),
  ("BRITTANY FARMS-THE HIGHLANDS", "PA"),
  ("BRITTON", "MI"),
  ("BRITTON", "SD"),
  ("BROAD BROOK", "CT"),
  ("BROAD CREEK", "NC"),
  ("BROAD TOP CITY", "PA"),
  ("BROADALBIN", "NY"),
  ("BROADDUS", "TX"),
  ("BROADLAND", "SD"),
  ("BROADLANDS", "VA"),
  ("BROADLANDS", "IL"),
  ("BROADMOOR", "CA"),
  ("BROADUS", "MT"),
  ("BROADVIEW", "IL"),
  ("BROADVIEW", "MT"),
  ("BROADVIEW HEIGHTS", "OH"),
  ("BROADVIEW PARK", "FL"),
  ("BROADWATER", "NE"),
  ("BROADWAY", "VA"),
  ("BROADWAY", "NC"),
  ("BROADWAY", "NJ"),
  ("BROADWELL", "IL"),
  ("BROCK", "NE"),
  ("BROCK HALL", "MD"),
  ("BROCKET", "ND"),
  ("BROCKPORT", "NY"),
  ("BROCKTON", "MA"),
  ("BROCKTON", "MT"),
  ("BROCKWAY", "PA"),
  ("BROCTON", "NY"),
  ("BROCTON", "IL"),
  ("BRODHEAD", "WI"),
  ("BRODHEAD", "KY"),
  ("BRODHEADSVILLE", "PA"),
  ("BRODNAX", "VA"),
  ("BROECK POINTE", "KY"),
  ("BROGAN", "OR"),
  ("BROGDEN", "NC"),
  ("BROKAW", "WI"),
  ("BROKEN ARROW", "OK"),
  ("BROKEN BOW", "OK"),
  ("BROKEN BOW", "NE"),
  ("BROMIDE", "OK"),
  ("BROMLEY", "KY"),
  ("BRONAUGH", "MO"),
  ("BRONSON", "FL"),
  ("BRONSON", "MI"),
  ("BRONSON", "KS"),
  ("BRONSON", "IA"),
  ("BRONTE", "TX"),
  ("BRONWOOD", "GA"),
  ("BRONXVILLE", "NY"),
  ("BROOK", "IN"),
  ("BROOK HIGHLAND", "AL"),
  ("BROOK PARK", "OH"),
  ("BROOK PARK", "MN"),
  ("BROOKDALE", "CA"),
  ("BROOKDALE", "SC"),
  ("BROOKDALE", "NJ"),
  ("BROOKER", "FL"),
  ("BROOKEVILLE", "MD"),
  ("BROOKFIELD", "WI"),
  ("BROOKFIELD", "MO"),
  ("BROOKFIELD", "IL"),
  ("BROOKFIELD", "MA"),
  ("BROOKFIELD", "NJ"),
  ("BROOKFIELD CENTER", "OH"),
  ("BROOKFORD", "NC"),
  ("BROOKHAVEN", "MS"),
  ("BROOKHAVEN", "WV"),
  ("BROOKHAVEN", "NY"),
  ("BROOKHAVEN", "PA"),
  ("BROOKHURST", "WY"),
  ("BROOKINGS", "SD"),
  ("BROOKINGS", "OR"),
  ("BROOKLAND", "AR"),
  ("BROOKLAWN", "NJ"),
  ("BROOKLET", "GA"),
  ("BROOKLINE", "MA"),
  ("BROOKLYN", "OH"),
  ("BROOKLYN", "IA"),
  ("BROOKLYN", "CT"),
  ("BROOKLYN", "WI"),
  ("BROOKLYN", "MI"),
  ("BROOKLYN", "IL"),
  ("BROOKLYN", "IN"),
  ("BROOKLYN CENTER", "MN"),
  ("BROOKLYN HEIGHTS", "OH"),
  ("BROOKLYN HEIGHTS", "MO"),
  ("BROOKLYN PARK", "MN"),
  ("BROOKLYN PARK", "MD"),
  ("BROOKMONT", "MD"),
  ("BROOKNEAL", "VA"),
  ("BROOKPORT", "IL"),
  ("BROOKRIDGE", "FL"),
  ("BROOKS", "KY"),
  ("BROOKS", "GA"),
  ("BROOKS", "MN"),
  ("BROOKS", "OR"),
  ("BROOKSBURG", "IN"),
  ("BROOKSHIRE", "TX"),
  ("BROOKSIDE", "AL"),
  ("BROOKSIDE", "DE"),
  ("BROOKSIDE", "CO"),
  ("BROOKSIDE", "OH"),
  ("BROOKSIDE VILLAGE", "TX"),
  ("BROOKSTON", "IN"),
  ("BROOKSTON", "MN"),
  ("BROOKSVILLE", "FL"),
  ("BROOKSVILLE", "OK"),
  ("BROOKSVILLE", "MS"),
  ("BROOKSVILLE", "KY"),
  ("BROOKTRAILS", "CA"),
  ("BROOKTREE PARK", "ND"),
  ("BROOKVIEW", "MD"),
  ("BROOKVILLE", "NY"),
  ("BROOKVILLE", "OH"),
  ("BROOKVILLE", "PA"),
  ("BROOKVILLE", "IN"),
  ("BROOKVILLE", "KS"),
  ("BROOKWOOD", "AL"),
  ("BROOMALL", "PA"),
  ("BROOMES ISLAND", "MD"),
  ("BROOMFIELD", "CO"),
  ("BROOMTOWN", "AL"),
  ("BROOTEN", "MN"),
  ("BROUGHTON", "IL"),
  ("BROUGHTON", "OH"),
  ("BROUSSARD", "LA"),
  ("BROWERVILLE", "MN"),
  ("BROWN CITY", "MI"),
  ("BROWN DEER", "WI"),
  ("BROWNDELL", "TX"),
  ("BROWNELL", "KS"),
  ("BROWNFIELD", "TX"),
  ("BROWNFIELDS", "LA"),
  ("BROWNING", "MO"),
  ("BROWNING", "IL"),
  ("BROWNING", "MT"),
  ("BROWNINGTON", "MO"),
  ("BROWNLEE", "NE"),
  ("BROWNLEE PARK", "MI"),
  ("BROWNS", "IL"),
  ("BROWNS LAKE", "WI"),
  ("BROWNS MILLS", "NJ"),
  ("BROWNS POINT", "WA"),
  ("BROWNS VALLEY", "MN"),
  ("BROWNSBORO", "TX"),
  ("BROWNSBORO FARM", "KY"),
  ("BROWNSBORO VILLAGE", "KY"),
  ("BROWNSBURG", "IN"),
  ("BROWNSDALE", "FL"),
  ("BROWNSDALE", "MN"),
  ("BROWNSTOWN", "PA"),
  ("BROWNSTOWN", "IN"),
  ("BROWNSTOWN", "IL"),
  ("BROWNSTOWN", "PA"),
  ("BROWNSVILLE", "TX"),
  ("BROWNSVILLE", "TN"),
  ("BROWNSVILLE", "LA"),
  ("BROWNSVILLE", "KY"),
  ("BROWNSVILLE", "FL"),
  ("BROWNSVILLE", "MN"),
  ("BROWNSVILLE", "OR"),
  ("BROWNSVILLE", "PA"),
  ("BROWNSVILLE", "OH"),
  ("BROWNSVILLE", "WI"),
  ("BROWNSVILLE", "MD"),
  ("BROWNTON", "MN"),
  ("BROWNTOWN", "WI"),
  ("BROWNTOWN", "PA"),
  ("BROWNVILLE", "NJ"),
  ("BROWNVILLE", "NY"),
  ("BROWNVILLE", "NE"),
  ("BROWNWOOD", "TX"),
  ("BROXTON", "GA"),
  ("BRUCE", "MS"),
  ("BRUCE", "WI"),
  ("BRUCE", "SD"),
  ("BRUCETON", "TN"),
  ("BRUCETON MILLS", "WV"),
  ("BRUCEVILLE", "IN"),
  ("BRUCEVILLE-EDDY", "TX"),
  ("BRUIN", "PA"),
  ("BRULE", "WI"),
  ("BRULE", "NE"),
  ("BRUMLEY", "MO"),
  ("BRUNDAGE", "TX"),
  ("BRUNDIDGE", "AL"),
  ("BRUNI", "TX"),
  ("BRUNING", "NE"),
  ("BRUNO", "WV"),
  ("BRUNO", "MN"),
  ("BRUNO", "NE"),
  ("BRUNSON", "SC"),
  ("BRUNSVILLE", "IA"),
  ("BRUNSWICK", "GA"),
  ("BRUNSWICK", "ME"),
  ("BRUNSWICK", "OH"),
  ("BRUNSWICK", "MD"),
  ("BRUNSWICK", "MO"),
  ("BRUNSWICK", "NE"),
  ("BRUNSWICK", "NC"),
  ("BRUNSWICK STATION", "ME"),
  ("BRUSH", "CO"),
  ("BRUSH CREEK", "OK"),
  ("BRUSH FORK", "WV"),
  ("BRUSH PRAIRIE", "WA"),
  ("BRUSHTON", "NY"),
  ("BRUSHY", "OK"),
  ("BRUSHY CREEK", "TX"),
  ("BRUSLY", "LA"),
  ("BRUSSELS", "IL"),
  ("BRUTUS", "MI"),
  ("BRYAN", "TX"),
  ("BRYAN", "OH"),
  ("BRYANS ROAD", "MD"),
  ("BRYANT", "AR"),
  ("BRYANT", "WA"),
  ("BRYANT", "SD"),
  ("BRYANT", "IN"),
  ("BRYANT", "IL"),
  ("BRYANTOWN", "MD"),
  ("BRYCE", "AZ"),
  ("BRYCE CANYON CITY", "UT"),
  ("BRYCELAND", "LA"),
  ("BRYN ATHYN", "PA"),
  ("BRYN MAWR", "PA"),
  ("BRYN MAWR-SKYWAY", "WA"),
  ("BRYSON", "TX"),
  ("BRYSON CITY", "NC"),
  ("BUCHANAN", "MI"),
  ("BUCHANAN", "VA"),
  ("BUCHANAN", "GA"),
  ("BUCHANAN", "NY"),
  ("BUCHANAN", "ND"),
  ("BUCHANAN DAM", "TX"),
  ("BUCHANAN LAKE VILLAGE", "TX"),
  ("BUCHTEL", "OH"),
  ("BUCK CREEK", "IN"),
  ("BUCK GROVE", "IA"),
  ("BUCK MEADOWS", "CA"),
  ("BUCK RUN", "PA"),
  ("BUCKATUNNA", "MS"),
  ("BUCKEYE", "AZ"),
  ("BUCKEYE", "IA"),
  ("BUCKEYE LAKE", "OH"),
  ("BUCKEYSTOWN", "MD"),
  ("BUCKHALL", "VA"),
  ("BUCKHANNON", "WV"),
  ("BUCKHEAD", "GA"),
  ("BUCKHEAD RIDGE", "FL"),
  ("BUCKHOLTS", "TX"),
  ("BUCKHORN", "CA"),
  ("BUCKHORN", "NM"),
  ("BUCKHORN", "PA"),
  ("BUCKHORN", "KY"),
  ("BUCKINGHAM", "FL"),
  ("BUCKINGHAM", "IL"),
  ("BUCKINGHAM COURTHOUSE", "VA"),
  ("BUCKLAND", "AK"),
  ("BUCKLAND", "OH"),
  ("BUCKLEY", "WA"),
  ("BUCKLEY", "MI"),
  ("BUCKLEY", "IL"),
  ("BUCKLIN", "MO"),
  ("BUCKLIN", "KS"),
  ("BUCKMAN", "MN"),
  ("BUCKNER", "KY"),
  ("BUCKNER", "MO"),
  ("BUCKNER", "AR"),
  ("BUCKNER", "IL"),
  ("BUCKS", "AL"),
  ("BUCKS LAKE", "CA"),
  ("BUCKSHOT", "AZ"),
  ("BUCKSPORT", "ME"),
  ("BUCKSPORT", "SC"),
  ("BUCODA", "WA"),
  ("BUCYRUS", "OH"),
  ("BUCYRUS", "KS"),
  ("BUCYRUS", "ND"),
  ("BUD", "WV"),
  ("BUDA", "TX"),
  ("BUDA", "IL"),
  ("BUDD LAKE", "NJ"),
  ("BUDE", "MS"),
  ("BUELLTON", "CA"),
  ("BUENA", "NJ"),
  ("BUENA", "WA"),
  ("BUENA PARK", "CA"),
  ("BUENA VISTA", "VA"),
  ("BUENA VISTA", "MI"),
  ("BUENA VISTA", "CO"),
  ("BUENA VISTA", "GA"),
  ("BUENA VISTA", "CA"),
  ("BUENA VISTA", "TX"),
  ("BUENA VISTA", "PR"),
  ("BUENA VISTA", "PR"),
  ("BUENAVENTURA LAKES", "FL"),
  ("BUFFALO", "NY"),
  ("BUFFALO", "MN"),
  ("BUFFALO", "IA"),
  ("BUFFALO", "WY"),
  ("BUFFALO", "TX"),
  ("BUFFALO", "SC"),
  ("BUFFALO", "MO"),
  ("BUFFALO", "IN"),
  ("BUFFALO", "WV"),
  ("BUFFALO", "KY"),
  ("BUFFALO", "OK"),
  ("BUFFALO", "SD"),
  ("BUFFALO", "OH"),
  ("BUFFALO", "IL"),
  ("BUFFALO", "KS"),
  ("BUFFALO", "ND"),
  ("BUFFALO CENTER", "IA"),
  ("BUFFALO CITY", "WI"),
  ("BUFFALO GAP", "TX"),
  ("BUFFALO GAP", "SD"),
  ("BUFFALO GROVE", "IL"),
  ("BUFFALO LAKE", "MN"),
  ("BUFFALO SOAPSTONE", "AK"),
  ("BUFFALO SPRINGS", "TX"),
  ("BUFFINGTON", "PA"),
  ("BUFORD", "GA"),
  ("BUFORD", "OH"),
  ("BUHL", "MN"),
  ("BUHL", "ID"),
  ("BUHLER", "KS"),
  ("BUIES CREEK", "NC"),
  ("BULGER", "PA"),
  ("BULL CREEK", "MO"),
  ("BULL HOLLOW", "OK"),
  ("BULL MOUNTAIN", "OR"),
  ("BULL RUN", "VA"),
  ("BULL RUN MOUNTAIN ESTATES", "VA"),
  ("BULL SHOALS", "AR"),
  ("BULL VALLEY", "IL"),
  ("BULLARD", "TX"),
  ("BULLHEAD", "SD"),
  ("BULLHEAD CITY", "AZ"),
  ("BULLS GAP", "TN"),
  ("BULPITT", "IL"),
  ("BULVERDE", "TX"),
  ("BUNA", "TX"),
  ("BUNCETON", "MO"),
  ("BUNCOMBE", "IL"),
  ("BUNK FOSS", "WA"),
  ("BUNKER", "MO"),
  ("BUNKER HILL", "OR"),
  ("BUNKER HILL", "KS"),
  ("BUNKER HILL", "IL"),
  ("BUNKER HILL", "IN"),
  ("BUNKER HILL VILLAGE", "TX"),
  ("BUNKERVILLE", "NV"),
  ("BUNKIE", "LA"),
  ("BUNN", "NC"),
  ("BUNNELL", "FL"),
  ("BUNNLEVEL", "NC"),
  ("BURAS", "LA"),
  ("BURBANK", "CA"),
  ("BURBANK", "WA"),
  ("BURBANK", "IL"),
  ("BURBANK", "CA"),
  ("BURBANK", "OH"),
  ("BURBANK", "OK"),
  ("BURCHARD", "NE"),
  ("BURCHINAL", "IA"),
  ("BURDEN", "KS"),
  ("BURDETT", "NY"),
  ("BURDETT", "KS"),
  ("BURDETTE", "AR"),
  ("BUREAU JUNCTION", "IL"),
  ("BURGAW", "NC"),
  ("BURGESS", "MO"),
  ("BURGETTSTOWN", "PA"),
  ("BURGIN", "KY"),
  ("BURGOON", "OH"),
  ("BURIEN", "WA"),
  ("BURKBURNETT", "TX"),
  ("BURKE", "VA"),
  ("BURKE", "TX"),
  ("BURKE", "SD"),
  ("BURKE", "NY"),
  ("BURKE CENTRE", "VA"),
  ("BURKESVILLE", "KY"),
  ("BURKET", "IN"),
  ("BURKETTSVILLE", "OH"),
  ("BURKEVILLE", "VA"),
  ("BURKITTSVILLE", "MD"),
  ("BURLEIGH", "NJ"),
  ("BURLESON", "TX"),
  ("BURLEY", "ID"),
  ("BURLEY", "WA"),
  ("BURLINGAME", "CA"),
  ("BURLINGAME", "KS"),
  ("BURLINGTON", "NC"),
  ("BURLINGTON", "IA"),
  ("BURLINGTON", "MA"),
  ("BURLINGTON", "VT"),
  ("BURLINGTON", "KY"),
  ("BURLINGTON", "WI"),
  ("BURLINGTON", "IL"),
  ("BURLINGTON", "WA"),
  ("BURLINGTON", "NJ"),
  ("BURLINGTON", "KS"),
  ("BURLINGTON", "CO"),
  ("BURLINGTON", "OH"),
  ("BURLINGTON", "WV"),
  ("BURLINGTON", "WY"),
  ("BURLINGTON", "MI"),
  ("BURLINGTON", "ND"),
  ("BURLINGTON", "IN"),
  ("BURLINGTON", "PA"),
  ("BURLINGTON", "OK"),
  ("BURLINGTON JUNCTION", "MO"),
  ("BURLISON", "TN"),
  ("BURNA", "KY"),
  ("BURNET", "TX"),
  ("BURNETT", "WI"),
  ("BURNETTOWN", "SC"),
  ("BURNETTSVILLE", "IN"),
  ("BURNEY", "CA"),
  ("BURNHAM", "IL"),
  ("BURNHAM", "PA"),
  ("BURNS", "TN"),
  ("BURNS", "OR"),
  ("BURNS", "WY"),
  ("BURNS", "KS"),
  ("BURNS CITY", "IN"),
  ("BURNS FLAT", "OK"),
  ("BURNS HARBOR", "IN"),
  ("BURNSIDE", "AZ"),
  ("BURNSIDE", "KY"),
  ("BURNSIDE", "PA"),
  ("BURNSVILLE", "MN"),
  ("BURNSVILLE", "MS"),
  ("BURNSVILLE", "NC"),
  ("BURNSVILLE", "WV"),
  ("BURNT PRAIRIE", "IL"),
  ("BURNT RANCH", "CA"),
  ("BURNT STORE MARINA", "FL"),
  ("BURR", "NE"),
  ("BURR OAK", "MI"),
  ("BURR OAK", "KS"),
  ("BURR OAK", "IA"),
  ("BURR RIDGE", "IL"),
  ("BURRTON", "KS"),
  ("BURT", "MI"),
  ("BURT", "IA"),
  ("BURTON", "MI"),
  ("BURTON", "SC"),
  ("BURTON", "TX"),
  ("BURTON", "OH"),
  ("BURTON", "NE"),
  ("BURTONSVILLE", "MD"),
  ("BURTRUM", "MN"),
  ("BURWELL", "NE"),
  ("BUSBY", "MT"),
  ("BUSH", "IL"),
  ("BUSHNELL", "FL"),
  ("BUSHNELL", "IL"),
  ("BUSHNELL", "SD"),
  ("BUSHNELL", "NE"),
  ("BUSHONG", "KS"),
  ("BUSHTON", "KS"),
  ("BUSHYHEAD", "OK"),
  ("BUSSEY", "IA"),
  ("BUSTI", "NY"),
  ("BUTLER", "AL"),
  ("BUTLER", "MO"),
  ("BUTLER", "GA"),
  ("BUTLER", "OK"),
  ("BUTLER", "PA"),
  ("BUTLER", "IN"),
  ("BUTLER", "NJ"),
  ("BUTLER", "OH"),
  ("BUTLER", "OK"),
  ("BUTLER", "WI"),
  ("BUTLER", "IL"),
  ("BUTLER", "SD"),
  ("BUTLER", "KY"),
  ("BUTLER BEACH", "FL"),
  ("BUTLERTOWN", "MD"),
  ("BUTLERVILLE", "IN"),
  ("BUTLERVILLE", "OH"),
  ("BUTNER", "NC"),
  ("BUTTE", "AK"),
  ("BUTTE", "NE"),
  ("BUTTE", "ND"),
  ("BUTTE CITY", "ID"),
  ("BUTTE CREEK CANYON", "CA"),
  ("BUTTE DES MORTS", "WI"),
  ("BUTTE FALLS", "OR"),
  ("BUTTE MEADOWS", "CA"),
  ("BUTTE VALLEY", "CA"),
  ("BUTTERFIELD", "TX"),
  ("BUTTERFIELD", "MO"),
  ("BUTTERFIELD", "MN"),
  ("BUTTERNUT", "WI"),
  ("BUTTERS", "NC"),
  ("BUTTE-SILVER BOW", "MT"),
  ("BUTTEVILLE", "OR"),
  ("BUTTONWILLOW", "CA"),
  ("BUTTZVILLE", "NJ"),
  ("BUXTON", "NC"),
  ("BUXTON", "ND"),
  ("BUZZARDS BAY", "MA"),
  ("BYARS", "OK"),
  ("BYERS", "CO"),
  ("BYERS", "TX"),
  ("BYERS", "KS"),
  ("BYERSVILLE", "NY"),
  ("BYESVILLE", "OH"),
  ("BYHALIA", "MS"),
  ("BYLAS", "AZ"),
  ("BYNG", "OK"),
  ("BYNUM", "MT"),
  ("BYNUM", "TX"),
  ("BYRAM", "MS"),
  ("BYRAM", "CT"),
  ("BYRAM CENTER", "NJ"),
  ("BYRDSTOWN", "TN"),
  ("BYRNEDALE", "PA"),
  ("BYRNES MILL", "MO"),
  ("BYROMVILLE", "GA"),
  ("BYRON", "GA"),
  ("BYRON", "CA"),
  ("BYRON", "IL"),
  ("BYRON", "MN"),
  ("BYRON", "WY"),
  ("BYRON", "MI"),
  ("BYRON", "OK"),
  ("BYRON", "NE"),
  ("BYRON CENTER", "MI"),
  ("BYSTROM", "CA"),
  ("CAB·N", "PR"),
  ("CABALLO", "NM"),
  ("CABANA COLONY", "FL"),
  ("CABAZON", "CA"),
  ("CABERFAE", "MI"),
  ("CABERY", "IL"),
  ("CABIN JOHN", "MD"),
  ("CABLE", "WI"),
  ("CABO ROJO", "PR"),
  ("CABOOL", "MO"),
  ("CABOT", "AR"),
  ("CABOT", "VT"),
  ("CACAO", "PR"),
  ("CACHE", "UT"),
  ("CACHE", "OK"),
  ("CACTUS", "TX"),
  ("CACTUS FLATS", "AZ"),
  ("CACTUS FOREST", "AZ"),
  ("CADDO", "OK"),
  ("CADDO MILLS", "TX"),
  ("CADDO VALLEY", "AR"),
  ("CADE", "LA"),
  ("CADILLAC", "MI"),
  ("CADIZ", "OH"),
  ("CADIZ", "KY"),
  ("CADIZ", "IN"),
  ("CADOTT", "WI"),
  ("CADWELL", "GA"),
  ("CAGUAS", "PR"),
  ("CAHOKIA", "IL"),
  ("CAINSVILLE", "MO"),
  ("CAIRNBROOK", "PA"),
  ("CAIRO", "GA"),
  ("CAIRO", "IL"),
  ("CAIRO", "NY"),
  ("CAIRO", "NE"),
  ("CAIRO", "WV"),
  ("CAIRO", "MO"),
  ("CAIRO", "OH"),
  ("CAJAH'S MOUNTAIN", "NC"),
  ("CALABASAS", "CA"),
  ("CALABASH", "NC"),
  ("CALAIS", "ME"),
  ("CALAMUS", "IA"),
  ("CALCIUM", "NY"),
  ("CALCUTTA", "OH"),
  ("CALDWELL", "ID"),
  ("CALDWELL", "TX"),
  ("CALDWELL", "AR"),
  ("CALDWELL", "NJ"),
  ("CALDWELL", "KS"),
  ("CALDWELL", "OH"),
  ("CALE", "AR"),
  ("CALEDONIA", "WI"),
  ("CALEDONIA", "MN"),
  ("CALEDONIA", "MS"),
  ("CALEDONIA", "NY"),
  ("CALEDONIA", "MI"),
  ("CALEDONIA", "IL"),
  ("CALEDONIA", "ND"),
  ("CALEDONIA", "OH"),
  ("CALEDONIA", "MO"),
  ("CALERA", "AL"),
  ("CALERA", "OK"),
  ("CALEXICO", "CA"),
  ("CALHAN", "CO"),
  ("CALHOUN", "GA"),
  ("CALHOUN", "LA"),
  ("CALHOUN", "TN"),
  ("CALHOUN", "IL"),
  ("CALHOUN", "MO"),
  ("CALHOUN", "KY"),
  ("CALHOUN CITY", "MS"),
  ("CALHOUN FALLS", "SC"),
  ("CALICO ROCK", "AR"),
  ("CALIENTE", "NV"),
  ("CALIFON", "NJ"),
  ("CALIFORNIA", "MD"),
  ("CALIFORNIA", "PA"),
  ("CALIFORNIA", "MO"),
  ("CALIFORNIA", "KY"),
  ("CALIFORNIA CITY", "CA"),
  ("CALIFORNIA HOT SPRINGS", "CA"),
  ("CALIFORNIA JUNCTION", "IA"),
  ("CALIFORNIA PINES", "CA"),
  ("CALIMESA", "CA"),
  ("CALIO", "ND"),
  ("CALION", "AR"),
  ("CALIPATRIA", "CA"),
  ("CALISTOGA", "CA"),
  ("CALLAGHAN", "VA"),
  ("CALLAHAN", "FL"),
  ("CALLAO", "MO"),
  ("CALLAWAY", "FL"),
  ("CALLAWAY", "NE"),
  ("CALLAWAY", "MN"),
  ("CALLENDER", "CA"),
  ("CALLENDER", "IA"),
  ("CALLENDER LAKE", "TX"),
  ("CALLENSBURG", "PA"),
  ("CALLERY", "PA"),
  ("CALLICOON", "NY"),
  ("CALLIMONT", "PA"),
  ("CALLISBURG", "TX"),
  ("CALMAR", "IA"),
  ("CALN", "PA"),
  ("CAL-NEV-ARI", "NV"),
  ("CALPELLA", "CA"),
  ("CALPINE", "CA"),
  ("CALUMET", "PA"),
  ("CALUMET", "MN"),
  ("CALUMET", "OK"),
  ("CALUMET", "IA"),
  ("CALUMET", "MI"),
  ("CALUMET CITY", "IL"),
  ("CALUMET PARK", "IL"),
  ("CALVARY", "GA"),
  ("CALVERT", "TX"),
  ("CALVERT", "AL"),
  ("CALVERT BEACH", "MD"),
  ("CALVERT CITY", "KY"),
  ("CALVERTON", "NY"),
  ("CALVERTON", "MD"),
  ("CALVERTON", "VA"),
  ("CALVERTON PARK", "MO"),
  ("CALVIN", "LA"),
  ("CALVIN", "OK"),
  ("CALVIN", "ND"),
  ("CALWA", "CA"),
  ("CALYPSO", "NC"),
  ("CALZADA", "PR"),
  ("CAMAK", "GA"),
  ("CAMANCHE", "IA"),
  ("CAMANCHE NORTH SHORE", "CA"),
  ("CAMANCHE VILLAGE", "CA"),
  ("CAMARGITO", "TX"),
  ("CAMARGO", "KY"),
  ("CAMARGO", "IL"),
  ("CAMARGO", "OK"),
  ("CAMARILLO", "CA"),
  ("CAMAS", "WA"),
  ("CAMAS", "MT"),
  ("CAMBRIA", "CA"),
  ("CAMBRIA", "IL"),
  ("CAMBRIA", "WI"),
  ("CAMBRIAN PARK", "CA"),
  ("CAMBRIDGE", "MD"),
  ("CAMBRIDGE", "MN"),
  ("CAMBRIDGE", "MA"),
  ("CAMBRIDGE", "OH"),
  ("CAMBRIDGE", "IL"),
  ("CAMBRIDGE", "NY"),
  ("CAMBRIDGE", "WI"),
  ("CAMBRIDGE", "NE"),
  ("CAMBRIDGE", "VT"),
  ("CAMBRIDGE", "IA"),
  ("CAMBRIDGE", "ID"),
  ("CAMBRIDGE", "KS"),
  ("CAMBRIDGE", "KY"),
  ("CAMBRIDGE CITY", "IN"),
  ("CAMBRIDGE SPRINGS", "PA"),
  ("CAMDEN", "AR"),
  ("CAMDEN", "SC"),
  ("CAMDEN", "NJ"),
  ("CAMDEN", "TN"),
  ("CAMDEN", "AL"),
  ("CAMDEN", "ME"),
  ("CAMDEN", "DE"),
  ("CAMDEN", "NY"),
  ("CAMDEN", "NC"),
  ("CAMDEN", "OH"),
  ("CAMDEN", "MI"),
  ("CAMDEN", "IL"),
  ("CAMDEN", "MO"),
  ("CAMDEN", "IN"),
  ("CAMDEN POINT", "MO"),
  ("CAMDEN-ON-GAULEY", "WV"),
  ("CAMDENTON", "MO"),
  ("CAMERON", "AZ"),
  ("CAMERON", "LA"),
  ("CAMERON", "MO"),
  ("CAMERON", "TX"),
  ("CAMERON", "SC"),
  ("CAMERON", "WI"),
  ("CAMERON", "NC"),
  ("CAMERON", "WV"),
  ("CAMERON", "OK"),
  ("CAMERON PARK", "CA"),
  ("CAMERON PARK", "TX"),
  ("CAMILLA", "GA"),
  ("CAMILLUS", "NY"),
  ("CAMINO", "CA"),
  ("CAMINO TASSAJARA", "CA"),
  ("CAMMACK VILLAGE", "AR"),
  ("CAMP CROOK", "SD"),
  ("CAMP DENNISON", "OH"),
  ("CAMP DOUGLAS", "WI"),
  ("CAMP HILL", "AL"),
  ("CAMP HILL", "PA"),
  ("CAMP LAKE", "WI"),
  ("CAMP NELSON", "CA"),
  ("CAMP PENDLETON NORTH", "CA"),
  ("CAMP PENDLETON SOUTH", "CA"),
  ("CAMP POINT", "IL"),
  ("CAMP SHERMAN", "OR"),
  ("CAMP SPRINGS", "MD"),
  ("CAMP SWIFT", "TX"),
  ("CAMP THREE", "MT"),
  ("CAMP VERDE", "AZ"),
  ("CAMP WOOD", "TX"),
  ("CAMPANILLA", "PR"),
  ("CAMPBELL", "CA"),
  ("CAMPBELL", "OH"),
  ("CAMPBELL", "FL"),
  ("CAMPBELL", "NY"),
  ("CAMPBELL", "TX"),
  ("CAMPBELL", "MO"),
  ("CAMPBELL", "NE"),
  ("CAMPBELL", "MN"),
  ("CAMPBELL HILL", "IL"),
  ("CAMPBELL STATION", "AR"),
  ("CAMPBELLSBURG", "KY"),
  ("CAMPBELLSBURG", "IN"),
  ("CAMPBELLSPORT", "WI"),
  ("CAMPBELLSVILLE", "KY"),
  ("CAMPBELLTON", "FL"),
  ("CAMPBELLTOWN", "PA"),
  ("CAMPO", "CA"),
  ("CAMPO", "CO"),
  ("CAMPO BONITO", "AZ"),
  ("CAMPO RICO", "PR"),
  ("CAMPO VERDE", "TX"),
  ("CAMPOBELLO", "SC"),
  ("CAMPTI", "LA"),
  ("CAMPTON", "KY"),
  ("CAMPTON HILLS", "IL"),
  ("CAMPTONVILLE", "CA"),
  ("CAMPTOWN", "VA"),
  ("CAMPUS", "IL"),
  ("CAMUY", "PR"),
  ("CANA", "VA"),
  ("CANAAN", "CT"),
  ("CANAAN", "VT"),
  ("CANAAN", "NH"),
  ("CANAAN", "IN"),
  ("CANADA CREEK RANCH", "MI"),
  ("CANADIAN", "TX"),
  ("CANADIAN", "OK"),
  ("CANADIAN LAKES", "MI"),
  ("CANADOHTA LAKE", "PA"),
  ("CANAJOHARIE", "NY"),
  ("CANAL FULTON", "OH"),
  ("CANAL LEWISVILLE", "OH"),
  ("CANAL POINT", "FL"),
  ("CANAL WINCHESTER", "OH"),
  ("CANALOU", "MO"),
  ("CANANDAIGUA", "NY"),
  ("CANASERAGA", "NY"),
  ("CANASTOTA", "NY"),
  ("CANBY", "OR"),
  ("CANBY", "CA"),
  ("CANBY", "MN"),
  ("CANDELARIA ARENAS", "PR"),
  ("CANDELARIA", "PR"),
  ("CANDELERO ABAJO", "PR"),
  ("CANDELERO ARRIBA", "PR"),
  ("CANDLER-MCAFEE", "GA"),
  ("CANDLEWOOD LAKE", "OH"),
  ("CANDO", "ND"),
  ("CANDOR", "NC"),
  ("CANDOR", "NY"),
  ("CANE BEDS", "AZ"),
  ("CANE SAVANNAH", "SC"),
  ("CANEY", "KS"),
  ("CANEY", "OK"),
  ("CANEY CITY", "TX"),
  ("CANEYVILLE", "KY"),
  ("CANFIELD", "OH"),
  ("CANISTEO", "NY"),
  ("CANISTOTA", "SD"),
  ("CANJILON", "NM"),
  ("CANKTON", "LA"),
  ("CANNELBURG", "IN"),
  ("CANNELTON", "IN"),
  ("CANNON AFB", "NM"),
  ("CANNON BALL", "ND"),
  ("CANNON BEACH", "OR"),
  ("CANNON FALLS", "MN"),
  ("CANNONDALE", "CT"),
  ("CANNONSBURG", "KY"),
  ("CANNONVILLE", "UT"),
  ("CANON", "GA"),
  ("CANONSBURG", "PA"),
  ("CANOOCHEE", "GA"),
  ("CANOVA", "NM"),
  ("CANOVA", "SD"),
  ("CANTERWOOD", "WA"),
  ("CANTON", "OH"),
  ("CANTON", "MS"),
  ("CANTON", "GA"),
  ("CANTON", "IL"),
  ("CANTON", "TX"),
  ("CANTON", "NC"),
  ("CANTON", "NY"),
  ("CANTON", "SD"),
  ("CANTON", "MO"),
  ("CANTON", "PA"),
  ("CANTON", "MN"),
  ("CANTON", "OK"),
  ("CANTON", "KS"),
  ("CANTON CITY", "ND"),
  ("CANTON VALLEY", "CT"),
  ("CANTRALL", "IL"),
  ("CANTRIL", "IA"),
  ("CANTU ADDITION", "TX"),
  ("CANTUA CREEK", "CA"),
  ("CANTWELL", "AK"),
  ("CANUTE", "OK"),
  ("CANUTILLO", "TX"),
  ("CANÛVANAS", "PR"),
  ("CANYON", "TX"),
  ("CANYON CITY", "OR"),
  ("CANYON CREEK", "WA"),
  ("CANYON CREEK", "TX"),
  ("CANYON DAY", "AZ"),
  ("CANYON LAKE", "TX"),
  ("CANYON LAKE", "CA"),
  ("CANYONDAM", "CA"),
  ("CANYONVILLE", "OR"),
  ("CAÒADA DE LOS ALAMOS", "NM"),
  ("CAÒON", "NM"),
  ("CAÒON CITY", "CO"),
  ("CAÒONES", "NM"),
  ("CAPAC", "MI"),
  ("CAPE CANAVERAL", "FL"),
  ("CAPE CARTERET", "NC"),
  ("CAPE CHARLES", "VA"),
  ("CAPE CORAL", "FL"),
  ("CAPE GIRARDEAU", "MO"),
  ("CAPE MAY", "NJ"),
  ("CAPE MAY COURT HOUSE", "NJ"),
  ("CAPE MAY POINT", "NJ"),
  ("CAPE MEARES", "OR"),
  ("CAPE NEDDICK", "ME"),
  ("CAPE ROYALE", "TX"),
  ("CAPE ST. CLAIRE", "MD"),
  ("CAPE VINCENT", "NY"),
  ("CAPITAN", "NM"),
  ("CAPITANEJO", "PR"),
  ("CAPITOL HEIGHTS", "MD"),
  ("CAPITOLA", "CA"),
  ("CAPON BRIDGE", "WV"),
  ("CAPRON", "IL"),
  ("CAPRON", "VA"),
  ("CAPRON", "OK"),
  ("CAPTAIN COOK", "HI"),
  ("CAPTAINS COVE", "VA"),
  ("CAPTIVA", "FL"),
  ("CAPULIN", "NM"),
  ("CAPULIN", "CO"),
  ("CARAWAY", "AR"),
  ("CARBON", "TX"),
  ("CARBON", "IA"),
  ("CARBON", "IN"),
  ("CARBON CLIFF", "IL"),
  ("CARBON HILL", "AL"),
  ("CARBON HILL", "OH"),
  ("CARBON HILL", "IL"),
  ("CARBONADO", "WA"),
  ("CARBONDALE", "IL"),
  ("CARBONDALE", "PA"),
  ("CARBONDALE", "CO"),
  ("CARBONDALE", "KS"),
  ("CARBONVILLE", "UT"),
  ("CARDIFF", "AL"),
  ("CARDIN", "OK"),
  ("CARDINGTON", "OH"),
  ("CARDWELL", "MT"),
  ("CARDWELL", "MO"),
  ("CAREFREE", "AZ"),
  ("CARENCRO", "LA"),
  ("CAREY", "ID"),
  ("CAREY", "OH"),
  ("CARIBOU", "ME"),
  ("CARIBOU", "CA"),
  ("CARL", "GA"),
  ("CARL JUNCTION", "MO"),
  ("CARLE PLACE", "NY"),
  ("CARLETON", "MI"),
  ("CARLETON", "NE"),
  ("CARLIN", "NV"),
  ("CARLINVILLE", "IL"),
  ("CARLISLE", "OK"),
  ("CARLISLE", "IA"),
  ("CARLISLE", "PA"),
  ("CARLISLE", "AR"),
  ("CARLISLE", "OH"),
  ("CARLISLE", "SC"),
  ("CARLISLE", "KY"),
  ("CARLISLE", "IN"),
  ("CARLISLE-ROCKLEDGE", "AL"),
  ("CARLOCK", "IL"),
  ("CARLOS", "MN"),
  ("CARLOS", "MD"),
  ("CARL'S CORNER", "TX"),
  ("CARLSBAD", "CA"),
  ("CARLSBAD", "NM"),
  ("CARLSBAD", "TX"),
  ("CARLSBORG", "WA"),
  ("CARLSTADT", "NJ"),
  ("CARLTON", "MT"),
  ("CARLTON", "AL"),
  ("CARLTON", "MN"),
  ("CARLTON", "GA"),
  ("CARLTON", "OR"),
  ("CARLTON", "KS"),
  ("CARLYLE", "IL"),
  ("CARLYSS", "LA"),
  ("CARMEL", "IN"),
  ("CARMEL HAMLET", "NY"),
  ("CARMEL VALLEY VILLAGE", "CA"),
  ("CARMEL-BY-THE-SEA", "CA"),
  ("CARMEN", "OK"),
  ("CARMET", "CA"),
  ("CARMI", "IL"),
  ("CARMICHAEL", "CA"),
  ("CARMICHAELS", "PA"),
  ("CARMINE", "TX"),
  ("CARNATION", "WA"),
  ("CARNEGIE", "PA"),
  ("CARNEGIE", "OK"),
  ("CARNELIAN BAY", "CA"),
  ("CARNESVILLE", "GA"),
  ("CARNEY", "MD"),
  ("CARNEY", "OK"),
  ("CARNEY", "MI"),
  ("CARNEYS POINT", "NJ"),
  ("CARNOT-MOON", "PA"),
  ("CARNUEL", "NM"),
  ("CARO", "MI"),
  ("CAROGA LAKE", "NY"),
  ("CAROL STREAM", "IL"),
  ("CAROLEEN", "NC"),
  ("CAROLINA", "RI"),
  ("CAROLINA", "AL"),
  ("CAROLINA", "WV"),
  ("CAROLINA BEACH", "NC"),
  ("CAROLINA SHORES", "NC"),
  ("CAROLINA", "PR"),
  ("CAROLINE", "WI"),
  ("CARP LAKE", "MI"),
  ("CARPENDALE", "WV"),
  ("CARPENTER", "WY"),
  ("CARPENTER", "IA"),
  ("CARPENTERSVILLE", "IL"),
  ("CARPINTERIA", "CA"),
  ("CARPIO", "ND"),
  ("CARRABELLE", "FL"),
  ("CARRBORO", "NC"),
  ("CARRICK", "CA"),
  ("CARRIER", "OK"),
  ("CARRIER MILLS", "IL"),
  ("CARRINGTON", "ND"),
  ("CARRIZALES", "PR"),
  ("CARRIZO", "AZ"),
  ("CARRIZO HILL", "TX"),
  ("CARRIZO SPRINGS", "TX"),
  ("CARRIZOZO", "NM"),
  ("CARROLL", "IA"),
  ("CARROLL", "OH"),
  ("CARROLL", "NE"),
  ("CARROLL VALLEY", "PA"),
  ("CARROLLTON", "TX"),
  ("CARROLLTON", "GA"),
  ("CARROLLTON", "VA"),
  ("CARROLLTON", "MO"),
  ("CARROLLTON", "OH"),
  ("CARROLLTON", "AL"),
  ("CARROLLTON", "KY"),
  ("CARROLLTON", "IL"),
  ("CARROLLTON", "MS"),
  ("CARROLLTOWN", "PA"),
  ("CARROLLWOOD", "FL"),
  ("CARRSVILLE", "VA"),
  ("CARRSVILLE", "KY"),
  ("CARSON", "CA"),
  ("CARSON", "WA"),
  ("CARSON", "ND"),
  ("CARSON", "IA"),
  ("CARSON CITY", "NV"),
  ("CARSON CITY", "MI"),
  ("CARSONVILLE", "MI"),
  ("CARTAGO", "CA"),
  ("CARTER", "WY"),
  ("CARTER", "MT"),
  ("CARTER", "OK"),
  ("CARTER LAKE", "IA"),
  ("CARTER SPRINGS", "NV"),
  ("CARTERET", "NJ"),
  ("CARTERSVILLE", "GA"),
  ("CARTERVILLE", "IL"),
  ("CARTERVILLE", "MO"),
  ("CARTHAGE", "MO"),
  ("CARTHAGE", "TX"),
  ("CARTHAGE", "MS"),
  ("CARTHAGE", "NC"),
  ("CARTHAGE", "TN"),
  ("CARTHAGE", "NY"),
  ("CARTHAGE", "IL"),
  ("CARTHAGE", "SD"),
  ("CARTHAGE", "AR"),
  ("CARTHAGE", "IN"),
  ("CARTWRIGHT", "OK"),
  ("CARUTHERS", "CA"),
  ("CARUTHERSVILLE", "MO"),
  ("CARVER", "MN"),
  ("CARY", "NC"),
  ("CARY", "IL"),
  ("CARY", "MS"),
  ("CARYTOWN", "MO"),
  ("CARYVILLE", "TN"),
  ("CARYVILLE", "FL"),
  ("CASA", "AR"),
  ("CASA BLANCA", "AZ"),
  ("CASA BLANCA", "TX"),
  ("CASA COLORADA", "NM"),
  ("CASA CONEJO", "CA"),
  ("CASA DE ORO-MOUNT HELIX", "CA"),
  ("CASA GRANDE", "AZ"),
  ("CASAR", "NC"),
  ("CASAS", "TX"),
  ("CASAS ADOBES", "AZ"),
  ("CASCADE", "ID"),
  ("CASCADE", "IA"),
  ("CASCADE", "WI"),
  ("CASCADE", "MT"),
  ("CASCADE LOCKS", "OR"),
  ("CASCADE VALLEY", "WA"),
  ("CASCADE-CHIPITA PARK", "CO"),
  ("CASCADES", "VA"),
  ("CASCADIA", "OR"),
  ("CASCO", "ME"),
  ("CASCO", "WI"),
  ("CASEVILLE", "MI"),
  ("CASEY", "IL"),
  ("CASEY", "IA"),
  ("CASEYVILLE", "IL"),
  ("CASH", "AR"),
  ("CASHIERS", "NC"),
  ("CASHION", "OK"),
  ("CASHION COMMUNITY", "TX"),
  ("CASHMERE", "WA"),
  ("CASHTON", "WI"),
  ("CASHTOWN", "PA"),
  ("CASMALIA", "CA"),
  ("CASNOVIA", "MI"),
  ("CASPAR", "CA"),
  ("CASPER", "WY"),
  ("CASPER MOUNTAIN", "WY"),
  ("CASPIAN", "MI"),
  ("CASS", "WV"),
  ("CASS CITY", "MI"),
  ("CASS LAKE", "MN"),
  ("CASSADAGA", "NY"),
  ("CASSANDRA", "PA"),
  ("CASSEL", "CA"),
  ("CASSELBERRY", "FL"),
  ("CASSELMAN", "PA"),
  ("CASSELTON", "ND"),
  ("CASSODAY", "KS"),
  ("CASSOPOLIS", "MI"),
  ("CASSTOWN", "OH"),
  ("CASSVILLE", "WV"),
  ("CASSVILLE", "MO"),
  ("CASSVILLE", "WI"),
  ("CASSVILLE", "PA"),
  ("CASTAIC", "CA"),
  ("CASTALIA", "OH"),
  ("CASTALIA", "NC"),
  ("CASTALIA", "IA"),
  ("CASTALIAN SPRINGS", "TN"),
  ("CASTANA", "IA"),
  ("CASTANEA", "PA"),
  ("CASTILE", "NY"),
  ("CASTINE", "ME"),
  ("CASTINE", "OH"),
  ("CASTLE", "OK"),
  ("CASTLE DALE", "UT"),
  ("CASTLE HAYNE", "NC"),
  ("CASTLE HILL", "CA"),
  ("CASTLE HILLS", "TX"),
  ("CASTLE PINES", "CO"),
  ("CASTLE PINES NORTH", "CO"),
  ("CASTLE POINT", "MO"),
  ("CASTLE ROCK", "CO"),
  ("CASTLE ROCK", "WA"),
  ("CASTLE SHANNON", "PA"),
  ("CASTLE VALLEY", "UT"),
  ("CASTLEBERRY", "AL"),
  ("CASTLEFORD", "ID"),
  ("CASTLETON", "VT"),
  ("CASTLETON-ON-HUDSON", "NY"),
  ("CASTLEWOOD", "VA"),
  ("CASTLEWOOD", "SD"),
  ("CASTOR", "LA"),
  ("CASTORLAND", "NY"),
  ("CASTRO VALLEY", "CA"),
  ("CASTROVILLE", "TX"),
  ("CASTROVILLE", "CA"),
  ("CASWELL BEACH", "NC"),
  ("CATAHOULA", "LA"),
  ("CATALINA", "AZ"),
  ("CATALINA FOOTHILLS", "AZ"),
  ("CATAÒO", "PR"),
  ("CATARACT", "WI"),
  ("CATARINA", "TX"),
  ("CATASAUQUA", "PA"),
  ("CATAWBA", "SC"),
  ("CATAWBA", "WI"),
  ("CATAWBA", "NC"),
  ("CATAWBA", "OH"),
  ("CATAWISSA", "PA"),
  ("CATHARINE", "KS"),
  ("CATHAY", "ND"),
  ("CATHCART", "WA"),
  ("CATHEDRAL", "CO"),
  ("CATHEDRAL CITY", "CA"),
  ("CATHERINE", "AL"),
  ("CATHERINE", "CO"),
  ("CATHEYS VALLEY", "CA"),
  ("CATHLAMET", "WA"),
  ("CATLETT", "VA"),
  ("CATLETTSBURG", "KY"),
  ("CATLIN", "IL"),
  ("CATO", "NY"),
  ("CATONSVILLE", "MD"),
  ("CATOOSA", "OK"),
  ("CATRON", "MO"),
  ("CATS BRIDGE", "VA"),
  ("CATSKILL", "NY"),
  ("CATTARAUGUS", "NY"),
  ("CATTLE CREEK", "CO"),
  ("CAULKSVILLE", "AR"),
  ("CAUSEY", "NM"),
  ("CAVALERO", "WA"),
  ("CAVALIER", "ND"),
  ("CAVE", "MO"),
  ("CAVE CITY", "KY"),
  ("CAVE CITY", "AR"),
  ("CAVE CREEK", "AZ"),
  ("CAVE JUNCTION", "OR"),
  ("CAVE SPRING", "VA"),
  ("CAVE SPRING", "GA"),
  ("CAVE SPRINGS", "AR"),
  ("CAVE-IN-ROCK", "IL"),
  ("CAVENDISH", "VT"),
  ("CAVETOWN", "MD"),
  ("CAVOUR", "SD"),
  ("CAWKER CITY", "KS"),
  ("CAWOOD", "KY"),
  ("CAYCE", "SC"),
  ("CAYCE", "KY"),
  ("CAYEY", "PR"),
  ("CAYUCO", "PR"),
  ("CAYUCOS", "CA"),
  ("CAYUGA", "OK"),
  ("CAYUGA", "IN"),
  ("CAYUGA", "ND"),
  ("CAYUGA", "NY"),
  ("CAYUGA HEIGHTS", "NY"),
  ("CAYUSE", "OR"),
  ("CAZADERO", "CA"),
  ("CAZENOVIA", "NY"),
  ("CAZENOVIA", "WI"),
  ("CEARFOSS", "MD"),
  ("CECIL", "WI"),
  ("CECIL", "OH"),
  ("CECIL", "GA"),
  ("CECIL-BISHOP", "PA"),
  ("CECILIA", "LA"),
  ("CECILIA", "KY"),
  ("CECILTON", "MD"),
  ("CEDAR", "MI"),
  ("CEDAR", "KS"),
  ("CEDAR BLUFF", "AL"),
  ("CEDAR BLUFF", "VA"),
  ("CEDAR BLUFFS", "NE"),
  ("CEDAR CITY", "UT"),
  ("CEDAR CREEK", "AZ"),
  ("CEDAR CREEK", "NE"),
  ("CEDAR CREST", "OK"),
  ("CEDAR CREST", "NM"),
  ("CEDAR CREST", "PA"),
  ("CEDAR FALLS", "IA"),
  ("CEDAR FORT", "UT"),
  ("CEDAR GLEN LAKES", "NJ"),
  ("CEDAR GLEN WEST", "NJ"),
  ("CEDAR GROVE", "NM"),
  ("CEDAR GROVE", "FL"),
  ("CEDAR GROVE", "WI"),
  ("CEDAR GROVE", "WV"),
  ("CEDAR GROVE", "IN"),
  ("CEDAR HILL", "TX"),
  ("CEDAR HILL", "NM"),
  ("CEDAR HILL", "MO"),
  ("CEDAR HILL", "TN"),
  ("CEDAR HILL LAKES", "MO"),
  ("CEDAR HILLS", "UT"),
  ("CEDAR HILLS", "OR"),
  ("CEDAR KEY", "FL"),
  ("CEDAR LAKE", "IN"),
  ("CEDAR MILL", "OR"),
  ("CEDAR MILLS", "MN"),
  ("CEDAR PARK", "TX"),
  ("CEDAR POINT", "NC"),
  ("CEDAR POINT", "IL"),
  ("CEDAR POINT", "TX"),
  ("CEDAR POINT", "KS"),
  ("CEDAR RAPIDS", "IA"),
  ("CEDAR RAPIDS", "NE"),
  ("CEDAR RIDGE", "CA"),
  ("CEDAR ROCK", "NC"),
  ("CEDAR SLOPE", "CA"),
  ("CEDAR SPRINGS", "GA"),
  ("CEDAR SPRINGS", "MI"),
  ("CEDAR VALE", "KS"),
  ("CEDAR VALLEY", "OK"),
  ("CEDARBURG", "WI"),
  ("CEDAREDGE", "CO"),
  ("CEDARHURST", "NY"),
  ("CEDARTOWN", "GA"),
  ("CEDARVILLE", "MD"),
  ("CEDARVILLE", "AR"),
  ("CEDARVILLE", "CA"),
  ("CEDARVILLE", "NJ"),
  ("CEDARVILLE", "OH"),
  ("CEDARVILLE", "IL"),
  ("CEDRO", "NM"),
  ("CEIBA", "PR"),
  ("CEIBA", "PR"),
  ("CELADA", "PR"),
  ("CELEBRATION", "FL"),
  ("CELERYVILLE", "OH"),
  ("CELESTE", "TX"),
  ("CELINA", "TX"),
  ("CELINA", "OH"),
  ("CELINA", "TN"),
  ("CELORON", "NY"),
  ("CEMENT", "OK"),
  ("CEMENT CITY", "MI"),
  ("CEMENTON", "PA"),
  ("CENTENNIAL", "CO"),
  ("CENTENNIAL", "WY"),
  ("CENTENNIAL PARK", "AZ"),
  ("CENTER", "TX"),
  ("CENTER", "CO"),
  ("CENTER", "ND"),
  ("CENTER", "MO"),
  ("CENTER", "NE"),
  ("CENTER CITY", "MN"),
  ("CENTER HILL", "FL"),
  ("CENTER JUNCTION", "IA"),
  ("CENTER LINE", "MI"),
  ("CENTER MORICHES", "NY"),
  ("CENTER OSSIPEE", "NH"),
  ("CENTER POINT", "AL"),
  ("CENTER POINT", "LA"),
  ("CENTER POINT", "IA"),
  ("CENTER POINT", "IN"),
  ("CENTER RIDGE", "AR"),
  ("CENTER SANDWICH", "NH"),
  ("CENTERBURG", "OH"),
  ("CENTEREACH", "NY"),
  ("CENTERFIELD", "UT"),
  ("CENTERPORT", "NY"),
  ("CENTERPORT", "PA"),
  ("CENTERTON", "AR"),
  ("CENTERTOWN", "MO"),
  ("CENTERTOWN", "TN"),
  ("CENTERTOWN", "KY"),
  ("CENTERVIEW", "MO"),
  ("CENTERVILLE", "PA"),
  ("CENTERVILLE", "TN"),
  ("CENTERVILLE", "OH"),
  ("CENTERVILLE", "CA"),
  ("CENTERVILLE", "UT"),
  ("CENTERVILLE", "SC"),
  ("CENTERVILLE", "IA"),
  ("CENTERVILLE", "GA"),
  ("CENTERVILLE", "WA"),
  ("CENTERVILLE", "IN"),
  ("CENTERVILLE", "MN"),
  ("CENTERVILLE", "PA"),
  ("CENTERVILLE", "TX"),
  ("CENTERVILLE", "SD"),
  ("CENTERVILLE", "MO"),
  ("CENTERVILLE", "NC"),
  ("CENTERVILLE", "OH"),
  ("CENTRAHOMA", "OK"),
  ("CENTRAL", "AK"),
  ("CENTRAL", "LA"),
  ("CENTRAL", "TN"),
  ("CENTRAL", "SC"),
  ("CENTRAL", "UT"),
  ("CENTRAL", "AZ"),
  ("CENTRAL AGUIRRE", "PR"),
  ("CENTRAL BRIDGE", "NY"),
  ("CENTRAL CITY", "KY"),
  ("CENTRAL CITY", "CO"),
  ("CENTRAL CITY", "NE"),
  ("CENTRAL CITY", "AR"),
  ("CENTRAL CITY", "IA"),
  ("CENTRAL CITY", "IL"),
  ("CENTRAL CITY", "PA"),
  ("CENTRAL CITY", "SD"),
  ("CENTRAL FALLS", "RI"),
  ("CENTRAL GARAGE", "VA"),
  ("CENTRAL GARDENS", "TX"),
  ("CENTRAL HEIGHTS-MIDLAND CITY", "AZ"),
  ("CENTRAL HIGH", "OK"),
  ("CENTRAL ISLIP", "NY"),
  ("CENTRAL LAKE", "MI"),
  ("CENTRAL PACOLET", "SC"),
  ("CENTRAL PARK", "WA"),
  ("CENTRAL POINT", "OR"),
  ("CENTRAL SQUARE", "NY"),
  ("CENTRAL VALLEY", "UT"),
  ("CENTRALHATCHEE", "GA"),
  ("CENTRALIA", "IL"),
  ("CENTRALIA", "WA"),
  ("CENTRALIA", "MO"),
  ("CENTRALIA", "IA"),
  ("CENTRALIA", "KS"),
  ("CENTRALIA", "PA"),
  ("CENTRE", "AL"),
  ("CENTRE HALL", "PA"),
  ("CENTRE ISLAND", "NY"),
  ("CENTREVILLE", "VA"),
  ("CENTREVILLE", "AL"),
  ("CENTREVILLE", "IL"),
  ("CENTREVILLE", "MD"),
  ("CENTREVILLE", "MS"),
  ("CENTREVILLE", "MI"),
  ("CENTURIA", "WI"),
  ("CENTURY", "FL"),
  ("CENTURY", "WV"),
  ("CEREDO", "WV"),
  ("CERES", "CA"),
  ("CERESCO", "NE"),
  ("CERILLOS HOYOS", "PR"),
  ("CERRITOS", "CA"),
  ("CERRO GORDO", "IL"),
  ("CERRO GORDO", "NC"),
  ("CERULEAN", "KY"),
  ("CESAR CHAVEZ", "TX"),
  ("CETRONIA", "PA"),
  ("CEYLON", "MN"),
  ("CHACKBAY", "LA"),
  ("CHACRA", "CO"),
  ("CHADBOURN", "NC"),
  ("CHADRON", "NE"),
  ("CHADWICK", "IL"),
  ("CHADWICKS", "NY"),
  ("CHAFFEE", "MO"),
  ("CHAGRIN FALLS", "OH"),
  ("CHAIN LAKE", "WA"),
  ("CHAIN O' LAKES", "WI"),
  ("CHAIN OF ROCKS", "MO"),
  ("CHAIN-O-LAKES", "MO"),
  ("CHALCO", "NE"),
  ("CHALFANT", "CA"),
  ("CHALFANT", "PA"),
  ("CHALFONT", "PA"),
  ("CHALKHILL", "PA"),
  ("CHALKYITSIK", "AK"),
  ("CHALLENGE-BROWNSVILLE", "CA"),
  ("CHALLIS", "ID"),
  ("CHALMERS", "IN"),
  ("CHALMETTE", "LA"),
  ("CHAMA", "NM"),
  ("CHAMBERINO", "NM"),
  ("CHAMBERLAIN", "SD"),
  ("CHAMBERLAYNE", "VA"),
  ("CHAMBERS", "NE"),
  ("CHAMBERSBURG", "PA"),
  ("CHAMBLEE", "GA"),
  ("CHAMISAL", "NM"),
  ("CHAMITA", "NM"),
  ("CHAMIZAL", "NM"),
  ("CHAMOIS", "MO"),
  ("CHAMP", "MO"),
  ("CHAMPAIGN", "IL"),
  ("CHAMPION", "NE"),
  ("CHAMPION HEIGHTS", "OH"),
  ("CHAMPLAIN", "NY"),
  ("CHAMPLIN", "MN"),
  ("CHANCE", "MD"),
  ("CHANCELLOR", "SD"),
  ("CHANDLER", "AZ"),
  ("CHANDLER", "OK"),
  ("CHANDLER", "TX"),
  ("CHANDLER", "IN"),
  ("CHANDLER", "MN"),
  ("CHANDLERVILLE", "IL"),
  ("CHANHASSEN", "MN"),
  ("CHANNAHON", "IL"),
  ("CHANNEL ISLANDS BEACH", "CA"),
  ("CHANNEL LAKE", "IL"),
  ("CHANNELVIEW", "TX"),
  ("CHANNING", "TX"),
  ("CHANTILLY", "VA"),
  ("CHANUTE", "KS"),
  ("CHAPARRAL", "NM"),
  ("CHAPARRITO", "TX"),
  ("CHAPEL HILL", "NC"),
  ("CHAPEL HILL", "TN"),
  ("CHAPENO", "TX"),
  ("CHAPIN", "SC"),
  ("CHAPIN", "IL"),
  ("CHAPIN", "IA"),
  ("CHAPLIN", "KY"),
  ("CHAPMAN", "KS"),
  ("CHAPMAN", "NE"),
  ("CHAPMAN", "PA"),
  ("CHAPMANVILLE", "WV"),
  ("CHAPPAQUA", "NY"),
  ("CHAPPELL", "NE"),
  ("CHARCO", "AZ"),
  ("CHARDON", "OH"),
  ("CHARENTON", "LA"),
  ("CHARITON", "IA"),
  ("CHARLACK", "MO"),
  ("CHARLEROI", "PA"),
  ("CHARLES CITY", "IA"),
  ("CHARLES CITY", "VA"),
  ("CHARLES TOWN", "WV"),
  ("CHARLESTON", "SC"),
  ("CHARLESTON", "WV"),
  ("CHARLESTON", "IL"),
  ("CHARLESTON", "MO"),
  ("CHARLESTON", "AR"),
  ("CHARLESTON", "UT"),
  ("CHARLESTON", "MS"),
  ("CHARLESTON", "TN"),
  ("CHARLESTON PARK", "FL"),
  ("CHARLESTOWN", "IN"),
  ("CHARLESTOWN", "MD"),
  ("CHARLESTOWN", "NH"),
  ("CHARLEVOIX", "MI"),
  ("CHARLO", "MT"),
  ("CHARLOS HEIGHTS", "MT"),
  ("CHARLOTTE", "NC"),
  ("CHARLOTTE", "MI"),
  ("CHARLOTTE", "TX"),
  ("CHARLOTTE", "TN"),
  ("CHARLOTTE", "IA"),
  ("CHARLOTTE COURT HOUSE", "VA"),
  ("CHARLOTTE HALL", "MD"),
  ("CHARLOTTE HARBOR", "FL"),
  ("CHARLOTTE PARK", "FL"),
  ("CHARLOTTESVILLE", "VA"),
  ("CHARLTON", "MD"),
  ("CHARLTON HEIGHTS", "WV"),
  ("CHARTER OAK", "CA"),
  ("CHARTER OAK", "IA"),
  ("CHASE", "AK"),
  ("CHASE", "PA"),
  ("CHASE", "KS"),
  ("CHASE CITY", "VA"),
  ("CHASE CROSSING", "VA"),
  ("CHASEBURG", "WI"),
  ("CHASKA", "MN"),
  ("CHATAIGNIER", "LA"),
  ("CHATEAUGAY", "NY"),
  ("CHATFIELD", "MN"),
  ("CHATFIELD", "OH"),
  ("CHATHAM", "IL"),
  ("CHATHAM", "MA"),
  ("CHATHAM", "MI"),
  ("CHATHAM", "NJ"),
  ("CHATHAM", "VA"),
  ("CHATHAM", "NY"),
  ("CHATHAM", "LA"),
  ("CHATMOSS", "VA"),
  ("CHATOM", "AL"),
  ("CHATSWORTH", "GA"),
  ("CHATSWORTH", "IL"),
  ("CHATSWORTH", "IA"),
  ("CHATTAHOOCHEE", "FL"),
  ("CHATTAHOOCHEE HILLS", "GA"),
  ("CHATTANOOGA", "TN"),
  ("CHATTANOOGA", "OK"),
  ("CHATTANOOGA VALLEY", "GA"),
  ("CHATTAROY", "WV"),
  ("CHAUMONT", "NY"),
  ("CHAUNCEY", "GA"),
  ("CHAUNCEY", "WV"),
  ("CHAUNCEY", "OH"),
  ("CHAUTAUQUA", "KS"),
  ("CHAUTAUQUA", "NY"),
  ("CHAUVIN", "LA"),
  ("CHAZY", "NY"),
  ("CHEAT LAKE", "WV"),
  ("CHEBANSE", "IL"),
  ("CHEBOYGAN", "MI"),
  ("CHECOTAH", "OK"),
  ("CHEEKTOWAGA", "NY"),
  ("CHEFORNAK", "AK"),
  ("CHEHALIS", "WA"),
  ("CHELAN", "WA"),
  ("CHELAN FALLS", "WA"),
  ("CHELSEA", "AL"),
  ("CHELSEA", "MI"),
  ("CHELSEA", "MA"),
  ("CHELSEA", "OK"),
  ("CHELSEA", "IA"),
  ("CHELSEA", "WI"),
  ("CHELSEA", "SD"),
  ("CHELYAN", "WV"),
  ("CHEMUNG", "IL"),
  ("CHENA RIDGE", "AK"),
  ("CHENANGO BRIDGE", "NY"),
  ("CHENEGA", "AK"),
  ("CHENEQUA", "WI"),
  ("CHENEY", "WA"),
  ("CHENEY", "KS"),
  ("CHENEYVILLE", "LA"),
  ("CHENOA", "IL"),
  ("CHENOWETH", "OR"),
  ("CHEPACHET", "RI"),
  ("CHERAW", "SC"),
  ("CHERAW", "CO"),
  ("CHERITON", "VA"),
  ("CHEROKEE", "NC"),
  ("CHEROKEE", "IA"),
  ("CHEROKEE", "AL"),
  ("CHEROKEE", "CA"),
  ("CHEROKEE", "OK"),
  ("CHEROKEE", "KS"),
  ("CHEROKEE CITY", "AR"),
  ("CHEROKEE PASS", "MO"),
  ("CHEROKEE STRIP", "CA"),
  ("CHEROKEE VILLAGE", "AR"),
  ("CHERRY", "IL"),
  ("CHERRY CREEK", "CO"),
  ("CHERRY CREEK", "NY"),
  ("CHERRY FORK", "OH"),
  ("CHERRY GROVE", "WA"),
  ("CHERRY GROVE", "OH"),
  ("CHERRY HILL", "VA"),
  ("CHERRY HILL MALL", "NJ"),
  ("CHERRY HILLS VILLAGE", "CO"),
  ("CHERRY LOG", "GA"),
  ("CHERRY TREE", "OK"),
  ("CHERRY TREE", "PA"),
  ("CHERRY VALLEY", "IL"),
  ("CHERRY VALLEY", "CA"),
  ("CHERRY VALLEY", "PA"),
  ("CHERRY VALLEY", "AR"),
  ("CHERRY VALLEY", "NY"),
  ("CHERRYLAND", "CA"),
  ("CHERRYVALE", "KS"),
  ("CHERRYVALE", "SC"),
  ("CHERRYVILLE", "NC"),
  ("CHERRYVILLE", "PA"),
  ("CHESANING", "MI"),
  ("CHESAPEAKE", "VA"),
  ("CHESAPEAKE", "WV"),
  ("CHESAPEAKE", "OH"),
  ("CHESAPEAKE", "MO"),
  ("CHESAPEAKE BEACH", "MD"),
  ("CHESAPEAKE CITY", "MD"),
  ("CHESAPEAKE RANCH ESTATES", "MD"),
  ("CHESHIRE", "OH"),
  ("CHESHIRE", "MA"),
  ("CHESHIRE VILLAGE", "CT"),
  ("CHESILHURST", "NJ"),
  ("CHESNEE", "SC"),
  ("CHEST SPRINGS", "PA"),
  ("CHESTER", "VA"),
  ("CHESTER", "CA"),
  ("CHESTER", "IL"),
  ("CHESTER", "MD"),
  ("CHESTER", "PA"),
  ("CHESTER", "OK"),
  ("CHESTER", "SC"),
  ("CHESTER", "NY"),
  ("CHESTER", "NJ"),
  ("CHESTER", "TX"),
  ("CHESTER", "MA"),
  ("CHESTER", "IA"),
  ("CHESTER", "VT"),
  ("CHESTER", "WV"),
  ("CHESTER", "GA"),
  ("CHESTER", "SD"),
  ("CHESTER", "NE"),
  ("CHESTER", "AR"),
  ("CHESTER", "MT"),
  ("CHESTER CENTER", "CT"),
  ("CHESTER GAP", "VA"),
  ("CHESTER HEIGHTS", "PA"),
  ("CHESTER HILL", "PA"),
  ("CHESTERBROOK", "PA"),
  ("CHESTERFIELD", "MO"),
  ("CHESTERFIELD", "TN"),
  ("CHESTERFIELD", "SC"),
  ("CHESTERFIELD", "IN"),
  ("CHESTERFIELD", "IL"),
  ("CHESTERHILL", "OH"),
  ("CHESTERLAND", "OH"),
  ("CHESTERTON", "IN"),
  ("CHESTERTOWN", "NY"),
  ("CHESTERTOWN", "MD"),
  ("CHESTERVILLE", "OH"),
  ("CHESTNUT", "IL"),
  ("CHESTNUT RIDGE", "NY"),
  ("CHESWICK", "PA"),
  ("CHESWOLD", "DE"),
  ("CHETEK", "WI"),
  ("CHETOPA", "KS"),
  ("CHEVAK", "AK"),
  ("CHEVAL", "FL"),
  ("CHEVERLY", "MD"),
  ("CHEVIOT", "OH"),
  ("CHEVY CHASE", "MD"),
  ("CHEVY CHASE", "MD"),
  ("CHEVY CHASE HEIGHTS", "PA"),
  ("CHEVY CHASE SECTION FIVE", "MD"),
  ("CHEVY CHASE SECTION THREE", "MD"),
  ("CHEVY CHASE VIEW", "MD"),
  ("CHEVY CHASE VILLAGE", "MD"),
  ("CHEWELAH", "WA"),
  ("CHEWEY", "OK"),
  ("CHEWSVILLE", "MD"),
  ("CHEWTON", "PA"),
  ("CHEYENNE", "WY"),
  ("CHEYENNE", "OK"),
  ("CHEYENNE WELLS", "CO"),
  ("CHEYNEY UNIVERSITY", "PA"),
  ("CHIAWULI TAK", "AZ"),
  ("CHICAGO", "IL"),
  ("CHICAGO HEIGHTS", "IL"),
  ("CHICAGO RIDGE", "IL"),
  ("CHICAL", "NM"),
  ("CHICKALOON", "AK"),
  ("CHICKAMAUGA", "GA"),
  ("CHICKAMAW BEACH", "MN"),
  ("CHICKASAW", "AL"),
  ("CHICKASAW", "OH"),
  ("CHICKASHA", "OK"),
  ("CHICKEN", "AK"),
  ("CHICO", "CA"),
  ("CHICO", "WA"),
  ("CHICO", "TX"),
  ("CHICOPEE", "MA"),
  ("CHICOPEE", "KS"),
  ("CHICORA", "PA"),
  ("CHIDESTER", "AR"),
  ("CHIEF LAKE", "WI"),
  ("CHIEFLAND", "FL"),
  ("CHIGNIK", "AK"),
  ("CHIGNIK LAGOON", "AK"),
  ("CHIGNIK LAKE", "AK"),
  ("CHILCHINBITO", "AZ"),
  ("CHILCOOT-VINTON", "CA"),
  ("CHILDERSBURG", "AL"),
  ("CHILDRESS", "TX"),
  ("CHILHOWEE", "MO"),
  ("CHILHOWIE", "VA"),
  ("CHILI", "NM"),
  ("CHILI", "WI"),
  ("CHILILI", "NM"),
  ("CHILLICOTHE", "OH"),
  ("CHILLICOTHE", "MO"),
  ("CHILLICOTHE", "IL"),
  ("CHILLICOTHE", "TX"),
  ("CHILLICOTHE", "IA"),
  ("CHILLUM", "MD"),
  ("CHILO", "OH"),
  ("CHILOQUIN", "OR"),
  ("CHILTON", "WI"),
  ("CHILTON", "TX"),
  ("CHIMAYO", "NM"),
  ("CHIMNEY ROCK VILLAGE", "NC"),
  ("CHINA", "TX"),
  ("CHINA GROVE", "TX"),
  ("CHINA GROVE", "NC"),
  ("CHINA LAKE ACRES", "CA"),
  ("CHINA SPRING", "TX"),
  ("CHINCHILLA", "PA"),
  ("CHINCOTEAGUE", "VA"),
  ("CHINESE CAMP", "CA"),
  ("CHINIAK", "AK"),
  ("CHINLE", "AZ"),
  ("CHINO", "CA"),
  ("CHINO HILLS", "CA"),
  ("CHINO VALLEY", "AZ"),
  ("CHINOOK", "WA"),
  ("CHINOOK", "MT"),
  ("CHIPLEY", "FL"),
  ("CHIPPEWA FALLS", "WI"),
  ("CHIPPEWA LAKE", "OH"),
  ("CHIPPEWA PARK", "OH"),
  ("CHIRENO", "TX"),
  ("CHISAGO CITY", "MN"),
  ("CHISANA", "AK"),
  ("CHISHOLM", "MN"),
  ("CHISHOLM", "ME"),
  ("CHISTOCHINA", "AK"),
  ("CHITINA", "AK"),
  ("CHITTENANGO", "NY"),
  ("CHLORIDE", "AZ"),
  ("CHOCCOLOCCO", "AL"),
  ("CHOCOWINITY", "NC"),
  ("CHOCTAW", "OK"),
  ("CHOCTAW", "LA"),
  ("CHOCTAW LAKE", "OH"),
  ("CHOKIO", "MN"),
  ("CHOKOLOSKEE", "FL"),
  ("CHOPTANK", "MD"),
  ("CHOTEAU", "MT"),
  ("CHOUDRANT", "LA"),
  ("CHOUTEAU", "OK"),
  ("CHOWCHILLA", "CA"),
  ("CHRISMAN", "IL"),
  ("CHRISNEY", "IN"),
  ("CHRISTIANA", "PA"),
  ("CHRISTIANSBURG", "VA"),
  ("CHRISTIANSBURG", "OH"),
  ("CHRISTIE", "OK"),
  ("CHRISTINE", "TX"),
  ("CHRISTINE", "ND"),
  ("CHRISTMAS", "FL"),
  ("CHRISTOPHER", "IL"),
  ("CHRISTOPHER CREEK", "AZ"),
  ("CHRISTOVAL", "TX"),
  ("CHUALAR", "CA"),
  ("CHUATHBALUK", "AK"),
  ("CHUBBUCK", "ID"),
  ("CHUGCREEK", "WY"),
  ("CHUGWATER", "WY"),
  ("CHUICHU", "AZ"),
  ("CHULA", "MO"),
  ("CHULA VISTA", "CA"),
  ("CHULA VISTA", "TX"),
  ("CHULA VISTA", "TX"),
  ("CHULA VISTA", "TX"),
  ("CHULUOTA", "FL"),
  ("CHUMS CORNER", "MI"),
  ("CHUMUCKLA", "FL"),
  ("CHUNCHULA", "AL"),
  ("CHUNKY", "MS"),
  ("CHUPADERO", "NM"),
  ("CHURCH CREEK", "MD"),
  ("CHURCH HILL", "TN"),
  ("CHURCH HILL", "PA"),
  ("CHURCH HILL", "MD"),
  ("CHURCH POINT", "LA"),
  ("CHURCH ROCK", "NM"),
  ("CHURCHILL", "MT"),
  ("CHURCHILL", "OH"),
  ("CHURCHILL", "PA"),
  ("CHURCHS FERRY", "ND"),
  ("CHURCHTOWN", "PA"),
  ("CHURCHVILLE", "PA"),
  ("CHURCHVILLE", "NY"),
  ("CHURCHVILLE", "VA"),
  ("CHURDAN", "IA"),
  ("CHURUBUSCO", "IN"),
  ("CIALES", "PR"),
  ("CIBECUE", "AZ"),
  ("CIBOLA", "AZ"),
  ("CIBOLO", "TX"),
  ("CICERO", "IL"),
  ("CICERO", "IN"),
  ("CIDRA", "PR"),
  ("CIENEGA SPRINGS", "AZ"),
  ("CIENEGAS TERRACE", "TX"),
  ("CIMARRON", "NM"),
  ("CIMARRON", "KS"),
  ("CIMARRON CITY", "OK"),
  ("CIMARRON HILLS", "CO"),
  ("CINCINNATI", "OH"),
  ("CINCINNATI", "IA"),
  ("CINCO BAYOU", "FL"),
  ("CINCO RANCH", "TX"),
  ("CINNAMON LAKE", "OH"),
  ("CIRCLE", "AK"),
  ("CIRCLE", "MT"),
  ("CIRCLE D-KC ESTATES", "TX"),
  ("CIRCLE PINES", "MN"),
  ("CIRCLEVILLE", "UT"),
  ("CIRCLEVILLE", "OH"),
  ("CIRCLEVILLE", "KS"),
  ("CISCO", "TX"),
  ("CISCO", "IL"),
  ("CISNE", "IL"),
  ("CISSNA PARK", "IL"),
  ("CITRONELLE", "AL"),
  ("CITRUS", "CA"),
  ("CITRUS CITY", "TX"),
  ("CITRUS HEIGHTS", "CA"),
  ("CITRUS HILLS", "FL"),
  ("CITRUS PARK", "FL"),
  ("CITRUS PARK", "AZ"),
  ("CITRUS SPRINGS", "FL"),
  ("CITY OF CREEDE", "CO"),
  ("CITY OF THE SUN", "NM"),
  ("CITY VIEW", "SC"),
  ("CLACKS CANYON", "AZ"),
  ("CLAFLIN", "KS"),
  ("CLAIBORNE", "LA"),
  ("CLAIRE CITY", "SD"),
  ("CLAIRTON", "PA"),
  ("CLALLAM BAY", "WA"),
  ("CLAM GULCH", "AK"),
  ("CLAM LAKE", "WI"),
  ("CLANCY", "MT"),
  ("CLANTON", "AL"),
  ("CLARA", "MS"),
  ("CLARA CITY", "MN"),
  ("CLARCONA", "FL"),
  ("CLARE", "MI"),
  ("CLARE", "IA"),
  ("CLAREMONT", "NH"),
  ("CLAREMONT", "CA"),
  ("CLAREMONT", "NC"),
  ("CLAREMONT", "VA"),
  ("CLAREMONT", "MN"),
  ("CLAREMONT", "IL"),
  ("CLAREMONT", "SD"),
  ("CLAREMORE", "OK"),
  ("CLARENCE", "NY"),
  ("CLARENCE", "PA"),
  ("CLARENCE", "LA"),
  ("CLARENCE", "MO"),
  ("CLARENCE", "IA"),
  ("CLARENCE CENTER", "NY"),
  ("CLARENDON", "TX"),
  ("CLARENDON", "AR"),
  ("CLARENDON", "PA"),
  ("CLARENDON HILLS", "IL"),
  ("CLARINDA", "IA"),
  ("CLARINGTON", "OH"),
  ("CLARION", "IA"),
  ("CLARION", "PA"),
  ("CLARISSA", "MN"),
  ("CLARK", "PA"),
  ("CLARK", "SD"),
  ("CLARK", "MO"),
  ("CLARK FORK", "ID"),
  ("CLARK MILLS", "NY"),
  ("CLARKDALE", "AZ"),
  ("CLARKEDALE", "AR"),
  ("CLARKESVILLE", "GA"),
  ("CLARKFIELD", "MN"),
  ("CLARKRANGE", "TN"),
  ("CLARKS", "LA"),
  ("CLARKS", "NE"),
  ("CLARKS GREEN", "PA"),
  ("CLARKS GROVE", "MN"),
  ("CLARKS HILL", "SC"),
  ("CLARKS HILL", "IN"),
  ("CLARK'S POINT", "AK"),
  ("CLARKS SUMMIT", "PA"),
  ("CLARKSBURG", "WV"),
  ("CLARKSBURG", "MD"),
  ("CLARKSBURG", "CA"),
  ("CLARKSBURG", "TN"),
  ("CLARKSBURG", "MO"),
  ("CLARKSBURG", "IN"),
  ("CLARKSBURG", "OH"),
  ("CLARKSDALE", "MS"),
  ("CLARKSDALE", "MO"),
  ("CLARKSON", "NY"),
  ("CLARKSON", "KY"),
  ("CLARKSON", "NE"),
  ("CLARKSON VALLEY", "MO"),
  ("CLARKSTON", "WA"),
  ("CLARKSTON", "GA"),
  ("CLARKSTON", "UT"),
  ("CLARKSTON HEIGHTS-VINELAND", "WA"),
  ("CLARKSVILLE", "TN"),
  ("CLARKSVILLE", "AR"),
  ("CLARKSVILLE", "IN"),
  ("CLARKSVILLE", "TX"),
  ("CLARKSVILLE", "VA"),
  ("CLARKSVILLE", "IA"),
  ("CLARKSVILLE", "MI"),
  ("CLARKSVILLE", "MO"),
  ("CLARKSVILLE", "OH"),
  ("CLARKSVILLE", "PA"),
  ("CLARKSVILLE CITY", "TX"),
  ("CLARKTON", "NC"),
  ("CLARKTON", "MO"),
  ("CLARKTOWN", "OH"),
  ("CLARYSVILLE", "MD"),
  ("CLARYVILLE", "KY"),
  ("CLATONIA", "NE"),
  ("CLATSKANIE", "OR"),
  ("CLAUDE", "TX"),
  ("CLAVERACK-RED MILLS", "NY"),
  ("CLAWSON", "MI"),
  ("CLAWSON", "UT"),
  ("CLAXTON", "GA"),
  ("CLAY", "AL"),
  ("CLAY", "CA"),
  ("CLAY", "PA"),
  ("CLAY", "KY"),
  ("CLAY", "WV"),
  ("CLAY CENTER", "KS"),
  ("CLAY CENTER", "OH"),
  ("CLAY CENTER", "NE"),
  ("CLAY CITY", "IL"),
  ("CLAY CITY", "KY"),
  ("CLAY CITY", "IN"),
  ("CLAY SPRINGS", "AZ"),
  ("CLAYCOMO", "MO"),
  ("CLAYHATCHEE", "AL"),
  ("CLAYMONT", "DE"),
  ("CLAYPOOL", "AZ"),
  ("CLAYPOOL", "IN"),
  ("CLAYPOOL HILL", "VA"),
  ("CLAYSBURG", "PA"),
  ("CLAYSVILLE", "PA"),
  ("CLAYTON", "OH"),
  ("CLAYTON", "NC"),
  ("CLAYTON", "NM"),
  ("CLAYTON", "NJ"),
  ("CLAYTON", "AL"),
  ("CLAYTON", "CA"),
  ("CLAYTON", "GA"),
  ("CLAYTON", "WI"),
  ("CLAYTON", "MO"),
  ("CLAYTON", "DE"),
  ("CLAYTON", "OK"),
  ("CLAYTON", "NY"),
  ("CLAYTON", "LA"),
  ("CLAYTON", "WA"),
  ("CLAYTON", "IL"),
  ("CLAYTON", "IN"),
  ("CLAYTON", "MI"),
  ("CLAYTON", "IA"),
  ("CLAYTON", "KS"),
  ("CLAYTON", "ID"),
  ("CLAYVILLE", "RI"),
  ("CLAYVILLE", "NY"),
  ("CLE ELUM", "WA"),
  ("CLEAR CREEK", "CA"),
  ("CLEAR CREEK", "UT"),
  ("CLEAR LAKE", "IA"),
  ("CLEAR LAKE", "WA"),
  ("CLEAR LAKE", "SD"),
  ("CLEAR LAKE", "WI"),
  ("CLEAR LAKE", "WA"),
  ("CLEAR LAKE", "IN"),
  ("CLEAR LAKE", "MN"),
  ("CLEAR LAKE", "IL"),
  ("CLEAR LAKE SHORES", "TX"),
  ("CLEAR SPRING", "MD"),
  ("CLEARBROOK", "MN"),
  ("CLEARBROOK PARK", "NJ"),
  ("CLEARFIELD", "UT"),
  ("CLEARFIELD", "PA"),
  ("CLEARFIELD", "IA"),
  ("CLEARLAKE", "CA"),
  ("CLEARLAKE OAKS", "CA"),
  ("CLEARLAKE RIVIERA", "CA"),
  ("CLEARMONT", "MO"),
  ("CLEARMONT", "WY"),
  ("CLEARVIEW", "WA"),
  ("CLEARVIEW", "WV"),
  ("CLEARVIEW", "OK"),
  ("CLEARVIEW ACRES", "WY"),
  ("CLEARWATER", "FL"),
  ("CLEARWATER", "SC"),
  ("CLEARWATER", "KS"),
  ("CLEARWATER", "MN"),
  ("CLEARWATER", "NE"),
  ("CLEARY", "MS"),
  ("CLEBURNE", "TX"),
  ("CLEGHORN", "IA"),
  ("CLEMENTON", "NJ"),
  ("CLEMENTS", "MN"),
  ("CLEMMONS", "NC"),
  ("CLEMONS", "IA"),
  ("CLEMSON", "SC"),
  ("CLENDENIN", "WV"),
  ("CLEO SPRINGS", "OK"),
  ("CLEONA", "PA"),
  ("CLEONE", "CA"),
  ("CLEORA", "OK"),
  ("CLERMONT", "FL"),
  ("CLERMONT", "GA"),
  ("CLERMONT", "IA"),
  ("CLERMONT", "IN"),
  ("CLEVELAND", "OH"),
  ("CLEVELAND", "TN"),
  ("CLEVELAND", "TX"),
  ("CLEVELAND", "AL"),
  ("CLEVELAND", "MS"),
  ("CLEVELAND", "FL"),
  ("CLEVELAND", "GA"),
  ("CLEVELAND", "OK"),
  ("CLEVELAND", "WI"),
  ("CLEVELAND", "NC"),
  ("CLEVELAND", "MO"),
  ("CLEVELAND", "NY"),
  ("CLEVELAND", "UT"),
  ("CLEVELAND", "MN"),
  ("CLEVELAND", "IL"),
  ("CLEVELAND", "ND"),
  ("CLEVELAND", "VA"),
  ("CLEVELAND HEIGHTS", "OH"),
  ("CLEVER", "MO"),
  ("CLEVES", "OH"),
  ("CLEWISTON", "FL"),
  ("CLIFF", "NM"),
  ("CLIFF VILLAGE", "MO"),
  ("CLIFFDELL", "WA"),
  ("CLIFFORD", "MI"),
  ("CLIFFORD", "ND"),
  ("CLIFFORD", "IN"),
  ("CLIFFSIDE", "NC"),
  ("CLIFFSIDE PARK", "NJ"),
  ("CLIFFWOOD BEACH", "NJ"),
  ("CLIFTON", "AZ"),
  ("CLIFTON", "NJ"),
  ("CLIFTON", "TN"),
  ("CLIFTON", "CO"),
  ("CLIFTON", "ID"),
  ("CLIFTON", "TX"),
  ("CLIFTON", "SC"),
  ("CLIFTON", "IL"),
  ("CLIFTON", "KS"),
  ("CLIFTON", "VA"),
  ("CLIFTON", "OH"),
  ("CLIFTON FORGE", "VA"),
  ("CLIFTON HEIGHTS", "PA"),
  ("CLIFTON HILL", "MO"),
  ("CLIFTON SPRINGS", "NY"),
  ("CLIMAX", "MN"),
  ("CLIMAX", "MI"),
  ("CLIMAX", "GA"),
  ("CLIMAX", "KS"),
  ("CLIMAX SPRINGS", "MO"),
  ("CLIMBING HILL", "IA"),
  ("CLINCHCO", "VA"),
  ("CLINCHPORT", "VA"),
  ("CLINT", "TX"),
  ("CLINTON", "MS"),
  ("CLINTON", "IA"),
  ("CLINTON", "MD"),
  ("CLINTON", "AR"),
  ("CLINTON", "TN"),
  ("CLINTON", "SC"),
  ("CLINTON", "OK"),
  ("CLINTON", "MO"),
  ("CLINTON", "ME"),
  ("CLINTON", "NC"),
  ("CLINTON", "UT"),
  ("CLINTON", "OH"),
  ("CLINTON", "IL"),
  ("CLINTON", "MT"),
  ("CLINTON", "LA"),
  ("CLINTON", "CT"),
  ("CLINTON", "IN"),
  ("CLINTON", "MI"),
  ("CLINTON", "KY"),
  ("CLINTON", "MA"),
  ("CLINTON", "WI"),
  ("CLINTON", "NJ"),
  ("CLINTON", "WA"),
  ("CLINTON", "MN"),
  ("CLINTON", "PA"),
  ("CLINTON", "NY"),
  ("CLINTON", "NE"),
  ("CLINTONDALE", "NY"),
  ("CLINTONVILLE", "WI"),
  ("CLINTONVILLE", "PA"),
  ("CLINTWOOD", "VA"),
  ("CLIO", "AL"),
  ("CLIO", "MI"),
  ("CLIO", "SC"),
  ("CLIO", "IA"),
  ("CLIO", "CA"),
  ("CLIPPER MILLS", "CA"),
  ("CLITHERALL", "MN"),
  ("CLIVE", "IA"),
  ("CLONTARF", "MN"),
  ("CLOQUET", "MN"),
  ("CLOSTER", "NJ"),
  ("CLOUD CREEK", "OK"),
  ("CLOUD LAKE", "FL"),
  ("CLOUDCROFT", "NM"),
  ("CLOVER", "VA"),
  ("CLOVER", "SC"),
  ("CLOVER CREEK", "WA"),
  ("CLOVERDALE", "IN"),
  ("CLOVERDALE", "VA"),
  ("CLOVERDALE", "CA"),
  ("CLOVERDALE", "MS"),
  ("CLOVERDALE", "OR"),
  ("CLOVERDALE", "OH"),
  ("CLOVERLEAF", "TX"),
  ("CLOVERLY", "MD"),
  ("CLOVERPORT", "KY"),
  ("CLOVIS", "CA"),
  ("CLOVIS", "NM"),
  ("CLUSTER SPRINGS", "VA"),
  ("CLUTE", "TX"),
  ("CLUTIER", "IA"),
  ("CLYDE", "OH"),
  ("CLYDE", "TX"),
  ("CLYDE", "NY"),
  ("CLYDE", "NC"),
  ("CLYDE", "KS"),
  ("CLYDE", "NJ"),
  ("CLYDE", "MO"),
  ("CLYDE", "CA"),
  ("CLYDE HILL", "WA"),
  ("CLYDE PARK", "MT"),
  ("CLYMAN", "WI"),
  ("CLYMER", "PA"),
  ("COACHELLA", "CA"),
  ("COAHOMA", "TX"),
  ("COAHOMA", "MS"),
  ("COAL CENTER", "PA"),
  ("COAL CITY", "WV"),
  ("COAL CITY", "IL"),
  ("COAL CREEK", "CO"),
  ("COAL CREEK", "CO"),
  ("COAL FORK", "WV"),
  ("COAL GROVE", "OH"),
  ("COAL HILL", "AR"),
  ("COAL RUN VILLAGE", "KY"),
  ("COAL VALLEY", "IL"),
  ("COALDALE", "CO"),
  ("COALDALE", "PA"),
  ("COALDALE", "PA"),
  ("COALFIELD", "TN"),
  ("COALGATE", "OK"),
  ("COALING", "AL"),
  ("COALINGA", "CA"),
  ("COALMONT", "TN"),
  ("COALMONT", "IN"),
  ("COALMONT", "PA"),
  ("COALPORT", "PA"),
  ("COALTON", "OH"),
  ("COALTON", "IL"),
  ("COALVILLE", "UT"),
  ("COALVILLE", "IA"),
  ("COAMO", "PR"),
  ("COARSEGOLD", "CA"),
  ("COATES", "MN"),
  ("COATESVILLE", "PA"),
  ("COATESVILLE", "IN"),
  ("COATS", "NC"),
  ("COATS", "KS"),
  ("COATS BEND", "AL"),
  ("COATSBURG", "IL"),
  ("COBALT", "MO"),
  ("COBB", "CA"),
  ("COBB", "WI"),
  ("COBB ISLAND", "MD"),
  ("COBBTOWN", "FL"),
  ("COBBTOWN", "GA"),
  ("COBDEN", "IL"),
  ("COBDEN", "MN"),
  ("COBLESKILL", "NY"),
  ("COBRE", "NM"),
  ("COBURG", "OR"),
  ("COBURG", "IA"),
  ("COBURN", "PA"),
  ("COCHITI", "NM"),
  ("COCHITI LAKE", "NM"),
  ("COCHITUATE", "MA"),
  ("COCHRAN", "GA"),
  ("COCHRANE", "WI"),
  ("COCHRANTON", "PA"),
  ("COCHRANVILLE", "PA"),
  ("COCKEYSVILLE", "MD"),
  ("COCKRELL HILL", "TX"),
  ("COCO", "PR"),
  ("COCOA", "FL"),
  ("COCOA BEACH", "FL"),
  ("COCOA WEST", "FL"),
  ("COCONUT CREEK", "FL"),
  ("CODY", "WY"),
  ("CODY", "NE"),
  ("COEBURN", "VA"),
  ("COEUR D'ALENE", "ID"),
  ("COFFEE CITY", "TX"),
  ("COFFEE CREEK", "CA"),
  ("COFFEE SPRINGS", "AL"),
  ("COFFEEN", "IL"),
  ("COFFEEVILLE", "AL"),
  ("COFFEEVILLE", "MS"),
  ("COFFEY", "MO"),
  ("COFFEYVILLE", "KS"),
  ("COFFMAN COVE", "AK"),
  ("COFIELD", "NC"),
  ("COGGON", "IA"),
  ("COGSWELL", "ND"),
  ("COHASSET", "MN"),
  ("COHASSET", "CA"),
  ("COHASSETT BEACH", "WA"),
  ("COHOCTON", "NY"),
  ("COHOE", "AK"),
  ("COHOES", "NY"),
  ("COHUTTA", "GA"),
  ("COIN", "IA"),
  ("COINJOCK", "NC"),
  ("COKATO", "MN"),
  ("COKEBURG", "PA"),
  ("COKEDALE", "CO"),
  ("COKER", "AL"),
  ("COKESBURY", "SC"),
  ("COKEVILLE", "WY"),
  ("COLBERT", "OK"),
  ("COLBERT", "GA"),
  ("COLBURN", "IN"),
  ("COLBY", "KS"),
  ("COLBY", "WI"),
  ("COLCHESTER", "CT"),
  ("COLCHESTER", "IL"),
  ("COLCORD", "OK"),
  ("COLD BAY", "AK"),
  ("COLD BROOK", "NY"),
  ("COLD SPRING", "KY"),
  ("COLD SPRING", "MN"),
  ("COLD SPRING", "NY"),
  ("COLD SPRING HARBOR", "NY"),
  ("COLD SPRINGS", "NV"),
  ("COLD SPRINGS", "CA"),
  ("COLD SPRINGS", "CA"),
  ("COLDFOOT", "AK"),
  ("COLDIRON", "KY"),
  ("COLDSPRING", "TX"),
  ("COLDSTREAM", "OH"),
  ("COLDSTREAM", "KY"),
  ("COLDWATER", "MI"),
  ("COLDWATER", "KS"),
  ("COLDWATER", "MS"),
  ("COLDWATER", "OH"),
  ("COLE", "OK"),
  ("COLE CAMP", "MO"),
  ("COLEBROOK", "NH"),
  ("COLEHARBOR", "ND"),
  ("COLEMAN", "TX"),
  ("COLEMAN", "FL"),
  ("COLEMAN", "MI"),
  ("COLEMAN", "WI"),
  ("COLEMAN", "GA"),
  ("COLERAIN", "NC"),
  ("COLERAINE", "MN"),
  ("COLERIDGE", "NE"),
  ("COLESBURG", "IA"),
  ("COLESVILLE", "MD"),
  ("COLETA", "IL"),
  ("COLEVILLE", "CA"),
  ("COLFAX", "WA"),
  ("COLFAX", "IA"),
  ("COLFAX", "LA"),
  ("COLFAX", "CA"),
  ("COLFAX", "WI"),
  ("COLFAX", "ND"),
  ("COLFAX", "IL"),
  ("COLFAX", "IN"),
  ("COLLBRAN", "CO"),
  ("COLLEGE", "AK"),
  ("COLLEGE CITY", "CA"),
  ("COLLEGE CITY", "AR"),
  ("COLLEGE CORNER", "OH"),
  ("COLLEGE PARK", "GA"),
  ("COLLEGE PARK", "MD"),
  ("COLLEGE PLACE", "WA"),
  ("COLLEGE SPRINGS", "IA"),
  ("COLLEGE STATION", "TX"),
  ("COLLEGE STATION", "AR"),
  ("COLLEGEDALE", "TN"),
  ("COLLEGEVILLE", "PA"),
  ("COLLEGEVILLE", "IN"),
  ("COLLEYVILLE", "TX"),
  ("COLLIERVILLE", "TN"),
  ("COLLIERVILLE", "CA"),
  ("COLLINGDALE", "PA"),
  ("COLLINGS LAKES", "NJ"),
  ("COLLINGSWOOD", "NJ"),
  ("COLLINS", "MS"),
  ("COLLINS", "OH"),
  ("COLLINS", "GA"),
  ("COLLINS", "WI"),
  ("COLLINS", "IA"),
  ("COLLINS", "MO"),
  ("COLLINSBURG", "PA"),
  ("COLLINSTON", "LA"),
  ("COLLINSVILLE", "IL"),
  ("COLLINSVILLE", "MS"),
  ("COLLINSVILLE", "VA"),
  ("COLLINSVILLE", "OK"),
  ("COLLINSVILLE", "AL"),
  ("COLLINSVILLE", "CT"),
  ("COLLINSVILLE", "TX"),
  ("COLLINWOOD", "TN"),
  ("COLLYER", "KS"),
  ("COLMA", "CA"),
  ("COLMAN", "SD"),
  ("COLMAR MANOR", "MD"),
  ("COLMESNEIL", "TX"),
  ("COLO", "IA"),
  ("COLOGNE", "MN"),
  ("COLOMA", "CA"),
  ("COLOMA", "WI"),
  ("COLOMA", "MI"),
  ("COLOME", "SD"),
  ("COLON", "MI"),
  ("COLON", "NE"),
  ("COLONA", "IL"),
  ("COLONA", "CO"),
  ("COLONIA", "NJ"),
  ("COLONIAL BEACH", "VA"),
  ("COLONIAL HEIGHTS", "VA"),
  ("COLONIAL HEIGHTS", "TN"),
  ("COLONIAL PARK", "PA"),
  ("COLONIAL PINE HILLS", "SD"),
  ("COLONIE", "NY"),
  ("COLONY", "AL"),
  ("COLONY", "OK"),
  ("COLONY", "KS"),
  ("COLONY PARK", "PA"),
  ("COLORADO ACRES", "TX"),
  ("COLORADO CITY", "CO"),
  ("COLORADO CITY", "AZ"),
  ("COLORADO CITY", "TX"),
  ("COLORADO SPRINGS", "CO"),
  ("COLP", "IL"),
  ("COLQUITT", "GA"),
  ("COLSTRIP", "MT"),
  ("COLT", "AR"),
  ("COLTON", "CA"),
  ("COLTON", "NY"),
  ("COLTON", "SD"),
  ("COLTON", "WA"),
  ("COLUMBIA", "SC"),
  ("COLUMBIA", "MO"),
  ("COLUMBIA", "MD"),
  ("COLUMBIA", "TN"),
  ("COLUMBIA", "IL"),
  ("COLUMBIA", "MS"),
  ("COLUMBIA", "CA"),
  ("COLUMBIA", "KY"),
  ("COLUMBIA", "AL"),
  ("COLUMBIA", "PA"),
  ("COLUMBIA", "SD"),
  ("COLUMBIA", "NC"),
  ("COLUMBIA", "LA"),
  ("COLUMBIA", "VA"),
  ("COLUMBIA", "NJ"),
  ("COLUMBIA CITY", "IN"),
  ("COLUMBIA CITY", "OR"),
  ("COLUMBIA FALLS", "MT"),
  ("COLUMBIA HEIGHTS", "MN"),
  ("COLUMBIANA", "AL"),
  ("COLUMBIANA", "OH"),
  ("COLUMBIAVILLE", "MI"),
  ("COLUMBINE", "CO"),
  ("COLUMBINE VALLEY", "CO"),
  ("COLUMBUS", "OH"),
  ("COLUMBUS", "GA"),
  ("COLUMBUS", "MN"),
  ("COLUMBUS", "IN"),
  ("COLUMBUS", "MS"),
  ("COLUMBUS", "NE"),
  ("COLUMBUS", "WI"),
  ("COLUMBUS", "NC"),
  ("COLUMBUS", "TX"),
  ("COLUMBUS", "NM"),
  ("COLUMBUS", "KS"),
  ("COLUMBUS", "PA"),
  ("COLUMBUS", "MT"),
  ("COLUMBUS", "KY"),
  ("COLUMBUS", "ND"),
  ("COLUMBUS", "IL"),
  ("COLUMBUS AFB", "MS"),
  ("COLUMBUS CITY", "IA"),
  ("COLUMBUS GROVE", "OH"),
  ("COLUMBUS JUNCTION", "IA"),
  ("COLUSA", "CA"),
  ("COLVER", "PA"),
  ("COLVILLE", "WA"),
  ("COLWELL", "IA"),
  ("COLWICH", "KS"),
  ("COLWYN", "PA"),
  ("COMANCHE", "TX"),
  ("COMANCHE", "OK"),
  ("COMANCHE CREEK", "CO"),
  ("COMBEE SETTLEMENT", "FL"),
  ("COMBES", "TX"),
  ("COMBINE", "TX"),
  ("COMBINED LOCKS", "WI"),
  ("COMER", "GA"),
  ("COMERÌO", "PR"),
  ("COMFORT", "TX"),
  ("COMFORT", "WV"),
  ("COMFREY", "MN"),
  ("COMMACK", "NY"),
  ("COMMERCE", "GA"),
  ("COMMERCE", "TX"),
  ("COMMERCE", "CA"),
  ("COMMERCE", "OK"),
  ("COMMERCE", "MO"),
  ("COMMERCE CITY", "CO"),
  ("COMMERCIAL POINT", "OH"),
  ("COMMODORE", "PA"),
  ("COMO", "WI"),
  ("COMO", "NC"),
  ("COMO", "MS"),
  ("COMO", "TX"),
  ("COMO", "IL"),
  ("COMOBABI", "AZ"),
  ("COMPTCHE", "CA"),
  ("COMPTON", "CA"),
  ("COMPTON", "IL"),
  ("COMSTOCK", "NE"),
  ("COMSTOCK", "MN"),
  ("COMSTOCK NORTHWEST", "MI"),
  ("COMSTOCK PARK", "MI"),
  ("COMUNAS", "PR"),
  ("CONASHAUGH LAKES", "PA"),
  ("CONCEPCION", "TX"),
  ("CONCEPTION", "MO"),
  ("CONCEPTION JUNCTION", "MO"),
  ("CONCHAS DAM", "NM"),
  ("CONCHO", "AZ"),
  ("CONCONULLY", "WA"),
  ("CONCORD", "NH"),
  ("CONCORD", "NC"),
  ("CONCORD", "CA"),
  ("CONCORD", "VA"),
  ("CONCORD", "MO"),
  ("CONCORD", "AL"),
  ("CONCORD", "AR"),
  ("CONCORD", "MI"),
  ("CONCORD", "VT"),
  ("CONCORD", "GA"),
  ("CONCORD", "IL"),
  ("CONCORD", "NE"),
  ("CONCORD", "KY"),
  ("CONCORDE HILLS", "OH"),
  ("CONCORDIA", "KS"),
  ("CONCORDIA", "MO"),
  ("CONCORDIA", "NJ"),
  ("CONCOW", "CA"),
  ("CONCRETE", "WA"),
  ("CONDE", "SD"),
  ("CONDON", "MT"),
  ("CONDON", "OR"),
  ("CONEHATTA", "MS"),
  ("CONEJOS", "CO"),
  ("CONESTOGA", "PA"),
  ("CONESUS HAMLET", "NY"),
  ("CONESUS LAKE", "NY"),
  ("CONESVILLE", "IA"),
  ("CONESVILLE", "OH"),
  ("CONETOE", "NC"),
  ("CONEY ISLAND", "MO"),
  ("CONFLUENCE", "PA"),
  ("CONGER", "MN"),
  ("CONGERS", "NY"),
  ("CONGERVILLE", "IL"),
  ("CONGRESS", "AZ"),
  ("CONGRESS", "OH"),
  ("CONKLING PARK", "ID"),
  ("CONLEY", "GA"),
  ("CONNEAUT", "OH"),
  ("CONNEAUT LAKE", "PA"),
  ("CONNEAUT LAKESHORE", "PA"),
  ("CONNEAUTVILLE", "PA"),
  ("CONNELL", "WA"),
  ("CONNELLSVILLE", "PA"),
  ("CONNELLY SPRINGS", "NC"),
  ("CONNER", "MT"),
  ("CONNERSVILLE", "IN"),
  ("CONNERTON", "FL"),
  ("CONNING TOWERS NAUTILUS PARK", "CT"),
  ("CONNOQUENESSING", "PA"),
  ("CONOVER", "NC"),
  ("CONRAD", "MT"),
  ("CONRAD", "IA"),
  ("CONRATH", "WI"),
  ("CONROE", "TX"),
  ("CONROY", "IA"),
  ("CONSHOHOCKEN", "PA"),
  ("CONSTABLEVILLE", "NY"),
  ("CONSTANTIA", "NY"),
  ("CONSTANTINE", "MI"),
  ("CONTINENTAL", "OH"),
  ("CONTOOCOOK", "NH"),
  ("CONTRA COSTA CENTRE", "CA"),
  ("CONVENT", "LA"),
  ("CONVERSE", "TX"),
  ("CONVERSE", "LA"),
  ("CONVERSE", "IN"),
  ("CONVERSE", "SC"),
  ("CONVOY", "OH"),
  ("CONWAY", "AR"),
  ("CONWAY", "SC"),
  ("CONWAY", "FL"),
  ("CONWAY", "NH"),
  ("CONWAY", "NC"),
  ("CONWAY", "MO"),
  ("CONWAY", "PA"),
  ("CONWAY", "MI"),
  ("CONWAY", "WA"),
  ("CONWAY", "IA"),
  ("CONWAY", "ND"),
  ("CONWAY SPRINGS", "KS"),
  ("CONYERS", "GA"),
  ("CONYNGHAM", "PA"),
  ("COOK", "MN"),
  ("COOK", "NE"),
  ("COOKE CITY", "MT"),
  ("COOKEVILLE", "TN"),
  ("COOKSVILLE", "IL"),
  ("COOL", "TX"),
  ("COOL VALLEY", "MO"),
  ("COOLEEMEE", "NC"),
  ("COOLIDGE", "AZ"),
  ("COOLIDGE", "TX"),
  ("COOLIDGE", "GA"),
  ("COOLIDGE", "KS"),
  ("COOLVILLE", "OH"),
  ("COON RAPIDS", "MN"),
  ("COON RAPIDS", "IA"),
  ("COON VALLEY", "WI"),
  ("COOPER", "TX"),
  ("COOPER CITY", "FL"),
  ("COOPER LANDING", "AK"),
  ("COOPERS PLAINS", "NY"),
  ("COOPERSBURG", "PA"),
  ("COOPERSTOWN", "NY"),
  ("COOPERSTOWN", "ND"),
  ("COOPERSTOWN", "PA"),
  ("COOPERSVILLE", "MI"),
  ("COOPERTON", "OK"),
  ("COOPERTOWN", "TN"),
  ("COOS BAY", "OR"),
  ("COOSADA", "AL"),
  ("COOTER", "MO"),
  ("COPAKE LAKE", "NY"),
  ("COPALIS BEACH", "WA"),
  ("COPAN", "OK"),
  ("COPE", "SC"),
  ("COPELAND", "OK"),
  ("COPELAND", "KS"),
  ("COPEMISH", "MI"),
  ("COPENHAGEN", "NY"),
  ("COPIAGUE", "NY"),
  ("COPLAY", "PA"),
  ("COPPELL", "TX"),
  ("COPPER CANYON", "TX"),
  ("COPPER CENTER", "AK"),
  ("COPPER CITY", "MI"),
  ("COPPER HARBOR", "MI"),
  ("COPPER HILL", "AZ"),
  ("COPPER MOUNTAIN", "CO"),
  ("COPPERAS COVE", "TX"),
  ("COPPERHILL", "TN"),
  ("COPPEROPOLIS", "CA"),
  ("COPPERTON", "UT"),
  ("COPPOCK", "IA"),
  ("COQUÌ", "PR"),
  ("COQUILLE", "OR"),
  ("CORA", "WY"),
  ("CORAL", "PA"),
  ("CORAL GABLES", "FL"),
  ("CORAL HILLS", "MD"),
  ("CORAL SPRINGS", "FL"),
  ("CORAL TERRACE", "FL"),
  ("CORALVILLE", "IA"),
  ("CORAM", "NY"),
  ("CORAM", "MT"),
  ("CORAOPOLIS", "PA"),
  ("CORAZÛN", "PR"),
  ("CORBIN", "KY"),
  ("CORBIN CITY", "NJ"),
  ("CORCORAN", "MN"),
  ("CORCORAN", "CA"),
  ("CORCOVADO", "PR"),
  ("CORDAVILLE", "MA"),
  ("CORDELE", "GA"),
  ("CORDER", "MO"),
  ("CORDES LAKES", "AZ"),
  ("CORDOVA", "AK"),
  ("CORDOVA", "AL"),
  ("CORDOVA", "MD"),
  ("CORDOVA", "NC"),
  ("CORDOVA", "NM"),
  ("CORDOVA", "IL"),
  ("CORDOVA", "SC"),
  ("CORDOVA", "NE"),
  ("CORDRY SWEETWATER LAKES", "IN"),
  ("CORFU", "NY"),
  ("CORINNE", "UT"),
  ("CORINNE", "WV"),
  ("CORINTH", "MS"),
  ("CORINTH", "TX"),
  ("CORINTH", "AR"),
  ("CORINTH", "KY"),
  ("CORINTH", "NY"),
  ("CORLEY", "IA"),
  ("CORN", "OK"),
  ("CORN CREEK", "SD"),
  ("CORNELIA", "GA"),
  ("CORNELIUS", "NC"),
  ("CORNELIUS", "OR"),
  ("CORNELL", "WI"),
  ("CORNELL", "IL"),
  ("CORNERSVILLE", "TN"),
  ("CORNFIELDS", "AZ"),
  ("CORNING", "CA"),
  ("CORNING", "AR"),
  ("CORNING", "NY"),
  ("CORNING", "IA"),
  ("CORNING", "OH"),
  ("CORNING", "KS"),
  ("CORNING", "MO"),
  ("CORNISH", "UT"),
  ("CORNISH", "OK"),
  ("CORNLAND", "IL"),
  ("CORNLEA", "NE"),
  ("CORNUCOPIA", "WI"),
  ("CORNVILLE", "AZ"),
  ("CORNWALL", "PA"),
  ("CORNWALL-ON-HUDSON", "NY"),
  ("CORNWELLS HEIGHTS", "PA"),
  ("CORONA", "CA"),
  ("CORONA", "NM"),
  ("CORONA", "SD"),
  ("CORONA DE TUCSON", "AZ"),
  ("CORONACA", "SC"),
  ("CORONADO", "CA"),
  ("CORONITA", "CA"),
  ("COROZAL", "PR"),
  ("CORPUS CHRISTI", "TX"),
  ("CORRAL CITY", "TX"),
  ("CORRAL VIEJO", "PR"),
  ("CORRALES", "NM"),
  ("CORRALITOS", "CA"),
  ("CORRECTIONVILLE", "IA"),
  ("CORRELL", "MN"),
  ("CORRIGAN", "TX"),
  ("CORRIGANVILLE", "MD"),
  ("CORRY", "PA"),
  ("CORSICA", "SD"),
  ("CORSICA", "PA"),
  ("CORSICANA", "TX"),
  ("CORTE MADERA", "CA"),
  ("CORTEZ", "CO"),
  ("CORTEZ", "FL"),
  ("CORTLAND", "OH"),
  ("CORTLAND", "NY"),
  ("CORTLAND", "IL"),
  ("CORTLAND", "NE"),
  ("CORTLAND WEST", "NY"),
  ("CORUNNA", "MI"),
  ("CORUNNA", "IN"),
  ("CORVALLIS", "OR"),
  ("CORVALLIS", "MT"),
  ("CORWIN", "OH"),
  ("CORWIN SPRINGS", "MT"),
  ("CORWITH", "IA"),
  ("CORYDON", "IN"),
  ("CORYDON", "IA"),
  ("CORYDON", "KY"),
  ("COS COB", "CT"),
  ("COSBY", "MO"),
  ("COSHOCTON", "OH"),
  ("COSMOPOLIS", "WA"),
  ("COSMOS", "MN"),
  ("COSTA MESA", "CA"),
  ("COSTILLA", "NM"),
  ("COTATI", "CA"),
  ("COTESFIELD", "NE"),
  ("COTO DE CAZA", "CA"),
  ("COTO LAUREL", "PR"),
  ("COTO NORTE", "PR"),
  ("COTOPAXI", "CO"),
  ("COTTAGE CITY", "MD"),
  ("COTTAGE GROVE", "MN"),
  ("COTTAGE GROVE", "OR"),
  ("COTTAGE GROVE", "WI"),
  ("COTTAGE GROVE", "TN"),
  ("COTTAGE LAKE", "WA"),
  ("COTTAGEVILLE", "SC"),
  ("COTTER", "AR"),
  ("COTTER", "IA"),
  ("COTTLEVILLE", "MO"),
  ("COTTON CITY", "NM"),
  ("COTTON PLANT", "AR"),
  ("COTTON VALLEY", "LA"),
  ("COTTONDALE", "FL"),
  ("COTTONPORT", "LA"),
  ("COTTONTOWN", "TN"),
  ("COTTONWOOD", "AZ"),
  ("COTTONWOOD", "AL"),
  ("COTTONWOOD", "CA"),
  ("COTTONWOOD", "TX"),
  ("COTTONWOOD", "MN"),
  ("COTTONWOOD", "SD"),
  ("COTTONWOOD", "ID"),
  ("COTTONWOOD", "AZ"),
  ("COTTONWOOD FALLS", "KS"),
  ("COTTONWOOD HEIGHTS", "UT"),
  ("COTTONWOOD SHORES", "TX"),
  ("COTULLA", "TX"),
  ("COUDERAY", "WI"),
  ("COUDERSPORT", "PA"),
  ("COULEE CITY", "WA"),
  ("COULEE DAM", "WA"),
  ("COULTER", "IA"),
  ("COULTERVILLE", "IL"),
  ("COULTERVILLLE", "CA"),
  ("COUNCIL", "ID"),
  ("COUNCIL BLUFFS", "IA"),
  ("COUNCIL GROVE", "KS"),
  ("COUNCIL HILL", "OK"),
  ("COUNTRY ACRES", "TX"),
  ("COUNTRY CLUB", "FL"),
  ("COUNTRY CLUB", "MO"),
  ("COUNTRY CLUB", "CA"),
  ("COUNTRY CLUB ESTATES", "GA"),
  ("COUNTRY CLUB HEIGHTS", "IN"),
  ("COUNTRY CLUB HILLS", "IL"),
  ("COUNTRY CLUB HILLS", "MO"),
  ("COUNTRY HOMES", "WA"),
  ("COUNTRY KNOLLS", "NY"),
  ("COUNTRY LAKE ESTATES", "NJ"),
  ("COUNTRY LIFE ACRES", "MO"),
  ("COUNTRY SQUIRE LAKES", "IN"),
  ("COUNTRY WALK", "FL"),
  ("COUNTRYSIDE", "IL"),
  ("COUNTRYSIDE", "VA"),
  ("COUNTY CENTER", "VA"),
  ("COUNTY LINE", "AL"),
  ("COUPEVILLE", "WA"),
  ("COURTDALE", "PA"),
  ("COURTENAY", "ND"),
  ("COURTLAND", "AL"),
  ("COURTLAND", "MN"),
  ("COURTLAND", "CA"),
  ("COURTLAND", "MS"),
  ("COURTLAND", "VA"),
  ("COURTLAND", "KS"),
  ("COUSHATTA", "LA"),
  ("COUSINS ISLAND", "ME"),
  ("COVE", "UT"),
  ("COVE", "AR"),
  ("COVE", "TX"),
  ("COVE", "OR"),
  ("COVE CITY", "NC"),
  ("COVE CREEK", "NC"),
  ("COVE NECK", "NY"),
  ("COVEDALE", "OH"),
  ("COVEL", "WV"),
  ("COVELO", "CA"),
  ("COVENANT LIFE", "AK"),
  ("COVENTRY", "VT"),
  ("COVENTRY LAKE", "CT"),
  ("COVINA", "CA"),
  ("COVINGTON", "GA"),
  ("COVINGTON", "KY"),
  ("COVINGTON", "TN"),
  ("COVINGTON", "LA"),
  ("COVINGTON", "WA"),
  ("COVINGTON", "VA"),
  ("COVINGTON", "OH"),
  ("COVINGTON", "IN"),
  ("COVINGTON", "TX"),
  ("COVINGTON", "OK"),
  ("COW CREEK", "SD"),
  ("COWAN", "TN"),
  ("COWAN", "CA"),
  ("COWARD", "SC"),
  ("COWARTS", "AL"),
  ("COWDEN", "IL"),
  ("COWEN", "WV"),
  ("COWETA", "OK"),
  ("COWGILL", "MO"),
  ("COWICHE", "WA"),
  ("COWLES", "NE"),
  ("COWLEY", "WY"),
  ("COWLIC", "AZ"),
  ("COWLINGTON", "OK"),
  ("COWPENS", "SC"),
  ("COXSACKIE", "NY"),
  ("COY", "AR"),
  ("COYANOSA", "TX"),
  ("COYLE", "OK"),
  ("COYNE CENTER", "IL"),
  ("COYOTE", "NM"),
  ("COYOTE ACRES", "TX"),
  ("COYOTE FLATS", "TX"),
  ("COYVILLE", "KS"),
  ("COZAD", "NE"),
  ("CRAB ORCHARD", "TN"),
  ("CRAB ORCHARD", "WV"),
  ("CRAB ORCHARD", "KY"),
  ("CRAB ORCHARD", "IL"),
  ("CRAB ORCHARD", "NE"),
  ("CRABTREE", "OR"),
  ("CRABTREE", "PA"),
  ("CRAFTON", "PA"),
  ("CRAGSMOOR", "NY"),
  ("CRAIG", "AK"),
  ("CRAIG", "CO"),
  ("CRAIG", "MT"),
  ("CRAIG", "NE"),
  ("CRAIG", "MO"),
  ("CRAIG", "IA"),
  ("CRAIG BEACH", "OH"),
  ("CRAIGMONT", "ID"),
  ("CRAIGSVILLE", "WV"),
  ("CRAIGSVILLE", "VA"),
  ("CRAINVILLE", "IL"),
  ("CRAMERTON", "NC"),
  ("CRANBERRY LAKE", "NY"),
  ("CRANBURY", "NJ"),
  ("CRANDALL", "TX"),
  ("CRANDALL", "IN"),
  ("CRANDON", "WI"),
  ("CRANDON LAKES", "NJ"),
  ("CRANE", "OR"),
  ("CRANE", "MT"),
  ("CRANE", "MO"),
  ("CRANE", "TX"),
  ("CRANE", "IN"),
  ("CRANESVILLE", "PA"),
  ("CRANFILLS GAP", "TX"),
  ("CRANSTON", "RI"),
  ("CRARY", "ND"),
  ("CRAWFORD", "MS"),
  ("CRAWFORD", "NE"),
  ("CRAWFORD", "GA"),
  ("CRAWFORD", "TX"),
  ("CRAWFORD", "CO"),
  ("CRAWFORDSVILLE", "IN"),
  ("CRAWFORDSVILLE", "OR"),
  ("CRAWFORDSVILLE", "AR"),
  ("CRAWFORDSVILLE", "IA"),
  ("CRAWFORDVILLE", "FL"),
  ("CRAWFORDVILLE", "GA"),
  ("CRAYNE", "KY"),
  ("CREAL SPRINGS", "IL"),
  ("CREEDMOOR", "NC"),
  ("CREEDMOOR", "TX"),
  ("CREEKSIDE", "PA"),
  ("CREEKSIDE", "KY"),
  ("CREIGHTON", "NE"),
  ("CREIGHTON", "MO"),
  ("CRELLIN", "MD"),
  ("CRENSHAW", "PA"),
  ("CRENSHAW", "MS"),
  ("CREOLA", "AL"),
  ("CREOLA", "LA"),
  ("CRESAPTOWN", "MD"),
  ("CRESBARD", "SD"),
  ("CRESCENT", "LA"),
  ("CRESCENT", "IA"),
  ("CRESCENT", "OK"),
  ("CRESCENT BEACH", "FL"),
  ("CRESCENT CITY", "FL"),
  ("CRESCENT CITY", "CA"),
  ("CRESCENT CITY", "IL"),
  ("CRESCENT MILLS", "CA"),
  ("CRESCENT SPRINGS", "KY"),
  ("CRESCENT VALLEY", "NV"),
  ("CRESCO", "IA"),
  ("CRESSEY", "CA"),
  ("CRESSKILL", "NJ"),
  ("CRESSON", "TX"),
  ("CRESSON", "PA"),
  ("CRESSONA", "PA"),
  ("CREST", "CA"),
  ("CREST HILL", "IL"),
  ("CRESTED BUTTE", "CO"),
  ("CRESTLINE", "CA"),
  ("CRESTLINE", "OH"),
  ("CRESTMORE HEIGHTS", "CA"),
  ("CRESTON", "IA"),
  ("CRESTON", "OH"),
  ("CRESTON", "IL"),
  ("CRESTON", "CA"),
  ("CRESTON", "WA"),
  ("CRESTON", "NE"),
  ("CRESTONE", "CO"),
  ("CRESTVIEW", "FL"),
  ("CRESTVIEW", "KY"),
  ("CRESTVIEW HILLS", "KY"),
  ("CRESTWOOD", "KY"),
  ("CRESTWOOD", "MO"),
  ("CRESTWOOD", "IL"),
  ("CRESTWOOD VILLAGE", "NJ"),
  ("CRESWELL", "OR"),
  ("CRESWELL", "NC"),
  ("CRETE", "IL"),
  ("CRETE", "NE"),
  ("CREVE COEUR", "MO"),
  ("CREVE COEUR", "IL"),
  ("CREWE", "VA"),
  ("CRICKET", "NC"),
  ("CRIDERSVILLE", "OH"),
  ("CRIMORA", "VA"),
  ("CRIPPLE CREEK", "CO"),
  ("CRISFIELD", "MD"),
  ("CRISMAN", "CO"),
  ("CRITTENDEN", "KY"),
  ("CRIVITZ", "WI"),
  ("C-ROAD", "CA"),
  ("CROCKER", "WA"),
  ("CROCKER", "SD"),
  ("CROCKER", "MO"),
  ("CROCKETT", "TX"),
  ("CROCKETT", "CA"),
  ("CROFTON", "MD"),
  ("CROFTON", "NE"),
  ("CROFTON", "KY"),
  ("CROGHAN", "NY"),
  ("CROMBERG", "CA"),
  ("CROMPOND", "NY"),
  ("CROMWELL", "MN"),
  ("CROMWELL", "OK"),
  ("CROMWELL", "IN"),
  ("CROMWELL", "IA"),
  ("CROOK", "CO"),
  ("CROOKED CREEK", "AK"),
  ("CROOKED CREEK", "GA"),
  ("CROOKED LAKE PARK", "FL"),
  ("CROOKS", "SD"),
  ("CROOKSTON", "MN"),
  ("CROOKSTON", "NE"),
  ("CROOKSVILLE", "OH"),
  ("CROOM", "MD"),
  ("CROSBY", "MN"),
  ("CROSBY", "TX"),
  ("CROSBY", "MS"),
  ("CROSBY", "ND"),
  ("CROSBYTON", "TX"),
  ("CROSS ANCHOR", "SC"),
  ("CROSS CITY", "FL"),
  ("CROSS CREEK", "PA"),
  ("CROSS HILL", "SC"),
  ("CROSS LANES", "WV"),
  ("CROSS MOUNTAIN", "TX"),
  ("CROSS PLAINS", "TN"),
  ("CROSS PLAINS", "WI"),
  ("CROSS PLAINS", "TX"),
  ("CROSS ROADS", "TX"),
  ("CROSS ROADS", "PA"),
  ("CROSS TIMBER", "TX"),
  ("CROSS TIMBERS", "MO"),
  ("CROSS VILLAGE", "MI"),
  ("CROSSETT", "AR"),
  ("CROSSGATE", "KY"),
  ("CROSSLAKE", "MN"),
  ("CROSSNORE", "NC"),
  ("CROSSPOINTE", "VA"),
  ("CROSSVILLE", "TN"),
  ("CROSSVILLE", "AL"),
  ("CROSSVILLE", "IL"),
  ("CROSWELL", "MI"),
  ("CROTHERSVILLE", "IN"),
  ("CROTON-ON-HUDSON", "NY"),
  ("CROUCH", "ID"),
  ("CROW AGENCY", "MT"),
  ("CROWDER", "OK"),
  ("CROWDER", "MS"),
  ("CROWELL", "TX"),
  ("CROWHEART", "WY"),
  ("CROWLEY", "TX"),
  ("CROWLEY", "LA"),
  ("CROWLEY", "CO"),
  ("CROWLEY LAKE", "CA"),
  ("CROWN", "PA"),
  ("CROWN CITY", "OH"),
  ("CROWN HEIGHTS", "NY"),
  ("CROWN POINT", "IN"),
  ("CROWN POINT", "AK"),
  ("CROWNPOINT", "NM"),
  ("CROWNSVILLE", "MD"),
  ("CROWS LANDING", "CA"),
  ("CROWS NEST", "IN"),
  ("CROYDON", "PA"),
  ("CROZET", "VA"),
  ("CROZIER", "AZ"),
  ("CRUCIBLE", "PA"),
  ("CRUGER", "MS"),
  ("CRUGERS", "NY"),
  ("CRUM", "WV"),
  ("CRUMP", "TN"),
  ("CRUMPLER", "WV"),
  ("CRUZVILLE", "NM"),
  ("CRYSTAL", "MN"),
  ("CRYSTAL", "NM"),
  ("CRYSTAL", "ND"),
  ("CRYSTAL BAY", "NV"),
  ("CRYSTAL BEACH", "NY"),
  ("CRYSTAL BEACH", "AZ"),
  ("CRYSTAL CITY", "MO"),
  ("CRYSTAL CITY", "TX"),
  ("CRYSTAL DOWNS COUNTRY CLUB", "MI"),
  ("CRYSTAL FALLS", "MI"),
  ("CRYSTAL LAKE", "IL"),
  ("CRYSTAL LAKE", "CT"),
  ("CRYSTAL LAKE", "FL"),
  ("CRYSTAL LAKE", "IA"),
  ("CRYSTAL LAKE PARK", "MO"),
  ("CRYSTAL LAKES", "MO"),
  ("CRYSTAL LAKES", "OH"),
  ("CRYSTAL LAWNS", "IL"),
  ("CRYSTAL MOUNTAIN", "MI"),
  ("CRYSTAL RIVER", "FL"),
  ("CRYSTAL ROCK", "OH"),
  ("CRYSTAL SPRINGS", "FL"),
  ("CRYSTAL SPRINGS", "MS"),
  ("CUARTELEZ", "NM"),
  ("CUBA", "AL"),
  ("CUBA", "NM"),
  ("CUBA", "MO"),
  ("CUBA", "NY"),
  ("CUBA", "IL"),
  ("CUBA", "KS"),
  ("CUBA CITY", "WI"),
  ("CUBERO", "NM"),
  ("CUCUMBER", "WV"),
  ("CUDAHY", "WI"),
  ("CUDAHY", "CA"),
  ("CUDJOE KEY", "FL"),
  ("CUERO", "TX"),
  ("CUEVITAS", "TX"),
  ("CULBERTSON", "NE"),
  ("CULBERTSON", "MT"),
  ("CULDESAC", "ID"),
  ("CULEBRA", "PR"),
  ("CULLEN", "LA"),
  ("CULLISON", "KS"),
  ("CULLMAN", "AL"),
  ("CULLODEN", "WV"),
  ("CULLODEN", "GA"),
  ("CULLOM", "IL"),
  ("CULLOMBURG", "AL"),
  ("CULLOWHEE", "NC"),
  ("CULPEPER", "VA"),
  ("CULVER", "IN"),
  ("CULVER", "OR"),
  ("CULVER", "KS"),
  ("CULVER CITY", "CA"),
  ("CUMBERLAND", "MD"),
  ("CUMBERLAND", "VA"),
  ("CUMBERLAND", "WI"),
  ("CUMBERLAND", "KY"),
  ("CUMBERLAND", "IN"),
  ("CUMBERLAND", "IA"),
  ("CUMBERLAND", "OH"),
  ("CUMBERLAND CENTER", "ME"),
  ("CUMBERLAND CITY", "TN"),
  ("CUMBERLAND GAP", "TN"),
  ("CUMBERLAND HEAD", "NY"),
  ("CUMBERLAND HILL", "RI"),
  ("CUMBOLA", "PA"),
  ("CUMBY", "TX"),
  ("CUMINGS", "TX"),
  ("CUMMING", "GA"),
  ("CUMMING", "IA"),
  ("CUMMINSVILLE", "NY"),
  ("CUNDIYO", "NM"),
  ("CUNEY", "TX"),
  ("CUNNINGHAM", "KS"),
  ("CUPERTINO", "CA"),
  ("CURLEW", "WA"),
  ("CURLEW", "IA"),
  ("CURLEW LAKE", "WA"),
  ("CURRAN", "IL"),
  ("CURRIE", "MN"),
  ("CURRYVILLE", "MO"),
  ("CURTICE", "OH"),
  ("CURTIS", "NE"),
  ("CURTISS", "WI"),
  ("CURTISVILLE", "PA"),
  ("CURWENSVILLE", "PA"),
  ("CUSHING", "OK"),
  ("CUSHING", "TX"),
  ("CUSHING", "IA"),
  ("CUSHING", "NE"),
  ("CUSHMAN", "AR"),
  ("CUSICK", "WA"),
  ("CUSSETA", "AL"),
  ("CUSSETA-CHATTAHOOCHEE", "GA"),
  ("CUSTAR", "OH"),
  ("CUSTER", "SD"),
  ("CUSTER", "WA"),
  ("CUSTER", "MI"),
  ("CUSTER", "MT"),
  ("CUSTER CITY", "OK"),
  ("CUT AND SHOOT", "TX"),
  ("CUT BANK", "MT"),
  ("CUT OFF", "LA"),
  ("CUTCHOGUE", "NY"),
  ("CUTHBERT", "GA"),
  ("CUTLER", "CA"),
  ("CUTLER", "IL"),
  ("CUTLER BAY", "FL"),
  ("CUTLERVILLE", "MI"),
  ("CUTTEN", "CA"),
  ("CUTTER", "AZ"),
  ("CUYAHOGA FALLS", "OH"),
  ("CUYAHOGA HEIGHTS", "OH"),
  ("CUYAMA", "CA"),
  ("CUYAMUNGUE", "NM"),
  ("CUYAMUNGUE GRANT", "NM"),
  ("CUYLERVILLE", "NY"),
  ("CUYUNA", "MN"),
  ("CYGNET", "OH"),
  ("CYLINDER", "IA"),
  ("CYNTHIANA", "KY"),
  ("CYNTHIANA", "IN"),
  ("CYNTHIANA", "OH"),
  ("CYPRESS", "CA"),
  ("CYPRESS", "IL"),
  ("CYPRESS GARDENS", "FL"),
  ("CYPRESS LAKE", "FL"),
  ("CYPRESS QUARTERS", "FL"),
  ("CYRIL", "OK"),
  ("CYRUS", "MN"),
  ("DACOMA", "OK"),
  ("DACONO", "CO"),
  ("DACULA", "GA"),
  ("DADE CITY", "FL"),
  ("DADE CITY NORTH", "FL"),
  ("DADEVILLE", "AL"),
  ("DADEVILLE", "MO"),
  ("DAGGETT", "MI"),
  ("DAGSBORO", "DE"),
  ("DAGUAO", "PR"),
  ("DAHLEN", "ND"),
  ("DAHLGREN", "VA"),
  ("DAHLGREN", "IL"),
  ("DAHLGREN CENTER", "VA"),
  ("DAHLONEGA", "GA"),
  ("DAILEY", "WV"),
  ("DAINGERFIELD", "TX"),
  ("DAISETTA", "TX"),
  ("DAISY", "AR"),
  ("DAISY", "GA"),
  ("DAISYTOWN", "PA"),
  ("DAKOTA", "MN"),
  ("DAKOTA", "IL"),
  ("DAKOTA CITY", "NE"),
  ("DAKOTA CITY", "IA"),
  ("DAKOTA DUNES", "SD"),
  ("DAKOTA RIDGE", "CO"),
  ("DALE", "IN"),
  ("DALE", "WI"),
  ("DALE", "OK"),
  ("DALE", "PA"),
  ("DALE CITY", "VA"),
  ("DALEVILLE", "AL"),
  ("DALEVILLE", "VA"),
  ("DALEVILLE", "IN"),
  ("DALHART", "TX"),
  ("DALLAS", "TX"),
  ("DALLAS", "GA"),
  ("DALLAS", "OR"),
  ("DALLAS", "NC"),
  ("DALLAS", "PA"),
  ("DALLAS", "WI"),
  ("DALLAS", "SD"),
  ("DALLAS CENTER", "IA"),
  ("DALLAS CITY", "IL"),
  ("DALLASTOWN", "PA"),
  ("DALLESPORT", "WA"),
  ("DALMATIA", "PA"),
  ("DALTON", "GA"),
  ("DALTON", "PA"),
  ("DALTON", "OH"),
  ("DALTON", "NY"),
  ("DALTON", "WI"),
  ("DALTON", "NE"),
  ("DALTON", "MN"),
  ("DALTON", "MO"),
  ("DALTON CITY", "IL"),
  ("DALTON GARDENS", "ID"),
  ("DALWORTHINGTON GARDENS", "TX"),
  ("DALY CITY", "CA"),
  ("DALZELL", "SC"),
  ("DALZELL", "IL"),
  ("DAMAR", "KS"),
  ("DAMARISCOTTA", "ME"),
  ("DAMASCUS", "OR"),
  ("DAMASCUS", "MD"),
  ("DAMASCUS", "AR"),
  ("DAMASCUS", "GA"),
  ("DAMASCUS", "OH"),
  ("DAMASCUS", "VA"),
  ("DAMES QUARTER", "MD"),
  ("DAMIANSVILLE", "IL"),
  ("DAMMERON VALLEY", "UT"),
  ("DAMON", "TX"),
  ("DANA", "NC"),
  ("DANA", "IN"),
  ("DANA", "IA"),
  ("DANA", "IL"),
  ("DANA POINT", "CA"),
  ("DANBURY", "CT"),
  ("DANBURY", "WI"),
  ("DANBURY", "TX"),
  ("DANBURY", "NC"),
  ("DANBURY", "IA"),
  ("DANBURY", "NE"),
  ("DANDRIDGE", "TN"),
  ("DANE", "WI"),
  ("DANFORTH", "IL"),
  ("DANIA BEACH", "FL"),
  ("DANIEL", "WY"),
  ("DANIEL", "UT"),
  ("DANIELS", "WV"),
  ("DANIELSON", "CT"),
  ("DANIELSVILLE", "GA"),
  ("DANNEBROG", "NE"),
  ("DANNEMORA", "NY"),
  ("DANSVILLE", "NY"),
  ("DANSVILLE", "MI"),
  ("DANTE", "VA"),
  ("DANTE", "SD"),
  ("DANUBE", "MN"),
  ("DANVERS", "MA"),
  ("DANVERS", "IL"),
  ("DANVERS", "MN"),
  ("DANVILLE", "VA"),
  ("DANVILLE", "CA"),
  ("DANVILLE", "IL"),
  ("DANVILLE", "KY"),
  ("DANVILLE", "IN"),
  ("DANVILLE", "AR"),
  ("DANVILLE", "PA"),
  ("DANVILLE", "MD"),
  ("DANVILLE", "WV"),
  ("DANVILLE", "VT"),
  ("DANVILLE", "GA"),
  ("DANVILLE", "IA"),
  ("DANVILLE", "OH"),
  ("DANVILLE", "MO"),
  ("DANVILLE", "WA"),
  ("DANVILLE", "KS"),
  ("DAPHNE", "AL"),
  ("DAPHNEDALE PARK", "CA"),
  ("DARBY", "PA"),
  ("DARBY", "MT"),
  ("DARBYDALE", "OH"),
  ("DARBYVILLE", "OH"),
  ("DARDANELLE", "AR"),
  ("DARDEN", "TN"),
  ("DARDENNE PRAIRIE", "MO"),
  ("DARFUR", "MN"),
  ("DARGAN", "MD"),
  ("DARIEN", "GA"),
  ("DARIEN", "CT"),
  ("DARIEN", "IL"),
  ("DARIEN", "WI"),
  ("DARLING", "MS"),
  ("DARLINGTON", "SC"),
  ("DARLINGTON", "WI"),
  ("DARLINGTON", "MD"),
  ("DARLINGTON", "MO"),
  ("DARLINGTON", "IN"),
  ("DARLINGTON", "PA"),
  ("DARMSTADT", "IN"),
  ("DARMSTADT", "IL"),
  ("DARNESTOWN", "MD"),
  ("DARRINGTON", "WA"),
  ("DARROUZETT", "TX"),
  ("DARRTOWN", "OH"),
  ("DARWIN", "MN"),
  ("DARWIN", "CA"),
  ("DASH POINT", "WA"),
  ("DASHER", "GA"),
  ("DASSEL", "MN"),
  ("DATELAND", "AZ"),
  ("DATIL", "NM"),
  ("DATTO", "AR"),
  ("DAUBERVILLE", "PA"),
  ("DAUPHIN", "PA"),
  ("DAUPHIN ISLAND", "AL"),
  ("DAVENPORT", "IA"),
  ("DAVENPORT", "FL"),
  ("DAVENPORT", "CA"),
  ("DAVENPORT", "WA"),
  ("DAVENPORT", "OK"),
  ("DAVENPORT", "NE"),
  ("DAVENPORT", "ND"),
  ("DAVENPORT CENTER", "NY"),
  ("DAVEY", "NE"),
  ("DAVID CITY", "NE"),
  ("DAVIDSON", "NC"),
  ("DAVIDSON", "OK"),
  ("DAVIDSVILLE", "PA"),
  ("DAVIE", "FL"),
  ("DAVIS", "OK"),
  ("DAVIS", "CA"),
  ("DAVIS", "NC"),
  ("DAVIS", "WV"),
  ("DAVIS", "SD"),
  ("DAVIS", "IL"),
  ("DAVIS CITY", "IA"),
  ("DAVIS JUNCTION", "IL"),
  ("DAVISBORO", "GA"),
  ("DAVISON", "MI"),
  ("DAVISTON", "AL"),
  ("DAVY", "WV"),
  ("DAWN", "MO"),
  ("DAWSON", "GA"),
  ("DAWSON", "TX"),
  ("DAWSON", "MN"),
  ("DAWSON", "IL"),
  ("DAWSON", "MD"),
  ("DAWSON", "IA"),
  ("DAWSON", "ND"),
  ("DAWSON", "NE"),
  ("DAWSON", "PA"),
  ("DAWSON SPRINGS", "KY"),
  ("DAWSONVILLE", "GA"),
  ("DAY", "FL"),
  ("DAY HEIGHTS", "OH"),
  ("DAY VALLEY", "CA"),
  ("DAYKIN", "NE"),
  ("DAYS CREEK", "OR"),
  ("DAYTON", "OH"),
  ("DAYTON", "NV"),
  ("DAYTON", "MN"),
  ("DAYTON", "TX"),
  ("DAYTON", "TN"),
  ("DAYTON", "ID"),
  ("DAYTON", "IL"),
  ("DAYTON", "NJ"),
  ("DAYTON", "WA"),
  ("DAYTON", "KY"),
  ("DAYTON", "IN"),
  ("DAYTON", "VA"),
  ("DAYTON", "AL"),
  ("DAYTON", "IA"),
  ("DAYTON", "OR"),
  ("DAYTON", "MT"),
  ("DAYTON", "WY"),
  ("DAYTON", "PA"),
  ("DAYTON LAKES", "TX"),
  ("DAYTONA BEACH", "FL"),
  ("DAYTONA BEACH SHORES", "FL"),
  ("DAYVILLE", "OR"),
  ("DAZEY", "ND"),
  ("DE BEQUE", "CO"),
  ("DE BORGIA", "MT"),
  ("DE FUNIAK SPRINGS", "FL"),
  ("DE GRAFF", "OH"),
  ("DE GRAFF", "MN"),
  ("DE KALB", "MS"),
  ("DE KALB", "TX"),
  ("DE KALB", "MO"),
  ("DE LAMERE", "ND"),
  ("DE LAND", "IL"),
  ("DE LEON", "TX"),
  ("DE LEON SPRINGS", "FL"),
  ("DE MOTTE", "IN"),
  ("DE PERE", "WI"),
  ("DE PUE", "IL"),
  ("DE QUEEN", "AR"),
  ("DE SMET", "SD"),
  ("DE SMET", "ID"),
  ("DE SOTO", "KS"),
  ("DE SOTO", "MO"),
  ("DE SOTO", "IA"),
  ("DE SOTO", "WI"),
  ("DE SOTO", "IL"),
  ("DE SOTO", "GA"),
  ("DE TOUR VILLAGE", "MI"),
  ("DE VALLS BLUFF", "AR"),
  ("DE WITT", "IA"),
  ("DE WITT", "NE"),
  ("DE WITT", "IL"),
  ("DE WITT", "MO"),
  ("DEADWOOD", "SD"),
  ("DEAL", "NJ"),
  ("DEAL ISLAND", "MD"),
  ("DEALE", "MD"),
  ("DEAN", "TX"),
  ("DEARBORN", "MI"),
  ("DEARBORN", "MO"),
  ("DEARBORN HEIGHTS", "MI"),
  ("DEARING", "KS"),
  ("DEARING", "GA"),
  ("DEARY", "ID"),
  ("DEATSVILLE", "AL"),
  ("DEAVER", "WY"),
  ("DEBARY", "FL"),
  ("DECATUR", "AL"),
  ("DECATUR", "IL"),
  ("DECATUR", "TX"),
  ("DECATUR", "IN"),
  ("DECATUR", "MS"),
  ("DECATUR", "AR"),
  ("DECATUR", "GA"),
  ("DECATUR", "TN"),
  ("DECATUR", "MI"),
  ("DECATUR", "NE"),
  ("DECATUR CITY", "IA"),
  ("DECATURVILLE", "TN"),
  ("DECHERD", "TN"),
  ("DECKER", "IN"),
  ("DECKERVILLE", "MI"),
  ("DECLO", "ID"),
  ("DECORAH", "IA"),
  ("DECORDOVA", "TX"),
  ("DEDHAM", "MA"),
  ("DEDHAM", "IA"),
  ("DEEMSTON", "PA"),
  ("DEENWOOD", "GA"),
  ("DEEP CREEK", "VA"),
  ("DEEP RIVER", "WA"),
  ("DEEP RIVER", "IA"),
  ("DEEP RIVER CENTER", "CT"),
  ("DEEP WATER", "WV"),
  ("DEEPHAVEN", "MN"),
  ("DEEPSTEP", "GA"),
  ("DEEPWATER", "MO"),
  ("DEER CREEK", "MN"),
  ("DEER CREEK", "AZ"),
  ("DEER CREEK", "IL"),
  ("DEER CREEK", "OK"),
  ("DEER GROVE", "IL"),
  ("DEER ISLAND", "OR"),
  ("DEER LAKE", "PA"),
  ("DEER LAKE", "PA"),
  ("DEER LICK", "OK"),
  ("DEER LODGE", "MT"),
  ("DEER PARK", "TX"),
  ("DEER PARK", "WA"),
  ("DEER PARK", "NY"),
  ("DEER PARK", "CA"),
  ("DEER PARK", "IL"),
  ("DEER PARK", "AL"),
  ("DEER PARK", "MD"),
  ("DEER PARK", "WI"),
  ("DEER PARK", "OH"),
  ("DEER RIVER", "MN"),
  ("DEER TRAIL", "CO"),
  ("DEERCROFT", "NC"),
  ("DEERFIELD", "IL"),
  ("DEERFIELD", "VA"),
  ("DEERFIELD", "WI"),
  ("DEERFIELD", "MA"),
  ("DEERFIELD", "MI"),
  ("DEERFIELD", "KS"),
  ("DEERFIELD", "MO"),
  ("DEERFIELD BEACH", "FL"),
  ("DEERING", "AK"),
  ("DEERING", "ND"),
  ("DEERSVILLE", "OH"),
  ("DEERWOOD", "MN"),
  ("DEFERIET", "NY"),
  ("DEFIANCE", "OH"),
  ("DEFIANCE", "MO"),
  ("DEFIANCE", "IA"),
  ("DEFIANCE", "PA"),
  ("DEFOREST", "WI"),
  ("DEKALB", "IL"),
  ("DEKALB JUNCTION", "NY"),
  ("DEL AIRE", "CA"),
  ("DEL CITY", "OK"),
  ("DEL MAR", "CA"),
  ("DEL MAR HEIGHTS", "TX"),
  ("DEL MONTE FOREST", "CA"),
  ("DEL MUERTO", "AZ"),
  ("DEL NORTE", "CO"),
  ("DEL REY", "CA"),
  ("DEL REY OAKS", "CA"),
  ("DEL RIO", "TX"),
  ("DEL RIO", "CA"),
  ("DEL SOL", "TX"),
  ("DELAFIELD", "WI"),
  ("DELAND", "FL"),
  ("DELAND SOUTHWEST", "FL"),
  ("DELANO", "CA"),
  ("DELANO", "MN"),
  ("DELANO", "PA"),
  ("DELANSON", "NY"),
  ("DELAPLAINE", "AR"),
  ("DELAVAN", "WI"),
  ("DELAVAN", "MN"),
  ("DELAVAN", "IL"),
  ("DELAVAN LAKE", "WI"),
  ("DELAWARE", "OH"),
  ("DELAWARE", "IA"),
  ("DELAWARE", "OK"),
  ("DELAWARE", "NJ"),
  ("DELAWARE CITY", "DE"),
  ("DELAWARE PARK", "NJ"),
  ("DELAWARE WATER GAP", "PA"),
  ("DELBARTON", "WV"),
  ("DELCAMBRE", "LA"),
  ("DELCO", "NC"),
  ("DELEVAN", "NY"),
  ("DELFT COLONY", "CA"),
  ("DELHI", "CA"),
  ("DELHI", "NY"),
  ("DELHI", "LA"),
  ("DELHI", "IA"),
  ("DELHI", "MN"),
  ("DELHI HILLS", "OH"),
  ("DELIA", "KS"),
  ("DELIGHT", "AR"),
  ("DELISLE", "MS"),
  ("DELL", "AR"),
  ("DELL CITY", "TX"),
  ("DELL RAPIDS", "SD"),
  ("DELLEKER", "CA"),
  ("DELLROY", "OH"),
  ("DELLVIEW", "NC"),
  ("DELLWOOD", "MN"),
  ("DELLWOOD", "MO"),
  ("DELMAR", "DE"),
  ("DELMAR", "MD"),
  ("DELMAR", "IA"),
  ("DELMITA", "TX"),
  ("DELMONT", "PA"),
  ("DELMONT", "SD"),
  ("DELOIT", "IA"),
  ("DELPHI", "IN"),
  ("DELPHOS", "OH"),
  ("DELPHOS", "KS"),
  ("DELPHOS", "IA"),
  ("DELRAY BEACH", "FL"),
  ("DELSHIRE", "OH"),
  ("DELTA", "CO"),
  ("DELTA", "AL"),
  ("DELTA", "UT"),
  ("DELTA", "LA"),
  ("DELTA", "OH"),
  ("DELTA", "IA"),
  ("DELTA", "MO"),
  ("DELTA", "PA"),
  ("DELTA JUNCTION", "AK"),
  ("DELTANA", "AK"),
  ("DELTAVILLE", "VA"),
  ("DELTON", "MI"),
  ("DELTONA", "FL"),
  ("DELWAY", "NC"),
  ("DELWOOD", "WI"),
  ("DEMAREST", "NJ"),
  ("DEMING", "NM"),
  ("DEMING", "WA"),
  ("DEMOPOLIS", "AL"),
  ("DEMOREST", "GA"),
  ("DENAIR", "CA"),
  ("DENDRON", "VA"),
  ("DENHAM", "MN"),
  ("DENHAM SPRINGS", "LA"),
  ("DENHOFF", "ND"),
  ("DENIO", "NV"),
  ("DENISON", "TX"),
  ("DENISON", "IA"),
  ("DENISON", "KS"),
  ("DENMARK", "SC"),
  ("DENMARK", "WI"),
  ("DENMARK", "IA"),
  ("DENNARD", "AR"),
  ("DENNEHOTSO", "AZ"),
  ("DENNING", "AR"),
  ("DENNIS", "MA"),
  ("DENNIS", "OK"),
  ("DENNIS ACRES", "MO"),
  ("DENNIS PORT", "MA"),
  ("DENNISON", "OH"),
  ("DENNISON", "MN"),
  ("DENT", "OH"),
  ("DENT", "MN"),
  ("DENTON", "TX"),
  ("DENTON", "MD"),
  ("DENTON", "NC"),
  ("DENTON", "GA"),
  ("DENTON", "MT"),
  ("DENTON", "KS"),
  ("DENTON", "NE"),
  ("DENTSVILLE", "SC"),
  ("DENVER", "CO"),
  ("DENVER", "NC"),
  ("DENVER", "IA"),
  ("DENVER", "PA"),
  ("DENVER", "MO"),
  ("DENVER", "IN"),
  ("DENVER CITY", "TX"),
  ("DEPAUVILLE", "NY"),
  ("DEPEW", "NY"),
  ("DEPEW", "OK"),
  ("DEPOE BAY", "OR"),
  ("DEPORT", "TX"),
  ("DEPOSIT", "NY"),
  ("DEPUTY", "IN"),
  ("DEQUINCY", "LA"),
  ("DERBY", "KS"),
  ("DERBY", "CT"),
  ("DERBY", "CO"),
  ("DERBY", "OH"),
  ("DERBY", "IA"),
  ("DERBY ACRES", "CA"),
  ("DERBY CENTER", "VT"),
  ("DERBY LINE", "VT"),
  ("DERIDDER", "LA"),
  ("DERING HARBOR", "NY"),
  ("DERMA", "MS"),
  ("DERMOTT", "AR"),
  ("DERRY", "NH"),
  ("DERRY", "PA"),
  ("DERUYTER", "NY"),
  ("DERWOOD", "MD"),
  ("DES ALLEMANDS", "LA"),
  ("DES ARC", "AR"),
  ("DES ARC", "MO"),
  ("DES LACS", "ND"),
  ("DES MOINES", "IA"),
  ("DES MOINES", "WA"),
  ("DES MOINES", "NM"),
  ("DES PERES", "MO"),
  ("DES PLAINES", "IL"),
  ("DESALES UNIVERSITY", "PA"),
  ("DESCANSO", "CA"),
  ("DESCHUTES RIVER WOODS", "OR"),
  ("DESERET", "UT"),
  ("DESERT AIRE", "WA"),
  ("DESERT CENTER", "CA"),
  ("DESERT EDGE", "CA"),
  ("DESERT HILLS", "AZ"),
  ("DESERT HOT SPRINGS", "CA"),
  ("DESERT PALMS", "CA"),
  ("DESERT SHORES", "CA"),
  ("DESERT VIEW HIGHLANDS", "CA"),
  ("DESHLER", "OH"),
  ("DESHLER", "NE"),
  ("DESLOGE", "MO"),
  ("DESOTO", "TX"),
  ("DESOTO LAKES", "FL"),
  ("DESPARD", "WV"),
  ("DESTIN", "FL"),
  ("DESTREHAN", "LA"),
  ("DETMOLD", "MD"),
  ("DETROIT", "MI"),
  ("DETROIT", "TX"),
  ("DETROIT", "AL"),
  ("DETROIT", "OR"),
  ("DETROIT", "KS"),
  ("DETROIT", "IL"),
  ("DETROIT BEACH", "MI"),
  ("DETROIT LAKES", "MN"),
  ("DEVENS", "MA"),
  ("DEVERS", "TX"),
  ("DEVILLE", "LA"),
  ("DEVILS LAKE", "ND"),
  ("DEVINE", "TX"),
  ("DEVOL", "OK"),
  ("DEVOLA", "OH"),
  ("DEVON", "PA"),
  ("DEWAR", "OK"),
  ("DEWART", "PA"),
  ("DEWEESE", "NE"),
  ("DEWEY", "OK"),
  ("DEWEY BEACH", "DE"),
  ("DEWEY-HUMBOLDT", "AZ"),
  ("DEWEYVILLE", "TX"),
  ("DEWEYVILLE", "UT"),
  ("DEWITT", "AR"),
  ("DEWITT", "MI"),
  ("DEWY ROSE", "GA"),
  ("DEXTER", "MO"),
  ("DEXTER", "ME"),
  ("DEXTER", "IA"),
  ("DEXTER", "MI"),
  ("DEXTER", "MN"),
  ("DEXTER", "GA"),
  ("DEXTER", "NM"),
  ("DEXTER", "NY"),
  ("DEXTER", "KY"),
  ("DEXTER", "KS"),
  ("DEXTER CITY", "OH"),
  ("D'HANIS", "TX"),
  ("DIABLO", "CA"),
  ("DIABLO GRANDE", "CA"),
  ("DIABLOCK", "KY"),
  ("DIAGONAL", "IA"),
  ("DIAMOND", "IL"),
  ("DIAMOND", "MO"),
  ("DIAMOND BAR", "CA"),
  ("DIAMOND BEACH", "NJ"),
  ("DIAMOND BLUFF", "WI"),
  ("DIAMOND CITY", "AR"),
  ("DIAMOND RIDGE", "AK"),
  ("DIAMOND SPRINGS", "CA"),
  ("DIAMONDHEAD", "MS"),
  ("DIAMONDHEAD LAKE", "IA"),
  ("DIAMONDVILLE", "WY"),
  ("DIAPERVILLE", "WI"),
  ("DIAZ", "AR"),
  ("DIBBLE", "OK"),
  ("D'IBERVILLE", "MS"),
  ("DIBOLL", "TX"),
  ("DICKENS", "TX"),
  ("DICKENS", "IA"),
  ("DICKERSON CITY", "FL"),
  ("DICKEY", "ND"),
  ("DICKEYVILLE", "WI"),
  ("DICKINSON", "ND"),
  ("DICKINSON", "TX"),
  ("DICKSON", "TN"),
  ("DICKSON", "OK"),
  ("DICKSON CITY", "PA"),
  ("DICKSONVILLE", "PA"),
  ("DIEHLSTADT", "MO"),
  ("DIERKS", "AR"),
  ("DIETERICH", "IL"),
  ("DIETRICH", "ID"),
  ("DIGGINS", "MO"),
  ("DIGHTON", "KS"),
  ("DIKE", "IA"),
  ("DILKON", "AZ"),
  ("DILL CITY", "OK"),
  ("DILLARD", "GA"),
  ("DILLARD", "OR"),
  ("DILLER", "NE"),
  ("DILLEY", "TX"),
  ("DILLINGHAM", "AK"),
  ("DILLON", "SC"),
  ("DILLON", "MT"),
  ("DILLON", "CO"),
  ("DILLON BEACH", "CA"),
  ("DILLONVALE", "OH"),
  ("DILLONVALE", "OH"),
  ("DILLSBORO", "IN"),
  ("DILLSBORO", "NC"),
  ("DILLSBURG", "PA"),
  ("DILLWYN", "VA"),
  ("DILWORTH", "MN"),
  ("DIMMITT", "TX"),
  ("DIMOCK", "SD"),
  ("DIMONDALE", "MI"),
  ("DINOSAUR", "CO"),
  ("DINUBA", "CA"),
  ("DIOMEDE", "AK"),
  ("DISAUTEL", "WA"),
  ("DISCOVERY BAY", "CA"),
  ("DISCOVERY HARBOUR", "HI"),
  ("DISH", "TX"),
  ("DISNEY", "OK"),
  ("DISTRICT HEIGHTS", "MD"),
  ("DIVERNON", "IL"),
  ("DIVIDE", "CO"),
  ("DIX", "IL"),
  ("DIX", "NE"),
  ("DIX HILLS", "NY"),
  ("DIXFIELD", "ME"),
  ("DIXIE", "WV"),
  ("DIXIE", "WA"),
  ("DIXIE INN", "LA"),
  ("DIXMOOR", "IL"),
  ("DIXON", "NM"),
  ("DIXON", "IL"),
  ("DIXON", "CA"),
  ("DIXON", "MT"),
  ("DIXON", "KY"),
  ("DIXON", "MO"),
  ("DIXON", "NE"),
  ("DIXON", "IA"),
  ("DIXON", "WY"),
  ("DIXON LANE-MEADOW CREEK", "CA"),
  ("DIXONVILLE", "FL"),
  ("D'LO", "MS"),
  ("DOBBINS", "CA"),
  ("DOBBINS HEIGHTS", "NC"),
  ("DOBBS FERRY", "NY"),
  ("DOBSON", "NC"),
  ("DOCK JUNCTION", "GA"),
  ("DOCTOR PHILLIPS", "FL"),
  ("DODD CITY", "TX"),
  ("DODDSVILLE", "MS"),
  ("DODGE", "OK"),
  ("DODGE", "ND"),
  ("DODGE", "WI"),
  ("DODGE", "NE"),
  ("DODGE CENTER", "MN"),
  ("DODGE CITY", "KS"),
  ("DODGE CITY", "AL"),
  ("DODGEVILLE", "WI"),
  ("DODSON", "LA"),
  ("DODSON", "TX"),
  ("DODSON", "MT"),
  ("DODSON BRANCH", "TN"),
  ("DOE RUN", "MO"),
  ("DOE VALLEY", "KY"),
  ("DOERUN", "GA"),
  ("DOFFING", "TX"),
  ("DOGTOWN", "CA"),
  ("DOLA", "OH"),
  ("DOLAN SPRINGS", "AZ"),
  ("DOLAND", "SD"),
  ("DOLGEVILLE", "NY"),
  ("DOLLAR BAY", "MI"),
  ("DOLLAR POINT", "CA"),
  ("DOLLARS CORNER", "WA"),
  ("DOLLIVER", "IA"),
  ("DOLORES", "CO"),
  ("DOLTON", "IL"),
  ("DOLTON", "SD"),
  ("DOMINO", "TX"),
  ("DONAHUE", "IA"),
  ("DONALD", "WA"),
  ("DONALD", "OR"),
  ("DONALDS", "SC"),
  ("DONALDSON", "MN"),
  ("DONALDSON", "AR"),
  ("DONALDSON", "PA"),
  ("DONALDSONVILLE", "LA"),
  ("DONALSONVILLE", "GA"),
  ("DONEGAL", "PA"),
  ("DONEY PARK", "AZ"),
  ("DONGOLA", "IL"),
  ("DONIPHAN", "MO"),
  ("DONIPHAN", "NE"),
  ("DONNA", "TX"),
  ("DONNELLSON", "IA"),
  ("DONNELLSON", "IL"),
  ("DONNELLY", "MN"),
  ("DONNELLY", "ID"),
  ("DONNELSVILLE", "OH"),
  ("DONNYBROOK", "ND"),
  ("DONORA", "PA"),
  ("DONOVAN", "IL"),
  ("DONOVAN ESTATES", "AZ"),
  ("DOÒA ANA", "NM"),
  ("DOOLING", "GA"),
  ("DOOLITTLE", "TX"),
  ("DOOLITTLE", "MO"),
  ("DOOMS", "VA"),
  ("DOON", "IA"),
  ("DORA", "AL"),
  ("DORA", "NM"),
  ("DORADO", "PR"),
  ("DORAL", "FL"),
  ("DORAN", "MN"),
  ("DORAVILLE", "GA"),
  ("DORCHESTER", "TX"),
  ("DORCHESTER", "WI"),
  ("DORCHESTER", "IL"),
  ("DORCHESTER", "NE"),
  ("DORMONT", "PA"),
  ("DORNEYVILLE", "PA"),
  ("DORRANCE", "KS"),
  ("DORRINGTON", "CA"),
  ("DORRIS", "CA"),
  ("DORSET", "VT"),
  ("DORTCHES", "NC"),
  ("DOS PALOS", "CA"),
  ("DOS PALOS Y", "CA"),
  ("DOT LAKE", "AK"),
  ("DOT LAKE VILLAGE", "AK"),
  ("DOTHAN", "AL"),
  ("DOTSERO", "CO"),
  ("DOTYVILLE", "OK"),
  ("DOUBLE OAK", "TX"),
  ("DOUBLE SPRING", "NV"),
  ("DOUBLE SPRINGS", "AL"),
  ("DOUDS", "IA"),
  ("DOUGHERTY", "IA"),
  ("DOUGHERTY", "OK"),
  ("DOUGLAS", "GA"),
  ("DOUGLAS", "AZ"),
  ("DOUGLAS", "WY"),
  ("DOUGLAS", "AL"),
  ("DOUGLAS", "MI"),
  ("DOUGLAS", "ND"),
  ("DOUGLAS", "NE"),
  ("DOUGLAS", "OK"),
  ("DOUGLAS CITY", "CA"),
  ("DOUGLASS", "KS"),
  ("DOUGLASS HILLS", "KY"),
  ("DOUGLASSVILLE", "TX"),
  ("DOUGLASSVILLE", "PA"),
  ("DOUGLASVILLE", "GA"),
  ("DOUSMAN", "WI"),
  ("DOVE CREEK", "CO"),
  ("DOVE VALLEY", "CO"),
  ("DOVER", "NH"),
  ("DOVER", "DE"),
  ("DOVER", "OH"),
  ("DOVER", "MA"),
  ("DOVER", "TN"),
  ("DOVER", "ID"),
  ("DOVER", "AR"),
  ("DOVER", "NJ"),
  ("DOVER", "FL"),
  ("DOVER", "MN"),
  ("DOVER", "NC"),
  ("DOVER", "PA"),
  ("DOVER", "KY"),
  ("DOVER", "OK"),
  ("DOVER", "IL"),
  ("DOVER", "MO"),
  ("DOVER BASE HOUSING", "DE"),
  ("DOVER BEACHES NORTH", "NJ"),
  ("DOVER BEACHES SOUTH", "NJ"),
  ("DOVER HILL", "IN"),
  ("DOVER PLAINS", "NY"),
  ("DOVER-FOXCROFT", "ME"),
  ("DOVRAY", "MN"),
  ("DOW CITY", "IA"),
  ("DOWAGIAC", "MI"),
  ("DOWELL", "IL"),
  ("DOWELLTOWN", "TN"),
  ("DOWLING", "MI"),
  ("DOWNERS GROVE", "IL"),
  ("DOWNEY", "CA"),
  ("DOWNEY", "ID"),
  ("DOWNIEVILLE", "CA"),
  ("DOWNIEVILLE-LAWSON-DUMONT", "CO"),
  ("DOWNING", "WI"),
  ("DOWNING", "MO"),
  ("DOWNINGTOWN", "PA"),
  ("DOWNS", "IL"),
  ("DOWNS", "KS"),
  ("DOWNSVILLE", "NY"),
  ("DOWNSVILLE", "WI"),
  ("DOWNSVILLE", "LA"),
  ("DOWNSVILLE", "MD"),
  ("DOWS", "IA"),
  ("DOYLE", "CA"),
  ("DOYLE", "TN"),
  ("DOYLE", "TX"),
  ("DOYLESTOWN", "WI"),
  ("DOYLESTOWN", "PA"),
  ("DOYLESTOWN", "OH"),
  ("DOYLINE", "LA"),
  ("DOZIER", "AL"),
  ("DRAGOON", "AZ"),
  ("DRAIN", "OR"),
  ("DRAKE", "ND"),
  ("DRAKES BRANCH", "VA"),
  ("DRAKESBORO", "KY"),
  ("DRAKESVILLE", "IA"),
  ("DRANESVILLE", "VA"),
  ("DRAPER", "UT"),
  ("DRAPER", "VA"),
  ("DRAPER", "SD"),
  ("DRAVOSBURG", "PA"),
  ("DRAYTON", "ND"),
  ("DRESDEN", "TN"),
  ("DRESDEN", "OH"),
  ("DRESDEN", "KS"),
  ("DRESDEN", "NY"),
  ("DRESSER", "WI"),
  ("DRESSER", "IN"),
  ("DREW", "MS"),
  ("DREXEL", "MO"),
  ("DREXEL", "OH"),
  ("DREXEL", "NC"),
  ("DREXEL HEIGHTS", "AZ"),
  ("DREXEL HILL", "PA"),
  ("DRIFTWOOD", "PA"),
  ("DRIFTWOOD", "TX"),
  ("DRIGGS", "ID"),
  ("DRIPPING SPRINGS", "AZ"),
  ("DRIPPING SPRINGS", "TX"),
  ("DRIPPING SPRINGS", "OK"),
  ("DRISCOLL", "TX"),
  ("DRISCOLL", "ND"),
  ("DROWNING CREEK", "OK"),
  ("DRUID HILLS", "GA"),
  ("DRUID HILLS", "KY"),
  ("DRUM POINT", "MD"),
  ("DRUMMOND", "WI"),
  ("DRUMMOND", "MT"),
  ("DRUMMOND", "OK"),
  ("DRUMMOND", "ID"),
  ("DRUMRIGHT", "OK"),
  ("DRY CREEK", "AK"),
  ("DRY CREEK", "OK"),
  ("DRY PRONG", "LA"),
  ("DRY RIDGE", "KY"),
  ("DRY RIDGE", "OH"),
  ("DRY RUN", "OH"),
  ("DRY TAVERN", "PA"),
  ("DRY VALLEY", "NV"),
  ("DRYDEN", "VA"),
  ("DRYDEN", "NY"),
  ("DRYDEN", "MI"),
  ("DRYSDALE", "AZ"),
  ("DRYTOWN", "CA"),
  ("DRYVILLE", "PA"),
  ("DU BOIS", "IL"),
  ("DU BOIS", "NE"),
  ("DU PONT", "GA"),
  ("DU QUOIN", "IL"),
  ("DUANE LAKE", "NY"),
  ("DUANESBURG", "NY"),
  ("DUARTE", "CA"),
  ("DUBACH", "LA"),
  ("DUBBERLY", "LA"),
  ("DUBLIN", "OH"),
  ("DUBLIN", "GA"),
  ("DUBLIN", "CA"),
  ("DUBLIN", "TX"),
  ("DUBLIN", "VA"),
  ("DUBLIN", "PA"),
  ("DUBLIN", "IN"),
  ("DUBLIN", "NC"),
  ("DUBOIS", "WY"),
  ("DUBOIS", "PA"),
  ("DUBOIS", "ID"),
  ("DUBOIS", "IN"),
  ("DUBOISTOWN", "PA"),
  ("DUBUQUE", "IA"),
  ("DUCHESNE", "UT"),
  ("DUCHESS LANDING", "OK"),
  ("DUCK", "NC"),
  ("DUCK HILL", "MS"),
  ("DUCK KEY", "FL"),
  ("DUCKTOWN", "TN"),
  ("DUCOR", "CA"),
  ("DUDLEY", "GA"),
  ("DUDLEY", "MO"),
  ("DUDLEY", "PA"),
  ("DUDLEYVILLE", "AZ"),
  ("DUE WEST", "SC"),
  ("DUENWEG", "MO"),
  ("DUFFIELD", "VA"),
  ("DUFUR", "OR"),
  ("DUGGER", "IN"),
  ("DUGWAY", "UT"),
  ("DULAC", "LA"),
  ("DULCE", "NM"),
  ("DULLES TOWN CENTER", "VA"),
  ("DULUTH", "MN"),
  ("DULUTH", "GA"),
  ("DULUTH", "WA"),
  ("DUMAS", "TX"),
  ("DUMAS", "MS"),
  ("DUMAS", "AR"),
  ("DUMBARTON", "VA"),
  ("DUMFRIES", "VA"),
  ("DUMONT", "NJ"),
  ("DUMONT", "IA"),
  ("DUMONT", "MN"),
  ("DUNBAR", "WV"),
  ("DUNBAR", "WI"),
  ("DUNBAR", "PA"),
  ("DUNBAR", "NE"),
  ("DUNCAN", "OK"),
  ("DUNCAN", "SC"),
  ("DUNCAN", "AZ"),
  ("DUNCAN", "MS"),
  ("DUNCAN", "IA"),
  ("DUNCAN", "NE"),
  ("DUNCAN FALLS", "OH"),
  ("DUNCANNON", "PA"),
  ("DUNCANSVILLE", "PA"),
  ("DUNCANVILLE", "TX"),
  ("DUNCOMBE", "IA"),
  ("DUNDALK", "MD"),
  ("DUNDARRACH", "NC"),
  ("DUNDAS", "MN"),
  ("DUNDEE", "FL"),
  ("DUNDEE", "MI"),
  ("DUNDEE", "OR"),
  ("DUNDEE", "NY"),
  ("DUNDEE", "OH"),
  ("DUNDEE", "IA"),
  ("DUNDEE", "MN"),
  ("DUNE ACRES", "IN"),
  ("DUNEAN", "SC"),
  ("DUNEDIN", "FL"),
  ("DUNELLEN", "NJ"),
  ("DUNES CITY", "OR"),
  ("DUNFERMLINE", "IL"),
  ("DUNGANNON", "VA"),
  ("DUNKERTON", "IA"),
  ("DUNKIRK", "MD"),
  ("DUNKIRK", "NY"),
  ("DUNKIRK", "IN"),
  ("DUNKIRK", "OH"),
  ("DUNLAP", "TN"),
  ("DUNLAP", "OH"),
  ("DUNLAP", "IN"),
  ("DUNLAP", "IA"),
  ("DUNLAP", "IL"),
  ("DUNLAP", "KS"),
  ("DUNLEVY", "PA"),
  ("DUNLO", "PA"),
  ("DUNMOR", "KY"),
  ("DUNMORE", "PA"),
  ("DUNN", "NC"),
  ("DUNN CENTER", "ND"),
  ("DUNN LORING", "VA"),
  ("DUNNAVANT", "AL"),
  ("DUNNELL", "MN"),
  ("DUNNELLON", "FL"),
  ("DUNNIGAN", "CA"),
  ("DUNNING", "NE"),
  ("DUNNSTOWN", "PA"),
  ("DUNREITH", "IN"),
  ("DUNSEITH", "ND"),
  ("DUNSMUIR", "CA"),
  ("DUNWOODY", "GA"),
  ("DUPO", "IL"),
  ("DUPONT", "WA"),
  ("DUPONT", "PA"),
  ("DUPONT", "IN"),
  ("DUPONT", "OH"),
  ("DUPREE", "SD"),
  ("DUPUYER", "MT"),
  ("DUQUE", "PR"),
  ("DUQUESNE", "MO"),
  ("DUQUESNE", "PA"),
  ("DURAN", "NM"),
  ("DURAND", "MI"),
  ("DURAND", "WI"),
  ("DURAND", "IL"),
  ("DURANGO", "CO"),
  ("DURANGO", "IA"),
  ("DURANT", "OK"),
  ("DURANT", "MS"),
  ("DURANT", "IA"),
  ("DURBIN", "WV"),
  ("DURHAM", "NC"),
  ("DURHAM", "CA"),
  ("DURHAM", "CT"),
  ("DURHAM", "NH"),
  ("DURHAM", "OR"),
  ("DURHAM", "KS"),
  ("DURHAMVILLE", "NY"),
  ("DURYEA", "PA"),
  ("DUSHORE", "PA"),
  ("DUSON", "LA"),
  ("DUSTIN", "OK"),
  ("DUSTIN ACRES", "CA"),
  ("DUTCH FLAT", "CA"),
  ("DUTCH ISLAND", "GA"),
  ("DUTCH JOHN", "UT"),
  ("DUTCHTOWN", "MO"),
  ("DUTTON", "AL"),
  ("DUTTON", "MT"),
  ("DUVALL", "WA"),
  ("DUXBURY", "MA"),
  ("DWALE", "KY"),
  ("DWIGHT", "IL"),
  ("DWIGHT", "KS"),
  ("DWIGHT", "NE"),
  ("DWIGHT", "ND"),
  ("DWIGHT MISSION", "OK"),
  ("DYCKESVILLE", "WI"),
  ("DYCUSBURG", "KY"),
  ("DYER", "NV"),
  ("DYER", "IN"),
  ("DYER", "AR"),
  ("DYER", "TN"),
  ("DYERSBURG", "TN"),
  ("DYERSVILLE", "IA"),
  ("DYESS", "AR"),
  ("DYSART", "IA"),
  ("EADS", "CO"),
  ("EAGAN", "MN"),
  ("EAGAR", "AZ"),
  ("EAGARVILLE", "IL"),
  ("EAGLE", "ID"),
  ("EAGLE", "CO"),
  ("EAGLE", "WI"),
  ("EAGLE", "AK"),
  ("EAGLE", "NE"),
  ("EAGLE", "MI"),
  ("EAGLE BEND", "MN"),
  ("EAGLE BUTTE", "SD"),
  ("EAGLE CREST", "OR"),
  ("EAGLE GROVE", "IA"),
  ("EAGLE GROVE", "GA"),
  ("EAGLE HARBOR", "MI"),
  ("EAGLE HARBOR", "MD"),
  ("EAGLE LAKE", "ME"),
  ("EAGLE LAKE", "TX"),
  ("EAGLE LAKE", "PA"),
  ("EAGLE LAKE", "WI"),
  ("EAGLE LAKE", "FL"),
  ("EAGLE LAKE", "MN"),
  ("EAGLE MOUNTAIN", "UT"),
  ("EAGLE NEST", "NM"),
  ("EAGLE PASS", "TX"),
  ("EAGLE POINT", "OR"),
  ("EAGLE RIVER", "MI"),
  ("EAGLE RIVER", "WI"),
  ("EAGLE ROCK", "MO"),
  ("EAGLE VILLAGE", "AK"),
  ("EAGLES MERE", "PA"),
  ("EAGLETON VILLAGE", "TN"),
  ("EAGLETOWN", "OK"),
  ("EAGLEVIEW", "PA"),
  ("EAGLEVILLE", "TN"),
  ("EAGLEVILLE", "PA"),
  ("EAGLEVILLE", "MO"),
  ("EAGLEVILLE", "CA"),
  ("EAGLEVILLE", "PA"),
  ("EAKLES MILL", "MD"),
  ("EAKLY", "OK"),
  ("EARL", "NC"),
  ("EARL PARK", "IN"),
  ("EARLE", "AR"),
  ("EARLHAM", "IA"),
  ("EARLIMART", "CA"),
  ("EARLING", "IA"),
  ("EARLINGTON", "KY"),
  ("EARLSBORO", "OK"),
  ("EARLSTON", "PA"),
  ("EARLTON", "KS"),
  ("EARLVILLE", "IL"),
  ("EARLVILLE", "NY"),
  ("EARLVILLE", "IA"),
  ("EARLY", "TX"),
  ("EARLY", "IA"),
  ("EARTH", "TX"),
  ("EASLEY", "SC"),
  ("EAST ALTO BONITO", "TX"),
  ("EAST ALTON", "IL"),
  ("EAST AMANA", "IA"),
  ("EAST ARCADIA", "NC"),
  ("EAST ATLANTIC BEACH", "NY"),
  ("EAST AURORA", "NY"),
  ("EAST AVON", "NY"),
  ("EAST BANGOR", "PA"),
  ("EAST BANK", "WV"),
  ("EAST BARRE", "VT"),
  ("EAST BEND", "NC"),
  ("EAST BERLIN", "PA"),
  ("EAST BERNARD", "TX"),
  ("EAST BERNSTADT", "KY"),
  ("EAST BERWICK", "PA"),
  ("EAST BETHEL", "MN"),
  ("EAST BRADY", "PA"),
  ("EAST BREWTON", "AL"),
  ("EAST BRONSON", "FL"),
  ("EAST BROOKFIELD", "MA"),
  ("EAST BROOKLYN", "CT"),
  ("EAST BROOKLYN", "IL"),
  ("EAST BURKE", "VT"),
  ("EAST BUTLER", "PA"),
  ("EAST CAMDEN", "AR"),
  ("EAST CANTON", "OH"),
  ("EAST CAPE GIRARDEAU", "IL"),
  ("EAST CARBON", "UT"),
  ("EAST CARONDELET", "IL"),
  ("EAST CATHLAMET", "WA"),
  ("EAST CHICAGO", "IN"),
  ("EAST CLEVELAND", "OH"),
  ("EAST CLEVELAND", "TN"),
  ("EAST CONEMAUGH", "PA"),
  ("EAST DAILEY", "WV"),
  ("EAST DENNIS", "MA"),
  ("EAST DOUGLAS", "MA"),
  ("EAST DUBLIN", "GA"),
  ("EAST DUBUQUE", "IL"),
  ("EAST DUKE", "OK"),
  ("EAST DUNDEE", "IL"),
  ("EAST DUNSEITH", "ND"),
  ("EAST EARL", "PA"),
  ("EAST ELLIJAY", "GA"),
  ("EAST END", "AR"),
  ("EAST ENTERPRISE", "IN"),
  ("EAST FAIRVIEW", "ND"),
  ("EAST FALMOUTH", "MA"),
  ("EAST FARMINGDALE", "NY"),
  ("EAST FLAT ROCK", "NC"),
  ("EAST FOOTHILLS", "CA"),
  ("EAST FORK", "AZ"),
  ("EAST FRANKLIN", "NJ"),
  ("EAST FREEDOM", "PA"),
  ("EAST FREEHOLD", "NJ"),
  ("EAST FULTONHAM", "OH"),
  ("EAST GAFFNEY", "SC"),
  ("EAST GALESBURG", "IL"),
  ("EAST GARDEN CITY", "NY"),
  ("EAST GERMANTOWN", "IN"),
  ("EAST GILLESPIE", "IL"),
  ("EAST GLACIER PARK VILLAGE", "MT"),
  ("EAST GLENVILLE", "NY"),
  ("EAST GLOBE", "AZ"),
  ("EAST GRAND FORKS", "MN"),
  ("EAST GRAND RAPIDS", "MI"),
  ("EAST GREENBUSH", "NY"),
  ("EAST GREENVILLE", "PA"),
  ("EAST GRIFFIN", "GA"),
  ("EAST GULL LAKE", "MN"),
  ("EAST HAMPTON", "NY"),
  ("EAST HAMPTON", "CT"),
  ("EAST HAMPTON NORTH", "NY"),
  ("EAST HARTFORD", "CT"),
  ("EAST HARWICH", "MA"),
  ("EAST HAVEN", "CT"),
  ("EAST HAZEL CREST", "IL"),
  ("EAST HELENA", "MT"),
  ("EAST HEMET", "CA"),
  ("EAST HIGHLAND PARK", "VA"),
  ("EAST HILL-MERIDIAN", "WA"),
  ("EAST HILLS", "NY"),
  ("EAST HODGE", "LA"),
  ("EAST HONOLULU", "HI"),
  ("EAST HOPE", "ID"),
  ("EAST ISLIP", "NY"),
  ("EAST ITHACA", "NY"),
  ("EAST JORDAN", "MI"),
  ("EAST KINGSTON", "NY"),
  ("EAST LA MIRADA", "CA"),
  ("EAST LAKE", "FL"),
  ("EAST LAKE-ORIENT PARK", "FL"),
  ("EAST LANSDOWNE", "PA"),
  ("EAST LANSING", "MI"),
  ("EAST LAURINBURG", "NC"),
  ("EAST LEXINGTON", "VA"),
  ("EAST LIBERTY", "OH"),
  ("EAST LIVERPOOL", "OH"),
  ("EAST LOPEZ", "TX"),
  ("EAST LOS ANGELES", "CA"),
  ("EAST LYNNE", "MO"),
  ("EAST MARION", "NY"),
  ("EAST MASSAPEQUA", "NY"),
  ("EAST MCKEESPORT", "PA"),
  ("EAST MEADOW", "NY"),
  ("EAST MERRIMACK", "NH"),
  ("EAST MIDDLEBURY", "VT"),
  ("EAST MILLINOCKET", "ME"),
  ("EAST MILLSTONE", "NJ"),
  ("EAST MILTON", "FL"),
  ("EAST MISSOULA", "MT"),
  ("EAST MOLINE", "IL"),
  ("EAST MONTPELIER", "VT"),
  ("EAST MORICHES", "NY"),
  ("EAST MOUNTAIN", "TX"),
  ("EAST NASSAU", "NY"),
  ("EAST NEW MARKET", "MD"),
  ("EAST NEWARK", "NJ"),
  ("EAST NEWNAN", "GA"),
  ("EAST NICOLAUS", "CA"),
  ("EAST NORTHPORT", "NY"),
  ("EAST NORWICH", "NY"),
  ("EAST OAKDALE", "CA"),
  ("EAST ORANGE", "NJ"),
  ("EAST OROSI", "CA"),
  ("EAST PALATKA", "FL"),
  ("EAST PALESTINE", "OH"),
  ("EAST PALO ALTO", "CA"),
  ("EAST PASADENA", "CA"),
  ("EAST PATCHOGUE", "NY"),
  ("EAST PECOS", "NM"),
  ("EAST PEORIA", "IL"),
  ("EAST PEPPERELL", "MA"),
  ("EAST PERU", "IA"),
  ("EAST PETERSBURG", "PA"),
  ("EAST PITTSBURGH", "PA"),
  ("EAST PLEASANT VIEW", "CO"),
  ("EAST POINT", "GA"),
  ("EAST POINT", "AL"),
  ("EAST PORT ORCHARD", "WA"),
  ("EAST PORTERVILLE", "CA"),
  ("EAST PRAIRIE", "MO"),
  ("EAST PROSPECT", "PA"),
  ("EAST PROVIDENCE", "RI"),
  ("EAST QUINCY", "CA"),
  ("EAST QUOGUE", "NY"),
  ("EAST RANCHO DOMINGUEZ", "CA"),
  ("EAST RANDOLPH", "NY"),
  ("EAST RENTON HIGHLANDS", "WA"),
  ("EAST RICHMOND HEIGHTS", "CA"),
  ("EAST RIDGE", "TN"),
  ("EAST RIVERDALE", "MD"),
  ("EAST ROCHESTER", "NY"),
  ("EAST ROCHESTER", "OH"),
  ("EAST ROCHESTER", "PA"),
  ("EAST ROCKAWAY", "NY"),
  ("EAST ROCKINGHAM", "NC"),
  ("EAST ROCKY HILL", "NJ"),
  ("EAST RUTHERFORD", "NJ"),
  ("EAST RUTHERFORD", "PA"),
  ("EAST SALEM", "PA"),
  ("EAST SAN GABRIEL", "CA"),
  ("EAST SANDWICH", "MA"),
  ("EAST SHORE", "CA"),
  ("EAST SHOREHAM", "NY"),
  ("EAST SIDE", "PA"),
  ("EAST SONORA", "CA"),
  ("EAST SPARTA", "OH"),
  ("EAST SPENCER", "NC"),
  ("EAST ST. LOUIS", "IL"),
  ("EAST STROUDSBURG", "PA"),
  ("EAST SUMTER", "SC"),
  ("EAST SYRACUSE", "NY"),
  ("EAST TAWAKONI", "TX"),
  ("EAST TAWAS", "MI"),
  ("EAST THERMOPOLIS", "WY"),
  ("EAST TROY", "WI"),
  ("EAST TULARE VILLA", "CA"),
  ("EAST UNIONTOWN", "PA"),
  ("EAST VALLEY", "NV"),
  ("EAST VANDERGRIFT", "PA"),
  ("EAST VERDE ESTATES", "AZ"),
  ("EAST WASHINGTON", "PA"),
  ("EAST WENATCHEE", "WA"),
  ("EAST WILLISTON", "FL"),
  ("EAST WILLISTON", "NY"),
  ("EAST YORK", "PA"),
  ("EASTBOROUGH", "KS"),
  ("EASTCHESTER", "NY"),
  ("EASTGATE", "WA"),
  ("EASTHAMPTON TOWN", "MA"),
  ("EASTLAKE", "OH"),
  ("EASTLAKE", "MI"),
  ("EASTLAND", "TX"),
  ("EASTLAWN GARDENS", "PA"),
  ("EASTMAN", "GA"),
  ("EASTMAN", "WI"),
  ("EASTMONT", "WA"),
  ("EASTON", "MD"),
  ("EASTON", "PA"),
  ("EASTON", "WA"),
  ("EASTON", "CA"),
  ("EASTON", "TX"),
  ("EASTON", "MN"),
  ("EASTON", "MO"),
  ("EASTON", "IL"),
  ("EASTON", "KS"),
  ("EASTOVER", "NC"),
  ("EASTOVER", "SC"),
  ("EASTPOINT", "FL"),
  ("EASTPOINTE", "MI"),
  ("EASTPORT", "NY"),
  ("EASTPORT", "ME"),
  ("EASTPORT", "MI"),
  ("EASTVALE", "CA"),
  ("EASTVALE", "PA"),
  ("EASTVIEW", "TN"),
  ("EASTVILLE", "VA"),
  ("EASTWOOD", "LA"),
  ("EASTWOOD", "MI"),
  ("EATON", "OH"),
  ("EATON", "IN"),
  ("EATON", "CO"),
  ("EATON ESTATES", "OH"),
  ("EATON RAPIDS", "MI"),
  ("EATONS NECK", "NY"),
  ("EATONTON", "GA"),
  ("EATONTOWN", "NJ"),
  ("EATONVILLE", "WA"),
  ("EATONVILLE", "FL"),
  ("EAU CLAIRE", "WI"),
  ("EAU CLAIRE", "PA"),
  ("EAU CLAIRE", "MI"),
  ("EBENSBURG", "PA"),
  ("EBONY", "VA"),
  ("EBRO", "FL"),
  ("EBRO", "MN"),
  ("ECCLES", "WV"),
  ("ECHELON", "NJ"),
  ("ECHO", "MN"),
  ("ECHO", "UT"),
  ("ECHO", "OR"),
  ("ECKHART MINES", "MD"),
  ("ECKLEY", "CO"),
  ("ECLECTIC", "AL"),
  ("ECONOMY", "PA"),
  ("ECONOMY", "IN"),
  ("ECORSE", "MI"),
  ("ECRU", "MS"),
  ("ECTOR", "TX"),
  ("EDCOUCH", "TX"),
  ("EDDINGTON", "PA"),
  ("EDDYSTONE", "PA"),
  ("EDDYVILLE", "KY"),
  ("EDDYVILLE", "IA"),
  ("EDDYVILLE", "IL"),
  ("EDDYVILLE", "NE"),
  ("EDEN", "WY"),
  ("EDEN", "NC"),
  ("EDEN", "NY"),
  ("EDEN", "MD"),
  ("EDEN", "UT"),
  ("EDEN", "TX"),
  ("EDEN", "WI"),
  ("EDEN", "MS"),
  ("EDEN", "ID"),
  ("EDEN", "SD"),
  ("EDEN ISLE", "LA"),
  ("EDEN PRAIRIE", "MN"),
  ("EDEN ROC", "HI"),
  ("EDEN VALLEY", "MN"),
  ("EDENBORN", "PA"),
  ("EDENBURG", "PA"),
  ("EDENTON", "NC"),
  ("EDESVILLE", "MD"),
  ("EDGAR", "WI"),
  ("EDGAR", "NE"),
  ("EDGAR", "MT"),
  ("EDGAR SPRINGS", "MO"),
  ("EDGARD", "LA"),
  ("EDGE HILL", "GA"),
  ("EDGECLIFF VILLAGE", "TX"),
  ("EDGEFIELD", "SC"),
  ("EDGEFIELD", "LA"),
  ("EDGELEY", "ND"),
  ("EDGEMERE", "MD"),
  ("EDGEMONT", "SD"),
  ("EDGEMONT", "MD"),
  ("EDGEMONT PARK", "MI"),
  ("EDGEMOOR", "DE"),
  ("EDGERTON", "WI"),
  ("EDGERTON", "KS"),
  ("EDGERTON", "OH"),
  ("EDGERTON", "MN"),
  ("EDGERTON", "MO"),
  ("EDGERTON", "WY"),
  ("EDGEWATER", "FL"),
  ("EDGEWATER", "MD"),
  ("EDGEWATER", "AL"),
  ("EDGEWATER", "NJ"),
  ("EDGEWATER", "CO"),
  ("EDGEWATER ESTATES", "TX"),
  ("EDGEWOOD", "NM"),
  ("EDGEWOOD", "MD"),
  ("EDGEWOOD", "WA"),
  ("EDGEWOOD", "OH"),
  ("EDGEWOOD", "KY"),
  ("EDGEWOOD", "TX"),
  ("EDGEWOOD", "FL"),
  ("EDGEWOOD", "CA"),
  ("EDGEWOOD", "IL"),
  ("EDGEWOOD", "IA"),
  ("EDGEWOOD", "IN"),
  ("EDGEWOOD", "PA"),
  ("EDGEWOOD", "PA"),
  ("EDGEWORTH", "PA"),
  ("EDIE", "PA"),
  ("EDINA", "MN"),
  ("EDINA", "MO"),
  ("EDINBORO", "PA"),
  ("EDINBURG", "TX"),
  ("EDINBURG", "MO"),
  ("EDINBURG", "VA"),
  ("EDINBURG", "IL"),
  ("EDINBURG", "ND"),
  ("EDINBURGH", "IN"),
  ("EDISON", "GA"),
  ("EDISON", "WA"),
  ("EDISON", "OH"),
  ("EDISON", "NE"),
  ("EDISTO", "SC"),
  ("EDISTO BEACH", "SC"),
  ("EDITH ENDAVE", "NM"),
  ("EDMESTON", "NY"),
  ("EDMOND", "OK"),
  ("EDMOND", "KS"),
  ("EDMONDS", "WA"),
  ("EDMONDSON", "AR"),
  ("EDMONSON", "TX"),
  ("EDMONSTON", "MD"),
  ("EDMONTON", "KY"),
  ("EDMORE", "MI"),
  ("EDMORE", "ND"),
  ("EDMUND", "WI"),
  ("EDMUNDSON", "MO"),
  ("EDMUNDSON ACRES", "CA"),
  ("EDNA", "TX"),
  ("EDNA", "CA"),
  ("EDNA", "KS"),
  ("EDNA BAY", "AK"),
  ("EDNEYVILLE", "NC"),
  ("EDOM", "TX"),
  ("EDON", "OH"),
  ("EDROY", "TX"),
  ("EDWARDS", "CO"),
  ("EDWARDS", "MS"),
  ("EDWARDS", "NY"),
  ("EDWARDS AFB", "CA"),
  ("EDWARDSBURG", "MI"),
  ("EDWARDSPORT", "IN"),
  ("EDWARDSVILLE", "IL"),
  ("EDWARDSVILLE", "AL"),
  ("EDWARDSVILLE", "KS"),
  ("EDWARDSVILLE", "PA"),
  ("EEK", "AK"),
  ("EFFIE", "MN"),
  ("EFFINGHAM", "IL"),
  ("EFFINGHAM", "KS"),
  ("EFFORT", "PA"),
  ("EFLAND", "NC"),
  ("EGAN", "LA"),
  ("EGAN", "SD"),
  ("EGEGIK", "AK"),
  ("EGELAND", "ND"),
  ("EGG HARBOR", "WI"),
  ("EGG HARBOR CITY", "NJ"),
  ("EGGERTSVILLE", "NY"),
  ("EGLIN AFB", "FL"),
  ("EGYPT", "AL"),
  ("EGYPT", "PA"),
  ("EGYPT", "AR"),
  ("EGYPT LAKE-LETO", "FL"),
  ("EHRENBERG", "AZ"),
  ("EHRENFELD", "PA"),
  ("EHRHARDT", "SC"),
  ("EIDSON ROAD", "TX"),
  ("EIELSON AFB", "AK"),
  ("EIGHTY FOUR", "PA"),
  ("EITZEN", "MN"),
  ("EKALAKA", "MT"),
  ("EKRON", "KY"),
  ("EKWOK", "AK"),
  ("EL BRAZIL", "TX"),
  ("EL CAJON", "CA"),
  ("EL CAMINO ANGOSTO", "TX"),
  ("EL CAMPO", "TX"),
  ("EL CAPITAN", "AZ"),
  ("EL CASTILLO", "TX"),
  ("EL CENIZO", "TX"),
  ("EL CENIZO", "TX"),
  ("EL CENTRO", "CA"),
  ("EL CERRITO", "CA"),
  ("EL CERRITO", "CA"),
  ("EL CERRO", "NM"),
  ("EL CERRO MISSION", "NM"),
  ("EL CHAPARRAL", "TX"),
  ("EL COMBATE", "PR"),
  ("EL DARA", "IL"),
  ("EL DORADO", "AR"),
  ("EL DORADO", "KS"),
  ("EL DORADO HILLS", "CA"),
  ("EL DORADO SPRINGS", "MO"),
  ("EL DUENDE", "NM"),
  ("EL GRANADA", "CA"),
  ("EL INDIO", "TX"),
  ("EL JEBEL", "CO"),
  ("EL LAGO", "TX"),
  ("EL MANGÛ", "PR"),
  ("EL MESQUITE", "TX"),
  ("EL MIRAGE", "AZ"),
  ("EL MONTE", "CA"),
  ("EL MORO", "CO"),
  ("EL NEGRO", "PR"),
  ("EL NIDO", "CA"),
  ("EL OJO", "PR"),
  ("EL PARAISO", "PR"),
  ("EL PASO", "TX"),
  ("EL PASO", "IL"),
  ("EL PASO DE ROBLES (PASO ROBLES)", "CA"),
  ("EL PORTAL", "CA"),
  ("EL PORTAL", "FL"),
  ("EL PRADO ESTATES", "AZ"),
  ("EL QUIOTE", "TX"),
  ("EL RANCHO", "NM"),
  ("EL RANCHO", "CA"),
  ("EL RANCHO VELA", "TX"),
  ("EL REFUGIO", "TX"),
  ("EL RENO", "OK"),
  ("EL RIO", "CA"),
  ("EL RITO", "NM"),
  ("EL SEGUNDO", "CA"),
  ("EL SOBRANTE", "CA"),
  ("EL SOBRANTE", "CA"),
  ("EL SOCIO", "TX"),
  ("EL TUMBAO", "PR"),
  ("EL VALLE DE ARROYO SECO", "NM"),
  ("EL VERANO", "CA"),
  ("ELAINE", "AR"),
  ("ELAND", "WI"),
  ("ELBA", "AL"),
  ("ELBA", "MN"),
  ("ELBA", "NY"),
  ("ELBA", "NE"),
  ("ELBE", "WA"),
  ("ELBERFELD", "IN"),
  ("ELBERON", "IA"),
  ("ELBERT", "TX"),
  ("ELBERT", "CO"),
  ("ELBERTA", "UT"),
  ("ELBERTA", "AL"),
  ("ELBERTA", "MI"),
  ("ELBERTON", "GA"),
  ("ELBING", "KS"),
  ("ELBOW LAKE", "MN"),
  ("ELBOW LAKE", "MN"),
  ("ELBRIDGE", "NY"),
  ("ELBURN", "IL"),
  ("ELCHO", "WI"),
  ("ELCO", "PA"),
  ("ELDERON", "WI"),
  ("ELDERSBURG", "MD"),
  ("ELDERTON", "PA"),
  ("ELDON", "OK"),
  ("ELDON", "MO"),
  ("ELDON", "IA"),
  ("ELDORA", "IA"),
  ("ELDORA", "CO"),
  ("ELDORADO", "IL"),
  ("ELDORADO", "TX"),
  ("ELDORADO", "OK"),
  ("ELDORADO", "OH"),
  ("ELDORADO", "MD"),
  ("ELDORADO AT SANTA FE", "NM"),
  ("ELDORADO SPRINGS", "CO"),
  ("ELDRED", "PA"),
  ("ELDRED", "IL"),
  ("ELDRIDGE", "IA"),
  ("ELDRIDGE", "AL"),
  ("ELDRIDGE", "CA"),
  ("ELEANOR", "WV"),
  ("ELECTRA", "TX"),
  ("ELECTRIC CITY", "WA"),
  ("ELEELE", "HI"),
  ("ELEPHANT BUTTE", "NM"),
  ("ELEPHANT HEAD", "AZ"),
  ("ELEVA", "WI"),
  ("ELFERS", "FL"),
  ("ELFIN COVE", "AK"),
  ("ELFRIDA", "AZ"),
  ("ELGIN", "IL"),
  ("ELGIN", "AZ"),
  ("ELGIN", "TX"),
  ("ELGIN", "SC"),
  ("ELGIN", "OK"),
  ("ELGIN", "TN"),
  ("ELGIN", "PA"),
  ("ELGIN", "SC"),
  ("ELGIN", "ND"),
  ("ELGIN", "OR"),
  ("ELGIN", "MN"),
  ("ELGIN", "NE"),
  ("ELGIN", "IA"),
  ("ELGIN", "OH"),
  ("ELGIN", "KS"),
  ("ELIAS-FELA SOLIS", "TX"),
  ("ELIDA", "OH"),
  ("ELIDA", "NM"),
  ("ELIM", "AK"),
  ("ELIM", "PA"),
  ("ELIZABETH", "NJ"),
  ("ELIZABETH", "LA"),
  ("ELIZABETH", "CO"),
  ("ELIZABETH", "IL"),
  ("ELIZABETH", "WV"),
  ("ELIZABETH", "MN"),
  ("ELIZABETH", "PA"),
  ("ELIZABETH", "IN"),
  ("ELIZABETH CITY", "NC"),
  ("ELIZABETH LAKE", "CA"),
  ("ELIZABETHTON", "TN"),
  ("ELIZABETHTOWN", "KY"),
  ("ELIZABETHTOWN", "NC"),
  ("ELIZABETHTOWN", "NY"),
  ("ELIZABETHTOWN", "PA"),
  ("ELIZABETHTOWN", "OH"),
  ("ELIZABETHTOWN", "IL"),
  ("ELIZABETHTOWN", "IN"),
  ("ELIZABETHVILLE", "PA"),
  ("ELIZAVILLE", "KY"),
  ("ELK CITY", "OK"),
  ("ELK CITY", "ID"),
  ("ELK CITY", "KS"),
  ("ELK CREEK", "KY"),
  ("ELK CREEK", "CA"),
  ("ELK CREEK", "NE"),
  ("ELK FALLS", "KS"),
  ("ELK GARDEN", "WV"),
  ("ELK GROVE", "CA"),
  ("ELK GROVE VILLAGE", "IL"),
  ("ELK HORN", "IA"),
  ("ELK MOUND", "WI"),
  ("ELK MOUNTAIN", "WY"),
  ("ELK PARK", "NC"),
  ("ELK PLAIN", "WA"),
  ("ELK POINT", "SD"),
  ("ELK RAPIDS", "MI"),
  ("ELK RIDGE", "UT"),
  ("ELK RIVER", "MN"),
  ("ELK RIVER", "ID"),
  ("ELK RUN HEIGHTS", "IA"),
  ("ELKADER", "IA"),
  ("ELKHART", "IN"),
  ("ELKHART", "KS"),
  ("ELKHART", "IA"),
  ("ELKHART", "TX"),
  ("ELKHART", "IL"),
  ("ELKHART LAKE", "WI"),
  ("ELKHORN", "WI"),
  ("ELKHORN", "MT"),
  ("ELKHORN", "CA"),
  ("ELKHORN CITY", "KY"),
  ("ELKIN", "NC"),
  ("ELKINS", "AR"),
  ("ELKINS", "WV"),
  ("ELKLAND", "PA"),
  ("ELKMONT", "AL"),
  ("ELKO", "NV"),
  ("ELKO", "SC"),
  ("ELKO NEW MARKET", "MN"),
  ("ELKPORT", "IA"),
  ("ELKRIDGE", "MD"),
  ("ELKTON", "MD"),
  ("ELKTON", "VA"),
  ("ELKTON", "KY"),
  ("ELKTON", "TN"),
  ("ELKTON", "SD"),
  ("ELKTON", "MN"),
  ("ELKTON", "MI"),
  ("ELKTON", "OR"),
  ("ELKVIEW", "WV"),
  ("ELKVILLE", "IL"),
  ("ELLAVILLE", "GA"),
  ("ELLENBORO", "NC"),
  ("ELLENBORO", "WV"),
  ("ELLENDALE", "ND"),
  ("ELLENDALE", "MN"),
  ("ELLENDALE", "DE"),
  ("ELLENSBURG", "WA"),
  ("ELLENTON", "FL"),
  ("ELLENTON", "GA"),
  ("ELLENVILLE", "NY"),
  ("ELLERBE", "NC"),
  ("ELLERSLIE", "MD"),
  ("ELLETTSVILLE", "IN"),
  ("ELLICOTT", "CO"),
  ("ELLICOTT CITY", "MD"),
  ("ELLICOTTVILLE", "NY"),
  ("ELLIJAY", "GA"),
  ("ELLINGTON", "MO"),
  ("ELLINWOOD", "KS"),
  ("ELLIOTT", "MS"),
  ("ELLIOTT", "IL"),
  ("ELLIOTT", "IA"),
  ("ELLIOTT", "MD"),
  ("ELLIOTT", "ND"),
  ("ELLIS", "KS"),
  ("ELLIS GROVE", "IL"),
  ("ELLISBURG", "NY"),
  ("ELLISBURG", "NJ"),
  ("ELLISON BAY", "WI"),
  ("ELLISTON", "MT"),
  ("ELLISTON", "VA"),
  ("ELLISVILLE", "MS"),
  ("ELLISVILLE", "MO"),
  ("ELLISVILLE", "IL"),
  ("ELLOREE", "SC"),
  ("ELLPORT", "PA"),
  ("ELLSINORE", "MO"),
  ("ELLSTON", "IA"),
  ("ELLSWORTH", "ME"),
  ("ELLSWORTH", "WI"),
  ("ELLSWORTH", "KS"),
  ("ELLSWORTH", "IA"),
  ("ELLSWORTH", "PA"),
  ("ELLSWORTH", "MI"),
  ("ELLSWORTH", "MN"),
  ("ELLSWORTH", "IL"),
  ("ELLWOOD CITY", "PA"),
  ("ELM CITY", "NC"),
  ("ELM CREEK", "TX"),
  ("ELM CREEK", "NE"),
  ("ELM GROVE", "WI"),
  ("ELM GROVE", "OK"),
  ("ELM SPRINGS", "AR"),
  ("ELMA", "WA"),
  ("ELMA", "IA"),
  ("ELMA CENTER", "NY"),
  ("ELMDALE", "MN"),
  ("ELMDALE", "KS"),
  ("ELMENDORF", "TX"),
  ("ELMER", "NJ"),
  ("ELMER", "OK"),
  ("ELMER", "MO"),
  ("ELMER CITY", "WA"),
  ("ELMHURST", "IL"),
  ("ELMIRA", "NY"),
  ("ELMIRA", "CA"),
  ("ELMIRA", "MO"),
  ("ELMIRA HEIGHTS", "NY"),
  ("ELMO", "TX"),
  ("ELMO", "UT"),
  ("ELMO", "MT"),
  ("ELMO", "MO"),
  ("ELMONT", "NY"),
  ("ELMORE", "AL"),
  ("ELMORE", "MN"),
  ("ELMORE", "OH"),
  ("ELMORE CITY", "OK"),
  ("ELMSFORD", "NY"),
  ("ELMWOOD", "LA"),
  ("ELMWOOD", "WI"),
  ("ELMWOOD", "IL"),
  ("ELMWOOD", "NE"),
  ("ELMWOOD PARK", "NJ"),
  ("ELMWOOD PARK", "IL"),
  ("ELMWOOD PARK", "WI"),
  ("ELMWOOD PLACE", "OH"),
  ("ELNORA", "IN"),
  ("ELON", "NC"),
  ("ELOY", "AZ"),
  ("ELRAMA", "PA"),
  ("ELROD", "NC"),
  ("ELROSA", "MN"),
  ("ELROY", "NC"),
  ("ELROY", "WI"),
  ("ELSA", "TX"),
  ("ELSAH", "IL"),
  ("ELSBERRY", "MO"),
  ("ELSIE", "MI"),
  ("ELSIE", "NE"),
  ("ELSINORE", "UT"),
  ("ELSMERE", "KY"),
  ("ELSMERE", "DE"),
  ("ELSMORE", "KS"),
  ("ELTON", "LA"),
  ("ELVASTON", "IL"),
  ("ELVERSON", "PA"),
  ("ELVERTA", "CA"),
  ("ELWOOD", "UT"),
  ("ELWOOD", "IL"),
  ("ELWOOD", "NY"),
  ("ELWOOD", "IN"),
  ("ELWOOD", "NJ"),
  ("ELWOOD", "KS"),
  ("ELWOOD", "NE"),
  ("ELY", "NV"),
  ("ELY", "MN"),
  ("ELY", "IA"),
  ("ELYRIA", "OH"),
  ("ELYRIA", "NE"),
  ("ELYSBURG", "PA"),
  ("ELYSIAN", "MN"),
  ("EMAJAGUA", "PR"),
  ("EMBARRASS", "WI"),
  ("EMBDEN", "ND"),
  ("EMDEN", "IL"),
  ("EMELLE", "AL"),
  ("EMERADO", "ND"),
  ("EMERALD", "WI"),
  ("EMERALD BAY", "TX"),
  ("EMERALD BEACH", "MO"),
  ("EMERALD ISLE", "NC"),
  ("EMERALD LAKE HILLS", "CA"),
  ("EMERALD LAKES", "PA"),
  ("EMERALD MOUNTAIN", "AL"),
  ("EMERSON", "GA"),
  ("EMERSON", "NJ"),
  ("EMERSON", "AR"),
  ("EMERSON", "NE"),
  ("EMERSON", "IA"),
  ("EMERY", "UT"),
  ("EMERY", "SD"),
  ("EMERYVILLE", "CA"),
  ("EMHOUSE", "TX"),
  ("EMIGRANT", "MT"),
  ("EMIGRATION CANYON", "UT"),
  ("EMIGSVILLE", "PA"),
  ("EMILY", "MN"),
  ("EMINENCE", "KY"),
  ("EMINENCE", "MO"),
  ("EMINGTON", "IL"),
  ("EMISON", "IN"),
  ("EMLENTON", "PA"),
  ("EMLYN", "KY"),
  ("EMMA", "MO"),
  ("EMMAUS", "PA"),
  ("EMMET", "AR"),
  ("EMMET", "NE"),
  ("EMMETSBURG", "IA"),
  ("EMMETT", "ID"),
  ("EMMETT", "MI"),
  ("EMMETT", "KS"),
  ("EMMITSBURG", "MD"),
  ("EMMONAK", "AK"),
  ("EMMONS", "MN"),
  ("EMORY", "VA"),
  ("EMORY", "TX"),
  ("EMPIRE", "LA"),
  ("EMPIRE", "NV"),
  ("EMPIRE", "GA"),
  ("EMPIRE", "CA"),
  ("EMPIRE", "MI"),
  ("EMPIRE", "OH"),
  ("EMPIRE", "CO"),
  ("EMPIRE CITY", "OK"),
  ("EMPORIA", "KS"),
  ("EMPORIA", "VA"),
  ("EMPORIUM", "PA"),
  ("EMSWORTH", "PA"),
  ("ENCAMPMENT", "WY"),
  ("ENCANTADA-RANCHITO-EL CALABOZ", "TX"),
  ("ENCHANTED OAKS", "TX"),
  ("ENCINAL", "NM"),
  ("ENCINAL", "TX"),
  ("ENCINITAS", "CA"),
  ("ENCINO", "TX"),
  ("ENCINO", "NM"),
  ("ENDEAVOR", "WI"),
  ("ENDERLIN", "ND"),
  ("ENDERS", "NE"),
  ("ENDICOTT", "NY"),
  ("ENDICOTT", "NE"),
  ("ENDICOTT", "WA"),
  ("ENDWELL", "NY"),
  ("ENERGY", "IL"),
  ("ENETAI", "WA"),
  ("ENFIELD", "NH"),
  ("ENFIELD", "NC"),
  ("ENFIELD", "IL"),
  ("ENGELHARD", "NC"),
  ("ENGLAND", "AR"),
  ("ENGLEVALE", "ND"),
  ("ENGLEWOOD", "FL"),
  ("ENGLEWOOD", "CO"),
  ("ENGLEWOOD", "OH"),
  ("ENGLEWOOD", "NJ"),
  ("ENGLEWOOD", "TN"),
  ("ENGLEWOOD", "KS"),
  ("ENGLEWOOD", "PA"),
  ("ENGLEWOOD CLIFFS", "NJ"),
  ("ENGLISH", "IN"),
  ("ENGLISHTOWN", "NJ"),
  ("ENHAUT", "PA"),
  ("ENID", "OK"),
  ("ENIGMA", "GA"),
  ("ENLOW", "PA"),
  ("ENNIS", "TX"),
  ("ENNIS", "MT"),
  ("ENOCH", "UT"),
  ("ENOCHVILLE", "NC"),
  ("ENOLA", "AR"),
  ("ENOLA", "PA"),
  ("ENON", "VA"),
  ("ENON", "OH"),
  ("ENON VALLEY", "PA"),
  ("ENOREE", "SC"),
  ("ENOSBURG FALLS", "VT"),
  ("ENSENADA", "NM"),
  ("ENSIGN", "KS"),
  ("ENSLEY", "FL"),
  ("ENTERPRISE", "NV"),
  ("ENTERPRISE", "AL"),
  ("ENTERPRISE", "UT"),
  ("ENTERPRISE", "UT"),
  ("ENTERPRISE", "WV"),
  ("ENTERPRISE", "MS"),
  ("ENTERPRISE", "OR"),
  ("ENTERPRISE", "KS"),
  ("ENTIAT", "WA"),
  ("ENUMCLAW", "WA"),
  ("ENVILLE", "TN"),
  ("EOLA", "OR"),
  ("EOLIA", "MO"),
  ("EPES", "AL"),
  ("EPHESUS", "GA"),
  ("EPHRAIM", "WI"),
  ("EPHRAIM", "UT"),
  ("EPHRATA", "WA"),
  ("EPHRATA", "PA"),
  ("EPPING", "NH"),
  ("EPPING", "ND"),
  ("EPPS", "LA"),
  ("EPWORTH", "IA"),
  ("EPWORTH", "GA"),
  ("EQUALITY", "IL"),
  ("ERATH", "LA"),
  ("ERDA", "UT"),
  ("ERHARD", "MN"),
  ("ERICK", "OK"),
  ("ERICSON", "NE"),
  ("ERIE", "PA"),
  ("ERIE", "CO"),
  ("ERIE", "ND"),
  ("ERIE", "IL"),
  ("ERIE", "KS"),
  ("ERIN", "TN"),
  ("ERIN", "NY"),
  ("ERIN SPRINGS", "OK"),
  ("ERLANDS POINT-KITSAP LAKE", "WA"),
  ("ERLANGER", "KY"),
  ("ERMA", "NJ"),
  ("ERNEST", "PA"),
  ("ERNSTVILLE", "MD"),
  ("EROS", "LA"),
  ("ERSKINE", "MN"),
  ("ERWIN", "NC"),
  ("ERWIN", "TN"),
  ("ERWIN", "SD"),
  ("ERWINVILLE", "LA"),
  ("ESBON", "KS"),
  ("ESCALANTE", "UT"),
  ("ESCALON", "CA"),
  ("ESCANABA", "MI"),
  ("ESCATAWPA", "MS"),
  ("ESCHBACH", "WA"),
  ("ESCOBAR I", "TX"),
  ("ESCOBARES", "TX"),
  ("ESCONDIDA", "NM"),
  ("ESCONDIDO", "CA"),
  ("ESCUDILLA BONITA", "NM"),
  ("ESKO", "MN"),
  ("ESKRIDGE", "KS"),
  ("ESMOND", "ND"),
  ("ESMONT", "VA"),
  ("ESPANOLA", "NM"),
  ("ESPARTO", "CA"),
  ("ESPERANCE", "WA"),
  ("ESPERANCE", "NY"),
  ("ESPERANZA", "PR"),
  ("ESPINO", "PR"),
  ("ESPY", "PA"),
  ("ESSEX", "MD"),
  ("ESSEX", "IL"),
  ("ESSEX", "MA"),
  ("ESSEX", "IA"),
  ("ESSEX", "MO"),
  ("ESSEX FELLS", "NJ"),
  ("ESSEX JUNCTION", "VT"),
  ("ESSEX VILLAGE", "CT"),
  ("ESSEXVILLE", "MI"),
  ("ESTACADA", "OR"),
  ("ESTANCIA", "NM"),
  ("ESTELL MANOR", "NJ"),
  ("ESTELLE", "LA"),
  ("ESTELLINE", "SD"),
  ("ESTELLINE", "TX"),
  ("ESTER", "AK"),
  ("ESTERBROOK", "WY"),
  ("ESTERO", "FL"),
  ("ESTES PARK", "CO"),
  ("ESTHERVILLE", "IA"),
  ("ESTHERWOOD", "LA"),
  ("ESTILL", "SC"),
  ("ESTILL SPRINGS", "TN"),
  ("ESTO", "FL"),
  ("ESTRAL BEACH", "MI"),
  ("ETHAN", "SD"),
  ("ETHEL", "MS"),
  ("ETHEL", "MO"),
  ("ETHELSVILLE", "AL"),
  ("ETHETE", "WY"),
  ("ETHRIDGE", "TN"),
  ("ETNA", "WY"),
  ("ETNA", "CA"),
  ("ETNA", "PA"),
  ("ETNA", "OH"),
  ("ETNA GREEN", "IN"),
  ("ETON", "GA"),
  ("ETOWAH", "NC"),
  ("ETOWAH", "AR"),
  ("ETOWAH", "TN"),
  ("ETOWAH", "OK"),
  ("ETTRICK", "VA"),
  ("ETTRICK", "WI"),
  ("EUBANK", "KY"),
  ("EUCALYPTUS HILLS", "CA"),
  ("EUCLID", "OH"),
  ("EUDORA", "AR"),
  ("EUDORA", "KS"),
  ("EUFAULA", "AL"),
  ("EUFAULA", "OK"),
  ("EUGENE", "OR"),
  ("EUGENIO SAENZ", "TX"),
  ("EUHARLEE", "GA"),
  ("EULESS", "TX"),
  ("EUNICE", "LA"),
  ("EUNICE", "NM"),
  ("EUNOLA", "AL"),
  ("EUPORA", "MS"),
  ("EUREKA", "MO"),
  ("EUREKA", "CA"),
  ("EUREKA", "IL"),
  ("EUREKA", "TX"),
  ("EUREKA", "KS"),
  ("EUREKA", "UT"),
  ("EUREKA", "NV"),
  ("EUREKA", "WI"),
  ("EUREKA", "MT"),
  ("EUREKA", "SD"),
  ("EUREKA", "NC"),
  ("EUREKA MILL", "SC"),
  ("EUREKA ROADHOUSE", "AK"),
  ("EUREKA SPRINGS", "AR"),
  ("EUSTACE", "TX"),
  ("EUSTIS", "FL"),
  ("EUSTIS", "NE"),
  ("EUTAW", "AL"),
  ("EUTAWVILLE", "SC"),
  ("EVA", "AL"),
  ("EVA", "TN"),
  ("EVADALE", "TX"),
  ("EVAN", "MN"),
  ("EVANS", "GA"),
  ("EVANS", "CO"),
  ("EVANS CITY", "PA"),
  ("EVANS MILLS", "NY"),
  ("EVANSBURG", "PA"),
  ("EVANSDALE", "IA"),
  ("EVANSTON", "WY"),
  ("EVANSTON", "IL"),
  ("EVANSVILLE", "IN"),
  ("EVANSVILLE", "AK"),
  ("EVANSVILLE", "WY"),
  ("EVANSVILLE", "WI"),
  ("EVANSVILLE", "IL"),
  ("EVANSVILLE", "MN"),
  ("EVANT", "TX"),
  ("EVARO", "MT"),
  ("EVART", "MI"),
  ("EVARTS", "KY"),
  ("EVELETH", "MN"),
  ("EVENDALE", "OH"),
  ("EVENING SHADE", "OK"),
  ("EVENING SHADE", "AR"),
  ("EVEREST", "KS"),
  ("EVERETT", "WA"),
  ("EVERETT", "MA"),
  ("EVERETT", "PA"),
  ("EVERETTS", "NC"),
  ("EVERGLADES", "FL"),
  ("EVERGREEN", "AL"),
  ("EVERGREEN", "CO"),
  ("EVERGREEN", "MO"),
  ("EVERGREEN", "MT"),
  ("EVERGREEN", "NC"),
  ("EVERGREEN", "LA"),
  ("EVERGREEN", "TX"),
  ("EVERGREEN PARK", "IL"),
  ("EVERLY", "IA"),
  ("EVERMAN", "TX"),
  ("EVERSON", "WA"),
  ("EVERSON", "PA"),
  ("EVERTON", "AR"),
  ("EVERTON", "MO"),
  ("EWA BEACH", "HI"),
  ("EWA GENTRY", "HI"),
  ("EWA VILLAGES", "HI"),
  ("EWING", "VA"),
  ("EWING", "IL"),
  ("EWING", "MO"),
  ("EWING", "NE"),
  ("EWING", "KY"),
  ("EXCEL", "AL"),
  ("EXCELLO", "MO"),
  ("EXCELSIOR", "MN"),
  ("EXCELSIOR ESTATES", "MO"),
  ("EXCELSIOR SPRINGS", "MO"),
  ("EXCURSION INLET", "AK"),
  ("EXELAND", "WI"),
  ("EXETER", "PA"),
  ("EXETER", "NH"),
  ("EXETER", "CA"),
  ("EXETER", "MO"),
  ("EXETER", "IL"),
  ("EXETER", "NE"),
  ("EXIRA", "IA"),
  ("EXLINE", "IA"),
  ("EXMORE", "VA"),
  ("EXPERIMENT", "GA"),
  ("EXPORT", "PA"),
  ("EXTON", "PA"),
  ("EYERS GROVE", "PA"),
  ("EYOTA", "MN"),
  ("EZEL", "KY"),
  ("FABENS", "TX"),
  ("FABIUS", "NY"),
  ("FABRICA", "TX"),
  ("FACTORYVILLE", "PA"),
  ("FAIR BLUFF", "NC"),
  ("FAIR GROVE", "MO"),
  ("FAIR HAVEN", "VT"),
  ("FAIR HAVEN", "NY"),
  ("FAIR HAVEN", "NJ"),
  ("FAIR LAKES", "VA"),
  ("FAIR LAWN", "NJ"),
  ("FAIR OAKS", "CA"),
  ("FAIR OAKS", "OK"),
  ("FAIR OAKS", "VA"),
  ("FAIR OAKS", "GA"),
  ("FAIR OAKS", "OR"),
  ("FAIR OAKS RANCH", "TX"),
  ("FAIR PLAIN", "MI"),
  ("FAIR PLAY", "SC"),
  ("FAIR PLAY", "MO"),
  ("FAIRACRES", "NM"),
  ("FAIRBANK", "IA"),
  ("FAIRBANKS", "AK"),
  ("FAIRBANKS RANCH", "CA"),
  ("FAIRBORN", "OH"),
  ("FAIRBURN", "GA"),
  ("FAIRBURN", "SD"),
  ("FAIRBURY", "NE"),
  ("FAIRBURY", "IL"),
  ("FAIRCHANCE", "PA"),
  ("FAIRCHILD", "WI"),
  ("FAIRCHILD AFB", "WA"),
  ("FAIRCHILDS", "TX"),
  ("FAIRDALE", "PA"),
  ("FAIRDALE", "ND"),
  ("FAIRDEALING", "MO"),
  ("FAIRFAX", "VA"),
  ("FAIRFAX", "SC"),
  ("FAIRFAX", "CA"),
  ("FAIRFAX", "IA"),
  ("FAIRFAX", "MN"),
  ("FAIRFAX", "OK"),
  ("FAIRFAX", "OH"),
  ("FAIRFAX", "MO"),
  ("FAIRFAX", "SD"),
  ("FAIRFAX STATION", "VA"),
  ("FAIRFIELD", "CA"),
  ("FAIRFIELD", "UT"),
  ("FAIRFIELD", "OH"),
  ("FAIRFIELD", "NC"),
  ("FAIRFIELD", "IA"),
  ("FAIRFIELD", "TX"),
  ("FAIRFIELD", "OK"),
  ("FAIRFIELD", "IL"),
  ("FAIRFIELD", "AL"),
  ("FAIRFIELD", "ME"),
  ("FAIRFIELD", "TN"),
  ("FAIRFIELD", "ID"),
  ("FAIRFIELD", "NE"),
  ("FAIRFIELD", "PA"),
  ("FAIRFIELD", "WA"),
  ("FAIRFIELD", "MT"),
  ("FAIRFIELD", "KY"),
  ("FAIRFIELD BAY", "AR"),
  ("FAIRFIELD BEACH", "OH"),
  ("FAIRFIELD GLADE", "TN"),
  ("FAIRFIELD HARBOUR", "NC"),
  ("FAIRFORD", "AL"),
  ("FAIRFOREST", "SC"),
  ("FAIRGARDEN", "TN"),
  ("FAIRGROVE", "MI"),
  ("FAIRHAVEN", "MN"),
  ("FAIRHOPE", "AL"),
  ("FAIRHOPE", "PA"),
  ("FAIRLAND", "MD"),
  ("FAIRLAND", "OK"),
  ("FAIRLAND", "IN"),
  ("FAIRLAWN", "OH"),
  ("FAIRLAWN", "VA"),
  ("FAIRLEA", "WV"),
  ("FAIRLEE", "MD"),
  ("FAIRLEE", "VT"),
  ("FAIRLESS HILLS", "PA"),
  ("FAIRMEAD", "CA"),
  ("FAIRMONT", "MN"),
  ("FAIRMONT", "WV"),
  ("FAIRMONT", "NC"),
  ("FAIRMONT", "IL"),
  ("FAIRMONT", "NE"),
  ("FAIRMONT", "OK"),
  ("FAIRMONT CITY", "IL"),
  ("FAIRMOUNT", "MD"),
  ("FAIRMOUNT", "CO"),
  ("FAIRMOUNT", "TN"),
  ("FAIRMOUNT", "NY"),
  ("FAIRMOUNT", "GA"),
  ("FAIRMOUNT", "IN"),
  ("FAIRMOUNT", "ND"),
  ("FAIRMOUNT", "IL"),
  ("FAIRMOUNT HEIGHTS", "MD"),
  ("FAIRPLAINS", "NC"),
  ("FAIRPLAY", "MD"),
  ("FAIRPLAY", "CO"),
  ("FAIRPORT", "NY"),
  ("FAIRPORT HARBOR", "OH"),
  ("FAIRTON", "NJ"),
  ("FAIRVIEW", "NC"),
  ("FAIRVIEW", "TN"),
  ("FAIRVIEW", "TX"),
  ("FAIRVIEW", "GA"),
  ("FAIRVIEW", "OK"),
  ("FAIRVIEW", "NC"),
  ("FAIRVIEW", "IL"),
  ("FAIRVIEW", "PA"),
  ("FAIRVIEW", "NY"),
  ("FAIRVIEW", "OR"),
  ("FAIRVIEW", "CA"),
  ("FAIRVIEW", "WY"),
  ("FAIRVIEW", "AL"),
  ("FAIRVIEW", "NJ"),
  ("FAIRVIEW", "UT"),
  ("FAIRVIEW", "KY"),
  ("FAIRVIEW", "VA"),
  ("FAIRVIEW", "MT"),
  ("FAIRVIEW", "NJ"),
  ("FAIRVIEW", "KY"),
  ("FAIRVIEW", "MO"),
  ("FAIRVIEW", "NY"),
  ("FAIRVIEW", "OH"),
  ("FAIRVIEW", "KS"),
  ("FAIRVIEW", "WV"),
  ("FAIRVIEW", "MD"),
  ("FAIRVIEW", "PA"),
  ("FAIRVIEW", "SD"),
  ("FAIRVIEW BEACH", "VA"),
  ("FAIRVIEW HEIGHTS", "IL"),
  ("FAIRVIEW PARK", "OH"),
  ("FAIRVIEW PARK", "IN"),
  ("FAIRVIEW SHORES", "FL"),
  ("FAIRVIEW-FERNDALE", "PA"),
  ("FAIRWATER", "WI"),
  ("FAIRWAY", "KS"),
  ("FAIRWOOD", "WA"),
  ("FAIRWOOD", "MD"),
  ("FAIRWOOD", "WA"),
  ("FAISON", "NC"),
  ("FAITH", "SD"),
  ("FAITH", "NC"),
  ("FAJARDO", "PR"),
  ("FALCON", "NC"),
  ("FALCON", "MS"),
  ("FALCON HEIGHTS", "MN"),
  ("FALCON HEIGHTS", "TX"),
  ("FALCON LAKE ESTATES", "TX"),
  ("FALCON MESA", "TX"),
  ("FALCON VILLAGE", "TX"),
  ("FALCONAIRE", "TX"),
  ("FALCONER", "NY"),
  ("FALFURRIAS", "TX"),
  ("FALKLAND", "NC"),
  ("FALKNER", "MS"),
  ("FALKVILLE", "AL"),
  ("FALL BRANCH", "TN"),
  ("FALL CITY", "WA"),
  ("FALL CREEK", "WI"),
  ("FALL RIVER", "MA"),
  ("FALL RIVER", "WI"),
  ("FALL RIVER", "KS"),
  ("FALL RIVER MILLS", "CA"),
  ("FALLBROOK", "CA"),
  ("FALLING SPRING", "WV"),
  ("FALLING WATER", "TN"),
  ("FALLING WATERS", "WV"),
  ("FALLIS", "OK"),
  ("FALLON", "MT"),
  ("FALLON", "NV"),
  ("FALLON STATION", "NV"),
  ("FALLS CHURCH", "VA"),
  ("FALLS CITY", "NE"),
  ("FALLS CITY", "OR"),
  ("FALLS CITY", "TX"),
  ("FALLS CREEK", "PA"),
  ("FALLS VIEW", "WV"),
  ("FALLS VILLAGE", "CT"),
  ("FALLSTON", "MD"),
  ("FALLSTON", "NC"),
  ("FALLSTON", "PA"),
  ("FALMAN", "TX"),
  ("FALMOUTH", "VA"),
  ("FALMOUTH", "ME"),
  ("FALMOUTH", "MA"),
  ("FALMOUTH", "KY"),
  ("FALMOUTH", "PA"),
  ("FALMOUTH FORESIDE", "ME"),
  ("FALSE PASS", "AK"),
  ("FALUN", "KS"),
  ("FANCY FARM", "KY"),
  ("FANCY GAP", "VA"),
  ("FANNETT", "TX"),
  ("FANNING SPRINGS", "FL"),
  ("FANSHAWE", "OK"),
  ("FANWOOD", "NJ"),
  ("FAR HILLS", "NJ"),
  ("FARBER", "MO"),
  ("FARGO", "ND"),
  ("FARGO", "GA"),
  ("FARGO", "AR"),
  ("FARGO", "OK"),
  ("FARIBAULT", "MN"),
  ("FARINA", "IL"),
  ("FARLEY", "KY"),
  ("FARLEY", "IA"),
  ("FARLEY", "MO"),
  ("FARM LOOP", "AK"),
  ("FARMER", "SD"),
  ("FARMER CITY", "IL"),
  ("FARMERS", "KY"),
  ("FARMERS BRANCH", "TX"),
  ("FARMERS LOOP", "AK"),
  ("FARMERSBURG", "IN"),
  ("FARMERSBURG", "IA"),
  ("FARMERSVILLE", "TX"),
  ("FARMERSVILLE", "PA"),
  ("FARMERSVILLE", "CA"),
  ("FARMERSVILLE", "IL"),
  ("FARMERSVILLE", "OH"),
  ("FARMERVILLE", "LA"),
  ("FARMINGDALE", "ME"),
  ("FARMINGDALE", "NY"),
  ("FARMINGDALE", "NJ"),
  ("FARMINGTON", "NY"),
  ("FARMINGTON", "NM"),
  ("FARMINGTON", "MN"),
  ("FARMINGTON", "UT"),
  ("FARMINGTON", "AR"),
  ("FARMINGTON", "MO"),
  ("FARMINGTON", "NH"),
  ("FARMINGTON", "MS"),
  ("FARMINGTON", "ME"),
  ("FARMINGTON", "MI"),
  ("FARMINGTON", "PA"),
  ("FARMINGTON", "CA"),
  ("FARMINGTON", "KY"),
  ("FARMINGTON", "IL"),
  ("FARMINGTON", "IA"),
  ("FARMINGTON", "WV"),
  ("FARMINGTON", "WA"),
  ("FARMINGTON", "DE"),
  ("FARMINGTON HILLS", "MI"),
  ("FARMINGVILLE", "NY"),
  ("FARMLAND", "IN"),
  ("FARMVILLE", "VA"),
  ("FARMVILLE", "NC"),
  ("FARNAM", "NE"),
  ("FARNHAM", "NY"),
  ("FARNHAMVILLE", "IA"),
  ("FARR WEST", "UT"),
  ("FARRAGUT", "TN"),
  ("FARRAGUT", "IA"),
  ("FARRELL", "PA"),
  ("FARRELL", "MS"),
  ("FARSON", "WY"),
  ("FARWELL", "MI"),
  ("FARWELL", "TX"),
  ("FARWELL", "MN"),
  ("FARWELL", "NE"),
  ("FATE", "TX"),
  ("FAULKTON", "SD"),
  ("FAUNSDALE", "AL"),
  ("FAWN GROVE", "PA"),
  ("FAWN LAKE FOREST", "PA"),
  ("FAXON", "PA"),
  ("FAXON", "OK"),
  ("FAYETTE", "AL"),
  ("FAYETTE", "MO"),
  ("FAYETTE", "IA"),
  ("FAYETTE", "MS"),
  ("FAYETTE", "OH"),
  ("FAYETTE", "UT"),
  ("FAYETTE CITY", "PA"),
  ("FAYETTEVILLE", "NC"),
  ("FAYETTEVILLE", "AR"),
  ("FAYETTEVILLE", "AL"),
  ("FAYETTEVILLE", "TN"),
  ("FAYETTEVILLE", "GA"),
  ("FAYETTEVILLE", "WV"),
  ("FAYETTEVILLE", "PA"),
  ("FAYETTEVILLE", "NY"),
  ("FAYETTEVILLE", "OH"),
  ("FAYETTEVILLE", "TX"),
  ("FAYETTEVILLE", "IL"),
  ("FAYSVILLE", "TX"),
  ("FAYWOOD", "NM"),
  ("FEARRINGTON VILLAGE", "NC"),
  ("FEASTERVILLE", "PA"),
  ("FEATHER SOUND", "FL"),
  ("FEDERAL DAM", "MN"),
  ("FEDERAL HEIGHTS", "CO"),
  ("FEDERAL WAY", "WA"),
  ("FEDERALSBURG", "MD"),
  ("FEDORA", "SD"),
  ("FELICITY", "OH"),
  ("FELIDA", "WA"),
  ("FELLOWS", "CA"),
  ("FELLSBURG", "PA"),
  ("FELLSMERE", "FL"),
  ("FELSENTHAL", "AR"),
  ("FELT", "OK"),
  ("FELTON", "CA"),
  ("FELTON", "MN"),
  ("FELTON", "DE"),
  ("FELTON", "PA"),
  ("FELTS MILLS", "NY"),
  ("FENCE LAKE", "NM"),
  ("FENNIMORE", "WI"),
  ("FENNVILLE", "MI"),
  ("FENTON", "MI"),
  ("FENTON", "MO"),
  ("FENTON", "LA"),
  ("FENTON", "IA"),
  ("FENWICK", "CT"),
  ("FENWICK", "WV"),
  ("FENWICK ISLAND", "DE"),
  ("FENWOOD", "WI"),
  ("FERDINAND", "IN"),
  ("FERDINAND", "ID"),
  ("FERGUS FALLS", "MN"),
  ("FERGUSON", "MO"),
  ("FERGUSON", "KY"),
  ("FERGUSON", "IA"),
  ("FERN ACRES", "HI"),
  ("FERN FOREST", "HI"),
  ("FERN PARK", "FL"),
  ("FERN PRAIRIE", "WA"),
  ("FERNAN LAKE VILLAGE", "ID"),
  ("FERNANDINA BEACH", "FL"),
  ("FERNANDO SALINAS", "TX"),
  ("FERNDALE", "WA"),
  ("FERNDALE", "MD"),
  ("FERNDALE", "MI"),
  ("FERNDALE", "FL"),
  ("FERNDALE", "CA"),
  ("FERNDALE", "PA"),
  ("FERNEY", "SD"),
  ("FERNLEY", "NV"),
  ("FERNVILLE", "PA"),
  ("FERNWAY", "PA"),
  ("FERRELVIEW", "MO"),
  ("FERRIDAY", "LA"),
  ("FERRIS", "TX"),
  ("FERRIS", "IL"),
  ("FERRON", "UT"),
  ("FERRUM", "VA"),
  ("FERRY", "AK"),
  ("FERRY PASS", "FL"),
  ("FERRYSBURG", "MI"),
  ("FERRYVILLE", "WI"),
  ("FERTILE", "MN"),
  ("FERTILE", "IA"),
  ("FESSENDEN", "ND"),
  ("FESTUS", "MO"),
  ("FETTERS HOT SPRINGS-AGUA CALIENTE", "CA"),
  ("FIDDLETOWN", "CA"),
  ("FIDELIS", "FL"),
  ("FIDELITY", "MO"),
  ("FIDELITY", "IL"),
  ("FIELDALE", "VA"),
  ("FIELDBROOK", "CA"),
  ("FIELDING", "UT"),
  ("FIELDON", "IL"),
  ("FIELDS LANDING", "CA"),
  ("FIELDSBORO", "NJ"),
  ("FIFE", "WA"),
  ("FIFE HEIGHTS", "WA"),
  ("FIFE LAKE", "MI"),
  ("FIFTH STREET", "TX"),
  ("FIFTH WARD", "LA"),
  ("FIFTY LAKES", "MN"),
  ("FIFTY-SIX", "AR"),
  ("FILER", "ID"),
  ("FILER CITY", "MI"),
  ("FILLEY", "NE"),
  ("FILLMORE", "UT"),
  ("FILLMORE", "CA"),
  ("FILLMORE", "IN"),
  ("FILLMORE", "IL"),
  ("FILLMORE", "NY"),
  ("FILLMORE", "MO"),
  ("FINCASTLE", "TN"),
  ("FINCASTLE", "VA"),
  ("FINCASTLE", "KY"),
  ("FINDERNE", "NJ"),
  ("FINDLAY", "OH"),
  ("FINDLAY", "IL"),
  ("FINESVILLE", "NJ"),
  ("FINGAL", "ND"),
  ("FINGER", "TN"),
  ("FINGERVILLE", "SC"),
  ("FINLAND", "MN"),
  ("FINLAYSON", "MN"),
  ("FINLEY", "WA"),
  ("FINLEY", "ND"),
  ("FINLEY POINT", "MT"),
  ("FINLEYVILLE", "PA"),
  ("FINNEYTOWN", "OH"),
  ("FINZEL", "MD"),
  ("FIRCREST", "WA"),
  ("FIRE ISLAND", "NY"),
  ("FIREBAUGH", "CA"),
  ("FIRESTONE", "CO"),
  ("FIRST MESA", "AZ"),
  ("FIRTH", "ID"),
  ("FIRTH", "NE"),
  ("FIRTHCLIFFE", "NY"),
  ("FISH CAMP", "CA"),
  ("FISH HAWK", "FL"),
  ("FISH LAKE", "IN"),
  ("FISH LAKE", "MN"),
  ("FISH SPRINGS", "NV"),
  ("FISHER", "IL"),
  ("FISHER", "LA"),
  ("FISHER", "MN"),
  ("FISHER", "AR"),
  ("FISHER ISLAND", "FL"),
  ("FISHERS", "IN"),
  ("FISHERS ISLAND", "NY"),
  ("FISHERS LANDING", "NY"),
  ("FISHERSVILLE", "VA"),
  ("FISHHOOK", "AK"),
  ("FISHING CREEK", "MD"),
  ("FISHKILL", "NY"),
  ("FISK", "MO"),
  ("FISKDALE", "MA"),
  ("FITCHBURG", "WI"),
  ("FITCHBURG", "MA"),
  ("FITHIAN", "IL"),
  ("FITZGERALD", "GA"),
  ("FITZHUGH", "OK"),
  ("FITZPATRICK", "AL"),
  ("FIVE CORNERS", "WA"),
  ("FIVE FORKS", "SC"),
  ("FIVE POINTS", "NC"),
  ("FIVE POINTS", "FL"),
  ("FIVE POINTS", "OH"),
  ("FIVE POINTS", "AL"),
  ("FIVEPOINTVILLE", "PA"),
  ("FLAGLER", "CO"),
  ("FLAGLER BEACH", "FL"),
  ("FLAGLER ESTATES", "FL"),
  ("FLAGSTAFF", "AZ"),
  ("FLAMING GORGE", "UT"),
  ("FLANAGAN", "IL"),
  ("FLANDERS", "NY"),
  ("FLANDREAU", "SD"),
  ("FLASHER", "ND"),
  ("FLAT", "AK"),
  ("FLAT LICK", "KY"),
  ("FLAT ROCK", "NC"),
  ("FLAT ROCK", "MI"),
  ("FLAT ROCK", "NC"),
  ("FLAT ROCK", "IL"),
  ("FLAT ROCK", "OH"),
  ("FLAT TOP MOUNTAIN", "TN"),
  ("FLATONIA", "TX"),
  ("FLATWOODS", "KY"),
  ("FLATWOODS", "WV"),
  ("FLAXTON", "ND"),
  ("FLAXVILLE", "MT"),
  ("FLEETWOOD", "PA"),
  ("FLEISCHMANNS", "NY"),
  ("FLEMING", "MO"),
  ("FLEMING", "CO"),
  ("FLEMING ISLAND", "FL"),
  ("FLEMING-NEON", "KY"),
  ("FLEMINGSBURG", "KY"),
  ("FLEMINGTON", "GA"),
  ("FLEMINGTON", "NJ"),
  ("FLEMINGTON", "PA"),
  ("FLEMINGTON", "MO"),
  ("FLEMINGTON", "WV"),
  ("FLENSBURG", "MN"),
  ("FLETCHER", "NC"),
  ("FLETCHER", "OK"),
  ("FLETCHER", "OH"),
  ("FLINT", "MI"),
  ("FLINT CREEK", "OK"),
  ("FLINT HILL", "MO"),
  ("FLINT HILL", "VA"),
  ("FLINTSTONE", "MD"),
  ("FLINTVILLE", "TN"),
  ("FLIPPIN", "AR"),
  ("FLOMATON", "AL"),
  ("FLOODWOOD", "MN"),
  ("FLOR DEL RIO", "TX"),
  ("FLORA", "IL"),
  ("FLORA", "MS"),
  ("FLORA", "IN"),
  ("FLORA DALE", "PA"),
  ("FLORA VISTA", "NM"),
  ("FLORAL CITY", "FL"),
  ("FLORAL PARK", "NY"),
  ("FLORALA", "AL"),
  ("FLORAVILLE", "IL"),
  ("FLORDELL HILLS", "MO"),
  ("FLORENCE", "AZ"),
  ("FLORENCE", "AL"),
  ("FLORENCE", "SC"),
  ("FLORENCE", "KY"),
  ("FLORENCE", "MS"),
  ("FLORENCE", "OR"),
  ("FLORENCE", "CO"),
  ("FLORENCE", "WI"),
  ("FLORENCE", "NJ"),
  ("FLORENCE", "TX"),
  ("FLORENCE", "KS"),
  ("FLORENCE", "MT"),
  ("FLORENCE", "SD"),
  ("FLORENCE", "MN"),
  ("FLORENCE", "IL"),
  ("FLORENCE", "IN"),
  ("FLORENCE-GRAHAM", "CA"),
  ("FLORESVILLE", "TX"),
  ("FLORHAM PARK", "NJ"),
  ("FLORIDA", "NY"),
  ("FLORIDA", "OH"),
  ("FLORIDA", "MO"),
  ("FLORIDA CITY", "FL"),
  ("FLORIDA RIDGE", "FL"),
  ("FLORIDA", "PR"),
  ("FLORIDATOWN", "FL"),
  ("FLORIEN", "LA"),
  ("FLORIN", "CA"),
  ("FLORIS", "VA"),
  ("FLORIS", "IA"),
  ("FLORISSANT", "MO"),
  ("FLORISSANT", "CO"),
  ("FLORISTON", "CA"),
  ("FLOSSMOOR", "IL"),
  ("FLOURNOY", "CA"),
  ("FLOURTOWN", "PA"),
  ("FLOVILLA", "GA"),
  ("FLOWELLA", "TX"),
  ("FLOWER HILL", "NY"),
  ("FLOWER MOUND", "TX"),
  ("FLOWERY BRANCH", "GA"),
  ("FLOWING SPRINGS", "AZ"),
  ("FLOWING WELLS", "AZ"),
  ("FLOWOOD", "MS"),
  ("FLOYD", "NM"),
  ("FLOYD", "IA"),
  ("FLOYD", "VA"),
  ("FLOYD HILL", "CO"),
  ("FLOYDADA", "TX"),
  ("FLUSHING", "MI"),
  ("FLUSHING", "OH"),
  ("FLUTE SPRINGS", "OK"),
  ("FLYING HILLS", "PA"),
  ("FOBES HILL", "WA"),
  ("FOLCROFT", "PA"),
  ("FOLEY", "AL"),
  ("FOLEY", "MN"),
  ("FOLEY", "MO"),
  ("FOLKSTON", "GA"),
  ("FOLLANSBEE", "WV"),
  ("FOLLETT", "TX"),
  ("FOLLY BEACH", "SC"),
  ("FOLSOM", "CA"),
  ("FOLSOM", "NJ"),
  ("FOLSOM", "LA"),
  ("FOLSOM", "PA"),
  ("FOLSOM", "NM"),
  ("FOND DU LAC", "WI"),
  ("FONDA", "IA"),
  ("FONDA", "NY"),
  ("FONTANA", "CA"),
  ("FONTANA", "KS"),
  ("FONTANA-ON-GENEVA LAKE", "WI"),
  ("FONTANELLE", "IA"),
  ("FONTANELLE", "NE"),
  ("FONTANET", "IN"),
  ("FONTENELLE", "WY"),
  ("FOOSLAND", "IL"),
  ("FOOT OF TEN", "PA"),
  ("FOOTHILL FARMS", "CA"),
  ("FOOTS CREEK", "OR"),
  ("FOOTVILLE", "WI"),
  ("FORADA", "MN"),
  ("FORAKER", "OK"),
  ("FORBES", "ND"),
  ("FORBESTOWN", "CA"),
  ("FORCE", "PA"),
  ("FORD", "KS"),
  ("FORD CITY", "CA"),
  ("FORD CITY", "PA"),
  ("FORD CLIFF", "PA"),
  ("FORD HEIGHTS", "IL"),
  ("FORDLAND", "MO"),
  ("FORDOCHE", "LA"),
  ("FORDS", "NJ"),
  ("FORDS PRAIRIE", "WA"),
  ("FORDSVILLE", "KY"),
  ("FORDVILLE", "ND"),
  ("FORDYCE", "AR"),
  ("FORDYCE", "NE"),
  ("FOREMAN", "AR"),
  ("FOREST", "VA"),
  ("FOREST", "MS"),
  ("FOREST", "LA"),
  ("FOREST", "OH"),
  ("FOREST ACRES", "SC"),
  ("FOREST CITY", "NC"),
  ("FOREST CITY", "IA"),
  ("FOREST CITY", "FL"),
  ("FOREST CITY", "MO"),
  ("FOREST CITY", "PA"),
  ("FOREST CITY", "IL"),
  ("FOREST GLEN", "MD"),
  ("FOREST GROVE", "OR"),
  ("FOREST HEIGHTS", "MD"),
  ("FOREST HILL", "TX"),
  ("FOREST HILL", "LA"),
  ("FOREST HILL VILLAGE", "MT"),
  ("FOREST HILLS", "MI"),
  ("FOREST HILLS", "TN"),
  ("FOREST HILLS", "PA"),
  ("FOREST HILLS", "NC"),
  ("FOREST HILLS", "KY"),
  ("FOREST HOME", "NY"),
  ("FOREST JUNCTION", "WI"),
  ("FOREST LAKE", "MN"),
  ("FOREST LAKE", "IL"),
  ("FOREST MEADOWS", "CA"),
  ("FOREST OAKS", "NC"),
  ("FOREST PARK", "GA"),
  ("FOREST PARK", "OH"),
  ("FOREST PARK", "IL"),
  ("FOREST PARK", "OK"),
  ("FOREST RANCH", "CA"),
  ("FOREST RIVER", "ND"),
  ("FOREST VIEW", "IL"),
  ("FORESTBROOK", "SC"),
  ("FORESTBURG", "SD"),
  ("FORESTDALE", "AL"),
  ("FORESTDALE", "MA"),
  ("FORESTHILL", "CA"),
  ("FORESTON", "MN"),
  ("FORESTVILLE", "CA"),
  ("FORESTVILLE", "MD"),
  ("FORESTVILLE", "OH"),
  ("FORESTVILLE", "NY"),
  ("FORESTVILLE", "PA"),
  ("FORESTVILLE", "MI"),
  ("FORESTVILLE", "WI"),
  ("FORGAN", "OK"),
  ("FORISTELL", "MO"),
  ("FORKED RIVER", "NJ"),
  ("FORKLAND", "AL"),
  ("FORKS", "WA"),
  ("FORKSVILLE", "PA"),
  ("FORMAN", "ND"),
  ("FORMOSO", "KS"),
  ("FORNEY", "TX"),
  ("FORREST", "IL"),
  ("FORREST CITY", "AR"),
  ("FORRESTON", "IL"),
  ("FORSAN", "TX"),
  ("FORSYTH", "GA"),
  ("FORSYTH", "IL"),
  ("FORSYTH", "MO"),
  ("FORSYTH", "MT"),
  ("FORT ANN", "NY"),
  ("FORT APACHE", "AZ"),
  ("FORT ASHBY", "WV"),
  ("FORT ATKINSON", "WI"),
  ("FORT ATKINSON", "IA"),
  ("FORT BELKNAP AGENCY", "MT"),
  ("FORT BELVOIR", "VA"),
  ("FORT BENTON", "MT"),
  ("FORT BIDWELL", "CA"),
  ("FORT BLISS", "TX"),
  ("FORT BRAGG", "CA"),
  ("FORT BRANCH", "IN"),
  ("FORT BRIDGER", "WY"),
  ("FORT CALHOUN", "NE"),
  ("FORT CAMPBELL NORTH", "KY"),
  ("FORT CARSON", "CO"),
  ("FORT CHISWELL", "VA"),
  ("FORT CLARK SPRINGS", "TX"),
  ("FORT COBB", "OK"),
  ("FORT COFFEE", "OK"),
  ("FORT COLLINS", "CO"),
  ("FORT COVINGTON HAMLET", "NY"),
  ("FORT DAVIS", "TX"),
  ("FORT DEFIANCE", "AZ"),
  ("FORT DENAUD", "FL"),
  ("FORT DEPOSIT", "AL"),
  ("FORT DIX", "NJ"),
  ("FORT DODGE", "IA"),
  ("FORT DODGE", "KS"),
  ("FORT DRUM", "NY"),
  ("FORT DUCHESNE", "UT"),
  ("FORT EDWARD", "NY"),
  ("FORT FAIRFIELD", "ME"),
  ("FORT GAINES", "GA"),
  ("FORT GARLAND", "CO"),
  ("FORT GAY", "WV"),
  ("FORT GIBSON", "OK"),
  ("FORT GREELY", "AK"),
  ("FORT GREEN", "FL"),
  ("FORT GREEN SPRINGS", "FL"),
  ("FORT HALL", "ID"),
  ("FORT HANCOCK", "TX"),
  ("FORT HILL", "OR"),
  ("FORT HOOD", "TX"),
  ("FORT HUNT", "VA"),
  ("FORT INDIANTOWN GAP", "PA"),
  ("FORT IRWIN", "CA"),
  ("FORT JENNINGS", "OH"),
  ("FORT JESUP", "LA"),
  ("FORT JOHNSON", "NY"),
  ("FORT JONES", "CA"),
  ("FORT KENT", "ME"),
  ("FORT KNOX", "KY"),
  ("FORT LARAMIE", "WY"),
  ("FORT LAUDERDALE", "FL"),
  ("FT. LAUDERDALE", "FL"),
  ("FORT LAWN", "SC"),
  ("FORT LEE", "VA"),
  ("FORT LEE", "NJ"),
  ("FORT LEONARD WOOD", "MO"),
  ("FORT LEWIS", "WA"),
  ("FORT LORAMIE", "OH"),
  ("FORT LOUDON", "PA"),
  ("FORT LUPTON", "CO"),
  ("FORT MADISON", "IA"),
  ("FORT MCDERMITT", "NV"),
  ("FORT MEADE", "MD"),
  ("FORT MEADE", "FL"),
  ("FORT MILL", "SC"),
  ("FORT MITCHELL", "KY"),
  ("FORT MOHAVE", "AZ"),
  ("FORT MONTGOMERY", "NY"),
  ("FORT MORGAN", "CO"),
  ("FORT MYERS", "FL"),
  ("FORT MYERS BEACH", "FL"),
  ("FORT MYERS SHORES", "FL"),
  ("FORT OGLETHORPE", "GA"),
  ("FORT PAYNE", "AL"),
  ("FORT PECK", "MT"),
  ("FORT PIERCE", "FL"),
  ("FORT PIERCE NORTH", "FL"),
  ("FORT PIERCE SOUTH", "FL"),
  ("FORT PIERRE", "SD"),
  ("FORT PLAIN", "NY"),
  ("FORT POLK NORTH", "LA"),
  ("FORT POLK SOUTH", "LA"),
  ("FORT RANSOM", "ND"),
  ("FORT RECOVERY", "OH"),
  ("FORT RILEY", "KS"),
  ("FORT RIPLEY", "MN"),
  ("FORT RITCHIE", "MD"),
  ("FORT RUCKER", "AL"),
  ("FORT SALONGA", "NY"),
  ("FORT SCOTT", "KS"),
  ("FORT SENECA", "OH"),
  ("FORT SHAW", "MT"),
  ("FORT SHAWNEE", "OH"),
  ("FORT SMITH", "AR"),
  ("FORT SMITH", "MT"),
  ("FORT STEWART", "GA"),
  ("FORT STOCKTON", "TX"),
  ("FORT SUMNER", "NM"),
  ("FORT SUPPLY", "OK"),
  ("FORT THOMAS", "AZ"),
  ("FORT THOMAS", "KY"),
  ("FORT THOMPSON", "SD"),
  ("FORT TOTTEN", "ND"),
  ("FORT TOWSON", "OK"),
  ("FORT VALLEY", "AZ"),
  ("FORT VALLEY", "GA"),
  ("FORT WALTON BEACH", "FL"),
  ("FORT WASHAKIE", "WY"),
  ("FORT WASHINGTON", "MD"),
  ("FORT WASHINGTON", "PA"),
  ("FORT WASHINGTON", "CA"),
  ("FORT WAYNE", "IN"),
  ("FORT WHITE", "FL"),
  ("FORT WORTH", "TX"),
  ("FORT WRIGHT", "KY"),
  ("FORT YATES", "ND"),
  ("FORT YUKON", "AK"),
  ("FORTESCUE", "MO"),
  ("FORTINE", "MT"),
  ("FORTUNA", "CA"),
  ("FORTUNA", "ND"),
  ("FORTUNA FOOTHILLS", "AZ"),
  ("FORTVILLE", "IN"),
  ("FORTY FORT", "PA"),
  ("FOSCOE", "NC"),
  ("FOSS", "OK"),
  ("FOSSIL", "OR"),
  ("FOSSTON", "MN"),
  ("FOSTER", "OK"),
  ("FOSTER", "MO"),
  ("FOSTER", "NE"),
  ("FOSTER", "KY"),
  ("FOSTER BROOK", "PA"),
  ("FOSTER CENTER", "RI"),
  ("FOSTER CITY", "CA"),
  ("FOSTORIA", "OH"),
  ("FOSTORIA", "MI"),
  ("FOSTORIA", "IA"),
  ("FOUKE", "AR"),
  ("FOUNDRYVILLE", "PA"),
  ("FOUNTAIN", "CO"),
  ("FOUNTAIN", "MI"),
  ("FOUNTAIN", "NC"),
  ("FOUNTAIN", "MN"),
  ("FOUNTAIN CITY", "WI"),
  ("FOUNTAIN CITY", "IN"),
  ("FOUNTAIN GREEN", "UT"),
  ("FOUNTAIN HILL", "PA"),
  ("FOUNTAIN HILL", "AR"),
  ("FOUNTAIN HILLS", "AZ"),
  ("FOUNTAIN INN", "SC"),
  ("FOUNTAIN LAKE", "AR"),
  ("FOUNTAIN N' LAKES", "MO"),
  ("FOUNTAIN RUN", "KY"),
  ("FOUNTAIN SPRINGS", "PA"),
  ("FOUNTAIN VALLEY", "CA"),
  ("FOUNTAINEBLEAU", "FL"),
  ("FOUNTAINHEAD-ORCHARD HILLS", "MD"),
  ("FOUR BEARS VILLAGE", "ND"),
  ("FOUR BRIDGES", "OH"),
  ("FOUR CORNERS", "FL"),
  ("FOUR CORNERS", "MT"),
  ("FOUR CORNERS", "OR"),
  ("FOUR CORNERS", "TX"),
  ("FOUR CORNERS", "MD"),
  ("FOUR LAKES", "WA"),
  ("FOUR MILE ROAD", "AK"),
  ("FOUR OAKS", "NC"),
  ("FOUR POINTS", "TX"),
  ("FOURCHE", "AR"),
  ("FOWLER", "CA"),
  ("FOWLER", "IN"),
  ("FOWLER", "MI"),
  ("FOWLER", "CO"),
  ("FOWLER", "KS"),
  ("FOWLERTON", "TX"),
  ("FOWLERTON", "IN"),
  ("FOWLERVILLE", "MI"),
  ("FOWLERVILLE", "NY"),
  ("FOX", "AK"),
  ("FOX CHAPEL", "PA"),
  ("FOX CHASE", "KY"),
  ("FOX CHASE", "PA"),
  ("FOX FARM-COLLEGE", "WY"),
  ("FOX ISLAND", "WA"),
  ("FOX LAKE", "IL"),
  ("FOX LAKE", "MT"),
  ("FOX LAKE", "WI"),
  ("FOX LAKE HILLS", "IL"),
  ("FOX PARK", "WY"),
  ("FOX POINT", "WI"),
  ("FOX RIVER", "AK"),
  ("FOX RIVER GROVE", "IL"),
  ("FOX RUN", "PA"),
  ("FOXBOROUGH", "MA"),
  ("FOXBURG", "PA"),
  ("FOXFIELD", "CO"),
  ("FOXFIRE", "NC"),
  ("FOXHOLM", "ND"),
  ("FOXHOME", "MN"),
  ("FOXWORTH", "MS"),
  ("FOYIL", "OK"),
  ("FR·NQUEZ", "PR"),
  ("FRACKVILLE", "PA"),
  ("FRAMINGHAM", "MA"),
  ("FRANCESVILLE", "IN"),
  ("FRANCIS", "UT"),
  ("FRANCIS", "OK"),
  ("FRANCIS CREEK", "WI"),
  ("FRANCISCO", "IN"),
  ("FRANCISVILLE", "KY"),
  ("FRANCONIA", "VA"),
  ("FRANK", "WV"),
  ("FRANKCLAY", "MO"),
  ("FRANKENMUTH", "MI"),
  ("FRANKFORD", "DE"),
  ("FRANKFORD", "MO"),
  ("FRANKFORT", "IL"),
  ("FRANKFORT", "KY"),
  ("FRANKFORT", "IN"),
  ("FRANKFORT", "MI"),
  ("FRANKFORT", "NY"),
  ("FRANKFORT", "KS"),
  ("FRANKFORT", "SD"),
  ("FRANKFORT", "OH"),
  ("FRANKFORT SPRINGS", "PA"),
  ("FRANKFORT SQUARE", "IL"),
  ("FRANKLIN", "TN"),
  ("FRANKLIN", "WI"),
  ("FRANKLIN", "NH"),
  ("FRANKLIN", "IN"),
  ("FRANKLIN", "KY"),
  ("FRANKLIN", "LA"),
  ("FRANKLIN", "OH"),
  ("FRANKLIN", "VA"),
  ("FRANKLIN", "PA"),
  ("FRANKLIN", "NJ"),
  ("FRANKLIN", "AL"),
  ("FRANKLIN", "NC"),
  ("FRANKLIN", "GA"),
  ("FRANKLIN", "MI"),
  ("FRANKLIN", "CA"),
  ("FRANKLIN", "AR"),
  ("FRANKLIN", "CA"),
  ("FRANKLIN", "KS"),
  ("FRANKLIN", "ID"),
  ("FRANKLIN", "MN"),
  ("FRANKLIN", "AZ"),
  ("FRANKLIN", "NE"),
  ("FRANKLIN", "TX"),
  ("FRANKLIN", "IL"),
  ("FRANKLIN", "WV"),
  ("FRANKLIN", "PA"),
  ("FRANKLIN", "NY"),
  ("FRANKLIN", "MD"),
  ("FRANKLIN", "MO"),
  ("FRANKLIN", "IA"),
  ("FRANKLIN CENTER", "NJ"),
  ("FRANKLIN FARM", "VA"),
  ("FRANKLIN FURNACE", "OH"),
  ("FRANKLIN GROVE", "IL"),
  ("FRANKLIN LAKES", "NJ"),
  ("FRANKLIN PARK", "PA"),
  ("FRANKLIN PARK", "IL"),
  ("FRANKLIN PARK", "NJ"),
  ("FRANKLIN PARK", "FL"),
  ("FRANKLIN SPRINGS", "GA"),
  ("FRANKLIN SQUARE", "NY"),
  ("FRANKLIN TOWN", "MA"),
  ("FRANKLINTON", "LA"),
  ("FRANKLINTON", "NC"),
  ("FRANKLINTOWN", "PA"),
  ("FRANKLINVILLE", "NC"),
  ("FRANKLINVILLE", "NY"),
  ("FRANKS FIELD", "WI"),
  ("FRANKSTON", "TX"),
  ("FRANKTON", "IN"),
  ("FRANKTOWN", "CO"),
  ("FRANNIE", "WY"),
  ("FRASER", "MI"),
  ("FRASER", "CO"),
  ("FRASER", "IA"),
  ("FRAZEE", "MN"),
  ("FRAZER", "MT"),
  ("FRAZEYSBURG", "OH"),
  ("FRAZIER PARK", "CA"),
  ("FREDERIC", "WI"),
  ("FREDERICA", "DE"),
  ("FREDERICK", "MD"),
  ("FREDERICK", "CO"),
  ("FREDERICK", "OK"),
  ("FREDERICK", "SD"),
  ("FREDERICK", "KS"),
  ("FREDERICKSBURG", "VA"),
  ("FREDERICKSBURG", "TX"),
  ("FREDERICKSBURG", "PA"),
  ("FREDERICKSBURG", "PA"),
  ("FREDERICKSBURG", "IN"),
  ("FREDERICKSBURG", "IA"),
  ("FREDERICKSBURG", "OH"),
  ("FREDERICKSON", "WA"),
  ("FREDERICKTOWN", "MO"),
  ("FREDERICKTOWN", "OH"),
  ("FREDERICKTOWN", "PA"),
  ("FREDERIKA", "IA"),
  ("FREDONIA", "AL"),
  ("FREDONIA", "AZ"),
  ("FREDONIA", "NY"),
  ("FREDONIA", "KS"),
  ("FREDONIA", "WI"),
  ("FREDONIA", "KY"),
  ("FREDONIA", "PA"),
  ("FREDONIA", "ND"),
  ("FREDONIA", "IA"),
  ("FREDONIA (BISCOE)", "AR"),
  ("FREE SOIL", "MI"),
  ("FREE UNION", "VA"),
  ("FREEBORN", "MN"),
  ("FREEBURG", "IL"),
  ("FREEBURG", "MO"),
  ("FREEBURG", "PA"),
  ("FREEBURN", "KY"),
  ("FREEDOM", "WY"),
  ("FREEDOM", "CA"),
  ("FREEDOM", "PA"),
  ("FREEDOM", "OK"),
  ("FREEDOM ACRES", "AZ"),
  ("FREEDOM PLAINS", "NY"),
  ("FREEHOLD", "NJ"),
  ("FREELAND", "MI"),
  ("FREELAND", "WA"),
  ("FREELAND", "PA"),
  ("FREELANDVILLE", "IN"),
  ("FREEMAN", "SD"),
  ("FREEMAN", "MO"),
  ("FREEMAN SPUR", "IL"),
  ("FREEMANSBURG", "PA"),
  ("FREEPORT", "FL"),
  ("FREEPORT", "TX"),
  ("FREEPORT", "IL"),
  ("FREEPORT", "NY"),
  ("FREEPORT", "ME"),
  ("FREEPORT", "PA"),
  ("FREEPORT", "MN"),
  ("FREEPORT", "MI"),
  ("FREEPORT", "OH"),
  ("FREEPORT", "KS"),
  ("FREEPORT", "CA"),
  ("FREER", "TX"),
  ("FREETOWN", "IN"),
  ("FREEVILLE", "NY"),
  ("FREISTATT", "MO"),
  ("FREMONT", "CA"),
  ("FREMONT", "NE"),
  ("FREMONT", "OH"),
  ("FREMONT", "MI"),
  ("FREMONT", "IN"),
  ("FREMONT", "UT"),
  ("FREMONT", "NC"),
  ("FREMONT", "IA"),
  ("FREMONT", "WI"),
  ("FREMONT", "MO"),
  ("FREMONT HILLS", "MO"),
  ("FRENCH CAMP", "CA"),
  ("FRENCH CAMP", "MS"),
  ("FRENCH GULCH", "CA"),
  ("FRENCH ISLAND", "WI"),
  ("FRENCH LICK", "IN"),
  ("FRENCH SETTLEMENT", "LA"),
  ("FRENCH VALLEY", "CA"),
  ("FRENCHBURG", "KY"),
  ("FRENCHTOWN", "MT"),
  ("FRENCHTOWN", "NJ"),
  ("FRENCHTOWN-RUMBLY", "MD"),
  ("FRESNO", "CA"),
  ("FRESNO", "TX"),
  ("FRESNO", "OH"),
  ("FREWSBURG", "NY"),
  ("FRIANT", "CA"),
  ("FRIARS POINT", "MS"),
  ("FRIDAY HARBOR", "WA"),
  ("FRIDLEY", "MN"),
  ("FRIEDENS", "PA"),
  ("FRIEDENSBURG", "PA"),
  ("FRIEND", "NE"),
  ("FRIENDLY", "MD"),
  ("FRIENDLY", "WV"),
  ("FRIENDSHIP", "NY"),
  ("FRIENDSHIP", "MD"),
  ("FRIENDSHIP", "TN"),
  ("FRIENDSHIP", "OH"),
  ("FRIENDSHIP", "WI"),
  ("FRIENDSHIP", "AR"),
  ("FRIENDSHIP", "OK"),
  ("FRIENDSHIP HEIGHTS VILLAGE", "MD"),
  ("FRIENDSVILLE", "TN"),
  ("FRIENDSVILLE", "PA"),
  ("FRIENDSVILLE", "MD"),
  ("FRIENDSWOOD", "TX"),
  ("FRIERSON", "LA"),
  ("FRIES", "VA"),
  ("FRIESLAND", "WI"),
  ("FRIONA", "TX"),
  ("FRISCO", "TX"),
  ("FRISCO", "CO"),
  ("FRISCO", "NC"),
  ("FRISCO CITY", "AL"),
  ("FRITCH", "TX"),
  ("FRITZ CREEK", "AK"),
  ("FRIZZLEBURG", "PA"),
  ("FROHNA", "MO"),
  ("FROID", "MT"),
  ("FROMBERG", "MT"),
  ("FRONT ROYAL", "VA"),
  ("FRONTENAC", "KS"),
  ("FRONTENAC", "MO"),
  ("FRONTENAC", "MN"),
  ("FRONTIER", "ND"),
  ("FRONTON", "TX"),
  ("FRONTON RANCHETTES", "TX"),
  ("FROST", "TX"),
  ("FROST", "MN"),
  ("FROSTBURG", "MD"),
  ("FROSTPROOF", "FL"),
  ("FRUIT COVE", "FL"),
  ("FRUIT HEIGHTS", "UT"),
  ("FRUIT HILL", "OH"),
  ("FRUITA", "CO"),
  ("FRUITDALE", "AL"),
  ("FRUITDALE", "OR"),
  ("FRUITDALE", "SD"),
  ("FRUITDALE", "CA"),
  ("FRUITHURST", "AL"),
  ("FRUITLAND", "NC"),
  ("FRUITLAND", "MD"),
  ("FRUITLAND", "ID"),
  ("FRUITLAND", "IA"),
  ("FRUITLAND PARK", "FL"),
  ("FRUITPORT", "MI"),
  ("FRUITRIDGE POCKET", "CA"),
  ("FRUITVALE", "CO"),
  ("FRUITVALE", "TX"),
  ("FRUITVILLE", "FL"),
  ("FRYEBURG", "ME"),
  ("FRYSTOWN", "PA"),
  ("FRYTOWN", "IA"),
  ("FUIG", "PR"),
  ("FULDA", "MN"),
  ("FULFORD", "CO"),
  ("FULLER ACRES", "CA"),
  ("FULLER HEIGHTS", "FL"),
  ("FULLERTON", "CA"),
  ("FULLERTON", "PA"),
  ("FULLERTON", "NE"),
  ("FULLERTON", "ND"),
  ("FULSHEAR", "TX"),
  ("FULTON", "MO"),
  ("FULTON", "MS"),
  ("FULTON", "MD"),
  ("FULTON", "NY"),
  ("FULTON", "KY"),
  ("FULTON", "AL"),
  ("FULTON", "IL"),
  ("FULTON", "CA"),
  ("FULTON", "TX"),
  ("FULTON", "SD"),
  ("FULTON", "KS"),
  ("FULTON", "IN"),
  ("FULTON", "AR"),
  ("FULTON", "OH"),
  ("FULTONDALE", "AL"),
  ("FULTONHAM", "OH"),
  ("FULTONVILLE", "NY"),
  ("FULTS", "IL"),
  ("FUNK", "NE"),
  ("FUNKLEY", "MN"),
  ("FUNKSTOWN", "MD"),
  ("FUNNY RIVER", "AK"),
  ("FUNSTON", "GA"),
  ("FUQUAY-VARINA", "NC"),
  ("FURMAN", "SC"),
  ("FURNACE CREEK", "CA"),
  ("FUSSELS CORNER", "FL"),
  ("FYFFE", "AL"),
  ("G. L. GARCÌA", "PR"),
  ("GAASTRA", "MI"),
  ("GABBS", "NV"),
  ("GACKLE", "ND"),
  ("GADSDEN", "AL"),
  ("GADSDEN", "SC"),
  ("GADSDEN", "AZ"),
  ("GADSDEN", "TN"),
  ("GAFFNEY", "SC"),
  ("GAGE", "OK"),
  ("GAGES LAKE", "IL"),
  ("GAGETOWN", "MI"),
  ("GAHANNA", "OH"),
  ("GAIL", "TX"),
  ("GAINES", "MI"),
  ("GAINESBORO", "TN"),
  ("GAINESVILLE", "FL"),
  ("GAINESVILLE", "GA"),
  ("GAINESVILLE", "TX"),
  ("GAINESVILLE", "VA"),
  ("GAINESVILLE", "MO"),
  ("GAINESVILLE", "AL"),
  ("GAINESVILLE", "NY"),
  ("GAITHERSBURG", "MD"),
  ("GAKONA", "AK"),
  ("GALATEO", "PR"),
  ("GALATIA", "IL"),
  ("GALATIA", "KS"),
  ("GALAX", "VA"),
  ("GALENA", "AK"),
  ("GALENA", "KS"),
  ("GALENA", "IL"),
  ("GALENA", "IN"),
  ("GALENA", "OH"),
  ("GALENA", "MO"),
  ("GALENA", "MD"),
  ("GALENA PARK", "TX"),
  ("GALES FERRY", "CT"),
  ("GALESBURG", "IL"),
  ("GALESBURG", "MI"),
  ("GALESBURG", "KS"),
  ("GALESBURG", "ND"),
  ("GALESTOWN", "MD"),
  ("GALESVILLE", "WI"),
  ("GALESVILLE", "MD"),
  ("GALETON", "PA"),
  ("GALEVILLE", "NY"),
  ("GALIEN", "MI"),
  ("GALION", "OH"),
  ("GALISTEO", "NM"),
  ("GALLANT", "AL"),
  ("GALLATIN", "TN"),
  ("GALLATIN", "TX"),
  ("GALLATIN", "MO"),
  ("GALLATIN GATEWAY", "MT"),
  ("GALLATIN RIVER RANCH", "MT"),
  ("GALLAWAY", "TN"),
  ("GALLIANO", "LA"),
  ("GALLINA", "NM"),
  ("GALLIPOLIS", "OH"),
  ("GALLIPOLIS FERRY", "WV"),
  ("GALLITZIN", "PA"),
  ("GALLOWAY", "WV"),
  ("GALLUP", "NM"),
  ("GALT", "CA"),
  ("GALT", "IA"),
  ("GALT", "MO"),
  ("GALVA", "IL"),
  ("GALVA", "IA"),
  ("GALVA", "KS"),
  ("GALVESTON", "TX"),
  ("GALVESTON", "IN"),
  ("GALWAY", "NY"),
  ("GAMALIEL", "KY"),
  ("GAMBELL", "AK"),
  ("GAMBIER", "OH"),
  ("GAMBRILLS", "MD"),
  ("GAME CREEK", "AK"),
  ("GAMEWELL", "NC"),
  ("GANADO", "AZ"),
  ("GANADO", "TX"),
  ("GANDY", "NE"),
  ("GANG MILLS", "NY"),
  ("GANN", "OH"),
  ("GANN VALLEY", "SD"),
  ("GANS", "OK"),
  ("GANTT", "SC"),
  ("GANTT", "AL"),
  ("GAP", "PA"),
  ("GAPLAND", "MD"),
  ("GARBER", "OK"),
  ("GARBER", "IA"),
  ("GARBERVILLE", "CA"),
  ("GARCENO", "TX"),
  ("GARCIASVILLE", "TX"),
  ("GARCON POINT", "FL"),
  ("GARDEN", "UT"),
  ("GARDEN", "MI"),
  ("GARDEN ACRES", "CA"),
  ("GARDEN CITY", "GA"),
  ("GARDEN CITY", "KS"),
  ("GARDEN CITY", "UT"),
  ("GARDEN CITY", "MI"),
  ("GARDEN CITY", "SC"),
  ("GARDEN CITY", "NY"),
  ("GARDEN CITY", "ID"),
  ("GARDEN CITY", "AL"),
  ("GARDEN CITY", "MO"),
  ("GARDEN CITY", "MN"),
  ("GARDEN CITY", "TX"),
  ("GARDEN CITY", "IA"),
  ("GARDEN CITY", "SD"),
  ("GARDEN CITY", "CO"),
  ("GARDEN CITY PARK", "NY"),
  ("GARDEN CITY SOUTH", "NY"),
  ("GARDEN FARMS", "CA"),
  ("GARDEN GROVE", "CA"),
  ("GARDEN GROVE", "FL"),
  ("GARDEN GROVE", "IA"),
  ("GARDEN HOME-WHITFORD", "OR"),
  ("GARDEN PLAIN", "KS"),
  ("GARDEN PRAIRIE", "IL"),
  ("GARDEN RIDGE", "TX"),
  ("GARDEN VALLEY", "ID"),
  ("GARDEN VIEW", "PA"),
  ("GARDENA", "CA"),
  ("GARDENA", "ND"),
  ("GARDENDALE", "AL"),
  ("GARDENDALE", "TX"),
  ("GARDERE", "LA"),
  ("GARDINER", "ME"),
  ("GARDINER", "MT"),
  ("GARDINER", "NY"),
  ("GARDINER", "OR"),
  ("GARDNER", "MA"),
  ("GARDNER", "KS"),
  ("GARDNER", "FL"),
  ("GARDNER", "IL"),
  ("GARDNER", "ND"),
  ("GARDNERS", "PA"),
  ("GARDNERTOWN", "NY"),
  ("GARDNERVILLE", "NV"),
  ("GARDNERVILLE RANCHOS", "NV"),
  ("GAREY", "CA"),
  ("GARFIELD", "TX"),
  ("GARFIELD", "AR"),
  ("GARFIELD", "NJ"),
  ("GARFIELD", "WA"),
  ("GARFIELD", "GA"),
  ("GARFIELD", "NM"),
  ("GARFIELD", "MN"),
  ("GARFIELD", "KS"),
  ("GARFIELD", "CO"),
  ("GARFIELD HEIGHTS", "OH"),
  ("GARGATHA", "VA"),
  ("GARIBALDI", "OR"),
  ("GARLAND", "TX"),
  ("GARLAND", "WY"),
  ("GARLAND", "UT"),
  ("GARLAND", "NC"),
  ("GARLAND", "AR"),
  ("GARLAND", "TN"),
  ("GARLAND", "NE"),
  ("GARNAVILLO", "IA"),
  ("GARNER", "NC"),
  ("GARNER", "IA"),
  ("GARNER", "AR"),
  ("GARNET", "CA"),
  ("GARNETT", "KS"),
  ("GARRETSON", "SD"),
  ("GARRETT", "IN"),
  ("GARRETT", "WA"),
  ("GARRETT", "TX"),
  ("GARRETT", "PA"),
  ("GARRETT", "IL"),
  ("GARRETT PARK", "MD"),
  ("GARRETTS MILL", "MD"),
  ("GARRETTSVILLE", "OH"),
  ("GARRISON", "MT"),
  ("GARRISON", "MD"),
  ("GARRISON", "KY"),
  ("GARRISON", "ND"),
  ("GARRISON", "TX"),
  ("GARRISON", "MN"),
  ("GARRISON", "IA"),
  ("GARRISON", "NE"),
  ("GARROCHALES", "PR"),
  ("GARVIN", "OK"),
  ("GARVIN", "MN"),
  ("GARWIN", "IA"),
  ("GARWOOD", "NJ"),
  ("GARY", "IN"),
  ("GARY", "WV"),
  ("GARY", "SD"),
  ("GARY", "MN"),
  ("GARY CITY", "TX"),
  ("GARYSBURG", "NC"),
  ("GARYVILLE", "LA"),
  ("GARZA-SALINAS II", "TX"),
  ("GAS", "KS"),
  ("GAS CITY", "IN"),
  ("GASBURG", "VA"),
  ("GASCONADE", "MO"),
  ("GASCOYNE", "ND"),
  ("GASPORT", "NY"),
  ("GASQUET", "CA"),
  ("GASSAWAY", "WV"),
  ("GASSVILLE", "AR"),
  ("GASTON", "SC"),
  ("GASTON", "NC"),
  ("GASTON", "IN"),
  ("GASTON", "OR"),
  ("GASTONIA", "NC"),
  ("GASTONVILLE", "PA"),
  ("GATE", "OK"),
  ("GATE CITY", "VA"),
  ("GATES", "NY"),
  ("GATES", "TN"),
  ("GATES", "OR"),
  ("GATES MILLS", "OH"),
  ("GATESVILLE", "TX"),
  ("GATESVILLE", "NC"),
  ("GATEWAY", "AK"),
  ("GATEWAY", "AR"),
  ("GATEWAY", "FL"),
  ("GATLINBURG", "TN"),
  ("GATTMAN", "MS"),
  ("GAULEY BRIDGE", "WV"),
  ("GAUTIER", "MS"),
  ("GAY", "GA"),
  ("GAYLE MILL", "SC"),
  ("GAYLESVILLE", "AL"),
  ("GAYLORD", "MI"),
  ("GAYLORD", "MN"),
  ("GAYLORD", "KS"),
  ("GAYS", "IL"),
  ("GAYS MILLS", "WI"),
  ("GAYVILLE", "SD"),
  ("GAZELLE", "CA"),
  ("GEARHART", "OR"),
  ("GEARY", "OK"),
  ("GEDDES", "SD"),
  ("GEIGER", "AL"),
  ("GEISTOWN", "PA"),
  ("GEM", "KS"),
  ("GEM LAKE", "MN"),
  ("GENE AUTRY", "OK"),
  ("GENESEE", "CO"),
  ("GENESEE", "ID"),
  ("GENESEO", "IL"),
  ("GENESEO", "NY"),
  ("GENESEO", "KS"),
  ("GENEVA", "AL"),
  ("GENEVA", "FL"),
  ("GENEVA", "IL"),
  ("GENEVA", "NY"),
  ("GENEVA", "OH"),
  ("GENEVA", "NE"),
  ("GENEVA", "IN"),
  ("GENEVA", "WA"),
  ("GENEVA", "GA"),
  ("GENEVA", "MN"),
  ("GENEVA", "IA"),
  ("GENEVA", "PA"),
  ("GENEVA-ON-THE-LAKE", "OH"),
  ("GENOA", "NV"),
  ("GENOA", "IL"),
  ("GENOA", "OH"),
  ("GENOA", "NE"),
  ("GENOA", "CO"),
  ("GENOA", "WI"),
  ("GENOA CITY", "WI"),
  ("GENOLA", "UT"),
  ("GENOLA", "MN"),
  ("GENTRY", "AR"),
  ("GENTRY", "MO"),
  ("GENTRYVILLE", "IN"),
  ("GEORGE", "IA"),
  ("GEORGE", "WA"),
  ("GEORGE MASON", "VA"),
  ("GEORGE WEST", "TX"),
  ("GEORGETOWN", "TX"),
  ("GEORGETOWN", "KY"),
  ("GEORGETOWN", "CA"),
  ("GEORGETOWN", "GA"),
  ("GEORGETOWN", "SC"),
  ("GEORGETOWN", "DE"),
  ("GEORGETOWN", "PA"),
  ("GEORGETOWN", "OH"),
  ("GEORGETOWN", "CT"),
  ("GEORGETOWN", "IN"),
  ("GEORGETOWN", "IL"),
  ("GEORGETOWN", "MD"),
  ("GEORGETOWN", "LA"),
  ("GEORGETOWN", "CO"),
  ("GEORGETOWN", "MN"),
  ("GEORGETOWN", "PA"),
  ("GEORGETOWN", "ID"),
  ("GEORGETOWN", "MS"),
  ("GEORGETOWN", "AR"),
  ("GEORGETOWN", "PA"),
  ("GEORGETOWN", "IL"),
  ("GEORGETOWN-QUITMAN", "GA"),
  ("GEORGIANA", "AL"),
  ("GERALD", "MO"),
  ("GERALDINE", "AL"),
  ("GERALDINE", "MT"),
  ("GERBER", "CA"),
  ("GERING", "NE"),
  ("GERLACH", "NV"),
  ("GERMAN VALLEY", "IL"),
  ("GERMANTON", "NC"),
  ("GERMANTOWN", "WI"),
  ("GERMANTOWN", "TN"),
  ("GERMANTOWN", "MD"),
  ("GERMANTOWN", "OH"),
  ("GERMANTOWN", "NY"),
  ("GERMANTOWN", "IL"),
  ("GERMANTOWN", "KY"),
  ("GERMANTOWN HILLS", "IL"),
  ("GERONIMO", "TX"),
  ("GERONIMO", "OK"),
  ("GERONIMO ESTATES", "AZ"),
  ("GERRARD", "CO"),
  ("GERSTER", "MO"),
  ("GERTON", "NC"),
  ("GERTY", "OK"),
  ("GERVAIS", "OR"),
  ("GETTYSBURG", "SD"),
  ("GETTYSBURG", "PA"),
  ("GETTYSBURG", "OH"),
  ("GEUDA SPRINGS", "KS"),
  ("GEYSER", "MT"),
  ("GEYSERVILLE", "CA"),
  ("GHENT", "NY"),
  ("GHENT", "WV"),
  ("GHENT", "KY"),
  ("GHENT", "MN"),
  ("GHOLSON", "TX"),
  ("GIBBON", "MN"),
  ("GIBBON", "NE"),
  ("GIBBS", "MO"),
  ("GIBBSBORO", "NJ"),
  ("GIBBSTOWN", "NJ"),
  ("GIBBSVILLE", "WI"),
  ("GIBRALTAR", "MI"),
  ("GIBRALTAR", "PA"),
  ("GIBSLAND", "LA"),
  ("GIBSON", "AR"),
  ("GIBSON", "GA"),
  ("GIBSON", "NC"),
  ("GIBSON", "TN"),
  ("GIBSON", "IA"),
  ("GIBSON CITY", "IL"),
  ("GIBSON FLATS", "MT"),
  ("GIBSONBURG", "OH"),
  ("GIBSONIA", "PA"),
  ("GIBSONTON", "FL"),
  ("GIBSONVILLE", "NC"),
  ("GIDDINGS", "TX"),
  ("GIDEON", "MO"),
  ("GIDEON", "OK"),
  ("GIFFORD", "FL"),
  ("GIFFORD", "SC"),
  ("GIFFORD", "IL"),
  ("GIG HARBOR", "WA"),
  ("GILA", "NM"),
  ("GILA BEND", "AZ"),
  ("GILA CROSSING", "AZ"),
  ("GILBERT", "AZ"),
  ("GILBERT", "MN"),
  ("GILBERT", "SC"),
  ("GILBERT", "WV"),
  ("GILBERT", "LA"),
  ("GILBERT", "IA"),
  ("GILBERT", "AR"),
  ("GILBERT CREEK", "WV"),
  ("GILBERTON", "PA"),
  ("GILBERTOWN", "AL"),
  ("GILBERTS", "IL"),
  ("GILBERTSVILLE", "PA"),
  ("GILBERTSVILLE", "KY"),
  ("GILBERTSVILLE", "NY"),
  ("GILBERTVILLE", "IA"),
  ("GILBOA", "OH"),
  ("GILBY", "ND"),
  ("GILCREST", "CO"),
  ("GILDFORD", "MT"),
  ("GILEAD", "NE"),
  ("GILGO", "NY"),
  ("GILLESPIE", "IL"),
  ("GILLETT", "WI"),
  ("GILLETT", "AR"),
  ("GILLETT GROVE", "IA"),
  ("GILLETTE", "WY"),
  ("GILLHAM", "AR"),
  ("GILLIAM", "LA"),
  ("GILLIAM", "MO"),
  ("GILLIS", "LA"),
  ("GILLSVILLE", "GA"),
  ("GILMAN", "WI"),
  ("GILMAN", "IL"),
  ("GILMAN", "IA"),
  ("GILMAN", "MN"),
  ("GILMAN CITY", "MO"),
  ("GILMER", "TX"),
  ("GILMORE", "AR"),
  ("GILMORE", "MD"),
  ("GILMORE CITY", "IA"),
  ("GILROY", "CA"),
  ("GILSON", "IL"),
  ("GILT EDGE", "TN"),
  ("GILTNER", "NE"),
  ("GINGER BLUE", "MO"),
  ("GIRARD", "OH"),
  ("GIRARD", "GA"),
  ("GIRARD", "KS"),
  ("GIRARD", "PA"),
  ("GIRARD", "TX"),
  ("GIRARD", "IL"),
  ("GIRARDVILLE", "PA"),
  ("GIRDLETREE", "MD"),
  ("GISELA", "AZ"),
  ("GLACIER", "WA"),
  ("GLACIER VIEW", "AK"),
  ("GLADBROOK", "IA"),
  ("GLADE", "KS"),
  ("GLADE SPRING", "VA"),
  ("GLADEVIEW", "FL"),
  ("GLADEWATER", "TX"),
  ("GLADSTONE", "MO"),
  ("GLADSTONE", "MI"),
  ("GLADSTONE", "OR"),
  ("GLADSTONE", "IL"),
  ("GLADSTONE", "ND"),
  ("GLADWIN", "MI"),
  ("GLANDORF", "OH"),
  ("GLASCO", "NY"),
  ("GLASCO", "KS"),
  ("GLASFORD", "IL"),
  ("GLASGOW", "KY"),
  ("GLASGOW", "DE"),
  ("GLASGOW", "OR"),
  ("GLASGOW", "VA"),
  ("GLASGOW", "MT"),
  ("GLASGOW", "MO"),
  ("GLASGOW", "IL"),
  ("GLASGOW", "WV"),
  ("GLASGOW", "PA"),
  ("GLASGOW VILLAGE", "MO"),
  ("GLASSBORO", "NJ"),
  ("GLASSMANOR", "MD"),
  ("GLASSPORT", "PA"),
  ("GLASTONBURY CENTER", "CT"),
  ("GLEASON", "TN"),
  ("GLEED", "WA"),
  ("GLEN", "MS"),
  ("GLEN ACRES", "NM"),
  ("GLEN ALLEN", "VA"),
  ("GLEN ALLEN", "AL"),
  ("GLEN ALLEN", "MO"),
  ("GLEN ALPINE", "NC"),
  ("GLEN ARBOR", "MI"),
  ("GLEN AUBREY", "NY"),
  ("GLEN AVON", "CA"),
  ("GLEN BURNIE", "MD"),
  ("GLEN CAMPBELL", "PA"),
  ("GLEN CARBON", "IL"),
  ("GLEN COVE", "NY"),
  ("GLEN DALE", "WV"),
  ("GLEN ECHO", "MD"),
  ("GLEN ECHO PARK", "MO"),
  ("GLEN ELDER", "KS"),
  ("GLEN ELLEN", "CA"),
  ("GLEN ELLYN", "IL"),
  ("GLEN FERRIS", "WV"),
  ("GLEN FLORA", "WI"),
  ("GLEN FORK", "WV"),
  ("GLEN GARDNER", "NJ"),
  ("GLEN HAVEN", "WI"),
  ("GLEN HEAD", "NY"),
  ("GLEN HOPE", "PA"),
  ("GLEN JEAN", "WV"),
  ("GLEN LYN", "VA"),
  ("GLEN LYON", "PA"),
  ("GLEN OSBORNE", "PA"),
  ("GLEN PARK", "NY"),
  ("GLEN RAVEN", "NC"),
  ("GLEN RIDGE", "NJ"),
  ("GLEN RIDGE", "FL"),
  ("GLEN ROCK", "NJ"),
  ("GLEN ROCK", "PA"),
  ("GLEN ROSE", "TX"),
  ("GLEN ST. MARY", "FL"),
  ("GLEN ULLIN", "ND"),
  ("GLEN WHITE", "WV"),
  ("GLENAIRE", "MO"),
  ("GLENARDEN", "MD"),
  ("GLENBEULAH", "WI"),
  ("GLENBROOK", "NV"),
  ("GLENBURN", "PA"),
  ("GLENBURN", "ND"),
  ("GLENCOE", "AL"),
  ("GLENCOE", "FL"),
  ("GLENCOE", "IL"),
  ("GLENCOE", "MN"),
  ("GLENCOE", "OK"),
  ("GLENCOE", "KY"),
  ("GLENCOE", "OH"),
  ("GLENCOE", "LA"),
  ("GLENDALE", "AZ"),
  ("GLENDALE", "CA"),
  ("GLENDALE", "UT"),
  ("GLENDALE", "WI"),
  ("GLENDALE", "OH"),
  ("GLENDALE", "MS"),
  ("GLENDALE", "MO"),
  ("GLENDALE", "CO"),
  ("GLENDALE", "CO"),
  ("GLENDALE", "OR"),
  ("GLENDALE", "SC"),
  ("GLENDALE HEIGHTS", "IL"),
  ("GLENDIVE", "MT"),
  ("GLENDO", "WY"),
  ("GLENDON", "PA"),
  ("GLENDORA", "CA"),
  ("GLENDORA", "NJ"),
  ("GLENDORA", "MS"),
  ("GLENEAGLE", "CO"),
  ("GLENFIELD", "PA"),
  ("GLENFIELD", "ND"),
  ("GLENFORD", "OH"),
  ("GLENHAM", "SD"),
  ("GLENMONT", "MD"),
  ("GLENMONT", "OH"),
  ("GLENMOOR", "OH"),
  ("GLENMORA", "LA"),
  ("GLENN DALE", "MD"),
  ("GLENN HEIGHTS", "TX"),
  ("GLENNALLEN", "AK"),
  ("GLENNS FERRY", "ID"),
  ("GLENNVILLE", "GA"),
  ("GLENOLDEN", "PA"),
  ("GLENPOOL", "OK"),
  ("GLENROCK", "WY"),
  ("GLENS FALLS", "NY"),
  ("GLENS FALLS NORTH", "NY"),
  ("GLENSHAW", "PA"),
  ("GLENSIDE", "PA"),
  ("GLENVAR", "VA"),
  ("GLENVAR HEIGHTS", "FL"),
  ("GLENVIEW", "IL"),
  ("GLENVIEW", "KY"),
  ("GLENVIEW HILLS", "KY"),
  ("GLENVIEW MANOR", "KY"),
  ("GLENVIL", "NE"),
  ("GLENVILLE", "NC"),
  ("GLENVILLE", "MN"),
  ("GLENVILLE", "WV"),
  ("GLENVILLE", "CT"),
  ("GLENWILLOW", "OH"),
  ("GLENWOOD", "AR"),
  ("GLENWOOD", "MN"),
  ("GLENWOOD", "GA"),
  ("GLENWOOD", "IL"),
  ("GLENWOOD", "IA"),
  ("GLENWOOD", "NE"),
  ("GLENWOOD", "NM"),
  ("GLENWOOD", "MO"),
  ("GLENWOOD", "AL"),
  ("GLENWOOD", "UT"),
  ("GLENWOOD", "IN"),
  ("GLENWOOD CITY", "WI"),
  ("GLENWOOD LANDING", "NY"),
  ("GLENWOOD SPRINGS", "CO"),
  ("GLIDDEN", "WI"),
  ("GLIDDEN", "IA"),
  ("GLIDDEN", "TX"),
  ("GLIDE", "OR"),
  ("GLOBE", "AZ"),
  ("GLORIA GLENS PARK", "OH"),
  ("GLORIETA", "NM"),
  ("GLOSTER", "MS"),
  ("GLOSTER", "LA"),
  ("GLOUCESTER", "MA"),
  ("GLOUCESTER", "NC"),
  ("GLOUCESTER CITY", "NJ"),
  ("GLOUCESTER COURTHOUSE", "VA"),
  ("GLOUCESTER POINT", "VA"),
  ("GLOUSTER", "OH"),
  ("GLOVER", "VT"),
  ("GLOVERSVILLE", "NY"),
  ("GLOVERVILLE", "SC"),
  ("GLYNDON", "MN"),
  ("GNADENHUTTEN", "OH"),
  ("GOBLES", "MI"),
  ("GODDARD", "KS"),
  ("GODFREY", "IL"),
  ("GODLEY", "TX"),
  ("GODLEY", "IL"),
  ("GODWIN", "NC"),
  ("GOEHNER", "NE"),
  ("GOESSEL", "KS"),
  ("GOFF", "KS"),
  ("GOFFSTOWN", "NH"),
  ("GOLCONDA", "NV"),
  ("GOLCONDA", "IL"),
  ("GOLD BAR", "WA"),
  ("GOLD BEACH", "OR"),
  ("GOLD CANYON", "AZ"),
  ("GOLD HILL", "CO"),
  ("GOLD HILL", "OR"),
  ("GOLD KEY LAKE", "PA"),
  ("GOLD MOUNTAIN", "CA"),
  ("GOLD RIVER", "CA"),
  ("GOLDEN", "CO"),
  ("GOLDEN", "NM"),
  ("GOLDEN", "MO"),
  ("GOLDEN", "IL"),
  ("GOLDEN", "MS"),
  ("GOLDEN BEACH", "MD"),
  ("GOLDEN BEACH", "FL"),
  ("GOLDEN CITY", "MO"),
  ("GOLDEN GATE", "FL"),
  ("GOLDEN GATE", "IL"),
  ("GOLDEN GLADES", "FL"),
  ("GOLDEN GROVE", "SC"),
  ("GOLDEN HILLS", "CA"),
  ("GOLDEN MEADOW", "LA"),
  ("GOLDEN SHORES", "AZ"),
  ("GOLDEN TRIANGLE", "NJ"),
  ("GOLDEN VALLEY", "AZ"),
  ("GOLDEN VALLEY", "MN"),
  ("GOLDEN VALLEY", "NV"),
  ("GOLDEN VALLEY", "ND"),
  ("GOLDENDALE", "WA"),
  ("GOLDENROD", "FL"),
  ("GOLDEN'S BRIDGE", "NY"),
  ("GOLDFIELD", "NV"),
  ("GOLDFIELD", "IA"),
  ("GOLDFIELD", "CO"),
  ("GOLDONNA", "LA"),
  ("GOLDSBORO", "NC"),
  ("GOLDSBORO", "MD"),
  ("GOLDSBORO", "PA"),
  ("GOLDSBY", "OK"),
  ("GOLDSMITH", "TX"),
  ("GOLDSTON", "NC"),
  ("GOLDSTREAM", "AK"),
  ("GOLDTHWAITE", "TX"),
  ("GOLDVILLE", "AL"),
  ("GOLETA", "CA"),
  ("GOLF", "FL"),
  ("GOLF", "IL"),
  ("GOLF MANOR", "OH"),
  ("GOLIAD", "TX"),
  ("GOLINDA", "TX"),
  ("GOLOVIN", "AK"),
  ("GOLTRY", "OK"),
  ("GOLVA", "ND"),
  ("GONVICK", "MN"),
  ("GONZALES", "LA"),
  ("GONZALES", "TX"),
  ("GONZALES", "CA"),
  ("GONZALEZ", "FL"),
  ("GOOCHLAND", "VA"),
  ("GOOD HOPE", "CA"),
  ("GOOD HOPE", "AL"),
  ("GOOD HOPE", "GA"),
  ("GOOD HOPE", "OH"),
  ("GOOD HOPE", "IL"),
  ("GOOD THUNDER", "MN"),
  ("GOODELL", "IA"),
  ("GOODFIELD", "IL"),
  ("GOODHUE", "MN"),
  ("GOODING", "ID"),
  ("GOODLAND", "KS"),
  ("GOODLAND", "IN"),
  ("GOODLAND", "FL"),
  ("GOODLETTSVILLE", "TN"),
  ("GOODLOW", "TX"),
  ("GOODMAN", "WI"),
  ("GOODMAN", "MO"),
  ("GOODMAN", "MS"),
  ("GOODNEWS BAY", "AK"),
  ("GOODNIGHT", "MO"),
  ("GOODRICH", "MI"),
  ("GOODRICH", "TX"),
  ("GOODRICH", "ND"),
  ("GOODRIDGE", "MN"),
  ("GOODSPRINGS", "NV"),
  ("GOODVIEW", "MN"),
  ("GOODVILLE", "PA"),
  ("GOODWATER", "AL"),
  ("GOODWELL", "OK"),
  ("GOODWILL", "SD"),
  ("GOODWIN", "SD"),
  ("GOODYEAR", "AZ"),
  ("GOODYEAR VILLAGE", "AZ"),
  ("GOODYEARS BAR", "CA"),
  ("GOOFY RIDGE", "IL"),
  ("GOOSE CREEK", "SC"),
  ("GOOSE CREEK", "KY"),
  ("GOOSE LAKE", "IA"),
  ("GOPHER FLATS", "OR"),
  ("GORDO", "AL"),
  ("GORDON", "GA"),
  ("GORDON", "AL"),
  ("GORDON", "WI"),
  ("GORDON", "TX"),
  ("GORDON", "NE"),
  ("GORDON", "PA"),
  ("GORDON", "OH"),
  ("GORDON HEIGHTS", "NY"),
  ("GORDONSVILLE", "TN"),
  ("GORDONSVILLE", "VA"),
  ("GORDONVILLE", "AL"),
  ("GORDONVILLE", "PA"),
  ("GORDONVILLE", "MO"),
  ("GORE", "OK"),
  ("GOREE", "TX"),
  ("GOREVILLE", "IL"),
  ("GORHAM", "ME"),
  ("GORHAM", "NY"),
  ("GORHAM", "IL"),
  ("GORHAM", "NH"),
  ("GORHAM", "KS"),
  ("GORMAN", "NC"),
  ("GORMAN", "TX"),
  ("GORMAN", "MD"),
  ("GORST", "WA"),
  ("GOSHEN", "IN"),
  ("GOSHEN", "AR"),
  ("GOSHEN", "NY"),
  ("GOSHEN", "AL"),
  ("GOSHEN", "CA"),
  ("GOSHEN", "VA"),
  ("GOSHEN", "UT"),
  ("GOSHEN", "KY"),
  ("GOSNELL", "AR"),
  ("GOSPORT", "IN"),
  ("GOSS", "MO"),
  ("GOTEBO", "OK"),
  ("GOTHA", "FL"),
  ("GOTHAM", "WI"),
  ("GOTHENBURG", "NE"),
  ("GOUGLERSVILLE", "PA"),
  ("GOULD", "AR"),
  ("GOULD", "OK"),
  ("GOULDING", "FL"),
  ("GOULDS", "FL"),
  ("GOULDSBORO", "PA"),
  ("GOUVERNEUR", "NY"),
  ("GOVAN", "SC"),
  ("GOVE CITY", "KS"),
  ("GOVERNMENT CAMP", "OR"),
  ("GOWANDA", "NY"),
  ("GOWER", "MO"),
  ("GOWRIE", "IA"),
  ("GRABALL", "TN"),
  ("GRABILL", "IN"),
  ("GRACE", "ID"),
  ("GRACE CITY", "ND"),
  ("GRACEMONT", "OK"),
  ("GRACETON", "PA"),
  ("GRACEVILLE", "FL"),
  ("GRACEVILLE", "MN"),
  ("GRACEY", "KY"),
  ("GRADY", "AR"),
  ("GRADY", "NM"),
  ("GRAEAGLE", "CA"),
  ("GRAETTINGER", "IA"),
  ("GRAF", "IA"),
  ("GRAFORD", "TX"),
  ("GRAFTON", "WI"),
  ("GRAFTON", "OH"),
  ("GRAFTON", "IL"),
  ("GRAFTON", "WV"),
  ("GRAFTON", "ND"),
  ("GRAFTON", "NE"),
  ("GRAFTON", "IA"),
  ("GRAHAM", "WA"),
  ("GRAHAM", "NC"),
  ("GRAHAM", "AL"),
  ("GRAHAM", "TX"),
  ("GRAHAM", "GA"),
  ("GRAHAM", "MO"),
  ("GRAHAMTOWN", "MD"),
  ("GRAIN VALLEY", "MO"),
  ("GRAINFIELD", "KS"),
  ("GRAINOLA", "OK"),
  ("GRAMBLING", "LA"),
  ("GRAMERCY", "LA"),
  ("GRAMLING", "SC"),
  ("GRAMPIAN", "PA"),
  ("GRANADA", "CO"),
  ("GRANADA", "MN"),
  ("GRANBURY", "TX"),
  ("GRANBY", "CO"),
  ("GRANBY", "MO"),
  ("GRANBY", "MA"),
  ("GRAND ACRES", "TX"),
  ("GRAND BAY", "AL"),
  ("GRAND BEACH", "MI"),
  ("GRAND BLANC", "MI"),
  ("GRAND CANE", "LA"),
  ("GRAND CANYON VILLAGE", "AZ"),
  ("GRAND CANYON WEST", "AZ"),
  ("GRAND COTEAU", "LA"),
  ("GRAND COULEE", "WA"),
  ("GRAND DETOUR", "IL"),
  ("GRAND FALLS PLAZA", "MO"),
  ("GRAND FORKS", "ND"),
  ("GRAND FORKS AFB", "ND"),
  ("GRAND HAVEN", "MI"),
  ("GRAND ISLAND", "NE"),
  ("GRAND ISLE", "LA"),
  ("GRAND JUNCTION", "CO"),
  ("GRAND JUNCTION", "TN"),
  ("GRAND JUNCTION", "IA"),
  ("GRAND LAKE", "CO"),
  ("GRAND LAKE TOWNE", "OK"),
  ("GRAND LEDGE", "MI"),
  ("GRAND MARAIS", "MN"),
  ("GRAND MARSH", "WI"),
  ("GRAND MEADOW", "MN"),
  ("GRAND MOUND", "WA"),
  ("GRAND MOUND", "IA"),
  ("GRAND PASS", "MO"),
  ("GRAND POINT", "LA"),
  ("GRAND PRAIRIE", "TX"),
  ("GRAND RAPIDS", "MI"),
  ("GRAND RAPIDS", "MN"),
  ("GRAND RAPIDS", "OH"),
  ("GRAND RIDGE", "FL"),
  ("GRAND RIDGE", "IL"),
  ("GRAND RIVER", "OH"),
  ("GRAND RIVER", "IA"),
  ("GRAND RIVERS", "KY"),
  ("GRAND RONDE", "OR"),
  ("GRAND SALINE", "TX"),
  ("GRAND TERRACE", "CA"),
  ("GRAND TOWER", "IL"),
  ("GRAND VIEW", "WI"),
  ("GRAND VIEW", "ID"),
  ("GRAND VIEW ESTATES", "CO"),
  ("GRAND VIEW-ON-HUDSON", "NY"),
  ("GRANDFALLS", "TX"),
  ("GRANDFATHER", "NC"),
  ("GRANDFIELD", "OK"),
  ("GRANDIN", "MO"),
  ("GRANDIN", "ND"),
  ("GRANDVIEW", "MO"),
  ("GRANDVIEW", "WA"),
  ("GRANDVIEW", "OH"),
  ("GRANDVIEW", "OK"),
  ("GRANDVIEW", "TX"),
  ("GRANDVIEW", "IN"),
  ("GRANDVIEW", "IL"),
  ("GRANDVIEW", "IA"),
  ("GRANDVIEW HEIGHTS", "OH"),
  ("GRANDVIEW PLAZA", "KS"),
  ("GRANDVILLE", "MI"),
  ("GRANDWOOD PARK", "IL"),
  ("GRANDYLE VILLAGE", "NY"),
  ("GRANGER", "IN"),
  ("GRANGER", "WY"),
  ("GRANGER", "WA"),
  ("GRANGER", "IA"),
  ("GRANGER", "TX"),
  ("GRANGER", "MO"),
  ("GRANGEVILLE", "ID"),
  ("GRANGEVILLE", "CA"),
  ("GRANITE", "OK"),
  ("GRANITE", "UT"),
  ("GRANITE", "OR"),
  ("GRANITE BAY", "CA"),
  ("GRANITE CITY", "IL"),
  ("GRANITE FALLS", "NC"),
  ("GRANITE FALLS", "MN"),
  ("GRANITE FALLS", "WA"),
  ("GRANITE HILLS", "CA"),
  ("GRANITE QUARRY", "NC"),
  ("GRANITE SHOALS", "TX"),
  ("GRANITEVILLE", "SC"),
  ("GRANITEVILLE", "VT"),
  ("GRANITEVILLE", "CA"),
  ("GRANJENO", "TX"),
  ("GRANNIS", "AR"),
  ("GRANO", "ND"),
  ("GRANT", "MN"),
  ("GRANT", "OK"),
  ("GRANT", "AL"),
  ("GRANT", "IA"),
  ("GRANT", "NE"),
  ("GRANT", "MI"),
  ("GRANT CITY", "MO"),
  ("GRANT PARK", "IL"),
  ("GRANT TOWN", "WV"),
  ("GRANTFORK", "IL"),
  ("GRANTLEY", "PA"),
  ("GRANTON", "WI"),
  ("GRANTS", "NM"),
  ("GRANTS PASS", "OR"),
  ("GRANTSBORO", "NC"),
  ("GRANTSBURG", "WI"),
  ("GRANTSVILLE", "UT"),
  ("GRANTSVILLE", "MD"),
  ("GRANTSVILLE", "WV"),
  ("GRANT-VALKARIA", "FL"),
  ("GRANTVILLE", "GA"),
  ("GRANTVILLE", "KS"),
  ("GRANTWOOD VILLAGE", "MO"),
  ("GRANVILLE", "OH"),
  ("GRANVILLE", "NY"),
  ("GRANVILLE", "PA"),
  ("GRANVILLE", "WV"),
  ("GRANVILLE", "IL"),
  ("GRANVILLE", "IA"),
  ("GRANVILLE", "ND"),
  ("GRANVILLE SOUTH", "OH"),
  ("GRAPE CREEK", "TX"),
  ("GRAPELAND", "TX"),
  ("GRAPEVIEW", "WA"),
  ("GRAPEVILLE", "PA"),
  ("GRAPEVINE", "TX"),
  ("GRASONVILLE", "MD"),
  ("GRASS LAKE", "MI"),
  ("GRASS RANGE", "MT"),
  ("GRASS VALLEY", "NV"),
  ("GRASS VALLEY", "CA"),
  ("GRASS VALLEY", "OR"),
  ("GRASSFLAT", "PA"),
  ("GRASSTON", "MN"),
  ("GRATIOT", "WI"),
  ("GRATIOT", "OH"),
  ("GRATIS", "OH"),
  ("GRATON", "CA"),
  ("GRATTON", "VA"),
  ("GRATZ", "PA"),
  ("GRATZ", "KY"),
  ("GRAVETTE", "AR"),
  ("GRAVITY", "IA"),
  ("GRAVOIS MILLS", "MO"),
  ("GRAWN", "MI"),
  ("GRAY", "LA"),
  ("GRAY", "GA"),
  ("GRAY", "ME"),
  ("GRAY", "TN"),
  ("GRAY", "IA"),
  ("GRAY COURT", "SC"),
  ("GRAY SUMMIT", "MO"),
  ("GRAYHAWK", "MO"),
  ("GRAYLAND", "WA"),
  ("GRAYLING", "AK"),
  ("GRAYLING", "MI"),
  ("GRAYMOOR-DEVONDALE", "KY"),
  ("GRAYRIDGE", "MO"),
  ("GRAYS PRAIRIE", "TX"),
  ("GRAYS RIVER", "WA"),
  ("GRAYSLAKE", "IL"),
  ("GRAYSON", "KY"),
  ("GRAYSON", "CA"),
  ("GRAYSON", "GA"),
  ("GRAYSON", "LA"),
  ("GRAYSON", "OK"),
  ("GRAYSON VALLEY", "AL"),
  ("GRAYSVILLE", "AL"),
  ("GRAYSVILLE", "TN"),
  ("GRAYSVILLE", "OH"),
  ("GRAYVILLE", "IL"),
  ("GRAZIERVILLE", "PA"),
  ("GREASEWOOD", "AZ"),
  ("GREASY", "OK"),
  ("GREAT BARRINGTON", "MA"),
  ("GREAT BEND", "KS"),
  ("GREAT BEND", "NY"),
  ("GREAT BEND", "ND"),
  ("GREAT BEND", "PA"),
  ("GREAT CACAPON", "WV"),
  ("GREAT FALLS", "VA"),
  ("GREAT FALLS", "MT"),
  ("GREAT FALLS", "SC"),
  ("GREAT MEADOWS", "NJ"),
  ("GREAT NECK", "NY"),
  ("GREAT NECK ESTATES", "NY"),
  ("GREAT NECK GARDENS", "NY"),
  ("GREAT NECK PLAZA", "NY"),
  ("GREAT RIVER", "NY"),
  ("GREATWOOD", "TX"),
  ("GREECE", "NY"),
  ("GREELEY", "CO"),
  ("GREELEY", "IA"),
  ("GREELEY", "KS"),
  ("GREELEY CENTER", "NE"),
  ("GREELEY HILL", "CA"),
  ("GREELEYVILLE", "SC"),
  ("GREEN", "OH"),
  ("GREEN", "OR"),
  ("GREEN", "KS"),
  ("GREEN ACRES", "ND"),
  ("GREEN ACRES", "CA"),
  ("GREEN BANK", "WV"),
  ("GREEN BAY", "WI"),
  ("GREEN BLUFF", "WA"),
  ("GREEN CAMP", "OH"),
  ("GREEN CITY", "MO"),
  ("GREEN COVE SPRINGS", "FL"),
  ("GREEN FOREST", "AR"),
  ("GREEN GRASS", "SD"),
  ("GREEN HARBOR-CEDAR CREST", "MA"),
  ("GREEN HILL", "TN"),
  ("GREEN HILLS", "PA"),
  ("GREEN ISLAND", "NY"),
  ("GREEN ISLE", "MN"),
  ("GREEN KNOLL", "NJ"),
  ("GREEN LAKE", "WI"),
  ("GREEN LANE", "PA"),
  ("GREEN LEVEL", "NC"),
  ("GREEN MEADOWS", "OH"),
  ("GREEN MOUNTAIN", "IA"),
  ("GREEN MOUNTAIN FALLS", "CO"),
  ("GREEN OAKS", "IL"),
  ("GREEN PARK", "MO"),
  ("GREEN RIDGE", "MO"),
  ("GREEN RIVER", "WY"),
  ("GREEN RIVER", "UT"),
  ("GREEN SPRING", "WV"),
  ("GREEN SPRING", "KY"),
  ("GREEN SPRINGS", "OH"),
  ("GREEN TREE", "PA"),
  ("GREEN VALLEY", "AZ"),
  ("GREEN VALLEY", "CA"),
  ("GREEN VALLEY", "CA"),
  ("GREEN VALLEY", "SD"),
  ("GREEN VALLEY", "IL"),
  ("GREEN VALLEY", "WI"),
  ("GREEN VALLEY FARMS", "TX"),
  ("GREENACRES", "FL"),
  ("GREENACRES", "CA"),
  ("GREENBACK", "TN"),
  ("GREENBACKVILLE", "VA"),
  ("GREENBELT", "MD"),
  ("GREENBRIAR", "VA"),
  ("GREENBRIAR", "FL"),
  ("GREENBRIER", "AR"),
  ("GREENBRIER", "TN"),
  ("GREENBUSH", "MN"),
  ("GREENBUSH", "VA"),
  ("GREENBUSH", "WI"),
  ("GREENCASTLE", "IN"),
  ("GREENCASTLE", "PA"),
  ("GREENCASTLE", "MO"),
  ("GREENDALE", "IN"),
  ("GREENDALE", "WI"),
  ("GREENDALE", "MO"),
  ("GREENE", "RI"),
  ("GREENE", "IA"),
  ("GREENE", "NY"),
  ("GREENEVERS", "NC"),
  ("GREENEVILLE", "TN"),
  ("GREENFIELD", "MN"),
  ("GREENFIELD", "IN"),
  ("GREENFIELD", "WI"),
  ("GREENFIELD", "TN"),
  ("GREENFIELD", "CA"),
  ("GREENFIELD", "OH"),
  ("GREENFIELD", "IA"),
  ("GREENFIELD", "IL"),
  ("GREENFIELD", "CA"),
  ("GREENFIELD", "MO"),
  ("GREENFIELD", "OK"),
  ("GREENFIELD TOWN", "MA"),
  ("GREENFIELDS", "PA"),
  ("GREENHILLS", "OH"),
  ("GREENHORN", "CA"),
  ("GREENHORN", "OR"),
  ("GREENLAND", "AR"),
  ("GREENLAWN", "NY"),
  ("GREENLEAF", "WI"),
  ("GREENLEAF", "ID"),
  ("GREENLEAF", "KS"),
  ("GREENOCK", "PA"),
  ("GREENPORT", "NY"),
  ("GREENPORT WEST", "NY"),
  ("GREENS FORK", "IN"),
  ("GREENS LANDING", "PA"),
  ("GREENSBORO", "NC"),
  ("GREENSBORO", "GA"),
  ("GREENSBORO", "VT"),
  ("GREENSBORO", "AL"),
  ("GREENSBORO", "MD"),
  ("GREENSBORO", "FL"),
  ("GREENSBORO", "IN"),
  ("GREENSBORO", "PA"),
  ("GREENSBORO BEND", "VT"),
  ("GREENSBURG", "IN"),
  ("GREENSBURG", "PA"),
  ("GREENSBURG", "LA"),
  ("GREENSBURG", "KY"),
  ("GREENSBURG", "KS"),
  ("GREENSBURG", "MD"),
  ("GREENTOP", "MO"),
  ("GREENTOWN", "OH"),
  ("GREENTOWN", "IN"),
  ("GREENTREE", "NJ"),
  ("GREENUP", "IL"),
  ("GREENUP", "KY"),
  ("GREENVALE", "NY"),
  ("GREENVIEW", "CA"),
  ("GREENVIEW", "WV"),
  ("GREENVIEW", "IL"),
  ("GREENVILLE", "NC"),
  ("GREENVILLE", "TX"),
  ("GREENVILLE", "SC"),
  ("GREENVILLE", "MS"),
  ("GREENVILLE", "AL"),
  ("GREENVILLE", "CA"),
  ("GREENVILLE", "OH"),
  ("GREENVILLE", "MI"),
  ("GREENVILLE", "IL"),
  ("GREENVILLE", "RI"),
  ("GREENVILLE", "KY"),
  ("GREENVILLE", "ME"),
  ("GREENVILLE", "VA"),
  ("GREENVILLE", "NY"),
  ("GREENVILLE", "NH"),
  ("GREENVILLE", "DE"),
  ("GREENVILLE", "NY"),
  ("GREENVILLE", "GA"),
  ("GREENVILLE", "PA"),
  ("GREENVILLE", "FL"),
  ("GREENVILLE", "IN"),
  ("GREENVILLE", "MO"),
  ("GREENVILLE", "IA"),
  ("GREENWALD", "MN"),
  ("GREENWATER", "WA"),
  ("GREENWAY", "AR"),
  ("GREENWICH", "CT"),
  ("GREENWICH", "NY"),
  ("GREENWICH", "OH"),
  ("GREENWICH", "NJ"),
  ("GREENWOOD", "IN"),
  ("GREENWOOD", "SC"),
  ("GREENWOOD", "MS"),
  ("GREENWOOD", "AR"),
  ("GREENWOOD", "LA"),
  ("GREENWOOD", "FL"),
  ("GREENWOOD", "MO"),
  ("GREENWOOD", "WI"),
  ("GREENWOOD", "IL"),
  ("GREENWOOD", "PA"),
  ("GREENWOOD", "DE"),
  ("GREENWOOD", "NE"),
  ("GREENWOOD", "MN"),
  ("GREENWOOD LAKE", "NY"),
  ("GREENWOOD VILLAGE", "CO"),
  ("GREER", "SC"),
  ("GREER", "AZ"),
  ("GREERS FERRY", "AR"),
  ("GREGORY", "OK"),
  ("GREGORY", "SD"),
  ("GREGORY", "TX"),
  ("GREIGSVILLE", "NY"),
  ("GREILICKVILLE", "MI"),
  ("GRENADA", "MS"),
  ("GRENADA", "CA"),
  ("GRENELEFE", "FL"),
  ("GRENOLA", "KS"),
  ("GRENORA", "ND"),
  ("GRENVILLE", "NM"),
  ("GRENVILLE", "SD"),
  ("GRESHAM", "OR"),
  ("GRESHAM", "WI"),
  ("GRESHAM", "NE"),
  ("GRESHAM PARK", "GA"),
  ("GRETNA", "FL"),
  ("GRETNA", "LA"),
  ("GRETNA", "NE"),
  ("GRETNA", "VA"),
  ("GREY EAGLE", "MN"),
  ("GREY FOREST", "TX"),
  ("GREYBULL", "WY"),
  ("GREYCLIFF", "MT"),
  ("GRIDLEY", "CA"),
  ("GRIDLEY", "IL"),
  ("GRIDLEY", "KS"),
  ("GRIER CITY", "PA"),
  ("GRIFFIN", "GA"),
  ("GRIFFIN", "IN"),
  ("GRIFFITH", "IN"),
  ("GRIFFITHVILLE", "AR"),
  ("GRIFTON", "NC"),
  ("GRIGGSTOWN", "NJ"),
  ("GRIGGSVILLE", "IL"),
  ("GRILL", "PA"),
  ("GRIMES", "IA"),
  ("GRIMES", "CA"),
  ("GRIMES", "AL"),
  ("GRIMESLAND", "NC"),
  ("GRIMSLEY", "TN"),
  ("GRINDSTONE", "PA"),
  ("GRINNELL", "IA"),
  ("GRINNELL", "KS"),
  ("GRISSOM AFB", "IN"),
  ("GRISWOLD", "IA"),
  ("GRIZZLY FLATS", "CA"),
  ("GROESBECK", "TX"),
  ("GROESBECK", "OH"),
  ("GROOM", "TX"),
  ("GROSS", "NE"),
  ("GROSSE POINTE", "MI"),
  ("GROSSE POINTE FARMS", "MI"),
  ("GROSSE POINTE PARK", "MI"),
  ("GROSSE POINTE WOODS", "MI"),
  ("GROSSE TETE", "LA"),
  ("GROTON", "CT"),
  ("GROTON", "VT"),
  ("GROTON", "SD"),
  ("GROTON", "NY"),
  ("GROTON", "MA"),
  ("GROTON LONG POINT", "CT"),
  ("GROTTOES", "VA"),
  ("GROVE", "OK"),
  ("GROVE CITY", "OH"),
  ("GROVE CITY", "PA"),
  ("GROVE CITY", "FL"),
  ("GROVE CITY", "MN"),
  ("GROVE HILL", "AL"),
  ("GROVELAND", "FL"),
  ("GROVELAND", "CA"),
  ("GROVELAND", "ID"),
  ("GROVELAND STATION", "NY"),
  ("GROVEPORT", "OH"),
  ("GROVER", "NC"),
  ("GROVER", "WY"),
  ("GROVER", "CO"),
  ("GROVER BEACH", "CA"),
  ("GROVER HILL", "OH"),
  ("GROVES", "TX"),
  ("GROVETON", "VA"),
  ("GROVETON", "TX"),
  ("GROVETON", "NH"),
  ("GROVETOWN", "GA"),
  ("GROVEVILLE", "NJ"),
  ("GRUBBS", "AR"),
  ("GRUETLI-LAAGER", "TN"),
  ("GRUNDY", "VA"),
  ("GRUNDY CENTER", "IA"),
  ("GRUVER", "TX"),
  ("GRUVER", "IA"),
  ("GRYGLA", "MN"),
  ("GU OIDAK", "AZ"),
  ("GU·NICA", "PR"),
  ("GUADALUPE", "CA"),
  ("GUADALUPE", "AZ"),
  ("GUADALUPE-GUERRA", "TX"),
  ("GUAYABAL", "PR"),
  ("GUAYAMA", "PR"),
  ("GUAYANILLA", "PR"),
  ("GUAYNABO", "PR"),
  ("GUERNEVILLE", "CA"),
  ("GUERNSEY", "WY"),
  ("GUERNSEY", "IA"),
  ("GUERRA", "TX"),
  ("GUEYDAN", "LA"),
  ("GUFFEY", "CO"),
  ("GUIDE ROCK", "NE"),
  ("GUILFORD", "ME"),
  ("GUILFORD", "NY"),
  ("GUILFORD", "PA"),
  ("GUILFORD", "MO"),
  ("GUILFORD CENTER", "CT"),
  ("GUIN", "AL"),
  ("GUINDA", "CA"),
  ("GUION", "AR"),
  ("GULF", "NC"),
  ("GULF BREEZE", "FL"),
  ("GULF GATE ESTATES", "FL"),
  ("GULF HILLS", "MS"),
  ("GULF PARK ESTATES", "MS"),
  ("GULF PORT", "IL"),
  ("GULF SHORES", "AL"),
  ("GULF STREAM", "FL"),
  ("GULFCREST", "AL"),
  ("GULFPORT", "MS"),
  ("GULFPORT", "FL"),
  ("GULKANA", "AK"),
  ("GULLY", "MN"),
  ("GUM SPRINGS", "AR"),
  ("GUMBRANCH", "GA"),
  ("GUMLOG", "GA"),
  ("GUN BARREL CITY", "TX"),
  ("GUN CLUB ESTATES", "FL"),
  ("GUNBARREL", "CO"),
  ("GUNN CITY", "MO"),
  ("GUNNISON", "UT"),
  ("GUNNISON", "CO"),
  ("GUNNISON", "MS"),
  ("GUNTER", "TX"),
  ("GUNTERSVILLE", "AL"),
  ("GUNTOWN", "MS"),
  ("GURABO", "PR"),
  ("GURDON", "AR"),
  ("GURLEY", "AL"),
  ("GURLEY", "NE"),
  ("GURNEE", "IL"),
  ("GUSTAVUS", "AK"),
  ("GUSTINE", "CA"),
  ("GUSTINE", "TX"),
  ("GUTHRIE", "OK"),
  ("GUTHRIE", "TX"),
  ("GUTHRIE", "KY"),
  ("GUTHRIE CENTER", "IA"),
  ("GUTIERREZ", "TX"),
  ("GUTTENBERG", "IA"),
  ("GUTTENBERG", "NJ"),
  ("GU-WIN", "AL"),
  ("GUY", "AR"),
  ("GUYMON", "OK"),
  ("GUYS", "TN"),
  ("GUYS MILLS", "PA"),
  ("GUYTON", "GA"),
  ("GWINN", "MI"),
  ("GWINNER", "ND"),
  ("GWYNN", "VA"),
  ("GYPSUM", "CO"),
  ("GYPSUM", "KS"),
  ("GYPSY", "WV"),
  ("H. CUELLAR ESTATES", "TX"),
  ("H. RIVERA COLÛN", "PR"),
  ("HACHITA", "NM"),
  ("HACIENDA HEIGHTS", "CA"),
  ("HACIENDA SAN JOSE", "PR"),
  ("HACKBERRY", "LA"),
  ("HACKBERRY", "AZ"),
  ("HACKBERRY", "TX"),
  ("HACKENSACK", "NJ"),
  ("HACKENSACK", "MN"),
  ("HACKETT", "AR"),
  ("HACKETTSTOWN", "NJ"),
  ("HACKLEBURG", "AL"),
  ("HACKNEYVILLE", "AL"),
  ("HADAR", "NE"),
  ("HADDAM", "KS"),
  ("HADDON HEIGHTS", "NJ"),
  ("HADDONFIELD", "NJ"),
  ("HADLEY", "NY"),
  ("HADLEY", "MN"),
  ("HAENA", "HI"),
  ("HAGAMAN", "NY"),
  ("HAGAN", "GA"),
  ("HAGARVILLE", "AR"),
  ("HAGER CITY", "WI"),
  ("HAGERMAN", "NM"),
  ("HAGERMAN", "ID"),
  ("HAGERSTOWN", "MD"),
  ("HAGERSTOWN", "IN"),
  ("HAGUE", "ND"),
  ("HAHIRA", "GA"),
  ("HAHNVILLE", "LA"),
  ("HAIGLER", "NE"),
  ("HAIGLER CREEK", "AZ"),
  ("HAIKU-PAUWELA", "HI"),
  ("HAILESBORO", "NY"),
  ("HAILEY", "ID"),
  ("HAILEYVILLE", "OK"),
  ("HAINES", "AK"),
  ("HAINES", "OR"),
  ("HAINES CITY", "FL"),
  ("HAINESBURG", "NJ"),
  ("HAINESVILLE", "IL"),
  ("HAIVANA NAKYA", "AZ"),
  ("HALAULA", "HI"),
  ("HALAWA", "HI"),
  ("HALBUR", "IA"),
  ("HALCHITA", "UT"),
  ("HALE", "MO"),
  ("HALE CENTER", "TX"),
  ("HALEBURG", "AL"),
  ("HALEDON", "NJ"),
  ("HALEIWA", "HI"),
  ("HALES CORNERS", "WI"),
  ("HALESITE", "NY"),
  ("HALEYVILLE", "AL"),
  ("HALF MOON", "NC"),
  ("HALF MOON BAY", "CA"),
  ("HALFWAY", "MD"),
  ("HALFWAY", "MO"),
  ("HALFWAY", "OR"),
  ("HALFWAY HOUSE", "PA"),
  ("HALIBUT COVE", "AK"),
  ("HALIFAX", "VA"),
  ("HALIFAX", "NC"),
  ("HALIFAX", "PA"),
  ("HALIIMAILE", "HI"),
  ("HALL", "NY"),
  ("HALL SUMMIT", "LA"),
  ("HALLAM", "PA"),
  ("HALLAM", "NE"),
  ("HALLANDALE BEACH", "FL"),
  ("HALLETT", "OK"),
  ("HALLETTSVILLE", "TX"),
  ("HALLIDAY", "ND"),
  ("HALLOCK", "MN"),
  ("HALLOWELL", "ME"),
  ("HALLS", "TN"),
  ("HALLS CROSSING", "UT"),
  ("HALLSBORO", "NC"),
  ("HALLSBURG", "TX"),
  ("HALLSTEAD", "PA"),
  ("HALLSVILLE", "TX"),
  ("HALLSVILLE", "MO"),
  ("HALLTOWN", "MO"),
  ("HALLWOOD", "VA"),
  ("HALMA", "MN"),
  ("HALSEY", "OR"),
  ("HALSEY", "NE"),
  ("HALSTAD", "MN"),
  ("HALSTEAD", "KS"),
  ("HALTOM CITY", "TX"),
  ("HAM LAKE", "MN"),
  ("HAMBERG", "ND"),
  ("HAMBLETON", "WV"),
  ("HAMBURG", "AR"),
  ("HAMBURG", "NY"),
  ("HAMBURG", "PA"),
  ("HAMBURG", "NJ"),
  ("HAMBURG", "IA"),
  ("HAMBURG", "IL"),
  ("HAMBURG", "MN"),
  ("HAMDEN", "OH"),
  ("HAMEL", "IL"),
  ("HAMER", "ID"),
  ("HAMERSVILLE", "OH"),
  ("HAMILL", "SD"),
  ("HAMILTON", "AL"),
  ("HAMILTON", "OH"),
  ("HAMILTON", "IL"),
  ("HAMILTON", "GA"),
  ("HAMILTON", "MS"),
  ("HAMILTON", "TX"),
  ("HAMILTON", "MT"),
  ("HAMILTON", "NY"),
  ("HAMILTON", "IN"),
  ("HAMILTON", "MO"),
  ("HAMILTON", "WA"),
  ("HAMILTON", "IA"),
  ("HAMILTON", "NC"),
  ("HAMILTON", "KS"),
  ("HAMILTON", "ND"),
  ("HAMILTON", "VA"),
  ("HAMILTON BRANCH", "CA"),
  ("HAMILTON CITY", "CA"),
  ("HAMILTON SQUARE", "NJ"),
  ("HAMLER", "OH"),
  ("HAMLET", "NC"),
  ("HAMLET", "IN"),
  ("HAMLET", "NE"),
  ("HAMLIN", "NY"),
  ("HAMLIN", "TX"),
  ("HAMLIN", "WV"),
  ("HAMLIN", "KS"),
  ("HAMMON", "OK"),
  ("HAMMOND", "IN"),
  ("HAMMOND", "LA"),
  ("HAMMOND", "WI"),
  ("HAMMOND", "IL"),
  ("HAMMOND", "NY"),
  ("HAMMOND", "MN"),
  ("HAMMONDSPORT", "NY"),
  ("HAMMONDVILLE", "AL"),
  ("HAMMONTON", "NJ"),
  ("HAMPDEN", "ME"),
  ("HAMPDEN", "ND"),
  ("HAMPDEN-SYDNEY", "VA"),
  ("HAMPSHIRE", "IL"),
  ("HAMPSTEAD", "NC"),
  ("HAMPSTEAD", "MD"),
  ("HAMPTON", "VA"),
  ("HAMPTON", "MD"),
  ("HAMPTON", "GA"),
  ("HAMPTON", "NH"),
  ("HAMPTON", "SC"),
  ("HAMPTON", "IA"),
  ("HAMPTON", "AR"),
  ("HAMPTON", "IL"),
  ("HAMPTON", "NJ"),
  ("HAMPTON", "MN"),
  ("HAMPTON", "FL"),
  ("HAMPTON", "PA"),
  ("HAMPTON", "NE"),
  ("HAMPTON BAYS", "NY"),
  ("HAMPTON BEACH", "NH"),
  ("HAMPTON MANOR", "NY"),
  ("HAMTRAMCK", "MI"),
  ("HANA", "HI"),
  ("HANAFORD", "IL"),
  ("HANAHAN", "SC"),
  ("HANALEI", "HI"),
  ("HANAMAULU", "HI"),
  ("HANAPEPE", "HI"),
  ("HANCEVILLE", "AL"),
  ("HANCOCK", "MD"),
  ("HANCOCK", "MI"),
  ("HANCOCK", "NY"),
  ("HANCOCK", "WI"),
  ("HANCOCK", "MN"),
  ("HANCOCK", "IA"),
  ("HANCOCK", "NH"),
  ("HANCOCKS BRIDGE", "NJ"),
  ("HANDLEY", "WV"),
  ("HANFORD", "CA"),
  ("HANGING ROCK", "OH"),
  ("HANKINSON", "ND"),
  ("HANKSVILLE", "UT"),
  ("HANLEY FALLS", "MN"),
  ("HANLEY HILLS", "MO"),
  ("HANLONTOWN", "IA"),
  ("HANNA", "WY"),
  ("HANNA", "IN"),
  ("HANNA", "OK"),
  ("HANNA CITY", "IL"),
  ("HANNAFORD", "ND"),
  ("HANNAH", "ND"),
  ("HANNAHS MILL", "GA"),
  ("HANNASVILLE", "PA"),
  ("HANNAWA FALLS", "NY"),
  ("HANNIBAL", "MO"),
  ("HANNIBAL", "NY"),
  ("HANNIBAL", "OH"),
  ("HANOVER", "MN"),
  ("HANOVER", "NH"),
  ("HANOVER", "PA"),
  ("HANOVER", "IN"),
  ("HANOVER", "OH"),
  ("HANOVER", "NM"),
  ("HANOVER", "VA"),
  ("HANOVER", "IL"),
  ("HANOVER", "WI"),
  ("HANOVER", "KS"),
  ("HANOVER", "MI"),
  ("HANOVER PARK", "IL"),
  ("HANOVERTON", "OH"),
  ("HANSBORO", "ND"),
  ("HANSELL", "IA"),
  ("HANSEN", "ID"),
  ("HANSKA", "MN"),
  ("HANSON", "KY"),
  ("HANSON", "MA"),
  ("HANSTON", "KS"),
  ("HANSVILLE", "WA"),
  ("HAPEVILLE", "GA"),
  ("HAPPY", "TX"),
  ("HAPPY CAMP", "CA"),
  ("HAPPY VALLEY", "AK"),
  ("HAPPY VALLEY", "OR"),
  ("HAPPY VALLEY", "NM"),
  ("HAPPYS INN", "MT"),
  ("HARAHAN", "LA"),
  ("HARALSON", "GA"),
  ("HARBINE", "NE"),
  ("HARBISON CANYON", "CA"),
  ("HARBOR", "OR"),
  ("HARBOR BEACH", "MI"),
  ("HARBOR BLUFFS", "FL"),
  ("HARBOR HILLS", "OH"),
  ("HARBOR HILLS", "NY"),
  ("HARBOR ISLE", "NY"),
  ("HARBOR SPRINGS", "MI"),
  ("HARBOR VIEW", "OH"),
  ("HARBORTON", "VA"),
  ("HARBOUR HEIGHTS", "FL"),
  ("HARCOURT", "IA"),
  ("HARD ROCK", "AZ"),
  ("HARDEEVILLE", "SC"),
  ("HARDESTY", "OK"),
  ("HARDIN", "TX"),
  ("HARDIN", "MT"),
  ("HARDIN", "IL"),
  ("HARDIN", "KY"),
  ("HARDIN", "MO"),
  ("HARDING", "MN"),
  ("HARDING-BIRCH LAKES", "AK"),
  ("HARDINSBURG", "KY"),
  ("HARDINSBURG", "IN"),
  ("HARDTNER", "KS"),
  ("HARDWICK", "GA"),
  ("HARDWICK", "MN"),
  ("HARDWICK", "VT"),
  ("HARDWICK", "CA"),
  ("HARDWOOD ACRES", "MI"),
  ("HARDY", "AR"),
  ("HARDY", "NE"),
  ("HARDY", "IA"),
  ("HARDYVILLE", "KY"),
  ("HARGILL", "TX"),
  ("HARING", "MI"),
  ("HARKER HEIGHTS", "TX"),
  ("HARKERS ISLAND", "NC"),
  ("HARLAN", "IA"),
  ("HARLAN", "IN"),
  ("HARLAN", "KY"),
  ("HARLEIGH", "PA"),
  ("HARLEM", "GA"),
  ("HARLEM", "FL"),
  ("HARLEM", "MT"),
  ("HARLEM HEIGHTS", "FL"),
  ("HARLEYSVILLE", "PA"),
  ("HARLEYVILLE", "SC"),
  ("HARLINGEN", "TX"),
  ("HARLINGEN", "NJ"),
  ("HARLOWTON", "MT"),
  ("HARMAN", "WV"),
  ("HARMON", "ND"),
  ("HARMON", "IL"),
  ("HARMONSBURG", "PA"),
  ("HARMONY", "RI"),
  ("HARMONY", "NC"),
  ("HARMONY", "NJ"),
  ("HARMONY", "MN"),
  ("HARMONY", "IN"),
  ("HARMONY", "PA"),
  ("HAROLD", "FL"),
  ("HARPER", "TX"),
  ("HARPER", "OR"),
  ("HARPER", "KS"),
  ("HARPER", "IA"),
  ("HARPER WOODS", "MI"),
  ("HARPERS FERRY", "IA"),
  ("HARPERS FERRY", "WV"),
  ("HARPERSVILLE", "AL"),
  ("HARPSTER", "OH"),
  ("HARRAH", "OK"),
  ("HARRAH", "WA"),
  ("HARRELL", "AR"),
  ("HARRELLS", "NC"),
  ("HARRELLSVILLE", "NC"),
  ("HARRIETTA", "MI"),
  ("HARRIMAN", "TN"),
  ("HARRIMAN", "NY"),
  ("HARRINGTON", "DE"),
  ("HARRINGTON", "WA"),
  ("HARRINGTON PARK", "NJ"),
  ("HARRIS", "MN"),
  ("HARRIS", "IA"),
  ("HARRIS", "KS"),
  ("HARRIS", "MO"),
  ("HARRIS HILL", "NY"),
  ("HARRISBURG", "NC"),
  ("HARRISBURG", "PA"),
  ("HARRISBURG", "IL"),
  ("HARRISBURG", "NE"),
  ("HARRISBURG", "SD"),
  ("HARRISBURG", "AR"),
  ("HARRISBURG", "OR"),
  ("HARRISBURG", "MO"),
  ("HARRISBURG", "OH"),
  ("HARRISON", "NY"),
  ("HARRISON", "AR"),
  ("HARRISON", "TN"),
  ("HARRISON", "OH"),
  ("HARRISON", "MI"),
  ("HARRISON", "IL"),
  ("HARRISON", "GA"),
  ("HARRISON", "NJ"),
  ("HARRISON", "ID"),
  ("HARRISON", "NE"),
  ("HARRISON", "MT"),
  ("HARRISON", "SD"),
  ("HARRISON CITY", "PA"),
  ("HARRISONBURG", "VA"),
  ("HARRISONBURG", "LA"),
  ("HARRISONVILLE", "MO"),
  ("HARRISTON", "VA"),
  ("HARRISTOWN", "IL"),
  ("HARRISVILLE", "UT"),
  ("HARRISVILLE", "WV"),
  ("HARRISVILLE", "RI"),
  ("HARRISVILLE", "PA"),
  ("HARRISVILLE", "NY"),
  ("HARRISVILLE", "MI"),
  ("HARRISVILLE", "OH"),
  ("HARROD", "OH"),
  ("HARRODSBURG", "KY"),
  ("HARRODSBURG", "IN"),
  ("HARROGATE", "TN"),
  ("HARROLD", "SD"),
  ("HART", "MI"),
  ("HART", "TX"),
  ("HARTFORD", "CT"),
  ("HARTFORD", "WI"),
  ("HARTFORD", "AL"),
  ("HARTFORD", "IL"),
  ("HARTFORD", "KY"),
  ("HARTFORD", "SD"),
  ("HARTFORD", "AR"),
  ("HARTFORD", "MI"),
  ("HARTFORD", "IA"),
  ("HARTFORD", "OH"),
  ("HARTFORD", "KS"),
  ("HARTFORD CITY", "IN"),
  ("HARTFORD CITY", "WV"),
  ("HARTINGTON", "NE"),
  ("HARTLAND", "WI"),
  ("HARTLAND", "ME"),
  ("HARTLAND", "VT"),
  ("HARTLAND", "CA"),
  ("HARTLAND", "MN"),
  ("HARTLETON", "PA"),
  ("HARTLEY", "TX"),
  ("HARTLEY", "CA"),
  ("HARTLEY", "IA"),
  ("HARTLINE", "WA"),
  ("HARTLY", "DE"),
  ("HARTMAN", "AR"),
  ("HARTMAN", "CO"),
  ("HARTRANDT", "WY"),
  ("HARTS", "WV"),
  ("HARTSBURG", "MO"),
  ("HARTSBURG", "IL"),
  ("HARTSDALE", "NY"),
  ("HARTSELLE", "AL"),
  ("HARTSHORNE", "OK"),
  ("HARTSTOWN", "PA"),
  ("HARTSVILLE", "SC"),
  ("HARTSVILLE", "IN"),
  ("HARTSVILLE/TROUSDALE COUNTY", "TN"),
  ("HARTVILLE", "OH"),
  ("HARTVILLE", "MO"),
  ("HARTVILLE", "WY"),
  ("HARTWELL", "GA"),
  ("HARTWELL", "MO"),
  ("HARTWICK", "NY"),
  ("HARTWICK", "IA"),
  ("HARVARD", "IL"),
  ("HARVARD", "NE"),
  ("HARVEL", "IL"),
  ("HARVEST", "AL"),
  ("HARVEY", "LA"),
  ("HARVEY", "IL"),
  ("HARVEY", "MI"),
  ("HARVEY", "ND"),
  ("HARVEY", "IA"),
  ("HARVEY CEDARS", "NJ"),
  ("HARVEYS LAKE", "PA"),
  ("HARVEYSBURG", "OH"),
  ("HARVEYVILLE", "KS"),
  ("HARVIELL", "MO"),
  ("HARWICH CENTER", "MA"),
  ("HARWICH PORT", "MA"),
  ("HARWICK", "PA"),
  ("HARWOOD", "ND"),
  ("HARWOOD", "MO"),
  ("HARWOOD HEIGHTS", "IL"),
  ("HASBROUCK HEIGHTS", "NJ"),
  ("HASKELL", "OK"),
  ("HASKELL", "AR"),
  ("HASKELL", "TX"),
  ("HASKINS", "OH"),
  ("HASLET", "TX"),
  ("HASLETT", "MI"),
  ("HASLEY CANYON", "CA"),
  ("HASSELL", "NC"),
  ("HASSON HEIGHTS", "PA"),
  ("HASTINGS", "NE"),
  ("HASTINGS", "MN"),
  ("HASTINGS", "MI"),
  ("HASTINGS", "FL"),
  ("HASTINGS", "PA"),
  ("HASTINGS", "OK"),
  ("HASTINGS", "IA"),
  ("HASTINGS-ON-HUDSON", "NY"),
  ("HASTY", "CO"),
  ("HASWELL", "CO"),
  ("HAT CREEK", "CA"),
  ("HAT ISLAND", "WA"),
  ("HATBORO", "PA"),
  ("HATCH", "NM"),
  ("HATCH", "UT"),
  ("HATFIELD", "MN"),
  ("HATFIELD", "MA"),
  ("HATFIELD", "WI"),
  ("HATFIELD", "AR"),
  ("HATFIELD", "IN"),
  ("HATFIELD", "PA"),
  ("HATILLO", "PR"),
  ("HATLEY", "MS"),
  ("HATLEY", "WI"),
  ("HATO ARRIBA", "PR"),
  ("HATO CANDAL", "PR"),
  ("HATTERAS", "NC"),
  ("HATTIESBURG", "MS"),
  ("HATTON", "AL"),
  ("HATTON", "ND"),
  ("HATTON", "WA"),
  ("HAUBSTADT", "IN"),
  ("HAUGEN", "WI"),
  ("HAUGHTON", "LA"),
  ("HAUPPAUGE", "NY"),
  ("HAUSER", "ID"),
  ("HAUULA", "HI"),
  ("HAVANA", "FL"),
  ("HAVANA", "IL"),
  ("HAVANA", "TX"),
  ("HAVANA", "AR"),
  ("HAVANA", "ND"),
  ("HAVANA", "KS"),
  ("HAVELOCK", "NC"),
  ("HAVELOCK", "IA"),
  ("HAVEN", "KS"),
  ("HAVENSVILLE", "KS"),
  ("HAVERFORD COLLEGE", "PA"),
  ("HAVERHILL", "MA"),
  ("HAVERHILL", "FL"),
  ("HAVERHILL", "IA"),
  ("HAVERSTRAW", "NY"),
  ("HAVILAND", "NY"),
  ("HAVILAND", "KS"),
  ("HAVILAND", "OH"),
  ("HAVRE", "MT"),
  ("HAVRE DE GRACE", "MD"),
  ("HAVRE NORTH", "MT"),
  ("HAW RIVER", "NC"),
  ("HAWAIIAN ACRES", "HI"),
  ("HAWAIIAN BEACHES", "HI"),
  ("HAWAIIAN GARDENS", "CA"),
  ("HAWAIIAN OCEAN VIEW", "HI"),
  ("HAWAIIAN PARADISE PARK", "HI"),
  ("HAWARDEN", "IA"),
  ("HAWESVILLE", "KY"),
  ("HAWI", "HI"),
  ("HAWK COVE", "TX"),
  ("HAWK POINT", "MO"),
  ("HAWK RUN", "PA"),
  ("HAWK SPRINGS", "WY"),
  ("HAWKEYE", "IA"),
  ("HAWKINS", "TX"),
  ("HAWKINS", "WI"),
  ("HAWKINSVILLE", "GA"),
  ("HAWLEY", "TX"),
  ("HAWLEY", "MN"),
  ("HAWLEY", "PA"),
  ("HAWORTH", "NJ"),
  ("HAWORTH", "OK"),
  ("HAWTHORN", "PA"),
  ("HAWTHORN WOODS", "IL"),
  ("HAWTHORNE", "CA"),
  ("HAWTHORNE", "FL"),
  ("HAWTHORNE", "NJ"),
  ("HAWTHORNE", "NV"),
  ("HAWTHORNE", "NY"),
  ("HAXTUN", "CO"),
  ("HAY SPRINGS", "NE"),
  ("HAYDEN", "ID"),
  ("HAYDEN", "CO"),
  ("HAYDEN", "IN"),
  ("HAYDEN", "AZ"),
  ("HAYDEN", "AL"),
  ("HAYDEN LAKE", "ID"),
  ("HAYDENVILLE", "OH"),
  ("HAYES", "LA"),
  ("HAYES CENTER", "NE"),
  ("HAYESVILLE", "OR"),
  ("HAYESVILLE", "OH"),
  ("HAYESVILLE", "NC"),
  ("HAYESVILLE", "IA"),
  ("HAYFIELD", "VA"),
  ("HAYFIELD", "MN"),
  ("HAYFIELD", "IA"),
  ("HAYFORK", "CA"),
  ("HAYMARKET", "VA"),
  ("HAYNES", "AR"),
  ("HAYNES", "ND"),
  ("HAYNESVILLE", "LA"),
  ("HAYNEVILLE", "AL"),
  ("HAYS", "MT"),
  ("HAYS", "KS"),
  ("HAYS", "NC"),
  ("HAYS", "TX"),
  ("HAYSI", "VA"),
  ("HAYSVILLE", "KS"),
  ("HAYSVILLE", "PA"),
  ("HAYTI", "MO"),
  ("HAYTI", "SD"),
  ("HAYTI HEIGHTS", "MO"),
  ("HAYWARD", "CA"),
  ("HAYWARD", "WI"),
  ("HAYWARD", "MN"),
  ("HAYWARD", "MO"),
  ("HAYWOOD CITY", "MO"),
  ("HAZARD", "KY"),
  ("HAZARD", "NE"),
  ("HAZARDVILLE", "CT"),
  ("HAZEL", "KY"),
  ("HAZEL", "SD"),
  ("HAZEL CREST", "IL"),
  ("HAZEL DELL", "WA"),
  ("HAZEL GREEN", "AL"),
  ("HAZEL GREEN", "WI"),
  ("HAZEL GREEN", "KY"),
  ("HAZEL PARK", "MI"),
  ("HAZEL RUN", "MN"),
  ("HAZELTON", "KS"),
  ("HAZELTON", "ID"),
  ("HAZELTON", "ND"),
  ("HAZELWOOD", "MO"),
  ("HAZEN", "AR"),
  ("HAZEN", "ND"),
  ("HAZLEHURST", "GA"),
  ("HAZLEHURST", "MS"),
  ("HAZLETON", "PA"),
  ("HAZLETON", "IA"),
  ("HAZLETON", "IN"),
  ("HEAD OF THE HARBOR", "NY"),
  ("HEADLAND", "AL"),
  ("HEADRICK", "OK"),
  ("HEALDSBURG", "CA"),
  ("HEALDTON", "OK"),
  ("HEALY", "AK"),
  ("HEALY", "KS"),
  ("HEALY LAKE", "AK"),
  ("HEARNE", "TX"),
  ("HEART BUTTE", "MT"),
  ("HEARTWELL", "NE"),
  ("HEATH", "OH"),
  ("HEATH", "TX"),
  ("HEATH", "AL"),
  ("HEATH SPRINGS", "SC"),
  ("HEATHCOTE", "NJ"),
  ("HEATHROW", "FL"),
  ("HEATHSVILLE", "VA"),
  ("HEAVENER", "OK"),
  ("HEBBRONVILLE", "TX"),
  ("HEBER", "UT"),
  ("HEBER", "CA"),
  ("HEBER SPRINGS", "AR"),
  ("HEBER-OVERGAARD", "AZ"),
  ("HEBGEN LAKE ESTATES", "MT"),
  ("HEBO", "OR"),
  ("HEBRON", "KY"),
  ("HEBRON", "OH"),
  ("HEBRON", "WI"),
  ("HEBRON", "IN"),
  ("HEBRON", "IL"),
  ("HEBRON", "ND"),
  ("HEBRON", "NE"),
  ("HEBRON", "TX"),
  ("HEBRON", "MD"),
  ("HEBRON", "PA"),
  ("HEBRON ESTATES", "KY"),
  ("HECKER", "IL"),
  ("HECKSCHERVILLE", "PA"),
  ("HECLA", "SD"),
  ("HECTOR", "AR"),
  ("HECTOR", "MN"),
  ("HEDGESVILLE", "WV"),
  ("HEDLEY", "TX"),
  ("HEDRICK", "IA"),
  ("HEDWIG VILLAGE", "TX"),
  ("HEEIA", "HI"),
  ("HEENEY", "CO"),
  ("HEFLIN", "AL"),
  ("HEFLIN", "LA"),
  ("HEGINS", "PA"),
  ("HEIDELBERG", "MS"),
  ("HEIDELBERG", "TX"),
  ("HEIDELBERG", "MN"),
  ("HEIDELBERG", "PA"),
  ("HEIDLERSBURG", "PA"),
  ("HEIL", "ND"),
  ("HEILWOOD", "PA"),
  ("HEIMDAL", "ND"),
  ("HELEN", "GA"),
  ("HELEN", "WV"),
  ("HELENA", "AL"),
  ("HELENA", "MT"),
  ("HELENA", "MS"),
  ("HELENA", "GA"),
  ("HELENA", "OK"),
  ("HELENA", "OH"),
  ("HELENA FLATS", "MT"),
  ("HELENA VALLEY NORTHEAST", "MT"),
  ("HELENA VALLEY NORTHWEST", "MT"),
  ("HELENA VALLEY SOUTHEAST", "MT"),
  ("HELENA VALLEY WEST CENTRAL", "MT"),
  ("HELENA WEST SIDE", "MT"),
  ("HELENA-WEST HELENA", "AR"),
  ("HELENVILLE", "WI"),
  ("HELENWOOD", "TN"),
  ("HELIX", "OR"),
  ("HELLERTOWN", "PA"),
  ("HELMETTA", "NJ"),
  ("HELOTES", "TX"),
  ("HELPER", "UT"),
  ("HELVETIA", "WV"),
  ("HEMBY BRIDGE", "NC"),
  ("HEMET", "CA"),
  ("HEMINGFORD", "NE"),
  ("HEMINGWAY", "SC"),
  ("HEMLOCK", "MI"),
  ("HEMLOCK", "NY"),
  ("HEMLOCK", "OH"),
  ("HEMLOCK FARMS", "PA"),
  ("HEMPHILL", "TX"),
  ("HEMPSTEAD", "TX"),
  ("HEMPSTEAD", "NY"),
  ("HENAGAR", "AL"),
  ("HENDERSON", "NV"),
  ("HENDERSON", "KY"),
  ("HENDERSON", "TX"),
  ("HENDERSON", "NC"),
  ("HENDERSON", "TN"),
  ("HENDERSON", "MI"),
  ("HENDERSON", "LA"),
  ("HENDERSON", "GA"),
  ("HENDERSON", "MN"),
  ("HENDERSON", "NE"),
  ("HENDERSON", "NY"),
  ("HENDERSON", "WV"),
  ("HENDERSON", "IL"),
  ("HENDERSON", "IA"),
  ("HENDERSON", "MD"),
  ("HENDERSON POINT", "MS"),
  ("HENDERSONVILLE", "TN"),
  ("HENDERSONVILLE", "NC"),
  ("HENDERSONVILLE", "PA"),
  ("HENDLEY", "NE"),
  ("HENDRICKS", "MN"),
  ("HENDRICKS", "WV"),
  ("HENDRIX", "OK"),
  ("HENDRON", "KY"),
  ("HENDRUM", "MN"),
  ("HENEFER", "UT"),
  ("HENLAWSON", "WV"),
  ("HENLOPEN ACRES", "DE"),
  ("HENNEPIN", "IL"),
  ("HENNESSEY", "OK"),
  ("HENNIKER", "NH"),
  ("HENNING", "MN"),
  ("HENNING", "TN"),
  ("HENNING", "IL"),
  ("HENRIETTA", "TX"),
  ("HENRIETTA", "MO"),
  ("HENRIETTA", "NC"),
  ("HENRIETTE", "MN"),
  ("HENRIEVILLE", "UT"),
  ("HENRY", "SD"),
  ("HENRY", "TN"),
  ("HENRY", "IL"),
  ("HENRY", "NE"),
  ("HENRY FORK", "VA"),
  ("HENRYETTA", "OK"),
  ("HENRYVILLE", "IN"),
  ("HENSLEY", "AR"),
  ("HEPBURN", "IA"),
  ("HEPHZIBAH", "GA"),
  ("HEPLER", "KS"),
  ("HEPPNER", "OR"),
  ("HEPZIBAH", "WV"),
  ("HERALD", "CA"),
  ("HERALD HARBOR", "MD"),
  ("HERBST", "IN"),
  ("HERBSTER", "WI"),
  ("HERCULANEUM", "MO"),
  ("HERCULES", "CA"),
  ("HEREFORD", "TX"),
  ("HEREFORD", "PA"),
  ("HERINGTON", "KS"),
  ("HERITAGE CREEK", "KY"),
  ("HERITAGE HILLS", "NY"),
  ("HERITAGE LAKE", "IN"),
  ("HERITAGE LAKE", "IL"),
  ("HERITAGE PINES", "FL"),
  ("HERITAGE VILLAGE", "CT"),
  ("HERKIMER", "NY"),
  ("HERLONG", "CA"),
  ("HERMAN", "MN"),
  ("HERMAN", "NE"),
  ("HERMANN", "MO"),
  ("HERMANTOWN", "MN"),
  ("HERMINIE", "PA"),
  ("HERMISTON", "OR"),
  ("HERMITAGE", "PA"),
  ("HERMITAGE", "MO"),
  ("HERMITAGE", "AR"),
  ("HERMLEIGH", "TX"),
  ("HERMON", "NY"),
  ("HERMOSA", "SD"),
  ("HERMOSA BEACH", "CA"),
  ("HERNANDEZ", "NM"),
  ("HERNANDO", "FL"),
  ("HERNANDO", "MS"),
  ("HERNANDO BEACH", "FL"),
  ("HERNDON", "VA"),
  ("HERNDON", "PA"),
  ("HERNDON", "KS"),
  ("HERON", "MT"),
  ("HERON BAY", "GA"),
  ("HERON LAKE", "MN"),
  ("HERREID", "SD"),
  ("HERRICK", "SD"),
  ("HERRICK", "IL"),
  ("HERRICKS", "NY"),
  ("HERRIMAN", "UT"),
  ("HERRIN", "IL"),
  ("HERRINGS", "NY"),
  ("HERRON", "MT"),
  ("HERRON ISLAND", "WA"),
  ("HERSCHER", "IL"),
  ("HERSEY", "MI"),
  ("HERSHEY", "PA"),
  ("HERSHEY", "NE"),
  ("HERTFORD", "NC"),
  ("HESPERIA", "CA"),
  ("HESPERIA", "MI"),
  ("HESSMER", "LA"),
  ("HESSTON", "KS"),
  ("HESSVILLE", "OH"),
  ("HESTER", "LA"),
  ("HETLAND", "SD"),
  ("HETTICK", "IL"),
  ("HETTINGER", "ND"),
  ("HEUVELTON", "NY"),
  ("HEWITT", "TX"),
  ("HEWITT", "MN"),
  ("HEWITT", "WI"),
  ("HEWLETT", "NY"),
  ("HEWLETT BAY PARK", "NY"),
  ("HEWLETT HARBOR", "NY"),
  ("HEWLETT NECK", "NY"),
  ("HEYBURN", "ID"),
  ("HEYWORTH", "IL"),
  ("HIALEAH", "FL"),
  ("HIALEAH GARDENS", "FL"),
  ("HIAWASSEE", "GA"),
  ("HIAWATHA", "IA"),
  ("HIAWATHA", "KS"),
  ("HIBBING", "MN"),
  ("HICKAM HOUSING", "HI"),
  ("HICKMAN", "KY"),
  ("HICKMAN", "CA"),
  ("HICKMAN", "NE"),
  ("HICKORY", "NC"),
  ("HICKORY", "PA"),
  ("HICKORY", "MS"),
  ("HICKORY", "OK"),
  ("HICKORY CORNERS", "MI"),
  ("HICKORY CREEK", "TX"),
  ("HICKORY FLAT", "MS"),
  ("HICKORY GROVE", "SC"),
  ("HICKORY HILL", "KY"),
  ("HICKORY HILLS", "IL"),
  ("HICKORY HILLS", "PA"),
  ("HICKORY RIDGE", "AR"),
  ("HICKORY VALLEY", "TN"),
  ("HICKSVILLE", "NY"),
  ("HICKSVILLE", "OH"),
  ("HICO", "WV"),
  ("HICO", "TX"),
  ("HIDALGO", "TX"),
  ("HIDALGO", "IL"),
  ("HIDDEN HILLS", "CA"),
  ("HIDDEN LAKE", "CO"),
  ("HIDDEN MEADOWS", "CA"),
  ("HIDDEN SPRING", "ID"),
  ("HIDDEN VALLEY", "IN"),
  ("HIDDEN VALLEY LAKE", "CA"),
  ("HIDDENITE", "NC"),
  ("HIDEAWAY", "TX"),
  ("HIDE-A-WAY HILLS", "OH"),
  ("HIDE-A-WAY LAKE", "MS"),
  ("HIDEOUT", "UT"),
  ("HIGBEE", "MO"),
  ("HIGDEN", "AR"),
  ("HIGGANUM", "CT"),
  ("HIGGINS", "TX"),
  ("HIGGINSON", "AR"),
  ("HIGGINSPORT", "OH"),
  ("HIGGINSVILLE", "MO"),
  ("HIGGSTON", "GA"),
  ("HIGH AMANA", "IA"),
  ("HIGH BRIDGE", "WA"),
  ("HIGH BRIDGE", "NJ"),
  ("HIGH BRIDGE", "KY"),
  ("HIGH FALLS", "NY"),
  ("HIGH HILL", "MO"),
  ("HIGH POINT", "NC"),
  ("HIGH POINT", "FL"),
  ("HIGH RIDGE", "MO"),
  ("HIGH ROLLS", "NM"),
  ("HIGH SHOALS", "NC"),
  ("HIGH SPRINGS", "FL"),
  ("HIGHFIELD-CASCADE", "MD"),
  ("HIGHFILL", "AR"),
  ("HIGHGROVE", "CA"),
  ("HIGHLAND", "CA"),
  ("HIGHLAND", "AR"),
  ("HIGHLAND", "UT"),
  ("HIGHLAND", "IN"),
  ("HIGHLAND", "IL"),
  ("HIGHLAND", "NY"),
  ("HIGHLAND", "MD"),
  ("HIGHLAND", "IN"),
  ("HIGHLAND", "WI"),
  ("HIGHLAND", "KS"),
  ("HIGHLAND", "OH"),
  ("HIGHLAND ACRES", "DE"),
  ("HIGHLAND BEACH", "FL"),
  ("HIGHLAND BEACH", "MD"),
  ("HIGHLAND CITY", "FL"),
  ("HIGHLAND FALLS", "NY"),
  ("HIGHLAND HAVEN", "TX"),
  ("HIGHLAND HEIGHTS", "OH"),
  ("HIGHLAND HEIGHTS", "KY"),
  ("HIGHLAND HILLS", "OH"),
  ("HIGHLAND HOLIDAY", "OH"),
  ("HIGHLAND LAKE", "NJ"),
  ("HIGHLAND LAKE", "AL"),
  ("HIGHLAND LAKES", "AL"),
  ("HIGHLAND MEADOWS", "NM"),
  ("HIGHLAND PARK", "IL"),
  ("HIGHLAND PARK", "MI"),
  ("HIGHLAND PARK", "TX"),
  ("HIGHLAND PARK", "NJ"),
  ("HIGHLAND PARK", "PA"),
  ("HIGHLAND PARK", "FL"),
  ("HIGHLAND SPRINGS", "VA"),
  ("HIGHLAND VILLAGE", "TX"),
  ("HIGHLANDS", "NC"),
  ("HIGHLANDS", "TX"),
  ("HIGHLANDS", "NJ"),
  ("HIGHLANDS RANCH", "CO"),
  ("HIGHLANDS-BAYWOOD PARK", "CA"),
  ("HIGHLANDVILLE", "MO"),
  ("HIGHMORE", "SD"),
  ("HIGHPOINT", "OH"),
  ("HIGHSPIRE", "PA"),
  ("HIGHTSTOWN", "NJ"),
  ("HIGHTSVILLE", "NC"),
  ("HIGHWOOD", "MT"),
  ("HIGHWOOD", "IL"),
  ("HIKO", "NV"),
  ("HILBERT", "WI"),
  ("HILDA", "SC"),
  ("HILDALE", "UT"),
  ("HILDEBRAN", "NC"),
  ("HILDRETH", "NE"),
  ("HILL CITY", "MN"),
  ("HILL CITY", "SD"),
  ("HILL CITY", "KS"),
  ("HILL COUNTRY VILLAGE", "TX"),
  ("HILL 'N DALE", "FL"),
  ("HILL VIEW HEIGHTS", "WY"),
  ("HILLANDALE", "MD"),
  ("HILLBURN", "NY"),
  ("HILLCREST", "IL"),
  ("HILLCREST", "NY"),
  ("HILLCREST", "TX"),
  ("HILLCREST HEIGHTS", "MD"),
  ("HILLCREST HEIGHTS", "FL"),
  ("HILLDALE", "PA"),
  ("HILLER", "PA"),
  ("HILLIARD", "OH"),
  ("HILLIARD", "FL"),
  ("HILLMAN", "MI"),
  ("HILLMAN", "MN"),
  ("HILLROSE", "CO"),
  ("HILLS", "IA"),
  ("HILLS", "MN"),
  ("HILLS AND DALES", "OH"),
  ("HILLS AND DALES", "KY"),
  ("HILLSBORO", "OR"),
  ("HILLSBORO", "TX"),
  ("HILLSBORO", "MS"),
  ("HILLSBORO", "IL"),
  ("HILLSBORO", "OH"),
  ("HILLSBORO", "TN"),
  ("HILLSBORO", "MO"),
  ("HILLSBORO", "KS"),
  ("HILLSBORO", "NM"),
  ("HILLSBORO", "AL"),
  ("HILLSBORO", "WI"),
  ("HILLSBORO", "ND"),
  ("HILLSBORO", "IA"),
  ("HILLSBORO", "WV"),
  ("HILLSBORO", "IN"),
  ("HILLSBORO", "MD"),
  ("HILLSBORO", "VA"),
  ("HILLSBORO BEACH", "FL"),
  ("HILLSBORO PINES", "FL"),
  ("HILLSBOROUGH", "CA"),
  ("HILLSBOROUGH", "NC"),
  ("HILLSBOROUGH", "NH"),
  ("HILLSDALE", "MI"),
  ("HILLSDALE", "NJ"),
  ("HILLSDALE", "KS"),
  ("HILLSDALE", "NC"),
  ("HILLSDALE", "WY"),
  ("HILLSDALE", "IL"),
  ("HILLSDALE", "OK"),
  ("HILLSDALE", "MO"),
  ("HILLSIDE", "IL"),
  ("HILLSIDE", "NY"),
  ("HILLSIDE ACRES", "TX"),
  ("HILLSIDE LAKE", "NY"),
  ("HILLSVIEW", "SD"),
  ("HILLSVILLE", "VA"),
  ("HILLTOP", "TX"),
  ("HILLTOP", "GA"),
  ("HILLTOP", "WV"),
  ("HILLTOP", "OH"),
  ("HILLTOP", "MN"),
  ("HILLTOP", "TX"),
  ("HILLTOP LAKES", "TX"),
  ("HILLVIEW", "KY"),
  ("HILLVIEW", "IL"),
  ("HILMAR-IRWIN", "CA"),
  ("HILO", "HI"),
  ("HILSHIRE VILLAGE", "TX"),
  ("HILTON", "NY"),
  ("HILTON HEAD ISLAND", "SC"),
  ("HILTONIA", "GA"),
  ("HINCKLEY", "UT"),
  ("HINCKLEY", "MN"),
  ("HINCKLEY", "IL"),
  ("HINDMAN", "KY"),
  ("HINDSBORO", "IL"),
  ("HINDSVILLE", "AR"),
  ("HI-NELLA", "NJ"),
  ("HINES", "OR"),
  ("HINESBURG", "VT"),
  ("HINESVILLE", "GA"),
  ("HINGHAM", "MA"),
  ("HINGHAM", "WI"),
  ("HINGHAM", "MT"),
  ("HINSDALE", "MT"),
  ("HINSDALE", "IL"),
  ("HINSDALE", "NH"),
  ("HINTON", "OK"),
  ("HINTON", "WV"),
  ("HINTON", "IA"),
  ("HIOUCHI", "CA"),
  ("HIRAM", "GA"),
  ("HIRAM", "OH"),
  ("HISEVILLE", "KY"),
  ("HISSOP", "AL"),
  ("HITCHCOCK", "TX"),
  ("HITCHCOCK", "SD"),
  ("HITCHCOCK", "OK"),
  ("HITCHITA", "OK"),
  ("HITTERDAL", "MN"),
  ("HIWASSE", "AR"),
  ("HIWASSEE", "VA"),
  ("HIXTON", "WI"),
  ("HOAGLAND", "IN"),
  ("HOBACK", "WY"),
  ("HOBART", "WI"),
  ("HOBART", "IN"),
  ("HOBART", "WA"),
  ("HOBART", "OK"),
  ("HOBART", "NY"),
  ("HOBART BAY", "AK"),
  ("HOBBS", "NM"),
  ("HOBE SOUND", "FL"),
  ("HOBERG", "MO"),
  ("HOBGOOD", "NC"),
  ("HOBOKEN", "GA"),
  ("HOBOKEN", "NJ"),
  ("HOBSON", "AL"),
  ("HOBSON", "MT"),
  ("HOBSON CITY", "AL"),
  ("HOBUCKEN", "NC"),
  ("HOCKESSIN", "DE"),
  ("HOCKINGPORT", "OH"),
  ("HOCKINSON", "WA"),
  ("HODGE", "LA"),
  ("HODGENVILLE", "KY"),
  ("HODGES", "AL"),
  ("HODGES", "SC"),
  ("HODGKINS", "IL"),
  ("HOEHNE", "CO"),
  ("HOFFMAN", "NC"),
  ("HOFFMAN", "MN"),
  ("HOFFMAN", "IL"),
  ("HOFFMAN", "OK"),
  ("HOFFMAN ESTATES", "IL"),
  ("HOGANS CORNER", "WA"),
  ("HOGANSVILLE", "GA"),
  ("HOHENWALD", "TN"),
  ("HO-HO-KUS", "NJ"),
  ("HOISINGTON", "KS"),
  ("HOKAH", "MN"),
  ("HOKENDAUQUA", "PA"),
  ("HOKES BLUFF", "AL"),
  ("HOLBROOK", "AZ"),
  ("HOLBROOK", "MA"),
  ("HOLBROOK", "NY"),
  ("HOLBROOK", "NE"),
  ("HOLCOMB", "MS"),
  ("HOLCOMB", "KS"),
  ("HOLCOMB", "MO"),
  ("HOLCOMBE", "WI"),
  ("HOLDEN", "WV"),
  ("HOLDEN", "MO"),
  ("HOLDEN", "UT"),
  ("HOLDEN BEACH", "NC"),
  ("HOLDEN HEIGHTS", "FL"),
  ("HOLDENVILLE", "OK"),
  ("HOLDINGFORD", "MN"),
  ("HOLDREGE", "NE"),
  ("HOLGATE", "OH"),
  ("HOLIDAY", "FL"),
  ("HOLIDAY BEACH", "TX"),
  ("HOLIDAY CITY", "OH"),
  ("HOLIDAY CITY SOUTH", "NJ"),
  ("HOLIDAY CITY-BERKELEY", "NJ"),
  ("HOLIDAY HEIGHTS", "NJ"),
  ("HOLIDAY HILLS", "IL"),
  ("HOLIDAY ISLAND", "AR"),
  ("HOLIDAY LAKE", "IA"),
  ("HOLIDAY LAKES", "OH"),
  ("HOLIDAY LAKES", "TX"),
  ("HOLIDAY POCONO", "PA"),
  ("HOLIDAY SHORES", "IL"),
  ("HOLIDAY VALLEY", "OH"),
  ("HOLLADAY", "UT"),
  ("HOLLAND", "MI"),
  ("HOLLAND", "AR"),
  ("HOLLAND", "NY"),
  ("HOLLAND", "MA"),
  ("HOLLAND", "TX"),
  ("HOLLAND", "OH"),
  ("HOLLAND", "MN"),
  ("HOLLAND", "IN"),
  ("HOLLAND", "IA"),
  ("HOLLAND", "MO"),
  ("HOLLAND PATENT", "NY"),
  ("HOLLANDALE", "MS"),
  ("HOLLANDALE", "WI"),
  ("HOLLANDALE", "MN"),
  ("HOLLANSBURG", "OH"),
  ("HOLLENBERG", "KS"),
  ("HOLLEY", "FL"),
  ("HOLLEY", "OR"),
  ("HOLLEY", "NY"),
  ("HOLLIDAY", "TX"),
  ("HOLLIDAY", "MO"),
  ("HOLLIDAYSBURG", "PA"),
  ("HOLLINS", "AL"),
  ("HOLLINS", "VA"),
  ("HOLLIS", "AK"),
  ("HOLLIS", "OK"),
  ("HOLLIS CROSSROADS", "AL"),
  ("HOLLISTER", "CA"),
  ("HOLLISTER", "MO"),
  ("HOLLISTER", "NC"),
  ("HOLLISTER", "ID"),
  ("HOLLISTER", "OK"),
  ("HOLLOMAN AFB", "NM"),
  ("HOLLOW CREEK", "KY"),
  ("HOLLOW ROCK", "TN"),
  ("HOLLOWAY", "MN"),
  ("HOLLOWAY", "OH"),
  ("HOLLOWAYVILLE", "IL"),
  ("HOLLY", "MI"),
  ("HOLLY", "CO"),
  ("HOLLY GROVE", "AR"),
  ("HOLLY HILL", "FL"),
  ("HOLLY HILL", "SC"),
  ("HOLLY HILLS", "CO"),
  ("HOLLY LAKE RANCH", "TX"),
  ("HOLLY POND", "AL"),
  ("HOLLY RIDGE", "NC"),
  ("HOLLY SPRINGS", "NC"),
  ("HOLLY SPRINGS", "MS"),
  ("HOLLY SPRINGS", "GA"),
  ("HOLLYMEAD", "VA"),
  ("HOLLYVILLA", "KY"),
  ("HOLLYWOOD", "FL"),
  ("HOLLYWOOD", "SC"),
  ("HOLLYWOOD", "AL"),
  ("HOLLYWOOD PARK", "TX"),
  ("HOLMEN", "WI"),
  ("HOLMES BEACH", "FL"),
  ("HOLMESVILLE", "OH"),
  ("HOLMESVILLE", "NE"),
  ("HOLSTEIN", "IA"),
  ("HOLSTEIN", "NE"),
  ("HOLT", "MI"),
  ("HOLT", "AL"),
  ("HOLT", "MN"),
  ("HOLT", "MO"),
  ("HOLTON", "KS"),
  ("HOLTON", "IN"),
  ("HOLTS SUMMIT", "MO"),
  ("HOLTSVILLE", "NY"),
  ("HOLTVILLE", "AL"),
  ("HOLTVILLE", "CA"),
  ("HOLUALOA", "HI"),
  ("HOLY CROSS", "AK"),
  ("HOLY CROSS", "IA"),
  ("HOLYOKE", "MA"),
  ("HOLYOKE", "CO"),
  ("HOLYROOD", "KS"),
  ("HOMA HILLS", "WY"),
  ("HOME", "WA"),
  ("HOME", "KS"),
  ("HOME GARDEN", "CA"),
  ("HOME GARDENS", "CA"),
  ("HOMEACRE-LYNDORA", "PA"),
  ("HOMECROFT", "IN"),
  ("HOMEDALE", "ID"),
  ("HOMELAND", "CA"),
  ("HOMELAND", "GA"),
  ("HOMELAND", "FL"),
  ("HOMELAND PARK", "SC"),
  ("HOMER", "AK"),
  ("HOMER", "GA"),
  ("HOMER", "LA"),
  ("HOMER", "NY"),
  ("HOMER", "MI"),
  ("HOMER", "MN"),
  ("HOMER", "IL"),
  ("HOMER", "NE"),
  ("HOMER CITY", "PA"),
  ("HOMER GLEN", "IL"),
  ("HOMERVILLE", "GA"),
  ("HOMESTEAD", "FL"),
  ("HOMESTEAD", "IA"),
  ("HOMESTEAD", "NM"),
  ("HOMESTEAD", "PA"),
  ("HOMESTEAD", "MO"),
  ("HOMESTEAD BASE", "FL"),
  ("HOMESTEAD MEADOWS NORTH", "TX"),
  ("HOMESTEAD MEADOWS SOUTH", "TX"),
  ("HOMESTEAD VALLEY", "CA"),
  ("HOMESTOWN", "MO"),
  ("HOMETOWN", "PA"),
  ("HOMETOWN", "WV"),
  ("HOMETOWN", "IL"),
  ("HOMEWOOD", "AL"),
  ("HOMEWOOD", "IL"),
  ("HOMEWOOD", "PA"),
  ("HOMEWOOD CANYON", "CA"),
  ("HOMEWORTH", "OH"),
  ("HOMINY", "OK"),
  ("HOMOSASSA", "FL"),
  ("HOMOSASSA SPRINGS", "FL"),
  ("HONAKER", "VA"),
  ("HONALO", "HI"),
  ("HONAUNAU-NAPOOPOO", "HI"),
  ("HONCUT", "CA"),
  ("HONDAH", "AZ"),
  ("HONDO", "TX"),
  ("HONEA PATH", "SC"),
  ("HONEOYE", "NY"),
  ("HONEOYE FALLS", "NY"),
  ("HONESDALE", "PA"),
  ("HONEY BROOK", "PA"),
  ("HONEY GROVE", "TX"),
  ("HONEYVILLE", "UT"),
  ("HONOKAA", "HI"),
  ("HONOLULU", "HI"),
  ("HONOMU", "HI"),
  ("HONOR", "MI"),
  ("HOOD", "CA"),
  ("HOOD RIVER", "OR"),
  ("HOODSPORT", "WA"),
  ("HOOKER", "OK"),
  ("HOOKERTON", "NC"),
  ("HOOKS", "TX"),
  ("HOOKSETT", "NH"),
  ("HOOKSTOWN", "PA"),
  ("HOONAH", "AK"),
  ("HOOPER", "UT"),
  ("HOOPER", "NE"),
  ("HOOPER", "CO"),
  ("HOOPER BAY", "AK"),
  ("HOOPERS CREEK", "NC"),
  ("HOOPESTON", "IL"),
  ("HOOPLE", "ND"),
  ("HOOPPOLE", "IL"),
  ("HOOSICK FALLS", "NY"),
  ("HOOT OWL", "OK"),
  ("HOOVEN", "OH"),
  ("HOOVER", "AL"),
  ("HOOVERSON HEIGHTS", "WV"),
  ("HOOVERSVILLE", "PA"),
  ("HOP BOTTOM", "PA"),
  ("HOPATCONG", "NJ"),
  ("HOPE", "AK"),
  ("HOPE", "AR"),
  ("HOPE", "NM"),
  ("HOPE", "IN"),
  ("HOPE", "ND"),
  ("HOPE", "NJ"),
  ("HOPE", "ID"),
  ("HOPE", "KS"),
  ("HOPE MILLS", "NC"),
  ("HOPE VALLEY", "RI"),
  ("HOPEDALE", "MA"),
  ("HOPEDALE", "OH"),
  ("HOPEDALE", "IL"),
  ("HOPELAND", "PA"),
  ("HOPEWELL", "VA"),
  ("HOPEWELL", "TN"),
  ("HOPEWELL", "IL"),
  ("HOPEWELL", "NJ"),
  ("HOPEWELL", "PA"),
  ("HOPEWELL JUNCTION", "NY"),
  ("HOPKINS", "SC"),
  ("HOPKINS", "MN"),
  ("HOPKINS", "MO"),
  ("HOPKINS", "MI"),
  ("HOPKINS PARK", "IL"),
  ("HOPKINSVILLE", "KY"),
  ("HOPKINTON", "MA"),
  ("HOPKINTON", "IA"),
  ("HOPLAND", "CA"),
  ("HOPWOOD", "PA"),
  ("HOQUIAM", "WA"),
  ("HORACE", "ND"),
  ("HORACE", "KS"),
  ("HORATIO", "AR"),
  ("HORDVILLE", "NE"),
  ("HORICON", "WI"),
  ("HORINE", "MO"),
  ("HORIZON CITY", "TX"),
  ("HORIZON WEST", "FL"),
  ("HORMIGUEROS", "PR"),
  ("HORN HILL", "AL"),
  ("HORN LAKE", "MS"),
  ("HORNBEAK", "TN"),
  ("HORNBECK", "LA"),
  ("HORNBROOK", "CA"),
  ("HORNELL", "NY"),
  ("HORNERSVILLE", "MO"),
  ("HORNICK", "IA"),
  ("HORNITOS", "CA"),
  ("HORNSBY", "TN"),
  ("HORNSBY BEND", "TX"),
  ("HORNTOWN", "VA"),
  ("HORNTOWN", "OK"),
  ("HORSE CAVE", "KY"),
  ("HORSE PASTURE", "VA"),
  ("HORSE SHOE", "NC"),
  ("HORSEHEADS", "NY"),
  ("HORSEHEADS NORTH", "NY"),
  ("HORSESHOE BAY", "TX"),
  ("HORSESHOE BEACH", "FL"),
  ("HORSESHOE BEND", "AR"),
  ("HORSESHOE BEND", "TX"),
  ("HORSESHOE BEND", "ID"),
  ("HORSESHOE LAKE", "AR"),
  ("HORSHAM", "PA"),
  ("HORTON", "KS"),
  ("HORTON BAY", "MI"),
  ("HORTONVILLE", "WI"),
  ("HORTONVILLE", "NY"),
  ("HOSCHTON", "GA"),
  ("HOSFORD", "FL"),
  ("HOSKINS", "NE"),
  ("HOSMER", "SD"),
  ("HOSPERS", "IA"),
  ("HOSSTON", "LA"),
  ("HOSTETTER", "PA"),
  ("HOT SPRINGS", "AR"),
  ("HOT SPRINGS", "VA"),
  ("HOT SPRINGS", "SD"),
  ("HOT SPRINGS", "NC"),
  ("HOT SPRINGS", "MT"),
  ("HOT SPRINGS LANDING", "NM"),
  ("HOT SPRINGS VILLAGE", "AR"),
  ("HOT SULPHUR SPRINGS", "CO"),
  ("HOTCHKISS", "CO"),
  ("HOTEVILLA-BACAVI", "AZ"),
  ("HOUCK", "AZ"),
  ("HOUGHTON", "MI"),
  ("HOUGHTON", "NY"),
  ("HOUGHTON", "IA"),
  ("HOUGHTON LAKE", "MI"),
  ("HOULTON", "ME"),
  ("HOULTON", "WI"),
  ("HOUMA", "LA"),
  ("HOUSATONIC", "MA"),
  ("HOUSE", "NM"),
  ("HOUSERVILLE", "PA"),
  ("HOUSTON", "TX"),
  ("HOUSTON", "AK"),
  ("HOUSTON", "MS"),
  ("HOUSTON", "MO"),
  ("HOUSTON", "AR"),
  ("HOUSTON", "MN"),
  ("HOUSTON", "PA"),
  ("HOUSTON", "DE"),
  ("HOUSTON ACRES", "KY"),
  ("HOUSTON LAKE", "MO"),
  ("HOUSTONIA", "MO"),
  ("HOUTZDALE", "PA"),
  ("HOVEN", "SD"),
  ("HOWARD", "WI"),
  ("HOWARD", "CO"),
  ("HOWARD", "GA"),
  ("HOWARD", "SD"),
  ("HOWARD", "KS"),
  ("HOWARD", "PA"),
  ("HOWARD", "OH"),
  ("HOWARD CITY", "MI"),
  ("HOWARD CITY", "NE"),
  ("HOWARD LAKE", "MN"),
  ("HOWARDS GROVE", "WI"),
  ("HOWARDVILLE", "MO"),
  ("HOWARDWICK", "TX"),
  ("HOWE", "TX"),
  ("HOWE", "IN"),
  ("HOWE", "OK"),
  ("HOWELL", "UT"),
  ("HOWELL", "MI"),
  ("HOWELLS", "NE"),
  ("HOWEY-IN-THE-HILLS", "FL"),
  ("HOWLAND", "ME"),
  ("HOWLAND CENTER", "OH"),
  ("HOXIE", "AR"),
  ("HOXIE", "KS"),
  ("HOYLETON", "IL"),
  ("HOYT", "KS"),
  ("HOYT LAKES", "MN"),
  ("HOYTSVILLE", "UT"),
  ("HOYTVILLE", "OH"),
  ("HUACHUCA CITY", "AZ"),
  ("HUBBARD", "OH"),
  ("HUBBARD", "TX"),
  ("HUBBARD", "IA"),
  ("HUBBARD", "OR"),
  ("HUBBARD", "NE"),
  ("HUBBARD LAKE", "MI"),
  ("HUBBARDSTON", "MI"),
  ("HUBBELL", "MI"),
  ("HUBBELL", "NE"),
  ("HUBER HEIGHTS", "OH"),
  ("HUBER RIDGE", "OH"),
  ("HUBLERSBURG", "PA"),
  ("HUDSON", "OH"),
  ("HUDSON", "IA"),
  ("HUDSON", "WI"),
  ("HUDSON", "FL"),
  ("HUDSON", "MA"),
  ("HUDSON", "TX"),
  ("HUDSON", "CO"),
  ("HUDSON", "NC"),
  ("HUDSON", "NH"),
  ("HUDSON", "MI"),
  ("HUDSON", "NY"),
  ("HUDSON", "IL"),
  ("HUDSON", "IN"),
  ("HUDSON", "WY"),
  ("HUDSON", "PA"),
  ("HUDSON", "SD"),
  ("HUDSON", "KS"),
  ("HUDSON BEND", "TX"),
  ("HUDSON FALLS", "NY"),
  ("HUDSON LAKE", "IN"),
  ("HUDSON OAKS", "TX"),
  ("HUDSONVILLE", "MI"),
  ("HUETTER", "ID"),
  ("HUEY", "IL"),
  ("HUEYTOWN", "AL"),
  ("HUGHES", "AK"),
  ("HUGHES", "AR"),
  ("HUGHES SPRINGS", "TX"),
  ("HUGHESTOWN", "PA"),
  ("HUGHESVILLE", "MD"),
  ("HUGHESVILLE", "PA"),
  ("HUGHESVILLE", "MO"),
  ("HUGHSON", "CA"),
  ("HUGO", "MN"),
  ("HUGO", "OK"),
  ("HUGO", "CO"),
  ("HUGOTON", "KS"),
  ("HUGULEY", "AL"),
  ("HULBERT", "OK"),
  ("HULETT", "WY"),
  ("HULL", "MA"),
  ("HULL", "TX"),
  ("HULL", "IL"),
  ("HULL", "IA"),
  ("HULL", "GA"),
  ("HULMEVILLE", "PA"),
  ("HUMACAO", "PR"),
  ("HUMANSVILLE", "MO"),
  ("HUMBIRD", "WI"),
  ("HUMBLE", "TX"),
  ("HUMBOLDT", "TN"),
  ("HUMBOLDT", "IA"),
  ("HUMBOLDT", "KS"),
  ("HUMBOLDT", "NE"),
  ("HUMBOLDT", "SD"),
  ("HUMBOLDT", "IL"),
  ("HUMBOLDT", "MN"),
  ("HUMBOLDT HILL", "CA"),
  ("HUMBOLDT RIVER RANCH", "NV"),
  ("HUME", "MO"),
  ("HUME", "IL"),
  ("HUMESTON", "IA"),
  ("HUMMELS WHARF", "PA"),
  ("HUMMELSTOWN", "PA"),
  ("HUMNOKE", "AR"),
  ("HUMPHREY", "AR"),
  ("HUMPHREY", "NE"),
  ("HUMPHREYS", "MO"),
  ("HUMPTULIPS", "WA"),
  ("HUNDRED", "WV"),
  ("HUNGERFORD", "TX"),
  ("HUNGRY HORSE", "MT"),
  ("HUNKER", "PA"),
  ("HUNNEWELL", "MO"),
  ("HUNNEWELL", "KS"),
  ("HUNT", "NY"),
  ("HUNTER", "TN"),
  ("HUNTER", "MO"),
  ("HUNTER", "NY"),
  ("HUNTER", "OH"),
  ("HUNTER", "ND"),
  ("HUNTER", "AR"),
  ("HUNTER", "OK"),
  ("HUNTER", "KS"),
  ("HUNTER CREEK", "AZ"),
  ("HUNTERS CREEK", "FL"),
  ("HUNTERS CREEK VILLAGE", "TX"),
  ("HUNTERS HOLLOW", "KY"),
  ("HUNTERSTOWN", "PA"),
  ("HUNTERSVILLE", "NC"),
  ("HUNTERSVILLE", "WV"),
  ("HUNTERTOWN", "IN"),
  ("HUNTING VALLEY", "OH"),
  ("HUNTINGBURG", "IN"),
  ("HUNTINGDON", "TN"),
  ("HUNTINGDON", "PA"),
  ("HUNTINGTON", "WV"),
  ("HUNTINGTON", "IN"),
  ("HUNTINGTON", "NY"),
  ("HUNTINGTON", "MA"),
  ("HUNTINGTON", "TX"),
  ("HUNTINGTON", "UT"),
  ("HUNTINGTON", "VA"),
  ("HUNTINGTON", "OR"),
  ("HUNTINGTON", "AR"),
  ("HUNTINGTON BAY", "NY"),
  ("HUNTINGTON BEACH", "CA"),
  ("HUNTINGTON PARK", "CA"),
  ("HUNTINGTON STATION", "NY"),
  ("HUNTINGTON WOODS", "MI"),
  ("HUNTINGTOWN", "MD"),
  ("HUNTLAND", "TN"),
  ("HUNTLEIGH", "MO"),
  ("HUNTLEY", "IL"),
  ("HUNTLEY", "MT"),
  ("HUNTLEY", "NE"),
  ("HUNTLEY", "WY"),
  ("HUNTS POINT", "WA"),
  ("HUNTSDALE", "MO"),
  ("HUNTSVILLE", "AL"),
  ("HUNTSVILLE", "TX"),
  ("HUNTSVILLE", "TN"),
  ("HUNTSVILLE", "AR"),
  ("HUNTSVILLE", "MO"),
  ("HUNTSVILLE", "UT"),
  ("HUNTSVILLE", "OH"),
  ("HURDLAND", "MO"),
  ("HURDSFIELD", "ND"),
  ("HURLEY", "NY"),
  ("HURLEY", "MS"),
  ("HURLEY", "WI"),
  ("HURLEY", "NM"),
  ("HURLEY", "SD"),
  ("HURLEY", "MO"),
  ("HURLOCK", "MD"),
  ("HURON", "SD"),
  ("HURON", "OH"),
  ("HURON", "CA"),
  ("HURON", "KS"),
  ("HURRICANE", "UT"),
  ("HURRICANE", "WV"),
  ("HURST", "TX"),
  ("HURST", "IL"),
  ("HURSTBOURNE", "KY"),
  ("HURSTBOURNE ACRES", "KY"),
  ("HURT", "VA"),
  ("HURTSBORO", "AL"),
  ("HUSLIA", "AK"),
  ("HUSON", "MT"),
  ("HUSTISFORD", "WI"),
  ("HUSTLER", "WI"),
  ("HUSTONVILLE", "KY"),
  ("HUTCHINS", "TX"),
  ("HUTCHINS", "IA"),
  ("HUTCHINSON", "KS"),
  ("HUTCHINSON", "MN"),
  ("HUTCHINSON", "NJ"),
  ("HUTCHINSON ISLAND SOUTH", "FL"),
  ("HUTSONVILLE", "IL"),
  ("HUTTIG", "AR"),
  ("HUTTO", "TX"),
  ("HUTTON", "MD"),
  ("HUTTONSVILLE", "WV"),
  ("HUXLEY", "IA"),
  ("HUXLEY", "TX"),
  ("HYAMPOM", "CA"),
  ("HYANNIS", "NE"),
  ("HYATTSVILLE", "MD"),
  ("HYATTVILLE", "WY"),
  ("HYBLA VALLEY", "VA"),
  ("HYDABURG", "AK"),
  ("HYDE", "PA"),
  ("HYDE PARK", "UT"),
  ("HYDE PARK", "NY"),
  ("HYDE PARK", "VT"),
  ("HYDE PARK", "PA"),
  ("HYDE PARK", "PA"),
  ("HYDEN", "KY"),
  ("HYDER", "AK"),
  ("HYDESVILLE", "CA"),
  ("HYDETOWN", "PA"),
  ("HYDRO", "OK"),
  ("HYMERA", "IN"),
  ("HYNDMAN", "PA"),
  ("HYPOLUXO", "FL"),
  ("HYRUM", "UT"),
  ("HYSHAM", "MT"),
  ("HYTOP", "AL"),
  ("IAEGER", "WV"),
  ("IAGO", "TX"),
  ("IATAN", "MO"),
  ("IBERIA", "OH"),
  ("IBERIA", "MO"),
  ("ICARD", "NC"),
  ("ICEHOUSE CANYON", "AZ"),
  ("IDA", "LA"),
  ("IDA GROVE", "IA"),
  ("IDABEL", "OK"),
  ("IDAHO CITY", "ID"),
  ("IDAHO FALLS", "ID"),
  ("IDAHO SPRINGS", "CO"),
  ("IDALIA", "CO"),
  ("IDALOU", "TX"),
  ("IDAMAY", "WV"),
  ("IDANHA", "OR"),
  ("IDAVILLE", "IN"),
  ("IDAVILLE", "PA"),
  ("IDAVILLE", "OR"),
  ("IDEAL", "GA"),
  ("IDER", "AL"),
  ("IDLEDALE", "CO"),
  ("IDLEWILD", "CA"),
  ("IDYLLWILD-PINE COVE", "CA"),
  ("IDYLWOOD", "VA"),
  ("IGIUGIG", "AK"),
  ("IGLESIA ANTIGUA", "TX"),
  ("IGNACIO", "CO"),
  ("IHLEN", "MN"),
  ("ILA", "GA"),
  ("ILCHESTER", "MD"),
  ("ILIAMNA", "AK"),
  ("ILIFF", "CO"),
  ("ILION", "NY"),
  ("ILLIOPOLIS", "IL"),
  ("ILWACO", "WA"),
  ("IMBÈRY", "PR"),
  ("IMBLER", "OR"),
  ("IMBODEN", "AR"),
  ("IMLAY", "NV"),
  ("IMLAY CITY", "MI"),
  ("IMMOKALEE", "FL"),
  ("IMOGENE", "IA"),
  ("IMPACT", "TX"),
  ("IMPERIAL", "CA"),
  ("IMPERIAL", "MO"),
  ("IMPERIAL", "TX"),
  ("IMPERIAL", "PA"),
  ("IMPERIAL", "NE"),
  ("IMPERIAL BEACH", "CA"),
  ("INA", "IL"),
  ("INAVALE", "NE"),
  ("INCHELIUM", "WA"),
  ("INCLINE VILLAGE", "NV"),
  ("INDEPENDENCE", "MO"),
  ("INDEPENDENCE", "MN"),
  ("INDEPENDENCE", "UT"),
  ("INDEPENDENCE", "KY"),
  ("INDEPENDENCE", "OH"),
  ("INDEPENDENCE", "KS"),
  ("INDEPENDENCE", "IA"),
  ("INDEPENDENCE", "CA"),
  ("INDEPENDENCE", "OR"),
  ("INDEPENDENCE", "VA"),
  ("INDEPENDENCE", "LA"),
  ("INDEPENDENCE", "WI"),
  ("INDEPENDENT HILL", "VA"),
  ("INDEX", "WA"),
  ("INDIA HOOK", "SC"),
  ("INDIAHOMA", "OK"),
  ("INDIALANTIC", "FL"),
  ("INDIAN BEACH", "NC"),
  ("INDIAN CREEK", "FL"),
  ("INDIAN CREEK", "IL"),
  ("INDIAN FALLS", "CA"),
  ("INDIAN HARBOUR BEACH", "FL"),
  ("INDIAN HEAD", "MD"),
  ("INDIAN HEAD PARK", "IL"),
  ("INDIAN HEIGHTS", "IN"),
  ("INDIAN HILLS", "NV"),
  ("INDIAN HILLS", "NM"),
  ("INDIAN HILLS", "CO"),
  ("INDIAN HILLS", "TX"),
  ("INDIAN HILLS", "KY"),
  ("INDIAN LAKE", "PA"),
  ("INDIAN LAKE", "TX"),
  ("INDIAN MOUNTAIN LAKE", "PA"),
  ("INDIAN POINT", "MO"),
  ("INDIAN RIVER", "MI"),
  ("INDIAN RIVER ESTATES", "FL"),
  ("INDIAN RIVER SHORES", "FL"),
  ("INDIAN ROCKS BEACH", "FL"),
  ("INDIAN SHORES", "FL"),
  ("INDIAN SPRINGS", "NV"),
  ("INDIAN SPRINGS", "MT"),
  ("INDIAN SPRINGS", "GA"),
  ("INDIAN SPRINGS", "TX"),
  ("INDIAN SPRINGS", "MD"),
  ("INDIAN SPRINGS VILLAGE", "AL"),
  ("INDIAN TRAIL", "NC"),
  ("INDIAN VILLAGE", "IN"),
  ("INDIAN WELLS", "CA"),
  ("INDIAN WELLS", "AZ"),
  ("INDIANA", "PA"),
  ("INDIANAPOLIS", "IN"),
  ("INDIANOLA", "IA"),
  ("INDIANOLA", "MS"),
  ("INDIANOLA", "WA"),
  ("INDIANOLA", "CA"),
  ("INDIANOLA", "NE"),
  ("INDIANOLA", "OK"),
  ("INDIANOLA", "IL"),
  ("INDIANOLA", "OK"),
  ("INDIANTOWN", "FL"),
  ("INDIO", "CA"),
  ("INDIO", "TX"),
  ("INDIO HILLS", "CA"),
  ("INDIOS", "PR"),
  ("INDUSTRY", "CA"),
  ("INDUSTRY", "PA"),
  ("INDUSTRY", "TX"),
  ("INDUSTRY", "IL"),
  ("INEZ", "TX"),
  ("INEZ", "KY"),
  ("INGALLS", "IN"),
  ("INGALLS", "KS"),
  ("INGALLS PARK", "IL"),
  ("INGENIO", "PR"),
  ("INGER", "MN"),
  ("INGLESIDE", "TX"),
  ("INGLESIDE ON THE BAY", "TX"),
  ("INGLEWOOD", "CA"),
  ("INGLEWOOD", "NE"),
  ("INGLEWOOD-FINN HILL", "WA"),
  ("INGLIS", "FL"),
  ("INGOLD", "NC"),
  ("INGRAM", "TX"),
  ("INGRAM", "WI"),
  ("INGRAM", "PA"),
  ("INKERMAN", "PA"),
  ("INKOM", "ID"),
  ("INKSTER", "MI"),
  ("INKSTER", "ND"),
  ("INLAND", "NE"),
  ("INMAN", "SC"),
  ("INMAN", "KS"),
  ("INMAN", "NE"),
  ("INMAN MILLS", "SC"),
  ("INNISWOLD", "LA"),
  ("INNSBROOK", "MO"),
  ("INNSBROOK", "VA"),
  ("INOLA", "OK"),
  ("INTERCOURSE", "PA"),
  ("INTERIOR", "SD"),
  ("INTERLACHEN", "FL"),
  ("INTERLAKEN", "CA"),
  ("INTERLAKEN", "NJ"),
  ("INTERLAKEN", "NY"),
  ("INTERLOCHEN", "MI"),
  ("INTERNATIONAL FALLS", "MN"),
  ("INVER GROVE HEIGHTS", "MN"),
  ("INVERNESS", "FL"),
  ("INVERNESS", "IL"),
  ("INVERNESS", "CA"),
  ("INVERNESS", "MT"),
  ("INVERNESS", "CO"),
  ("INVERNESS", "MS"),
  ("INVERNESS HIGHLANDS NORTH", "FL"),
  ("INVERNESS HIGHLANDS SOUTH", "FL"),
  ("INWOOD", "WV"),
  ("INWOOD", "FL"),
  ("INWOOD", "NY"),
  ("INWOOD", "IA"),
  ("INYOKERN", "CA"),
  ("IOLA", "KS"),
  ("IOLA", "WI"),
  ("IOLA", "TX"),
  ("IOLA", "IL"),
  ("IOLA", "PA"),
  ("IONA", "FL"),
  ("IONA", "ID"),
  ("IONA", "MN"),
  ("IONE", "CA"),
  ("IONE", "OR"),
  ("IONE", "WA"),
  ("IONIA", "MI"),
  ("IONIA", "IA"),
  ("IONIA", "MO"),
  ("IOTA", "LA"),
  ("IOWA", "LA"),
  ("IOWA CITY", "IA"),
  ("IOWA COLONY", "TX"),
  ("IOWA FALLS", "IA"),
  ("IOWA PARK", "TX"),
  ("IPAVA", "IL"),
  ("IPSWICH", "MA"),
  ("IPSWICH", "SD"),
  ("IRAAN", "TX"),
  ("IRASBURG", "VT"),
  ("IREDELL", "TX"),
  ("IRENA", "MO"),
  ("IRENE", "SD"),
  ("IRETON", "IA"),
  ("IRMO", "SC"),
  ("IRON BELT", "WI"),
  ("IRON CITY", "TN"),
  ("IRON CITY", "GA"),
  ("IRON GATE", "VA"),
  ("IRON HORSE", "CA"),
  ("IRON JUNCTION", "MN"),
  ("IRON MOUNTAIN", "MI"),
  ("IRON MOUNTAIN LAKE", "MO"),
  ("IRON POST", "OK"),
  ("IRON RIDGE", "WI"),
  ("IRON RIVER", "MI"),
  ("IRON RIVER", "WI"),
  ("IRON STATION", "NC"),
  ("IRONDALE", "AL"),
  ("IRONDALE", "GA"),
  ("IRONDALE", "OH"),
  ("IRONDALE", "MO"),
  ("IRONDEQUOIT", "NY"),
  ("IRONTON", "OH"),
  ("IRONTON", "MN"),
  ("IRONTON", "MO"),
  ("IRONTON", "MI"),
  ("IRONTON", "WI"),
  ("IRONWOOD", "MI"),
  ("IROQUOIS", "SD"),
  ("IROQUOIS", "IL"),
  ("IROQUOIS POINT", "HI"),
  ("IRRIGON", "OR"),
  ("IRVINE", "CA"),
  ("IRVINE", "KY"),
  ("IRVING", "TX"),
  ("IRVING", "IL"),
  ("IRVINGTON", "NY"),
  ("IRVINGTON", "VA"),
  ("IRVINGTON", "IL"),
  ("IRVINGTON", "IA"),
  ("IRVINGTON", "KY"),
  ("IRVONA", "PA"),
  ("IRWIN", "SC"),
  ("IRWIN", "ID"),
  ("IRWIN", "PA"),
  ("IRWIN", "IA"),
  ("IRWIN", "MO"),
  ("IRWIN", "IL"),
  ("IRWINDALE", "CA"),
  ("IRWINTON", "GA"),
  ("ISABEL", "SD"),
  ("ISABEL", "KS"),
  ("ISABELA", "PR"),
  ("ISABELLA", "OK"),
  ("ISANTI", "MN"),
  ("ISELIN", "NJ"),
  ("ISHPEMING", "MI"),
  ("ISLA VISTA", "CA"),
  ("ISLAMORADA", "FL"),
  ("ISLAND CITY", "OR"),
  ("ISLAND HEIGHTS", "NJ"),
  ("ISLAND LAKE", "IL"),
  ("ISLAND PARK", "ID"),
  ("ISLAND PARK", "NY"),
  ("ISLAND POND", "VT"),
  ("ISLAND WALK", "FL"),
  ("ISLANDIA", "FL"),
  ("ISLANDIA", "NY"),
  ("ISLANDTON", "SC"),
  ("ISLE", "MN"),
  ("ISLE OF HOPE", "GA"),
  ("ISLE OF PALMS", "SC"),
  ("ISLETA VILLAGE PROPER", "NM"),
  ("ISLETON", "CA"),
  ("ISLIP", "NY"),
  ("ISLIP TERRACE", "NY"),
  ("ISMAY", "MT"),
  ("ISOLA", "MS"),
  ("ISSAQUAH", "WA"),
  ("ISTACHATTA", "FL"),
  ("ITALY", "TX"),
  ("ITASCA", "IL"),
  ("ITASCA", "TX"),
  ("ITHACA", "NY"),
  ("ITHACA", "MI"),
  ("ITHACA", "NE"),
  ("ITHACA", "OH"),
  ("ITMANN", "WV"),
  ("ITTA BENA", "MS"),
  ("IUKA", "MS"),
  ("IUKA", "IL"),
  ("IUKA", "KS"),
  ("IVA", "SC"),
  ("IVALEE", "AL"),
  ("IVANHOE", "NC"),
  ("IVANHOE", "VA"),
  ("IVANHOE", "CA"),
  ("IVANHOE", "TX"),
  ("IVANHOE", "MN"),
  ("IVANHOE NORTH", "TX"),
  ("IVANOF BAY", "AK"),
  ("IVES ESTATES", "FL"),
  ("IVESDALE", "IL"),
  ("IVEY", "GA"),
  ("IVINS", "UT"),
  ("IVOR", "VA"),
  ("IVY", "VA"),
  ("IVYLAND", "PA"),
  ("IXL", "OK"),
  ("IXONIA", "WI"),
  ("JAARS", "NC"),
  ("JACINTO CITY", "TX"),
  ("JACKPOT", "NV"),
  ("JACKSBORO", "TX"),
  ("JACKSBORO", "TN"),
  ("JACKSON", "MS"),
  ("JACKSON", "TN"),
  ("JACKSON", "AL"),
  ("JACKSON", "MO"),
  ("JACKSON", "MI"),
  ("JACKSON", "OH"),
  ("JACKSON", "GA"),
  ("JACKSON", "MN"),
  ("JACKSON", "LA"),
  ("JACKSON", "CA"),
  ("JACKSON", "SC"),
  ("JACKSON", "WI"),
  ("JACKSON", "WY"),
  ("JACKSON", "KY"),
  ("JACKSON", "NC"),
  ("JACKSON", "NE"),
  ("JACKSON CENTER", "OH"),
  ("JACKSON CENTER", "PA"),
  ("JACKSON HEIGHTS", "NC"),
  ("JACKSON JUNCTION", "IA"),
  ("JACKSON LAKE", "CO"),
  ("JACKSONBORO", "SC"),
  ("JACKSONBURG", "WV"),
  ("JACKSONBURG", "OH"),
  ("JACKSONPORT", "AR"),
  ("JACKSONS' GAP", "AL"),
  ("JACKSONVILLE", "FL"),
  ("JACKSONVILLE", "NC"),
  ("JACKSONVILLE", "AR"),
  ("JACKSONVILLE", "TX"),
  ("JACKSONVILLE", "IL"),
  ("JACKSONVILLE", "AL"),
  ("JACKSONVILLE", "PA"),
  ("JACKSONVILLE", "OR"),
  ("JACKSONVILLE", "VT"),
  ("JACKSONVILLE", "GA"),
  ("JACKSONVILLE", "OH"),
  ("JACKSONVILLE", "PA"),
  ("JACKSONVILLE", "MO"),
  ("JACKSONVILLE", "IA"),
  ("JACKSONVILLE BEACH", "FL"),
  ("JACKSONWALD", "PA"),
  ("JACOB CITY", "FL"),
  ("JACOBUS", "PA"),
  ("JACONA", "NM"),
  ("JACONITA", "NM"),
  ("JACUMBA", "CA"),
  ("JAFFREY", "NH"),
  ("JAGUAL", "PR"),
  ("JAKES CORNER", "AZ"),
  ("JAKIN", "GA"),
  ("JAL", "NM"),
  ("JALAPA", "IN"),
  ("JAMAICA", "IA"),
  ("JAMAICA BEACH", "TX"),
  ("JAMES CITY", "NC"),
  ("JAMES CITY", "PA"),
  ("JAMES TOWN", "WY"),
  ("JAMESBURG", "NJ"),
  ("JAMESON", "MO"),
  ("JAMESPORT", "NY"),
  ("JAMESPORT", "MO"),
  ("JAMESTOWN", "ND"),
  ("JAMESTOWN", "NY"),
  ("JAMESTOWN", "KY"),
  ("JAMESTOWN", "CA"),
  ("JAMESTOWN", "TN"),
  ("JAMESTOWN", "NC"),
  ("JAMESTOWN", "LA"),
  ("JAMESTOWN", "OH"),
  ("JAMESTOWN", "MO"),
  ("JAMESTOWN", "IN"),
  ("JAMESTOWN", "PA"),
  ("JAMESTOWN", "CO"),
  ("JAMESTOWN", "SC"),
  ("JAMESTOWN", "WA"),
  ("JAMESTOWN", "KS"),
  ("JAMESTOWN WEST", "NY"),
  ("JAMESVILLE", "NC"),
  ("JAMISON CITY", "PA"),
  ("JAMUL", "CA"),
  ("JAN PHYL VILLAGE", "FL"),
  ("JANE LEW", "WV"),
  ("JANESVILLE", "WI"),
  ("JANESVILLE", "CA"),
  ("JANESVILLE", "MN"),
  ("JANESVILLE", "IA"),
  ("JANSEN", "CO"),
  ("JANSEN", "NE"),
  ("JARALES", "NM"),
  ("JARDIN DE SAN JULIAN", "TX"),
  ("JARDINE", "MT"),
  ("JARRATT", "VA"),
  ("JARRELL", "TX"),
  ("JARRETTSVILLE", "MD"),
  ("JASMINE ESTATES", "FL"),
  ("JASONVILLE", "IN"),
  ("JASPER", "AL"),
  ("JASPER", "IN"),
  ("JASPER", "TX"),
  ("JASPER", "TN"),
  ("JASPER", "GA"),
  ("JASPER", "MI"),
  ("JASPER", "FL"),
  ("JASPER", "MO"),
  ("JASPER", "MN"),
  ("JASPER", "AR"),
  ("JAUCA", "PR"),
  ("JAVA", "SD"),
  ("JAY", "OK"),
  ("JAY", "FL"),
  ("JAYTON", "TX"),
  ("JAYUYA", "PR"),
  ("JEAN LAFITTE", "LA"),
  ("JEANERETTE", "LA"),
  ("JEANNETTE", "PA"),
  ("JEDDITO", "AZ"),
  ("JEDDO", "PA"),
  ("JEFF", "KY"),
  ("JEFFERS", "MN"),
  ("JEFFERS GARDENS", "OR"),
  ("JEFFERSON", "GA"),
  ("JEFFERSON", "IA"),
  ("JEFFERSON", "WI"),
  ("JEFFERSON", "TX"),
  ("JEFFERSON", "LA"),
  ("JEFFERSON", "OH"),
  ("JEFFERSON", "MD"),
  ("JEFFERSON", "NC"),
  ("JEFFERSON", "SC"),
  ("JEFFERSON", "OR"),
  ("JEFFERSON", "PA"),
  ("JEFFERSON", "SD"),
  ("JEFFERSON", "WV"),
  ("JEFFERSON", "OK"),
  ("JEFFERSON", "PA"),
  ("JEFFERSON CITY", "MO"),
  ("JEFFERSON CITY", "MT"),
  ("JEFFERSON CITY", "TN"),
  ("JEFFERSON HEIGHTS", "NY"),
  ("JEFFERSON HILLS", "PA"),
  ("JEFFERSON VALLEY-YORKTOWN", "NY"),
  ("JEFFERSONTOWN", "KY"),
  ("JEFFERSONVILLE", "IN"),
  ("JEFFERSONVILLE", "GA"),
  ("JEFFERSONVILLE", "KY"),
  ("JEFFERSONVILLE", "OH"),
  ("JEFFERSONVILLE", "IL"),
  ("JEFFERSONVILLE", "VT"),
  ("JEFFERSONVILLE", "NY"),
  ("JEFFREY CITY", "WY"),
  ("JEISYVILLE", "IL"),
  ("JELLICO", "TN"),
  ("JEMEZ PUEBLO", "NM"),
  ("JEMEZ SPRINGS", "NM"),
  ("JEMISON", "AL"),
  ("JENA", "LA"),
  ("JENERA", "OH"),
  ("JENISON", "MI"),
  ("JENKINS", "KY"),
  ("JENKINS", "MN"),
  ("JENKINSBURG", "GA"),
  ("JENKINSVILLE", "SC"),
  ("JENKINTOWN", "PA"),
  ("JENKS", "OK"),
  ("JENNER", "CA"),
  ("JENNERSTOWN", "PA"),
  ("JENNETTE", "AR"),
  ("JENNINGS", "LA"),
  ("JENNINGS", "MO"),
  ("JENNINGS", "FL"),
  ("JENNINGS", "MI"),
  ("JENNINGS", "OK"),
  ("JENNINGS", "MD"),
  ("JENNINGS", "KS"),
  ("JENNINGS LODGE", "OR"),
  ("JENSEN", "UT"),
  ("JENSEN BEACH", "FL"),
  ("JERICHO", "NY"),
  ("JERICHO", "VT"),
  ("JERICHO", "AR"),
  ("JERICO SPRINGS", "MO"),
  ("JERMYN", "PA"),
  ("JEROME", "ID"),
  ("JEROME", "PA"),
  ("JEROME", "AZ"),
  ("JEROME", "IL"),
  ("JEROME", "AR"),
  ("JEROMESVILLE", "OH"),
  ("JERRY CITY", "OH"),
  ("JERSEY", "GA"),
  ("JERSEY CITY", "NJ"),
  ("JERSEY SHORE", "PA"),
  ("JERSEY VILLAGE", "TX"),
  ("JERSEYTOWN", "PA"),
  ("JERSEYVILLE", "IL"),
  ("JERUSALEM", "OH"),
  ("JESSIE", "ND"),
  ("JESSUP", "PA"),
  ("JESSUP", "MD"),
  ("JESTERVILLE", "MD"),
  ("JESUP", "GA"),
  ("JESUP", "IA"),
  ("JET", "OK"),
  ("JETMORE", "KS"),
  ("JETTE", "MT"),
  ("JEWELL", "KS"),
  ("JEWELL JUNCTION", "IA"),
  ("JEWETT", "TX"),
  ("JEWETT", "IL"),
  ("JEWETT", "OH"),
  ("JEWETT CITY", "CT"),
  ("JF VILLARREAL", "TX"),
  ("JIM FALLS", "WI"),
  ("JIM THORPE", "PA"),
  ("JOANNA", "SC"),
  ("JOAQUIN", "TX"),
  ("JOBOS", "PR"),
  ("JOES", "CO"),
  ("JOFFRE", "PA"),
  ("JOHANNESBURG", "CA"),
  ("JOHN DAY", "OR"),
  ("JOHNS CREEK", "GA"),
  ("JOHNSBURG", "IL"),
  ("JOHNSON", "OK"),
  ("JOHNSON", "AR"),
  ("JOHNSON", "VT"),
  ("JOHNSON", "MN"),
  ("JOHNSON", "NE"),
  ("JOHNSON CITY", "TN"),
  ("JOHNSON CITY", "NY"),
  ("JOHNSON CITY", "KS"),
  ("JOHNSON CITY", "TX"),
  ("JOHNSON CITY", "OR"),
  ("JOHNSON CREEK", "WI"),
  ("JOHNSON LANE", "NV"),
  ("JOHNSON SIDING", "SD"),
  ("JOHNSON VILLAGE", "CO"),
  ("JOHNSONBURG", "PA"),
  ("JOHNSONBURG", "NJ"),
  ("JOHNSONVILLE", "SC"),
  ("JOHNSONVILLE", "IL"),
  ("JOHNSTON", "IA"),
  ("JOHNSTON", "SC"),
  ("JOHNSTON CITY", "IL"),
  ("JOHNSTONVILLE", "CA"),
  ("JOHNSTOWN", "WY"),
  ("JOHNSTOWN", "CO"),
  ("JOHNSTOWN", "PA"),
  ("JOHNSTOWN", "NY"),
  ("JOHNSTOWN", "OH"),
  ("JOHNSTOWN", "NE"),
  ("JOHNSVILLE", "CA"),
  ("JOICE", "IA"),
  ("JOINER", "AR"),
  ("JOLIET", "IL"),
  ("JOLIET", "MT"),
  ("JOLIVUE", "VA"),
  ("JOLLEY", "IA"),
  ("JOLLY", "TX"),
  ("JOLLYVILLE", "TX"),
  ("JONES", "OK"),
  ("JONES CREEK", "TX"),
  ("JONESBORO", "AR"),
  ("JONESBORO", "LA"),
  ("JONESBORO", "IL"),
  ("JONESBORO", "GA"),
  ("JONESBORO", "IN"),
  ("JONESBOROUGH", "TN"),
  ("JONESBURG", "MO"),
  ("JONESTOWN", "TX"),
  ("JONESTOWN", "PA"),
  ("JONESTOWN", "MS"),
  ("JONESTOWN", "PA"),
  ("JONESVILLE", "MI"),
  ("JONESVILLE", "NC"),
  ("JONESVILLE", "LA"),
  ("JONESVILLE", "VA"),
  ("JONESVILLE", "SC"),
  ("JONESVILLE", "IN"),
  ("JOPLIN", "MO"),
  ("JOPLIN", "MT"),
  ("JOPPA", "AL"),
  ("JOPPA", "IL"),
  ("JOPPATOWNE", "MD"),
  ("JORDAN", "MN"),
  ("JORDAN", "NY"),
  ("JORDAN", "MT"),
  ("JORDAN HILL", "LA"),
  ("JORDAN VALLEY", "OR"),
  ("JOSEPH", "UT"),
  ("JOSEPH", "OR"),
  ("JOSEPH CITY", "AZ"),
  ("JOSEPHINE", "TX"),
  ("JOSEPHVILLE", "MO"),
  ("JOSHUA", "TX"),
  ("JOSHUA TREE", "CA"),
  ("JOURDANTON", "TX"),
  ("JOY", "IL"),
  ("JOYCE", "LA"),
  ("JUANA DÌAZ", "PR"),
  ("JUAREZ", "TX"),
  ("JUD", "ND"),
  ("JUDA", "WI"),
  ("JUDITH GAP", "MT"),
  ("JUDSON", "SC"),
  ("JUDSONIA", "AR"),
  ("JUGTOWN", "MD"),
  ("JULESBURG", "CO"),
  ("JULIAETTA", "ID"),
  ("JULIAN", "CA"),
  ("JULIAN", "PA"),
  ("JULIAN", "NE"),
  ("JULIUSTOWN", "NJ"),
  ("JUMP RIVER", "WI"),
  ("JUMPERTOWN", "MS"),
  ("JUNCAL", "PR"),
  ("JUNCOS", "PR"),
  ("JUNCTION", "UT"),
  ("JUNCTION", "TX"),
  ("JUNCTION", "IL"),
  ("JUNCTION CITY", "CA"),
  ("JUNCTION CITY", "KS"),
  ("JUNCTION CITY", "OR"),
  ("JUNCTION CITY", "GA"),
  ("JUNCTION CITY", "KY"),
  ("JUNCTION CITY", "WI"),
  ("JUNCTION CITY", "WA"),
  ("JUNCTION CITY", "LA"),
  ("JUNCTION CITY", "AR"),
  ("JUNCTION CITY", "IL"),
  ("JUNCTION CITY", "OH"),
  ("JUNCTION CITY", "MO"),
  ("JUNE LAKE", "CA"),
  ("JUNE PARK", "FL"),
  ("JUNEAU", "WI"),
  ("JUNEAU AND", "AK"),
  ("JUNIATA", "NE"),
  ("JUNIATA TERRACE", "PA"),
  ("JUNIOR", "WV"),
  ("JUNO BEACH", "FL"),
  ("JUNO RIDGE", "FL"),
  ("JUNTURA", "OR"),
  ("JUPITER", "FL"),
  ("JUPITER FARMS", "FL"),
  ("JUPITER INLET COLONY", "FL"),
  ("JUPITER ISLAND", "FL"),
  ("JUSTICE", "OK"),
  ("JUSTICE", "IL"),
  ("JUSTICE", "WV"),
  ("JUSTIN", "TX"),
  ("K. I. SAWYER", "MI"),
  ("KAAAWA", "HI"),
  ("KAANAPALI", "HI"),
  ("KACHEMAK", "AK"),
  ("KACHINA VILLAGE", "AZ"),
  ("KADOKA", "SD"),
  ("KAHALUU", "HI"),
  ("KAHALUU-KEAUHOU", "HI"),
  ("KAHLOTUS", "WA"),
  ("KAHOKA", "MO"),
  ("KAHUKU", "HI"),
  ("KAHULUI", "HI"),
  ("KAIBAB", "AZ"),
  ("KAIBITO", "AZ"),
  ("KAILUA", "HI"),
  ("KAILUA", "HI"),
  ("KAKA", "AZ"),
  ("KAKE", "AK"),
  ("KAKTOVIK", "AK"),
  ("KALAELOA", "HI"),
  ("KALAHEO", "HI"),
  ("KALAMA", "WA"),
  ("KALAMAZOO", "MI"),
  ("KALAOA", "HI"),
  ("KALEVA", "MI"),
  ("KALIDA", "OH"),
  ("KALIFORNSKY", "AK"),
  ("KALIHIWAI", "HI"),
  ("KALISPELL", "MT"),
  ("KALKASKA", "MI"),
  ("KALONA", "IA"),
  ("KALTAG", "AK"),
  ("KAMAS", "UT"),
  ("KAMIAH", "ID"),
  ("KAMPSVILLE", "IL"),
  ("KAMRAR", "IA"),
  ("KANAB", "UT"),
  ("KANARRAVILLE", "UT"),
  ("KANAUGA", "OH"),
  ("KANAWHA", "IA"),
  ("KANDIYOHI", "MN"),
  ("KANE", "PA"),
  ("KANE", "IL"),
  ("KANEOHE", "HI"),
  ("KANEOHE STATION", "HI"),
  ("KANEVILLE", "IL"),
  ("KANGLEY", "IL"),
  ("KANKAKEE", "IL"),
  ("KANNAPOLIS", "NC"),
  ("KANOPOLIS", "KS"),
  ("KANORADO", "KS"),
  ("KANOSH", "UT"),
  ("KANSAS", "OK"),
  ("KANSAS", "IL"),
  ("KANSAS", "AL"),
  ("KANSAS", "OH"),
  ("KANSAS CITY", "MO"),
  ("KANSAS CITY", "KS"),
  ("KAPAA", "HI"),
  ("KAPAAU", "HI"),
  ("KAPALUA", "HI"),
  ("KAPLAN", "LA"),
  ("KAPOLEI", "HI"),
  ("KAPOWSIN", "WA"),
  ("KAPP HEIGHTS", "PA"),
  ("KAPPA", "IL"),
  ("KARLSRUHE", "ND"),
  ("KARLSTAD", "MN"),
  ("KARLUK", "AK"),
  ("KARNAK", "IL"),
  ("KARNES CITY", "TX"),
  ("KARNS CITY", "PA"),
  ("KASAAN", "AK"),
  ("KASER", "NY"),
  ("KASIGLUK", "AK"),
  ("KASILOF", "AK"),
  ("KASKASKIA", "IL"),
  ("KASOTA", "MN"),
  ("KASSON", "MN"),
  ("KATHERINE", "AZ"),
  ("KATHLEEN", "FL"),
  ("KATHRYN", "ND"),
  ("KATIE", "OK"),
  ("KATONAH", "NY"),
  ("KATY", "TX"),
  ("KAUFMAN", "TX"),
  ("KAUKAUNA", "WI"),
  ("KAUMAKANI", "HI"),
  ("KAUNAKAKAI", "HI"),
  ("KAW CITY", "OK"),
  ("KAWELA BAY", "HI"),
  ("KAYCEE", "WY"),
  ("KAYENTA", "AZ"),
  ("KAYLOR", "SD"),
  ("KAYSVILLE", "UT"),
  ("K-BAR RANCH", "TX"),
  ("KEAAU", "HI"),
  ("KEACHI", "LA"),
  ("KEALAKEKUA", "HI"),
  ("KEAMS CANYON", "AZ"),
  ("KEANSBURG", "NJ"),
  ("KEARNEY", "MO"),
  ("KEARNEY", "NE"),
  ("KEARNEY PARK", "MS"),
  ("KEARNS", "UT"),
  ("KEARNY", "NJ"),
  ("KEARNY", "AZ"),
  ("KECHI", "KS"),
  ("KEDDIE", "CA"),
  ("KEEDYSVILLE", "MD"),
  ("KEEGO HARBOR", "MI"),
  ("KEELER", "CA"),
  ("KEELER FARM", "NM"),
  ("KEENE", "NH"),
  ("KEENE", "CA"),
  ("KEENE", "TX"),
  ("KEENER", "NC"),
  ("KEENES", "IL"),
  ("KEENESBURG", "CO"),
  ("KEENSBURG", "IL"),
  ("KEESEVILLE", "NY"),
  ("KEEWATIN", "MN"),
  ("KEISER", "AR"),
  ("KEITHSBURG", "IL"),
  ("KEIZER", "OR"),
  ("KEKAHA", "HI"),
  ("KEKOSKEE", "WI"),
  ("KELAYRES", "PA"),
  ("KELFORD", "NC"),
  ("KELL", "IL"),
  ("KELLER", "TX"),
  ("KELLER", "WA"),
  ("KELLER", "VA"),
  ("KELLERTON", "IA"),
  ("KELLEY", "IA"),
  ("KELLEYS ISLAND", "OH"),
  ("KELLIHER", "MN"),
  ("KELLNERSVILLE", "WI"),
  ("KELLOGG", "ID"),
  ("KELLOGG", "IA"),
  ("KELLOGG", "MN"),
  ("KELLY", "NC"),
  ("KELLY", "WY"),
  ("KELLY RIDGE", "CA"),
  ("KELLYTON", "AL"),
  ("KELLYVILLE", "OK"),
  ("KELSEYVILLE", "CA"),
  ("KELSO", "WA"),
  ("KELSO", "MO"),
  ("KEMAH", "TX"),
  ("KEMMERER", "WY"),
  ("KEMP", "TX"),
  ("KEMP", "OK"),
  ("KEMP MILL", "MD"),
  ("KEMPNER", "TX"),
  ("KEMPS MILL", "MD"),
  ("KEMPTON", "PA"),
  ("KEMPTON", "IL"),
  ("KEMPTON", "IN"),
  ("KEN CARYL", "CO"),
  ("KENAI", "AK"),
  ("KENANSVILLE", "NC"),
  ("KENBRIDGE", "VA"),
  ("KENDALE LAKES", "FL"),
  ("KENDALL", "FL"),
  ("KENDALL", "WA"),
  ("KENDALL", "WI"),
  ("KENDALL PARK", "NJ"),
  ("KENDALL WEST", "FL"),
  ("KENDALLVILLE", "IN"),
  ("KENDLETON", "TX"),
  ("KENDRICK", "ID"),
  ("KENDRICK", "OK"),
  ("KENEDY", "TX"),
  ("KENEFIC", "OK"),
  ("KENEFICK", "TX"),
  ("KENESAW", "NE"),
  ("KENHORST", "PA"),
  ("KENILWORTH", "NJ"),
  ("KENILWORTH", "PA"),
  ("KENILWORTH", "UT"),
  ("KENILWORTH", "IL"),
  ("KENLY", "NC"),
  ("KENMAR", "PA"),
  ("KENMARE", "ND"),
  ("KENMORE", "WA"),
  ("KENMORE", "NY"),
  ("KENNAN", "WI"),
  ("KENNARD", "TX"),
  ("KENNARD", "IN"),
  ("KENNARD", "NE"),
  ("KENNEBEC", "SD"),
  ("KENNEBUNK", "ME"),
  ("KENNEBUNKPORT", "ME"),
  ("KENNEDALE", "TX"),
  ("KENNEDY", "AL"),
  ("KENNEDY", "NY"),
  ("KENNEDY", "CA"),
  ("KENNEDY", "MN"),
  ("KENNEDY MEADOWS", "CA"),
  ("KENNEDYVILLE", "MD"),
  ("KENNER", "LA"),
  ("KENNERDELL", "PA"),
  ("KENNESAW", "GA"),
  ("KENNETH", "MN"),
  ("KENNETH CITY", "FL"),
  ("KENNETT", "MO"),
  ("KENNETT SQUARE", "PA"),
  ("KENNEWICK", "WA"),
  ("KENNEY", "IL"),
  ("KENNY LAKE", "AK"),
  ("KENOSHA", "WI"),
  ("KENOVA", "WV"),
  ("KENSAL", "ND"),
  ("KENSETT", "AR"),
  ("KENSETT", "IA"),
  ("KENSINGTON", "CT"),
  ("KENSINGTON", "CA"),
  ("KENSINGTON", "MD"),
  ("KENSINGTON", "MN"),
  ("KENSINGTON", "KS"),
  ("KENSINGTON", "NY"),
  ("KENSINGTON PARK", "FL"),
  ("KENT", "WA"),
  ("KENT", "OH"),
  ("KENT", "IA"),
  ("KENT", "MN"),
  ("KENT", "IN"),
  ("KENT ACRES", "DE"),
  ("KENT CITY", "MI"),
  ("KENT NARROWS", "MD"),
  ("KENTFIELD", "CA"),
  ("KENTLAND", "IN"),
  ("KENTON", "OH"),
  ("KENTON", "TN"),
  ("KENTON", "OK"),
  ("KENTON", "DE"),
  ("KENTON VALE", "KY"),
  ("KENTWOOD", "MI"),
  ("KENTWOOD", "LA"),
  ("KENVIL", "NJ"),
  ("KENVIR", "KY"),
  ("KENWOOD", "OK"),
  ("KENWOOD", "CA"),
  ("KENWOOD", "OH"),
  ("KENWOOD ESTATES", "FL"),
  ("KENYON", "MN"),
  ("KEO", "AR"),
  ("KEOKEA", "HI"),
  ("KEOKEE", "VA"),
  ("KEOKUK", "IA"),
  ("KEOMAH VILLAGE", "IA"),
  ("KEOSAUQUA", "IA"),
  ("KEOTA", "IA"),
  ("KEOTA", "OK"),
  ("KERBY", "OR"),
  ("KERENS", "TX"),
  ("KERHONKSON", "NY"),
  ("KERKHOVEN", "MN"),
  ("KERMAN", "CA"),
  ("KERMIT", "TX"),
  ("KERMIT", "WV"),
  ("KERNERSVILLE", "NC"),
  ("KERNVILLE", "CA"),
  ("KERR", "MT"),
  ("KERRICK", "MN"),
  ("KERRTOWN", "PA"),
  ("KERRVILLE", "TX"),
  ("KERSEY", "PA"),
  ("KERSEY", "CO"),
  ("KERSHAW", "SC"),
  ("KESHENA", "WI"),
  ("KESWICK", "CA"),
  ("KESWICK", "IA"),
  ("KETCHIKAN", "AK"),
  ("KETCHUM", "ID"),
  ("KETCHUM", "OK"),
  ("KETRON ISLAND", "WA"),
  ("KETTERING", "OH"),
  ("KETTERING", "MD"),
  ("KETTLE FALLS", "WA"),
  ("KETTLE RIVER", "MN"),
  ("KETTLEMAN CITY", "CA"),
  ("KETTLERSVILLE", "OH"),
  ("KEUKA PARK", "NY"),
  ("KEVIL", "KY"),
  ("KEVIN", "MT"),
  ("KEWANEE", "IL"),
  ("KEWANNA", "IN"),
  ("KEWASKUM", "WI"),
  ("KEWAUNEE", "WI"),
  ("KEY BISCAYNE", "FL"),
  ("KEY CENTER", "WA"),
  ("KEY COLONY BEACH", "FL"),
  ("KEY LARGO", "FL"),
  ("KEY VISTA", "FL"),
  ("KEY WEST", "FL"),
  ("KEYES", "CA"),
  ("KEYES", "OK"),
  ("KEYESPORT", "IL"),
  ("KEYPORT", "NJ"),
  ("KEYPORT", "WA"),
  ("KEYS", "OK"),
  ("KEYSER", "WV"),
  ("KEYSTONE", "CO"),
  ("KEYSTONE", "FL"),
  ("KEYSTONE", "SD"),
  ("KEYSTONE", "IA"),
  ("KEYSTONE", "WV"),
  ("KEYSTONE", "NE"),
  ("KEYSTONE HEIGHTS", "FL"),
  ("KEYSVILLE", "VA"),
  ("KEYSVILLE", "GA"),
  ("KEYTESVILLE", "MO"),
  ("KIANA", "AK"),
  ("KIAWAH ISLAND", "SC"),
  ("KIBLER", "AR"),
  ("KICKAPOO SITE 1", "KS"),
  ("KICKAPOO SITE 2", "KS"),
  ("KICKAPOO SITE 5", "KS"),
  ("KICKAPOO SITE 6", "KS"),
  ("KICKAPOO SITE 7", "KS"),
  ("KICKAPOO TRIBAL CENTER", "KS"),
  ("KICKING HORSE", "MT"),
  ("KIDDER", "MO"),
  ("KIDDER", "SD"),
  ("KIDRON", "OH"),
  ("KIEF", "ND"),
  ("KIEFER", "OK"),
  ("KIEL", "WI"),
  ("KIELER", "WI"),
  ("KIESTER", "MN"),
  ("KIHEI", "HI"),
  ("KILA", "MT"),
  ("KILAUEA", "HI"),
  ("KILBOURNE", "LA"),
  ("KILBOURNE", "IL"),
  ("KILBOURNE", "OH"),
  ("KILDARE", "OK"),
  ("KILDEER", "IL"),
  ("KILGORE", "TX"),
  ("KILGORE", "NE"),
  ("KILKENNY", "MN"),
  ("KILL DEVIL HILLS", "NC"),
  ("KILLBUCK", "OH"),
  ("KILLDEER", "ND"),
  ("KILLEEN", "TX"),
  ("KILLEN", "AL"),
  ("KILLIAN", "LA"),
  ("KILLONA", "LA"),
  ("KILMARNOCK", "VA"),
  ("KILMICHAEL", "MS"),
  ("KILN", "MS"),
  ("KIM", "CO"),
  ("KIMBALL", "TN"),
  ("KIMBALL", "SD"),
  ("KIMBALL", "NE"),
  ("KIMBALL", "MN"),
  ("KIMBALL", "WV"),
  ("KIMBALLTON", "IA"),
  ("KIMBERLING CITY", "MO"),
  ("KIMBERLY", "AL"),
  ("KIMBERLY", "WI"),
  ("KIMBERLY", "ID"),
  ("KIMBERLY", "WV"),
  ("KIMBOLTON", "OH"),
  ("KIMMELL", "IN"),
  ("KIMMSWICK", "MO"),
  ("KINBRAE", "MN"),
  ("KINCAID", "WV"),
  ("KINCAID", "IL"),
  ("KINCAID", "KS"),
  ("KINDE", "MI"),
  ("KINDER", "LA"),
  ("KINDERHOOK", "NY"),
  ("KINDERHOOK", "IL"),
  ("KINDRED", "ND"),
  ("KING", "NC"),
  ("KING", "WI"),
  ("KING AND QUEEN COURT HOUSE", "VA"),
  ("KING ARTHUR PARK", "MT"),
  ("KING CITY", "CA"),
  ("KING CITY", "MO"),
  ("KING CITY", "OR"),
  ("KING COVE", "AK"),
  ("KING GEORGE", "VA"),
  ("KING LAKE", "NE"),
  ("KING OF PRUSSIA", "PA"),
  ("KING SALMON", "AK"),
  ("KING WILLIAM", "VA"),
  ("KINGDOM CITY", "MO"),
  ("KINGFISHER", "OK"),
  ("KINGMAN", "AZ"),
  ("KINGMAN", "KS"),
  ("KINGMAN", "IN"),
  ("KINGS BAY BASE", "GA"),
  ("KINGS BEACH", "CA"),
  ("KINGS GRANT", "NC"),
  ("KINGS MILLS", "OH"),
  ("KINGS MOUNTAIN", "NC"),
  ("KINGS PARK", "NY"),
  ("KINGS PARK", "VA"),
  ("KINGS PARK WEST", "VA"),
  ("KINGS POINT", "NY"),
  ("KINGS POINT", "MT"),
  ("KINGS VALLEY", "OR"),
  ("KINGSBURG", "CA"),
  ("KINGSBURY", "TX"),
  ("KINGSBURY", "NV"),
  ("KINGSBURY", "IN"),
  ("KINGSFORD", "MI"),
  ("KINGSFORD HEIGHTS", "IN"),
  ("KINGSGATE", "WA"),
  ("KINGSLAND", "GA"),
  ("KINGSLAND", "TX"),
  ("KINGSLAND", "AR"),
  ("KINGSLEY", "IA"),
  ("KINGSLEY", "MI"),
  ("KINGSLEY", "KY"),
  ("KINGSPORT", "TN"),
  ("KINGSTON", "NY"),
  ("KINGSTON", "TN"),
  ("KINGSTON", "UT"),
  ("KINGSTON", "MA"),
  ("KINGSTON", "NV"),
  ("KINGSTON", "OK"),
  ("KINGSTON", "NJ"),
  ("KINGSTON", "PA"),
  ("KINGSTON", "WA"),
  ("KINGSTON", "RI"),
  ("KINGSTON", "WI"),
  ("KINGSTON", "GA"),
  ("KINGSTON", "MI"),
  ("KINGSTON", "IL"),
  ("KINGSTON", "MN"),
  ("KINGSTON", "MO"),
  ("KINGSTON", "OH"),
  ("KINGSTON", "NM"),
  ("KINGSTON ESTATES", "NJ"),
  ("KINGSTON MINES", "IL"),
  ("KINGSTON SPRINGS", "TN"),
  ("KINGSTOWN", "MD"),
  ("KINGSTOWN", "NC"),
  ("KINGSTOWNE", "VA"),
  ("KINGSTREE", "SC"),
  ("KINGSVILLE", "TX"),
  ("KINGSVILLE", "MD"),
  ("KINGSVILLE", "MO"),
  ("KINGVALE", "CA"),
  ("KINGWOOD", "WV"),
  ("KINLOCH", "MO"),
  ("KINMUNDY", "IL"),
  ("KINNELON", "NJ"),
  ("KINNEY", "MN"),
  ("KINO SPRINGS", "AZ"),
  ("KINROSS", "IA"),
  ("KINSEY", "AL"),
  ("KINSLEY", "KS"),
  ("KINSMAN", "IL"),
  ("KINSMAN CENTER", "OH"),
  ("KINSTON", "NC"),
  ("KINSTON", "AL"),
  ("KINTA", "OK"),
  ("KIOWA", "OK"),
  ("KIOWA", "KS"),
  ("KIOWA", "CO"),
  ("KIPNUK", "AK"),
  ("KIPP", "KS"),
  ("KIPTON", "OH"),
  ("KIRBY", "AR"),
  ("KIRBY", "TX"),
  ("KIRBY", "WY"),
  ("KIRBY", "OH"),
  ("KIRBYVILLE", "TX"),
  ("KIRBYVILLE", "MO"),
  ("KIRK", "CO"),
  ("KIRKERSVILLE", "OH"),
  ("KIRKLAND", "WA"),
  ("KIRKLAND", "IL"),
  ("KIRKLIN", "IN"),
  ("KIRKMAN", "IA"),
  ("KIRKPATRICK", "OR"),
  ("KIRKSVILLE", "MO"),
  ("KIRKVILLE", "IA"),
  ("KIRKWOOD", "MO"),
  ("KIRKWOOD", "CA"),
  ("KIRKWOOD", "PA"),
  ("KIRKWOOD", "IL"),
  ("KIRON", "IA"),
  ("KIRTLAND", "OH"),
  ("KIRTLAND", "NM"),
  ("KIRTLAND HILLS", "OH"),
  ("KIRVIN", "TX"),
  ("KIRWIN", "KS"),
  ("KIRYAS JOEL", "NY"),
  ("KISKIMERE", "PA"),
  ("KISMET", "KS"),
  ("KISSEE MILLS", "MO"),
  ("KISSIMMEE", "FL"),
  ("KISTLER", "WV"),
  ("KISTLER", "PA"),
  ("KIT CARSON", "CO"),
  ("KITE", "GA"),
  ("KITTANNING", "PA"),
  ("KITTERY", "ME"),
  ("KITTERY POINT", "ME"),
  ("KITTITAS", "WA"),
  ("KITTREDGE", "CO"),
  ("KITTRELL", "NC"),
  ("KITTY HAWK", "NC"),
  ("KITZMILLER", "MD"),
  ("KIVALINA", "AK"),
  ("KLAGETOH", "AZ"),
  ("KLAHANIE", "WA"),
  ("KLAMATH", "CA"),
  ("KLAMATH FALLS", "OR"),
  ("KLAWOCK", "AK"),
  ("KLEIN", "MT"),
  ("KLEMME", "IA"),
  ("KLICKITAT", "WA"),
  ("KLINE", "SC"),
  ("KLINGERSTOWN", "PA"),
  ("KLONDIKE", "MD"),
  ("KLUKWAN", "AK"),
  ("KNAPP", "WI"),
  ("KNIERIM", "IA"),
  ("KNIFE RIVER", "MT"),
  ("KNIGHTDALE", "NC"),
  ("KNIGHTS LANDING", "CA"),
  ("KNIGHTSEN", "CA"),
  ("KNIGHTSTOWN", "IN"),
  ("KNIGHTSVILLE", "IN"),
  ("KNIK RIVER", "AK"),
  ("KNIK-FAIRVIEW", "AK"),
  ("KNIPPA", "TX"),
  ("KNOB NOSTER", "MO"),
  ("KNOBEL", "AR"),
  ("KNOLLWOOD", "IL"),
  ("KNOLLWOOD", "TX"),
  ("KNOWLES", "OK"),
  ("KNOWLTON", "WI"),
  ("KNOX", "IN"),
  ("KNOX", "PA"),
  ("KNOX", "ND"),
  ("KNOX CITY", "TX"),
  ("KNOX CITY", "MO"),
  ("KNOXVILLE", "TN"),
  ("KNOXVILLE", "IA"),
  ("KNOXVILLE", "AR"),
  ("KNOXVILLE", "IL"),
  ("KNOXVILLE", "PA"),
  ("KNOXVILLE", "GA"),
  ("KO OLINA", "HI"),
  ("KO VAYA", "AZ"),
  ("KOBUK", "AK"),
  ("KODIAK", "AK"),
  ("KODIAK STATION", "AK"),
  ("KOHATK", "AZ"),
  ("KOHLER", "WI"),
  ("KOHLS RANCH", "AZ"),
  ("KOKHANOK", "AK"),
  ("KOKOMO", "IN"),
  ("KOLIGANEK", "AK"),
  ("KOLOA", "HI"),
  ("KOMATKE", "AZ"),
  ("KONAWA", "OK"),
  ("KONGIGANAK", "AK"),
  ("KONTERRA", "MD"),
  ("KOONTZ LAKE", "IN"),
  ("KOOSHAREM", "UT"),
  ("KOOSKIA", "ID"),
  ("KOOTENAI", "ID"),
  ("KOPPEL", "PA"),
  ("KOPPERSTON", "WV"),
  ("KOSCIUSKO", "MS"),
  ("KOSHKONONG", "MO"),
  ("KOSSE", "TX"),
  ("KOSSUTH", "MS"),
  ("KOTLIK", "AK"),
  ("KOTZEBUE", "AK"),
  ("KOUNTZE", "TX"),
  ("KOUTS", "IN"),
  ("KOYUK", "AK"),
  ("KOYUKUK", "AK"),
  ("KRAEMER", "LA"),
  ("KRAKOW", "WI"),
  ("KRAMER", "ND"),
  ("KRANZBURG", "SD"),
  ("KRATZERVILLE", "PA"),
  ("KREAMER", "PA"),
  ("KREBS", "OK"),
  ("KREMLIN", "MT"),
  ("KREMLIN", "OK"),
  ("KREMMLING", "CO"),
  ("KRESS", "TX"),
  ("KRONENWETTER", "WI"),
  ("KROTZ SPRINGS", "LA"),
  ("KRUGERVILLE", "TX"),
  ("KRUM", "TX"),
  ("KRUPP", "WA"),
  ("KUALAPUU", "HI"),
  ("KUKUIHAELE", "HI"),
  ("KULA", "HI"),
  ("KULM", "ND"),
  ("KULPMONT", "PA"),
  ("KULPSVILLE", "PA"),
  ("KUNA", "ID"),
  ("KUNKLE", "OH"),
  ("KUPREANOF", "AK"),
  ("KURE BEACH", "NC"),
  ("KURTEN", "TX"),
  ("KURTISTOWN", "HI"),
  ("KUTTAWA", "KY"),
  ("KUTZTOWN", "PA"),
  ("KUTZTOWN UNIVERSITY", "PA"),
  ("KWETHLUK", "AK"),
  ("KWIGILLINGOK", "AK"),
  ("KYKOTSMOVI VILLAGE", "AZ"),
  ("KYLE", "TX"),
  ("KYLE", "SD"),
  ("KYLERTOWN", "PA"),
  ("KYSORVILLE", "NY"),
  ("LA ALIANZA", "PR"),
  ("LA BARGE", "WY"),
  ("LA BELLE", "MO"),
  ("LA BLANCA", "TX"),
  ("LA BOLT", "SD"),
  ("LA CAÒADA FLINTRIDGE", "CA"),
  ("LA CARLA", "TX"),
  ("LA CASITA", "TX"),
  ("LA CENTER", "WA"),
  ("LA CENTER", "KY"),
  ("LA CHUPAROSA", "TX"),
  ("LA CIENEGA", "NM"),
  ("LA COMA", "TX"),
  ("LA CONNER", "WA"),
  ("LA CRESCENT", "MN"),
  ("LA CRESCENTA-MONTROSE", "CA"),
  ("LA CROFT", "OH"),
  ("LA CROSSE", "WI"),
  ("LA CROSSE", "FL"),
  ("LA CROSSE", "VA"),
  ("LA CROSSE", "KS"),
  ("LA CROSSE", "IN"),
  ("LA CUEVA", "NM"),
  ("LA CYGNE", "KS"),
  ("LA DOLORES", "PR"),
  ("LA DUE", "MO"),
  ("LA ESCONDIDA", "TX"),
  ("LA ESPERANZA", "TX"),
  ("LA FARGE", "WI"),
  ("LA FARGEVILLE", "NY"),
  ("LA FAYETTE", "AL"),
  ("LA FAYETTE", "IL"),
  ("LA FERIA", "TX"),
  ("LA FERIA NORTH", "TX"),
  ("LA FERMINA", "PR"),
  ("LA FOLLETTE", "TN"),
  ("LA FONTAINE", "IN"),
  ("LA GRANDE", "OR"),
  ("LA GRANDE", "WA"),
  ("LA GRANGE", "KY"),
  ("LA GRANGE", "TX"),
  ("LA GRANGE", "IL"),
  ("LA GRANGE", "NC"),
  ("LA GRANGE", "TN"),
  ("LA GRANGE", "MO"),
  ("LA GRANGE", "WY"),
  ("LA GRANGE PARK", "IL"),
  ("LA GRULLA", "TX"),
  ("LA HABRA", "CA"),
  ("LA HABRA HEIGHTS", "CA"),
  ("LA HACIENDA", "NM"),
  ("LA HARPE", "IL"),
  ("LA HARPE", "KS"),
  ("LA HOMA", "TX"),
  ("LA HONDA", "CA"),
  ("LA HUERTA", "NM"),
  ("LA JARA", "NM"),
  ("LA JARA", "CO"),
  ("LA JOYA", "TX"),
  ("LA JOYA", "NM"),
  ("LA JUNTA", "CO"),
  ("LA JUNTA GARDENS", "CO"),
  ("LA LIGA", "PR"),
  ("LA LOMA DE FALCON", "TX"),
  ("LA LUISA", "PR"),
  ("LA LUZ", "NM"),
  ("LA MADERA", "NM"),
  ("LA MARQUE", "TX"),
  ("LA MESA", "CA"),
  ("LA MESA", "NM"),
  ("LA MESILLA", "NM"),
  ("LA MINITA", "TX"),
  ("LA MIRADA", "CA"),
  ("LA MOILLE", "IL"),
  ("LA MONTE", "MO"),
  ("LA MOTTE", "IA"),
  ("LA PALMA", "CA"),
  ("LA PALOMA", "TX"),
  ("LA PALOMA ADDITION", "TX"),
  ("LA PALOMA RANCHETTES", "TX"),
  ("LA PALOMA-LOST CREEK", "TX"),
  ("LA PARGUERA", "PR"),
  ("LA PAZ", "IN"),
  ("LA PAZ VALLEY", "AZ"),
  ("LA PINE", "OR"),
  ("LA PLANT", "SD"),
  ("LA PLATA", "NM"),
  ("LA PLATA", "MD"),
  ("LA PLATA", "MO"),
  ("LA PLATTE", "NE"),
  ("LA PLAYA", "PR"),
  ("LA PLENA", "PR"),
  ("LA PORTE", "TX"),
  ("LA PORTE", "IN"),
  ("LA PORTE", "CA"),
  ("LA PORTE CITY", "IA"),
  ("LA PRAIRIE", "MN"),
  ("LA PRAIRIE", "IL"),
  ("LA PRESA", "CA"),
  ("LA PRESA", "TX"),
  ("LA PRYOR", "TX"),
  ("LA PUEBLA", "NM"),
  ("LA PUENTE", "CA"),
  ("LA PUERTA", "TX"),
  ("LA QUINTA", "CA"),
  ("LA RIVIERA", "CA"),
  ("LA ROSE", "IL"),
  ("LA ROSITA", "TX"),
  ("LA RUE", "OH"),
  ("LA RUSSELL", "MO"),
  ("LA SAL", "UT"),
  ("LA SALLE", "CO"),
  ("LA SALLE", "MN"),
  ("LA SELVA BEACH", "CA"),
  ("LA TINA RANCH", "TX"),
  ("LA TOUR", "MO"),
  ("LA UNION", "NM"),
  ("LA VALE", "MD"),
  ("LA VALLE", "WI"),
  ("LA VERGNE", "TN"),
  ("LA VERKIN", "UT"),
  ("LA VERNE", "CA"),
  ("LA VERNIA", "TX"),
  ("LA VETA", "CO"),
  ("LA VICTORIA", "TX"),
  ("LA VILLA", "TX"),
  ("LA VILLITA", "NM"),
  ("LA VINA", "CA"),
  ("LA VISTA", "NE"),
  ("LA WARD", "TX"),
  ("LA YUCA", "PR"),
  ("LABADIEVILLE", "LA"),
  ("LABARQUE CREEK", "MO"),
  ("LABELLE", "FL"),
  ("LABETTE", "KS"),
  ("LABISH VILLAGE", "OR"),
  ("LAC DU FLAMBEAU", "WI"),
  ("LAC LA BELLE", "WI"),
  ("LACASSINE", "LA"),
  ("LACEY", "WA"),
  ("LACEYVILLE", "PA"),
  ("LACKAWANNA", "NY"),
  ("LACKLAND AFB", "TX"),
  ("LACLEDE", "MO"),
  ("LACOMB", "OR"),
  ("LACOMBE", "LA"),
  ("LACON", "IL"),
  ("LACONA", "NY"),
  ("LACONA", "IA"),
  ("LACONIA", "NH"),
  ("LACONIA", "IN"),
  ("LACOOCHEE", "FL"),
  ("LACOSTE", "TX"),
  ("LACROSSE", "WA"),
  ("LACY-LAKEVIEW", "TX"),
  ("LADD", "IL"),
  ("LADDONIA", "MO"),
  ("LADERA", "CA"),
  ("LADERA HEIGHTS", "CA"),
  ("LADERA RANCH", "CA"),
  ("LADOGA", "IN"),
  ("LADONIA", "AL"),
  ("LADONIA", "TX"),
  ("LADORA", "IA"),
  ("LADSON", "SC"),
  ("LADUE", "MO"),
  ("LADY LAKE", "FL"),
  ("LADYSMITH", "WI"),
  ("LAFAYETTE", "LA"),
  ("LAFAYETTE", "IN"),
  ("LAFAYETTE", "CA"),
  ("LAFAYETTE", "CO"),
  ("LAFAYETTE", "GA"),
  ("LAFAYETTE", "TN"),
  ("LAFAYETTE", "MN"),
  ("LAFAYETTE", "OH"),
  ("LAFAYETTE", "OR"),
  ("LAFAYETTE", "VA"),
  ("LAFAYETTE", "OH"),
  ("LAFAYETTE", "KY"),
  ("LAFE", "AR"),
  ("LAFFERTY", "OH"),
  ("LAFITTE", "LA"),
  ("LAFLIN", "PA"),
  ("LAFOURCHE CROSSING", "LA"),
  ("LAGO", "TX"),
  ("LAGO VISTA", "TX"),
  ("LAGO VISTA", "TX"),
  ("LAGRANGE", "GA"),
  ("LAGRANGE", "OH"),
  ("LAGRANGE", "IN"),
  ("LAGRANGE", "AR"),
  ("LAGRO", "IN"),
  ("LAGUNA", "NM"),
  ("LAGUNA BEACH", "CA"),
  ("LAGUNA BEACH", "FL"),
  ("LAGUNA HEIGHTS", "TX"),
  ("LAGUNA HILLS", "CA"),
  ("LAGUNA NIGUEL", "CA"),
  ("LAGUNA PARK", "TX"),
  ("LAGUNA SECA", "TX"),
  ("LAGUNA VISTA", "TX"),
  ("LAGUNA WOODS", "CA"),
  ("LAGUNITAS-FOREST KNOLLS", "CA"),
  ("LAHAINA", "HI"),
  ("LAHOMA", "OK"),
  ("LAIE", "HI"),
  ("LAINGSBURG", "MI"),
  ("LAIRD", "CO"),
  ("LAJAS", "PR"),
  ("LAKE", "MS"),
  ("LAKE ALFRED", "FL"),
  ("LAKE ALMANOR COUNTRY CLUB", "CA"),
  ("LAKE ALMANOR PENINSULA", "CA"),
  ("LAKE ALMANOR WEST", "CA"),
  ("LAKE ALUMA", "OK"),
  ("LAKE ANDES", "SD"),
  ("LAKE ANGELUS", "MI"),
  ("LAKE ANN", "MI"),
  ("LAKE ANNETTE", "MO"),
  ("LAKE ARBOR", "MD"),
  ("LAKE ARROWHEAD", "CA"),
  ("LAKE ARROWHEAD", "ME"),
  ("LAKE ARROWHEAD", "WI"),
  ("LAKE ARTHUR", "LA"),
  ("LAKE ARTHUR", "NM"),
  ("LAKE ARTHUR ESTATES", "PA"),
  ("LAKE BARCROFT", "VA"),
  ("LAKE BARRINGTON", "IL"),
  ("LAKE BELVEDERE ESTATES", "FL"),
  ("LAKE BENTON", "MN"),
  ("LAKE BLUFF", "IL"),
  ("LAKE BOSWORTH", "WA"),
  ("LAKE BRIDGEPORT", "TX"),
  ("LAKE BRONSON", "MN"),
  ("LAKE BROWNWOOD", "TX"),
  ("LAKE BRYAN", "TX"),
  ("LAKE BUCKHORN", "OH"),
  ("LAKE BUENA VISTA", "FL"),
  ("LAKE BUTLER", "FL"),
  ("LAKE BUTLER", "FL"),
  ("LAKE CALIFORNIA", "CA"),
  ("LAKE CAMELOT", "WI"),
  ("LAKE CAMELOT", "IL"),
  ("LAKE CARMEL", "NY"),
  ("LAKE CAROLINE", "VA"),
  ("LAKE CASSIDY", "WA"),
  ("LAKE CATHERINE", "IL"),
  ("LAKE CAVANAUGH", "WA"),
  ("LAKE CHARLES", "LA"),
  ("LAKE CHEROKEE", "TX"),
  ("LAKE CITY", "FL"),
  ("LAKE CITY", "CA"),
  ("LAKE CITY", "SC"),
  ("LAKE CITY", "IA"),
  ("LAKE CITY", "MN"),
  ("LAKE CITY", "AR"),
  ("LAKE CITY", "GA"),
  ("LAKE CITY", "PA"),
  ("LAKE CITY", "TN"),
  ("LAKE CITY", "MI"),
  ("LAKE CITY", "CO"),
  ("LAKE CITY", "TX"),
  ("LAKE CITY", "SD"),
  ("LAKE CLARKE SHORES", "FL"),
  ("LAKE COLORADO CITY", "TX"),
  ("LAKE COMO", "NJ"),
  ("LAKE CRYSTAL", "MN"),
  ("LAKE DALECARLIA", "IN"),
  ("LAKE DALLAS", "TX"),
  ("LAKE DARBY", "OH"),
  ("LAKE DAVIS", "CA"),
  ("LAKE DELTON", "WI"),
  ("LAKE DON PEDRO", "CA"),
  ("LAKE DUNLAP", "TX"),
  ("LAKE ELMO", "MN"),
  ("LAKE ELSINORE", "CA"),
  ("LAKE ERIE BEACH", "NY"),
  ("LAKE FENTON", "MI"),
  ("LAKE FOREST", "CA"),
  ("LAKE FOREST", "IL"),
  ("LAKE FOREST PARK", "WA"),
  ("LAKE GENEVA", "WI"),
  ("LAKE GEORGE", "MN"),
  ("LAKE GEORGE", "NY"),
  ("LAKE GROVE", "NY"),
  ("LAKE HALLIE", "WI"),
  ("LAKE HAMILTON", "FL"),
  ("LAKE HAMILTON", "AR"),
  ("LAKE HARBOR", "FL"),
  ("LAKE HART", "FL"),
  ("LAKE HAVASU CITY", "AZ"),
  ("LAKE HELEN", "FL"),
  ("LAKE HENRY", "MN"),
  ("LAKE HERITAGE", "PA"),
  ("LAKE HOLIDAY", "VA"),
  ("LAKE HOLIDAY", "IL"),
  ("LAKE HOLIDAY", "IN"),
  ("LAKE HOLM", "WA"),
  ("LAKE HUGHES", "CA"),
  ("LAKE IN THE HILLS", "IL"),
  ("LAKE ISABELLA", "CA"),
  ("LAKE ISABELLA", "MI"),
  ("LAKE IVANHOE", "WI"),
  ("LAKE JACKSON", "TX"),
  ("LAKE JUNALUSKA", "NC"),
  ("LAKE KA-HO", "IL"),
  ("LAKE KATHRYN", "FL"),
  ("LAKE KATRINE", "NY"),
  ("LAKE KETCHUM", "WA"),
  ("LAKE KIOWA", "TX"),
  ("LAKE KOSHKONONG", "WI"),
  ("LAKE LAFAYETTE", "MO"),
  ("LAKE LAKENGREN", "OH"),
  ("LAKE LAND'OR", "VA"),
  ("LAKE LATONKA", "PA"),
  ("LAKE LEELANAU", "MI"),
  ("LAKE LILLIAN", "MN"),
  ("LAKE LINDEN", "MI"),
  ("LAKE LINDSEY", "FL"),
  ("LAKE LORELEI", "OH"),
  ("LAKE LORRAINE", "FL"),
  ("LAKE LORRAINE", "WI"),
  ("LAKE LOS ANGELES", "CA"),
  ("LAKE LOTAWANA", "MO"),
  ("LAKE LOUISE", "AK"),
  ("LAKE LURE", "NC"),
  ("LAKE LUZERNE", "NY"),
  ("LAKE MACK-FOREST HILLS", "FL"),
  ("LAKE MADISON", "SD"),
  ("LAKE MAGDALENE", "FL"),
  ("LAKE MARCEL-STILLWATER", "WA"),
  ("LAKE MARY", "FL"),
  ("LAKE MARY JANE", "FL"),
  ("LAKE MARY RONAN", "MT"),
  ("LAKE MATHEWS", "CA"),
  ("LAKE MCMURRAY", "WA"),
  ("LAKE MEADE", "PA"),
  ("LAKE MEDINA SHORES", "TX"),
  ("LAKE MEREDITH ESTATES", "TX"),
  ("LAKE MICHIGAN BEACH", "MI"),
  ("LAKE MILLS", "WI"),
  ("LAKE MILLS", "IA"),
  ("LAKE MINCHUMINA", "AK"),
  ("LAKE MOHAWK", "NJ"),
  ("LAKE MOHAWK", "OH"),
  ("LAKE MOHEGAN", "NY"),
  ("LAKE MONTEZUMA", "AZ"),
  ("LAKE MONTICELLO", "VA"),
  ("LAKE MORTON-BERRYDALE", "WA"),
  ("LAKE MURRAY OF RICHLAND", "SC"),
  ("LAKE MYKEE TOWN", "MO"),
  ("LAKE MYSTIC", "FL"),
  ("LAKE NACIMIENTO", "CA"),
  ("LAKE NEBAGAMON", "WI"),
  ("LAKE NORDEN", "SD"),
  ("LAKE NORMAN OF CATAWBA", "NC"),
  ("LAKE ODESSA", "MI"),
  ("LAKE OF THE PINES", "CA"),
  ("LAKE OF THE WOODS", "VA"),
  ("LAKE OF THE WOODS", "AZ"),
  ("LAKE OF THE WOODS", "CA"),
  ("LAKE OF THE WOODS", "IL"),
  ("LAKE ORION", "MI"),
  ("LAKE OSWEGO", "OR"),
  ("LAKE OZARK", "MO"),
  ("LAKE PANASOFFKEE", "FL"),
  ("LAKE PANORAMA", "IA"),
  ("LAKE PARK", "FL"),
  ("LAKE PARK", "IA"),
  ("LAKE PARK", "GA"),
  ("LAKE PARK", "MN"),
  ("LAKE PARK", "NC"),
  ("LAKE PETERSBURG", "IL"),
  ("LAKE PLACID", "FL"),
  ("LAKE PLACID", "NY"),
  ("LAKE POCOTOPAUG", "CT"),
  ("LAKE POINSETT", "SD"),
  ("LAKE PRESTON", "SD"),
  ("LAKE PROVIDENCE", "LA"),
  ("LAKE QUIVIRA", "KS"),
  ("LAKE RIDGE", "VA"),
  ("LAKE RIPLEY", "WI"),
  ("LAKE RIVERSIDE", "CA"),
  ("LAKE ROBERTS", "NM"),
  ("LAKE ROBERTS HEIGHTS", "NM"),
  ("LAKE ROESIGER", "WA"),
  ("LAKE RONKONKOMA", "NY"),
  ("LAKE ROYALE", "NC"),
  ("LAKE SAN MARCOS", "CA"),
  ("LAKE SANTEE", "IN"),
  ("LAKE SANTEETLAH", "NC"),
  ("LAKE SARASOTA", "FL"),
  ("LAKE SECESSION", "SC"),
  ("LAKE SENECA", "OH"),
  ("LAKE SHANGRILA", "WI"),
  ("LAKE SHERWOOD", "CA"),
  ("LAKE SHERWOOD", "WI"),
  ("LAKE SHORE", "MD"),
  ("LAKE SHORE", "MN"),
  ("LAKE SHORE", "UT"),
  ("LAKE SHORE", "WA"),
  ("LAKE ST. CROIX BEACH", "MN"),
  ("LAKE ST. LOUIS", "MO"),
  ("LAKE STATION", "IN"),
  ("LAKE STEVENS", "WA"),
  ("LAKE STICKNEY", "WA"),
  ("LAKE SUCCESS", "NY"),
  ("LAKE SUMMERSET", "IL"),
  ("LAKE SUMNER", "NM"),
  ("LAKE TANGLEWOOD", "TX"),
  ("LAKE TANSI", "TN"),
  ("LAKE TAPAWINGO", "MO"),
  ("LAKE TAPPS", "WA"),
  ("LAKE TEKAKWITHA", "MO"),
  ("LAKE TELEMARK", "NJ"),
  ("LAKE TOMAHAWK", "WI"),
  ("LAKE TOMAHAWK", "OH"),
  ("LAKE VALLEY", "NM"),
  ("LAKE VICTORIA", "MI"),
  ("LAKE VIEW", "AR"),
  ("LAKE VIEW", "IA"),
  ("LAKE VIEW", "SC"),
  ("LAKE VIEW", "AL"),
  ("LAKE VIEW", "TX"),
  ("LAKE VIKING", "MO"),
  ("LAKE VILLA", "IL"),
  ("LAKE VILLAGE", "IN"),
  ("LAKE VILLAGE", "AR"),
  ("LAKE WACCAMAW", "NC"),
  ("LAKE WALES", "FL"),
  ("LAKE WAUKOMIS", "MO"),
  ("LAKE WAYNOKA", "OH"),
  ("LAKE WAZEECHA", "WI"),
  ("LAKE WILDERNESS", "VA"),
  ("LAKE WILDWOOD", "CA"),
  ("LAKE WILSON", "MN"),
  ("LAKE WINNEBAGO", "MO"),
  ("LAKE WINOLA", "PA"),
  ("LAKE WISCONSIN", "WI"),
  ("LAKE WISSOTA", "WI"),
  ("LAKE WORTH", "FL"),
  ("LAKE WORTH", "TX"),
  ("LAKE WYLIE", "SC"),
  ("LAKE WYNONAH", "PA"),
  ("LAKE ZURICH", "IL"),
  ("LAKEFIELD", "MN"),
  ("LAKEHEAD", "CA"),
  ("LAKEHILLS", "TX"),
  ("LAKEHURST", "NJ"),
  ("LAKELAND", "FL"),
  ("LAKELAND", "TN"),
  ("LAKELAND", "GA"),
  ("LAKELAND", "MN"),
  ("LAKELAND", "NY"),
  ("LAKELAND HIGHLANDS", "FL"),
  ("LAKELAND NORTH", "WA"),
  ("LAKELAND SHORES", "MN"),
  ("LAKELAND SOUTH", "WA"),
  ("LAKELAND VILLAGE", "CA"),
  ("LAKELINE", "OH"),
  ("LAKEMONT", "PA"),
  ("LAKEMOOR", "IL"),
  ("LAKEMORE", "OH"),
  ("LAKEPORT", "CA"),
  ("LAKEPORT", "TX"),
  ("LAKERIDGE", "NV"),
  ("LAKES", "AK"),
  ("LAKES OF THE FOUR SEASONS", "IN"),
  ("LAKES OF THE NORTH", "MI"),
  ("LAKESHIRE", "MO"),
  ("LAKESHORE", "LA"),
  ("LAKESHORE GARDENS-HIDDEN ACRES", "TX"),
  ("LAKESIDE", "MT"),
  ("LAKESIDE", "FL"),
  ("LAKESIDE", "CA"),
  ("LAKESIDE", "VA"),
  ("LAKESIDE", "OR"),
  ("LAKESIDE", "TX"),
  ("LAKESIDE", "OH"),
  ("LAKESIDE", "TX"),
  ("LAKESIDE", "MO"),
  ("LAKESIDE", "CO"),
  ("LAKESIDE", "IA"),
  ("LAKESIDE CITY", "TX"),
  ("LAKESIDE PARK", "KY"),
  ("LAKESITE", "TN"),
  ("LAKETON", "IN"),
  ("LAKETOWN", "UT"),
  ("LAKEVIEW", "CA"),
  ("LAKEVIEW", "OR"),
  ("LAKEVIEW", "GA"),
  ("LAKEVIEW", "MI"),
  ("LAKEVIEW", "AR"),
  ("LAKEVIEW", "WA"),
  ("LAKEVIEW", "NY"),
  ("LAKEVIEW", "LA"),
  ("LAKEVIEW", "OH"),
  ("LAKEVIEW", "AL"),
  ("LAKEVIEW", "NE"),
  ("LAKEVIEW", "TX"),
  ("LAKEVIEW ESTATES", "GA"),
  ("LAKEVIEW HEIGHTS", "KY"),
  ("LAKEVIEW NORTH", "WY"),
  ("LAKEVILLE", "MN"),
  ("LAKEVILLE", "CT"),
  ("LAKEVILLE", "NY"),
  ("LAKEVILLE", "IN"),
  ("LAKEWAY", "TX"),
  ("LAKEWOOD", "CO"),
  ("LAKEWOOD", "WA"),
  ("LAKEWOOD", "CA"),
  ("LAKEWOOD", "SC"),
  ("LAKEWOOD", "NJ"),
  ("LAKEWOOD", "OH"),
  ("LAKEWOOD", "IL"),
  ("LAKEWOOD", "WI"),
  ("LAKEWOOD", "NY"),
  ("LAKEWOOD", "TN"),
  ("LAKEWOOD CLUB", "MI"),
  ("LAKEWOOD GARDENS", "FL"),
  ("LAKEWOOD PARK", "FL"),
  ("LAKEWOOD PARK", "TN"),
  ("LAKEWOOD SHORES", "IL"),
  ("LAKEWOOD VILLAGE", "TX"),
  ("LAKIN", "KS"),
  ("LAKOTA", "ND"),
  ("LAKOTA", "IA"),
  ("LAMAR", "OK"),
  ("LAMAR", "MO"),
  ("LAMAR", "AR"),
  ("LAMAR", "CO"),
  ("LAMAR", "TX"),
  ("LAMAR", "SC"),
  ("LAMAR", "PA"),
  ("LAMAR", "NE"),
  ("LAMAR HEIGHTS", "MO"),
  ("LAMBERT", "MS"),
  ("LAMBERT", "OK"),
  ("LAMBERT", "MO"),
  ("LAMBERTON", "MN"),
  ("LAMBERTVILLE", "MI"),
  ("LAMBERTVILLE", "NJ"),
  ("LAMBOGLIA", "PR"),
  ("LAMBS GROVE", "IA"),
  ("LAME DEER", "MT"),
  ("LAMESA", "TX"),
  ("LAMOILLE", "NV"),
  ("LAMONI", "IA"),
  ("LAMONT", "CA"),
  ("LAMONT", "FL"),
  ("LAMONT", "IA"),
  ("LAMONT", "OK"),
  ("LAMONT", "WA"),
  ("LAMOURE", "ND"),
  ("LAMPASAS", "TX"),
  ("LAMPETER", "PA"),
  ("LAMY", "NM"),
  ("LANAGAN", "MO"),
  ("LANAI CITY", "HI"),
  ("LANARE", "CA"),
  ("LANARK", "IL"),
  ("LANCASTER", "CA"),
  ("LANCASTER", "TX"),
  ("LANCASTER", "OH"),
  ("LANCASTER", "PA"),
  ("LANCASTER", "SC"),
  ("LANCASTER", "WI"),
  ("LANCASTER", "NY"),
  ("LANCASTER", "MN"),
  ("LANCASTER", "NH"),
  ("LANCASTER", "KY"),
  ("LANCASTER", "MO"),
  ("LANCASTER", "KS"),
  ("LANCE CREEK", "WY"),
  ("LAND O' LAKES", "FL"),
  ("LANDA", "ND"),
  ("LANDEN", "OH"),
  ("LANDER", "WY"),
  ("LANDESS", "IN"),
  ("LANDFALL", "MN"),
  ("LANDINGVILLE", "PA"),
  ("LANDIS", "NC"),
  ("LANDISBURG", "PA"),
  ("LANDISVILLE", "PA"),
  ("LANDMARK", "AR"),
  ("LANDOVER", "MD"),
  ("LANDOVER HILLS", "MD"),
  ("LANDRUM", "SC"),
  ("LANE", "OK"),
  ("LANE", "SC"),
  ("LANE", "SD"),
  ("LANE", "KS"),
  ("LANESBORO", "PA"),
  ("LANESBORO", "MN"),
  ("LANESBORO", "IA"),
  ("LANESVILLE", "IN"),
  ("LANETT", "AL"),
  ("LANGDON", "ND"),
  ("LANGDON", "KS"),
  ("LANGDON PLACE", "KY"),
  ("LANGELOTH", "PA"),
  ("LANGFORD", "SD"),
  ("LANGHORNE", "PA"),
  ("LANGHORNE MANOR", "PA"),
  ("LANGLEY", "OK"),
  ("LANGLEY", "SC"),
  ("LANGLEY", "WA"),
  ("LANGLEY PARK", "MD"),
  ("LANGLEYVILLE", "IL"),
  ("LANGLOIS", "OR"),
  ("LANGSTON", "AL"),
  ("LANGSTON", "OK"),
  ("LANHAM", "MD"),
  ("LANKIN", "ND"),
  ("LANNON", "WI"),
  ("LANSDALE", "PA"),
  ("LANSDOWNE", "VA"),
  ("LANSDOWNE", "MD"),
  ("LANSDOWNE", "PA"),
  ("L'ANSE", "MI"),
  ("LANSFORD", "PA"),
  ("LANSFORD", "ND"),
  ("LANSING", "MI"),
  ("LANSING", "KS"),
  ("LANSING", "IL"),
  ("LANSING", "NY"),
  ("LANSING", "IA"),
  ("LANSING", "MN"),
  ("LANSING", "NC"),
  ("LANSING", "OH"),
  ("LANTANA", "TX"),
  ("LANTANA", "FL"),
  ("LAONA", "WI"),
  ("LAPEER", "MI"),
  ("LAPEL", "IN"),
  ("LAPLACE", "LA"),
  ("LAPLACE", "IL"),
  ("LAPORTE", "CO"),
  ("LAPORTE", "PA"),
  ("LAPORTE", "MN"),
  ("LAPWAI", "ID"),
  ("LARAMIE", "WY"),
  ("LARCH WAY", "WA"),
  ("LARCHMONT", "NY"),
  ("LARCHWOOD", "IA"),
  ("LAREDO", "TX"),
  ("LAREDO", "MO"),
  ("LAREDO RANCHETTES", "TX"),
  ("LAREDO RANCHETTES WEST", "TX"),
  ("LARES", "PR"),
  ("LARGO", "FL"),
  ("LARGO", "MD"),
  ("LARIMORE", "ND"),
  ("LARKFIELD-WIKIUP", "CA"),
  ("LARKSPUR", "CA"),
  ("LARKSPUR", "CO"),
  ("LARKSVILLE", "PA"),
  ("LARNED", "KS"),
  ("LAROSE", "LA"),
  ("LARRABEE", "IA"),
  ("LARSEN BAY", "AK"),
  ("LARSON", "ND"),
  ("LARWILL", "IN"),
  ("LAS ANIMAS", "CO"),
  ("LAS CAROLINAS", "PR"),
  ("LAS CROABAS", "PR"),
  ("LAS CRUCES", "NM"),
  ("LAS FLORES", "CA"),
  ("LAS FLORES", "CA"),
  ("LAS HACIENDAS", "TX"),
  ("LAS LOMAS", "CA"),
  ("LAS LOMAS", "TX"),
  ("LAS LOMITAS", "TX"),
  ("LAS MARAVILLAS", "NM"),
  ("LAS MARÌAS", "PR"),
  ("LAS MARÌAS", "PR"),
  ("LAS NUTRIAS", "NM"),
  ("LAS OCHENTA", "PR"),
  ("LAS OLLAS", "PR"),
  ("LAS PALMAS", "TX"),
  ("LAS PALMAS II", "TX"),
  ("LAS PALOMAS", "NM"),
  ("LAS PIEDRAS", "PR"),
  ("LAS PILAS", "TX"),
  ("LAS QUINTAS FRONTERIZAS", "TX"),
  ("LAS VEGAS", "NV"),
  ("LAS VEGAS", "NM"),
  ("LASALLE", "IL"),
  ("LASANA", "TX"),
  ("LASARA", "TX"),
  ("LASHMEET", "WV"),
  ("LASKER", "NC"),
  ("LASTRUP", "MN"),
  ("LATAH", "WA"),
  ("LATEXO", "TX"),
  ("LATHAM", "IL"),
  ("LATHAM", "KS"),
  ("LATHROP", "CA"),
  ("LATHROP", "MO"),
  ("LATHRUP VILLAGE", "MI"),
  ("LATIMER", "MS"),
  ("LATIMER", "IA"),
  ("LATIMER", "KS"),
  ("LATON", "CA"),
  ("LATROBE", "PA"),
  ("LATTA", "SC"),
  ("LATTIMER", "PA"),
  ("LATTIMORE", "NC"),
  ("LATTINGTOWN", "NY"),
  ("LATTY", "OH"),
  ("LAUDERDALE", "MS"),
  ("LAUDERDALE", "MN"),
  ("LAUDERDALE LAKES", "WI"),
  ("LAUDERDALE LAKES", "FL"),
  ("LAUDERDALE-BY-THE-SEA", "FL"),
  ("LAUDERHILL", "FL"),
  ("LAUGHLIN", "NV"),
  ("LAUGHLIN AFB", "TX"),
  ("LAUNIUPOKO", "HI"),
  ("LAUPAHOEHOE", "HI"),
  ("LAURA", "OH"),
  ("LAUREL", "MS"),
  ("LAUREL", "VA"),
  ("LAUREL", "FL"),
  ("LAUREL", "MD"),
  ("LAUREL", "NY"),
  ("LAUREL", "DE"),
  ("LAUREL", "MT"),
  ("LAUREL", "NE"),
  ("LAUREL", "IA"),
  ("LAUREL", "IN"),
  ("LAUREL BAY", "SC"),
  ("LAUREL HILL", "VA"),
  ("LAUREL HILL", "FL"),
  ("LAUREL HILL", "NC"),
  ("LAUREL HOLLOW", "NY"),
  ("LAUREL LAKE", "NJ"),
  ("LAUREL MOUNTAIN", "PA"),
  ("LAUREL PARK", "NC"),
  ("LAUREL PARK", "VA"),
  ("LAUREL RUN", "PA"),
  ("LAUREL SPRINGS", "NJ"),
  ("LAURELDALE", "PA"),
  ("LAURELES", "TX"),
  ("LAURELTON", "PA"),
  ("LAURELVILLE", "OH"),
  ("LAURENCE HARBOR", "NJ"),
  ("LAURENS", "SC"),
  ("LAURENS", "IA"),
  ("LAURENS", "NY"),
  ("LAURIE", "MO"),
  ("LAURIER", "WA"),
  ("LAURINBURG", "NC"),
  ("LAURIUM", "MI"),
  ("LAURYS STATION", "PA"),
  ("LAVA HOT SPRINGS", "ID"),
  ("LAVACA", "AR"),
  ("LAVALETTE", "WV"),
  ("LAVALLETTE", "NJ"),
  ("LAVELLE", "PA"),
  ("LAVERNE", "OK"),
  ("LAVINA", "MT"),
  ("LAVON", "TX"),
  ("LAVONIA", "GA"),
  ("LAWAI", "HI"),
  ("LAWLER", "IA"),
  ("LAWN", "TX"),
  ("LAWNDALE", "CA"),
  ("LAWNDALE", "NC"),
  ("LAWNSIDE", "NJ"),
  ("LAWNTON", "PA"),
  ("LAWRENCE", "KS"),
  ("LAWRENCE", "IN"),
  ("LAWRENCE", "MA"),
  ("LAWRENCE", "NY"),
  ("LAWRENCE", "MI"),
  ("LAWRENCE", "NE"),
  ("LAWRENCE", "PA"),
  ("LAWRENCE CREEK", "OK"),
  ("LAWRENCE PARK", "PA"),
  ("LAWRENCEBURG", "TN"),
  ("LAWRENCEBURG", "KY"),
  ("LAWRENCEBURG", "IN"),
  ("LAWRENCEVILLE", "GA"),
  ("LAWRENCEVILLE", "IL"),
  ("LAWRENCEVILLE", "VA"),
  ("LAWRENCEVILLE", "NJ"),
  ("LAWRENCEVILLE", "PA"),
  ("LAWSON", "MO"),
  ("LAWSON HEIGHTS", "PA"),
  ("LAWTELL", "LA"),
  ("LAWTEY", "FL"),
  ("LAWTON", "OK"),
  ("LAWTON", "MI"),
  ("LAWTON", "ND"),
  ("LAWTON", "IA"),
  ("LAYHILL", "MD"),
  ("LAYMANTOWN", "VA"),
  ("LAYTON", "UT"),
  ("LAYTON", "FL"),
  ("LAYTONSVILLE", "MD"),
  ("LAYTONVILLE", "CA"),
  ("LAZY ACRES", "CO"),
  ("LAZY LAKE", "FL"),
  ("LAZY MOUNTAIN", "AK"),
  ("LAZY Y U", "AZ"),
  ("LE CENTER", "MN"),
  ("LE CLAIRE", "IA"),
  ("LE FLORE", "OK"),
  ("LE GRAND", "CA"),
  ("LE GRAND", "IA"),
  ("LE MARS", "IA"),
  ("LE RAYSVILLE", "PA"),
  ("LE ROY", "NY"),
  ("LE ROY", "IL"),
  ("LE ROY", "MI"),
  ("LE ROY", "MN"),
  ("LE ROY", "IA"),
  ("LE SUEUR", "MN"),
  ("LEACH", "OK"),
  ("LEACHVILLE", "AR"),
  ("LEAD", "SD"),
  ("LEAD HILL", "AR"),
  ("LEADINGTON", "MO"),
  ("LEADORE", "ID"),
  ("LEADVILLE", "CO"),
  ("LEADVILLE NORTH", "CO"),
  ("LEADWOOD", "MO"),
  ("LEAF RIVER", "IL"),
  ("LEAGUE CITY", "TX"),
  ("LEAKESVILLE", "MS"),
  ("LEAKEY", "TX"),
  ("LEAL", "ND"),
  ("LEALMAN", "FL"),
  ("LEAMINGTON", "UT"),
  ("LEANDER", "TX"),
  ("LEANDO", "IA"),
  ("LEARNED", "MS"),
  ("LEARY", "GA"),
  ("LEARY", "TX"),
  ("LEASBURG", "MO"),
  ("LEAVENWORTH", "KS"),
  ("LEAVENWORTH", "WA"),
  ("LEAVENWORTH", "IN"),
  ("LEAVITTSBURG", "OH"),
  ("LEAWOOD", "KS"),
  ("LEAWOOD", "MO"),
  ("LEBAM", "WA"),
  ("LEBANON", "NH"),
  ("LEBANON", "TN"),
  ("LEBANON", "IN"),
  ("LEBANON", "MO"),
  ("LEBANON", "OH"),
  ("LEBANON", "OR"),
  ("LEBANON", "KY"),
  ("LEBANON", "VA"),
  ("LEBANON", "PA"),
  ("LEBANON", "OK"),
  ("LEBANON", "IL"),
  ("LEBANON", "NJ"),
  ("LEBANON", "SD"),
  ("LEBANON", "WI"),
  ("LEBANON", "KS"),
  ("LEBANON", "NE"),
  ("LEBANON JUNCTION", "KY"),
  ("LEBANON SOUTH", "PA"),
  ("LEBEC", "CA"),
  ("LEBO", "KS"),
  ("LECANTO", "FL"),
  ("LECHEE", "AZ"),
  ("LECOMPTE", "LA"),
  ("LECOMPTON", "KS"),
  ("LEDBETTER", "KY"),
  ("LEDYARD", "IA"),
  ("LEE", "FL"),
  ("LEE", "MA"),
  ("LEE", "IL"),
  ("LEE ACRES", "NM"),
  ("LEE MONT", "VA"),
  ("LEE VINING", "CA"),
  ("LEECHBURG", "PA"),
  ("LEEDEY", "OK"),
  ("LEEDS", "AL"),
  ("LEEDS", "UT"),
  ("LEEDS", "NY"),
  ("LEEDS", "ND"),
  ("LEEPER", "PA"),
  ("LEE'S SUMMIT", "MO"),
  ("LEESBURG", "FL"),
  ("LEESBURG", "VA"),
  ("LEESBURG", "AL"),
  ("LEESBURG", "GA"),
  ("LEESBURG", "OH"),
  ("LEESBURG", "IN"),
  ("LEESPORT", "PA"),
  ("LEESVILLE", "LA"),
  ("LEESVILLE", "OH"),
  ("LEETON", "MO"),
  ("LEETONIA", "OH"),
  ("LEETSDALE", "PA"),
  ("LEFORS", "TX"),
  ("LEGEND LAKE", "WI"),
  ("LEGGETT", "CA"),
  ("LEGGETT", "NC"),
  ("LEHI", "UT"),
  ("LEHIGH", "IA"),
  ("LEHIGH", "OK"),
  ("LEHIGH", "KS"),
  ("LEHIGH ACRES", "FL"),
  ("LEHIGHTON", "PA"),
  ("LEHR", "ND"),
  ("LEICESTER", "NY"),
  ("LEIGH", "NE"),
  ("LEIGHTON", "AL"),
  ("LEIGHTON", "IA"),
  ("LEILANI ESTATES", "HI"),
  ("LEIPSIC", "OH"),
  ("LEIPSIC", "DE"),
  ("LEISURE CITY", "FL"),
  ("LEISURE KNOLL", "NJ"),
  ("LEISURE LAKE", "MO"),
  ("LEISURE VILLAGE", "NJ"),
  ("LEISURE VILLAGE EAST", "NJ"),
  ("LEISURE VILLAGE WEST", "NJ"),
  ("LEISURE WORLD", "MD"),
  ("LEISURETOWNE", "NJ"),
  ("LEITCHFIELD", "KY"),
  ("LEITERSBURG", "MD"),
  ("LEITH", "ND"),
  ("LEITH-HATFIELD", "PA"),
  ("LELAND", "NC"),
  ("LELAND", "MS"),
  ("LELAND", "IA"),
  ("LELAND", "MI"),
  ("LELAND", "IL"),
  ("LELAND GROVE", "IL"),
  ("LELY", "FL"),
  ("LELY RESORT", "FL"),
  ("LEMANNVILLE", "LA"),
  ("LEMAY", "MO"),
  ("LEMING", "TX"),
  ("LEMITAR", "NM"),
  ("LEMMON", "SD"),
  ("LEMMON VALLEY", "NV"),
  ("LEMON COVE", "CA"),
  ("LEMON GROVE", "FL"),
  ("LEMON GROVE", "CA"),
  ("LEMON HILL", "CA"),
  ("LEMONT", "IL"),
  ("LEMONT", "PA"),
  ("LEMONT FURNACE", "PA"),
  ("LEMOORE", "CA"),
  ("LEMOORE STATION", "CA"),
  ("LEMOYNE", "PA"),
  ("LEMOYNE", "NE"),
  ("LENA", "IL"),
  ("LENA", "MS"),
  ("LENA", "WI"),
  ("LENAPAH", "OK"),
  ("LENAPE HEIGHTS", "PA"),
  ("LENEXA", "KS"),
  ("LENGBY", "MN"),
  ("LENHARTSVILLE", "PA"),
  ("LENKERVILLE", "PA"),
  ("LENNON", "MI"),
  ("LENNOX", "SD"),
  ("LENNOX", "CA"),
  ("LENOIR", "NC"),
  ("LENOIR CITY", "TN"),
  ("LENORA", "KS"),
  ("LENOX", "IA"),
  ("LENOX", "MA"),
  ("LENOX", "GA"),
  ("LENWOOD", "CA"),
  ("LENZBURG", "IL"),
  ("LEO-CEDARVILLE", "IN"),
  ("LEOLA", "PA"),
  ("LEOLA", "AR"),
  ("LEOLA", "SD"),
  ("LEOMINSTER", "MA"),
  ("LEON", "IA"),
  ("LEON", "KS"),
  ("LEON", "WV"),
  ("LEON", "OK"),
  ("LEON VALLEY", "TX"),
  ("LEONA", "TX"),
  ("LEONA", "KS"),
  ("LEONA VALLEY", "CA"),
  ("LEONARD", "TX"),
  ("LEONARD", "MI"),
  ("LEONARD", "ND"),
  ("LEONARD", "MN"),
  ("LEONARD", "MO"),
  ("LEONARDO", "NJ"),
  ("LEONARDTOWN", "MD"),
  ("LEONARDVILLE", "KS"),
  ("LEONIA", "NJ"),
  ("LEONIDAS", "MN"),
  ("LEONORE", "IL"),
  ("LEONVILLE", "LA"),
  ("LEOPOLIS", "WI"),
  ("LEOTA", "MN"),
  ("LEOTI", "KS"),
  ("LEPANTO", "AR"),
  ("LERNA", "IL"),
  ("LEROY", "AL"),
  ("LEROY", "TX"),
  ("LEROY", "KS"),
  ("LESAGE", "WV"),
  ("LESHARA", "NE"),
  ("LESLIE", "GA"),
  ("LESLIE", "MI"),
  ("LESLIE", "AR"),
  ("LESLIE", "MO"),
  ("LESSLIE", "SC"),
  ("LESTER", "AL"),
  ("LESTER", "IA"),
  ("LESTER", "WV"),
  ("LESTER PRAIRIE", "MN"),
  ("LESTERVILLE", "SD"),
  ("LETCHER", "SD"),
  ("LETONA", "AR"),
  ("LETTS", "IA"),
  ("LEUPP", "AZ"),
  ("LEVAN", "UT"),
  ("LEVANT", "KS"),
  ("LEVASY", "MO"),
  ("LEVEL GREEN", "PA"),
  ("LEVEL PARK-OAK PARK", "MI"),
  ("LEVEL PLAINS", "AL"),
  ("LEVELLAND", "TX"),
  ("LEVELOCK", "AK"),
  ("LEVERING", "MI"),
  ("LEVITTOWN", "PA"),
  ("LEVITTOWN", "NY"),
  ("LEVITTOWN", "PR"),
  ("LEWELLEN", "NE"),
  ("LEWES", "DE"),
  ("LEWIS", "CO"),
  ("LEWIS", "WI"),
  ("LEWIS", "IA"),
  ("LEWIS", "KS"),
  ("LEWIS AND CLARK VILLAGE", "MO"),
  ("LEWIS RUN", "PA"),
  ("LEWISBERRY", "PA"),
  ("LEWISBURG", "TN"),
  ("LEWISBURG", "WV"),
  ("LEWISBURG", "KY"),
  ("LEWISBURG", "OH"),
  ("LEWISBURG", "PA"),
  ("LEWISPORT", "KY"),
  ("LEWISTON", "ME"),
  ("LEWISTON", "UT"),
  ("LEWISTON", "CA"),
  ("LEWISTON", "ID"),
  ("LEWISTON", "MI"),
  ("LEWISTON", "MN"),
  ("LEWISTON", "NY"),
  ("LEWISTON", "NE"),
  ("LEWISTON WOODVILLE", "NC"),
  ("LEWISTOWN", "MT"),
  ("LEWISTOWN", "PA"),
  ("LEWISTOWN", "IL"),
  ("LEWISTOWN", "OH"),
  ("LEWISTOWN", "MO"),
  ("LEWISTOWN HEIGHTS", "MT"),
  ("LEWISVILLE", "TX"),
  ("LEWISVILLE", "NC"),
  ("LEWISVILLE", "WA"),
  ("LEWISVILLE", "AR"),
  ("LEWISVILLE", "ID"),
  ("LEWISVILLE", "OH"),
  ("LEWISVILLE", "MN"),
  ("LEWISVILLE", "IN"),
  ("LEXA", "AR"),
  ("LEXINGTON", "NC"),
  ("LEXINGTON", "MA"),
  ("LEXINGTON", "TN"),
  ("LEXINGTON", "SC"),
  ("LEXINGTON", "MO"),
  ("LEXINGTON", "NE"),
  ("LEXINGTON", "OH"),
  ("LEXINGTON", "AL"),
  ("LEXINGTON", "VA"),
  ("LEXINGTON", "MS"),
  ("LEXINGTON", "OK"),
  ("LEXINGTON", "MI"),
  ("LEXINGTON", "IL"),
  ("LEXINGTON", "TX"),
  ("LEXINGTON", "MN"),
  ("LEXINGTON", "GA"),
  ("LEXINGTON", "OR"),
  ("LEXINGTON HILLS", "CA"),
  ("LEXINGTON PARK", "MD"),
  ("LEXINGTON-FAYETTE URBAN COUNTY", "KY"),
  ("LEYNER", "CO"),
  ("LIBBY", "MT"),
  ("LIBERAL", "KS"),
  ("LIBERAL", "MO"),
  ("LIBERTY", "TX"),
  ("LIBERTY", "MO"),
  ("LIBERTY", "OK"),
  ("LIBERTY", "UT"),
  ("LIBERTY", "SC"),
  ("LIBERTY", "NC"),
  ("LIBERTY", "NY"),
  ("LIBERTY", "OK"),
  ("LIBERTY", "MS"),
  ("LIBERTY", "KY"),
  ("LIBERTY", "PA"),
  ("LIBERTY", "TN"),
  ("LIBERTY", "IN"),
  ("LIBERTY", "PA"),
  ("LIBERTY", "IL"),
  ("LIBERTY", "KS"),
  ("LIBERTY", "NE"),
  ("LIBERTY CENTER", "OH"),
  ("LIBERTY CITY", "TX"),
  ("LIBERTY HILL", "TX"),
  ("LIBERTY LAKE", "WA"),
  ("LIBERTYTOWN", "MD"),
  ("LIBERTYVILLE", "IL"),
  ("LIBERTYVILLE", "AL"),
  ("LIBERTYVILLE", "IA"),
  ("LIBORIO NEGRÛN TORRES", "PR"),
  ("LICKING", "MO"),
  ("LIDDERDALE", "IA"),
  ("LIDGERWOOD", "ND"),
  ("LIDO BEACH", "NY"),
  ("LIEBENTHAL", "KS"),
  ("LIGHT OAK", "NC"),
  ("LIGHTHOUSE POINT", "FL"),
  ("LIGHTSTREET", "PA"),
  ("LIGNITE", "ND"),
  ("LIGONIER", "IN"),
  ("LIGONIER", "PA"),
  ("LIHUE", "HI"),
  ("LIKELY", "CA"),
  ("LILBOURN", "MO"),
  ("LILBURN", "GA"),
  ("LILESVILLE", "NC"),
  ("LILLIE", "LA"),
  ("LILLINGTON", "NC"),
  ("LILLY", "GA"),
  ("LILLY", "PA"),
  ("LILY", "SD"),
  ("LILY LAKE", "IL"),
  ("LILY LAKE", "WI"),
  ("LILYDALE", "MN"),
  ("LIMA", "OH"),
  ("LIMA", "PA"),
  ("LIMA", "NY"),
  ("LIMA", "MT"),
  ("LIMA", "OK"),
  ("LIMA", "IL"),
  ("LIMAVILLE", "OH"),
  ("LIME LAKE", "NY"),
  ("LIME RIDGE", "PA"),
  ("LIME RIDGE", "WI"),
  ("LIME SPRINGS", "IA"),
  ("LIME VILLAGE", "AK"),
  ("LIMESTONE", "FL"),
  ("LIMESTONE", "OK"),
  ("LIMESTONE", "ME"),
  ("LIMESTONE", "IL"),
  ("LIMESTONE", "NY"),
  ("LIMESTONE CREEK", "FL"),
  ("LIMON", "CO"),
  ("LINCOLN", "NE"),
  ("LINCOLN", "AL"),
  ("LINCOLN", "CA"),
  ("LINCOLN", "MT"),
  ("LINCOLN", "ME"),
  ("LINCOLN", "IL"),
  ("LINCOLN", "PA"),
  ("LINCOLN", "AR"),
  ("LINCOLN", "NH"),
  ("LINCOLN", "ID"),
  ("LINCOLN", "ND"),
  ("LINCOLN", "MO"),
  ("LINCOLN", "MI"),
  ("LINCOLN", "IA"),
  ("LINCOLN BEACH", "OR"),
  ("LINCOLN CENTER", "KS"),
  ("LINCOLN CITY", "OR"),
  ("LINCOLN HEIGHTS", "OH"),
  ("LINCOLN PARK", "NJ"),
  ("LINCOLN PARK", "MI"),
  ("LINCOLN PARK", "CO"),
  ("LINCOLN PARK", "NY"),
  ("LINCOLN PARK", "GA"),
  ("LINCOLN PARK", "PA"),
  ("LINCOLN PARK", "TX"),
  ("LINCOLN UNIVERSITY", "PA"),
  ("LINCOLN VILLAGE", "OH"),
  ("LINCOLN VILLAGE", "CA"),
  ("LINCOLNDALE", "NY"),
  ("LINCOLNIA", "VA"),
  ("LINCOLNSHIRE", "IL"),
  ("LINCOLNSHIRE", "KY"),
  ("LINCOLNTON", "NC"),
  ("LINCOLNTON", "GA"),
  ("LINCOLNVILLE", "SC"),
  ("LINCOLNVILLE", "PA"),
  ("LINCOLNVILLE", "KS"),
  ("LINCOLNWOOD", "IL"),
  ("LINCROFT", "NJ"),
  ("LIND", "WA"),
  ("LINDA", "CA"),
  ("LINDALE", "TX"),
  ("LINDALE", "GA"),
  ("LINDCOVE", "CA"),
  ("LINDEN", "AZ"),
  ("LINDEN", "NJ"),
  ("LINDEN", "CA"),
  ("LINDEN", "AL"),
  ("LINDEN", "TX"),
  ("LINDEN", "MI"),
  ("LINDEN", "TN"),
  ("LINDEN", "IA"),
  ("LINDEN", "WI"),
  ("LINDEN", "NC"),
  ("LINDEN", "IN"),
  ("LINDENHURST", "IL"),
  ("LINDENHURST", "NY"),
  ("LINDENWOLD", "NJ"),
  ("LINDISFARNE", "MT"),
  ("LINDON", "UT"),
  ("LINDSAY", "CA"),
  ("LINDSAY", "OK"),
  ("LINDSAY", "TX"),
  ("LINDSAY", "TX"),
  ("LINDSAY", "NE"),
  ("LINDSBORG", "KS"),
  ("LINDSEY", "OH"),
  ("LINDSTROM", "MN"),
  ("LINDY", "NE"),
  ("LINESVILLE", "PA"),
  ("LINEVILLE", "AL"),
  ("LINEVILLE", "IA"),
  ("LINGANORE", "MD"),
  ("LINGLE", "WY"),
  ("LINGLESTOWN", "PA"),
  ("LINN", "TX"),
  ("LINN", "MO"),
  ("LINN", "KS"),
  ("LINN CREEK", "MO"),
  ("LINN GROVE", "IA"),
  ("LINN VALLEY", "KS"),
  ("LINNDALE", "OH"),
  ("LINNELL CAMP", "CA"),
  ("LINNEUS", "MO"),
  ("LINNTOWN", "PA"),
  ("LINO LAKES", "MN"),
  ("LINTHICUM", "MD"),
  ("LINTON", "IN"),
  ("LINTON", "ND"),
  ("LINTON HALL", "VA"),
  ("LINWOOD", "NJ"),
  ("LINWOOD", "NY"),
  ("LINWOOD", "KS"),
  ("LINWOOD", "PA"),
  ("LINWOOD", "NE"),
  ("LIONVILLE", "PA"),
  ("LIPAN", "TX"),
  ("LIPSCOMB", "TX"),
  ("LIPSCOMB", "AL"),
  ("LISBON", "LA"),
  ("LISBON", "NH"),
  ("LISBON", "ND"),
  ("LISBON", "IA"),
  ("LISBON", "FL"),
  ("LISBON", "IL"),
  ("LISBON", "OH"),
  ("LISBON FALLS", "ME"),
  ("LISCO", "NE"),
  ("LISCOMB", "IA"),
  ("LISLE", "IL"),
  ("LISLE", "NY"),
  ("LISMAN", "AL"),
  ("LISMORE", "MN"),
  ("LITCHFIELD", "IL"),
  ("LITCHFIELD", "MN"),
  ("LITCHFIELD", "CA"),
  ("LITCHFIELD", "MI"),
  ("LITCHFIELD", "CT"),
  ("LITCHFIELD", "NE"),
  ("LITCHFIELD PARK", "AZ"),
  ("LITCHVILLE", "ND"),
  ("LITHIA SPRINGS", "GA"),
  ("LITHIUM", "MO"),
  ("LITHONIA", "GA"),
  ("LITHOPOLIS", "OH"),
  ("LITITZ", "PA"),
  ("LITTLE AMERICA", "WY"),
  ("LITTLE BITTERROOT LAKE", "MT"),
  ("LITTLE BRITAIN", "PA"),
  ("LITTLE BROWNING", "MT"),
  ("LITTLE CANADA", "MN"),
  ("LITTLE CEDAR", "IA"),
  ("LITTLE CHUTE", "WI"),
  ("LITTLE CREEK", "DE"),
  ("LITTLE EAGLE", "SD"),
  ("LITTLE ELM", "TX"),
  ("LITTLE FALLS", "MN"),
  ("LITTLE FALLS", "NY"),
  ("LITTLE FALLS", "ME"),
  ("LITTLE FERRY", "NJ"),
  ("LITTLE FLOCK", "AR"),
  ("LITTLE GRASS VALLEY", "CA"),
  ("LITTLE HOCKING", "OH"),
  ("LITTLE MEADOWS", "PA"),
  ("LITTLE MOUNTAIN", "SC"),
  ("LITTLE ORLEANS", "MD"),
  ("LITTLE RIVER", "SC"),
  ("LITTLE RIVER", "CA"),
  ("LITTLE RIVER", "KS"),
  ("LITTLE RIVER-ACADEMY", "TX"),
  ("LITTLE ROCK", "AR"),
  ("LITTLE ROCK", "MN"),
  ("LITTLE ROCK", "IA"),
  ("LITTLE ROUND LAKE", "WI"),
  ("LITTLE SILVER", "NJ"),
  ("LITTLE SIOUX", "IA"),
  ("LITTLE STURGEON", "WI"),
  ("LITTLE VALLEY", "NY"),
  ("LITTLE YORK", "IN"),
  ("LITTLE YORK", "IL"),
  ("LITTLEFIELD", "AZ"),
  ("LITTLEFIELD", "TX"),
  ("LITTLEFORK", "MN"),
  ("LITTLEJOHN ISLAND", "ME"),
  ("LITTLEROCK", "CA"),
  ("LITTLESTOWN", "PA"),
  ("LITTLETON", "CO"),
  ("LITTLETON", "NH"),
  ("LITTLETON", "IL"),
  ("LITTLETON", "NC"),
  ("LITTLETON", "WV"),
  ("LITTLETON COMMON", "MA"),
  ("LITTLETOWN", "AZ"),
  ("LITTLEVILLE", "AL"),
  ("LIVE OAK", "FL"),
  ("LIVE OAK", "TX"),
  ("LIVE OAK", "CA"),
  ("LIVE OAK", "CA"),
  ("LIVENGOOD", "AK"),
  ("LIVERMORE", "CA"),
  ("LIVERMORE", "KY"),
  ("LIVERMORE", "IA"),
  ("LIVERMORE FALLS", "ME"),
  ("LIVERPOOL", "TX"),
  ("LIVERPOOL", "PA"),
  ("LIVERPOOL", "NY"),
  ("LIVERPOOL", "IL"),
  ("LIVINGSTON", "TX"),
  ("LIVINGSTON", "AL"),
  ("LIVINGSTON", "TN"),
  ("LIVINGSTON", "MT"),
  ("LIVINGSTON", "CA"),
  ("LIVINGSTON", "LA"),
  ("LIVINGSTON", "IL"),
  ("LIVINGSTON", "WI"),
  ("LIVINGSTON", "SC"),
  ("LIVINGSTON", "KY"),
  ("LIVINGSTON MANOR", "NY"),
  ("LIVINGSTON WHEELER", "NM"),
  ("LIVONIA", "MI"),
  ("LIVONIA", "LA"),
  ("LIVONIA", "IN"),
  ("LIVONIA", "NY"),
  ("LIVONIA", "MO"),
  ("LIVONIA CENTER", "NY"),
  ("LIZTON", "IN"),
  ("LLANO", "TX"),
  ("LLANO DEL MEDIO", "NM"),
  ("LLANO GRANDE", "TX"),
  ("LLOYD", "FL"),
  ("LLOYD HARBOR", "NY"),
  ("LLUVERAS", "PR"),
  ("LOA", "UT"),
  ("LOACHAPOKA", "AL"),
  ("LOAMI", "IL"),
  ("LOBELVILLE", "TN"),
  ("LOCH ARBOUR", "NJ"),
  ("LOCH LLOYD", "MO"),
  ("LOCH LOMOND", "VA"),
  ("LOCH LYNN HEIGHTS", "MD"),
  ("LOCHBUIE", "CO"),
  ("LOCHEARN", "MD"),
  ("LOCHMOOR WATERWAY ESTATES", "FL"),
  ("LOCHSLOY", "WA"),
  ("LOCK HAVEN", "PA"),
  ("LOCK SPRINGS", "MO"),
  ("LOCKBOURNE", "OH"),
  ("LOCKEFORD", "CA"),
  ("LOCKESBURG", "AR"),
  ("LOCKHART", "TX"),
  ("LOCKHART", "FL"),
  ("LOCKHART", "AL"),
  ("LOCKHART", "SC"),
  ("LOCKINGTON", "OH"),
  ("LOCKLAND", "OH"),
  ("LOCKNEY", "TX"),
  ("LOCKPORT", "IL"),
  ("LOCKPORT", "NY"),
  ("LOCKPORT", "LA"),
  ("LOCKPORT HEIGHTS", "LA"),
  ("LOCKRIDGE", "IA"),
  ("LOCKWOOD", "MT"),
  ("LOCKWOOD", "CA"),
  ("LOCKWOOD", "MO"),
  ("LOCO", "OK"),
  ("LOCO HILLS", "NM"),
  ("LOCUST", "NC"),
  ("LOCUST FORK", "AL"),
  ("LOCUST GROVE", "GA"),
  ("LOCUST GROVE", "OK"),
  ("LOCUST VALLEY", "NY"),
  ("LOCUSTDALE", "PA"),
  ("LODA", "IL"),
  ("LODGE", "SC"),
  ("LODGE GRASS", "MT"),
  ("LODGE POLE", "MT"),
  ("LODGEPOLE", "NE"),
  ("LODI", "CA"),
  ("LODI", "NJ"),
  ("LODI", "OH"),
  ("LODI", "WI"),
  ("LODI", "NY"),
  ("LODOGA", "CA"),
  ("LOFALL", "WA"),
  ("LOG CABIN", "TX"),
  ("LOG LANE VILLAGE", "CO"),
  ("LOGAN", "UT"),
  ("LOGAN", "NM"),
  ("LOGAN", "OH"),
  ("LOGAN", "KS"),
  ("LOGAN", "ND"),
  ("LOGAN", "WV"),
  ("LOGAN", "IA"),
  ("LOGAN", "MT"),
  ("LOGAN CREEK", "NV"),
  ("LOGAN ELM VILLAGE", "OH"),
  ("LOGANSPORT", "IN"),
  ("LOGANSPORT", "LA"),
  ("LOGANTON", "PA"),
  ("LOGANVILLE", "GA"),
  ("LOGANVILLE", "PA"),
  ("LOGANVILLE", "WI"),
  ("LOGHILL VILLAGE", "CO"),
  ("LOHMAN", "MO"),
  ("LOHRVILLE", "IA"),
  ("LOHRVILLE", "WI"),
  ("LOÌZA", "PR"),
  ("LOLETA", "CA"),
  ("LOLITA", "TX"),
  ("LOLO", "MT"),
  ("LOMA", "ND"),
  ("LOMA", "CO"),
  ("LOMA", "MT"),
  ("LOMA GRANDE", "TX"),
  ("LOMA LINDA", "CA"),
  ("LOMA LINDA", "MO"),
  ("LOMA LINDA", "TX"),
  ("LOMA LINDA EAST", "TX"),
  ("LOMA LINDA EAST", "TX"),
  ("LOMA LINDA WEST", "TX"),
  ("LOMA MAR", "CA"),
  ("LOMA RICA", "CA"),
  ("LOMA VISTA", "TX"),
  ("LOMAS", "PR"),
  ("LOMAX", "IL"),
  ("LOMBARD", "IL"),
  ("LOMETA", "TX"),
  ("LOMIRA", "WI"),
  ("LOMITA", "CA"),
  ("LOMPICO", "CA"),
  ("LOMPOC", "CA"),
  ("LONACONING", "MD"),
  ("LONDON", "KY"),
  ("LONDON", "OH"),
  ("LONDON", "AR"),
  ("LONDON", "CA"),
  ("LONDON MILLS", "IL"),
  ("LONDONDERRY", "NH"),
  ("LONE ELM", "KS"),
  ("LONE GROVE", "OK"),
  ("LONE JACK", "MO"),
  ("LONE OAK", "TN"),
  ("LONE OAK", "TX"),
  ("LONE OAK", "GA"),
  ("LONE PINE", "CA"),
  ("LONE ROCK", "WI"),
  ("LONE ROCK", "IA"),
  ("LONE STAR", "TX"),
  ("LONE TREE", "CO"),
  ("LONE TREE", "IA"),
  ("LONE WOLF", "OK"),
  ("LONEPINE", "MT"),
  ("LONEROCK", "OR"),
  ("LONETREE", "WY"),
  ("LONG", "OK"),
  ("LONG BARN", "CA"),
  ("LONG BEACH", "CA"),
  ("LONG BEACH", "MS"),
  ("LONG BEACH", "NY"),
  ("LONG BEACH", "MD"),
  ("LONG BEACH", "MN"),
  ("LONG BEACH", "WA"),
  ("LONG BEACH", "IN"),
  ("LONG BRANCH", "NJ"),
  ("LONG BRANCH", "PA"),
  ("LONG BRANCH", "VA"),
  ("LONG CREEK", "IL"),
  ("LONG CREEK", "OR"),
  ("LONG GROVE", "IL"),
  ("LONG GROVE", "IA"),
  ("LONG HILL", "CT"),
  ("LONG HOLLOW", "SD"),
  ("LONG ISLAND", "KS"),
  ("LONG LAKE", "NY"),
  ("LONG LAKE", "IL"),
  ("LONG LAKE", "MN"),
  ("LONG LAKE", "SD"),
  ("LONG LAKE", "WI"),
  ("LONG NECK", "DE"),
  ("LONG PINE", "NE"),
  ("LONG POINT", "IL"),
  ("LONG PRAIRIE", "MN"),
  ("LONG VALLEY", "NJ"),
  ("LONG VIEW", "NC"),
  ("LONGBOAT KEY", "FL"),
  ("LONGBRANCH", "WA"),
  ("LONGDALE", "OK"),
  ("LONGFELLOW", "PA"),
  ("LONGFORD", "KS"),
  ("LONGMEADOW", "MA"),
  ("LONGMONT", "CO"),
  ("LONGORIA", "TX"),
  ("LONGPORT", "NJ"),
  ("LONGSTREET", "LA"),
  ("LONGTON", "KS"),
  ("LONGTOWN", "OK"),
  ("LONGTOWN", "MO"),
  ("LONGVIEW", "TX"),
  ("LONGVIEW", "WA"),
  ("LONGVIEW", "IL"),
  ("LONGVIEW HEIGHTS", "WA"),
  ("LONGVILLE", "LA"),
  ("LONGVILLE", "MN"),
  ("LONGWOOD", "FL"),
  ("LONOKE", "AR"),
  ("LONSDALE", "MN"),
  ("LONSDALE", "AR"),
  ("LOOGOOTEE", "IN"),
  ("LOOKEBA", "OK"),
  ("LOOKINGGLASS", "OR"),
  ("LOOKOUT", "CA"),
  ("LOOKOUT MOUNTAIN", "AL"),
  ("LOOKOUT MOUNTAIN", "GA"),
  ("LOOKOUT MOUNTAIN", "TN"),
  ("LOOMIS", "CA"),
  ("LOOMIS", "MI"),
  ("LOOMIS", "WA"),
  ("LOOMIS", "NE"),
  ("LOOMIS", "SD"),
  ("LOON LAKE", "WA"),
  ("LOOP", "TX"),
  ("LOPATCONG OVERLOOK", "NJ"),
  ("LOPEÒO", "TX"),
  ("LOPEZVILLE", "TX"),
  ("LORAIN", "OH"),
  ("LORAIN", "PA"),
  ("LORAINE", "TX"),
  ("LORAINE", "IL"),
  ("LORAINE", "ND"),
  ("LORANE", "PA"),
  ("LORDSBURG", "NM"),
  ("LORDSTOWN", "OH"),
  ("LORE CITY", "OH"),
  ("LOREAUVILLE", "LA"),
  ("LORENA", "TX"),
  ("LORENZ PARK", "NY"),
  ("LORENZO", "NE"),
  ("LORENZO", "TX"),
  ("LORETTO", "TN"),
  ("LORETTO", "KY"),
  ("LORETTO", "PA"),
  ("LORETTO", "MN"),
  ("LORETTO", "NE"),
  ("LORIMOR", "IA"),
  ("LORING", "AK"),
  ("LORIS", "SC"),
  ("LORRAINE", "NY"),
  ("LORRAINE", "KS"),
  ("LORTON", "VA"),
  ("LORTON", "NE"),
  ("LOS ALAMITOS", "CA"),
  ("LOS ALAMOS", "NM"),
  ("LOS ALAMOS", "CA"),
  ("LOS ALTOS", "CA"),
  ("LOS ALTOS", "TX"),
  ("LOS ALTOS HILLS", "CA"),
  ("LOS ALVAREZ", "TX"),
  ("LOS ANGELES", "CA"),
  ("LOS ANGELES", "TX"),
  ("LOS ARCOS", "TX"),
  ("LOS ARRIEROS", "TX"),
  ("LOS BANOS", "CA"),
  ("LOS BARRERAS", "TX"),
  ("LOS BERROS", "CA"),
  ("LOS CENTENARIOS", "TX"),
  ("LOS CERRILLOS", "NM"),
  ("LOS CHAVES", "NM"),
  ("LOS CORRALITOS", "TX"),
  ("LOS EBANOS", "TX"),
  ("LOS EBANOS", "TX"),
  ("LOS FRESNOS", "TX"),
  ("LOS FRESNOS", "TX"),
  ("LOS GATOS", "CA"),
  ("LOS HUISACHES", "TX"),
  ("LOS INDIOS", "TX"),
  ("LOS LLANOS", "PR"),
  ("LOS LOBOS", "TX"),
  ("LOS LUCEROS", "NM"),
  ("LOS LUNAS", "NM"),
  ("LOS MINERALES", "TX"),
  ("LOS MOLINOS", "CA"),
  ("LOS NOPALITOS", "TX"),
  ("LOS OJOS", "NM"),
  ("LOS OLIVOS", "CA"),
  ("LOS OSOS", "CA"),
  ("LOS PANES", "PR"),
  ("LOS PRADOS", "PR"),
  ("LOS RANCHOS", "CA"),
  ("LOS RANCHOS DE ALBUQUERQUE", "NM"),
  ("LOS VETERANOS I", "TX"),
  ("LOS VETERANOS II", "TX"),
  ("LOS YBANEZ", "TX"),
  ("LOSANTVILLE", "IN"),
  ("LOST BRIDGE VILLAGE", "AR"),
  ("LOST CITY", "OK"),
  ("LOST CREEK", "TX"),
  ("LOST CREEK", "WV"),
  ("LOST HILLS", "CA"),
  ("LOST LAKE WOODS", "MI"),
  ("LOST NATION", "IL"),
  ("LOST NATION", "IA"),
  ("LOST RIVER", "ID"),
  ("LOST SPRINGS", "KS"),
  ("LOST SPRINGS", "WY"),
  ("LOSTANT", "IL"),
  ("LOSTINE", "OR"),
  ("LOTSEE", "OK"),
  ("LOTT", "TX"),
  ("LOUANN", "AR"),
  ("LOUDON", "TN"),
  ("LOUDON", "NH"),
  ("LOUDONVILLE", "OH"),
  ("LOUDOUN VALLEY ESTATES", "VA"),
  ("LOUGHMAN", "FL"),
  ("LOUIN", "MS"),
  ("LOUISA", "VA"),
  ("LOUISA", "KY"),
  ("LOUISBURG", "KS"),
  ("LOUISBURG", "NC"),
  ("LOUISBURG", "MO"),
  ("LOUISBURG", "MN"),
  ("LOUISE", "TX"),
  ("LOUISE", "MS"),
  ("LOUISIANA", "MO"),
  ("LOUISVILLE", "KY"),
  ("LOUISVILLE", "MS"),
  ("LOUISVILLE", "TN"),
  ("LOUISVILLE", "CO"),
  ("LOUISVILLE", "OH"),
  ("LOUISVILLE", "GA"),
  ("LOUISVILLE", "AL"),
  ("LOUISVILLE", "IL"),
  ("LOUISVILLE", "NE"),
  ("LOUISVILLE", "KS"),
  ("LOUP CITY", "NE"),
  ("LOUVIERS", "CO"),
  ("LOVE VALLEY", "NC"),
  ("LOVEJOY", "GA"),
  ("LOVELACEVILLE", "KY"),
  ("LOVELADY", "TX"),
  ("LOVELAND", "CO"),
  ("LOVELAND", "OH"),
  ("LOVELAND", "OK"),
  ("LOVELAND", "IA"),
  ("LOVELAND PARK", "OH"),
  ("LOVELL", "WY"),
  ("LOVELOCK", "NV"),
  ("LOVES PARK", "IL"),
  ("LOVETTSVILLE", "VA"),
  ("LOVILIA", "IA"),
  ("LOVING", "NM"),
  ("LOVINGSTON", "VA"),
  ("LOVINGTON", "NM"),
  ("LOVINGTON", "IL"),
  ("LOW MOOR", "VA"),
  ("LOW MOOR", "IA"),
  ("LOW MOUNTAIN", "AZ"),
  ("LOWDEN", "IA"),
  ("LOWELL", "MA"),
  ("LOWELL", "AR"),
  ("LOWELL", "IN"),
  ("LOWELL", "VT"),
  ("LOWELL", "MI"),
  ("LOWELL", "NC"),
  ("LOWELL", "WI"),
  ("LOWELL", "OR"),
  ("LOWELL", "KS"),
  ("LOWELL", "OH"),
  ("LOWELL POINT", "AK"),
  ("LOWELLVILLE", "OH"),
  ("LOWER ALLEN", "PA"),
  ("LOWER BRULE", "SD"),
  ("LOWER BURRELL", "PA"),
  ("LOWER ELOCHOMAN", "WA"),
  ("LOWER FRISCO", "NM"),
  ("LOWER GRAND LAGOON", "FL"),
  ("LOWER KALSKAG", "AK"),
  ("LOWER LAKE", "CA"),
  ("LOWER SALEM", "OH"),
  ("LOWER SANTAN VILLAGE", "AZ"),
  ("LOWES", "KY"),
  ("LOWES ISLAND", "VA"),
  ("LOWESVILLE", "NC"),
  ("LOWGAP", "NC"),
  ("LOWMAN", "ID"),
  ("LOWNDESBORO", "AL"),
  ("LOWNDESVILLE", "SC"),
  ("LOWRY", "MN"),
  ("LOWRY", "SD"),
  ("LOWRY CITY", "MO"),
  ("LOWRY CROSSING", "TX"),
  ("LOWRYS", "SC"),
  ("LOWVILLE", "NY"),
  ("LOXAHATCHEE GROVES", "FL"),
  ("LOXLEY", "AL"),
  ("LOYAL", "WI"),
  ("LOYAL", "OK"),
  ("LOYALHANNA", "PA"),
  ("LOYALL", "KY"),
  ("LOYALTON", "CA"),
  ("LOYOLA", "CA"),
  ("LOZANO", "TX"),
  ("LU VERNE", "IA"),
  ("LUANA", "IA"),
  ("LUBBOCK", "TX"),
  ("LUBEC", "ME"),
  ("LUBECK", "WV"),
  ("LUBLIN", "WI"),
  ("LUCAMA", "NC"),
  ("LUCAN", "MN"),
  ("LUCAS", "TX"),
  ("LUCAS", "IA"),
  ("LUCAS", "OH"),
  ("LUCAS", "KS"),
  ("LUCAS VALLEY-MARINWOOD", "CA"),
  ("LUCASVILLE", "OH"),
  ("LUCEDALE", "MS"),
  ("LUCERNE", "WY"),
  ("LUCERNE", "CA"),
  ("LUCERNE", "MO"),
  ("LUCERNE MINES", "PA"),
  ("LUCERNE VALLEY", "CA"),
  ("LUCIEN", "OK"),
  ("LUCK", "WI"),
  ("LUCKEY", "OH"),
  ("LUCKY", "LA"),
  ("LUDDEN", "ND"),
  ("LUDINGTON", "MI"),
  ("LUDLOW", "VT"),
  ("LUDLOW", "KY"),
  ("LUDLOW", "IL"),
  ("LUDLOW", "MO"),
  ("LUDLOW FALLS", "OH"),
  ("LUDOWICI", "GA"),
  ("LUEDERS", "TX"),
  ("LUFKIN", "TX"),
  ("LUGOFF", "SC"),
  ("LUIS LLORÈNS TORRES", "PR"),
  ("LUIS LOPEZ", "NM"),
  ("LUIS M. CINTRÛN", "PR"),
  ("LUKACHUKAI", "AZ"),
  ("LUKE", "MD"),
  ("LULA", "GA"),
  ("LULA", "MS"),
  ("LULING", "LA"),
  ("LULING", "TX"),
  ("LUMBER BRIDGE", "NC"),
  ("LUMBER CITY", "PA"),
  ("LUMBER CITY", "GA"),
  ("LUMBER CITY", "PA"),
  ("LUMBERPORT", "WV"),
  ("LUMBERTON", "NC"),
  ("LUMBERTON", "TX"),
  ("LUMBERTON", "MS"),
  ("LUMBERTON", "NM"),
  ("LUMPKIN", "GA"),
  ("LUNA", "NM"),
  ("LUNA PIER", "MI"),
  ("LUND", "NV"),
  ("LUNENBURG", "MA"),
  ("LUNENBURG", "VA"),
  ("LUPTON", "MI"),
  ("LUPTON", "AZ"),
  ("LUPUS", "MO"),
  ("LUQUILLO", "PR"),
  ("LURAY", "VA"),
  ("LURAY", "SC"),
  ("LURAY", "KS"),
  ("LURAY", "MO"),
  ("LUSBY", "MD"),
  ("LUSHTON", "NE"),
  ("LUSK", "WY"),
  ("LUTAK", "AK"),
  ("LUTCHER", "LA"),
  ("LUTHER", "OK"),
  ("LUTHER", "MI"),
  ("LUTHER", "IA"),
  ("LUTHERSVILLE", "GA"),
  ("LUTHERVILLE", "MD"),
  ("LUTSEN", "MN"),
  ("LUTTRELL", "TN"),
  ("LUTZ", "FL"),
  ("LUVERNE", "AL"),
  ("LUVERNE", "MN"),
  ("LUVERNE", "ND"),
  ("LUXEMBURG", "WI"),
  ("LUXEMBURG", "IA"),
  ("LUXORA", "AR"),
  ("LUYANDO", "PR"),
  ("LUZERNE", "PA"),
  ("LUZERNE", "IA"),
  ("LYDEN", "NM"),
  ("LYDIA", "SC"),
  ("LYDIA", "LA"),
  ("LYERLY", "GA"),
  ("LYFORD", "TX"),
  ("LYKENS", "PA"),
  ("LYLE", "MN"),
  ("LYLE", "WA"),
  ("LYLES", "TN"),
  ("LYMAN", "MS"),
  ("LYMAN", "SC"),
  ("LYMAN", "UT"),
  ("LYMAN", "WY"),
  ("LYMAN", "WA"),
  ("LYMAN", "NE"),
  ("LYNBROOK", "NY"),
  ("LYNCH", "NE"),
  ("LYNCH", "KY"),
  ("LYNCHBURG", "VA"),
  ("LYNCHBURG", "MS"),
  ("LYNCHBURG", "SC"),
  ("LYNCHBURG", "OH"),
  ("LYNCOURT", "NY"),
  ("LYND", "MN"),
  ("LYNDEN", "WA"),
  ("LYNDHURST", "VA"),
  ("LYNDHURST", "OH"),
  ("LYNDON", "KY"),
  ("LYNDON", "KS"),
  ("LYNDON", "IL"),
  ("LYNDON STATION", "WI"),
  ("LYNDONVILLE", "NY"),
  ("LYNDONVILLE", "VT"),
  ("LYNN", "MA"),
  ("LYNN", "AL"),
  ("LYNN", "AR"),
  ("LYNN", "CO"),
  ("LYNN", "IN"),
  ("LYNN HAVEN", "FL"),
  ("LYNNDYL", "UT"),
  ("LYNNFIELD", "MA"),
  ("LYNNVIEW", "KY"),
  ("LYNNVILLE", "IN"),
  ("LYNNVILLE", "IA"),
  ("LYNNVILLE", "TN"),
  ("LYNNVILLE", "IL"),
  ("LYNNWOOD", "WA"),
  ("LYNNWOOD-PRICEDALE", "PA"),
  ("LYNWOOD", "IL"),
  ("LYNWOOD", "CA"),
  ("LYNXVILLE", "WI"),
  ("LYON", "MS"),
  ("LYON MOUNTAIN", "NY"),
  ("LYONS", "GA"),
  ("LYONS", "NY"),
  ("LYONS", "KS"),
  ("LYONS", "IL"),
  ("LYONS", "CO"),
  ("LYONS", "MI"),
  ("LYONS", "OR"),
  ("LYONS", "IN"),
  ("LYONS", "OH"),
  ("LYONS", "NE"),
  ("LYONS", "PA"),
  ("LYONS FALLS", "NY"),
  ("LYONS SWITCH", "OK"),
  ("LYTLE", "TX"),
  ("LYTLE CREEK", "CA"),
  ("LYTTON", "IA"),
  ("MAALAEA", "HI"),
  ("MABANK", "TX"),
  ("MABEL", "MN"),
  ("MABEN", "MS"),
  ("MABIE", "CA"),
  ("MABLETON", "GA"),
  ("MABSCOTT", "WV"),
  ("MABTON", "WA"),
  ("MACARTHUR", "WV"),
  ("MACCLENNY", "FL"),
  ("MACCLESFIELD", "NC"),
  ("MACDOEL", "CA"),
  ("MACDONA", "TX"),
  ("MACEDON", "NY"),
  ("MACEDONIA", "OH"),
  ("MACEDONIA", "AL"),
  ("MACEDONIA", "IA"),
  ("MACEDONIA", "IL"),
  ("MACEO", "KY"),
  ("MACHESNEY PARK", "IL"),
  ("MACHIAS", "ME"),
  ("MACHIAS", "WA"),
  ("MACHIAS", "NY"),
  ("MACK", "OH"),
  ("MACKAY", "ID"),
  ("MACKENZIE", "MO"),
  ("MACKEY", "IN"),
  ("MACKINAC ISLAND", "MI"),
  ("MACKINAW", "IL"),
  ("MACKINAW CITY", "MI"),
  ("MACKS CREEK", "MO"),
  ("MACKSBURG", "IA"),
  ("MACKSBURG", "OH"),
  ("MACKSVILLE", "KS"),
  ("MACKVILLE", "KY"),
  ("MACOMB", "IL"),
  ("MACOMB", "OK"),
  ("MACON", "GA"),
  ("MACON", "MO"),
  ("MACON", "MS"),
  ("MACON", "IL"),
  ("MACON", "NC"),
  ("MACUNGIE", "PA"),
  ("MACY", "NE"),
  ("MACY", "IN"),
  ("MAD RIVER", "CA"),
  ("MADAKET", "MA"),
  ("MADAWASKA", "ME"),
  ("MADDOCK", "ND"),
  ("MADEIRA", "OH"),
  ("MADEIRA BEACH", "FL"),
  ("MADELIA", "MN"),
  ("MADERA", "CA"),
  ("MADERA ACRES", "CA"),
  ("MADILL", "OK"),
  ("MADISON", "WI"),
  ("MADISON", "AL"),
  ("MADISON", "MS"),
  ("MADISON", "IL"),
  ("MADISON", "GA"),
  ("MADISON", "IN"),
  ("MADISON", "WV"),
  ("MADISON", "ME"),
  ("MADISON", "OH"),
  ("MADISON", "SD"),
  ("MADISON", "NJ"),
  ("MADISON", "NC"),
  ("MADISON", "MD"),
  ("MADISON", "FL"),
  ("MADISON", "AR"),
  ("MADISON", "CA"),
  ("MADISON", "NE"),
  ("MADISON", "MN"),
  ("MADISON", "KS"),
  ("MADISON", "NY"),
  ("MADISON", "MO"),
  ("MADISON", "PA"),
  ("MADISON", "VA"),
  ("MADISON CENTER", "CT"),
  ("MADISON HEIGHTS", "VA"),
  ("MADISON HEIGHTS", "MI"),
  ("MADISON LAKE", "MN"),
  ("MADISON PARK", "NJ"),
  ("MADISONBURG", "PA"),
  ("MADISONVILLE", "KY"),
  ("MADISONVILLE", "TN"),
  ("MADISONVILLE", "TX"),
  ("MADISONVILLE", "LA"),
  ("MADRAS", "OR"),
  ("MADRID", "NY"),
  ("MADRID", "AL"),
  ("MADRID", "NM"),
  ("MADRID", "IA"),
  ("MADRID", "NE"),
  ("MADRONE", "NM"),
  ("MAESER", "UT"),
  ("MAEYSTOWN", "IL"),
  ("MAGALIA", "CA"),
  ("MAGAS ARRIBA", "PR"),
  ("MAGAZINE", "AR"),
  ("MAGDALENA", "NM"),
  ("MAGEE", "MS"),
  ("MAGGIE VALLEY", "NC"),
  ("MAGNA", "UT"),
  ("MAGNESS", "AR"),
  ("MAGNET", "NE"),
  ("MAGNET COVE", "AR"),
  ("MAGNETIC SPRINGS", "OH"),
  ("MAGNOLIA", "AR"),
  ("MAGNOLIA", "MS"),
  ("MAGNOLIA", "TX"),
  ("MAGNOLIA", "KY"),
  ("MAGNOLIA", "NC"),
  ("MAGNOLIA", "NJ"),
  ("MAGNOLIA", "OH"),
  ("MAGNOLIA", "MN"),
  ("MAGNOLIA", "IA"),
  ("MAGNOLIA", "IL"),
  ("MAGNOLIA", "DE"),
  ("MAGNOLIA SPRINGS", "AL"),
  ("MAGUAYO", "PR"),
  ("MAHAFFEY", "PA"),
  ("MAHANOY CITY", "PA"),
  ("MAHARISHI VEDIC CITY", "IA"),
  ("MAHASKA", "KS"),
  ("MAHINAHINA", "HI"),
  ("MAHNOMEN", "MN"),
  ("MAHNOMEN", "MN"),
  ("MAHOMET", "IL"),
  ("MAHOPAC", "NY"),
  ("MAHTOMEDI", "MN"),
  ("MAHTOWA", "MN"),
  ("MAIDEN", "NC"),
  ("MAIDEN ROCK", "WI"),
  ("MAILI", "HI"),
  ("MAINEVILLE", "OH"),
  ("MAINVILLE", "PA"),
  ("MAISH VAYA", "AZ"),
  ("MAITLAND", "FL"),
  ("MAITLAND", "PA"),
  ("MAITLAND", "MO"),
  ("MAIZE", "KS"),
  ("MAKAHA", "HI"),
  ("MAKAHA VALLEY", "HI"),
  ("MAKAKILO", "HI"),
  ("MAKANDA", "IL"),
  ("MAKAWAO", "HI"),
  ("MAKEMIE PARK", "VA"),
  ("MAKENA", "HI"),
  ("MAKOTI", "ND"),
  ("MALABAR", "FL"),
  ("MALAD CITY", "ID"),
  ("MALAGA", "NM"),
  ("MALAGA", "CA"),
  ("MALAKOFF", "TX"),
  ("MALCOLM", "AL"),
  ("MALCOLM", "NE"),
  ("MALCOM", "IA"),
  ("MALDEN", "MO"),
  ("MALDEN", "MA"),
  ("MALDEN", "WA"),
  ("MALDEN", "IL"),
  ("MALDEN-ON-HUDSON", "NY"),
  ("MALIBU", "CA"),
  ("MALIN", "OR"),
  ("MALINTA", "OH"),
  ("MALLARD", "IA"),
  ("MALLORY", "WV"),
  ("MALMO", "NE"),
  ("MALMSTROM AFB", "MT"),
  ("MALO", "WA"),
  ("MALONE", "WA"),
  ("MALONE", "FL"),
  ("MALONE", "NY"),
  ("MALONE", "TX"),
  ("MALOTT", "WA"),
  ("MALOY", "IA"),
  ("MALTA", "ID"),
  ("MALTA", "MT"),
  ("MALTA", "IL"),
  ("MALTA", "OH"),
  ("MALTA BEND", "MO"),
  ("MALTBY", "WA"),
  ("MALVERN", "AL"),
  ("MALVERN", "AR"),
  ("MALVERN", "PA"),
  ("MALVERN", "IA"),
  ("MALVERN", "OH"),
  ("MALVERNE", "NY"),
  ("MALVERNE PARK OAKS", "NY"),
  ("MAMARONECK", "NY"),
  ("MAMERS", "NC"),
  ("MAMMOTH", "PA"),
  ("MAMMOTH", "AZ"),
  ("MAMMOTH", "WY"),
  ("MAMMOTH LAKES", "CA"),
  ("MAMMOTH SPRING", "AR"),
  ("MAMOU", "LA"),
  ("MAN", "WV"),
  ("MANAHAWKIN", "NJ"),
  ("MANALAPAN", "FL"),
  ("MANASOTA KEY", "FL"),
  ("MANASQUAN", "NJ"),
  ("MANASSA", "CO"),
  ("MANASSAS", "VA"),
  ("MANASSAS", "GA"),
  ("MANASSAS PARK", "VA"),
  ("MANATEE ROAD", "FL"),
  ("MANATÌ", "PR"),
  ("MANAWA", "WI"),
  ("MANCELONA", "MI"),
  ("MANCHACA", "TX"),
  ("MANCHESTER", "NH"),
  ("MANCHESTER", "TN"),
  ("MANCHESTER", "GA"),
  ("MANCHESTER", "CT"),
  ("MANCHESTER", "VA"),
  ("MANCHESTER", "MO"),
  ("MANCHESTER", "IA"),
  ("MANCHESTER", "VT"),
  ("MANCHESTER", "WA"),
  ("MANCHESTER", "CA"),
  ("MANCHESTER", "MD"),
  ("MANCHESTER", "MI"),
  ("MANCHESTER", "KY"),
  ("MANCHESTER", "OH"),
  ("MANCHESTER", "NY"),
  ("MANCHESTER", "IL"),
  ("MANCHESTER", "PA"),
  ("MANCHESTER", "KS"),
  ("MANCHESTER", "OK"),
  ("MANCHESTER", "MN"),
  ("MANCHESTER CENTER", "VT"),
  ("MANCOS", "CO"),
  ("MANDAN", "ND"),
  ("MANDAREE", "ND"),
  ("MANDERSON", "WY"),
  ("MANDERSON-WHITE HORSE CREEK", "SD"),
  ("MANDEVILLE", "LA"),
  ("MANELE", "HI"),
  ("MANGHAM", "LA"),
  ("MANGO", "FL"),
  ("MANGONIA PARK", "FL"),
  ("MANGUM", "OK"),
  ("MANHASSET", "NY"),
  ("MANHASSET HILLS", "NY"),
  ("MANHATTAN BEACH", "CA"),
  ("MANHATTAN BEACH", "MN"),
  ("MANHEIM", "PA"),
  ("MANILA", "AR"),
  ("MANILA", "UT"),
  ("MANILA", "CA"),
  ("MANILLA", "IA"),
  ("MANILLA", "IN"),
  ("MANISTEE", "MI"),
  ("MANISTEE LAKE", "MI"),
  ("MANISTIQUE", "MI"),
  ("MANITO", "IL"),
  ("MANITOU", "KY"),
  ("MANITOU", "OK"),
  ("MANITOU BEACH-DEVILS LAKE", "MI"),
  ("MANITOU SPRINGS", "CO"),
  ("MANITOWOC", "WI"),
  ("MANKATO", "MN"),
  ("MANKATO", "KS"),
  ("MANLEY", "NE"),
  ("MANLEY HOT SPRINGS", "AK"),
  ("MANLIUS", "NY"),
  ("MANLIUS", "IL"),
  ("MANLY", "IA"),
  ("MANNFORD", "OK"),
  ("MANNING", "SC"),
  ("MANNING", "IA"),
  ("MANNING", "ND"),
  ("MANNINGTON", "WV"),
  ("MANNS CHOICE", "PA"),
  ("MANNS HARBOR", "NC"),
  ("MANNSVILLE", "OK"),
  ("MANNSVILLE", "NY"),
  ("MANOKOTAK", "AK"),
  ("MANOR", "TX"),
  ("MANOR", "PA"),
  ("MANOR CREEK", "KY"),
  ("MANORHAVEN", "NY"),
  ("MANORVILLE", "NY"),
  ("MANORVILLE", "PA"),
  ("MANSFIELD", "TX"),
  ("MANSFIELD", "OH"),
  ("MANSFIELD", "LA"),
  ("MANSFIELD", "SD"),
  ("MANSFIELD", "AR"),
  ("MANSFIELD", "PA"),
  ("MANSFIELD", "MO"),
  ("MANSFIELD", "GA"),
  ("MANSFIELD", "IL"),
  ("MANSFIELD", "WA"),
  ("MANSFIELD CENTER", "CT"),
  ("MANSFIELD CENTER", "MA"),
  ("MANSON", "IA"),
  ("MANSON", "WA"),
  ("MANSURA", "LA"),
  ("MANTACHIE", "MS"),
  ("MANTADOR", "ND"),
  ("MANTECA", "CA"),
  ("MANTEE", "MS"),
  ("MANTENO", "IL"),
  ("MANTEO", "NC"),
  ("MANTER", "KS"),
  ("MANTI", "UT"),
  ("MANTOLOKING", "NJ"),
  ("MANTON", "CA"),
  ("MANTON", "MI"),
  ("MANTORVILLE", "MN"),
  ("MANTUA", "UT"),
  ("MANTUA", "VA"),
  ("MANTUA", "OH"),
  ("MANUEL GARCIA", "TX"),
  ("MANUEL GARCIA II", "TX"),
  ("MANVEL", "TX"),
  ("MANVEL", "ND"),
  ("MANVILLE", "NJ"),
  ("MANVILLE", "WY"),
  ("MANY", "LA"),
  ("MANY FARMS", "AZ"),
  ("MANZANITA", "OR"),
  ("MANZANO", "NM"),
  ("MANZANO SPRINGS", "NM"),
  ("MANZANOLA", "CO"),
  ("MAPLE BLUFF", "WI"),
  ("MAPLE CITY", "MI"),
  ("MAPLE FALLS", "WA"),
  ("MAPLE GLEN", "PA"),
  ("MAPLE GROVE", "MN"),
  ("MAPLE GROVE", "MI"),
  ("MAPLE HEIGHTS", "OH"),
  ("MAPLE HEIGHTS-LAKE DESIRE", "WA"),
  ("MAPLE HILL", "KS"),
  ("MAPLE LAKE", "MN"),
  ("MAPLE PARK", "IL"),
  ("MAPLE PLAIN", "MN"),
  ("MAPLE RAPIDS", "MI"),
  ("MAPLE RIDGE", "OH"),
  ("MAPLE VALLEY", "WA"),
  ("MAPLESVILLE", "AL"),
  ("MAPLETON", "UT"),
  ("MAPLETON", "ND"),
  ("MAPLETON", "ME"),
  ("MAPLETON", "IA"),
  ("MAPLETON", "MN"),
  ("MAPLETON", "IL"),
  ("MAPLETON", "KS"),
  ("MAPLETON", "PA"),
  ("MAPLETOWN", "PA"),
  ("MAPLEVIEW", "MN"),
  ("MAPLEVILLE", "MD"),
  ("MAPLEWOOD", "MN"),
  ("MAPLEWOOD", "WA"),
  ("MAPLEWOOD", "MO"),
  ("MAPLEWOOD PARK", "OH"),
  ("MAPPSBURG", "VA"),
  ("MAPPSVILLE", "VA"),
  ("MAQUOKETA", "IA"),
  ("MAQUON", "IL"),
  ("MARAMEC", "OK"),
  ("MARANA", "AZ"),
  ("MARATHON", "FL"),
  ("MARATHON", "TX"),
  ("MARATHON", "NY"),
  ("MARATHON", "IA"),
  ("MARATHON CITY", "WI"),
  ("MARBLE", "MN"),
  ("MARBLE", "NC"),
  ("MARBLE", "CO"),
  ("MARBLE CITY", "OK"),
  ("MARBLE CLIFF", "OH"),
  ("MARBLE FALLS", "TX"),
  ("MARBLE HILL", "MO"),
  ("MARBLE ROCK", "IA"),
  ("MARBLEHEAD", "MA"),
  ("MARBLEHEAD", "OH"),
  ("MARBLEMOUNT", "WA"),
  ("MARBLETON", "WY"),
  ("MARBURY", "AL"),
  ("MARCELINE", "MO"),
  ("MARCELLUS", "NY"),
  ("MARCELLUS", "MI"),
  ("MARCH ARB", "CA"),
  ("MARCO ISLAND", "FL"),
  ("MARCUS", "IA"),
  ("MARCUS", "WA"),
  ("MARCUS HOOK", "PA"),
  ("MARDELA SPRINGS", "MD"),
  ("MARENGO", "IL"),
  ("MARENGO", "IA"),
  ("MARENGO", "WI"),
  ("MARENGO", "IN"),
  ("MARENGO", "OH"),
  ("MARENISCO", "MI"),
  ("MARFA", "TX"),
  ("MARGARET", "AL"),
  ("MARGARETVILLE", "NY"),
  ("MARGATE", "FL"),
  ("MARGATE CITY", "NJ"),
  ("MARÌA ANTONIA", "PR"),
  ("MARIANNA", "FL"),
  ("MARIANNA", "AR"),
  ("MARIANNA", "PA"),
  ("MARIANNE", "PA"),
  ("MARIANO COLÛN", "PR"),
  ("MARIAVILLE LAKE", "NY"),
  ("MARIBEL", "WI"),
  ("MARICAO", "PR"),
  ("MARICOPA", "AZ"),
  ("MARICOPA", "CA"),
  ("MARICOPA COLONY", "AZ"),
  ("MARIE", "AR"),
  ("MARIEMONT", "OH"),
  ("MARIENTHAL", "KS"),
  ("MARIENVILLE", "PA"),
  ("MARIETTA", "GA"),
  ("MARIETTA", "OH"),
  ("MARIETTA", "OK"),
  ("MARIETTA", "OK"),
  ("MARIETTA", "MS"),
  ("MARIETTA", "NC"),
  ("MARIETTA", "PA"),
  ("MARIETTA", "TX"),
  ("MARIETTA", "MN"),
  ("MARIETTA", "IL"),
  ("MARIETTA-ALDERWOOD", "WA"),
  ("MARIN CITY", "CA"),
  ("MARINA", "CA"),
  ("MARINA DEL REY", "CA"),
  ("MARINE", "IL"),
  ("MARINE CITY", "MI"),
  ("MARINE ON ST. CROIX", "MN"),
  ("MARINELAND", "FL"),
  ("MARINETTE", "WI"),
  ("MARINGOUIN", "LA"),
  ("MARION", "AR"),
  ("MARION", "MT"),
  ("MARION", "IA"),
  ("MARION", "IL"),
  ("MARION", "IN"),
  ("MARION", "OH"),
  ("MARION", "AL"),
  ("MARION", "UT"),
  ("MARION", "NC"),
  ("MARION", "SC"),
  ("MARION", "VA"),
  ("MARION", "KY"),
  ("MARION", "LA"),
  ("MARION", "NY"),
  ("MARION", "KS"),
  ("MARION", "MS"),
  ("MARION", "WI"),
  ("MARION", "PA"),
  ("MARION", "MI"),
  ("MARION", "OR"),
  ("MARION", "SD"),
  ("MARION", "ND"),
  ("MARION", "TX"),
  ("MARION CENTER", "MA"),
  ("MARION CENTER", "PA"),
  ("MARION HEIGHTS", "PA"),
  ("MARIONVILLE", "MO"),
  ("MARIPOSA", "CA"),
  ("MARISSA", "IL"),
  ("MARK", "IL"),
  ("MARKED TREE", "AR"),
  ("MARKESAN", "WI"),
  ("MARKHAM", "IL"),
  ("MARKHAM", "TX"),
  ("MARKHAM", "WA"),
  ("MARKLE", "IN"),
  ("MARKLEEVILLE", "CA"),
  ("MARKLESBURG", "PA"),
  ("MARKLEVILLE", "IN"),
  ("MARKLEYSBURG", "PA"),
  ("MARKS", "MS"),
  ("MARKSBORO", "NJ"),
  ("MARKSVILLE", "LA"),
  ("MARLAND", "OK"),
  ("MARLBORO", "NY"),
  ("MARLBORO MEADOWS", "MD"),
  ("MARLBORO VILLAGE", "MD"),
  ("MARLBOROUGH", "MA"),
  ("MARLBOROUGH", "NH"),
  ("MARLBOROUGH", "MO"),
  ("MARLETTE", "MI"),
  ("MARLIN", "TX"),
  ("MARLIN", "PA"),
  ("MARLINTON", "WV"),
  ("MARLOW", "OK"),
  ("MARLOW HEIGHTS", "MD"),
  ("MARLTON", "MD"),
  ("MARLTON", "NJ"),
  ("MAR-MAC", "NC"),
  ("MARMADUKE", "AR"),
  ("MARMARTH", "ND"),
  ("MARMET", "WV"),
  ("MARNE", "OH"),
  ("MARNE", "IA"),
  ("MAROA", "IL"),
  ("MARQUAND", "MO"),
  ("MARQUETTE", "MI"),
  ("MARQUETTE", "IA"),
  ("MARQUETTE", "KS"),
  ("MARQUETTE", "WI"),
  ("MARQUETTE", "NE"),
  ("MARQUETTE HEIGHTS", "IL"),
  ("MARQUEZ", "TX"),
  ("MARRERO", "LA"),
  ("MARRIOTT-SLATERVILLE", "UT"),
  ("MARROWBONE", "KY"),
  ("MARROWSTONE", "WA"),
  ("MARS", "PA"),
  ("MARS HILL", "ME"),
  ("MARS HILL", "NC"),
  ("MARSEILLES", "IL"),
  ("MARSEILLES", "OH"),
  ("MARSHALL", "TX"),
  ("MARSHALL", "MO"),
  ("MARSHALL", "MN"),
  ("MARSHALL", "MI"),
  ("MARSHALL", "AK"),
  ("MARSHALL", "AR"),
  ("MARSHALL", "NC"),
  ("MARSHALL", "IL"),
  ("MARSHALL", "VA"),
  ("MARSHALL", "WI"),
  ("MARSHALL", "OK"),
  ("MARSHALL", "IN"),
  ("MARSHALLBERG", "NC"),
  ("MARSHALLTON", "PA"),
  ("MARSHALLTOWN", "IA"),
  ("MARSHALLVILLE", "GA"),
  ("MARSHALLVILLE", "OH"),
  ("MARSHFIELD", "WI"),
  ("MARSHFIELD", "MA"),
  ("MARSHFIELD", "MO"),
  ("MARSHFIELD", "VT"),
  ("MARSHFIELD HILLS", "MA"),
  ("MARSHVILLE", "NC"),
  ("MARSING", "ID"),
  ("MARSTON", "MO"),
  ("MART", "TX"),
  ("MARTELL", "CA"),
  ("MARTELLE", "IA"),
  ("MARTENSDALE", "IA"),
  ("MARTHA", "OK"),
  ("MARTHA LAKE", "WA"),
  ("MARTHASVILLE", "MO"),
  ("MARTIN", "TN"),
  ("MARTIN", "LA"),
  ("MARTIN", "GA"),
  ("MARTIN", "MI"),
  ("MARTIN", "KY"),
  ("MARTIN", "SD"),
  ("MARTIN", "NE"),
  ("MARTIN", "ND"),
  ("MARTIN CITY", "MT"),
  ("MARTIN LAKE", "MN"),
  ("MARTINDALE", "TX"),
  ("MARTINEZ", "GA"),
  ("MARTINEZ", "CA"),
  ("MARTINEZ", "TX"),
  ("MARTINEZ LAKE", "AZ"),
  ("MARTIN'S ADDITIONS", "MD"),
  ("MARTINS CREEK", "PA"),
  ("MARTINS FERRY", "OH"),
  ("MARTINSBURG", "WV"),
  ("MARTINSBURG", "PA"),
  ("MARTINSBURG", "IA"),
  ("MARTINSBURG", "MO"),
  ("MARTINSBURG", "OH"),
  ("MARTINSBURG", "NE"),
  ("MARTINSDALE", "MT"),
  ("MARTINSVILLE", "NJ"),
  ("MARTINSVILLE", "VA"),
  ("MARTINSVILLE", "IN"),
  ("MARTINSVILLE", "IL"),
  ("MARTINSVILLE", "OH"),
  ("MARTINTON", "IL"),
  ("MARTORELL", "PR"),
  ("MARTY", "SD"),
  ("MARUEÒO", "PR"),
  ("MARUMSCO", "VA"),
  ("MARVELL", "AR"),
  ("MARVIN", "NC"),
  ("MARVIN", "SD"),
  ("MARY ESTHER", "FL"),
  ("MARYDEL", "MD"),
  ("MARYHILL", "WA"),
  ("MARYHILL ESTATES", "KY"),
  ("MARYLAND CITY", "MD"),
  ("MARYLAND HEIGHTS", "MO"),
  ("MARYSVALE", "UT"),
  ("MARYSVILLE", "WA"),
  ("MARYSVILLE", "OH"),
  ("MARYSVILLE", "MI"),
  ("MARYSVILLE", "KS"),
  ("MARYSVILLE", "CA"),
  ("MARYSVILLE", "PA"),
  ("MARYSVILLE", "MT"),
  ("MARYSVILLE", "IA"),
  ("MARYVILLE", "TN"),
  ("MARYVILLE", "MO"),
  ("MARYVILLE", "IL"),
  ("MASARYKTOWN", "FL"),
  ("MASCOT", "TN"),
  ("MASCOTTE", "FL"),
  ("MASCOUTAH", "IL"),
  ("MASHANTUCKET", "CT"),
  ("MASHPEE NECK", "MA"),
  ("MASKELL", "NE"),
  ("MASON", "OH"),
  ("MASON", "MI"),
  ("MASON", "TX"),
  ("MASON", "TN"),
  ("MASON", "IL"),
  ("MASON", "WI"),
  ("MASON", "WV"),
  ("MASON CITY", "IA"),
  ("MASON CITY", "IL"),
  ("MASON CITY", "NE"),
  ("MASON NECK", "VA"),
  ("MASONTOWN", "PA"),
  ("MASONTOWN", "WV"),
  ("MASONVILLE", "KY"),
  ("MASONVILLE", "IA"),
  ("MASSAC", "KY"),
  ("MASSANETTA SPRINGS", "VA"),
  ("MASSANUTTEN", "VA"),
  ("MASSAPEQUA", "NY"),
  ("MASSAPEQUA PARK", "NY"),
  ("MASSENA", "NY"),
  ("MASSENA", "IA"),
  ("MASSILLON", "OH"),
  ("MASTHOPE", "PA"),
  ("MASTIC", "NY"),
  ("MASTIC BEACH", "NY"),
  ("MASURY", "OH"),
  ("MATADOR", "TX"),
  ("MATAGORDA", "TX"),
  ("MATAMORAS", "PA"),
  ("MATAMORAS", "OH"),
  ("MATAWAN", "NJ"),
  ("MATEWAN", "WV"),
  ("MATFIELD GREEN", "KS"),
  ("MATHENY", "WV"),
  ("MATHENY", "CA"),
  ("MATHER", "CA"),
  ("MATHER", "PA"),
  ("MATHERVILLE", "IL"),
  ("MATHEWS", "LA"),
  ("MATHEWS", "VA"),
  ("MATHIS", "TX"),
  ("MATHISTON", "MS"),
  ("MATINECOCK", "NY"),
  ("MATLACHA", "FL"),
  ("MATLACHA ISLES-MATLACHA SHORES", "FL"),
  ("MATLOCK", "IA"),
  ("MATOACA", "VA"),
  ("MATOAKA", "WV"),
  ("MATTAPOISETT CENTER", "MA"),
  ("MATTAWA", "WA"),
  ("MATTAWAN", "MI"),
  ("MATTAWANA", "PA"),
  ("MATTESON", "IL"),
  ("MATTHEWS", "NC"),
  ("MATTHEWS", "GA"),
  ("MATTHEWS", "MO"),
  ("MATTHEWS", "IN"),
  ("MATTITUCK", "NY"),
  ("MATTOON", "IL"),
  ("MATTOON", "WI"),
  ("MATTYDALE", "NY"),
  ("MAUCKPORT", "IN"),
  ("MAUD", "TX"),
  ("MAUD", "OK"),
  ("MAUGANSVILLE", "MD"),
  ("MAULDIN", "SC"),
  ("MAUMEE", "OH"),
  ("MAUMELLE", "AR"),
  ("MAUNABO", "PR"),
  ("MAUNALOA", "HI"),
  ("MAUNAWILI", "HI"),
  ("MAUNIE", "IL"),
  ("MAUPIN", "OR"),
  ("MAURERTOWN", "VA"),
  ("MAURICE", "LA"),
  ("MAURICE", "IA"),
  ("MAURICEVILLE", "TX"),
  ("MAURY", "NC"),
  ("MAURY CITY", "TN"),
  ("MAUSTON", "WI"),
  ("MAX", "ND"),
  ("MAX", "NE"),
  ("MAX MEADOWS", "VA"),
  ("MAXBASS", "ND"),
  ("MAXEYS", "GA"),
  ("MAXTON", "NC"),
  ("MAXVILLE", "MT"),
  ("MAXWELL", "CA"),
  ("MAXWELL", "IA"),
  ("MAXWELL", "NM"),
  ("MAXWELL", "NE"),
  ("MAY", "OK"),
  ("MAY CREEK", "WA"),
  ("MAYAG¸EZ", "PR"),
  ("MAYBEE", "MI"),
  ("MAYBELL", "CO"),
  ("MAYBEURY", "WV"),
  ("MAYBROOK", "NY"),
  ("MAYER", "AZ"),
  ("MAYER", "MN"),
  ("MAYERSVILLE", "MS"),
  ("MAYESVILLE", "SC"),
  ("MAYETTA", "KS"),
  ("MAYFAIR", "CA"),
  ("MAYFIELD", "KY"),
  ("MAYFIELD", "OH"),
  ("MAYFIELD", "PA"),
  ("MAYFIELD", "UT"),
  ("MAYFIELD", "NY"),
  ("MAYFIELD", "KS"),
  ("MAYFIELD HEIGHTS", "OH"),
  ("MAYFLOWER", "AR"),
  ("MAYFLOWER VILLAGE", "CA"),
  ("MAYHILL", "NM"),
  ("MAYKING", "KY"),
  ("MAYNARD", "MA"),
  ("MAYNARD", "AR"),
  ("MAYNARD", "IA"),
  ("MAYNARD", "MN"),
  ("MAYNARDVILLE", "TN"),
  ("MAYO", "MD"),
  ("MAYO", "SC"),
  ("MAYO", "FL"),
  ("MAYODAN", "NC"),
  ("MAYPEARL", "TX"),
  ("MAYS CHAPEL", "MD"),
  ("MAYS LANDING", "NJ"),
  ("MAYS LICK", "KY"),
  ("MAYSVILLE", "KY"),
  ("MAYSVILLE", "CO"),
  ("MAYSVILLE", "GA"),
  ("MAYSVILLE", "AR"),
  ("MAYSVILLE", "OK"),
  ("MAYSVILLE", "MO"),
  ("MAYSVILLE", "NC"),
  ("MAYSVILLE", "IA"),
  ("MAYTOWN", "PA"),
  ("MAYTOWN", "AL"),
  ("MAYTOWN", "KY"),
  ("MAYVIEW", "MO"),
  ("MAYVILLE", "WI"),
  ("MAYVILLE", "NY"),
  ("MAYVILLE", "ND"),
  ("MAYVILLE", "MI"),
  ("MAYWOOD", "IL"),
  ("MAYWOOD", "NJ"),
  ("MAYWOOD", "CA"),
  ("MAYWOOD", "NE"),
  ("MAYWOOD PARK", "OR"),
  ("MAZEPPA", "MN"),
  ("MAZIE", "OK"),
  ("MAZOMANIE", "WI"),
  ("MAZON", "IL"),
  ("MCADENVILLE", "NC"),
  ("MCADOO", "PA"),
  ("MCALESTER", "OK"),
  ("MCALISTERVILLE", "PA"),
  ("MCALLEN", "TX"),
  ("MCALMONT", "AR"),
  ("MCARTHUR", "OH"),
  ("MCARTHUR", "CA"),
  ("MCBAIN", "MI"),
  ("MCBAINE", "MO"),
  ("MCBEE", "SC"),
  ("MCBRIDE", "MI"),
  ("MCCALL", "ID"),
  ("MCCALLSBURG", "IA"),
  ("MCCAMEY", "TX"),
  ("MCCAMMON", "ID"),
  ("MCCARR", "KY"),
  ("MCCARTHY", "AK"),
  ("MCCARTYS VILLAGE", "NM"),
  ("MCCASKILL", "AR"),
  ("MCCAUSLAND", "IA"),
  ("MCCAYSVILLE", "GA"),
  ("MCCHORD AFB", "WA"),
  ("MCCLEARY", "WA"),
  ("MCCLELLAN PARK", "CA"),
  ("MCCLELLAND", "IA"),
  ("MCCLELLANVILLE", "SC"),
  ("MCCLENNEY TRACT", "CA"),
  ("MCCLOUD", "CA"),
  ("MCCLURE", "PA"),
  ("MCCLURE", "IL"),
  ("MCCLURE", "OH"),
  ("MCCLUSKY", "ND"),
  ("MCCOLL", "SC"),
  ("MCCOMB", "MS"),
  ("MCCOMB", "OH"),
  ("MCCONNELL", "WV"),
  ("MCCONNELL AFB", "KS"),
  ("MCCONNELLS", "SC"),
  ("MCCONNELLSBURG", "PA"),
  ("MCCONNELLSTOWN", "PA"),
  ("MCCONNELSVILLE", "OH"),
  ("MCCONNICO", "AZ"),
  ("MCCOOK", "NE"),
  ("MCCOOK", "IL"),
  ("MCCOOL", "MS"),
  ("MCCOOL JUNCTION", "NE"),
  ("MCCOOLE", "MD"),
  ("MCCORD", "OK"),
  ("MCCORD BEND", "MO"),
  ("MCCORDSVILLE", "IN"),
  ("MCCORMICK", "SC"),
  ("MCCOY", "CO"),
  ("MCCRACKEN", "KS"),
  ("MCCRORY", "AR"),
  ("MCCULLOM LAKE", "IL"),
  ("MCCUNE", "KS"),
  ("MCCURTAIN", "OK"),
  ("MCCUTCHENVILLE", "OH"),
  ("MCDADE", "TX"),
  ("MCDERMITT", "NV"),
  ("MCDERMOTT", "OH"),
  ("MCDONALD", "OH"),
  ("MCDONALD", "PA"),
  ("MCDONALD", "NC"),
  ("MCDONALD", "KS"),
  ("MCDONALD CHAPEL", "AL"),
  ("MCDONOUGH", "GA"),
  ("MCDOUGAL", "AR"),
  ("MCELHATTAN", "PA"),
  ("MCEWEN", "TN"),
  ("MCEWENSVILLE", "PA"),
  ("MCFALL", "MO"),
  ("MCFARLAN", "NC"),
  ("MCFARLAND", "WI"),
  ("MCFARLAND", "CA"),
  ("MCFARLAND", "KS"),
  ("MCGEE CREEK", "CA"),
  ("MCGEHEE", "AR"),
  ("MCGILL", "NV"),
  ("MCGOVERN", "PA"),
  ("MCGRATH", "AK"),
  ("MCGRATH", "MN"),
  ("MCGRAW", "NY"),
  ("MCGREGOR", "TX"),
  ("MCGREGOR", "FL"),
  ("MCGREGOR", "MN"),
  ("MCGREGOR", "IA"),
  ("MCGREW", "NE"),
  ("MCGUFFEY", "OH"),
  ("MCGUIRE AFB", "NJ"),
  ("MCHENRY", "IL"),
  ("MCHENRY", "KY"),
  ("MCHENRY", "ND"),
  ("MCINTIRE", "IA"),
  ("MCINTOSH", "NM"),
  ("MCINTOSH", "AL"),
  ("MCINTOSH", "MN"),
  ("MCINTOSH", "SD"),
  ("MCINTOSH", "FL"),
  ("MCINTYRE", "GA"),
  ("MCKEAN", "PA"),
  ("MCKEANSBURG", "PA"),
  ("MCKEE", "KY"),
  ("MCKEES ROCKS", "PA"),
  ("MCKEESPORT", "PA"),
  ("MCKENNA", "WA"),
  ("MCKENNEY", "VA"),
  ("MCKENZIE", "TN"),
  ("MCKENZIE", "AL"),
  ("MCKINLEY", "MN"),
  ("MCKINLEY HEIGHTS", "OH"),
  ("MCKINLEY PARK", "AK"),
  ("MCKINLEYVILLE", "CA"),
  ("MCKINNEY", "TX"),
  ("MCKINNEY ACRES", "TX"),
  ("MCKINNON", "WY"),
  ("MCKITTRICK", "CA"),
  ("MCKITTRICK", "MO"),
  ("MCKNIGHTSTOWN", "PA"),
  ("MCLAIN", "MS"),
  ("MCLAUGHLIN", "SD"),
  ("MCLEAN", "VA"),
  ("MCLEAN", "TX"),
  ("MCLEAN", "IL"),
  ("MCLEAN", "NE"),
  ("MCLEANSBORO", "IL"),
  ("MCLEANSVILLE", "NC"),
  ("MCLEMORESVILLE", "TN"),
  ("MCLENDON-CHISHOLM", "TX"),
  ("MCLEOD", "ND"),
  ("MCLOUD", "OK"),
  ("MCLOUTH", "KS"),
  ("MCMECHEN", "WV"),
  ("MCMILLIN", "WA"),
  ("MCMINNVILLE", "TN"),
  ("MCMINNVILLE", "OR"),
  ("MCMULLEN", "AL"),
  ("MCMULLIN", "VA"),
  ("MCMURRAY", "PA"),
  ("MCNAB", "AR"),
  ("MCNABB", "IL"),
  ("MCNAIR", "VA"),
  ("MCNARY", "AZ"),
  ("MCNARY", "LA"),
  ("MCNEAL", "AZ"),
  ("MCNEIL", "AR"),
  ("MCPHERSON", "KS"),
  ("MCQUEENEY", "TX"),
  ("MCRAE", "GA"),
  ("MCRAE", "AR"),
  ("MCROBERTS", "KY"),
  ("MCSHERRYSTOWN", "PA"),
  ("MCSWAIN", "CA"),
  ("MCVEYTOWN", "PA"),
  ("MCVILLE", "ND"),
  ("MEAD", "CO"),
  ("MEAD", "WA"),
  ("MEAD", "NE"),
  ("MEAD", "OK"),
  ("MEAD RANCH", "AZ"),
  ("MEAD VALLEY", "CA"),
  ("MEADE", "KS"),
  ("MEADOW", "TX"),
  ("MEADOW", "UT"),
  ("MEADOW ACRES", "WY"),
  ("MEADOW BRIDGE", "WV"),
  ("MEADOW GLADE", "WA"),
  ("MEADOW GROVE", "NE"),
  ("MEADOW LAKE", "NM"),
  ("MEADOW LAKES", "AK"),
  ("MEADOW OAKS", "FL"),
  ("MEADOW VALE", "KY"),
  ("MEADOW VALLEY", "CA"),
  ("MEADOW VIEW", "VA"),
  ("MEADOW VIEW ADDITION", "SD"),
  ("MEADOW VISTA", "CA"),
  ("MEADOW WOODS", "FL"),
  ("MEADOWBROOK", "VA"),
  ("MEADOWBROOK", "CA"),
  ("MEADOWBROOK", "AL"),
  ("MEADOWBROOK FARM", "KY"),
  ("MEADOWDALE", "WA"),
  ("MEADOWLAKES", "TX"),
  ("MEADOWLANDS", "PA"),
  ("MEADOWLANDS", "MN"),
  ("MEADOWOOD", "PA"),
  ("MEADOWS PLACE", "TX"),
  ("MEADOWVIEW ESTATES", "KY"),
  ("MEADVIEW", "AZ"),
  ("MEADVILLE", "PA"),
  ("MEADVILLE", "MS"),
  ("MEADVILLE", "MO"),
  ("MEANSVILLE", "GA"),
  ("MEBANE", "NC"),
  ("MECCA", "CA"),
  ("MECCA", "IN"),
  ("MECHANIC FALLS", "ME"),
  ("MECHANICSBURG", "PA"),
  ("MECHANICSBURG", "IL"),
  ("MECHANICSBURG", "OH"),
  ("MECHANICSTOWN", "NY"),
  ("MECHANICSVILLE", "VA"),
  ("MECHANICSVILLE", "MD"),
  ("MECHANICSVILLE", "IA"),
  ("MECHANICSVILLE", "PA"),
  ("MECHANICVILLE", "NY"),
  ("MECOSTA", "MI"),
  ("MEDARYVILLE", "IN"),
  ("MEDFIELD", "MA"),
  ("MEDFORD", "OR"),
  ("MEDFORD", "NY"),
  ("MEDFORD", "MA"),
  ("MEDFORD", "WI"),
  ("MEDFORD", "MN"),
  ("MEDFORD", "OK"),
  ("MEDFORD LAKES", "NJ"),
  ("MEDIA", "IL"),
  ("MEDIA", "PA"),
  ("MEDIAPOLIS", "IA"),
  ("MEDICAL LAKE", "WA"),
  ("MEDICINE BOW", "WY"),
  ("MEDICINE LAKE", "MT"),
  ("MEDICINE LAKE", "MN"),
  ("MEDICINE LODGE", "KS"),
  ("MEDICINE PARK", "OK"),
  ("MEDINA", "MN"),
  ("MEDINA", "OH"),
  ("MEDINA", "NY"),
  ("MEDINA", "TN"),
  ("MEDINA", "TX"),
  ("MEDINA", "WA"),
  ("MEDINA", "ND"),
  ("MEDLEY", "FL"),
  ("MEDON", "TN"),
  ("MEDORA", "IL"),
  ("MEDORA", "ND"),
  ("MEDORA", "IN"),
  ("MEDULLA", "FL"),
  ("MEEKER", "CO"),
  ("MEEKER", "OK"),
  ("MEETEETSE", "WY"),
  ("MEGARGEL", "AL"),
  ("MEGARGEL", "TX"),
  ("MEGGETT", "SC"),
  ("MEHAMA", "OR"),
  ("MEHLVILLE", "MO"),
  ("MEIGS", "GA"),
  ("MEINERS OAKS", "CA"),
  ("MEIRE GROVE", "MN"),
  ("MEKORYUK", "AK"),
  ("MELBA", "ID"),
  ("MELBETA", "NE"),
  ("MELBOURNE", "FL"),
  ("MELBOURNE", "AR"),
  ("MELBOURNE", "KY"),
  ("MELBOURNE", "IA"),
  ("MELBOURNE BEACH", "FL"),
  ("MELBOURNE VILLAGE", "FL"),
  ("MELCHER-DALLAS", "IA"),
  ("MELFA", "VA"),
  ("MELISSA", "TX"),
  ("MELLEN", "WI"),
  ("MELLETTE", "SD"),
  ("MELLOTT", "IN"),
  ("MELMORE", "OH"),
  ("MELODY HILL", "IN"),
  ("MELROSE", "MA"),
  ("MELROSE", "OR"),
  ("MELROSE", "MN"),
  ("MELROSE", "NM"),
  ("MELROSE", "IA"),
  ("MELROSE", "OH"),
  ("MELROSE", "WI"),
  ("MELROSE PARK", "IL"),
  ("MELROSE PARK", "NY"),
  ("MELSTONE", "MT"),
  ("MELVERN", "KS"),
  ("MELVILLE", "NY"),
  ("MELVILLE", "RI"),
  ("MELVILLE", "LA"),
  ("MELVIN", "MI"),
  ("MELVIN", "TX"),
  ("MELVIN", "IL"),
  ("MELVIN", "IA"),
  ("MELVIN VILLAGE", "NH"),
  ("MELVINA", "WI"),
  ("MELVINDALE", "MI"),
  ("MELWOOD", "MD"),
  ("MEMPHIS", "TN"),
  ("MEMPHIS", "FL"),
  ("MEMPHIS", "IN"),
  ("MEMPHIS", "TX"),
  ("MEMPHIS", "MO"),
  ("MEMPHIS", "MI"),
  ("MEMPHIS", "AL"),
  ("MEMPHIS", "NE"),
  ("MENA", "AR"),
  ("MENAHGA", "MN"),
  ("MENAN", "ID"),
  ("MENANDS", "NY"),
  ("MENARD", "TX"),
  ("MENASHA", "WI"),
  ("MENDELTNA", "AK"),
  ("MENDENHALL", "MS"),
  ("MENDES", "GA"),
  ("MENDHAM", "NJ"),
  ("MENDOCINO", "CA"),
  ("MENDON", "UT"),
  ("MENDON", "MI"),
  ("MENDON", "IL"),
  ("MENDON", "OH"),
  ("MENDON", "MO"),
  ("MENDOTA", "IL"),
  ("MENDOTA", "CA"),
  ("MENDOTA", "MN"),
  ("MENDOTA HEIGHTS", "MN"),
  ("MENIFEE", "CA"),
  ("MENIFEE", "AR"),
  ("MENLO", "GA"),
  ("MENLO", "IA"),
  ("MENLO", "KS"),
  ("MENLO PARK", "CA"),
  ("MENNO", "SD"),
  ("MENO", "OK"),
  ("MENOKEN", "ND"),
  ("MENOMINEE", "MI"),
  ("MENOMINEE", "IL"),
  ("MENOMONEE FALLS", "WI"),
  ("MENOMONIE", "WI"),
  ("MENTASTA LAKE", "AK"),
  ("MENTONE", "CA"),
  ("MENTONE", "AL"),
  ("MENTONE", "IN"),
  ("MENTONE", "TX"),
  ("MENTOR", "OH"),
  ("MENTOR", "MN"),
  ("MENTOR", "KY"),
  ("MENTOR-ON-THE-LAKE", "OH"),
  ("MEQUON", "WI"),
  ("MER ROUGE", "LA"),
  ("MERAUX", "LA"),
  ("MERCED", "CA"),
  ("MERCEDES", "TX"),
  ("MERCER", "WI"),
  ("MERCER", "PA"),
  ("MERCER", "MO"),
  ("MERCER", "ND"),
  ("MERCER ISLAND", "WA"),
  ("MERCERSBURG", "PA"),
  ("MERCERSVILLE", "MD"),
  ("MERCERVILLE", "NJ"),
  ("MERCHANTVILLE", "NJ"),
  ("MEREDITH", "NH"),
  ("MEREDOSIA", "IL"),
  ("MERIDEN", "CT"),
  ("MERIDEN", "KS"),
  ("MERIDEN", "IA"),
  ("MERIDIAN", "MS"),
  ("MERIDIAN", "ID"),
  ("MERIDIAN", "OK"),
  ("MERIDIAN", "CA"),
  ("MERIDIAN", "PA"),
  ("MERIDIAN", "TX"),
  ("MERIDIAN", "CO"),
  ("MERIDIAN", "NY"),
  ("MERIDIAN", "OK"),
  ("MERIDIAN HILLS", "IN"),
  ("MERIDIAN STATION", "MS"),
  ("MERIDIANVILLE", "AL"),
  ("MERIGOLD", "MS"),
  ("MERINO", "CO"),
  ("MERKEL", "TX"),
  ("MERLIN", "OR"),
  ("MERMENTAU", "LA"),
  ("MERNA", "NE"),
  ("MEROM", "IN"),
  ("MERRIAM", "KS"),
  ("MERRIAM WOODS", "MO"),
  ("MERRICK", "NY"),
  ("MERRIFIELD", "VA"),
  ("MERRIFIELD", "MN"),
  ("MERRILL", "WI"),
  ("MERRILL", "MI"),
  ("MERRILL", "IA"),
  ("MERRILL", "OR"),
  ("MERRILLAN", "WI"),
  ("MERRILLVILLE", "IN"),
  ("MERRIMAC", "VA"),
  ("MERRIMAC", "WI"),
  ("MERRIMAN", "NE"),
  ("MERRIONETTE PARK", "IL"),
  ("MERRITT ISLAND", "FL"),
  ("MERRITT PARK", "NY"),
  ("MERRYDALE", "LA"),
  ("MERRYVILLE", "LA"),
  ("MERTARVIK", "AK"),
  ("MERTENS", "TX"),
  ("MERTON", "WI"),
  ("MERTZON", "TX"),
  ("MERTZTOWN", "PA"),
  ("MERWIN", "MO"),
  ("MESA", "AZ"),
  ("MESA", "CA"),
  ("MESA", "WA"),
  ("MESA DEL CABALLO", "AZ"),
  ("MESA VERDE", "CA"),
  ("MESA VISTA", "CA"),
  ("MESCAL", "AZ"),
  ("MESCALERO", "NM"),
  ("MESERVEY", "IA"),
  ("MESHOPPEN", "PA"),
  ("MESIC", "NC"),
  ("MESICK", "MI"),
  ("MESILLA", "NM"),
  ("MESITA", "NM"),
  ("MESQUITE", "TX"),
  ("MESQUITE", "NV"),
  ("MESQUITE", "NM"),
  ("MESQUITE", "TX"),
  ("MESQUITE CREEK", "AZ"),
  ("MESSIAH COLLEGE", "PA"),
  ("META", "MO"),
  ("METAIRIE", "LA"),
  ("METALINE", "WA"),
  ("METALINE FALLS", "WA"),
  ("METAMORA", "IL"),
  ("METAMORA", "MI"),
  ("METAMORA", "OH"),
  ("METAMORA", "IN"),
  ("METCALF", "IL"),
  ("METCALFE", "MS"),
  ("METHOW", "WA"),
  ("METHUEN TOWN", "MA"),
  ("METLAKATLA", "AK"),
  ("METOLIUS", "OR"),
  ("METOMPKIN", "VA"),
  ("METROPOLIS", "IL"),
  ("METTAWA", "IL"),
  ("METTER", "GA"),
  ("METTLER", "CA"),
  ("METUCHEN", "NJ"),
  ("METZ", "MO"),
  ("METZGER", "OR"),
  ("MEXIA", "TX"),
  ("MEXICAN COLONY", "CA"),
  ("MEXICAN HAT", "UT"),
  ("MEXICO", "MO"),
  ("MEXICO", "IN"),
  ("MEXICO", "NY"),
  ("MEXICO", "PA"),
  ("MEXICO", "ME"),
  ("MEXICO BEACH", "FL"),
  ("MEYER", "IA"),
  ("MEYERS LAKE", "OH"),
  ("MEYERSDALE", "PA"),
  ("MI RANCHITO ESTATE", "TX"),
  ("MIAMI", "FL"),
  ("MIAMI", "OK"),
  ("MIAMI", "TX"),
  ("MIAMI", "AZ"),
  ("MIAMI", "MO"),
  ("MIAMI BEACH", "FL"),
  ("MIAMI GARDENS", "FL"),
  ("MIAMI HEIGHTS", "OH"),
  ("MIAMI LAKES", "FL"),
  ("MIAMI SHORES", "FL"),
  ("MIAMI SPRINGS", "FL"),
  ("MIAMISBURG", "OH"),
  ("MIAMITOWN", "OH"),
  ("MIAMIVILLE", "OH"),
  ("MICANOPY", "FL"),
  ("MICCO", "FL"),
  ("MICHIANA", "MI"),
  ("MICHIANA SHORES", "IN"),
  ("MICHIE", "TN"),
  ("MICHIGAMME", "MI"),
  ("MICHIGAN CENTER", "MI"),
  ("MICHIGAN CITY", "IN"),
  ("MICHIGAN CITY", "ND"),
  ("MICHIGANTOWN", "IN"),
  ("MICRO", "NC"),
  ("MIDDLE AMANA", "IA"),
  ("MIDDLE FRISCO", "NM"),
  ("MIDDLE ISLAND", "NY"),
  ("MIDDLE POINT", "OH"),
  ("MIDDLE RIVER", "MD"),
  ("MIDDLE RIVER", "MN"),
  ("MIDDLE VALLEY", "TN"),
  ("MIDDLE VILLAGE", "WI"),
  ("MIDDLEBOROUGH CENTER", "MA"),
  ("MIDDLEBOURNE", "WV"),
  ("MIDDLEBROOK", "VA"),
  ("MIDDLEBURG", "FL"),
  ("MIDDLEBURG", "VA"),
  ("MIDDLEBURG", "PA"),
  ("MIDDLEBURG", "NC"),
  ("MIDDLEBURG", "MD"),
  ("MIDDLEBURG HEIGHTS", "OH"),
  ("MIDDLEBURGH", "NY"),
  ("MIDDLEBURY", "VT"),
  ("MIDDLEBURY", "IN"),
  ("MIDDLEBUSH", "NJ"),
  ("MIDDLEFIELD", "OH"),
  ("MIDDLEPORT", "OH"),
  ("MIDDLEPORT", "NY"),
  ("MIDDLEPORT", "PA"),
  ("MIDDLESBOROUGH", "KY"),
  ("MIDDLESEX", "NJ"),
  ("MIDDLESEX", "NC"),
  ("MIDDLETON", "WI"),
  ("MIDDLETON", "ID"),
  ("MIDDLETON", "TN"),
  ("MIDDLETOWN", "CT"),
  ("MIDDLETOWN", "OH"),
  ("MIDDLETOWN", "DE"),
  ("MIDDLETOWN", "NY"),
  ("MIDDLETOWN", "KY"),
  ("MIDDLETOWN", "PA"),
  ("MIDDLETOWN", "PA"),
  ("MIDDLETOWN", "CA"),
  ("MIDDLETOWN", "MD"),
  ("MIDDLETOWN", "IN"),
  ("MIDDLETOWN", "VA"),
  ("MIDDLETOWN", "IA"),
  ("MIDDLETOWN", "MI"),
  ("MIDDLETOWN", "MO"),
  ("MIDDLETOWN", "IL"),
  ("MIDDLEVILLE", "MI"),
  ("MIDDLEVILLE", "NY"),
  ("MIDDLEWAY", "WV"),
  ("MIDFIELD", "AL"),
  ("MIDLAND", "TX"),
  ("MIDLAND", "MI"),
  ("MIDLAND", "NC"),
  ("MIDLAND", "VA"),
  ("MIDLAND", "WA"),
  ("MIDLAND", "PA"),
  ("MIDLAND", "CO"),
  ("MIDLAND", "OH"),
  ("MIDLAND", "AR"),
  ("MIDLAND", "SD"),
  ("MIDLAND", "MD"),
  ("MIDLAND CITY", "AL"),
  ("MIDLAND PARK", "NJ"),
  ("MIDLOTHIAN", "TX"),
  ("MIDLOTHIAN", "IL"),
  ("MIDLOTHIAN", "MD"),
  ("MIDPINES", "CA"),
  ("MIDTOWN", "TN"),
  ("MIDVALE", "UT"),
  ("MIDVALE", "ID"),
  ("MIDVALE", "OH"),
  ("MIDVALE", "MT"),
  ("MIDVILLE", "GA"),
  ("MIDWAY", "FL"),
  ("MIDWAY", "FL"),
  ("MIDWAY", "NC"),
  ("MIDWAY", "GA"),
  ("MIDWAY", "AR"),
  ("MIDWAY", "UT"),
  ("MIDWAY", "AR"),
  ("MIDWAY", "AL"),
  ("MIDWAY", "LA"),
  ("MIDWAY", "NM"),
  ("MIDWAY", "MN"),
  ("MIDWAY", "TX"),
  ("MIDWAY", "FL"),
  ("MIDWAY", "KY"),
  ("MIDWAY", "PA"),
  ("MIDWAY", "PA"),
  ("MIDWAY", "OH"),
  ("MIDWAY CITY", "CA"),
  ("MIDWAY NORTH", "TX"),
  ("MIDWAY SOUTH", "TX"),
  ("MIDWEST", "WY"),
  ("MIDWEST CITY", "OK"),
  ("MIER", "IN"),
  ("MIESVILLE", "MN"),
  ("MIFFLIN", "OH"),
  ("MIFFLIN", "PA"),
  ("MIFFLINBURG", "PA"),
  ("MIFFLINTOWN", "PA"),
  ("MIFFLINVILLE", "PA"),
  ("MIGNON", "AL"),
  ("MIGUEL BARRERA", "TX"),
  ("MIKES", "TX"),
  ("MILA DOCE", "TX"),
  ("MILACA", "MN"),
  ("MILAM", "TX"),
  ("MILAN", "TN"),
  ("MILAN", "IL"),
  ("MILAN", "NM"),
  ("MILAN", "MI"),
  ("MILAN", "GA"),
  ("MILAN", "IN"),
  ("MILAN", "MO"),
  ("MILAN", "MN"),
  ("MILAN", "OH"),
  ("MILAN", "KS"),
  ("MILANO", "TX"),
  ("MILBANK", "SD"),
  ("MILBURN", "OK"),
  ("MILDRED", "TX"),
  ("MILDRED", "KS"),
  ("MILES", "TX"),
  ("MILES", "IA"),
  ("MILES CITY", "MT"),
  ("MILESBURG", "PA"),
  ("MILFORD", "MA"),
  ("MILFORD", "DE"),
  ("MILFORD", "NH"),
  ("MILFORD", "CA"),
  ("MILFORD", "OH"),
  ("MILFORD", "ME"),
  ("MILFORD", "UT"),
  ("MILFORD", "TX"),
  ("MILFORD", "MI"),
  ("MILFORD", "IA"),
  ("MILFORD", "NJ"),
  ("MILFORD", "IN"),
  ("MILFORD", "NE"),
  ("MILFORD", "IL"),
  ("MILFORD", "KS"),
  ("MILFORD", "PA"),
  ("MILFORD", "NY"),
  ("MILFORD", "MO"),
  ("MILFORD", "CT"),
  ("MILFORD CENTER", "OH"),
  ("MILFORD MILL", "MD"),
  ("MILFORD SQUARE", "PA"),
  ("MILILANI MAUKA", "HI"),
  ("MILILANI TOWN", "HI"),
  ("MILL CITY", "OR"),
  ("MILL CREEK", "WA"),
  ("MILL CREEK", "WV"),
  ("MILL CREEK", "IL"),
  ("MILL CREEK", "OK"),
  ("MILL CREEK", "PA"),
  ("MILL CREEK EAST", "WA"),
  ("MILL HALL", "PA"),
  ("MILL NECK", "NY"),
  ("MILL SHOALS", "IL"),
  ("MILL SPRING", "MO"),
  ("MILL VALLEY", "CA"),
  ("MILL VILLAGE", "PA"),
  ("MILLADORE", "WI"),
  ("MILLARD", "MO"),
  ("MILLBOURNE", "PA"),
  ("MILLBRAE", "CA"),
  ("MILLBROOK", "AL"),
  ("MILLBROOK", "IL"),
  ("MILLBROOK", "NY"),
  ("MILLBURY", "OH"),
  ("MILLCREEK", "UT"),
  ("MILLEDGEVILLE", "GA"),
  ("MILLEDGEVILLE", "TN"),
  ("MILLEDGEVILLE", "IL"),
  ("MILLEDGEVILLE", "OH"),
  ("MILLEN", "GA"),
  ("MILLER", "IA"),
  ("MILLER", "SD"),
  ("MILLER", "MO"),
  ("MILLER", "NE"),
  ("MILLER CITY", "OH"),
  ("MILLER PLACE", "NY"),
  ("MILLER'S COVE", "TX"),
  ("MILLERS CREEK", "NC"),
  ("MILLERS FALLS", "MA"),
  ("MILLERSBURG", "OR"),
  ("MILLERSBURG", "OH"),
  ("MILLERSBURG", "MI"),
  ("MILLERSBURG", "PA"),
  ("MILLERSBURG", "IN"),
  ("MILLERSBURG", "KY"),
  ("MILLERSBURG", "IA"),
  ("MILLERSPORT", "OH"),
  ("MILLERSTOWN", "PA"),
  ("MILLERSVILLE", "TN"),
  ("MILLERSVILLE", "PA"),
  ("MILLERTON", "OK"),
  ("MILLERTON", "PA"),
  ("MILLERTON", "NY"),
  ("MILLERTON", "IA"),
  ("MILLERVILLE", "AL"),
  ("MILLERVILLE", "MN"),
  ("MILLFIELD", "OH"),
  ("MILLHEIM", "PA"),
  ("MILLHOUSEN", "IN"),
  ("MILLICAN", "TX"),
  ("MILLIGAN", "NE"),
  ("MILLIKEN", "CO"),
  ("MILLINGPORT", "NC"),
  ("MILLINGTON", "TN"),
  ("MILLINGTON", "MI"),
  ("MILLINGTON", "IL"),
  ("MILLINGTON", "MD"),
  ("MILLINOCKET", "ME"),
  ("MILLIS-CLICQUOT", "MA"),
  ("MILLPORT", "AL"),
  ("MILLPORT", "NY"),
  ("MILLRY", "AL"),
  ("MILLS", "WY"),
  ("MILLS RIVER", "NC"),
  ("MILLSAP", "TX"),
  ("MILLSBORO", "DE"),
  ("MILLSBORO", "PA"),
  ("MILLSTADT", "IL"),
  ("MILLSTON", "WI"),
  ("MILLSTONE", "NJ"),
  ("MILLSTONE", "KY"),
  ("MILLTOWN", "WI"),
  ("MILLTOWN", "NJ"),
  ("MILLTOWN", "IN"),
  ("MILLTOWN", "SD"),
  ("MILLVALE", "PA"),
  ("MILLVILLE", "NJ"),
  ("MILLVILLE", "CA"),
  ("MILLVILLE", "DE"),
  ("MILLVILLE", "UT"),
  ("MILLVILLE", "PA"),
  ("MILLVILLE", "OH"),
  ("MILLVILLE", "MN"),
  ("MILLVILLE", "IA"),
  ("MILLWOOD", "WA"),
  ("MILLWOOD", "PA"),
  ("MILNER", "GA"),
  ("MILNOR", "ND"),
  ("MILO", "ME"),
  ("MILO", "IA"),
  ("MILO", "MO"),
  ("MILPITAS", "CA"),
  ("MILROY", "PA"),
  ("MILROY", "IN"),
  ("MILROY", "MN"),
  ("MILTON", "GA"),
  ("MILTON", "MA"),
  ("MILTON", "FL"),
  ("MILTON", "LA"),
  ("MILTON", "KS"),
  ("MILTON", "WI"),
  ("MILTON", "PA"),
  ("MILTON", "NY"),
  ("MILTON", "IA"),
  ("MILTON", "WA"),
  ("MILTON", "DE"),
  ("MILTON", "WV"),
  ("MILTON", "NY"),
  ("MILTON", "VT"),
  ("MILTON", "KY"),
  ("MILTON", "NH"),
  ("MILTON", "ND"),
  ("MILTON", "NC"),
  ("MILTON", "IL"),
  ("MILTON", "IN"),
  ("MILTON CENTER", "OH"),
  ("MILTON MILLS", "NH"),
  ("MILTONA", "MN"),
  ("MILTON-FREEWATER", "OR"),
  ("MILTONSBURG", "OH"),
  ("MILTONVALE", "KS"),
  ("MILWAUKEE", "WI"),
  ("MILWAUKIE", "OR"),
  ("MIMBRES", "NM"),
  ("MIMS", "FL"),
  ("MINA", "NV"),
  ("MINATARE", "NE"),
  ("MINBURN", "IA"),
  ("MINCO", "OK"),
  ("MINDEN", "LA"),
  ("MINDEN", "NV"),
  ("MINDEN", "NE"),
  ("MINDEN", "WV"),
  ("MINDEN", "IA"),
  ("MINDEN CITY", "MI"),
  ("MINDENMINES", "MO"),
  ("MINE LA MOTTE", "MO"),
  ("MINEOLA", "TX"),
  ("MINEOLA", "NY"),
  ("MINEOLA", "IA"),
  ("MINER", "MO"),
  ("MINERAL", "CA"),
  ("MINERAL", "VA"),
  ("MINERAL", "WA"),
  ("MINERAL", "IL"),
  ("MINERAL BLUFF", "GA"),
  ("MINERAL CITY", "OH"),
  ("MINERAL POINT", "WI"),
  ("MINERAL POINT", "MO"),
  ("MINERAL RIDGE", "OH"),
  ("MINERAL SPRINGS", "NC"),
  ("MINERAL SPRINGS", "AR"),
  ("MINERAL WELLS", "TX"),
  ("MINERALWELLS", "WV"),
  ("MINERSVILLE", "PA"),
  ("MINERSVILLE", "UT"),
  ("MINERVA", "OH"),
  ("MINERVA PARK", "OH"),
  ("MINETTO", "NY"),
  ("MINEVILLE", "NY"),
  ("MINFORD", "OH"),
  ("MINGO", "IA"),
  ("MINGO JUNCTION", "OH"),
  ("MINGOVILLE", "PA"),
  ("MINGUS", "TX"),
  ("MINIDOKA", "ID"),
  ("MINIER", "IL"),
  ("MINKLER", "CA"),
  ("MINNEAPOLIS", "MN"),
  ("MINNEAPOLIS", "KS"),
  ("MINNEHAHA", "WA"),
  ("MINNEISKA", "MN"),
  ("MINNEOLA", "FL"),
  ("MINNEOLA", "KS"),
  ("MINNEOTA", "MN"),
  ("MINNESOTA CITY", "MN"),
  ("MINNESOTA LAKE", "MN"),
  ("MINNESOTT BEACH", "NC"),
  ("MINNETONKA", "MN"),
  ("MINNETONKA BEACH", "MN"),
  ("MINNETRISTA", "MN"),
  ("MINNEWAUKAN", "ND"),
  ("MINOA", "NY"),
  ("MINOCQUA", "WI"),
  ("MINONG", "WI"),
  ("MINONK", "IL"),
  ("MINOOKA", "IL"),
  ("MINOR", "AL"),
  ("MINOR HILL", "TN"),
  ("MINORCA", "LA"),
  ("MINOT", "ND"),
  ("MINOT AFB", "ND"),
  ("MINSTER", "OH"),
  ("MINT HILL", "NC"),
  ("MINTO", "AK"),
  ("MINTO", "ND"),
  ("MINTURN", "CO"),
  ("MINTURN", "AR"),
  ("MIO", "MI"),
  ("MIRA LOMA", "CA"),
  ("MIRA MONTE", "CA"),
  ("MIRACLE VALLEY", "AZ"),
  ("MIRAMAR", "FL"),
  ("MIRAMAR BEACH", "FL"),
  ("MIRAMIGUOA PARK", "MO"),
  ("MIRANDA", "CA"),
  ("MIRANDA", "PR"),
  ("MIRANDO CITY", "TX"),
  ("MIRRORMONT", "WA"),
  ("MISENHEIMER", "NC"),
  ("MISHAWAKA", "IN"),
  ("MISHICOT", "WI"),
  ("MISQUAMICUT", "RI"),
  ("MISSION", "TX"),
  ("MISSION", "OR"),
  ("MISSION", "KS"),
  ("MISSION", "SD"),
  ("MISSION BEND", "TX"),
  ("MISSION CANYON", "CA"),
  ("MISSION HILL", "SD"),
  ("MISSION HILLS", "KS"),
  ("MISSION HILLS", "CA"),
  ("MISSION VIEJO", "CA"),
  ("MISSION WOODS", "KS"),
  ("MISSISSIPPI STATE", "MS"),
  ("MISSISSIPPI VALLEY STATE UNIVERSITY", "MS"),
  ("MISSOULA", "MT"),
  ("MISSOURI CITY", "TX"),
  ("MISSOURI CITY", "MO"),
  ("MISSOURI VALLEY", "IA"),
  ("MITCHELL", "SD"),
  ("MITCHELL", "IN"),
  ("MITCHELL", "GA"),
  ("MITCHELL", "OR"),
  ("MITCHELL", "NE"),
  ("MITCHELL", "IL"),
  ("MITCHELL", "IA"),
  ("MITCHELL HEIGHTS", "WV"),
  ("MITCHELLVILLE", "MD"),
  ("MITCHELLVILLE", "IA"),
  ("MITCHELLVILLE", "TN"),
  ("MITCHELLVILLE", "AR"),
  ("MI-WUK VILLAGE", "CA"),
  ("MIZE", "MS"),
  ("MIZPAH", "MN"),
  ("MOAB", "UT"),
  ("MOAPA TOWN", "NV"),
  ("MOAPA VALLEY", "NV"),
  ("MOBEETIE", "TX"),
  ("MOBERLY", "MO"),
  ("MOBILE", "AL"),
  ("MOBILE CITY", "TX"),
  ("MOBRIDGE", "SD"),
  ("MOCA", "PR"),
  ("MOCANAQUA", "PA"),
  ("MOCCASIN", "AZ"),
  ("MOCKINGBIRD VALLEY", "KY"),
  ("MOCKSVILLE", "NC"),
  ("MOCLIPS", "WA"),
  ("MODALE", "IA"),
  ("MODENA", "PA"),
  ("MODEST TOWN", "VA"),
  ("MODESTO", "CA"),
  ("MODESTO", "IL"),
  ("MODOC", "SC"),
  ("MODOC", "IN"),
  ("MOENKOPI", "AZ"),
  ("MOFFAT", "CO"),
  ("MOFFETT", "OK"),
  ("MOGADORE", "OH"),
  ("MOGUL", "NV"),
  ("MOHALL", "ND"),
  ("MOHAVE VALLEY", "AZ"),
  ("MOHAWK", "NY"),
  ("MOHAWK VISTA", "CA"),
  ("MOHNTON", "PA"),
  ("MOHRSVILLE", "PA"),
  ("MOJAVE", "CA"),
  ("MOJAVE RANCH ESTATES", "AZ"),
  ("MOKANE", "MO"),
  ("MOKELUMNE HILL", "CA"),
  ("MOKENA", "IL"),
  ("MOKULEIA", "HI"),
  ("MOLALLA", "OR"),
  ("MOLE LAKE", "WI"),
  ("MOLENA", "GA"),
  ("MOLINE", "IL"),
  ("MOLINE", "KS"),
  ("MOLINE ACRES", "MO"),
  ("MOLINO", "FL"),
  ("MOMENCE", "IL"),
  ("MOMEYER", "NC"),
  ("MONA", "UT"),
  ("MONA", "IA"),
  ("MONACA", "PA"),
  ("MONAHANS", "TX"),
  ("MONANGO", "ND"),
  ("MONARCH MILL", "SC"),
  ("MONAVILLE", "WV"),
  ("MONCKS CORNER", "SC"),
  ("MONCURE", "NC"),
  ("MONDAMIN", "IA"),
  ("MONDOVI", "WI"),
  ("MONEE", "IL"),
  ("MONESSEN", "PA"),
  ("MONETT", "MO"),
  ("MONETTA", "SC"),
  ("MONETTE", "AR"),
  ("MONFORT HEIGHTS", "OH"),
  ("MONMOUTH", "IL"),
  ("MONMOUTH", "OR"),
  ("MONMOUTH", "IA"),
  ("MONMOUTH", "CA"),
  ("MONMOUTH BEACH", "NJ"),
  ("MONMOUTH JUNCTION", "NJ"),
  ("MONO CITY", "CA"),
  ("MONO VISTA", "CA"),
  ("MONOMOSCOY ISLAND", "MA"),
  ("MONON", "IN"),
  ("MONONA", "WI"),
  ("MONONA", "IA"),
  ("MONONGAH", "WV"),
  ("MONONGAHELA", "PA"),
  ("MONOWI", "NE"),
  ("MONROE", "NC"),
  ("MONROE", "LA"),
  ("MONROE", "OH"),
  ("MONROE", "GA"),
  ("MONROE", "MI"),
  ("MONROE", "WA"),
  ("MONROE", "WI"),
  ("MONROE", "UT"),
  ("MONROE", "NY"),
  ("MONROE", "IA"),
  ("MONROE", "IN"),
  ("MONROE", "OR"),
  ("MONROE", "PA"),
  ("MONROE", "SD"),
  ("MONROE", "NE"),
  ("MONROE CENTER", "IL"),
  ("MONROE CITY", "MO"),
  ("MONROE CITY", "IN"),
  ("MONROE NORTH", "WA"),
  ("MONROEVILLE", "PA"),
  ("MONROEVILLE", "AL"),
  ("MONROEVILLE", "OH"),
  ("MONROEVILLE", "IN"),
  ("MONROVIA", "CA"),
  ("MONROVIA", "MD"),
  ("MONROVIA", "IN"),
  ("MONSERRATE", "PR"),
  ("MONSEY", "NY"),
  ("MONSON", "CA"),
  ("MONSON CENTER", "MA"),
  ("MONT ALTO", "PA"),
  ("MONT BELVIEU", "TX"),
  ("MONTAGUE", "MI"),
  ("MONTAGUE", "CA"),
  ("MONTAGUE", "TX"),
  ("MONTALVIN MANOR", "CA"),
  ("MONTANA CITY", "MT"),
  ("MONTANDON", "PA"),
  ("MONTARA", "CA"),
  ("MONTAUK", "NY"),
  ("MONTCALM", "WV"),
  ("MONTCLAIR", "VA"),
  ("MONTCLAIR", "CA"),
  ("MONTE ALTO", "TX"),
  ("MONTE GRANDE", "PR"),
  ("MONTE RIO", "CA"),
  ("MONTE SERENO", "CA"),
  ("MONTE VERDE", "PR"),
  ("MONTE VISTA", "CO"),
  ("MONTEAGLE", "TN"),
  ("MONTEBELLO", "CA"),
  ("MONTEBELLO", "NY"),
  ("MONTECITO", "CA"),
  ("MONTEGUT", "LA"),
  ("MONTELLO", "WI"),
  ("MONTELLO", "NV"),
  ("MONTEREY", "CA"),
  ("MONTEREY", "TN"),
  ("MONTEREY", "LA"),
  ("MONTEREY", "VA"),
  ("MONTEREY", "KY"),
  ("MONTEREY", "IN"),
  ("MONTEREY PARK", "CA"),
  ("MONTEREY PARK", "NM"),
  ("MONTEREY PARK TRACT", "CA"),
  ("MONTESANO", "WA"),
  ("MONTEVALLO", "AL"),
  ("MONTEVIDEO", "MN"),
  ("MONTEZUMA", "GA"),
  ("MONTEZUMA", "IA"),
  ("MONTEZUMA", "KS"),
  ("MONTEZUMA", "IN"),
  ("MONTEZUMA", "OH"),
  ("MONTEZUMA", "CO"),
  ("MONTEZUMA CREEK", "UT"),
  ("MONTFORT", "WI"),
  ("MONTGOMERY", "AL"),
  ("MONTGOMERY", "IL"),
  ("MONTGOMERY", "OH"),
  ("MONTGOMERY", "GA"),
  ("MONTGOMERY", "TX"),
  ("MONTGOMERY", "MN"),
  ("MONTGOMERY", "LA"),
  ("MONTGOMERY", "WV"),
  ("MONTGOMERY", "NY"),
  ("MONTGOMERY", "MI"),
  ("MONTGOMERY", "PA"),
  ("MONTGOMERY", "IN"),
  ("MONTGOMERY CITY", "MO"),
  ("MONTGOMERY CREEK", "CA"),
  ("MONTGOMERY VILLAGE", "MD"),
  ("MONTGOMERYVILLE", "PA"),
  ("MONTICELLO", "AR"),
  ("MONTICELLO", "MN"),
  ("MONTICELLO", "IA"),
  ("MONTICELLO", "KY"),
  ("MONTICELLO", "UT"),
  ("MONTICELLO", "MS"),
  ("MONTICELLO", "NY"),
  ("MONTICELLO", "FL"),
  ("MONTICELLO", "IL"),
  ("MONTICELLO", "IN"),
  ("MONTICELLO", "GA"),
  ("MONTICELLO", "LA"),
  ("MONTICELLO", "WI"),
  ("MONTICELLO", "MO"),
  ("MONTIER", "MO"),
  ("MONTMORENCI", "IN"),
  ("MONTOUR", "IA"),
  ("MONTOUR FALLS", "NY"),
  ("MONTOURSVILLE", "PA"),
  ("MONTPELIER", "VT"),
  ("MONTPELIER", "OH"),
  ("MONTPELIER", "ID"),
  ("MONTPELIER", "LA"),
  ("MONTPELIER", "IN"),
  ("MONTPELIER", "ND"),
  ("MONTREAL", "WI"),
  ("MONTREAT", "NC"),
  ("MONTROSE", "CO"),
  ("MONTROSE", "MN"),
  ("MONTROSE", "VA"),
  ("MONTROSE", "MS"),
  ("MONTROSE", "GA"),
  ("MONTROSE", "NY"),
  ("MONTROSE", "PA"),
  ("MONTROSE", "IA"),
  ("MONTROSE", "MI"),
  ("MONTROSE", "IL"),
  ("MONTROSE", "WV"),
  ("MONTROSE", "MO"),
  ("MONTROSE", "AR"),
  ("MONTROSE", "SD"),
  ("MONTROSE MANOR", "PA"),
  ("MONTROSE-GHENT", "OH"),
  ("MONTROSS", "VA"),
  ("MONTURA", "FL"),
  ("MONTVALE", "NJ"),
  ("MONTVALE", "VA"),
  ("MONTVERDE", "FL"),
  ("MONTZ", "LA"),
  ("MONUMENT", "NM"),
  ("MONUMENT", "CO"),
  ("MONUMENT", "OR"),
  ("MONUMENT", "PA"),
  ("MONUMENT BEACH", "MA"),
  ("MONUMENT HILLS", "CA"),
  ("MOODUS", "CT"),
  ("MOODY", "AL"),
  ("MOODY", "TX"),
  ("MOODY AFB", "GA"),
  ("MOOERS", "NY"),
  ("MOON LAKE", "FL"),
  ("MOONACHIE", "NJ"),
  ("MOONSHINE", "LA"),
  ("MOORCROFT", "WY"),
  ("MOORE", "OK"),
  ("MOORE", "TX"),
  ("MOORE", "ID"),
  ("MOORE", "MT"),
  ("MOORE HAVEN", "FL"),
  ("MOORE STATION", "TX"),
  ("MOOREFIELD", "WV"),
  ("MOOREFIELD", "AR"),
  ("MOOREFIELD", "NE"),
  ("MOOREFIELD STATION", "VA"),
  ("MOORELAND", "OK"),
  ("MOORELAND", "IN"),
  ("MOORES HILL", "IN"),
  ("MOORES MILL", "AL"),
  ("MOORESBORO", "NC"),
  ("MOORESBURG", "TN"),
  ("MOORESTOWN-LENOLA", "NJ"),
  ("MOORESVILLE", "NC"),
  ("MOORESVILLE", "IN"),
  ("MOORESVILLE", "MS"),
  ("MOORESVILLE", "MO"),
  ("MOORESVILLE", "AL"),
  ("MOORETON", "ND"),
  ("MOORHEAD", "MN"),
  ("MOORHEAD", "MS"),
  ("MOORHEAD", "IA"),
  ("MOORINGSPORT", "LA"),
  ("MOORLAND", "IA"),
  ("MOORLAND", "KY"),
  ("MOORPARK", "CA"),
  ("MOOSE CREEK", "AK"),
  ("MOOSE LAKE", "MN"),
  ("MOOSE PASS", "AK"),
  ("MOOSE WILSON ROAD", "WY"),
  ("MOOSIC", "PA"),
  ("MOOSUP", "CT"),
  ("MOQUINO", "NM"),
  ("MORA", "NM"),
  ("MORA", "MN"),
  ("MORA", "PR"),
  ("MORADA", "CA"),
  ("MORAGA", "CA"),
  ("MORAIDA", "TX"),
  ("MORAINE", "OH"),
  ("MORALES-SANCHEZ", "TX"),
  ("MORAN", "TX"),
  ("MORAN", "KS"),
  ("MORAVIA", "NY"),
  ("MORAVIA", "IA"),
  ("MORAVIAN FALLS", "NC"),
  ("MOREAUVILLE", "LA"),
  ("MOREHEAD", "KY"),
  ("MOREHEAD CITY", "NC"),
  ("MOREHOUSE", "MO"),
  ("MORELAND", "ID"),
  ("MORELAND", "GA"),
  ("MORELAND HILLS", "OH"),
  ("MORENCI", "MI"),
  ("MORENCI", "AZ"),
  ("MORENO VALLEY", "CA"),
  ("MORGAN", "UT"),
  ("MORGAN", "GA"),
  ("MORGAN", "TX"),
  ("MORGAN", "MN"),
  ("MORGAN CITY", "LA"),
  ("MORGAN CITY", "MS"),
  ("MORGAN FARM", "TX"),
  ("MORGAN HEIGHTS", "CO"),
  ("MORGAN HILL", "CA"),
  ("MORGANDALE", "OH"),
  ("MORGANFIELD", "KY"),
  ("MORGAN'S POINT", "TX"),
  ("MORGAN'S POINT RESORT", "TX"),
  ("MORGANTON", "NC"),
  ("MORGANTON", "GA"),
  ("MORGANTOWN", "WV"),
  ("MORGANTOWN", "KY"),
  ("MORGANTOWN", "PA"),
  ("MORGANTOWN", "MS"),
  ("MORGANTOWN", "IN"),
  ("MORGANVILLE", "NJ"),
  ("MORGANVILLE", "KS"),
  ("MORGANZA", "LA"),
  ("MORIARTY", "NM"),
  ("MORICHES", "NY"),
  ("MORLAND", "KS"),
  ("MORLEY", "MI"),
  ("MORLEY", "MO"),
  ("MORLEY", "IA"),
  ("MORNING GLORY", "TX"),
  ("MORNING SUN", "IA"),
  ("MORNINGSIDE", "MD"),
  ("MORNINGSIDE", "SD"),
  ("MORNINGSIDE", "NM"),
  ("MORO", "AR"),
  ("MORO", "OR"),
  ("MOROCCO", "IN"),
  ("MORONGO VALLEY", "CA"),
  ("MORONI", "UT"),
  ("MOROVIS", "PR"),
  ("MORRAL", "OH"),
  ("MORRICE", "MI"),
  ("MORRILL", "NE"),
  ("MORRILL", "KS"),
  ("MORRILTON", "AR"),
  ("MORRIS", "IL"),
  ("MORRIS", "MN"),
  ("MORRIS", "AL"),
  ("MORRIS", "OK"),
  ("MORRIS", "NY"),
  ("MORRIS PLAINS", "NJ"),
  ("MORRISDALE", "PA"),
  ("MORRISON", "TN"),
  ("MORRISON", "IL"),
  ("MORRISON", "CO"),
  ("MORRISON", "OK"),
  ("MORRISON", "MO"),
  ("MORRISON", "IA"),
  ("MORRISON BLUFF", "AR"),
  ("MORRISON CROSSROADS", "AL"),
  ("MORRISONVILLE", "NY"),
  ("MORRISONVILLE", "IL"),
  ("MORRISTON", "FL"),
  ("MORRISTOWN", "TN"),
  ("MORRISTOWN", "NJ"),
  ("MORRISTOWN", "IN"),
  ("MORRISTOWN", "MN"),
  ("MORRISTOWN", "NY"),
  ("MORRISTOWN", "AZ"),
  ("MORRISTOWN", "OH"),
  ("MORRISTOWN", "SD"),
  ("MORRISVILLE", "NC"),
  ("MORRISVILLE", "VT"),
  ("MORRISVILLE", "PA"),
  ("MORRISVILLE", "PA"),
  ("MORRISVILLE", "NY"),
  ("MORRISVILLE", "MO"),
  ("MORRO BAY", "CA"),
  ("MORROW", "GA"),
  ("MORROW", "OH"),
  ("MORROWVILLE", "KS"),
  ("MORSE", "LA"),
  ("MORSE", "TX"),
  ("MORSE BLUFF", "NE"),
  ("MORTON", "IL"),
  ("MORTON", "MS"),
  ("MORTON", "TX"),
  ("MORTON", "MN"),
  ("MORTON", "WA"),
  ("MORTON", "PA"),
  ("MORTON GROVE", "IL"),
  ("MORTONS GAP", "KY"),
  ("MORVEN", "GA"),
  ("MORVEN", "NC"),
  ("MOSBY", "MO"),
  ("MOSCOW", "ID"),
  ("MOSCOW", "PA"),
  ("MOSCOW", "TN"),
  ("MOSCOW", "OH"),
  ("MOSCOW", "KS"),
  ("MOSCOW", "MD"),
  ("MOSCOW MILLS", "MO"),
  ("MOSES LAKE", "WA"),
  ("MOSES LAKE NORTH", "WA"),
  ("MOSHANNON", "PA"),
  ("MOSHEIM", "TN"),
  ("MOSIER", "OR"),
  ("MOSINEE", "WI"),
  ("MOSKOWITE CORNER", "CA"),
  ("MOSQUERO", "NM"),
  ("MOSQUITO LAKE", "AK"),
  ("MOSS BEACH", "CA"),
  ("MOSS BLUFF", "LA"),
  ("MOSS LANDING", "CA"),
  ("MOSS POINT", "MS"),
  ("MOSSES", "AL"),
  ("MOSSYROCK", "WA"),
  ("MOTLEY", "VA"),
  ("MOTLEY", "MN"),
  ("MOTT", "ND"),
  ("MOULTON", "AL"),
  ("MOULTON", "IA"),
  ("MOULTON", "TX"),
  ("MOULTRIE", "GA"),
  ("MOUND", "MN"),
  ("MOUND", "LA"),
  ("MOUND BAYOU", "MS"),
  ("MOUND CITY", "MO"),
  ("MOUND CITY", "KS"),
  ("MOUND CITY", "IL"),
  ("MOUND CITY", "SD"),
  ("MOUND STATION", "IL"),
  ("MOUND VALLEY", "KS"),
  ("MOUNDRIDGE", "KS"),
  ("MOUNDS", "OK"),
  ("MOUNDS", "IL"),
  ("MOUNDS VIEW", "MN"),
  ("MOUNDSVILLE", "WV"),
  ("MOUNDVILLE", "AL"),
  ("MOUNDVILLE", "MO"),
  ("MOUNT AETNA", "MD"),
  ("MOUNT AETNA", "PA"),
  ("MOUNT AIRY", "NC"),
  ("MOUNT AIRY", "MD"),
  ("MOUNT AIRY", "GA"),
  ("MOUNT ANGEL", "OR"),
  ("MOUNT ARLINGTON", "NJ"),
  ("MOUNT AUBURN", "IL"),
  ("MOUNT AUBURN", "IA"),
  ("MOUNT AUBURN", "IN"),
  ("MOUNT AYR", "IA"),
  ("MOUNT AYR", "IN"),
  ("MOUNT BLANCHARD", "OH"),
  ("MOUNT BRIAR", "MD"),
  ("MOUNT CALM", "TX"),
  ("MOUNT CALVARY", "WI"),
  ("MOUNT CARBON", "WV"),
  ("MOUNT CARBON", "PA"),
  ("MOUNT CARMEL", "SC"),
  ("MOUNT CARMEL", "TN"),
  ("MOUNT CARMEL", "FL"),
  ("MOUNT CARMEL", "IL"),
  ("MOUNT CARMEL", "OH"),
  ("MOUNT CARMEL", "PA"),
  ("MOUNT CARMEL", "IN"),
  ("MOUNT CARROLL", "IL"),
  ("MOUNT CHARLESTON", "NV"),
  ("MOUNT CLARE", "IL"),
  ("MOUNT CLEMENS", "MI"),
  ("MOUNT COBB", "PA"),
  ("MOUNT CORY", "OH"),
  ("MOUNT CRAWFORD", "VA"),
  ("MOUNT CRESTED BUTTE", "CO"),
  ("MOUNT CROGHAN", "SC"),
  ("MOUNT DORA", "FL"),
  ("MOUNT EAGLE", "PA"),
  ("MOUNT EATON", "OH"),
  ("MOUNT ENTERPRISE", "TX"),
  ("MOUNT EPHRAIM", "NJ"),
  ("MOUNT ERIE", "IL"),
  ("MOUNT ETNA", "IN"),
  ("MOUNT GAY-SHAMROCK", "WV"),
  ("MOUNT GILEAD", "OH"),
  ("MOUNT GILEAD", "NC"),
  ("MOUNT GRETNA", "PA"),
  ("MOUNT GRETNA HEIGHTS", "PA"),
  ("MOUNT HEALTHY", "OH"),
  ("MOUNT HEALTHY HEIGHTS", "OH"),
  ("MOUNT HEBRON", "CA"),
  ("MOUNT HERMON", "VA"),
  ("MOUNT HERMON", "CA"),
  ("MOUNT HERMON", "NJ"),
  ("MOUNT HOLLY", "NC"),
  ("MOUNT HOLLY SPRINGS", "PA"),
  ("MOUNT HOOD", "OR"),
  ("MOUNT HOOD VILLAGE", "OR"),
  ("MOUNT HOPE", "KS"),
  ("MOUNT HOPE", "WV"),
  ("MOUNT HOPE", "WI"),
  ("MOUNT HOREB", "WI"),
  ("MOUNT IDA", "AR"),
  ("MOUNT IVY", "NY"),
  ("MOUNT JACKSON", "VA"),
  ("MOUNT JEWETT", "PA"),
  ("MOUNT JOY", "PA"),
  ("MOUNT JULIET", "TN"),
  ("MOUNT KISCO", "NY"),
  ("MOUNT LAGUNA", "CA"),
  ("MOUNT LEBANON", "LA"),
  ("MOUNT LENA", "MD"),
  ("MOUNT LEONARD", "MO"),
  ("MOUNT MORIAH", "MO"),
  ("MOUNT MORRIS", "PA"),
  ("MOUNT MORRIS", "NY"),
  ("MOUNT MORRIS", "IL"),
  ("MOUNT MORRIS", "MI"),
  ("MOUNT OLIVE", "AL"),
  ("MOUNT OLIVE", "AL"),
  ("MOUNT OLIVE", "MS"),
  ("MOUNT OLIVE", "NC"),
  ("MOUNT OLIVE", "IL"),
  ("MOUNT OLIVER", "PA"),
  ("MOUNT OLIVET", "KY"),
  ("MOUNT ORAB", "OH"),
  ("MOUNT PENN", "PA"),
  ("MOUNT PLEASANT", "SC"),
  ("MOUNT PLEASANT", "WI"),
  ("MOUNT PLEASANT", "TX"),
  ("MOUNT PLEASANT", "TN"),
  ("MOUNT PLEASANT", "IA"),
  ("MOUNT PLEASANT", "MI"),
  ("MOUNT PLEASANT", "NC"),
  ("MOUNT PLEASANT", "AR"),
  ("MOUNT PLEASANT", "UT"),
  ("MOUNT PLEASANT", "PA"),
  ("MOUNT PLEASANT", "OH"),
  ("MOUNT PLEASANT MILLS", "PA"),
  ("MOUNT PLYMOUTH", "FL"),
  ("MOUNT POCONO", "PA"),
  ("MOUNT PROSPECT", "IL"),
  ("MOUNT PULASKI", "IL"),
  ("MOUNT RAINIER", "MD"),
  ("MOUNT REPOSE", "OH"),
  ("MOUNT SAVAGE", "MD"),
  ("MOUNT SHASTA", "CA"),
  ("MOUNT SIDNEY", "VA"),
  ("MOUNT SINAI", "NY"),
  ("MOUNT STERLING", "KY"),
  ("MOUNT STERLING", "OH"),
  ("MOUNT STERLING", "WI"),
  ("MOUNT STERLING", "IL"),
  ("MOUNT STERLING", "IA"),
  ("MOUNT SUMMIT", "IN"),
  ("MOUNT UNION", "PA"),
  ("MOUNT UNION", "IA"),
  ("MOUNT VERNON", "IL"),
  ("MOUNT VERNON", "MD"),
  ("MOUNT VERNON", "WA"),
  ("MOUNT VERNON", "OH"),
  ("MOUNT VERNON", "VA"),
  ("MOUNT VERNON", "AL"),
  ("MOUNT VERNON", "NY"),
  ("MOUNT VERNON", "GA"),
  ("MOUNT VERNON", "MO"),
  ("MOUNT VERNON", "TX"),
  ("MOUNT VERNON", "IA"),
  ("MOUNT VERNON", "IN"),
  ("MOUNT VERNON", "KY"),
  ("MOUNT VERNON", "AR"),
  ("MOUNT VERNON", "OR"),
  ("MOUNT VERNON", "SD"),
  ("MOUNT VICTORY", "OH"),
  ("MOUNT VISTA", "WA"),
  ("MOUNT WASHINGTON", "KY"),
  ("MOUNT WILSON", "NV"),
  ("MOUNT WOLF", "PA"),
  ("MOUNT ZION", "GA"),
  ("MOUNT ZION", "IL"),
  ("MOUNTAIN", "WI"),
  ("MOUNTAIN", "ND"),
  ("MOUNTAIN BROOK", "AL"),
  ("MOUNTAIN CENTER", "CA"),
  ("MOUNTAIN CITY", "TN"),
  ("MOUNTAIN CITY", "GA"),
  ("MOUNTAIN CITY", "TX"),
  ("MOUNTAIN GATE", "CA"),
  ("MOUNTAIN GREEN", "UT"),
  ("MOUNTAIN GROVE", "MO"),
  ("MOUNTAIN HOME", "AR"),
  ("MOUNTAIN HOME", "ID"),
  ("MOUNTAIN HOME", "NC"),
  ("MOUNTAIN HOME AFB", "ID"),
  ("MOUNTAIN HOUSE", "CA"),
  ("MOUNTAIN IRON", "MN"),
  ("MOUNTAIN LAKE", "MN"),
  ("MOUNTAIN LAKE", "NJ"),
  ("MOUNTAIN LAKE PARK", "MD"),
  ("MOUNTAIN LAKES", "NH"),
  ("MOUNTAIN LAKES", "NJ"),
  ("MOUNTAIN LODGE PARK", "NY"),
  ("MOUNTAIN MEADOWS", "CO"),
  ("MOUNTAIN MESA", "CA"),
  ("MOUNTAIN PARK", "GA"),
  ("MOUNTAIN PARK", "OK"),
  ("MOUNTAIN PARK", "GA"),
  ("MOUNTAIN PINE", "AR"),
  ("MOUNTAIN RANCH", "CA"),
  ("MOUNTAIN ROAD", "VA"),
  ("MOUNTAIN TOP", "PA"),
  ("MOUNTAIN VIEW", "HI"),
  ("MOUNTAIN VIEW", "CA"),
  ("MOUNTAIN VIEW", "AR"),
  ("MOUNTAIN VIEW", "NC"),
  ("MOUNTAIN VIEW", "WY"),
  ("MOUNTAIN VIEW", "MO"),
  ("MOUNTAIN VIEW", "WY"),
  ("MOUNTAIN VIEW", "OK"),
  ("MOUNTAIN VIEW", "NM"),
  ("MOUNTAIN VIEW", "CA"),
  ("MOUNTAIN VIEW", "CO"),
  ("MOUNTAIN VIEW ACRES", "CA"),
  ("MOUNTAIN VILLAGE", "AK"),
  ("MOUNTAIN VILLAGE", "CO"),
  ("MOUNTAINAIR", "NM"),
  ("MOUNTAINAIRE", "AZ"),
  ("MOUNTAINBURG", "AR"),
  ("MOUNTAINHOME", "PA"),
  ("MOUNTAINSIDE", "NJ"),
  ("MOUNTLAKE TERRACE", "WA"),
  ("MOUNTVILLE", "SC"),
  ("MOUNTVILLE", "PA"),
  ("MOVICO", "AL"),
  ("MOVILLE", "IA"),
  ("MOWBRAY MOUNTAIN", "TN"),
  ("MOWEAQUA", "IL"),
  ("MOWRYSTOWN", "OH"),
  ("MOXEE", "WA"),
  ("MOYIE SPRINGS", "ID"),
  ("MOYOCK", "NC"),
  ("MUCARABONES", "PR"),
  ("MUD BAY", "AK"),
  ("MUD LAKE", "ID"),
  ("MUDDY", "MT"),
  ("MUDDY", "IL"),
  ("MUENSTER", "TX"),
  ("MUHLENBERG PARK", "PA"),
  ("MUIR", "MI"),
  ("MUIR", "PA"),
  ("MUIR BEACH", "CA"),
  ("MUKILTEO", "WA"),
  ("MUKWONAGO", "WI"),
  ("MULAT", "FL"),
  ("MULBERRY", "AR"),
  ("MULBERRY", "FL"),
  ("MULBERRY", "NC"),
  ("MULBERRY", "SC"),
  ("MULBERRY", "OH"),
  ("MULBERRY", "OK"),
  ("MULBERRY", "IN"),
  ("MULBERRY", "KS"),
  ("MULBERRY GROVE", "IL"),
  ("MULDRAUGH", "KY"),
  ("MULDROW", "OK"),
  ("MULESHOE", "TX"),
  ("MULFORD", "CO"),
  ("MULGA", "AL"),
  ("MULHALL", "OK"),
  ("MULINO", "OR"),
  ("MULKEYTOWN", "IL"),
  ("MULLAN", "ID"),
  ("MULLEN", "NE"),
  ("MULLENS", "WV"),
  ("MULLICA HILL", "NJ"),
  ("MULLIKEN", "MI"),
  ("MULLIN", "TX"),
  ("MULLINS", "SC"),
  ("MULLINVILLE", "KS"),
  ("MULVANE", "KS"),
  ("MUNCIE", "IN"),
  ("MUNCIE", "IL"),
  ("MUNCY", "PA"),
  ("MUNDAY", "TX"),
  ("MUNDELEIN", "IL"),
  ("MUNDEN", "KS"),
  ("MUNDS PARK", "AZ"),
  ("MUNDYS CORNER", "PA"),
  ("MUNFORD", "TN"),
  ("MUNFORD", "AL"),
  ("MUNFORDVILLE", "KY"),
  ("MUNHALL", "PA"),
  ("MUNICH", "ND"),
  ("MUNISING", "MI"),
  ("MUNIZ", "TX"),
  ("MUNJOR", "KS"),
  ("MUNNSVILLE", "NY"),
  ("MUNROE FALLS", "OH"),
  ("MUNSEY PARK", "NY"),
  ("MUNSON", "FL"),
  ("MUNSONS CORNERS", "NY"),
  ("MUNSTER", "IN"),
  ("MURCHISON", "TX"),
  ("MURDO", "SD"),
  ("MURDOCK", "MN"),
  ("MURDOCK", "NE"),
  ("MURFREESBORO", "TN"),
  ("MURFREESBORO", "NC"),
  ("MURFREESBORO", "AR"),
  ("MURILLO", "TX"),
  ("MURPHY", "TX"),
  ("MURPHY", "OK"),
  ("MURPHY", "MO"),
  ("MURPHY", "ID"),
  ("MURPHY", "NC"),
  ("MURPHYS", "CA"),
  ("MURPHYS ESTATES", "SC"),
  ("MURPHYSBORO", "IL"),
  ("MURRAY", "UT"),
  ("MURRAY", "KY"),
  ("MURRAY", "IA"),
  ("MURRAY", "NE"),
  ("MURRAY CITY", "OH"),
  ("MURRAY HILL", "KY"),
  ("MURRAYSVILLE", "NC"),
  ("MURRAYVILLE", "IL"),
  ("MURRELLS INLET", "SC"),
  ("MURRIETA", "CA"),
  ("MURRYSVILLE", "PA"),
  ("MURTAUGH", "ID"),
  ("MUSCATINE", "IA"),
  ("MUSCLE SHOALS", "AL"),
  ("MUSCODA", "WI"),
  ("MUSCOTAH", "KS"),
  ("MUSCOY", "CA"),
  ("MUSE", "PA"),
  ("MUSKEGO", "WI"),
  ("MUSKEGON", "MI"),
  ("MUSKEGON HEIGHTS", "MI"),
  ("MUSKOGEE", "OK"),
  ("MUSSELSHELL", "MT"),
  ("MUSTANG", "OK"),
  ("MUSTANG", "TX"),
  ("MUSTANG RIDGE", "TX"),
  ("MUTTONTOWN", "NY"),
  ("MUTUAL", "OK"),
  ("MUTUAL", "OH"),
  ("MYERS CORNER", "NY"),
  ("MYERS FLAT", "CA"),
  ("MYERSTOWN", "PA"),
  ("MYERSVILLE", "MD"),
  ("MYLO", "ND"),
  ("MYRTLE", "MS"),
  ("MYRTLE", "MN"),
  ("MYRTLE BEACH", "SC"),
  ("MYRTLE CREEK", "OR"),
  ("MYRTLE GROVE", "NC"),
  ("MYRTLE GROVE", "FL"),
  ("MYRTLE POINT", "OR"),
  ("MYRTLE SPRINGS", "TX"),
  ("MYRTLETOWN", "CA"),
  ("MYRTLEWOOD", "AL"),
  ("MYSTIC", "CT"),
  ("MYSTIC", "IA"),
  ("MYSTIC ISLAND", "NJ"),
  ("MYTON", "UT"),
  ("NAALEHU", "HI"),
  ("NABESNA", "AK"),
  ("NACHES", "WA"),
  ("NACO", "AZ"),
  ("NACOGDOCHES", "TX"),
  ("NADINE", "NM"),
  ("NAGEEZI", "NM"),
  ("NAGS HEAD", "NC"),
  ("NAGUABO", "PR"),
  ("NAHANT", "MA"),
  ("NAHUNTA", "GA"),
  ("NAKAIBITO", "NM"),
  ("NAKNEK", "AK"),
  ("NAMBE", "NM"),
  ("NAMPA", "ID"),
  ("NANAFALIA", "AL"),
  ("NANAKULI", "HI"),
  ("NANAWALE ESTATES", "HI"),
  ("NANCES CREEK", "AL"),
  ("NANTICOKE", "PA"),
  ("NANTICOKE", "MD"),
  ("NANTICOKE ACRES", "MD"),
  ("NANTUCKET", "MA"),
  ("NANTY-GLO", "PA"),
  ("NANUET", "NY"),
  ("NANWALEK", "AK"),
  ("NAOMI", "PA"),
  ("NAPA", "CA"),
  ("NAPAKIAK", "AK"),
  ("NAPANOCH", "NY"),
  ("NAPASKIAK", "AK"),
  ("NAPAVINE", "WA"),
  ("NAPEAGUE", "NY"),
  ("NAPER", "NE"),
  ("NAPERVILLE", "IL"),
  ("NAPI HEADQUARTERS", "NM"),
  ("NAPIER FIELD", "AL"),
  ("NAPILI-HONOKOWAI", "HI"),
  ("NAPLATE", "IL"),
  ("NAPLES", "FL"),
  ("NAPLES", "UT"),
  ("NAPLES", "ME"),
  ("NAPLES", "TX"),
  ("NAPLES", "NY"),
  ("NAPLES", "IL"),
  ("NAPLES", "SD"),
  ("NAPLES MANOR", "FL"),
  ("NAPLES PARK", "FL"),
  ("NAPOLEON", "OH"),
  ("NAPOLEON", "MI"),
  ("NAPOLEON", "MO"),
  ("NAPOLEON", "ND"),
  ("NAPOLEON", "IN"),
  ("NAPOLEONVILLE", "LA"),
  ("NAPONEE", "NE"),
  ("NAPPANEE", "IN"),
  ("NARA VISA", "NM"),
  ("NARANJA", "FL"),
  ("NARANJITO", "PR"),
  ("NARBERTH", "PA"),
  ("NARCISO PENA", "TX"),
  ("NARCISSA", "OK"),
  ("NARDIN", "OK"),
  ("NARKA", "KS"),
  ("NARRAGANSETT PIER", "RI"),
  ("NARROWS", "VA"),
  ("NARROWSBURG", "NY"),
  ("NASCHITTI", "NM"),
  ("NASELLE", "WA"),
  ("NASH", "TX"),
  ("NASH", "ND"),
  ("NASH", "OK"),
  ("NASHOTAH", "WI"),
  ("NASHUA", "NH"),
  ("NASHUA", "MN"),
  ("NASHUA", "IA"),
  ("NASHUA", "MT"),
  ("NASHVILLE-DAVIDSON", "TN"),
  ("NASHVILLE", "TN"),
  ("NASHVILLE", "AR"),
  ("NASHVILLE", "GA"),
  ("NASHVILLE", "NC"),
  ("NASHVILLE", "IL"),
  ("NASHVILLE", "MI"),
  ("NASHVILLE", "IN"),
  ("NASHVILLE", "KS"),
  ("NASHVILLE", "OH"),
  ("NASHWAUK", "MN"),
  ("NASON", "IL"),
  ("NASSAU", "NY"),
  ("NASSAU", "MN"),
  ("NASSAU BAY", "TX"),
  ("NASSAU VILLAGE-RATLIFF", "FL"),
  ("NASSAWADOX", "VA"),
  ("NATALBANY", "LA"),
  ("NATALIA", "TX"),
  ("NATCHEZ", "MS"),
  ("NATCHEZ", "LA"),
  ("NATCHITOCHES", "LA"),
  ("NATHALIE", "VA"),
  ("NATIONAL", "MD"),
  ("NATIONAL CITY", "CA"),
  ("NATIONAL HARBOR", "MD"),
  ("NATIONAL PARK", "NJ"),
  ("NATOMA", "KS"),
  ("NATURAL BRIDGE", "NY"),
  ("NATURAL BRIDGE", "AL"),
  ("NATURAL STEPS", "AR"),
  ("NATURITA", "CO"),
  ("NAUGATUCK", "CT"),
  ("NAUKATI BAY", "AK"),
  ("NAUVOO", "IL"),
  ("NAUVOO", "AL"),
  ("NAVAJO", "NM"),
  ("NAVAJO DAM", "NM"),
  ("NAVAJO MOUNTAIN", "UT"),
  ("NAVAL ACADEMY", "MD"),
  ("NAVARINO", "WI"),
  ("NAVARRE", "FL"),
  ("NAVARRE", "OH"),
  ("NAVARRE BEACH", "FL"),
  ("NAVARRO", "TX"),
  ("NAVASOTA", "TX"),
  ("NAVASSA", "NC"),
  ("NAVESINK", "NJ"),
  ("NAVY YARD CITY", "WA"),
  ("NAYLOR", "MO"),
  ("NAYTAHWAUSH", "MN"),
  ("NAZARETH", "PA"),
  ("NAZARETH", "TX"),
  ("NAZLINI", "AZ"),
  ("NEABSCO", "VA"),
  ("NEAH BAY", "WA"),
  ("NEAHKAHNIE", "OR"),
  ("NEAPOLIS", "OH"),
  ("NEBO", "IL"),
  ("NEBO", "KY"),
  ("NEBRASKA CITY", "NE"),
  ("NECEDAH", "WI"),
  ("NECHE", "ND"),
  ("NECK CITY", "MO"),
  ("NECTAR", "AL"),
  ("NEDERLAND", "TX"),
  ("NEDERLAND", "CO"),
  ("NEDROW", "NY"),
  ("NEEDHAM", "MA"),
  ("NEEDHAM", "AL"),
  ("NEEDLES", "CA"),
  ("NEEDMORE", "PA"),
  ("NEEDVILLE", "TX"),
  ("NEELYVILLE", "MO"),
  ("NEENAH", "WI"),
  ("NEESES", "SC"),
  ("NEFFS", "OH"),
  ("NEGAUNEE", "MI"),
  ("NEGLEY", "OH"),
  ("NEHALEM", "OR"),
  ("NEHAWKA", "NE"),
  ("NEIBERT", "WV"),
  ("NEIHART", "MT"),
  ("NEILLSVILLE", "WI"),
  ("NEILTON", "WA"),
  ("NEKOMA", "ND"),
  ("NEKOOSA", "WI"),
  ("NELCHINA", "AK"),
  ("NELIGH", "NE"),
  ("NELLIE", "OH"),
  ("NELLIEBURG", "MS"),
  ("NELLIS AFB", "NV"),
  ("NELLISTON", "NY"),
  ("NELLYSFORD", "VA"),
  ("NELSON", "NV"),
  ("NELSON", "GA"),
  ("NELSON", "WI"),
  ("NELSON", "NE"),
  ("NELSON", "MN"),
  ("NELSON", "AZ"),
  ("NELSON", "MO"),
  ("NELSON", "IL"),
  ("NELSON LAGOON", "AK"),
  ("NELSONIA", "VA"),
  ("NELSONVILLE", "OH"),
  ("NELSONVILLE", "NY"),
  ("NELSONVILLE", "WI"),
  ("NEMACOLIN", "PA"),
  ("NEMAHA", "NE"),
  ("NEMAHA", "IA"),
  ("NENAHNEZAD", "NM"),
  ("NENANA", "AK"),
  ("NENZEL", "NE"),
  ("NEODESHA", "KS"),
  ("NEOGA", "IL"),
  ("NEOLA", "UT"),
  ("NEOLA", "IA"),
  ("NEOPIT", "WI"),
  ("NEOSHO", "MO"),
  ("NEOSHO", "WI"),
  ("NEOSHO FALLS", "KS"),
  ("NEOSHO RAPIDS", "KS"),
  ("NEPHI", "UT"),
  ("NEPONSET", "IL"),
  ("NEPTUNE BEACH", "FL"),
  ("NEPTUNE CITY", "NJ"),
  ("NERSTRAND", "MN"),
  ("NESBITT", "TX"),
  ("NESCATUNGA", "OK"),
  ("NESCONSET", "NY"),
  ("NESCOPECK", "PA"),
  ("NESHKORO", "WI"),
  ("NESIKA BEACH", "OR"),
  ("NESKOWIN", "OR"),
  ("NESPELEM", "WA"),
  ("NESPELEM COMMUNITY", "WA"),
  ("NESQUEHONING", "PA"),
  ("NESS CITY", "KS"),
  ("NESSEN CITY", "MI"),
  ("NETARTS", "OR"),
  ("NETAWAKA", "KS"),
  ("NETCONG", "NJ"),
  ("NETOS", "TX"),
  ("NETT LAKE", "MN"),
  ("NETTIE", "WV"),
  ("NETTLETON", "MS"),
  ("NEUSE FOREST", "NC"),
  ("NEVADA", "MO"),
  ("NEVADA", "IA"),
  ("NEVADA", "TX"),
  ("NEVADA", "OH"),
  ("NEVADA CITY", "CA"),
  ("NEVILLE", "OH"),
  ("NEVIS", "MN"),
  ("NEW ALBANY", "MS"),
  ("NEW ALBANY", "IN"),
  ("NEW ALBANY", "OH"),
  ("NEW ALBANY", "PA"),
  ("NEW ALBANY", "KS"),
  ("NEW ALBIN", "IA"),
  ("NEW ALEXANDRIA", "PA"),
  ("NEW ALEXANDRIA", "OH"),
  ("NEW ALLAKAKET", "AK"),
  ("NEW ALLUWE", "OK"),
  ("NEW AMSTERDAM", "IN"),
  ("NEW ATHENS", "IL"),
  ("NEW ATHENS", "OH"),
  ("NEW AUBURN", "WI"),
  ("NEW AUBURN", "MN"),
  ("NEW AUGUSTA", "MS"),
  ("NEW BADEN", "IL"),
  ("NEW BALTIMORE", "VA"),
  ("NEW BALTIMORE", "MI"),
  ("NEW BALTIMORE", "OH"),
  ("NEW BALTIMORE", "PA"),
  ("NEW BAVARIA", "OH"),
  ("NEW BEAVER", "PA"),
  ("NEW BEDFORD", "MA"),
  ("NEW BEDFORD", "PA"),
  ("NEW BEDFORD", "IL"),
  ("NEW BERLIN", "WI"),
  ("NEW BERLIN", "TX"),
  ("NEW BERLIN", "IL"),
  ("NEW BERLIN", "NY"),
  ("NEW BERLIN", "PA"),
  ("NEW BERLINVILLE", "PA"),
  ("NEW BERN", "NC"),
  ("NEW BETHLEHEM", "PA"),
  ("NEW BLAINE", "AR"),
  ("NEW BLOOMFIELD", "MO"),
  ("NEW BLOOMINGTON", "OH"),
  ("NEW BOSTON", "TX"),
  ("NEW BOSTON", "OH"),
  ("NEW BOSTON", "IL"),
  ("NEW BRAUNFELS", "TX"),
  ("NEW BREMEN", "OH"),
  ("NEW BRIGHTON", "MN"),
  ("NEW BRIGHTON", "PA"),
  ("NEW BRITAIN", "CT"),
  ("NEW BRITAIN", "PA"),
  ("NEW BROCKTON", "AL"),
  ("NEW BRUNSWICK", "NJ"),
  ("NEW BUFFALO", "MI"),
  ("NEW BUFFALO", "PA"),
  ("NEW BURLINGTON", "OH"),
  ("NEW BURNSIDE", "IL"),
  ("NEW CALIFORNIA", "OH"),
  ("NEW CAMBRIA", "MO"),
  ("NEW CAMBRIA", "KS"),
  ("NEW CANTON", "IL"),
  ("NEW CARLISLE", "OH"),
  ("NEW CARLISLE", "IN"),
  ("NEW CARROLLTON", "MD"),
  ("NEW CASSEL", "NY"),
  ("NEW CASTLE", "PA"),
  ("NEW CASTLE", "IN"),
  ("NEW CASTLE", "DE"),
  ("NEW CASTLE", "CO"),
  ("NEW CASTLE", "KY"),
  ("NEW CASTLE", "VA"),
  ("NEW CASTLE NORTHWEST", "PA"),
  ("NEW CENTERVILLE", "PA"),
  ("NEW CHAPEL HILL", "TX"),
  ("NEW CHICAGO", "IN"),
  ("NEW CHURCH", "VA"),
  ("NEW CITY", "NY"),
  ("NEW COLUMBIA", "PA"),
  ("NEW COLUMBUS", "PA"),
  ("NEW CONCORD", "OH"),
  ("NEW CORDELL", "OK"),
  ("NEW CUMBERLAND", "PA"),
  ("NEW CUMBERLAND", "WV"),
  ("NEW CUYAMA", "CA"),
  ("NEW DEAL", "TN"),
  ("NEW DEAL", "TX"),
  ("NEW DOUGLAS", "IL"),
  ("NEW EAGLE", "PA"),
  ("NEW EDINBURG", "AR"),
  ("NEW EFFINGTON", "SD"),
  ("NEW EGYPT", "NJ"),
  ("NEW ELLENTON", "SC"),
  ("NEW ENGLAND", "ND"),
  ("NEW ERA", "MI"),
  ("NEW EUCHA", "OK"),
  ("NEW FAIRVIEW", "TX"),
  ("NEW FALCON", "TX"),
  ("NEW FLORENCE", "MO"),
  ("NEW FLORENCE", "PA"),
  ("NEW FRANKLIN", "OH"),
  ("NEW FRANKLIN", "MO"),
  ("NEW FREEDOM", "PA"),
  ("NEW FREEPORT", "PA"),
  ("NEW GALILEE", "PA"),
  ("NEW GERMANY", "MN"),
  ("NEW GLARUS", "WI"),
  ("NEW GOSHEN", "IN"),
  ("NEW GRAND CHAIN", "IL"),
  ("NEW HAMILTON", "MS"),
  ("NEW HAMPSHIRE", "OH"),
  ("NEW HAMPTON", "IA"),
  ("NEW HAMPTON", "NH"),
  ("NEW HAMPTON", "MO"),
  ("NEW HARMONY", "IN"),
  ("NEW HARMONY", "UT"),
  ("NEW HARTFORD", "NY"),
  ("NEW HARTFORD", "IA"),
  ("NEW HARTFORD CENTER", "CT"),
  ("NEW HAVEN", "CT"),
  ("NEW HAVEN", "IN"),
  ("NEW HAVEN", "MO"),
  ("NEW HAVEN", "MI"),
  ("NEW HAVEN", "IA"),
  ("NEW HAVEN", "OH"),
  ("NEW HAVEN", "OH"),
  ("NEW HAVEN", "IL"),
  ("NEW HAVEN", "WV"),
  ("NEW HAVEN", "KY"),
  ("NEW HEBRON", "MS"),
  ("NEW HEMPSTEAD", "NY"),
  ("NEW HOLLAND", "PA"),
  ("NEW HOLLAND", "OH"),
  ("NEW HOLLAND", "IL"),
  ("NEW HOLLAND", "SD"),
  ("NEW HOLSTEIN", "WI"),
  ("NEW HOME", "TX"),
  ("NEW HOPE", "TN"),
  ("NEW HOPE", "AL"),
  ("NEW HOPE", "VA"),
  ("NEW HOPE", "MS"),
  ("NEW HOPE", "MN"),
  ("NEW HOPE", "OR"),
  ("NEW HOPE", "TX"),
  ("NEW HOPE", "PA"),
  ("NEW HOPE", "KY"),
  ("NEW HOULKA", "MS"),
  ("NEW HYDE PARK", "NY"),
  ("NEW IBERIA", "LA"),
  ("NEW JERUSALEM", "PA"),
  ("NEW JOHNSONVILLE", "TN"),
  ("NEW KENSINGTON", "PA"),
  ("NEW KENT", "VA"),
  ("NEW KINGMAN-BUTLER", "AZ"),
  ("NEW KINGSTOWN", "PA"),
  ("NEW KNOXVILLE", "OH"),
  ("NEW LEBANON", "OH"),
  ("NEW LEBANON", "PA"),
  ("NEW LEIPZIG", "ND"),
  ("NEW LENOX", "IL"),
  ("NEW LEXINGTON", "OH"),
  ("NEW LIBERTY", "IA"),
  ("NEW LISBON", "WI"),
  ("NEW LLANO", "LA"),
  ("NEW LONDON", "TX"),
  ("NEW LONDON", "CT"),
  ("NEW LONDON", "WI"),
  ("NEW LONDON", "OH"),
  ("NEW LONDON", "NC"),
  ("NEW LONDON", "MN"),
  ("NEW LONDON", "NH"),
  ("NEW LONDON", "IA"),
  ("NEW LONDON", "MO"),
  ("NEW LOTHROP", "MI"),
  ("NEW MADISON", "OH"),
  ("NEW MADRID", "MO"),
  ("NEW MARKET", "AL"),
  ("NEW MARKET", "TN"),
  ("NEW MARKET", "VA"),
  ("NEW MARKET", "MD"),
  ("NEW MARKET", "IA"),
  ("NEW MARKET", "IN"),
  ("NEW MARKET", "PA"),
  ("NEW MARSHFIELD", "OH"),
  ("NEW MARTINSVILLE", "WV"),
  ("NEW MEADOWS", "ID"),
  ("NEW MELLE", "MO"),
  ("NEW MIAMI", "OH"),
  ("NEW MIDDLETOWN", "OH"),
  ("NEW MIDDLETOWN", "IN"),
  ("NEW MILFORD", "CT"),
  ("NEW MILFORD", "NJ"),
  ("NEW MILFORD", "IL"),
  ("NEW MILFORD", "PA"),
  ("NEW MINDEN", "IL"),
  ("NEW MORGAN", "PA"),
  ("NEW MUNICH", "MN"),
  ("NEW ODANAH", "WI"),
  ("NEW ORLEANS", "LA"),
  ("NEW OXFORD", "PA"),
  ("NEW PALESTINE", "IN"),
  ("NEW PALTZ", "NY"),
  ("NEW PARIS", "IN"),
  ("NEW PARIS", "OH"),
  ("NEW PARIS", "PA"),
  ("NEW PEKIN", "IN"),
  ("NEW PHILADELPHIA", "OH"),
  ("NEW PHILADELPHIA", "PA"),
  ("NEW PINE CREEK", "OR"),
  ("NEW PINE CREEK", "CA"),
  ("NEW PITTSBURG", "OH"),
  ("NEW PLYMOUTH", "ID"),
  ("NEW POINT", "IN"),
  ("NEW PORT RICHEY", "FL"),
  ("NEW PORT RICHEY EAST", "FL"),
  ("NEW POST", "WI"),
  ("NEW PRAGUE", "MN"),
  ("NEW PRESTON", "CT"),
  ("NEW PROVIDENCE", "NJ"),
  ("NEW PROVIDENCE", "IA"),
  ("NEW RICHLAND", "MN"),
  ("NEW RICHMOND", "WI"),
  ("NEW RICHMOND", "OH"),
  ("NEW RICHMOND", "WV"),
  ("NEW RICHMOND", "IN"),
  ("NEW RIEGEL", "OH"),
  ("NEW RINGGOLD", "PA"),
  ("NEW RIVER", "AZ"),
  ("NEW RIVER", "VA"),
  ("NEW ROADS", "LA"),
  ("NEW ROCHELLE", "NY"),
  ("NEW ROCKFORD", "ND"),
  ("NEW ROSS", "IN"),
  ("NEW SALEM", "ND"),
  ("NEW SALEM", "PA"),
  ("NEW SALEM", "IL"),
  ("NEW SALEM", "PA"),
  ("NEW SALISBURY", "IN"),
  ("NEW SARPY", "LA"),
  ("NEW SCHAEFFERSTOWN", "PA"),
  ("NEW SEABURY", "MA"),
  ("NEW SHARON", "IA"),
  ("NEW SITE", "AL"),
  ("NEW SMYRNA BEACH", "FL"),
  ("NEW SQUARE", "NY"),
  ("NEW STANTON", "PA"),
  ("NEW STRAITSVILLE", "OH"),
  ("NEW STRAWN", "KS"),
  ("NEW STUYAHOK", "AK"),
  ("NEW SUFFOLK", "NY"),
  ("NEW SUMMERFIELD", "TX"),
  ("NEW TAZEWELL", "TN"),
  ("NEW TERRITORY", "TX"),
  ("NEW TOWN", "ND"),
  ("NEW TRENTON", "IN"),
  ("NEW TRIER", "MN"),
  ("NEW TRIPOLI", "PA"),
  ("NEW TROY", "MI"),
  ("NEW ULM", "MN"),
  ("NEW UNDERWOOD", "SD"),
  ("NEW UNION", "AL"),
  ("NEW UNION", "TN"),
  ("NEW VIENNA", "OH"),
  ("NEW VIENNA", "IA"),
  ("NEW VILLAGE", "NJ"),
  ("NEW VIRGINIA", "IA"),
  ("NEW WASHINGTON", "IN"),
  ("NEW WASHINGTON", "PA"),
  ("NEW WASHINGTON", "OH"),
  ("NEW WATERFORD", "OH"),
  ("NEW WAVERLY", "TX"),
  ("NEW WESTON", "OH"),
  ("NEW WHITELAND", "IN"),
  ("NEW WILMINGTON", "PA"),
  ("NEW WINDSOR", "NY"),
  ("NEW WINDSOR", "MD"),
  ("NEW WITTEN", "SD"),
  ("NEW WOODVILLE", "OK"),
  ("NEW YORK", "NY"),
  ("NEW YORK CITY", "NY"),
  ("NEW YORK MILLS", "MN"),
  ("NEW YORK MILLS", "NY"),
  ("NEWALD", "WI"),
  ("NEWARK", "NJ"),
  ("NEWARK", "OH"),
  ("NEWARK", "CA"),
  ("NEWARK", "MD"),
  ("NEWARK", "DE"),
  ("NEWARK", "NY"),
  ("NEWARK", "AR"),
  ("NEWARK", "IL"),
  ("NEWARK", "TX"),
  ("NEWARK", "MO"),
  ("NEWARK VALLEY", "NY"),
  ("NEWAYGO", "MI"),
  ("NEWBERG", "OR"),
  ("NEWBERN", "TN"),
  ("NEWBERN", "AL"),
  ("NEWBERRY", "FL"),
  ("NEWBERRY", "SC"),
  ("NEWBERRY", "MI"),
  ("NEWBERRY", "IN"),
  ("NEWBORN", "GA"),
  ("NEWBURG", "PA"),
  ("NEWBURG", "WI"),
  ("NEWBURG", "WV"),
  ("NEWBURG", "MO"),
  ("NEWBURG", "PA"),
  ("NEWBURG", "ND"),
  ("NEWBURGH", "NY"),
  ("NEWBURGH", "IN"),
  ("NEWBURGH HEIGHTS", "OH"),
  ("NEWBURY", "VT"),
  ("NEWBURYPORT", "MA"),
  ("NEWCASTLE", "OK"),
  ("NEWCASTLE", "WA"),
  ("NEWCASTLE", "UT"),
  ("NEWCASTLE", "WY"),
  ("NEWCASTLE", "CA"),
  ("NEWCASTLE", "ME"),
  ("NEWCASTLE", "TX"),
  ("NEWCASTLE", "NE"),
  ("NEWCOMB", "NM"),
  ("NEWCOMERSTOWN", "OH"),
  ("NEWDALE", "ID"),
  ("NEWELL", "CA"),
  ("NEWELL", "IA"),
  ("NEWELL", "SD"),
  ("NEWELL", "WV"),
  ("NEWELL", "PA"),
  ("NEWELLTON", "LA"),
  ("NEWFANE", "NY"),
  ("NEWFANE", "VT"),
  ("NEWFIELD", "NJ"),
  ("NEWFIELD HAMLET", "NY"),
  ("NEWFIELDS", "NH"),
  ("NEWFOLDEN", "MN"),
  ("NEWHALEN", "AK"),
  ("NEWHALL", "IA"),
  ("NEWINGTON", "CT"),
  ("NEWINGTON", "VA"),
  ("NEWINGTON", "GA"),
  ("NEWINGTON FOREST", "VA"),
  ("NEWKIRK", "OK"),
  ("NEWKIRK", "NM"),
  ("NEWLAND", "NC"),
  ("NEWMAN", "CA"),
  ("NEWMAN", "IL"),
  ("NEWMAN GROVE", "NE"),
  ("NEWMANSTOWN", "PA"),
  ("NEWMARKET", "NH"),
  ("NEWNAN", "GA"),
  ("NEWPORT", "AR"),
  ("NEWPORT", "NH"),
  ("NEWPORT", "OR"),
  ("NEWPORT", "SC"),
  ("NEWPORT", "RI"),
  ("NEWPORT", "NC"),
  ("NEWPORT", "VT"),
  ("NEWPORT", "TN"),
  ("NEWPORT", "MN"),
  ("NEWPORT", "ME"),
  ("NEWPORT", "KY"),
  ("NEWPORT", "OH"),
  ("NEWPORT", "WA"),
  ("NEWPORT", "IN"),
  ("NEWPORT", "NY"),
  ("NEWPORT", "DE"),
  ("NEWPORT", "OH"),
  ("NEWPORT", "NE"),
  ("NEWPORT", "PA"),
  ("NEWPORT BEACH", "CA"),
  ("NEWPORT CENTER", "VT"),
  ("NEWPORT EAST", "RI"),
  ("NEWPORT NEWS", "VA"),
  ("NEWRY", "SC"),
  ("NEWRY", "PA"),
  ("NEWSOMS", "VA"),
  ("NEWTOK", "AK"),
  ("NEWTON", "MA"),
  ("NEWTON", "AL"),
  ("NEWTON", "NC"),
  ("NEWTON", "KS"),
  ("NEWTON", "IA"),
  ("NEWTON", "MS"),
  ("NEWTON", "TX"),
  ("NEWTON", "NJ"),
  ("NEWTON", "GA"),
  ("NEWTON", "IL"),
  ("NEWTON", "UT"),
  ("NEWTON FALLS", "OH"),
  ("NEWTON GROVE", "NC"),
  ("NEWTON HAMILTON", "PA"),
  ("NEWTONIA", "MO"),
  ("NEWTONSVILLE", "OH"),
  ("NEWTOWN", "CT"),
  ("NEWTOWN", "OH"),
  ("NEWTOWN", "PA"),
  ("NEWTOWN", "PA"),
  ("NEWTOWN", "IN"),
  ("NEWTOWN", "MO"),
  ("NEWTOWN GRANT", "PA"),
  ("NEWVILLE", "AL"),
  ("NEWVILLE", "PA"),
  ("NEY", "OH"),
  ("NEYLANDVILLE", "TX"),
  ("NEZPERCE", "ID"),
  ("NIAGARA", "WI"),
  ("NIAGARA", "ND"),
  ("NIAGARA FALLS", "NY"),
  ("NIANGUA", "MO"),
  ("NIANTIC", "CT"),
  ("NIANTIC", "IL"),
  ("NIARADA", "MT"),
  ("NIBLEY", "UT"),
  ("NICASIO", "CA"),
  ("NICE", "CA"),
  ("NICEVILLE", "FL"),
  ("NICHOLASVILLE", "KY"),
  ("NICHOLLS", "GA"),
  ("NICHOLS", "SC"),
  ("NICHOLS", "WI"),
  ("NICHOLS", "NY"),
  ("NICHOLS", "IA"),
  ("NICHOLS HILLS", "OK"),
  ("NICHOLSON", "MS"),
  ("NICHOLSON", "GA"),
  ("NICHOLSON", "PA"),
  ("NICKELSVILLE", "VA"),
  ("NICKERSON", "KS"),
  ("NICKERSON", "NE"),
  ("NICOLAUS", "CA"),
  ("NICOLLET", "MN"),
  ("NICOMA PARK", "OK"),
  ("NICUT", "OK"),
  ("NIEDERWALD", "TX"),
  ("NIELSVILLE", "MN"),
  ("NIGHTMUTE", "AK"),
  ("NIKEP", "MD"),
  ("NIKISKI", "AK"),
  ("NIKOLAEVSK", "AK"),
  ("NIKOLAI", "AK"),
  ("NIKOLSKI", "AK"),
  ("NILAND", "CA"),
  ("NILE", "WA"),
  ("NILES", "OH"),
  ("NILES", "IL"),
  ("NILES", "MI"),
  ("NILWOOD", "IL"),
  ("NIMMONS", "AR"),
  ("NIMROD", "MN"),
  ("NINA", "TX"),
  ("NINETY SIX", "SC"),
  ("NINILCHIK", "AK"),
  ("NINNEKAH", "OK"),
  ("NIOBRARA", "NE"),
  ("NIOTA", "TN"),
  ("NIOTAZE", "KS"),
  ("NIPINNAWASEE", "CA"),
  ("NIPOMO", "CA"),
  ("NISKAYUNA", "NY"),
  ("NISLAND", "SD"),
  ("NISQUALLY INDIAN COMMUNITY", "WA"),
  ("NISSEQUOGUE", "NY"),
  ("NISSWA", "MN"),
  ("NITRO", "WV"),
  ("NITTANY", "PA"),
  ("NIVERVILLE", "NY"),
  ("NIWOT", "CO"),
  ("NIXA", "MO"),
  ("NIXON", "NV"),
  ("NIXON", "PA"),
  ("NIXON", "TX"),
  ("NO NAME", "CO"),
  ("NOANK", "CT"),
  ("NOATAK", "AK"),
  ("NOBLE", "OK"),
  ("NOBLE", "LA"),
  ("NOBLE", "IL"),
  ("NOBLESTOWN", "PA"),
  ("NOBLESVILLE", "IN"),
  ("NOBLETON", "FL"),
  ("NOCATEE", "FL"),
  ("NOCONA", "TX"),
  ("NOCONA HILLS", "TX"),
  ("NODAWAY", "IA"),
  ("NOEL", "MO"),
  ("NOGAL", "NM"),
  ("NOGALES", "AZ"),
  ("NOKESVILLE", "VA"),
  ("NOKOMIS", "FL"),
  ("NOKOMIS", "IL"),
  ("NOLANVILLE", "TX"),
  ("NOLENSVILLE", "TN"),
  ("NOLIC", "AZ"),
  ("NOMA", "FL"),
  ("NOME", "AK"),
  ("NOME", "TX"),
  ("NOME", "ND"),
  ("NONDALTON", "AK"),
  ("NOOKSACK", "WA"),
  ("NOONAN", "ND"),
  ("NOONDAY", "TX"),
  ("NOORVIK", "AK"),
  ("NORA", "IL"),
  ("NORA", "NE"),
  ("NORA SPRINGS", "IA"),
  ("NORBORNE", "MO"),
  ("NORBOURNE ESTATES", "KY"),
  ("NORCATUR", "KS"),
  ("NORCO", "CA"),
  ("NORCO", "LA"),
  ("NORCROSS", "GA"),
  ("NORCROSS", "MN"),
  ("NORD", "CA"),
  ("NORDHEIM", "TX"),
  ("NORDIC", "WY"),
  ("NORFOLK", "VA"),
  ("NORFOLK", "NE"),
  ("NORFOLK", "NY"),
  ("NORFOLK", "CT"),
  ("NORFORK", "AR"),
  ("NORGE", "OK"),
  ("NORLINA", "NC"),
  ("NORMAL", "IL"),
  ("NORMAN", "OK"),
  ("NORMAN", "AR"),
  ("NORMAN", "NC"),
  ("NORMAN", "NE"),
  ("NORMAN PARK", "GA"),
  ("NORMANDY", "MO"),
  ("NORMANDY", "TN"),
  ("NORMANDY PARK", "WA"),
  ("NORMANGEE", "TX"),
  ("NORMANNA", "TX"),
  ("NORPHLET", "AR"),
  ("NORRIDGE", "IL"),
  ("NORRIDGEWOCK", "ME"),
  ("NORRIE", "CO"),
  ("NORRIS", "TN"),
  ("NORRIS", "SC"),
  ("NORRIS", "SD"),
  ("NORRIS", "IL"),
  ("NORRIS CANYON", "CA"),
  ("NORRIS CITY", "IL"),
  ("NORRISTOWN", "PA"),
  ("NORRISTOWN", "GA"),
  ("NORTH ACOMITA VILLAGE", "NM"),
  ("NORTH ADAMS", "MA"),
  ("NORTH ADAMS", "MI"),
  ("NORTH ALAMO", "TX"),
  ("NORTH AMHERST", "MA"),
  ("NORTH AMITYVILLE", "NY"),
  ("NORTH APOLLO", "PA"),
  ("NORTH ARLINGTON", "NJ"),
  ("NORTH ATLANTA", "GA"),
  ("NORTH AUBURN", "CA"),
  ("NORTH AUGUSTA", "SC"),
  ("NORTH AURORA", "IL"),
  ("NORTH BABYLON", "NY"),
  ("NORTH BALLSTON SPA", "NY"),
  ("NORTH BALTIMORE", "OH"),
  ("NORTH BARRINGTON", "IL"),
  ("NORTH BAY", "WI"),
  ("NORTH BAY SHORE", "NY"),
  ("NORTH BAY VILLAGE", "FL"),
  ("NORTH BEACH", "MD"),
  ("NORTH BEACH HAVEN", "NJ"),
  ("NORTH BELLE VERNON", "PA"),
  ("NORTH BELLMORE", "NY"),
  ("NORTH BELLPORT", "NY"),
  ("NORTH BEND", "WA"),
  ("NORTH BEND", "OR"),
  ("NORTH BEND", "OH"),
  ("NORTH BEND", "NE"),
  ("NORTH BENNINGTON", "VT"),
  ("NORTH BERWICK", "ME"),
  ("NORTH BETHESDA", "MD"),
  ("NORTH BONNEVILLE", "WA"),
  ("NORTH BOSTON", "NY"),
  ("NORTH BRADDOCK", "PA"),
  ("NORTH BRANCH", "MN"),
  ("NORTH BRANCH", "MI"),
  ("NORTH BRENTWOOD", "MD"),
  ("NORTH BROOKFIELD", "MA"),
  ("NORTH BROOKSVILLE", "FL"),
  ("NORTH BROWNING", "MT"),
  ("NORTH BUENA VISTA", "IA"),
  ("NORTH CALDWELL", "NJ"),
  ("NORTH CANTON", "OH"),
  ("NORTH CAPE MAY", "NJ"),
  ("NORTH CARROLLTON", "MS"),
  ("NORTH CATASAUQUA", "PA"),
  ("NORTH CHARLEROI", "PA"),
  ("NORTH CHARLESTON", "SC"),
  ("NORTH CHEVY CHASE", "MD"),
  ("NORTH CHICAGO", "IL"),
  ("NORTH CITY", "IL"),
  ("NORTH CLEVELAND", "TX"),
  ("NORTH COLLEGE HILL", "OH"),
  ("NORTH COLLINS", "NY"),
  ("NORTH CONWAY", "NH"),
  ("NORTH CORBIN", "KY"),
  ("NORTH COURTLAND", "AL"),
  ("NORTH CREEK", "NY"),
  ("NORTH CROSSETT", "AR"),
  ("NORTH CROWS NEST", "IN"),
  ("NORTH DECATUR", "GA"),
  ("NORTH DELAND", "FL"),
  ("NORTH DRUID HILLS", "GA"),
  ("NORTH EAGLE BUTTE", "SD"),
  ("NORTH EAST", "MD"),
  ("NORTH EAST", "PA"),
  ("NORTH EASTHAM", "MA"),
  ("NORTH EDWARDS", "CA"),
  ("NORTH EL MONTE", "CA"),
  ("NORTH ENGLISH", "IA"),
  ("NORTH ENID", "OK"),
  ("NORTH ESCOBARES", "TX"),
  ("NORTH FAIR OAKS", "CA"),
  ("NORTH FAIRFIELD", "OH"),
  ("NORTH FALMOUTH", "MA"),
  ("NORTH FOND DU LAC", "WI"),
  ("NORTH FORK", "AZ"),
  ("NORTH FORT LEWIS", "WA"),
  ("NORTH FORT MYERS", "FL"),
  ("NORTH FREEDOM", "WI"),
  ("NORTH GATE", "CA"),
  ("NORTH GATES", "NY"),
  ("NORTH GRANBY", "CT"),
  ("NORTH GREAT RIVER", "NY"),
  ("NORTH GROSVENOR DALE", "CT"),
  ("NORTH HALEDON", "NJ"),
  ("NORTH HAMPTON", "OH"),
  ("NORTH HARTLAND", "VT"),
  ("NORTH HARTSVILLE", "SC"),
  ("NORTH HAVEN", "CT"),
  ("NORTH HAVEN", "NY"),
  ("NORTH HENDERSON", "IL"),
  ("NORTH HIGH SHOALS", "GA"),
  ("NORTH HIGHLANDS", "CA"),
  ("NORTH HILLS", "NY"),
  ("NORTH HILLS", "WV"),
  ("NORTH HOBBS", "NM"),
  ("NORTH HODGE", "LA"),
  ("NORTH HORNELL", "NY"),
  ("NORTH HUDSON", "WI"),
  ("NORTH HURLEY", "NM"),
  ("NORTH IRWIN", "PA"),
  ("NORTH JOHNS", "AL"),
  ("NORTH JUDSON", "IN"),
  ("NORTH KANSAS CITY", "MO"),
  ("NORTH KENSINGTON", "MD"),
  ("NORTH KEY LARGO", "FL"),
  ("NORTH KINGSVILLE", "OH"),
  ("NORTH LA JUNTA", "CO"),
  ("NORTH LAKEPORT", "CA"),
  ("NORTH LAKEVILLE", "MA"),
  ("NORTH LAS VEGAS", "NV"),
  ("NORTH LAUDERDALE", "FL"),
  ("NORTH LAUREL", "MD"),
  ("NORTH LAWRENCE", "OH"),
  ("NORTH LEWISBURG", "OH"),
  ("NORTH LIBERTY", "IA"),
  ("NORTH LIBERTY", "IN"),
  ("NORTH LIGHT PLANT", "NM"),
  ("NORTH LILBOURN", "MO"),
  ("NORTH LINDENHURST", "NY"),
  ("NORTH LITTLE ROCK", "AR"),
  ("NORTH LOGAN", "UT"),
  ("NORTH LOUP", "NE"),
  ("NORTH LYNBROOK", "NY"),
  ("NORTH LYNNWOOD", "WA"),
  ("NORTH MADISON", "OH"),
  ("NORTH MANCHESTER", "IN"),
  ("NORTH MANKATO", "MN"),
  ("NORTH MARYSVILLE", "WA"),
  ("NORTH MASSAPEQUA", "NY"),
  ("NORTH MERRICK", "NY"),
  ("NORTH MIAMI", "FL"),
  ("NORTH MIAMI", "OK"),
  ("NORTH MIAMI BEACH", "FL"),
  ("NORTH MIDDLETOWN", "NJ"),
  ("NORTH MIDDLETOWN", "KY"),
  ("NORTH MUSKEGON", "MI"),
  ("NORTH MYRTLE BEACH", "SC"),
  ("NORTH NEW HYDE PARK", "NY"),
  ("NORTH NEWTON", "KS"),
  ("NORTH OAKS", "MN"),
  ("NORTH OGDEN", "UT"),
  ("NORTH OLMSTED", "OH"),
  ("NORTH OMAK", "WA"),
  ("NORTH PALM BEACH", "FL"),
  ("NORTH PATCHOGUE", "NY"),
  ("NORTH PEARSALL", "TX"),
  ("NORTH PEKIN", "IL"),
  ("NORTH PEMBROKE", "MA"),
  ("NORTH PERRY", "OH"),
  ("NORTH PHILIPSBURG", "PA"),
  ("NORTH PLAINFIELD", "NJ"),
  ("NORTH PLAINS", "OR"),
  ("NORTH PLATTE", "NE"),
  ("NORTH PLYMOUTH", "MA"),
  ("NORTH POLE", "AK"),
  ("NORTH PORT", "FL"),
  ("NORTH POTOMAC", "MD"),
  ("NORTH POWDER", "OR"),
  ("NORTH PRAIRIE", "WI"),
  ("NORTH PUYALLUP", "WA"),
  ("NORTH RANDALL", "OH"),
  ("NORTH REDINGTON BEACH", "FL"),
  ("NORTH RICHLAND HILLS", "TX"),
  ("NORTH RICHMOND", "CA"),
  ("NORTH RIDGEVILLE", "OH"),
  ("NORTH RIVER", "ND"),
  ("NORTH RIVER SHORES", "FL"),
  ("NORTH RIVERSIDE", "IL"),
  ("NORTH ROBINSON", "OH"),
  ("NORTH ROCK SPRINGS", "WY"),
  ("NORTH ROSE", "NY"),
  ("NORTH ROYALTON", "OH"),
  ("NORTH SALEM", "IN"),
  ("NORTH SALT LAKE", "UT"),
  ("NORTH SAN JUAN", "CA"),
  ("NORTH SAN PEDRO", "TX"),
  ("NORTH SAN YSIDRO", "NM"),
  ("NORTH SARASOTA", "FL"),
  ("NORTH SCITUATE", "MA"),
  ("NORTH SEA", "NY"),
  ("NORTH SEEKONK", "MA"),
  ("NORTH SHORE", "VA"),
  ("NORTH SHORE", "CA"),
  ("NORTH SIOUX CITY", "SD"),
  ("NORTH SPEARFISH", "SD"),
  ("NORTH SPRINGFIELD", "VA"),
  ("NORTH SPRINGFIELD", "VT"),
  ("NORTH ST. PAUL", "MN"),
  ("NORTH STAR", "DE"),
  ("NORTH STAR", "OH"),
  ("NORTH SULTAN", "WA"),
  ("NORTH SYRACUSE", "NY"),
  ("NORTH TERRE HAUTE", "IN"),
  ("NORTH TONAWANDA", "NY"),
  ("NORTH TOPSAIL BEACH", "NC"),
  ("NORTH TROY", "VT"),
  ("NORTH TUNICA", "MS"),
  ("NORTH TUSTIN", "CA"),
  ("NORTH UTICA", "IL"),
  ("NORTH VACHERIE", "LA"),
  ("NORTH VALLEY", "NM"),
  ("NORTH VALLEY STREAM", "NY"),
  ("NORTH VANDERGRIFT", "PA"),
  ("NORTH VERNON", "IN"),
  ("NORTH WALES", "PA"),
  ("NORTH WALPOLE", "NH"),
  ("NORTH WANTAGH", "NY"),
  ("NORTH WARREN", "PA"),
  ("NORTH WASHINGTON", "CO"),
  ("NORTH WASHINGTON", "IA"),
  ("NORTH WEBSTER", "IN"),
  ("NORTH WEEKI WACHEE", "FL"),
  ("NORTH WESTMINSTER", "VT"),
  ("NORTH WESTPORT", "MA"),
  ("NORTH WILDWOOD", "NJ"),
  ("NORTH WILKESBORO", "NC"),
  ("NORTH WINDHAM", "ME"),
  ("NORTH WOODSTOCK", "NH"),
  ("NORTH YELM", "WA"),
  ("NORTH YORK", "PA"),
  ("NORTH ZANESVILLE", "OH"),
  ("NORTHAMPTON", "MA"),
  ("NORTHAMPTON", "NY"),
  ("NORTHAMPTON", "PA"),
  ("NORTHBORO", "IA"),
  ("NORTHBOROUGH", "MA"),
  ("NORTHBROOK", "IL"),
  ("NORTHBROOK", "OH"),
  ("NORTHCHASE", "NC"),
  ("NORTHDALE", "FL"),
  ("NORTHEAST ITHACA", "NY"),
  ("NORTHERN CAMBRIA", "PA"),
  ("NORTHFIELD", "MN"),
  ("NORTHFIELD", "MA"),
  ("NORTHFIELD", "NJ"),
  ("NORTHFIELD", "IL"),
  ("NORTHFIELD", "VT"),
  ("NORTHFIELD", "OH"),
  ("NORTHFIELD", "KY"),
  ("NORTHFORK", "WV"),
  ("NORTHGATE", "OH"),
  ("NORTHGLENN", "CO"),
  ("NORTHLAKE", "TX"),
  ("NORTHLAKE", "SC"),
  ("NORTHLAKE", "IL"),
  ("NORTHLAKES", "NC"),
  ("NORTHMOOR", "MO"),
  ("NORTHOME", "MN"),
  ("NORTHPORT", "AL"),
  ("NORTHPORT", "NY"),
  ("NORTHPORT", "WI"),
  ("NORTHPORT", "MI"),
  ("NORTHPORT", "WA"),
  ("NORTHRIDGE", "OH"),
  ("NORTHRIDGE", "TX"),
  ("NORTHROP", "MN"),
  ("NORTHUMBERLAND", "PA"),
  ("NORTHVALE", "NJ"),
  ("NORTHVIEW", "MI"),
  ("NORTHVILLE", "NY"),
  ("NORTHVILLE", "MI"),
  ("NORTHVILLE", "NY"),
  ("NORTHVILLE", "SD"),
  ("NORTHWAY", "AK"),
  ("NORTHWAY JUNCTION", "AK"),
  ("NORTHWAY VILLAGE", "AK"),
  ("NORTHWEST", "NC"),
  ("NORTHWEST HARBOR", "NY"),
  ("NORTHWEST HARBORCREEK", "PA"),
  ("NORTHWEST HARWICH", "MA"),
  ("NORTHWEST HARWINTON", "CT"),
  ("NORTHWEST ITHACA", "NY"),
  ("NORTHWEST STANWOOD", "WA"),
  ("NORTHWOOD", "OH"),
  ("NORTHWOOD", "IA"),
  ("NORTHWOOD", "ND"),
  ("NORTHWOOD", "PA"),
  ("NORTHWOODS", "MO"),
  ("NORTON", "OH"),
  ("NORTON", "VA"),
  ("NORTON", "KS"),
  ("NORTON CENTER", "MA"),
  ("NORTON SHORES", "MI"),
  ("NORTONVILLE", "KY"),
  ("NORTONVILLE", "KS"),
  ("NORVELT", "PA"),
  ("NORWALK", "CT"),
  ("NORWALK", "IA"),
  ("NORWALK", "CA"),
  ("NORWALK", "OH"),
  ("NORWALK", "WI"),
  ("NORWAY", "MI"),
  ("NORWAY", "ME"),
  ("NORWAY", "IN"),
  ("NORWAY", "SC"),
  ("NORWAY", "IA"),
  ("NORWICH", "CT"),
  ("NORWICH", "NY"),
  ("NORWICH", "VT"),
  ("NORWICH", "KS"),
  ("NORWICH", "OH"),
  ("NORWOOD", "MA"),
  ("NORWOOD", "NC"),
  ("NORWOOD", "LA"),
  ("NORWOOD", "OH"),
  ("NORWOOD", "NJ"),
  ("NORWOOD", "NY"),
  ("NORWOOD", "MI"),
  ("NORWOOD", "MO"),
  ("NORWOOD", "GA"),
  ("NORWOOD", "PA"),
  ("NORWOOD", "CO"),
  ("NORWOOD", "IL"),
  ("NORWOOD", "KY"),
  ("NORWOOD COURT", "MO"),
  ("NORWOOD YOUNG AMERICA", "MN"),
  ("NOTASULGA", "AL"),
  ("NOTCHIETOWN", "OK"),
  ("NOTRE DAME", "IN"),
  ("NOTTOWAY COURT HOUSE", "VA"),
  ("NOTUS", "ID"),
  ("NOVATO", "CA"),
  ("NOVELTY", "MO"),
  ("NOVI", "MI"),
  ("NOVICE", "TX"),
  ("NOVINGER", "MO"),
  ("NOWATA", "OK"),
  ("NOWTHEN", "MN"),
  ("NOXAPATER", "MS"),
  ("NOXEN", "PA"),
  ("NOXON", "MT"),
  ("NOYACK", "NY"),
  ("NUANGOLA", "PA"),
  ("NUBIEBER", "CA"),
  ("NUCLA", "CO"),
  ("NUEVO", "CA"),
  ("NUIQSUT", "AK"),
  ("NULATO", "AK"),
  ("NUMA", "IA"),
  ("NUMIDIA", "PA"),
  ("NUNAM IQUA", "AK"),
  ("NUNAPITCHUK", "AK"),
  ("NUNDA", "SD"),
  ("NUNDA", "NY"),
  ("NUNEZ", "GA"),
  ("NUNN", "CO"),
  ("NUREMBERG", "PA"),
  ("NUTRIOSO", "AZ"),
  ("NUTTER FORT", "WV"),
  ("NYACK", "NY"),
  ("NYSSA", "OR"),
  ("OACOMA", "SD"),
  ("OAK", "NE"),
  ("OAK BEACH-CAPTREE", "NY"),
  ("OAK BROOK", "IL"),
  ("OAK CITY", "UT"),
  ("OAK CITY", "NC"),
  ("OAK CREEK", "WI"),
  ("OAK CREEK", "CO"),
  ("OAK FOREST", "IL"),
  ("OAK GLEN", "CA"),
  ("OAK GROVE", "MN"),
  ("OAK GROVE", "KY"),
  ("OAK GROVE", "SC"),
  ("OAK GROVE", "MO"),
  ("OAK GROVE", "TN"),
  ("OAK GROVE", "OR"),
  ("OAK GROVE", "AR"),
  ("OAK GROVE", "TX"),
  ("OAK GROVE", "AL"),
  ("OAK GROVE", "LA"),
  ("OAK GROVE", "TN"),
  ("OAK GROVE", "VA"),
  ("OAK GROVE", "IL"),
  ("OAK GROVE", "OK"),
  ("OAK GROVE HEIGHTS", "AR"),
  ("OAK GROVE VILLAGE", "MO"),
  ("OAK HALL", "VA"),
  ("OAK HARBOR", "WA"),
  ("OAK HARBOR", "OH"),
  ("OAK HILL", "TN"),
  ("OAK HILL", "FL"),
  ("OAK HILL", "WV"),
  ("OAK HILL", "OH"),
  ("OAK HILL", "AL"),
  ("OAK HILL", "MI"),
  ("OAK HILL", "KS"),
  ("OAK HILLS", "CA"),
  ("OAK HILLS", "PA"),
  ("OAK HILLS", "OR"),
  ("OAK HILLS PLACE", "LA"),
  ("OAK ISLAND", "NC"),
  ("OAK ISLAND", "TX"),
  ("OAK LAWN", "IL"),
  ("OAK LEAF", "TX"),
  ("OAK LEVEL", "VA"),
  ("OAK PARK", "GA"),
  ("OAK PARK", "CA"),
  ("OAK PARK", "MI"),
  ("OAK PARK", "IL"),
  ("OAK PARK HEIGHTS", "MN"),
  ("OAK POINT", "TX"),
  ("OAK RIDGE", "TN"),
  ("OAK RIDGE", "NC"),
  ("OAK RIDGE", "TX"),
  ("OAK RIDGE", "FL"),
  ("OAK RIDGE", "LA"),
  ("OAK RIDGE", "MO"),
  ("OAK RIDGE", "TX"),
  ("OAK RIDGE NORTH", "TX"),
  ("OAK RUN", "IL"),
  ("OAK SHORES", "CA"),
  ("OAK SPRINGS", "AZ"),
  ("OAK TRAIL SHORES", "TX"),
  ("OAK VALLEY", "TX"),
  ("OAK VALLEY", "NJ"),
  ("OAK VIEW", "CA"),
  ("OAKBORO", "NC"),
  ("OAKBROOK", "KY"),
  ("OAKBROOK TERRACE", "IL"),
  ("OAKDALE", "MN"),
  ("OAKDALE", "CA"),
  ("OAKDALE", "LA"),
  ("OAKDALE", "NY"),
  ("OAKDALE", "IL"),
  ("OAKDALE", "WI"),
  ("OAKDALE", "TN"),
  ("OAKDALE", "NE"),
  ("OAKDALE", "PA"),
  ("OAKES", "ND"),
  ("OAKESDALE", "WA"),
  ("OAKFIELD", "WI"),
  ("OAKFIELD", "NY"),
  ("OAKFORD", "IL"),
  ("OAKHAVEN", "AR"),
  ("OAKHURST", "CA"),
  ("OAKHURST", "OK"),
  ("OAKHURST", "NJ"),
  ("OAKHURST", "TX"),
  ("OAKLAND", "CA"),
  ("OAKLAND", "TN"),
  ("OAKLAND", "NJ"),
  ("OAKLAND", "ME"),
  ("OAKLAND", "MD"),
  ("OAKLAND", "FL"),
  ("OAKLAND", "IA"),
  ("OAKLAND", "PA"),
  ("OAKLAND", "KY"),
  ("OAKLAND", "MS"),
  ("OAKLAND", "OK"),
  ("OAKLAND", "NE"),
  ("OAKLAND", "PA"),
  ("OAKLAND", "IL"),
  ("OAKLAND", "OR"),
  ("OAKLAND", "SC"),
  ("OAKLAND", "MO"),
  ("OAKLAND", "PA"),
  ("OAKLAND ACRES", "IA"),
  ("OAKLAND CITY", "IN"),
  ("OAKLAND PARK", "FL"),
  ("OAKLAWN-SUNVIEW", "KS"),
  ("OAKLEAF PLANTATION", "FL"),
  ("OAKLEY", "CA"),
  ("OAKLEY", "UT"),
  ("OAKLEY", "ID"),
  ("OAKLEY", "KS"),
  ("OAKLEY", "MI"),
  ("OAKLEY", "WY"),
  ("OAKLYN", "NJ"),
  ("OAKMAN", "AL"),
  ("OAKMONT", "PA"),
  ("OAKPORT", "MN"),
  ("OAKRIDGE", "OR"),
  ("OAKS", "OK"),
  ("OAKS", "MO"),
  ("OAKTON", "VA"),
  ("OAKTOWN", "IN"),
  ("OAKVALE", "WV"),
  ("OAKVIEW", "MO"),
  ("OAKVILLE", "MO"),
  ("OAKVILLE", "CT"),
  ("OAKVILLE", "CA"),
  ("OAKVILLE", "WA"),
  ("OAKVILLE", "IA"),
  ("OAKWOOD", "GA"),
  ("OAKWOOD", "OH"),
  ("OAKWOOD", "PA"),
  ("OAKWOOD", "OH"),
  ("OAKWOOD", "TX"),
  ("OAKWOOD", "IL"),
  ("OAKWOOD", "OH"),
  ("OAKWOOD", "OK"),
  ("OAKWOOD", "MO"),
  ("OAKWOOD HILLS", "IL"),
  ("OAKWOOD PARK", "MO"),
  ("OASIS", "CA"),
  ("OASIS", "NM"),
  ("OASIS", "NV"),
  ("OASIS", "UT"),
  ("OATFIELD", "OR"),
  ("OATMAN", "AZ"),
  ("OBERLIN", "OH"),
  ("OBERLIN", "LA"),
  ("OBERLIN", "KS"),
  ("OBERLIN", "PA"),
  ("OBERON", "ND"),
  ("OBERT", "NE"),
  ("OBETZ", "OH"),
  ("OBION", "TN"),
  ("OBLONG", "IL"),
  ("O'BRIEN", "OR"),
  ("O'BRIEN", "TX"),
  ("OCALA", "FL"),
  ("OCCIDENTAL", "CA"),
  ("OCCOQUAN", "VA"),
  ("OCEAN", "MD"),
  ("OCEAN ACRES", "NJ"),
  ("OCEAN BEACH", "NY"),
  ("OCEAN BLUFF-BRANT ROCK", "MA"),
  ("OCEAN BREEZE PARK", "FL"),
  ("OCEAN CITY", "NJ"),
  ("OCEAN CITY", "MD"),
  ("OCEAN CITY", "WA"),
  ("OCEAN CITY", "FL"),
  ("OCEAN GATE", "NJ"),
  ("OCEAN GROVE", "MA"),
  ("OCEAN GROVE", "NJ"),
  ("OCEAN ISLE BEACH", "NC"),
  ("OCEAN PARK", "WA"),
  ("OCEAN PINES", "MD"),
  ("OCEAN POINTE", "HI"),
  ("OCEAN RIDGE", "FL"),
  ("OCEAN SHORES", "WA"),
  ("OCEAN SPRINGS", "MS"),
  ("OCEAN VIEW", "DE"),
  ("OCEANA", "WV"),
  ("OCEANO", "CA"),
  ("OCEANPORT", "NJ"),
  ("OCEANSIDE", "CA"),
  ("OCEANSIDE", "NY"),
  ("OCEANSIDE", "OR"),
  ("OCEOLA", "OH"),
  ("OCHELATA", "OK"),
  ("OCHEYEDAN", "IA"),
  ("OCHLOCKNEE", "GA"),
  ("OCILLA", "GA"),
  ("OCOEE", "FL"),
  ("OCONEE", "GA"),
  ("OCONEE", "IL"),
  ("OCONOMOWOC", "WI"),
  ("OCONOMOWOC LAKE", "WI"),
  ("OCONTO", "WI"),
  ("OCONTO", "NE"),
  ("OCONTO FALLS", "WI"),
  ("OCOTILLO", "CA"),
  ("OCRACOKE", "NC"),
  ("OCTA", "OH"),
  ("OCTAVIA", "NE"),
  ("ODANAH", "WI"),
  ("ODEBOLT", "IA"),
  ("ODELL", "OR"),
  ("ODELL", "IL"),
  ("ODELL", "NE"),
  ("ODEM", "TX"),
  ("ODEN", "AR"),
  ("ODEN", "MI"),
  ("ODENTON", "MD"),
  ("ODENVILLE", "AL"),
  ("ODESSA", "TX"),
  ("ODESSA", "FL"),
  ("ODESSA", "MO"),
  ("ODESSA", "NE"),
  ("ODESSA", "NY"),
  ("ODESSA", "WA"),
  ("ODESSA", "MN"),
  ("ODESSA", "DE"),
  ("ODIN", "KS"),
  ("ODIN", "IL"),
  ("ODIN", "MN"),
  ("ODON", "IN"),
  ("O'DONNELL", "TX"),
  ("ODUM", "GA"),
  ("OELRICHS", "SD"),
  ("OELWEIN", "IA"),
  ("O'FALLON", "MO"),
  ("O'FALLON", "IL"),
  ("OFFERLE", "KS"),
  ("OFFERMAN", "GA"),
  ("OFFUTT AFB", "NE"),
  ("OGALLALA", "NE"),
  ("OGDEN", "UT"),
  ("OGDEN", "NC"),
  ("OGDEN", "KS"),
  ("OGDEN", "IA"),
  ("OGDEN", "IL"),
  ("OGDEN", "AR"),
  ("OGDEN DUNES", "IN"),
  ("OGDENSBURG", "NY"),
  ("OGDENSBURG", "NJ"),
  ("OGDENSBURG", "WI"),
  ("OGEMA", "WI"),
  ("OGEMA", "MN"),
  ("OGILVIE", "MN"),
  ("OGLALA", "SD"),
  ("OGLESBY", "IL"),
  ("OGLESBY", "TX"),
  ("OGLETHORPE", "GA"),
  ("OHATCHEE", "AL"),
  ("OHIO CITY", "OH"),
  ("OHIOPYLE", "PA"),
  ("OHIOVILLE", "PA"),
  ("OHIOWA", "NE"),
  ("OHKAY OWINGEH", "NM"),
  ("OHLMAN", "IL"),
  ("OIL CITY", "PA"),
  ("OIL CITY", "LA"),
  ("OIL TROUGH", "AR"),
  ("OILDALE", "CA"),
  ("OILTON", "TX"),
  ("OILTON", "OK"),
  ("OJAI", "CA"),
  ("OJO AMARILLO", "NM"),
  ("OJUS", "FL"),
  ("OKABENA", "MN"),
  ("OKAHUMPKA", "FL"),
  ("OKANOGAN", "WA"),
  ("OKARCHE", "OK"),
  ("OKATON", "SD"),
  ("OKAUCHEE LAKE", "WI"),
  ("OKAWVILLE", "IL"),
  ("OKAY", "OK"),
  ("O'KEAN", "AR"),
  ("OKEECHOBEE", "FL"),
  ("OKEENE", "OK"),
  ("OKEMAH", "OK"),
  ("OKEMOS", "MI"),
  ("OKETO", "KS"),
  ("OKLAHOMA", "PA"),
  ("OKLAHOMA", "PA"),
  ("OKLAHOMA CITY", "OK"),
  ("OKLEE", "MN"),
  ("OKMULGEE", "OK"),
  ("OKOBOJI", "IA"),
  ("OKOLONA", "MS"),
  ("OKOLONA", "AR"),
  ("OKREEK", "SD"),
  ("OKTAHA", "OK"),
  ("OLA", "SD"),
  ("OLA", "AR"),
  ("OLANCHA", "CA"),
  ("OLANTA", "SC"),
  ("OLAR", "SC"),
  ("OLATHE", "KS"),
  ("OLATHE", "CO"),
  ("OLCOTT", "NY"),
  ("OLD AGENCY", "MT"),
  ("OLD APPLETON", "MO"),
  ("OLD BENNINGTON", "VT"),
  ("OLD BETHPAGE", "NY"),
  ("OLD BRIDGE", "NJ"),
  ("OLD BROOKVILLE", "NY"),
  ("OLD BROWNSBORO PLACE", "KY"),
  ("OLD ESCOBARES", "TX"),
  ("OLD EUCHA", "OK"),
  ("OLD FIELD", "NY"),
  ("OLD FIG GARDEN", "CA"),
  ("OLD FORGE", "PA"),
  ("OLD FORGE", "NY"),
  ("OLD FORT", "NC"),
  ("OLD FORT", "OH"),
  ("OLD GREEN", "OK"),
  ("OLD GREENWICH", "CT"),
  ("OLD HARBOR", "AK"),
  ("OLD HUNDRED", "NC"),
  ("OLD JAMESTOWN", "MO"),
  ("OLD JEFFERSON", "LA"),
  ("OLD MILL CREEK", "IL"),
  ("OLD MONROE", "MO"),
  ("OLD MYSTIC", "CT"),
  ("OLD ORCHARD", "PA"),
  ("OLD ORCHARD BEACH", "ME"),
  ("OLD RIPLEY", "IL"),
  ("OLD RIVER-WINFREE", "TX"),
  ("OLD SAYBROOK CENTER", "CT"),
  ("OLD SHAWNEETOWN", "IL"),
  ("OLD STATION", "CA"),
  ("OLD TAPPAN", "NJ"),
  ("OLD TOWN", "ME"),
  ("OLD WASHINGTON", "OH"),
  ("OLD WESTBURY", "NY"),
  ("OLDE WEST CHESTER", "OH"),
  ("OLDENBURG", "IN"),
  ("OLDHAM", "SD"),
  ("OLDS", "IA"),
  ("OLDSMAR", "FL"),
  ("OLDTOWN", "ID"),
  ("OLDTOWN", "MD"),
  ("OLEAN", "NY"),
  ("OLEAN", "MO"),
  ("OLEY", "PA"),
  ("OLGA", "FL"),
  ("OLIMPO", "PR"),
  ("OLIN", "IA"),
  ("OLINDA", "HI"),
  ("OLIVAREZ", "TX"),
  ("OLIVE BRANCH", "MS"),
  ("OLIVE BRANCH", "IL"),
  ("OLIVE HILL", "KY"),
  ("OLIVEHURST", "CA"),
  ("OLIVER", "PA"),
  ("OLIVER", "WI"),
  ("OLIVER", "GA"),
  ("OLIVER SPRINGS", "TN"),
  ("OLIVET", "TN"),
  ("OLIVET", "NJ"),
  ("OLIVET", "IL"),
  ("OLIVET", "MI"),
  ("OLIVET", "KS"),
  ("OLIVET", "SD"),
  ("OLIVETTE", "MO"),
  ("OLIVIA", "MN"),
  ("OLIVIA LOPEZ DE GUTIERREZ", "TX"),
  ("OLJATO-MONUMENT VALLEY", "UT"),
  ("OLJATO-MONUMENT VALLEY", "AZ"),
  ("OLLA", "LA"),
  ("OLLIE", "IA"),
  ("OLMITO", "TX"),
  ("OLMITO AND OLMITO", "TX"),
  ("OLMITZ", "KS"),
  ("OLMOS PARK", "TX"),
  ("OLMSTED", "IL"),
  ("OLMSTED FALLS", "OH"),
  ("OLNEY", "MD"),
  ("OLNEY", "IL"),
  ("OLNEY", "TX"),
  ("OLNEY", "MT"),
  ("OLNEY SPRINGS", "CO"),
  ("OLOWALU", "HI"),
  ("OLPE", "KS"),
  ("OLSBURG", "KS"),
  ("OLTON", "TX"),
  ("OLUSTEE", "OK"),
  ("OLYMPIA", "WA"),
  ("OLYMPIA FIELDS", "IL"),
  ("OLYMPIA HEIGHTS", "FL"),
  ("OLYMPIAN VILLAGE", "MO"),
  ("OLYPHANT", "PA"),
  ("OMAHA", "NE"),
  ("OMAHA", "TX"),
  ("OMAHA", "IL"),
  ("OMAHA", "AR"),
  ("OMAK", "WA"),
  ("OMAO", "HI"),
  ("OMAR", "WV"),
  ("OMEGA", "GA"),
  ("OMENA", "MI"),
  ("OMER", "MI"),
  ("OMRO", "WI"),
  ("ONA", "FL"),
  ("ONAGA", "KS"),
  ("ONAKA", "SD"),
  ("ONALASKA", "WI"),
  ("ONALASKA", "TX"),
  ("ONALASKA", "WA"),
  ("ONAMIA", "MN"),
  ("ONANCOCK", "VA"),
  ("ONARGA", "IL"),
  ("ONAWA", "IA"),
  ("ONAWAY", "MI"),
  ("ONAWAY", "ID"),
  ("ONEIDA", "NY"),
  ("ONEIDA", "TN"),
  ("ONEIDA", "KY"),
  ("ONEIDA", "IL"),
  ("ONEIDA", "KS"),
  ("ONEIDA", "PA"),
  ("ONEIDA CASTLE", "NY"),
  ("O'NEILL", "NE"),
  ("ONEKAMA", "MI"),
  ("ONEONTA", "AL"),
  ("ONEONTA", "NY"),
  ("ONG", "NE"),
  ("ONIDA", "SD"),
  ("ONLEY", "VA"),
  ("ONSET", "MA"),
  ("ONSLOW", "IA"),
  ("ONSTED", "MI"),
  ("ONTARIO", "CA"),
  ("ONTARIO", "OH"),
  ("ONTARIO", "OR"),
  ("ONTARIO", "NY"),
  ("ONTARIO", "WI"),
  ("ONTON", "KY"),
  ("ONTONAGON", "MI"),
  ("ONWARD", "IN"),
  ("ONYCHA", "AL"),
  ("ONYX", "CA"),
  ("OOLITIC", "IN"),
  ("OOLOGAH", "OK"),
  ("OOLTEWAH", "TN"),
  ("OOSTBURG", "WI"),
  ("OPAL", "VA"),
  ("OPAL", "WY"),
  ("OPA-LOCKA", "FL"),
  ("OPDYKE", "IL"),
  ("OPDYKE WEST", "TX"),
  ("OPELIKA", "AL"),
  ("OPELOUSAS", "LA"),
  ("OPHEIM", "MT"),
  ("OPHIR", "CO"),
  ("OPHIR", "UT"),
  ("OPP", "AL"),
  ("OPPELO", "AR"),
  ("OPTIMA", "OK"),
  ("OQUAWKA", "IL"),
  ("ORACLE", "AZ"),
  ("ORADELL", "NJ"),
  ("ORAN", "MO"),
  ("ORANGE", "CA"),
  ("ORANGE", "TX"),
  ("ORANGE", "CT"),
  ("ORANGE", "MA"),
  ("ORANGE", "OH"),
  ("ORANGE", "VA"),
  ("ORANGE BEACH", "AL"),
  ("ORANGE CITY", "FL"),
  ("ORANGE CITY", "IA"),
  ("ORANGE COVE", "CA"),
  ("ORANGE GROVE", "TX"),
  ("ORANGE GROVE MOBILE MANOR", "AZ"),
  ("ORANGE LAKE", "NY"),
  ("ORANGE PARK", "FL"),
  ("ORANGEBURG", "SC"),
  ("ORANGEBURG", "NY"),
  ("ORANGETREE", "FL"),
  ("ORANGEVALE", "CA"),
  ("ORANGEVILLE", "UT"),
  ("ORANGEVILLE", "OH"),
  ("ORANGEVILLE", "IL"),
  ("ORANGEVILLE", "PA"),
  ("ORASON", "TX"),
  ("ORBISONIA", "PA"),
  ("ORCHARD", "NE"),
  ("ORCHARD", "TX"),
  ("ORCHARD", "CO"),
  ("ORCHARD", "IA"),
  ("ORCHARD CITY", "CO"),
  ("ORCHARD GRASS HILLS", "KY"),
  ("ORCHARD HILL", "GA"),
  ("ORCHARD HILLS", "PA"),
  ("ORCHARD HOMES", "MT"),
  ("ORCHARD LAKE VILLAGE", "MI"),
  ("ORCHARD MESA", "CO"),
  ("ORCHARD PARK", "NY"),
  ("ORCHARDS", "WA"),
  ("ORCHID", "FL"),
  ("ORCHIDLANDS ESTATES", "HI"),
  ("ORCUTT", "CA"),
  ("ORD", "NE"),
  ("ORDERVILLE", "UT"),
  ("ORDWAY", "CO"),
  ("ORE CITY", "TX"),
  ("OREANA", "IL"),
  ("OREGON", "OH"),
  ("OREGON", "WI"),
  ("OREGON", "IL"),
  ("OREGON", "MO"),
  ("OREGON CITY", "OR"),
  ("ORELAND", "PA"),
  ("OREM", "UT"),
  ("ORESTES", "IN"),
  ("ORETTA", "LA"),
  ("ORFORDVILLE", "WI"),
  ("ORGAN", "NM"),
  ("ORICK", "CA"),
  ("ORIENT", "NY"),
  ("ORIENT", "IL"),
  ("ORIENT", "IA"),
  ("ORIENT", "WA"),
  ("ORIENT", "SD"),
  ("ORIENT", "OH"),
  ("ORIENTAL", "NC"),
  ("ORIN", "WY"),
  ("ORINDA", "CA"),
  ("ORIOLE BEACH", "FL"),
  ("ORION", "IL"),
  ("ORISKA", "ND"),
  ("ORISKANY", "NY"),
  ("ORISKANY FALLS", "NY"),
  ("ORLAND", "CA"),
  ("ORLAND", "IN"),
  ("ORLAND HILLS", "IL"),
  ("ORLAND PARK", "IL"),
  ("ORLANDO", "FL"),
  ("ORLANDO", "OK"),
  ("ORLEANS", "MA"),
  ("ORLEANS", "IN"),
  ("ORLEANS", "IA"),
  ("ORLEANS", "VT"),
  ("ORLEANS", "NE"),
  ("ORLINDA", "TN"),
  ("ORLOVISTA", "FL"),
  ("ORME", "TN"),
  ("ORMOND BEACH", "FL"),
  ("ORMOND-BY-THE-SEA", "FL"),
  ("ORMSBY", "MN"),
  ("ORO VALLEY", "AZ"),
  ("OROCOVIS", "PR"),
  ("OROFINO", "ID"),
  ("OROGRANDE", "NM"),
  ("ORONO", "MN"),
  ("ORONO", "ME"),
  ("ORONOCO", "MN"),
  ("ORONOGO", "MO"),
  ("OROSI", "CA"),
  ("OROVADA", "NV"),
  ("OROVILLE", "CA"),
  ("OROVILLE", "WA"),
  ("OROVILLE EAST", "CA"),
  ("ORR", "MN"),
  ("ORRICK", "MO"),
  ("ORRIN", "ND"),
  ("ORRSTOWN", "PA"),
  ("ORRTANNA", "PA"),
  ("ORRUM", "NC"),
  ("ORRVILLE", "OH"),
  ("ORRVILLE", "AL"),
  ("ORTING", "WA"),
  ("ORTLEY", "SD"),
  ("ORTONVILLE", "MN"),
  ("ORTONVILLE", "MI"),
  ("ORVISTON", "PA"),
  ("ORWELL", "OH"),
  ("ORWIGSBURG", "PA"),
  ("ORWIN", "PA"),
  ("OSAGE", "MN"),
  ("OSAGE", "IA"),
  ("OSAGE", "WY"),
  ("OSAGE", "OK"),
  ("OSAGE BEACH", "MO"),
  ("OSAGE CITY", "KS"),
  ("OSAKIS", "MN"),
  ("OSAWATOMIE", "KS"),
  ("OSBORN", "MO"),
  ("OSBORNE", "KS"),
  ("OSBURN", "ID"),
  ("OSCARVILLE", "AK"),
  ("OSCEOLA", "AR"),
  ("OSCEOLA", "IA"),
  ("OSCEOLA", "WI"),
  ("OSCEOLA", "IN"),
  ("OSCEOLA", "NE"),
  ("OSCEOLA", "MO"),
  ("OSCEOLA MILLS", "PA"),
  ("OSCODA", "MI"),
  ("OSGOOD", "IN"),
  ("OSGOOD", "OH"),
  ("OSGOOD", "MO"),
  ("OSHKOSH", "WI"),
  ("OSHKOSH", "NE"),
  ("OSINO", "NV"),
  ("OSKALOOSA", "IA"),
  ("OSKALOOSA", "KS"),
  ("OSLO", "MN"),
  ("OSMOND", "WY"),
  ("OSMOND", "NE"),
  ("OSNABROCK", "ND"),
  ("OSO", "WA"),
  ("OSPREY", "FL"),
  ("OSSEO", "WI"),
  ("OSSEO", "MN"),
  ("OSSIAN", "IN"),
  ("OSSIAN", "IA"),
  ("OSSINEKE", "MI"),
  ("OSSINING", "NY"),
  ("OSSIPEE", "NC"),
  ("OSSUN", "LA"),
  ("OSTERDOCK", "IA"),
  ("OSTRANDER", "OH"),
  ("OSTRANDER", "MN"),
  ("OSWAYO", "PA"),
  ("OSWEGO", "IL"),
  ("OSWEGO", "NY"),
  ("OSWEGO", "KS"),
  ("OSWEGO", "SC"),
  ("OSYKA", "MS"),
  ("OTEGO", "NY"),
  ("OTHELLO", "WA"),
  ("OTHO", "IA"),
  ("OTIS", "CO"),
  ("OTIS", "KS"),
  ("OTIS ORCHARDS-EAST FARMS", "WA"),
  ("OTISVILLE", "MI"),
  ("OTISVILLE", "NY"),
  ("OTO", "IA"),
  ("OTOE", "NE"),
  ("OTRANTO", "IA"),
  ("OTSEGO", "MN"),
  ("OTSEGO", "MI"),
  ("OTTAWA", "IL"),
  ("OTTAWA", "KS"),
  ("OTTAWA", "OH"),
  ("OTTAWA HILLS", "OH"),
  ("OTTER CREEK", "FL"),
  ("OTTER LAKE", "MI"),
  ("OTTERBEIN", "IN"),
  ("OTTERTAIL", "MN"),
  ("OTTERVILLE", "IL"),
  ("OTTERVILLE", "MO"),
  ("OTTOSEN", "IA"),
  ("OTTOVILLE", "OH"),
  ("OTTUMWA", "IA"),
  ("OTWAY", "OH"),
  ("OTWELL", "IN"),
  ("OUR TOWN", "AL"),
  ("OURAY", "CO"),
  ("OUTLOOK", "MT"),
  ("OUTLOOK", "WA"),
  ("OUZINKIE", "AK"),
  ("OVAL", "PA"),
  ("OVANDO", "MT"),
  ("OVERBROOK", "KS"),
  ("OVERLAND", "MO"),
  ("OVERLAND", "NE"),
  ("OVERLAND PARK", "KS"),
  ("OVERLEA", "MD"),
  ("OVERLY", "ND"),
  ("OVERTON", "TX"),
  ("OVERTON", "NE"),
  ("OVID", "MI"),
  ("OVID", "NY"),
  ("OVID", "CO"),
  ("OVIEDO", "FL"),
  ("OVILLA", "TX"),
  ("OWANECO", "IL"),
  ("OWASA", "IA"),
  ("OWASSO", "OK"),
  ("OWATONNA", "MN"),
  ("OWEGO", "NY"),
  ("OWEN", "WI"),
  ("OWENDALE", "MI"),
  ("OWENS CROSS ROADS", "AL"),
  ("OWENSBORO", "KY"),
  ("OWENSBURG", "IN"),
  ("OWENSVILLE", "MO"),
  ("OWENSVILLE", "IN"),
  ("OWENSVILLE", "OH"),
  ("OWENTON", "KY"),
  ("OWINGS", "MD"),
  ("OWINGS MILLS", "MD"),
  ("OWINGSVILLE", "KY"),
  ("OWL CREEK", "WY"),
  ("OWL RANCH", "TX"),
  ("OWOSSO", "MI"),
  ("OWYHEE", "NV"),
  ("OXBOW", "ND"),
  ("OXBOW", "NY"),
  ("OXBOW ESTATES", "AZ"),
  ("OXFORD", "AL"),
  ("OXFORD", "MS"),
  ("OXFORD", "ME"),
  ("OXFORD", "OH"),
  ("OXFORD", "AR"),
  ("OXFORD", "NC"),
  ("OXFORD", "MA"),
  ("OXFORD", "GA"),
  ("OXFORD", "PA"),
  ("OXFORD", "NY"),
  ("OXFORD", "MI"),
  ("OXFORD", "WI"),
  ("OXFORD", "NE"),
  ("OXFORD", "IA"),
  ("OXFORD", "KS"),
  ("OXFORD", "NJ"),
  ("OXFORD", "IN"),
  ("OXFORD", "MD"),
  ("OXFORD", "ID"),
  ("OXFORD JUNCTION", "IA"),
  ("OXLY", "MO"),
  ("OXNARD", "CA"),
  ("OXOBOXO RIVER", "CT"),
  ("OXON HILL", "MD"),
  ("OYEHUT", "WA"),
  ("OYENS", "IA"),
  ("OYSTER BAY", "NY"),
  ("OYSTER BAY COVE", "NY"),
  ("OYSTER CREEK", "TX"),
  ("OZAN", "AR"),
  ("OZARK", "AL"),
  ("OZARK", "MO"),
  ("OZARK", "AR"),
  ("OZAWKIE", "KS"),
  ("OZONA", "TX"),
  ("OZORA", "MO"),
  ("P·JAROS", "PR"),
  ("PAAUILO", "HI"),
  ("PABLO", "MT"),
  ("PABLO PENA", "TX"),
  ("PACE", "FL"),
  ("PACE", "MS"),
  ("PACHECO", "CA"),
  ("PACHUTA", "MS"),
  ("PACIFIC", "MO"),
  ("PACIFIC", "WA"),
  ("PACIFIC BEACH", "WA"),
  ("PACIFIC CITY", "OR"),
  ("PACIFIC GROVE", "CA"),
  ("PACIFIC JUNCTION", "IA"),
  ("PACIFICA", "CA"),
  ("PACKWAUKEE", "WI"),
  ("PACKWOOD", "WA"),
  ("PACKWOOD", "IA"),
  ("PACOLET", "SC"),
  ("PADDOCK LAKE", "WI"),
  ("PADEN", "MS"),
  ("PADEN", "OK"),
  ("PADEN CITY", "WV"),
  ("PADERBORN", "IL"),
  ("PADRE RANCHITOS", "AZ"),
  ("PADRONI", "CO"),
  ("PADUCAH", "KY"),
  ("PADUCAH", "TX"),
  ("PAGE", "AZ"),
  ("PAGE", "WV"),
  ("PAGE", "NE"),
  ("PAGE", "ND"),
  ("PAGE PARK", "FL"),
  ("PAGEDALE", "MO"),
  ("PAGELAND", "SC"),
  ("PAGETON", "WV"),
  ("PAGOSA SPRINGS", "CO"),
  ("PAGUATE", "NM"),
  ("PAHALA", "HI"),
  ("PAHOA", "HI"),
  ("PAHOKEE", "FL"),
  ("PAHRUMP", "NV"),
  ("PAIA", "HI"),
  ("PAINCOURTVILLE", "LA"),
  ("PAINESVILLE", "OH"),
  ("PAINT", "PA"),
  ("PAINT ROCK", "TX"),
  ("PAINT ROCK", "AL"),
  ("PAINTED HILLS", "IN"),
  ("PAINTED POST", "NY"),
  ("PAINTER", "VA"),
  ("PAINTSVILLE", "KY"),
  ("PAISANO PARK", "TX"),
  ("PAISLEY", "FL"),
  ("PAISLEY", "OR"),
  ("PAJARITO MESA", "NM"),
  ("PAJARO", "CA"),
  ("PAJARO DUNES", "CA"),
  ("PAJONAL", "PR"),
  ("PAKALA VILLAGE", "HI"),
  ("PALACIOS", "TX"),
  ("PALATINE", "IL"),
  ("PALATINE BRIDGE", "NY"),
  ("PALATKA", "FL"),
  ("PALCO", "KS"),
  ("PALENVILLE", "NY"),
  ("PALERMO", "CA"),
  ("PALERMO", "ND"),
  ("PALESTINE", "TX"),
  ("PALESTINE", "AR"),
  ("PALESTINE", "IL"),
  ("PALESTINE", "OH"),
  ("PALISADE", "CO"),
  ("PALISADE", "MN"),
  ("PALISADE", "NE"),
  ("PALISADES", "TX"),
  ("PALISADES PARK", "NJ"),
  ("PALM BAY", "FL"),
  ("PALM BEACH", "FL"),
  ("PALM BEACH GARDENS", "FL"),
  ("PALM BEACH SHORES", "FL"),
  ("PALM CITY", "FL"),
  ("PALM COAST", "FL"),
  ("PALM DESERT", "CA"),
  ("PALM HARBOR", "FL"),
  ("PALM RIVER-CLAIR MEL", "FL"),
  ("PALM SHORES", "FL"),
  ("PALM SPRINGS", "CA"),
  ("PALM SPRINGS", "FL"),
  ("PALM SPRINGS NORTH", "FL"),
  ("PALM VALLEY", "FL"),
  ("PALM VALLEY", "TX"),
  ("PALMAREJO", "PR"),
  ("PALMAREJO", "PR"),
  ("PALMAS", "PR"),
  ("PALMAS DEL MAR", "PR"),
  ("PALMDALE", "CA"),
  ("PALMDALE", "PA"),
  ("PALMER", "AK"),
  ("PALMER", "TN"),
  ("PALMER", "TX"),
  ("PALMER", "IL"),
  ("PALMER", "MI"),
  ("PALMER", "NE"),
  ("PALMER", "IA"),
  ("PALMER", "KS"),
  ("PALMER", "PR"),
  ("PALMER HEIGHTS", "PA"),
  ("PALMER LAKE", "CO"),
  ("PALMER TOWN", "MA"),
  ("PALMERTON", "PA"),
  ("PALMETTO", "GA"),
  ("PALMETTO", "FL"),
  ("PALMETTO", "LA"),
  ("PALMETTO BAY", "FL"),
  ("PALMETTO ESTATES", "FL"),
  ("PALMHURST", "TX"),
  ("PALMONA PARK", "FL"),
  ("PALMVIEW", "TX"),
  ("PALMVIEW SOUTH", "TX"),
  ("PALMYRA", "UT"),
  ("PALMYRA", "MO"),
  ("PALMYRA", "PA"),
  ("PALMYRA", "NJ"),
  ("PALMYRA", "VA"),
  ("PALMYRA", "NY"),
  ("PALMYRA", "IN"),
  ("PALMYRA", "WI"),
  ("PALMYRA", "IL"),
  ("PALMYRA", "NE"),
  ("PALO", "IA"),
  ("PALO ALTO", "CA"),
  ("PALO ALTO", "PA"),
  ("PALO BLANCO", "TX"),
  ("PALO CEDRO", "CA"),
  ("PALO PINTO", "TX"),
  ("PALO SECO", "PR"),
  ("PALO VERDE", "CA"),
  ("PALOMA CREEK", "TX"),
  ("PALOMA CREEK SOUTH", "TX"),
  ("PALOMAS", "PR"),
  ("PALOMAS", "PR"),
  ("PALOMINAS", "AZ"),
  ("PALOS HEIGHTS", "IL"),
  ("PALOS HILLS", "IL"),
  ("PALOS PARK", "IL"),
  ("PALOS VERDES ESTATES", "CA"),
  ("PALOUSE", "WA"),
  ("PAMELIA CENTER", "NY"),
  ("PAMPA", "TX"),
  ("PAMPLICO", "SC"),
  ("PAMPLIN CITY", "VA"),
  ("PANA", "IL"),
  ("PANACA", "NV"),
  ("PANACEA", "FL"),
  ("PANAMA", "NY"),
  ("PANAMA", "OK"),
  ("PANAMA", "IL"),
  ("PANAMA", "IA"),
  ("PANAMA", "NE"),
  ("PANAMA CITY", "FL"),
  ("PANAMA CITY BEACH", "FL"),
  ("PANCOASTBURG", "OH"),
  ("PANDORA", "OH"),
  ("PANGBURN", "AR"),
  ("PANGUITCH", "UT"),
  ("PANHANDLE", "TX"),
  ("PANOLA", "AL"),
  ("PANOLA", "IL"),
  ("PANORA", "IA"),
  ("PANORAMA HEIGHTS", "CA"),
  ("PANORAMA PARK", "IA"),
  ("PANORAMA VILLAGE", "TX"),
  ("PANTEGO", "TX"),
  ("PANTEGO", "NC"),
  ("PANTHER VALLEY", "NJ"),
  ("PANTHERSVILLE", "GA"),
  ("PANTOPS", "VA"),
  ("PAOLA", "KS"),
  ("PAOLI", "IN"),
  ("PAOLI", "PA"),
  ("PAOLI", "OK"),
  ("PAOLI", "CO"),
  ("PAONIA", "CO"),
  ("PAPAIKOU", "HI"),
  ("PAPILLION", "NE"),
  ("PAPINEAU", "IL"),
  ("PARACHUTE", "CO"),
  ("PARADIS", "LA"),
  ("PARADISE", "NV"),
  ("PARADISE", "CA"),
  ("PARADISE", "CA"),
  ("PARADISE", "TX"),
  ("PARADISE", "UT"),
  ("PARADISE", "PA"),
  ("PARADISE", "KS"),
  ("PARADISE", "MT"),
  ("PARADISE HEIGHTS", "FL"),
  ("PARADISE HILL", "OK"),
  ("PARADISE HILLS", "NM"),
  ("PARADISE PARK", "CA"),
  ("PARADISE VALLEY", "NV"),
  ("PARADISE VALLEY", "AZ"),
  ("PARAGON", "IN"),
  ("PARAGON ESTATES", "CO"),
  ("PARAGONAH", "UT"),
  ("PARAGOULD", "AR"),
  ("PARAJE", "NM"),
  ("PARAMOUNT", "CA"),
  ("PARAMOUNT-LONG MEADOW", "MD"),
  ("PARAMUS", "NJ"),
  ("PARC", "NY"),
  ("PARCELAS DE NAVARRO", "PR"),
  ("PARCELAS LA MILAGROSA", "PR"),
  ("PARCELAS MANDRY", "PR"),
  ("PARCELAS NUEVAS", "PR"),
  ("PARCELAS PEÒUELAS", "PR"),
  ("PARCELAS VIEJAS BORINQUEN", "PR"),
  ("PARCHMENT", "MI"),
  ("PARDEESVILLE", "PA"),
  ("PARDEEVILLE", "WI"),
  ("PARIS", "TX"),
  ("PARIS", "TN"),
  ("PARIS", "KY"),
  ("PARIS", "IL"),
  ("PARIS", "AR"),
  ("PARIS", "ID"),
  ("PARIS", "PA"),
  ("PARIS", "MO"),
  ("PARISH", "NY"),
  ("PARISHVILLE", "NY"),
  ("PARK", "KS"),
  ("PARK CITY", "UT"),
  ("PARK CITY", "KS"),
  ("PARK CITY", "TN"),
  ("PARK CITY", "KY"),
  ("PARK CITY", "IL"),
  ("PARK CITY", "MT"),
  ("PARK CREST", "PA"),
  ("PARK FALLS", "WI"),
  ("PARK FOREST", "IL"),
  ("PARK FOREST VILLAGE", "PA"),
  ("PARK HILL", "OK"),
  ("PARK HILLS", "MO"),
  ("PARK HILLS", "KY"),
  ("PARK LAYNE", "OH"),
  ("PARK RAPIDS", "MN"),
  ("PARK RIDGE", "IL"),
  ("PARK RIDGE", "NJ"),
  ("PARK RIDGE", "WI"),
  ("PARK RIVER", "ND"),
  ("PARK VIEW", "IA"),
  ("PARKDALE", "MI"),
  ("PARKDALE", "AR"),
  ("PARKDALE", "OR"),
  ("PARKDALE", "MO"),
  ("PARKER", "AZ"),
  ("PARKER", "CO"),
  ("PARKER", "TX"),
  ("PARKER", "SC"),
  ("PARKER", "FL"),
  ("PARKER", "SD"),
  ("PARKER", "PA"),
  ("PARKER", "ID"),
  ("PARKER", "KS"),
  ("PARKER", "WA"),
  ("PARKER CITY", "IN"),
  ("PARKER SCHOOL", "MT"),
  ("PARKER STRIP", "AZ"),
  ("PARKERFIELD", "KS"),
  ("PARKER'S CROSSROADS", "TN"),
  ("PARKERS PRAIRIE", "MN"),
  ("PARKERS SETTLEMENT", "IN"),
  ("PARKERSBURG", "WV"),
  ("PARKERSBURG", "IA"),
  ("PARKERSBURG", "IL"),
  ("PARKERVILLE", "KS"),
  ("PARKESBURG", "PA"),
  ("PARKIN", "AR"),
  ("PARKLAND", "FL"),
  ("PARKLAND", "WA"),
  ("PARKLAWN", "CA"),
  ("PARKLINE", "ID"),
  ("PARKMAN", "WY"),
  ("PARKS", "AZ"),
  ("PARKS", "LA"),
  ("PARKS", "NE"),
  ("PARKSDALE", "CA"),
  ("PARKSIDE", "PA"),
  ("PARKSLEY", "VA"),
  ("PARKSTON", "SD"),
  ("PARKSVILLE", "SC"),
  ("PARKTON", "NC"),
  ("PARKVILLE", "MO"),
  ("PARKVILLE", "MD"),
  ("PARKVILLE", "PA"),
  ("PARKWAY", "CA"),
  ("PARKWAY", "MO"),
  ("PARKWAY VILLAGE", "KY"),
  ("PARKWOOD", "WA"),
  ("PARKWOOD", "CA"),
  ("PARLIER", "CA"),
  ("PARMA", "OH"),
  ("PARMA", "ID"),
  ("PARMA", "MI"),
  ("PARMA", "MO"),
  ("PARMA HEIGHTS", "OH"),
  ("PARMELE", "NC"),
  ("PARMELEE", "SD"),
  ("PARNELL", "MO"),
  ("PARNELL", "IA"),
  ("PAROLE", "MD"),
  ("PAROWAN", "UT"),
  ("PARRAL", "OH"),
  ("PARRISH", "AL"),
  ("PARROTT", "VA"),
  ("PARROTT", "GA"),
  ("PARROTTSVILLE", "TN"),
  ("PARRYVILLE", "PA"),
  ("PARSHALL", "ND"),
  ("PARSHALL", "CO"),
  ("PARSONS", "KS"),
  ("PARSONS", "TN"),
  ("PARSONS", "WV"),
  ("PARSONSBURG", "MD"),
  ("PARTRIDGE", "KS"),
  ("PASADENA", "TX"),
  ("PASADENA", "CA"),
  ("PASADENA", "MD"),
  ("PASADENA HILLS", "FL"),
  ("PASADENA HILLS", "MO"),
  ("PASADENA PARK", "MO"),
  ("PASATIEMPO", "CA"),
  ("PASCAGOULA", "MS"),
  ("PASCO", "WA"),
  ("PASCOAG", "RI"),
  ("PASCOLA", "MO"),
  ("PASKENTA", "CA"),
  ("PASS CHRISTIAN", "MS"),
  ("PASSAIC", "NJ"),
  ("PASSAIC", "MO"),
  ("PASSAPATANZY", "VA"),
  ("PASTORIA", "VA"),
  ("PASTOS", "PR"),
  ("PASTURA", "NM"),
  ("PATAGONIA", "AZ"),
  ("PATASKALA", "OH"),
  ("PATCH GROVE", "WI"),
  ("PATCHOGUE", "NY"),
  ("PATEROS", "WA"),
  ("PATERSON", "NJ"),
  ("PATHFORK", "KY"),
  ("PATILLAS", "PR"),
  ("PATMOS", "AR"),
  ("PATOKA", "IN"),
  ("PATOKA", "IL"),
  ("PATON", "IA"),
  ("PATRICK", "SC"),
  ("PATRICK AFB", "FL"),
  ("PATRICK SPRINGS", "VA"),
  ("PATRIOT", "IN"),
  ("PATTERSON", "CA"),
  ("PATTERSON", "GA"),
  ("PATTERSON", "LA"),
  ("PATTERSON", "AR"),
  ("PATTERSON", "IA"),
  ("PATTERSON", "OH"),
  ("PATTERSON HEIGHTS", "PA"),
  ("PATTERSON SPRINGS", "NC"),
  ("PATTERSON TRACT", "CA"),
  ("PATTISON", "TX"),
  ("PATTON", "PA"),
  ("PATTON VILLAGE", "CA"),
  ("PATTON VILLAGE", "TX"),
  ("PATTONSBURG", "MO"),
  ("PAUKAA", "HI"),
  ("PAUL", "ID"),
  ("PAUL SMITHS", "NY"),
  ("PAULDEN", "AZ"),
  ("PAULDING", "OH"),
  ("PAULINA", "LA"),
  ("PAULLINA", "IA"),
  ("PAULS VALLEY", "OK"),
  ("PAULSBORO", "NJ"),
  ("PAVILION", "NY"),
  ("PAVILLION", "WY"),
  ("PAVO", "GA"),
  ("PAW PAW", "MI"),
  ("PAW PAW", "IL"),
  ("PAW PAW", "WV"),
  ("PAW PAW LAKE", "MI"),
  ("PAWCATUCK", "CT"),
  ("PAWHUSKA", "OK"),
  ("PAWLEYS ISLAND", "SC"),
  ("PAWLING", "NY"),
  ("PAWNEE", "TX"),
  ("PAWNEE", "OK"),
  ("PAWNEE", "IL"),
  ("PAWNEE CITY", "NE"),
  ("PAWNEE ROCK", "KS"),
  ("PAWTUCKET", "RI"),
  ("PAX", "WV"),
  ("PAXICO", "KS"),
  ("PAXSON", "AK"),
  ("PAXTANG", "PA"),
  ("PAXTON", "FL"),
  ("PAXTON", "IL"),
  ("PAXTON", "NE"),
  ("PAXTON", "CA"),
  ("PAXTONIA", "PA"),
  ("PAXTONVILLE", "PA"),
  ("PAXVILLE", "SC"),
  ("PAYETTE", "ID"),
  ("PAYNE", "OH"),
  ("PAYNE", "GA"),
  ("PAYNE GAP", "KY"),
  ("PAYNE SPRINGS", "TX"),
  ("PAYNES CREEK", "CA"),
  ("PAYNESVILLE", "MN"),
  ("PAYNESVILLE", "MO"),
  ("PAYSON", "AZ"),
  ("PAYSON", "UT"),
  ("PAYSON", "IL"),
  ("PE ELL", "WA"),
  ("PEA RIDGE", "AR"),
  ("PEA RIDGE", "FL"),
  ("PEA RIDGE", "WV"),
  ("PEABODY", "MA"),
  ("PEABODY", "KS"),
  ("PEACEFUL VALLEY", "WA"),
  ("PEACEFUL VILLAGE", "MO"),
  ("PEACH LAKE", "NY"),
  ("PEACH ORCHARD", "AR"),
  ("PEACH SPRINGS", "AZ"),
  ("PEACHLAND", "NC"),
  ("PEACHTREE CITY", "GA"),
  ("PEAK", "SC"),
  ("PEAK PLACE", "NM"),
  ("PEAPACK AND GLADSTONE", "NJ"),
  ("PEARISBURG", "VA"),
  ("PEARL", "MS"),
  ("PEARL", "IL"),
  ("PEARL BEACH", "MI"),
  ("PEARL CITY", "HI"),
  ("PEARL CITY", "IL"),
  ("PEARL RIVER", "MS"),
  ("PEARL RIVER", "NY"),
  ("PEARL RIVER", "LA"),
  ("PEARLAND", "TX"),
  ("PEARLINGTON", "MS"),
  ("PEARSALL", "TX"),
  ("PEARSON", "GA"),
  ("PEARSONVILLE", "CA"),
  ("PEASE", "MN"),
  ("PEAVINE", "OK"),
  ("PEBBLE CREEK", "FL"),
  ("PECAN ACRES", "TX"),
  ("PECAN GAP", "TX"),
  ("PECAN GROVE", "TX"),
  ("PECAN HILL", "TX"),
  ("PECAN PARK", "NM"),
  ("PECAN PLANTATION", "TX"),
  ("PECATONICA", "IL"),
  ("PECK", "MI"),
  ("PECK", "ID"),
  ("PECKTONVILLE", "MD"),
  ("PECONIC", "NY"),
  ("PECOS", "TX"),
  ("PECOS", "NM"),
  ("PECULIAR", "MO"),
  ("PEDLEY", "CA"),
  ("PEDRICKTOWN", "NJ"),
  ("PEDRO BAY", "AK"),
  ("PEEBLES", "OH"),
  ("PEEKSKILL", "NY"),
  ("PEEPLES VALLEY", "AZ"),
  ("PEETZ", "CO"),
  ("PEEVER", "SD"),
  ("PEGGS", "OK"),
  ("PEGRAM", "TN"),
  ("PEKIN", "IL"),
  ("PEKIN", "ND"),
  ("PELAHATCHIE", "MS"),
  ("PELETIER", "NC"),
  ("PELHAM", "AL"),
  ("PELHAM", "TN"),
  ("PELHAM", "GA"),
  ("PELHAM", "NY"),
  ("PELHAM MANOR", "NY"),
  ("PELICAN", "AK"),
  ("PELICAN BAY", "FL"),
  ("PELICAN BAY", "TX"),
  ("PELICAN RAPIDS", "MN"),
  ("PELION", "SC"),
  ("PELL CITY", "AL"),
  ("PELL LAKE", "WI"),
  ("PELLA", "IA"),
  ("PELLA", "WI"),
  ("PELLSTON", "MI"),
  ("PELZER", "SC"),
  ("PEMBERTON", "NJ"),
  ("PEMBERTON", "MN"),
  ("PEMBERTON HEIGHTS", "NJ"),
  ("PEMBERVILLE", "OH"),
  ("PEMBERWICK", "CT"),
  ("PEMBINA", "ND"),
  ("PEMBINE", "WI"),
  ("PEMBROKE", "GA"),
  ("PEMBROKE", "NC"),
  ("PEMBROKE", "KY"),
  ("PEMBROKE", "VA"),
  ("PEMBROKE PARK", "FL"),
  ("PEMBROKE PINES", "FL"),
  ("PEN ARGYL", "PA"),
  ("PEN MAR", "PA"),
  ("PENA", "TX"),
  ("PENALOSA", "KS"),
  ("PENBROOK", "PA"),
  ("PENCE", "WI"),
  ("PENDER", "NE"),
  ("PENDERGRASS", "GA"),
  ("PENDLETON", "IN"),
  ("PENDLETON", "OR"),
  ("PENDLETON", "SC"),
  ("PENDLETON", "MO"),
  ("PENELOPE", "TX"),
  ("PENERMON", "MO"),
  ("PENFIELD", "IL"),
  ("PENHOOK", "VA"),
  ("PENINSULA", "OH"),
  ("PENITAS", "TX"),
  ("PENN", "PA"),
  ("PENN ESTATES", "PA"),
  ("PENN LAKE PARK", "PA"),
  ("PENN STATE ERIE (BEHREND)", "PA"),
  ("PENN VALLEY", "CA"),
  ("PENN WYNNE", "PA"),
  ("PENN YAN", "NY"),
  ("PENNDEL", "PA"),
  ("PENNEY FARMS", "FL"),
  ("PENNGROVE", "CA"),
  ("PENNINGTON", "AL"),
  ("PENNINGTON", "NJ"),
  ("PENNINGTON GAP", "VA"),
  ("PENNOCK", "MN"),
  ("PENNS CREEK", "PA"),
  ("PENNS GROVE", "NJ"),
  ("PENNSBORO", "WV"),
  ("PENNSBURG", "PA"),
  ("PENNSBURY VILLAGE", "PA"),
  ("PENNSIDE", "PA"),
  ("PENNSVILLE", "NJ"),
  ("PENNVILLE", "PA"),
  ("PENNVILLE", "IN"),
  ("PENNWYN", "PA"),
  ("PENROSE", "CO"),
  ("PENRYN", "PA"),
  ("PENRYN", "CA"),
  ("PENSACOLA", "FL"),
  ("PENSACOLA", "OK"),
  ("PENTON", "AL"),
  ("PENTRESS", "WV"),
  ("PENTWATER", "MI"),
  ("PEOA", "UT"),
  ("PEÒA BLANCA", "NM"),
  ("PEÒA POBRE", "PR"),
  ("PEÒASCO", "NM"),
  ("PEORIA", "AZ"),
  ("PEORIA", "IL"),
  ("PEORIA", "CO"),
  ("PEORIA", "OR"),
  ("PEORIA", "OK"),
  ("PEORIA HEIGHTS", "IL"),
  ("PEOSTA", "IA"),
  ("PEOTONE", "IL"),
  ("PEÒUELAS", "PR"),
  ("PEPEEKEO", "HI"),
  ("PEPIN", "WI"),
  ("PEPPER PIKE", "OH"),
  ("PEPPERELL", "MA"),
  ("PEPPERMILL VILLAGE", "MD"),
  ("PEQUOT LAKES", "MN"),
  ("PERALTA", "NM"),
  ("PERCIVAL", "IA"),
  ("PERCY", "IL"),
  ("PERDIDO BEACH", "AL"),
  ("PEREZVILLE", "TX"),
  ("PERHAM", "MN"),
  ("PERIDOT", "AZ"),
  ("PERKASIE", "PA"),
  ("PERKINS", "OK"),
  ("PERKINS", "GA"),
  ("PERKINSVILLE", "VT"),
  ("PERLA", "AR"),
  ("PERLEY", "MN"),
  ("PERRIN", "TX"),
  ("PERRINTON", "MI"),
  ("PERRIS", "CA"),
  ("PERRY", "GA"),
  ("PERRY", "FL"),
  ("PERRY", "UT"),
  ("PERRY", "OK"),
  ("PERRY", "IA"),
  ("PERRY", "MI"),
  ("PERRY", "NY"),
  ("PERRY", "OH"),
  ("PERRY", "MO"),
  ("PERRY", "SC"),
  ("PERRY", "KS"),
  ("PERRY", "AR"),
  ("PERRY", "IL"),
  ("PERRY HALL", "MD"),
  ("PERRY HEIGHTS", "OH"),
  ("PERRY PARK", "CO"),
  ("PERRYMAN", "MD"),
  ("PERRYOPOLIS", "PA"),
  ("PERRYSBURG", "OH"),
  ("PERRYSBURG", "NY"),
  ("PERRYSVILLE", "OH"),
  ("PERRYSVILLE", "IN"),
  ("PERRYTON", "TX"),
  ("PERRYTOWN", "AR"),
  ("PERRYVILLE", "AK"),
  ("PERRYVILLE", "MO"),
  ("PERRYVILLE", "AR"),
  ("PERRYVILLE", "MD"),
  ("PERRYVILLE", "KY"),
  ("PERSIA", "IA"),
  ("PERTH", "ND"),
  ("PERTH AMBOY", "NJ"),
  ("PERU", "IL"),
  ("PERU", "IN"),
  ("PERU", "NY"),
  ("PERU", "NE"),
  ("PERU", "KS"),
  ("PESCADERO", "CA"),
  ("PESHTIGO", "WI"),
  ("PESOTUM", "IL"),
  ("PETAL", "MS"),
  ("PETALUMA", "CA"),
  ("PETER", "UT"),
  ("PETERBOROUGH", "NH"),
  ("PETERMAN", "AL"),
  ("PETERS", "CA"),
  ("PETERSBURG", "AK"),
  ("PETERSBURG", "VA"),
  ("PETERSBURG", "KY"),
  ("PETERSBURG", "WV"),
  ("PETERSBURG", "IN"),
  ("PETERSBURG", "IL"),
  ("PETERSBURG", "ND"),
  ("PETERSBURG", "TN"),
  ("PETERSBURG", "TX"),
  ("PETERSBURG", "MI"),
  ("PETERSBURG", "NE"),
  ("PETERSBURG", "PA"),
  ("PETERSHAM", "MA"),
  ("PETERSON", "MN"),
  ("PETERSON", "IA"),
  ("PETERSTOWN", "WV"),
  ("PETERSVILLE", "AK"),
  ("PETOSKEY", "MI"),
  ("PETREY", "AL"),
  ("PETROLIA", "TX"),
  ("PETROLIA", "PA"),
  ("PETRONILA", "TX"),
  ("PETROS", "TN"),
  ("PETTIBONE", "ND"),
  ("PETTISVILLE", "OH"),
  ("PETTIT", "OK"),
  ("PETTUS", "TX"),
  ("PEVELY", "MO"),
  ("PEWAMO", "MI"),
  ("PEWAUKEE", "WI"),
  ("PEWAUKEE", "WI"),
  ("PEWEE VALLEY", "KY"),
  ("PEYTON", "CO"),
  ("PFLUGERVILLE", "TX"),
  ("PHARR", "TX"),
  ("PHEASANT RUN", "OH"),
  ("PHELAN", "CA"),
  ("PHELPS", "KY"),
  ("PHELPS", "NY"),
  ("PHELPS CITY", "MO"),
  ("PHENIX", "VA"),
  ("PHENIX CITY", "AL"),
  ("PHIL CAMPBELL", "AL"),
  ("PHILADELPHIA", "PA"),
  ("PHILADELPHIA", "MS"),
  ("PHILADELPHIA", "TN"),
  ("PHILADELPHIA", "NY"),
  ("PHILIP", "SD"),
  ("PHILIPPI", "WV"),
  ("PHILIPSBURG", "PA"),
  ("PHILIPSBURG", "MT"),
  ("PHILLIPS", "WI"),
  ("PHILLIPS", "OK"),
  ("PHILLIPS", "NE"),
  ("PHILLIPSBURG", "NJ"),
  ("PHILLIPSBURG", "KS"),
  ("PHILLIPSBURG", "MO"),
  ("PHILLIPSBURG", "GA"),
  ("PHILLIPSBURG", "OH"),
  ("PHILLIPSTOWN", "IL"),
  ("PHILLIPSVILLE", "CA"),
  ("PHILMONT", "NY"),
  ("PHILO", "CA"),
  ("PHILO", "IL"),
  ("PHILO", "OH"),
  ("PHILOMATH", "OR"),
  ("PHIPPSBURG", "CO"),
  ("PHOENICIA", "NY"),
  ("PHOENIX", "AZ"),
  ("PHOENIX", "OR"),
  ("PHOENIX", "NY"),
  ("PHOENIX", "IL"),
  ("PHOENIX LAKE", "CA"),
  ("PHOENIXVILLE", "PA"),
  ("PICACHO", "AZ"),
  ("PICAYUNE", "MS"),
  ("PICHER", "OK"),
  ("PICK CITY", "ND"),
  ("PICKENS", "SC"),
  ("PICKENS", "WV"),
  ("PICKENS", "MS"),
  ("PICKENSVILLE", "AL"),
  ("PICKERING", "MO"),
  ("PICKERINGTON", "OH"),
  ("PICKRELL", "NE"),
  ("PICKSTOWN", "SD"),
  ("PICNIC POINT", "WA"),
  ("PICO RIVERA", "CA"),
  ("PICTURE ROCKS", "AZ"),
  ("PICTURE ROCKS", "PA"),
  ("PICURIS PUEBLO", "NM"),
  ("PIE TOWN", "NM"),
  ("PIEDMONT", "OK"),
  ("PIEDMONT", "AL"),
  ("PIEDMONT", "SC"),
  ("PIEDMONT", "MO"),
  ("PIEDMONT", "CA"),
  ("PIEDMONT", "WV"),
  ("PIEDMONT", "SD"),
  ("PIEDRA", "CO"),
  ("PIEDRA AGUZA", "PR"),
  ("PIEDRA GORDA", "PR"),
  ("PIERCE", "NE"),
  ("PIERCE", "ID"),
  ("PIERCE", "CO"),
  ("PIERCE CITY", "MO"),
  ("PIERCETON", "IN"),
  ("PIERMONT", "NY"),
  ("PIERPOINT", "CA"),
  ("PIERPONT", "MO"),
  ("PIERPONT", "SD"),
  ("PIERRE", "SD"),
  ("PIERRE PART", "LA"),
  ("PIERREPONT MANOR", "NY"),
  ("PIERRON", "IL"),
  ("PIERSON", "FL"),
  ("PIERSON", "IA"),
  ("PIERSON", "MI"),
  ("PIERZ", "MN"),
  ("PIFFARD", "NY"),
  ("PIGEON", "MI"),
  ("PIGEON CREEK", "OH"),
  ("PIGEON FALLS", "WI"),
  ("PIGEON FORGE", "TN"),
  ("PIGGOTT", "AR"),
  ("PIKE", "CA"),
  ("PIKE", "NY"),
  ("PIKE CREEK", "DE"),
  ("PIKE CREEK VALLEY", "DE"),
  ("PIKE ROAD", "AL"),
  ("PIKES CREEK", "PA"),
  ("PIKESVILLE", "MD"),
  ("PIKETON", "OH"),
  ("PIKEVILLE", "KY"),
  ("PIKEVILLE", "TN"),
  ("PIKEVILLE", "NC"),
  ("PILGER", "NE"),
  ("PILGRIM", "MI"),
  ("PILLAGER", "MN"),
  ("PILLOW", "PA"),
  ("PILLSBURY", "ND"),
  ("PILOT GROVE", "MO"),
  ("PILOT KNOB", "MO"),
  ("PILOT MOUND", "IA"),
  ("PILOT MOUNTAIN", "NC"),
  ("PILOT POINT", "AK"),
  ("PILOT POINT", "TX"),
  ("PILOT ROCK", "OR"),
  ("PILOT STATION", "AK"),
  ("PILTZVILLE", "MT"),
  ("PIMA", "AZ"),
  ("PIMACO TWO", "AZ"),
  ("PIMMIT HILLS", "VA"),
  ("PIN OAK ACRES", "OK"),
  ("PINAL", "AZ"),
  ("PINARDVILLE", "NH"),
  ("PINCH", "WV"),
  ("PINCKARD", "AL"),
  ("PINCKNEY", "MI"),
  ("PINCKNEYVILLE", "IL"),
  ("PINCONNING", "MI"),
  ("PINDALL", "AR"),
  ("PINE", "AZ"),
  ("PINE AIR", "FL"),
  ("PINE APPLE", "AL"),
  ("PINE BEACH", "NJ"),
  ("PINE BEND", "MN"),
  ("PINE BLUFF", "AR"),
  ("PINE BLUFFS", "WY"),
  ("PINE BROOK HILL", "CO"),
  ("PINE BUSH", "NY"),
  ("PINE CANYON", "CA"),
  ("PINE CASTLE", "FL"),
  ("PINE CITY", "MN"),
  ("PINE CREST", "TN"),
  ("PINE FLAT", "CA"),
  ("PINE FOREST", "TX"),
  ("PINE GLEN", "PA"),
  ("PINE GROVE", "CA"),
  ("PINE GROVE", "OR"),
  ("PINE GROVE", "PA"),
  ("PINE GROVE", "WA"),
  ("PINE GROVE", "WV"),
  ("PINE GROVE MILLS", "PA"),
  ("PINE HARBOR", "TX"),
  ("PINE HAVEN", "WY"),
  ("PINE HILL", "NJ"),
  ("PINE HILL", "AL"),
  ("PINE HILL", "NY"),
  ("PINE HILLS", "FL"),
  ("PINE HILLS", "CA"),
  ("PINE HOLLOW", "OR"),
  ("PINE ISLAND", "TX"),
  ("PINE ISLAND", "MN"),
  ("PINE ISLAND", "FL"),
  ("PINE ISLAND CENTER", "FL"),
  ("PINE KNOLL SHORES", "NC"),
  ("PINE KNOT", "KY"),
  ("PINE LAKE", "AZ"),
  ("PINE LAKE", "GA"),
  ("PINE LAKE PARK", "NJ"),
  ("PINE LAKES", "FL"),
  ("PINE LAKES ADDITION", "SD"),
  ("PINE LAWN", "MO"),
  ("PINE LEVEL", "AL"),
  ("PINE LEVEL", "FL"),
  ("PINE LEVEL", "NC"),
  ("PINE MANOR", "FL"),
  ("PINE MOUNTAIN", "GA"),
  ("PINE MOUNTAIN CLUB", "CA"),
  ("PINE MOUNTAIN LAKE", "CA"),
  ("PINE PLAINS", "NY"),
  ("PINE POINT", "MN"),
  ("PINE PRAIRIE", "LA"),
  ("PINE RIDGE", "FL"),
  ("PINE RIDGE", "SC"),
  ("PINE RIDGE", "SD"),
  ("PINE RIDGE", "PA"),
  ("PINE RIDGE", "FL"),
  ("PINE RIDGE", "AL"),
  ("PINE RIDGE AT CRESTWOOD", "NJ"),
  ("PINE RIVER", "WI"),
  ("PINE RIVER", "MN"),
  ("PINE SPRINGS", "MN"),
  ("PINE VALLEY", "CA"),
  ("PINE VALLEY", "UT"),
  ("PINE VALLEY", "NY"),
  ("PINE VALLEY", "NJ"),
  ("PINE VILLAGE", "IN"),
  ("PINEBLUFF", "NC"),
  ("PINECREST", "FL"),
  ("PINEDALE", "AZ"),
  ("PINEDALE", "WY"),
  ("PINEHILL", "NM"),
  ("PINEHURST", "NC"),
  ("PINEHURST", "TX"),
  ("PINEHURST", "MA"),
  ("PINEHURST", "TX"),
  ("PINEHURST", "ID"),
  ("PINEHURST", "GA"),
  ("PINELAND", "TX"),
  ("PINELAND", "FL"),
  ("PINELLAS PARK", "FL"),
  ("PINESBURG", "MD"),
  ("PINESDALE", "MT"),
  ("PINETOP COUNTRY CLUB", "AZ"),
  ("PINETOP-LAKESIDE", "AZ"),
  ("PINETOPS", "NC"),
  ("PINETOWN", "NC"),
  ("PINEVIEW", "GA"),
  ("PINEVILLE", "LA"),
  ("PINEVILLE", "NC"),
  ("PINEVILLE", "MO"),
  ("PINEVILLE", "AR"),
  ("PINEVILLE", "KY"),
  ("PINEVILLE", "WV"),
  ("PINEWOOD", "FL"),
  ("PINEWOOD", "SC"),
  ("PINEWOOD ESTATES", "TX"),
  ("PINEY", "AR"),
  ("PINEY", "OK"),
  ("PINEY GREEN", "NC"),
  ("PINEY MOUNTAIN", "VA"),
  ("PINEY POINT", "MD"),
  ("PINEY POINT VILLAGE", "TX"),
  ("PINEY VIEW", "WV"),
  ("PINGREE", "ND"),
  ("PINGREE GROVE", "IL"),
  ("PINHOOK", "MO"),
  ("PINHOOK CORNER", "OK"),
  ("PINION PINES", "AZ"),
  ("PINK", "OK"),
  ("PINK HILL", "NC"),
  ("PINNACLE", "NC"),
  ("PINOLE", "CA"),
  ("PINON", "AZ"),
  ("PINON", "NM"),
  ("PINOPOLIS", "SC"),
  ("PINOS ALTOS", "NM"),
  ("PINSON", "AL"),
  ("PIOCHE", "NV"),
  ("PIONEER", "FL"),
  ("PIONEER", "CA"),
  ("PIONEER", "OH"),
  ("PIONEER", "LA"),
  ("PIONEER", "IA"),
  ("PIONEER JUNCTION", "MT"),
  ("PIONEER VILLAGE", "KY"),
  ("PIÒON HILLS", "CA"),
  ("PIPER CITY", "IL"),
  ("PIPERTON", "TN"),
  ("PIPESTONE", "MN"),
  ("PIPPA PASSES", "KY"),
  ("PIQUA", "OH"),
  ("PIQUA", "KS"),
  ("PIRTLEVILLE", "AZ"),
  ("PIRU", "CA"),
  ("PISEK", "ND"),
  ("PISGAH", "AL"),
  ("PISGAH", "IA"),
  ("PISINEMO", "AZ"),
  ("PISMO BEACH", "CA"),
  ("PISTAKEE HIGHLANDS", "IL"),
  ("PISTOL RIVER", "OR"),
  ("PITCAIRN", "PA"),
  ("PITKAS POINT", "AK"),
  ("PITKIN", "LA"),
  ("PITKIN", "CO"),
  ("PITMAN", "NJ"),
  ("PITSBURG", "OH"),
  ("PITTMAN", "FL"),
  ("PITTMAN CENTER", "TN"),
  ("PITTS", "GA"),
  ("PITTSBORO", "NC"),
  ("PITTSBORO", "IN"),
  ("PITTSBORO", "MS"),
  ("PITTSBURG", "CA"),
  ("PITTSBURG", "KS"),
  ("PITTSBURG", "TX"),
  ("PITTSBURG", "IL"),
  ("PITTSBURG", "OK"),
  ("PITTSBURGH", "PA"),
  ("PITTSFIELD", "MA"),
  ("PITTSFIELD", "ME"),
  ("PITTSFIELD", "IL"),
  ("PITTSFIELD", "NH"),
  ("PITTSFORD", "VT"),
  ("PITTSFORD", "NY"),
  ("PITTSTON", "PA"),
  ("PITTSVILLE", "WI"),
  ("PITTSVILLE", "MD"),
  ("PIXLEY", "CA"),
  ("PLACEDO", "TX"),
  ("PLACENTIA", "CA"),
  ("PLACERVILLE", "CA"),
  ("PLACERVILLE", "ID"),
  ("PLACITAS", "NM"),
  ("PLACITAS", "NM"),
  ("PLAIN", "WI"),
  ("PLAIN CITY", "UT"),
  ("PLAIN CITY", "OH"),
  ("PLAIN DEALING", "LA"),
  ("PLAIN VIEW", "NC"),
  ("PLAINEDGE", "NY"),
  ("PLAINFIELD", "IL"),
  ("PLAINFIELD", "IN"),
  ("PLAINFIELD", "NJ"),
  ("PLAINFIELD", "WI"),
  ("PLAINFIELD", "PA"),
  ("PLAINFIELD", "NH"),
  ("PLAINFIELD", "OH"),
  ("PLAINFIELD", "IA"),
  ("PLAINFIELD", "VT"),
  ("PLAINFIELD VILLAGE", "CT"),
  ("PLAINS", "PA"),
  ("PLAINS", "KS"),
  ("PLAINS", "TX"),
  ("PLAINS", "GA"),
  ("PLAINS", "MT"),
  ("PLAINSBORO CENTER", "NJ"),
  ("PLAINVIEW", "TX"),
  ("PLAINVIEW", "TN"),
  ("PLAINVIEW", "NY"),
  ("PLAINVIEW", "MN"),
  ("PLAINVIEW", "AR"),
  ("PLAINVIEW", "NE"),
  ("PLAINVIEW", "CA"),
  ("PLAINVILLE", "KS"),
  ("PLAINVILLE", "GA"),
  ("PLAINVILLE", "IN"),
  ("PLAINVILLE", "IL"),
  ("PLAINVILLE", "OH"),
  ("PLAINWELL", "MI"),
  ("PLANADA", "CA"),
  ("PLANDOME", "NY"),
  ("PLANDOME HEIGHTS", "NY"),
  ("PLANDOME MANOR", "NY"),
  ("PLANKINTON", "SD"),
  ("PLANO", "TX"),
  ("PLANO", "IL"),
  ("PLANO", "KY"),
  ("PLANO", "IA"),
  ("PLANT CITY", "FL"),
  ("PLANTATION", "FL"),
  ("PLANTATION", "FL"),
  ("PLANTATION", "KY"),
  ("PLANTATION ISLAND", "FL"),
  ("PLANTATION MOBILE HOME PARK", "FL"),
  ("PLANTERSVILLE", "MS"),
  ("PLAQUEMINE", "LA"),
  ("PLATEA", "PA"),
  ("PLATINUM", "AK"),
  ("PLATO", "MO"),
  ("PLATO", "MN"),
  ("PLATTE", "SD"),
  ("PLATTE CENTER", "NE"),
  ("PLATTE CITY", "MO"),
  ("PLATTE WOODS", "MO"),
  ("PLATTEKILL", "NY"),
  ("PLATTEVILLE", "WI"),
  ("PLATTEVILLE", "CO"),
  ("PLATTSBURG", "MO"),
  ("PLATTSBURGH", "NY"),
  ("PLATTSBURGH WEST", "NY"),
  ("PLATTSMOUTH", "NE"),
  ("PLATTVILLE", "IL"),
  ("PLAUCHEVILLE", "LA"),
  ("PLAYA FORTUNA", "PR"),
  ("PLAYAS", "NM"),
  ("PLAYITA", "PR"),
  ("PLAYITA", "PR"),
  ("PLAYITA CORTADA", "PR"),
  ("PLAZA", "ND"),
  ("PLEAK", "TX"),
  ("PLEASANT CITY", "OH"),
  ("PLEASANT DALE", "NE"),
  ("PLEASANT GAP", "PA"),
  ("PLEASANT GARDEN", "NC"),
  ("PLEASANT GROVE", "AL"),
  ("PLEASANT GROVE", "UT"),
  ("PLEASANT GROVE", "OH"),
  ("PLEASANT GROVE", "MD"),
  ("PLEASANT GROVES", "AL"),
  ("PLEASANT HILL", "IA"),
  ("PLEASANT HILL", "MO"),
  ("PLEASANT HILL", "CA"),
  ("PLEASANT HILL", "TX"),
  ("PLEASANT HILL", "NC"),
  ("PLEASANT HILL", "LA"),
  ("PLEASANT HILL", "TN"),
  ("PLEASANT HILL", "IL"),
  ("PLEASANT HILL", "PA"),
  ("PLEASANT HILL", "OH"),
  ("PLEASANT HILLS", "MD"),
  ("PLEASANT HILLS", "PA"),
  ("PLEASANT HILLS", "OH"),
  ("PLEASANT HOPE", "MO"),
  ("PLEASANT PLAIN", "IA"),
  ("PLEASANT PLAIN", "OH"),
  ("PLEASANT PLAINS", "NJ"),
  ("PLEASANT PLAINS", "IL"),
  ("PLEASANT PLAINS", "AR"),
  ("PLEASANT PRAIRIE", "WI"),
  ("PLEASANT RIDGE", "MI"),
  ("PLEASANT RUN", "OH"),
  ("PLEASANT RUN FARM", "OH"),
  ("PLEASANT VALLEY", "AK"),
  ("PLEASANT VALLEY", "WV"),
  ("PLEASANT VALLEY", "TX"),
  ("PLEASANT VALLEY", "MO"),
  ("PLEASANT VALLEY", "NY"),
  ("PLEASANT VIEW", "TN"),
  ("PLEASANT VIEW", "UT"),
  ("PLEASANT VIEW", "PA"),
  ("PLEASANT VIEW", "KY"),
  ("PLEASANTON", "CA"),
  ("PLEASANTON", "TX"),
  ("PLEASANTON", "KS"),
  ("PLEASANTON", "NM"),
  ("PLEASANTON", "IA"),
  ("PLEASANTON", "NE"),
  ("PLEASANTVILLE", "NJ"),
  ("PLEASANTVILLE", "IA"),
  ("PLEASANTVILLE", "NY"),
  ("PLEASANTVILLE", "PA"),
  ("PLEASANTVILLE", "OH"),
  ("PLEASANTVILLE", "PA"),
  ("PLEASURE BEND", "LA"),
  ("PLEASURE POINT", "CA"),
  ("PLEASUREVILLE", "KY"),
  ("PLENTYWOOD", "MT"),
  ("PLESSIS", "NY"),
  ("PLEVNA", "MO"),
  ("PLEVNA", "MT"),
  ("PLEVNA", "KS"),
  ("PLOVER", "WI"),
  ("PLOVER", "IA"),
  ("PLUM", "PA"),
  ("PLUM BRANCH", "SC"),
  ("PLUM CITY", "WI"),
  ("PLUM CREEK", "VA"),
  ("PLUM GROVE", "TX"),
  ("PLUM SPRINGS", "KY"),
  ("PLUMAS EUREKA", "CA"),
  ("PLUMAS LAKE", "CA"),
  ("PLUMERVILLE", "AR"),
  ("PLUMMER", "MN"),
  ("PLUMMER", "ID"),
  ("PLUMSTEADVILLE", "PA"),
  ("PLUMVILLE", "PA"),
  ("PLUMWOOD", "OH"),
  ("PLUSH", "OR"),
  ("PLYMOUTH", "MN"),
  ("PLYMOUTH", "IN"),
  ("PLYMOUTH", "WI"),
  ("PLYMOUTH", "NC"),
  ("PLYMOUTH", "NH"),
  ("PLYMOUTH", "OH"),
  ("PLYMOUTH", "MA"),
  ("PLYMOUTH", "MI"),
  ("PLYMOUTH", "PA"),
  ("PLYMOUTH", "CA"),
  ("PLYMOUTH", "UT"),
  ("PLYMOUTH", "IL"),
  ("PLYMOUTH", "IA"),
  ("PLYMOUTH", "NE"),
  ("PLYMOUTH MEETING", "PA"),
  ("PLYMPTONVILLE", "PA"),
  ("POCA", "WV"),
  ("POCAHONTAS", "AR"),
  ("POCAHONTAS", "IA"),
  ("POCAHONTAS", "IL"),
  ("POCAHONTAS", "VA"),
  ("POCAHONTAS", "MO"),
  ("POCASSET", "MA"),
  ("POCASSET", "OK"),
  ("POCATELLO", "ID"),
  ("POCOLA", "OK"),
  ("POCOMOKE CITY", "MD"),
  ("POCONO MOUNTAIN LAKE ESTATES", "PA"),
  ("POCONO PINES", "PA"),
  ("POCONO RANCH LANDS", "PA"),
  ("POCONO SPRINGS", "PA"),
  ("POCONO WOODLAND LAKES", "PA"),
  ("POESTENKILL", "NY"),
  ("POINCIANA", "FL"),
  ("POINT", "TX"),
  ("POINT ARENA", "CA"),
  ("POINT BAKER", "FL"),
  ("POINT BAKER", "AK"),
  ("POINT BLANK", "TX"),
  ("POINT CLEAR", "AL"),
  ("POINT COMFORT", "TX"),
  ("POINT HOPE", "AK"),
  ("POINT ISABEL", "IN"),
  ("POINT LAY", "AK"),
  ("POINT LOOKOUT", "NY"),
  ("POINT MACKENZIE", "AK"),
  ("POINT MARION", "PA"),
  ("POINT OF ROCKS", "MD"),
  ("POINT PLACE", "LA"),
  ("POINT PLEASANT", "NJ"),
  ("POINT PLEASANT", "WV"),
  ("POINT PLEASANT BEACH", "NJ"),
  ("POINT POSSESSION", "AK"),
  ("POINT REYES STATION", "CA"),
  ("POINT ROBERTS", "WA"),
  ("POINT VENTURE", "TX"),
  ("POINTE A LA HACHE", "LA"),
  ("POIPU", "HI"),
  ("POJOAQUE", "NM"),
  ("POLAND", "OH"),
  ("POLAND", "NY"),
  ("POLE OJEA", "PR"),
  ("POLK", "PA"),
  ("POLK", "OH"),
  ("POLK", "NE"),
  ("POLK CITY", "IA"),
  ("POLK CITY", "FL"),
  ("POLKTON", "NC"),
  ("POLKVILLE", "MS"),
  ("POLKVILLE", "NC"),
  ("POLLARD", "AL"),
  ("POLLARD", "AR"),
  ("POLLOCK", "LA"),
  ("POLLOCK", "SD"),
  ("POLLOCK", "MO"),
  ("POLLOCK PINES", "CA"),
  ("POLLOCKSVILLE", "NC"),
  ("POLO", "IL"),
  ("POLO", "MO"),
  ("POLONIA", "WI"),
  ("POLSON", "MT"),
  ("POLVADERA", "NM"),
  ("POMARIA", "SC"),
  ("POMEROY", "OH"),
  ("POMEROY", "IA"),
  ("POMEROY", "WA"),
  ("POMEROY", "PA"),
  ("POMFRET", "MD"),
  ("POMONA", "CA"),
  ("POMONA", "MO"),
  ("POMONA", "NJ"),
  ("POMONA", "NY"),
  ("POMONA", "KS"),
  ("POMONA PARK", "FL"),
  ("POMPANO BEACH", "FL"),
  ("POMPTON LAKES", "NJ"),
  ("PONCA", "NE"),
  ("PONCA CITY", "OK"),
  ("PONCE DE LEON", "FL"),
  ("PONCE INLET", "FL"),
  ("PONCE", "PR"),
  ("PONCHA SPRINGS", "CO"),
  ("PONCHATOULA", "LA"),
  ("POND CREEK", "OK"),
  ("PONDER", "TX"),
  ("PONDERAY", "ID"),
  ("PONDEROSA", "NM"),
  ("PONDEROSA", "CA"),
  ("PONDEROSA PARK", "CO"),
  ("PONDEROSA PINE", "NM"),
  ("PONDEROSA PINES", "MT"),
  ("PONDSVILLE", "MD"),
  ("PONEMAH", "MN"),
  ("PONETO", "IN"),
  ("PONSHEWAING", "MI"),
  ("PONTIAC", "MI"),
  ("PONTIAC", "IL"),
  ("PONTIAC", "MO"),
  ("PONTOON BEACH", "IL"),
  ("PONTOOSUC", "IL"),
  ("PONTOTOC", "MS"),
  ("PONY", "MT"),
  ("POOLE", "NE"),
  ("POOLER", "GA"),
  ("POOLESVILLE", "MD"),
  ("POPE", "MS"),
  ("POPEJOY", "IA"),
  ("POPE-VANNOY LANDING", "AK"),
  ("POPLAR", "WI"),
  ("POPLAR", "MT"),
  ("POPLAR BLUFF", "MO"),
  ("POPLAR GROVE", "IL"),
  ("POPLAR HILLS", "KY"),
  ("POPLAR-COTTON CENTER", "CA"),
  ("POPLARVILLE", "MS"),
  ("POPPONESSET", "MA"),
  ("POPPONESSET ISLAND", "MA"),
  ("POQUONOCK BRIDGE", "CT"),
  ("POQUOSON", "VA"),
  ("POQUOTT", "NY"),
  ("PORCUPINE", "SD"),
  ("PORCUPINE", "ND"),
  ("PORT ALEXANDER", "AK"),
  ("PORT ALLEGANY", "PA"),
  ("PORT ALLEN", "LA"),
  ("PORT ALSWORTH", "AK"),
  ("PORT ANGELES", "WA"),
  ("PORT ANGELES EAST", "WA"),
  ("PORT ARANSAS", "TX"),
  ("PORT ARTHUR", "TX"),
  ("PORT AUSTIN", "MI"),
  ("PORT BARRE", "LA"),
  ("PORT BARRINGTON", "IL"),
  ("PORT BYRON", "IL"),
  ("PORT BYRON", "NY"),
  ("PORT CARBON", "PA"),
  ("PORT CHARLOTTE", "FL"),
  ("PORT CHESTER", "NY"),
  ("PORT CLARENCE", "AK"),
  ("PORT CLINTON", "OH"),
  ("PORT CLINTON", "PA"),
  ("PORT COLDEN", "NJ"),
  ("PORT COSTA", "CA"),
  ("PORT DEPOSIT", "MD"),
  ("PORT DICKINSON", "NY"),
  ("PORT EDWARDS", "WI"),
  ("PORT EWEN", "NY"),
  ("PORT GAMBLE TRIBAL COMUNITY", "WA"),
  ("PORT GIBSON", "MS"),
  ("PORT GIBSON", "NY"),
  ("PORT GRAHAM", "AK"),
  ("PORT HADLOCK-IRONDALE", "WA"),
  ("PORT HEIDEN", "AK"),
  ("PORT HENRY", "NY"),
  ("PORT HOPE", "MI"),
  ("PORT HUENEME", "CA"),
  ("PORT HURON", "MI"),
  ("PORT ISABEL", "TX"),
  ("PORT JEFFERSON", "NY"),
  ("PORT JEFFERSON", "OH"),
  ("PORT JEFFERSON STATION", "NY"),
  ("PORT JERVIS", "NY"),
  ("PORT LABELLE", "FL"),
  ("PORT LAVACA", "TX"),
  ("PORT LEYDEN", "NY"),
  ("PORT LIONS", "AK"),
  ("PORT LUDLOW", "WA"),
  ("PORT MANSFIELD", "TX"),
  ("PORT MATILDA", "PA"),
  ("PORT MONMOUTH", "NJ"),
  ("PORT MURRAY", "NJ"),
  ("PORT NECHES", "TX"),
  ("PORT NORRIS", "NJ"),
  ("PORT O'CONNOR", "TX"),
  ("PORT ORANGE", "FL"),
  ("PORT ORCHARD", "WA"),
  ("PORT ORFORD", "OR"),
  ("PORT PROTECTION", "AK"),
  ("PORT READING", "NJ"),
  ("PORT REPUBLIC", "NJ"),
  ("PORT RICHEY", "FL"),
  ("PORT ROYAL", "SC"),
  ("PORT ROYAL", "PA"),
  ("PORT ROYAL", "VA"),
  ("PORT SALERNO", "FL"),
  ("PORT SANILAC", "MI"),
  ("PORT ST. JOE", "FL"),
  ("PORT ST. JOHN", "FL"),
  ("PORT ST. LUCIE", "FL"),
  ("PORT SULPHUR", "LA"),
  ("PORT TOBACCO VILLAGE", "MD"),
  ("PORT TOWNSEND", "WA"),
  ("PORT TREVORTON", "PA"),
  ("PORT VINCENT", "LA"),
  ("PORT VUE", "PA"),
  ("PORT WASHINGTON", "WI"),
  ("PORT WASHINGTON", "NY"),
  ("PORT WASHINGTON", "OH"),
  ("PORT WASHINGTON NORTH", "NY"),
  ("PORT WENTWORTH", "GA"),
  ("PORT WILLIAM", "OH"),
  ("PORT WING", "WI"),
  ("PORTAGE", "MI"),
  ("PORTAGE", "IN"),
  ("PORTAGE", "WI"),
  ("PORTAGE", "UT"),
  ("PORTAGE", "OH"),
  ("PORTAGE", "PA"),
  ("PORTAGE CREEK", "AK"),
  ("PORTAGE DES SIOUX", "MO"),
  ("PORTAGE LAKES", "OH"),
  ("PORTAGEVILLE", "MO"),
  ("PORTAL", "GA"),
  ("PORTAL", "ND"),
  ("PORTALES", "NM"),
  ("PORTER", "WA"),
  ("PORTER", "IN"),
  ("PORTER", "MN"),
  ("PORTER", "OK"),
  ("PORTER HEIGHTS", "TX"),
  ("PORTERDALE", "GA"),
  ("PORTERS NECK", "NC"),
  ("PORTERSVILLE", "PA"),
  ("PORTERVILLE", "CA"),
  ("PORTIA", "AR"),
  ("PORTIS", "KS"),
  ("PORTLAND", "OR"),
  ("PORTLAND", "ME"),
  ("PORTLAND", "TN"),
  ("PORTLAND", "TX"),
  ("PORTLAND", "CT"),
  ("PORTLAND", "IN"),
  ("PORTLAND", "CO"),
  ("PORTLAND", "MI"),
  ("PORTLAND", "AR"),
  ("PORTLAND", "ND"),
  ("PORTLAND", "PA"),
  ("PORTLAND", "IA"),
  ("PORTOLA", "CA"),
  ("PORTOLA VALLEY", "CA"),
  ("PORTSMOUTH", "VA"),
  ("PORTSMOUTH", "NH"),
  ("PORTSMOUTH", "OH"),
  ("PORTSMOUTH", "IA"),
  ("PORTVILLE", "NY"),
  ("PORUM", "OK"),
  ("POSEN", "IL"),
  ("POSEN", "MI"),
  ("POSEY", "CA"),
  ("POSEYVILLE", "IN"),
  ("POSO PARK", "CA"),
  ("POST", "TX"),
  ("POST FALLS", "ID"),
  ("POST LAKE", "WI"),
  ("POST OAK BEND CITY", "TX"),
  ("POSTON", "AZ"),
  ("POSTVILLE", "IA"),
  ("POTALA PASTILLO", "PR"),
  ("POTEAU", "OK"),
  ("POTEET", "TX"),
  ("POTH", "TX"),
  ("POTLATCH", "ID"),
  ("POTLICKER FLATS", "PA"),
  ("POTOMAC", "MD"),
  ("POTOMAC", "IL"),
  ("POTOMAC HEIGHTS", "MD"),
  ("POTOMAC MILLS", "VA"),
  ("POTOMAC PARK", "MD"),
  ("POTOSI", "TX"),
  ("POTOSI", "MO"),
  ("POTOSI", "WI"),
  ("POTRERO", "CA"),
  ("POTSDAM", "NY"),
  ("POTSDAM", "OH"),
  ("POTTAWATTAMIE PARK", "IN"),
  ("POTTER", "WI"),
  ("POTTER", "NE"),
  ("POTTER LAKE", "WI"),
  ("POTTER VALLEY", "CA"),
  ("POTTERS HILL", "NC"),
  ("POTTERSVILLE", "NY"),
  ("POTTERVILLE", "MI"),
  ("POTTERY ADDITION", "OH"),
  ("POTTS CAMP", "MS"),
  ("POTTSBORO", "TX"),
  ("POTTSGROVE", "PA"),
  ("POTTSTOWN", "PA"),
  ("POTTSVILLE", "AR"),
  ("POTTSVILLE", "PA"),
  ("POTWIN", "KS"),
  ("POUGHKEEPSIE", "NY"),
  ("POULAN", "GA"),
  ("POULSBO", "WA"),
  ("POULTNEY", "VT"),
  ("POUND", "VA"),
  ("POUND", "WI"),
  ("POWAY", "CA"),
  ("POWDER RIVER", "WY"),
  ("POWDER SPRINGS", "GA"),
  ("POWDERLY", "TX"),
  ("POWDERLY", "KY"),
  ("POWDERSVILLE", "SC"),
  ("POWELL", "AL"),
  ("POWELL", "OH"),
  ("POWELL", "WY"),
  ("POWELL", "TX"),
  ("POWELLS CROSSROADS", "TN"),
  ("POWELLSVILLE", "NC"),
  ("POWELLTON", "WV"),
  ("POWELLVILLE", "MD"),
  ("POWER", "MT"),
  ("POWERS", "MI"),
  ("POWERS", "OR"),
  ("POWERS LAKE", "WI"),
  ("POWERS LAKE", "ND"),
  ("POWERSVILLE", "MO"),
  ("POWHATAN", "LA"),
  ("POWHATAN", "AR"),
  ("POWHATAN POINT", "OH"),
  ("POWHATTAN", "KS"),
  ("POY SIPPI", "WI"),
  ("POYDRAS", "LA"),
  ("POYEN", "AR"),
  ("POYNETTE", "WI"),
  ("POYNOR", "TX"),
  ("PRADO VERDE", "TX"),
  ("PRAGUE", "OK"),
  ("PRAGUE", "NE"),
  ("PRAIRIE CITY", "SD"),
  ("PRAIRIE CITY", "IA"),
  ("PRAIRIE CITY", "IL"),
  ("PRAIRIE CITY", "OR"),
  ("PRAIRIE CREEK", "AR"),
  ("PRAIRIE DU CHIEN", "WI"),
  ("PRAIRIE DU ROCHER", "IL"),
  ("PRAIRIE DU SAC", "WI"),
  ("PRAIRIE FARM", "WI"),
  ("PRAIRIE GROVE", "AR"),
  ("PRAIRIE GROVE", "IL"),
  ("PRAIRIE HEIGHTS", "WA"),
  ("PRAIRIE HOME", "MO"),
  ("PRAIRIE RIDGE", "WA"),
  ("PRAIRIE ROSE", "ND"),
  ("PRAIRIE VIEW", "TX"),
  ("PRAIRIE VIEW", "KS"),
  ("PRAIRIE VILLAGE", "KS"),
  ("PRAIRIEBURG", "IA"),
  ("PRAIRIEVILLE", "LA"),
  ("PRATHERSVILLE", "MO"),
  ("PRATT", "KS"),
  ("PRATT", "WV"),
  ("PRATTSBURGH", "NY"),
  ("PRATTSVILLE", "NY"),
  ("PRATTSVILLE", "AR"),
  ("PRATTVILLE", "AL"),
  ("PRATTVILLE", "CA"),
  ("PRAY", "MT"),
  ("PREMONT", "TX"),
  ("PRENTICE", "WI"),
  ("PRENTISS", "MS"),
  ("PRESCOTT", "AZ"),
  ("PRESCOTT", "AR"),
  ("PRESCOTT", "WI"),
  ("PRESCOTT", "MI"),
  ("PRESCOTT", "WA"),
  ("PRESCOTT", "IA"),
  ("PRESCOTT", "KS"),
  ("PRESCOTT", "OR"),
  ("PRESCOTT VALLEY", "AZ"),
  ("PRESHO", "SD"),
  ("PRESIDENTIAL LAKES ESTATES", "NJ"),
  ("PRESIDIO", "TX"),
  ("PRESQUE ISLE", "ME"),
  ("PRESQUE ISLE HARBOR", "MI"),
  ("PRESQUILLE", "LA"),
  ("PRESTBURY", "IL"),
  ("PRESTON", "ID"),
  ("PRESTON", "TX"),
  ("PRESTON", "MN"),
  ("PRESTON", "NV"),
  ("PRESTON", "IA"),
  ("PRESTON", "MO"),
  ("PRESTON", "MD"),
  ("PRESTON", "KS"),
  ("PRESTON", "NE"),
  ("PRESTON HEIGHTS", "IL"),
  ("PRESTON-POTTER HOLLOW", "NY"),
  ("PRESTONSBURG", "KY"),
  ("PRESTONVILLE", "KY"),
  ("PRETTY BAYOU", "FL"),
  ("PRETTY PRAIRIE", "KS"),
  ("PRICE", "UT"),
  ("PRICES FORK", "VA"),
  ("PRICEVILLE", "AL"),
  ("PRICHARD", "AL"),
  ("PRICHARD", "WV"),
  ("PRIEN", "LA"),
  ("PRIEST RIVER", "ID"),
  ("PRIMERA", "TX"),
  ("PRIMGHAR", "IA"),
  ("PRIMROSE", "AK"),
  ("PRIMROSE", "NE"),
  ("PRINCE", "WV"),
  ("PRINCE FREDERICK", "MD"),
  ("PRINCE GEORGE", "VA"),
  ("PRINCES LAKES", "IN"),
  ("PRINCESS ANNE", "MD"),
  ("PRINCETON", "KY"),
  ("PRINCETON", "IL"),
  ("PRINCETON", "TX"),
  ("PRINCETON", "FL"),
  ("PRINCETON", "IN"),
  ("PRINCETON", "MN"),
  ("PRINCETON", "WV"),
  ("PRINCETON", "IA"),
  ("PRINCETON", "NJ"),
  ("PRINCETON", "CA"),
  ("PRINCETON", "MO"),
  ("PRINCETON", "WI"),
  ("PRINCETON", "NC"),
  ("PRINCETON", "SC"),
  ("PRINCETON", "ID"),
  ("PRINCETON", "KS"),
  ("PRINCETON JUNCTION", "NJ"),
  ("PRINCETON MEADOWS", "NJ"),
  ("PRINCEVILLE", "HI"),
  ("PRINCEVILLE", "IL"),
  ("PRINCEVILLE", "NC"),
  ("PRINEVILLE", "OR"),
  ("PRINGLE", "PA"),
  ("PRINGLE", "SD"),
  ("PRINSBURG", "MN"),
  ("PRIOR LAKE", "MN"),
  ("PRITCHETT", "CO"),
  ("PRIVATEER", "SC"),
  ("PROBERTA", "CA"),
  ("PROCTOR", "OK"),
  ("PROCTOR", "MN"),
  ("PROCTORSVILLE", "VT"),
  ("PROCTORVILLE", "NC"),
  ("PROCTORVILLE", "OH"),
  ("PROGRESO", "TX"),
  ("PROGRESO LAKES", "TX"),
  ("PROGRESS", "PA"),
  ("PROGRESS VILLAGE", "FL"),
  ("PROMISE CITY", "IA"),
  ("PROMISED LAND", "SC"),
  ("PROMPTON", "PA"),
  ("PRONGHORN", "OR"),
  ("PROPHETSTOWN", "IL"),
  ("PROSPECT", "PA"),
  ("PROSPECT", "NC"),
  ("PROSPECT", "KY"),
  ("PROSPECT", "OR"),
  ("PROSPECT", "LA"),
  ("PROSPECT", "OH"),
  ("PROSPECT", "NY"),
  ("PROSPECT HEIGHTS", "IL"),
  ("PROSPECT PARK", "PA"),
  ("PROSPECT PARK", "PA"),
  ("PROSPECT PARK", "NJ"),
  ("PROSPER", "TX"),
  ("PROSPERITY", "WV"),
  ("PROSPERITY", "SC"),
  ("PROSSER", "WA"),
  ("PROSSER", "NE"),
  ("PROTECTION", "KS"),
  ("PROTIVIN", "IA"),
  ("PROVENCAL", "LA"),
  ("PROVIDENCE", "RI"),
  ("PROVIDENCE", "KY"),
  ("PROVIDENCE", "UT"),
  ("PROVIDENCE", "AL"),
  ("PROVIDENCE", "TX"),
  ("PROVINCETOWN", "MA"),
  ("PROVO", "UT"),
  ("PRUDENVILLE", "MI"),
  ("PRUDHOE BAY", "AK"),
  ("PRUE", "OK"),
  ("PRUNEDALE", "CA"),
  ("PRYOR", "MT"),
  ("PRYOR CREEK", "OK"),
  ("PRYORSBURG", "KY"),
  ("PUAKO", "HI"),
  ("PUCKETT", "MS"),
  ("PUEBLITO", "NM"),
  ("PUEBLITO DEL CARMEN", "PR"),
  ("PUEBLITO DEL RÌO", "PR"),
  ("PUEBLITOS", "NM"),
  ("PUEBLO", "CO"),
  ("PUEBLO", "NM"),
  ("PUEBLO EAST", "TX"),
  ("PUEBLO NUEVO", "TX"),
  ("PUEBLO OF SANDIA VILLAGE", "NM"),
  ("PUEBLO PINTADO", "NM"),
  ("PUEBLO WEST", "CO"),
  ("PUERTO DE LUNA", "NM"),
  ("PUERTO REAL", "PR"),
  ("PUGET ISLAND", "WA"),
  ("PUHI", "HI"),
  ("PUKALANI", "HI"),
  ("PUKWANA", "SD"),
  ("PULASKI", "VA"),
  ("PULASKI", "TN"),
  ("PULASKI", "NY"),
  ("PULASKI", "WI"),
  ("PULASKI", "IL"),
  ("PULASKI", "GA"),
  ("PULASKI", "IA"),
  ("PULASKI", "OH"),
  ("PULCIFER", "WI"),
  ("PULLMAN", "WA"),
  ("PULLMAN", "WV"),
  ("PULPOTIO BAREAS", "NM"),
  ("PULTNEYVILLE", "NY"),
  ("PUMP BACK", "OK"),
  ("PUMPKIN CENTER", "NC"),
  ("PUNALUU", "HI"),
  ("PUNGOTEAGUE", "VA"),
  ("PUNTA GORDA", "FL"),
  ("PUNTA RASSA", "FL"),
  ("PUNTA SANTIAGO", "PR"),
  ("PUNXSUTAWNEY", "PA"),
  ("PUPUKEA", "HI"),
  ("PURCELL", "OK"),
  ("PURCELL", "MO"),
  ("PURCELLVILLE", "VA"),
  ("PURDIN", "MO"),
  ("PURDUE UNIVERSITY", "IN"),
  ("PURDY", "WA"),
  ("PURDY", "MO"),
  ("PURPLE SAGE", "WY"),
  ("PURVIS", "MS"),
  ("PURYEAR", "TN"),
  ("PUT-IN-BAY", "OH"),
  ("PUTNAM", "AL"),
  ("PUTNAM", "CT"),
  ("PUTNAM", "TX"),
  ("PUTNAM", "OK"),
  ("PUTNAM LAKE", "NY"),
  ("PUTNEY", "GA"),
  ("PUTNEY", "VT"),
  ("PUXICO", "MO"),
  ("PUYALLUP", "WA"),
  ("PYATT", "AR"),
  ("PYLESVILLE", "MD"),
  ("PYMATUNING CENTRAL", "PA"),
  ("PYMATUNING NORTH", "PA"),
  ("PYMATUNING SOUTH", "PA"),
  ("PYOTE", "TX"),
  ("QUAIL", "TX"),
  ("QUAIL CREEK", "TX"),
  ("QUAIL RIDGE", "FL"),
  ("QUAKER CITY", "OH"),
  ("QUAKERTOWN", "PA"),
  ("QUAMBA", "MN"),
  ("QUANAH", "TX"),
  ("QUANTICO", "MD"),
  ("QUANTICO", "VA"),
  ("QUANTICO BASE", "VA"),
  ("QUAPAW", "OK"),
  ("QUARRYVILLE", "PA"),
  ("QUARTZ HILL", "CA"),
  ("QUARTZSITE", "AZ"),
  ("QUASQUETON", "IA"),
  ("QUEBRADA", "PR"),
  ("QUEBRADA DEL AGUA", "PR"),
  ("QUEBRADILLAS", "PR"),
  ("QUECHEE", "VT"),
  ("QUEEN ANNE", "MD"),
  ("QUEEN ANNE", "MD"),
  ("QUEEN CITY", "TX"),
  ("QUEEN CITY", "MO"),
  ("QUEEN CREEK", "AZ"),
  ("QUEEN VALLEY", "AZ"),
  ("QUEENLAND", "MD"),
  ("QUEENS GATE", "PA"),
  ("QUEENSTOWN", "MD"),
  ("QUEETS", "WA"),
  ("QUEMADO", "NM"),
  ("QUEMADO", "TX"),
  ("QUENEMO", "KS"),
  ("QUENTIN", "PA"),
  ("QUESADA", "TX"),
  ("QUESTA", "NM"),
  ("QUILCENE", "WA"),
  ("QUIMBY", "IA"),
  ("QUI-NAI-ELT VILLAGE", "WA"),
  ("QUINBY", "SC"),
  ("QUINBY", "VA"),
  ("QUINCY", "MA"),
  ("QUINCY", "IL"),
  ("QUINCY", "FL"),
  ("QUINCY", "WA"),
  ("QUINCY", "CA"),
  ("QUINCY", "MI"),
  ("QUINCY", "OH"),
  ("QUINEBAUG", "CT"),
  ("QUINHAGAK", "AK"),
  ("QUINLAN", "TX"),
  ("QUINN", "SD"),
  ("QUINNESEC", "MI"),
  ("QUINTANA", "TX"),
  ("QUINTER", "KS"),
  ("QUINTON", "OK"),
  ("QUINTON", "NJ"),
  ("QUINWOOD", "WV"),
  ("QUIOGUE", "NY"),
  ("QUITAQUE", "TX"),
  ("QUITMAN", "MS"),
  ("QUITMAN", "GA"),
  ("QUITMAN", "AR"),
  ("QUITMAN", "TX"),
  ("QUITMAN", "LA"),
  ("QUITMAN", "MO"),
  ("QULIN", "MO"),
  ("QUOGUE", "NY"),
  ("QUONOCHONTAUG", "RI"),
  ("RABBIT HASH", "KY"),
  ("RACELAND", "LA"),
  ("RACELAND", "KY"),
  ("RACHEL", "NV"),
  ("RACHEL", "WV"),
  ("RACINE", "WI"),
  ("RACINE", "MN"),
  ("RACINE", "WV"),
  ("RACINE", "OH"),
  ("RACKERBY", "CA"),
  ("RADAR BASE", "TX"),
  ("RADCLIFF", "KY"),
  ("RADCLIFFE", "IA"),
  ("RADER CREEK", "MT"),
  ("RADERSBURG", "MT"),
  ("RADFORD", "VA"),
  ("RADISSON", "WI"),
  ("RADIUM", "KS"),
  ("RADIUM SPRINGS", "NM"),
  ("RADNOR", "OH"),
  ("RADOM", "IL"),
  ("RAEFORD", "NC"),
  ("RAEMON", "NC"),
  ("RAEVILLE", "NE"),
  ("RAFAEL CAPÛ", "PR"),
  ("RAFAEL GONZ·LEZ", "PR"),
  ("RAFAEL HERN·NDEZ", "PR"),
  ("RAFAEL PENA", "TX"),
  ("RAFT ISLAND", "WA"),
  ("RAFTER J RANCH", "WY"),
  ("RAGAN", "NE"),
  ("RAGLAND", "AL"),
  ("RAGLESVILLE", "IN"),
  ("RAGSDALE", "IN"),
  ("RAHWAY", "NJ"),
  ("RAIFORD", "FL"),
  ("RAIL ROAD FLAT", "CA"),
  ("RAILROAD", "PA"),
  ("RAINBOW", "CA"),
  ("RAINBOW CITY", "AL"),
  ("RAINBOW CITY", "AZ"),
  ("RAINELLE", "WV"),
  ("RAINIER", "OR"),
  ("RAINIER", "WA"),
  ("RAINSBURG", "PA"),
  ("RAINSVILLE", "AL"),
  ("RAISIN CITY", "CA"),
  ("RAKE", "IA"),
  ("RALEIGH", "NC"),
  ("RALEIGH", "MS"),
  ("RALEIGH", "IL"),
  ("RALEIGH", "FL"),
  ("RALEIGH", "ND"),
  ("RALEIGH HILLS", "OR"),
  ("RALLS", "TX"),
  ("RALSTON", "WY"),
  ("RALSTON", "IA"),
  ("RALSTON", "NE"),
  ("RALSTON", "OK"),
  ("RAMAH", "NM"),
  ("RAMAH", "CO"),
  ("RAMBLEWOOD", "NJ"),
  ("RAMBLEWOOD", "PA"),
  ("RAMER", "TN"),
  ("RAMEY", "PA"),
  ("RAMIRENO", "TX"),
  ("RAMIREZ-PEREZ", "TX"),
  ("RAMONA", "CA"),
  ("RAMONA", "OK"),
  ("RAMONA", "KS"),
  ("RAMONA", "SD"),
  ("RAMOS", "TX"),
  ("RAMOS", "PR"),
  ("RAMPART", "AK"),
  ("RAMSEUR", "NC"),
  ("RAMSEY", "MN"),
  ("RAMSEY", "NJ"),
  ("RAMSEY", "IL"),
  ("RAMTOWN", "NJ"),
  ("RANBURNE", "AL"),
  ("RANCHESTER", "WY"),
  ("RANCHETTE ESTATES", "TX"),
  ("RANCHETTES", "WY"),
  ("RANCHITOS DEL NORTE", "TX"),
  ("RANCHITOS EAST", "TX"),
  ("RANCHITOS LAS LOMAS", "TX"),
  ("RANCHO ALEGRE", "TX"),
  ("RANCHO BANQUETE", "TX"),
  ("RANCHO CALAVERAS", "CA"),
  ("RANCHO CHICO", "TX"),
  ("RANCHO CORDOVA", "CA"),
  ("RANCHO CUCAMONGA", "CA"),
  ("RANCHO GRANDE", "NM"),
  ("RANCHO MESA VERDE", "AZ"),
  ("RANCHO MIRAGE", "CA"),
  ("RANCHO MURIETA", "CA"),
  ("RANCHO PALOS VERDES", "CA"),
  ("RANCHO SAN DIEGO", "CA"),
  ("RANCHO SANTA FE", "CA"),
  ("RANCHO SANTA MARGARITA", "CA"),
  ("RANCHO TEHAMA RESERVE", "CA"),
  ("RANCHO VIEJO", "TX"),
  ("RANCHO VIEJO", "TX"),
  ("RANCHOS DE TAOS", "NM"),
  ("RANCHOS PENITAS WEST", "TX"),
  ("RAND", "WV"),
  ("RANDALIA", "IA"),
  ("RANDALL", "MN"),
  ("RANDALL", "IA"),
  ("RANDALL", "KS"),
  ("RANDALLSTOWN", "MD"),
  ("RANDLEMAN", "NC"),
  ("RANDLETT", "UT"),
  ("RANDLETT", "OK"),
  ("RANDOLPH", "MA"),
  ("RANDOLPH", "VT"),
  ("RANDOLPH", "NY"),
  ("RANDOLPH", "ME"),
  ("RANDOLPH", "WI"),
  ("RANDOLPH", "UT"),
  ("RANDOLPH", "MN"),
  ("RANDOLPH", "NE"),
  ("RANDOLPH", "MO"),
  ("RANDOLPH", "IA"),
  ("RANDOLPH", "KS"),
  ("RANDOLPH AFB", "TX"),
  ("RANDOM LAKE", "WI"),
  ("RANDSBURG", "CA"),
  ("RANGELY", "CO"),
  ("RANGER", "TX"),
  ("RANGER", "GA"),
  ("RANGERVILLE", "TX"),
  ("RANIER", "MN"),
  ("RANKIN", "TX"),
  ("RANKIN", "IL"),
  ("RANKIN", "PA"),
  ("RANLO", "NC"),
  ("RANSHAW", "PA"),
  ("RANSOM", "IL"),
  ("RANSOM", "KS"),
  ("RANSOM CANYON", "TX"),
  ("RANSOMVILLE", "NY"),
  ("RANSON CORPORATION", "WV"),
  ("RANTOUL", "IL"),
  ("RANTOUL", "KS"),
  ("RAOUL", "GA"),
  ("RAPID CITY", "SD"),
  ("RAPID CITY", "MI"),
  ("RAPID VALLEY", "SD"),
  ("RAPIDS", "NY"),
  ("RAPIDS CITY", "IL"),
  ("RARDEN", "OH"),
  ("RARITAN", "NJ"),
  ("RARITAN", "IL"),
  ("RATAMOSA", "TX"),
  ("RATCLIFF", "AR"),
  ("RATHBUN", "IA"),
  ("RATHDRUM", "ID"),
  ("RATLIFF CITY", "OK"),
  ("RATON", "NM"),
  ("RATTAN", "OK"),
  ("RAUBSVILLE", "PA"),
  ("RAUCHTOWN", "PA"),
  ("RAVALLI", "MT"),
  ("RAVANNA", "MO"),
  ("RAVEN", "VA"),
  ("RAVENA", "NY"),
  ("RAVENDEN", "AR"),
  ("RAVENDEN SPRINGS", "AR"),
  ("RAVENEL", "SC"),
  ("RAVENNA", "OH"),
  ("RAVENNA", "NE"),
  ("RAVENNA", "MI"),
  ("RAVENNA", "TX"),
  ("RAVENNA", "KY"),
  ("RAVENSDALE", "WA"),
  ("RAVENSWOOD", "WV"),
  ("RAVENSWORTH", "VA"),
  ("RAVENWOOD", "MO"),
  ("RAVIA", "OK"),
  ("RAVINE", "PA"),
  ("RAVINIA", "SD"),
  ("RAWLINGS", "MD"),
  ("RAWLINS", "WY"),
  ("RAWLS SPRINGS", "MS"),
  ("RAWSON", "OH"),
  ("RAY", "AL"),
  ("RAY", "ND"),
  ("RAY CITY", "GA"),
  ("RAYLAND", "OH"),
  ("RAYLE", "GA"),
  ("RAYMER (NEW RAYMER)", "CO"),
  ("RAYMOND", "NH"),
  ("RAYMOND", "WA"),
  ("RAYMOND", "MS"),
  ("RAYMOND", "IA"),
  ("RAYMOND", "IL"),
  ("RAYMOND", "OH"),
  ("RAYMOND", "MN"),
  ("RAYMOND", "KS"),
  ("RAYMOND", "SD"),
  ("RAYMOND", "NE"),
  ("RAYMONDVILLE", "TX"),
  ("RAYMONDVILLE", "MO"),
  ("RAYMORE", "MO"),
  ("RAYNE", "LA"),
  ("RAYNHAM", "NC"),
  ("RAYNHAM CENTER", "MA"),
  ("RAYSAL", "WV"),
  ("RAYTOWN", "MO"),
  ("RAYVILLE", "LA"),
  ("RAYVILLE", "MO"),
  ("RAYWICK", "KY"),
  ("REA", "MO"),
  ("READER", "AR"),
  ("READER", "WV"),
  ("READING", "MA"),
  ("READING", "PA"),
  ("READING", "OH"),
  ("READING", "MI"),
  ("READING", "KS"),
  ("READLYN", "IA"),
  ("READSBORO", "VT"),
  ("READSTOWN", "WI"),
  ("REALITOS", "TX"),
  ("REAMSTOWN", "PA"),
  ("REARDAN", "WA"),
  ("REASNOR", "IA"),
  ("REBECCA", "GA"),
  ("REBERSBURG", "PA"),
  ("RECTOR", "AR"),
  ("RED BANK", "SC"),
  ("RED BANK", "TN"),
  ("RED BANK", "NJ"),
  ("RED BAY", "AL"),
  ("RED BLUFF", "CA"),
  ("RED BOILING SPRINGS", "TN"),
  ("RED BUD", "IL"),
  ("RED BUTTE", "WY"),
  ("RED CHUTE", "LA"),
  ("RED CLIFF", "CO"),
  ("RED CLOUD", "NE"),
  ("RED CORRAL", "CA"),
  ("RED CREEK", "NY"),
  ("RED CROSS", "NC"),
  ("RED DEVIL", "AK"),
  ("RED DOG MINE", "AK"),
  ("RED FEATHER LAKES", "CO"),
  ("RED HILL", "SC"),
  ("RED HILL", "PA"),
  ("RED HOOK", "NY"),
  ("RED JACKET", "WV"),
  ("RED LAKE", "MN"),
  ("RED LAKE FALLS", "MN"),
  ("RED LEVEL", "AL"),
  ("RED LICK", "TX"),
  ("RED LION", "PA"),
  ("RED LODGE", "MT"),
  ("RED MESA", "AZ"),
  ("RED OAK", "NC"),
  ("RED OAK", "TX"),
  ("RED OAK", "IA"),
  ("RED OAK", "OK"),
  ("RED OAKS MILL", "NY"),
  ("RED RIVER", "NM"),
  ("RED ROCK", "AZ"),
  ("RED ROCK", "AZ"),
  ("RED ROCK", "OK"),
  ("RED SPRINGS", "NC"),
  ("RED WING", "MN"),
  ("REDAN", "GA"),
  ("REDBIRD", "OK"),
  ("REDBIRD SMITH", "OK"),
  ("REDBY", "MN"),
  ("REDCREST", "CA"),
  ("REDDELL", "LA"),
  ("REDDICK", "FL"),
  ("REDDICK", "IL"),
  ("REDDING", "CA"),
  ("REDDING", "IA"),
  ("REDFIELD", "AR"),
  ("REDFIELD", "SD"),
  ("REDFIELD", "TX"),
  ("REDFIELD", "IA"),
  ("REDFIELD", "KS"),
  ("REDFORD", "TX"),
  ("REDFORD", "NY"),
  ("REDGRANITE", "WI"),
  ("REDINGS MILL", "MO"),
  ("REDINGTON BEACH", "FL"),
  ("REDINGTON SHORES", "FL"),
  ("REDKEY", "IN"),
  ("REDLAND", "AL"),
  ("REDLAND", "MD"),
  ("REDLAND", "TX"),
  ("REDLANDS", "CA"),
  ("REDLANDS", "CO"),
  ("REDMON", "IL"),
  ("REDMOND", "OR"),
  ("REDMOND", "WA"),
  ("REDMOND", "UT"),
  ("REDONDO BEACH", "CA"),
  ("REDSTONE", "CO"),
  ("REDSTONE ARSENAL", "AL"),
  ("REDVALE", "CO"),
  ("REDWATER", "MS"),
  ("REDWATER", "TX"),
  ("REDWAY", "CA"),
  ("REDWOOD", "TX"),
  ("REDWOOD", "OR"),
  ("REDWOOD", "NY"),
  ("REDWOOD CITY", "CA"),
  ("REDWOOD FALLS", "MN"),
  ("REDWOOD VALLEY", "CA"),
  ("REE HEIGHTS", "SD"),
  ("REECE CITY", "AL"),
  ("REED", "AR"),
  ("REED CITY", "MI"),
  ("REED CREEK", "GA"),
  ("REED POINT", "MT"),
  ("REEDER", "ND"),
  ("REEDLEY", "CA"),
  ("REEDS", "MO"),
  ("REEDS SPRING", "MO"),
  ("REEDSBURG", "WI"),
  ("REEDSPORT", "OR"),
  ("REEDSVILLE", "WI"),
  ("REEDSVILLE", "PA"),
  ("REEDSVILLE", "WV"),
  ("REEDY", "WV"),
  ("REELTOWN", "AL"),
  ("REESE", "MI"),
  ("REESEVILLE", "WI"),
  ("REEVES", "LA"),
  ("REEVESVILLE", "SC"),
  ("REFORM", "AL"),
  ("REFTON", "PA"),
  ("REFUGIO", "TX"),
  ("REGAL", "MN"),
  ("REGAN", "ND"),
  ("REGENT", "ND"),
  ("REGINA", "NM"),
  ("REGINO RAMIREZ", "TX"),
  ("REGISTER", "GA"),
  ("REHOBETH", "AL"),
  ("REHOBOTH BEACH", "DE"),
  ("REHRERSBURG", "PA"),
  ("REID", "MD"),
  ("REID HOPE KING", "TX"),
  ("REIDLAND", "KY"),
  ("REIDSVILLE", "NC"),
  ("REIDSVILLE", "GA"),
  ("REIDVILLE", "SC"),
  ("REIFFTON", "PA"),
  ("REILE'S ACRES", "ND"),
  ("REINBECK", "IA"),
  ("REINERTON", "PA"),
  ("REINHOLDS", "PA"),
  ("REISTERSTOWN", "MD"),
  ("REKLAW", "TX"),
  ("RELAMPAGO", "TX"),
  ("RELIANCE", "WY"),
  ("RELIANCE", "SD"),
  ("RELIEZ VALLEY", "CA"),
  ("REMBERT", "SC"),
  ("REMBRANDT", "IA"),
  ("REMER", "MN"),
  ("REMERTON", "GA"),
  ("REMINDERVILLE", "OH"),
  ("REMINGTON", "IN"),
  ("REMINGTON", "VA"),
  ("REMINGTON", "OH"),
  ("REMSEN", "IA"),
  ("REMSEN", "NY"),
  ("REMSENBURG-SPEONK", "NY"),
  ("REMY", "OK"),
  ("RENDON", "TX"),
  ("RENDVILLE", "OH"),
  ("RENFROW", "OK"),
  ("RENICK", "MO"),
  ("RENNER CORNER", "SD"),
  ("RENNERDALE", "PA"),
  ("RENNERT", "NC"),
  ("RENNINGERS", "PA"),
  ("RENO", "NV"),
  ("RENO", "TX"),
  ("RENO", "TX"),
  ("RENO", "OH"),
  ("RENOVA", "MS"),
  ("RENOVO", "PA"),
  ("RENSSELAER", "IN"),
  ("RENSSELAER", "NY"),
  ("RENSSELAER", "MO"),
  ("RENSSELAER FALLS", "NY"),
  ("RENTCHLER", "IL"),
  ("RENTIESVILLE", "OK"),
  ("RENTON", "WA"),
  ("RENTZ", "GA"),
  ("RENVILLE", "MN"),
  ("RENWICK", "IA"),
  ("REPTON", "AL"),
  ("REPUBLIC", "MO"),
  ("REPUBLIC", "MI"),
  ("REPUBLIC", "WA"),
  ("REPUBLIC", "OH"),
  ("REPUBLIC", "PA"),
  ("REPUBLIC", "KS"),
  ("REPUBLICAN CITY", "NE"),
  ("RESACA", "GA"),
  ("RESERVE", "WI"),
  ("RESERVE", "LA"),
  ("RESERVE", "MT"),
  ("RESERVE", "NM"),
  ("RESERVE", "KS"),
  ("REST HAVEN", "GA"),
  ("RESTON", "VA"),
  ("RETREAT", "TX"),
  ("RETSOF", "NY"),
  ("REUBENS", "ID"),
  ("REVERE", "MA"),
  ("REVERE", "MN"),
  ("REVERE", "MO"),
  ("REVILLO", "SD"),
  ("REVLOC", "PA"),
  ("REW", "PA"),
  ("REWEY", "WI"),
  ("REX", "NC"),
  ("REXBURG", "ID"),
  ("REXFORD", "KS"),
  ("REXFORD", "MT"),
  ("REYDON", "OK"),
  ("REYNO", "AR"),
  ("REYNOLDS", "GA"),
  ("REYNOLDS", "ND"),
  ("REYNOLDS", "IN"),
  ("REYNOLDS", "IL"),
  ("REYNOLDS", "NE"),
  ("REYNOLDS HEIGHTS", "PA"),
  ("REYNOLDSBURG", "OH"),
  ("REYNOLDSVILLE", "PA"),
  ("RHAME", "ND"),
  ("RHEEMS", "PA"),
  ("RHINE", "GA"),
  ("RHINEBECK", "NY"),
  ("RHINECLIFF", "NY"),
  ("RHINELAND", "MO"),
  ("RHINELANDER", "WI"),
  ("RHODELL", "WV"),
  ("RHODES", "IA"),
  ("RHODHISS", "NC"),
  ("RHOME", "TX"),
  ("RIALTO", "CA"),
  ("RIB LAKE", "WI"),
  ("RIB MOUNTAIN", "WI"),
  ("RIBERA", "NM"),
  ("RICARDO", "TX"),
  ("RICE", "MN"),
  ("RICE", "TX"),
  ("RICE LAKE", "MN"),
  ("RICE LAKE", "WI"),
  ("RICEBORO", "GA"),
  ("RICES LANDING", "PA"),
  ("RICEVILLE", "TN"),
  ("RICEVILLE", "IA"),
  ("RICEVILLE", "PA"),
  ("RICH CREEK", "VA"),
  ("RICH HILL", "MO"),
  ("RICH SQUARE", "NC"),
  ("RICHARDS", "MO"),
  ("RICHARDSON", "TX"),
  ("RICHARDTON", "ND"),
  ("RICHBORO", "PA"),
  ("RICHBURG", "NY"),
  ("RICHBURG", "SC"),
  ("RICHEY", "MT"),
  ("RICHFIELD", "WI"),
  ("RICHFIELD", "OH"),
  ("RICHFIELD", "MN"),
  ("RICHFIELD", "UT"),
  ("RICHFIELD", "NC"),
  ("RICHFIELD", "NE"),
  ("RICHFIELD", "PA"),
  ("RICHFIELD", "KS"),
  ("RICHFIELD", "ID"),
  ("RICHFIELD", "CA"),
  ("RICHFIELD SPRINGS", "NY"),
  ("RICHFORD", "VT"),
  ("RICHGROVE", "CA"),
  ("RICHLAND", "WA"),
  ("RICHLAND", "MS"),
  ("RICHLAND", "SD"),
  ("RICHLAND", "GA"),
  ("RICHLAND", "MO"),
  ("RICHLAND", "PA"),
  ("RICHLAND", "TX"),
  ("RICHLAND", "MI"),
  ("RICHLAND", "IA"),
  ("RICHLAND", "IN"),
  ("RICHLAND", "NE"),
  ("RICHLAND", "OR"),
  ("RICHLAND CENTER", "WI"),
  ("RICHLAND HILLS", "TX"),
  ("RICHLAND SPRINGS", "TX"),
  ("RICHLANDS", "VA"),
  ("RICHLANDS", "NC"),
  ("RICHLANDTOWN", "PA"),
  ("RICHLAWN", "KY"),
  ("RICHMOND", "VA"),
  ("RICHMOND", "CA"),
  ("RICHMOND", "IN"),
  ("RICHMOND", "KY"),
  ("RICHMOND", "ME"),
  ("RICHMOND", "MO"),
  ("RICHMOND", "IL"),
  ("RICHMOND", "TX"),
  ("RICHMOND", "UT"),
  ("RICHMOND", "MI"),
  ("RICHMOND", "LA"),
  ("RICHMOND", "MN"),
  ("RICHMOND", "VT"),
  ("RICHMOND", "OH"),
  ("RICHMOND", "KS"),
  ("RICHMOND DALE", "OH"),
  ("RICHMOND HEIGHTS", "OH"),
  ("RICHMOND HEIGHTS", "MO"),
  ("RICHMOND HEIGHTS", "FL"),
  ("RICHMOND HILL", "GA"),
  ("RICHMOND WEST", "FL"),
  ("RICHMONDVILLE", "NY"),
  ("RICHTON", "MS"),
  ("RICHTON PARK", "IL"),
  ("RICHVALE", "CA"),
  ("RICHVIEW", "IL"),
  ("RICHVILLE", "OH"),
  ("RICHVILLE", "MN"),
  ("RICHVILLE", "NY"),
  ("RICHWOOD", "NJ"),
  ("RICHWOOD", "TX"),
  ("RICHWOOD", "LA"),
  ("RICHWOOD", "WV"),
  ("RICHWOOD", "OH"),
  ("RICKARDSVILLE", "IA"),
  ("RICKETTS", "IA"),
  ("RICKREALL", "OR"),
  ("RICO", "CO"),
  ("RIDDLE", "OR"),
  ("RIDDLEVILLE", "GA"),
  ("RIDGE", "NY"),
  ("RIDGE FARM", "IL"),
  ("RIDGE MANOR", "FL"),
  ("RIDGE SPRING", "SC"),
  ("RIDGE WOOD HEIGHTS", "FL"),
  ("RIDGECREST", "CA"),
  ("RIDGECREST", "FL"),
  ("RIDGECREST", "LA"),
  ("RIDGEFIELD", "WA"),
  ("RIDGEFIELD", "CT"),
  ("RIDGEFIELD", "NJ"),
  ("RIDGEFIELD PARK", "NJ"),
  ("RIDGELAND", "SC"),
  ("RIDGELAND", "MS"),
  ("RIDGELAND", "WI"),
  ("RIDGELEY", "WV"),
  ("RIDGELY", "MD"),
  ("RIDGELY", "TN"),
  ("RIDGELY", "MO"),
  ("RIDGEMARK", "CA"),
  ("RIDGESIDE", "TN"),
  ("RIDGETOP", "TN"),
  ("RIDGEVILLE", "SC"),
  ("RIDGEVILLE", "AL"),
  ("RIDGEVILLE", "IN"),
  ("RIDGEVILLE CORNERS", "OH"),
  ("RIDGEWAY", "AK"),
  ("RIDGEWAY", "WI"),
  ("RIDGEWAY", "MO"),
  ("RIDGEWAY", "IA"),
  ("RIDGEWAY", "VA"),
  ("RIDGEWAY", "OH"),
  ("RIDGEWAY", "SC"),
  ("RIDGEWOOD", "NJ"),
  ("RIDGWAY", "PA"),
  ("RIDGWAY", "CO"),
  ("RIDGWAY", "IL"),
  ("RIDLEY PARK", "PA"),
  ("RIDOTT", "IL"),
  ("RIEGELSVILLE", "PA"),
  ("RIEGELWOOD", "NC"),
  ("RIENZI", "MS"),
  ("RIESEL", "TX"),
  ("RIFLE", "CO"),
  ("RIFTON", "NY"),
  ("RIGBY", "ID"),
  ("RIGGINS", "ID"),
  ("RILEY", "KS"),
  ("RILEY", "IN"),
  ("RILLITO", "AZ"),
  ("RIMERSBURG", "PA"),
  ("RINARD", "IA"),
  ("RINCON", "GA"),
  ("RINCON", "NM"),
  ("RINCON VALLEY", "AZ"),
  ("RINCÛN", "PR"),
  ("RINER", "VA"),
  ("RINGGOLD", "GA"),
  ("RINGGOLD", "LA"),
  ("RINGGOLD", "MD"),
  ("RINGLING", "OK"),
  ("RINGSTED", "IA"),
  ("RINGTOWN", "PA"),
  ("RINGWOOD", "NJ"),
  ("RINGWOOD", "IL"),
  ("RINGWOOD", "OK"),
  ("RIO", "WI"),
  ("RIO", "FL"),
  ("RIO", "IL"),
  ("RÌO BLANCO", "PR"),
  ("RIO BRAVO", "TX"),
  ("RÌO CAÒAS ABAJO", "PR"),
  ("RIO COMMUNITIES", "NM"),
  ("RIO DEL MAR", "CA"),
  ("RIO DELL", "CA"),
  ("RIO EN MEDIO", "NM"),
  ("RIO GRANDE", "NJ"),
  ("RIO GRANDE", "OH"),
  ("RIO GRANDE CITY", "TX"),
  ("RÌO GRANDE", "PR"),
  ("RIO HONDO", "TX"),
  ("RÌO LAJAS", "PR"),
  ("RIO LINDA", "CA"),
  ("RIO LUCIO", "NM"),
  ("RIO OSO", "CA"),
  ("RIO PINAR", "FL"),
  ("RIO RANCHO", "NM"),
  ("RIO RICO", "AZ"),
  ("RIO VERDE", "AZ"),
  ("RIO VISTA", "CA"),
  ("RIO VISTA", "TX"),
  ("RIPLEY", "TN"),
  ("RIPLEY", "MS"),
  ("RIPLEY", "WV"),
  ("RIPLEY", "OH"),
  ("RIPLEY", "CA"),
  ("RIPLEY", "NY"),
  ("RIPLEY", "IL"),
  ("RIPLEY", "OK"),
  ("RIPON", "CA"),
  ("RIPON", "WI"),
  ("RIPPEY", "IA"),
  ("RIRIE", "ID"),
  ("RISCO", "MO"),
  ("RISING CITY", "NE"),
  ("RISING STAR", "TX"),
  ("RISING SUN", "IN"),
  ("RISING SUN", "MD"),
  ("RISING SUN-LEBANON", "DE"),
  ("RISINGSUN", "OH"),
  ("RISON", "AR"),
  ("RITCHEY", "MO"),
  ("RITTMAN", "OH"),
  ("RITZVILLE", "WA"),
  ("RIVA", "MD"),
  ("RIVANNA", "VA"),
  ("RIVER BEND", "NC"),
  ("RIVER BEND", "MO"),
  ("RIVER BLUFF", "KY"),
  ("RIVER BOTTOM", "OK"),
  ("RIVER EDGE", "NJ"),
  ("RIVER FALLS", "AL"),
  ("RIVER FALLS", "WI"),
  ("RIVER FOREST", "IL"),
  ("RIVER FOREST", "IN"),
  ("RIVER GROVE", "IL"),
  ("RIVER HEIGHTS", "UT"),
  ("RIVER HILLS", "WI"),
  ("RIVER OAKS", "TX"),
  ("RIVER PARK", "FL"),
  ("RIVER PINES", "CA"),
  ("RIVER RIDGE", "FL"),
  ("RIVER RIDGE", "LA"),
  ("RIVER ROAD", "NC"),
  ("RIVER ROAD", "WA"),
  ("RIVER ROUGE", "MI"),
  ("RIVER SIOUX", "IA"),
  ("RIVERA", "TX"),
  ("RIVERBANK", "CA"),
  ("RIVERBEND", "MT"),
  ("RIVERBEND", "WA"),
  ("RIVERDALE", "VA"),
  ("RIVERDALE", "UT"),
  ("RIVERDALE", "GA"),
  ("RIVERDALE", "CA"),
  ("RIVERDALE", "IL"),
  ("RIVERDALE", "NJ"),
  ("RIVERDALE", "IA"),
  ("RIVERDALE", "ND"),
  ("RIVERDALE", "NE"),
  ("RIVERDALE PARK", "MD"),
  ("RIVERDALE PARK", "CA"),
  ("RIVERENO", "TX"),
  ("RIVERGROVE", "OR"),
  ("RIVERHEAD", "NY"),
  ("RIVERLAND", "MN"),
  ("RIVERLEA", "OH"),
  ("RIVERS", "NM"),
  ("RIVERSIDE", "CA"),
  ("RIVERSIDE", "OH"),
  ("RIVERSIDE", "AL"),
  ("RIVERSIDE", "UT"),
  ("RIVERSIDE", "MO"),
  ("RIVERSIDE", "PA"),
  ("RIVERSIDE", "NY"),
  ("RIVERSIDE", "CT"),
  ("RIVERSIDE", "MD"),
  ("RIVERSIDE", "ID"),
  ("RIVERSIDE", "TX"),
  ("RIVERSIDE", "IL"),
  ("RIVERSIDE", "IA"),
  ("RIVERSIDE", "WA"),
  ("RIVERSIDE", "OR"),
  ("RIVERSIDE", "NY"),
  ("RIVERSIDE", "WY"),
  ("RIVERSIDE", "GA"),
  ("RIVERSIDE", "PA"),
  ("RIVERTON", "UT"),
  ("RIVERTON", "WY"),
  ("RIVERTON", "KS"),
  ("RIVERTON", "IL"),
  ("RIVERTON", "WA"),
  ("RIVERTON", "MN"),
  ("RIVERTON", "NJ"),
  ("RIVERTON", "IA"),
  ("RIVERTON", "NE"),
  ("RIVERVIEW", "FL"),
  ("RIVERVIEW", "MI"),
  ("RIVERVIEW", "DE"),
  ("RIVERVIEW", "SC"),
  ("RIVERVIEW", "AL"),
  ("RIVERVIEW", "MO"),
  ("RIVERVIEW", "VA"),
  ("RIVERVIEW ESTATES", "MO"),
  ("RIVERVIEW PARK", "PA"),
  ("RIVERWOOD", "KY"),
  ("RIVERWOODS", "IL"),
  ("RIVES", "MO"),
  ("RIVES", "TN"),
  ("RIVESVILLE", "WV"),
  ("RIVIERA", "TX"),
  ("RIVIERA BEACH", "FL"),
  ("RIVIERA BEACH", "MD"),
  ("ROACHDALE", "IN"),
  ("ROAMING SHORES", "OH"),
  ("ROAN MOUNTAIN", "TN"),
  ("ROANN", "IN"),
  ("ROANOKE", "VA"),
  ("ROANOKE", "AL"),
  ("ROANOKE", "TX"),
  ("ROANOKE", "IN"),
  ("ROANOKE", "IL"),
  ("ROANOKE", "LA"),
  ("ROANOKE RAPIDS", "NC"),
  ("ROARING SPRING", "PA"),
  ("ROARING SPRINGS", "TX"),
  ("ROBARDS", "KY"),
  ("ROBBINS", "CA"),
  ("ROBBINS", "TN"),
  ("ROBBINS", "IL"),
  ("ROBBINS", "NC"),
  ("ROBBINSDALE", "MN"),
  ("ROBBINSVILLE", "NJ"),
  ("ROBBINSVILLE", "NC"),
  ("ROBELINE", "LA"),
  ("ROBERSONVILLE", "NC"),
  ("ROBERT LEE", "TX"),
  ("ROBERTA", "GA"),
  ("ROBERTS", "MT"),
  ("ROBERTS", "WI"),
  ("ROBERTS", "IL"),
  ("ROBERTS", "ID"),
  ("ROBERTSDALE", "AL"),
  ("ROBERTSON", "WY"),
  ("ROBERTSVILLE", "NJ"),
  ("ROBERTSVILLE", "OH"),
  ("ROBESONIA", "PA"),
  ("ROBIE CREEK", "ID"),
  ("ROBIN GLEN-INDIANTOWN", "MI"),
  ("ROBINETTE", "WV"),
  ("ROBINHOOD", "MS"),
  ("ROBINS", "IA"),
  ("ROBINS AFB", "GA"),
  ("ROBINSON", "TX"),
  ("ROBINSON", "IL"),
  ("ROBINSON", "PA"),
  ("ROBINSON", "KS"),
  ("ROBINSON", "ND"),
  ("ROBINSON MILL", "CA"),
  ("ROBINWOOD", "MD"),
  ("ROBSTOWN", "TX"),
  ("ROBY", "TX"),
  ("ROCA", "NE"),
  ("ROCHELLE", "IL"),
  ("ROCHELLE", "GA"),
  ("ROCHEPORT", "MO"),
  ("ROCHESTER", "MN"),
  ("ROCHESTER", "NH"),
  ("ROCHESTER", "NY"),
  ("ROCHESTER", "WI"),
  ("ROCHESTER", "IN"),
  ("ROCHESTER", "MI"),
  ("ROCHESTER", "IL"),
  ("ROCHESTER", "WA"),
  ("ROCHESTER", "OH"),
  ("ROCHESTER", "IA"),
  ("ROCHESTER", "VT"),
  ("ROCHESTER", "PA"),
  ("ROCHESTER", "KY"),
  ("ROCHESTER", "TX"),
  ("ROCHESTER HILLS", "MI"),
  ("ROCK CITY", "IL"),
  ("ROCK CREEK", "MN"),
  ("ROCK CREEK", "AL"),
  ("ROCK CREEK", "OH"),
  ("ROCK CREEK PARK", "CO"),
  ("ROCK FALLS", "IL"),
  ("ROCK FALLS", "IA"),
  ("ROCK HALL", "MD"),
  ("ROCK HILL", "SC"),
  ("ROCK HILL", "LA"),
  ("ROCK HILL", "NY"),
  ("ROCK HILL", "MO"),
  ("ROCK HOUSE", "AZ"),
  ("ROCK ISLAND", "IL"),
  ("ROCK ISLAND", "OK"),
  ("ROCK ISLAND", "WA"),
  ("ROCK ISLAND ARSENAL", "IL"),
  ("ROCK MILLS", "AL"),
  ("ROCK POINT", "AZ"),
  ("ROCK POINT", "MD"),
  ("ROCK PORT", "MO"),
  ("ROCK RAPIDS", "IA"),
  ("ROCK RIVER", "WY"),
  ("ROCK SPRINGS", "WY"),
  ("ROCK SPRINGS", "NM"),
  ("ROCK SPRINGS", "WI"),
  ("ROCK VALLEY", "IA"),
  ("ROCKAWAY", "NJ"),
  ("ROCKAWAY BEACH", "OR"),
  ("ROCKAWAY BEACH", "MO"),
  ("ROCKBRIDGE", "IL"),
  ("ROCKBRIDGE", "OH"),
  ("ROCKCREEK", "OR"),
  ("ROCKDALE", "TX"),
  ("ROCKDALE", "IL"),
  ("ROCKDALE", "WI"),
  ("ROCKFISH", "NC"),
  ("ROCKFORD", "IL"),
  ("ROCKFORD", "AL"),
  ("ROCKFORD", "MI"),
  ("ROCKFORD", "TN"),
  ("ROCKFORD", "MN"),
  ("ROCKFORD", "ID"),
  ("ROCKFORD", "OH"),
  ("ROCKFORD", "WA"),
  ("ROCKFORD", "IA"),
  ("ROCKFORD BAY", "ID"),
  ("ROCKHAM", "SD"),
  ("ROCKHILL", "PA"),
  ("ROCKHOLDS", "KY"),
  ("ROCKINGHAM", "NC"),
  ("ROCKINGHAM", "GA"),
  ("ROCKLAKE", "ND"),
  ("ROCKLAND", "ME"),
  ("ROCKLAND", "WI"),
  ("ROCKLAND", "ID"),
  ("ROCKLEDGE", "FL"),
  ("ROCKLEDGE", "PA"),
  ("ROCKLEIGH", "NJ"),
  ("ROCKLIN", "CA"),
  ("ROCKMART", "GA"),
  ("ROCKPORT", "TX"),
  ("ROCKPORT", "MA"),
  ("ROCKPORT", "AR"),
  ("ROCKPORT", "IN"),
  ("ROCKPORT", "KY"),
  ("ROCKPORT", "WA"),
  ("ROCKSPRINGS", "TX"),
  ("ROCKTON", "IL"),
  ("ROCKVALE", "CO"),
  ("ROCKVILLE", "MN"),
  ("ROCKVILLE", "MD"),
  ("ROCKVILLE", "UT"),
  ("ROCKVILLE", "AL"),
  ("ROCKVILLE", "CT"),
  ("ROCKVILLE", "IN"),
  ("ROCKVILLE", "SC"),
  ("ROCKVILLE", "MO"),
  ("ROCKVILLE", "NE"),
  ("ROCKVILLE CENTRE", "NY"),
  ("ROCKWALL", "TX"),
  ("ROCKWELL", "AR"),
  ("ROCKWELL", "IA"),
  ("ROCKWELL", "NC"),
  ("ROCKWELL CITY", "IA"),
  ("ROCKWOOD", "TN"),
  ("ROCKWOOD", "VA"),
  ("ROCKWOOD", "MI"),
  ("ROCKWOOD", "PA"),
  ("ROCKWOOD", "IL"),
  ("ROCKY", "OK"),
  ("ROCKY BOY WEST", "MT"),
  ("ROCKY BOY'S AGENCY", "MT"),
  ("ROCKY FORD", "OK"),
  ("ROCKY FORD", "CO"),
  ("ROCKY FORD", "GA"),
  ("ROCKY FORK POINT", "OH"),
  ("ROCKY HILL", "NJ"),
  ("ROCKY MOUND", "TX"),
  ("ROCKY MOUNT", "NC"),
  ("ROCKY MOUNT", "VA"),
  ("ROCKY MOUNTAIN", "OK"),
  ("ROCKY POINT", "NY"),
  ("ROCKY POINT", "NC"),
  ("ROCKY POINT", "WA"),
  ("ROCKY POINT", "MT"),
  ("ROCKY RIDGE", "UT"),
  ("ROCKY RIDGE", "OH"),
  ("ROCKY RIPPLE", "IN"),
  ("ROCKY RIVER", "OH"),
  ("RODANTHE", "NC"),
  ("RODEO", "NM"),
  ("RODEO", "CA"),
  ("RODERFIELD", "WV"),
  ("RODESSA", "LA"),
  ("RODEY", "NM"),
  ("RODMAN", "IA"),
  ("RODMAN", "NY"),
  ("RODNEY", "IA"),
  ("RODNEY VILLAGE", "DE"),
  ("RODRIGUEZ CAMP", "CA"),
  ("RODRÌGUEZ HEVIA", "PR"),
  ("ROE", "AR"),
  ("ROEBLING", "NJ"),
  ("ROEBUCK", "SC"),
  ("ROELAND PARK", "KS"),
  ("ROEVILLE", "FL"),
  ("ROFF", "OK"),
  ("ROGERS", "AR"),
  ("ROGERS", "MN"),
  ("ROGERS", "TX"),
  ("ROGERS", "ND"),
  ("ROGERS", "OH"),
  ("ROGERS", "NE"),
  ("ROGERS CITY", "MI"),
  ("ROGERSVILLE", "MO"),
  ("ROGERSVILLE", "TN"),
  ("ROGERSVILLE", "AL"),
  ("ROGERSVILLE", "PA"),
  ("ROGUE RIVER", "OR"),
  ("ROHNERT PARK", "CA"),
  ("ROHRERSVILLE", "MD"),
  ("ROHRSBURG", "PA"),
  ("ROLAND", "AR"),
  ("ROLAND", "OK"),
  ("ROLAND", "IA"),
  ("ROLESVILLE", "NC"),
  ("ROLETTE", "ND"),
  ("ROLFE", "IA"),
  ("ROLLA", "MO"),
  ("ROLLA", "ND"),
  ("ROLLA", "KS"),
  ("ROLLING FIELDS", "KY"),
  ("ROLLING FORK", "MS"),
  ("ROLLING HILLS", "CA"),
  ("ROLLING HILLS", "WY"),
  ("ROLLING HILLS", "CA"),
  ("ROLLING HILLS", "KY"),
  ("ROLLING HILLS ESTATES", "CA"),
  ("ROLLING MEADOWS", "IL"),
  ("ROLLING PRAIRIE", "IN"),
  ("ROLLINGSTONE", "MN"),
  ("ROLLINGWOOD", "TX"),
  ("ROLLINGWOOD", "CA"),
  ("ROLLINS", "MT"),
  ("ROLLINSVILLE", "CO"),
  ("ROMA", "TX"),
  ("ROMA CREEK", "TX"),
  ("ROMAN FOREST", "TX"),
  ("ROME", "NY"),
  ("ROME", "GA"),
  ("ROME", "WI"),
  ("ROME", "IL"),
  ("ROME", "PA"),
  ("ROME", "OH"),
  ("ROME", "IA"),
  ("ROME CITY", "IN"),
  ("ROMEO", "MI"),
  ("ROMEO", "CO"),
  ("ROMEOVILLE", "IL"),
  ("ROMEVILLE", "LA"),
  ("ROMNEY", "WV"),
  ("ROMOLAND", "CA"),
  ("ROMULUS", "MI"),
  ("ROMULUS", "NY"),
  ("RONALD", "WA"),
  ("RONAN", "MT"),
  ("RONCEVERTE", "WV"),
  ("RONCO", "PA"),
  ("RONDA", "NC"),
  ("RONDO", "AR"),
  ("RONKONKOMA", "NY"),
  ("RONKS", "PA"),
  ("RONNEBY", "MN"),
  ("ROODHOUSE", "IL"),
  ("ROOPVILLE", "GA"),
  ("ROOSEVELT", "UT"),
  ("ROOSEVELT", "WA"),
  ("ROOSEVELT", "AZ"),
  ("ROOSEVELT", "NJ"),
  ("ROOSEVELT", "NY"),
  ("ROOSEVELT", "MN"),
  ("ROOSEVELT", "OK"),
  ("ROOSEVELT GARDENS", "FL"),
  ("ROOSEVELT PARK", "MI"),
  ("ROPER", "NC"),
  ("ROPESVILLE", "TX"),
  ("ROSA", "AL"),
  ("ROSA S·NCHEZ", "PR"),
  ("ROSALIA", "KS"),
  ("ROSALIA", "WA"),
  ("ROSALIE", "NE"),
  ("ROSAMOND", "CA"),
  ("ROSARYVILLE", "MD"),
  ("ROSBURG", "WA"),
  ("ROSCOE", "IL"),
  ("ROSCOE", "TX"),
  ("ROSCOE", "MO"),
  ("ROSCOE", "NY"),
  ("ROSCOE", "MN"),
  ("ROSCOE", "SD"),
  ("ROSCOE", "MT"),
  ("ROSCOE", "PA"),
  ("ROSCOE", "NE"),
  ("ROSCOMMON", "MI"),
  ("ROSE", "OK"),
  ("ROSE BUD", "AR"),
  ("ROSE CITY", "TX"),
  ("ROSE CITY", "MI"),
  ("ROSE CREEK", "MN"),
  ("ROSE HILL", "VA"),
  ("ROSE HILL", "VA"),
  ("ROSE HILL", "KS"),
  ("ROSE HILL", "NC"),
  ("ROSE HILL", "IL"),
  ("ROSE HILL", "IA"),
  ("ROSE HILL ACRES", "TX"),
  ("ROSE HILLS", "CA"),
  ("ROSE LODGE", "OR"),
  ("ROSE VALLEY", "PA"),
  ("ROSEAU", "MN"),
  ("ROSEBORO", "NC"),
  ("ROSEBUD", "SD"),
  ("ROSEBUD", "MO"),
  ("ROSEBUD", "TX"),
  ("ROSEBUD", "MT"),
  ("ROSEBURG", "OR"),
  ("ROSEBURG NORTH", "OR"),
  ("ROSEBUSH", "MI"),
  ("ROSEDALE", "CA"),
  ("ROSEDALE", "LA"),
  ("ROSEDALE", "MD"),
  ("ROSEDALE", "MS"),
  ("ROSEDALE", "WA"),
  ("ROSEDALE", "NM"),
  ("ROSEDALE", "IN"),
  ("ROSEDALE", "OK"),
  ("ROSELAND", "NJ"),
  ("ROSELAND", "LA"),
  ("ROSELAND", "FL"),
  ("ROSELAND", "CA"),
  ("ROSELAND", "KS"),
  ("ROSELAND", "IN"),
  ("ROSELAND", "NE"),
  ("ROSELAWN", "IN"),
  ("ROSELLE", "IL"),
  ("ROSELLE", "NJ"),
  ("ROSELLE PARK", "NJ"),
  ("ROSEMEAD", "CA"),
  ("ROSEMONT", "CA"),
  ("ROSEMONT", "IL"),
  ("ROSEMONT", "MD"),
  ("ROSEMOUNT", "MN"),
  ("ROSEMOUNT", "OH"),
  ("ROSENBERG", "TX"),
  ("ROSENDALE", "WI"),
  ("ROSENDALE", "MO"),
  ("ROSENDALE HAMLET", "NY"),
  ("ROSENHAYN", "NJ"),
  ("ROSEPINE", "LA"),
  ("ROSETO", "PA"),
  ("ROSEVILLE", "CA"),
  ("ROSEVILLE", "MN"),
  ("ROSEVILLE", "MI"),
  ("ROSEVILLE", "IA"),
  ("ROSEVILLE", "IL"),
  ("ROSEVILLE", "OH"),
  ("ROSEVILLE", "PA"),
  ("ROSEWOOD", "OH"),
  ("ROSEWOOD HEIGHTS", "IL"),
  ("ROSHARON", "TX"),
  ("ROSHOLT", "WI"),
  ("ROSHOLT", "SD"),
  ("ROSICLARE", "IL"),
  ("ROSINE", "KY"),
  ("ROSITA", "TX"),
  ("ROSLYN", "WA"),
  ("ROSLYN", "NY"),
  ("ROSLYN", "SD"),
  ("ROSLYN ESTATES", "NY"),
  ("ROSLYN HARBOR", "NY"),
  ("ROSLYN HEIGHTS", "NY"),
  ("ROSMAN", "NC"),
  ("ROSS", "OH"),
  ("ROSS", "TX"),
  ("ROSS", "CA"),
  ("ROSS", "ND"),
  ("ROSS CORNER", "NJ"),
  ("ROSSBURG", "OH"),
  ("ROSSER", "TX"),
  ("ROSSFORD", "OH"),
  ("ROSSIE", "IA"),
  ("ROSSITER", "PA"),
  ("ROSSLYN FARMS", "PA"),
  ("ROSSMOOR", "CA"),
  ("ROSSMOOR", "NJ"),
  ("ROSSMORE", "WV"),
  ("ROSSMOYNE", "OH"),
  ("ROSSTON", "AR"),
  ("ROSSTON", "OK"),
  ("ROSSVILLE", "MD"),
  ("ROSSVILLE", "TN"),
  ("ROSSVILLE", "GA"),
  ("ROSSVILLE", "IL"),
  ("ROSSVILLE", "KS"),
  ("ROSSVILLE", "IN"),
  ("ROSWELL", "GA"),
  ("ROSWELL", "NM"),
  ("ROSWELL", "SD"),
  ("ROSWELL", "OH"),
  ("ROTAN", "TX"),
  ("ROTE", "PA"),
  ("ROTHBURY", "MI"),
  ("ROTHSAY", "MN"),
  ("ROTHSCHILD", "WI"),
  ("ROTHSVILLE", "PA"),
  ("ROTHVILLE", "MO"),
  ("ROTONDA", "FL"),
  ("ROTTERDAM", "NY"),
  ("ROUGEMONT", "NC"),
  ("ROUGH AND READY", "CA"),
  ("ROUGH ROCK", "AZ"),
  ("ROULETTE", "PA"),
  ("ROUND HILL", "VA"),
  ("ROUND HILL VILLAGE", "NV"),
  ("ROUND LAKE", "IL"),
  ("ROUND LAKE", "NY"),
  ("ROUND LAKE", "MN"),
  ("ROUND LAKE BEACH", "IL"),
  ("ROUND LAKE HEIGHTS", "IL"),
  ("ROUND LAKE PARK", "IL"),
  ("ROUND MOUNTAIN", "TX"),
  ("ROUND MOUNTAIN", "CA"),
  ("ROUND ROCK", "TX"),
  ("ROUND ROCK", "AZ"),
  ("ROUND TOP", "TX"),
  ("ROUND VALLEY", "CA"),
  ("ROUND VALLEY", "AZ"),
  ("ROUNDUP", "MT"),
  ("ROUSE", "CA"),
  ("ROUSES POINT", "NY"),
  ("ROUSEVILLE", "PA"),
  ("ROUZERVILLE", "PA"),
  ("ROWAN", "IA"),
  ("ROWE", "NM"),
  ("ROWENA", "OR"),
  ("ROWES RUN", "PA"),
  ("ROWESVILLE", "SC"),
  ("ROWLAND", "NC"),
  ("ROWLAND HEIGHTS", "CA"),
  ("ROWLESBURG", "WV"),
  ("ROWLETT", "TX"),
  ("ROWLEY", "MA"),
  ("ROWLEY", "IA"),
  ("ROXANA", "IL"),
  ("ROXBORO", "NC"),
  ("ROXBOROUGH PARK", "CO"),
  ("ROXBURY", "KS"),
  ("ROXIE", "MS"),
  ("ROXOBEL", "NC"),
  ("ROXTON", "TX"),
  ("ROY", "UT"),
  ("ROY", "MT"),
  ("ROY", "NM"),
  ("ROY", "WA"),
  ("ROY LAKE", "MN"),
  ("ROYAL", "IA"),
  ("ROYAL", "IL"),
  ("ROYAL", "NE"),
  ("ROYAL CENTER", "IN"),
  ("ROYAL CITY", "WA"),
  ("ROYAL KUNIA", "HI"),
  ("ROYAL LAKES", "IL"),
  ("ROYAL OAK", "MI"),
  ("ROYAL PALM BEACH", "FL"),
  ("ROYAL PALM ESTATES", "FL"),
  ("ROYAL PINES", "NC"),
  ("ROYALTON", "MN"),
  ("ROYALTON", "IL"),
  ("ROYALTON", "PA"),
  ("ROYERSFORD", "PA"),
  ("ROYSE CITY", "TX"),
  ("ROYSTON", "GA"),
  ("ROZEL", "KS"),
  ("RUBIDOUX", "CA"),
  ("RUBY", "AK"),
  ("RUBY", "SC"),
  ("RUCH", "OR"),
  ("RUCKERSVILLE", "VA"),
  ("RUDD", "IA"),
  ("RUDOLPH", "WI"),
  ("RUDOLPH", "OH"),
  ("RUDY", "AR"),
  ("RUDYARD", "MT"),
  ("RUFFIN", "NC"),
  ("RUFUS", "OR"),
  ("RUGBY", "ND"),
  ("RUHENSTROTH", "NV"),
  ("RUIDOSO", "NM"),
  ("RUIDOSO DOWNS", "NM"),
  ("RULE", "TX"),
  ("RULEVILLE", "MS"),
  ("RULO", "NE"),
  ("RUMA", "IL"),
  ("RUMFORD", "ME"),
  ("RUMSON", "NJ"),
  ("RUNAWAY BAY", "TX"),
  ("RUNGE", "TX"),
  ("RUNNELLS", "IA"),
  ("RUNNEMEDE", "NJ"),
  ("RUNNING SPRINGS", "CA"),
  ("RUNNING WATER", "SD"),
  ("RUPERT", "ID"),
  ("RUPERT", "PA"),
  ("RUPERT", "WV"),
  ("RURAL HALL", "NC"),
  ("RURAL HILL", "TN"),
  ("RURAL RETREAT", "VA"),
  ("RURAL VALLEY", "PA"),
  ("RUSH CENTER", "KS"),
  ("RUSH CITY", "MN"),
  ("RUSH HILL", "MO"),
  ("RUSH SPRINGS", "OK"),
  ("RUSH VALLEY", "UT"),
  ("RUSHFORD", "MN"),
  ("RUSHFORD", "NY"),
  ("RUSHFORD VILLAGE", "MN"),
  ("RUSHMERE", "VA"),
  ("RUSHMORE", "MN"),
  ("RUSHSYLVANIA", "OH"),
  ("RUSHVILLE", "IN"),
  ("RUSHVILLE", "IL"),
  ("RUSHVILLE", "NE"),
  ("RUSHVILLE", "NY"),
  ("RUSHVILLE", "MO"),
  ("RUSHVILLE", "OH"),
  ("RUSK", "TX"),
  ("RUSKIN", "FL"),
  ("RUSKIN", "NE"),
  ("RUSO", "ND"),
  ("RUSSELL", "KS"),
  ("RUSSELL", "PA"),
  ("RUSSELL", "KY"),
  ("RUSSELL", "MA"),
  ("RUSSELL", "GA"),
  ("RUSSELL", "IA"),
  ("RUSSELL", "MN"),
  ("RUSSELL", "AR"),
  ("RUSSELL GARDENS", "NY"),
  ("RUSSELL SPRINGS", "KY"),
  ("RUSSELL SPRINGS", "KS"),
  ("RUSSELLS POINT", "OH"),
  ("RUSSELLTON", "PA"),
  ("RUSSELLVILLE", "AR"),
  ("RUSSELLVILLE", "AL"),
  ("RUSSELLVILLE", "KY"),
  ("RUSSELLVILLE", "SC"),
  ("RUSSELLVILLE", "MO"),
  ("RUSSELLVILLE", "OH"),
  ("RUSSELLVILLE", "IL"),
  ("RUSSELLVILLE", "IN"),
  ("RUSSIA", "OH"),
  ("RUSSIAN MISSION", "AK"),
  ("RUSSIAVILLE", "IN"),
  ("RUSTBURG", "VA"),
  ("RUSTON", "LA"),
  ("RUSTON", "WA"),
  ("RUTH", "CA"),
  ("RUTH", "NC"),
  ("RUTH", "NV"),
  ("RUTHERFORD", "NJ"),
  ("RUTHERFORD", "TN"),
  ("RUTHERFORD", "CA"),
  ("RUTHERFORD", "PA"),
  ("RUTHERFORD COLLEGE", "NC"),
  ("RUTHERFORDTON", "NC"),
  ("RUTHTON", "MN"),
  ("RUTHVEN", "IA"),
  ("RUTHVILLE", "ND"),
  ("RUTLAND", "VT"),
  ("RUTLAND", "MA"),
  ("RUTLAND", "IA"),
  ("RUTLAND", "OH"),
  ("RUTLAND", "IL"),
  ("RUTLAND", "ND"),
  ("RUTLEDGE", "AL"),
  ("RUTLEDGE", "TN"),
  ("RUTLEDGE", "GA"),
  ("RUTLEDGE", "MN"),
  ("RUTLEDGE", "PA"),
  ("RUTLEDGE", "MO"),
  ("RYAN", "OK"),
  ("RYAN", "IA"),
  ("RYAN PARK", "WY"),
  ("RYDER", "ND"),
  ("RYDERWOOD", "WA"),
  ("RYE", "NY"),
  ("RYE", "AR"),
  ("RYE", "AZ"),
  ("RYE", "CO"),
  ("RYE BROOK", "NY"),
  ("RYEGATE", "MT"),
  ("RYLAND HEIGHTS", "KY"),
  ("S.N.P.J.", "PA"),
  ("SABANA", "PR"),
  ("SABANA ENEAS", "PR"),
  ("SABANA GRANDE", "PR"),
  ("SABANA HOYOS", "PR"),
  ("SABANA SECA", "PR"),
  ("SABETHA", "KS"),
  ("SABILLASVILLE", "MD"),
  ("SABIN", "MN"),
  ("SABINA", "OH"),
  ("SABINAL", "TX"),
  ("SABULA", "IA"),
  ("SAC CITY", "IA"),
  ("SACATE VILLAGE", "AZ"),
  ("SACATON", "AZ"),
  ("SACATON FLATS VILLAGE", "AZ"),
  ("SACHSE", "TX"),
  ("SACKETS HARBOR", "NY"),
  ("SACO", "ME"),
  ("SACO", "MT"),
  ("SACRAMENTO", "CA"),
  ("SACRAMENTO", "NM"),
  ("SACRAMENTO", "KY"),
  ("SACRED HEART", "MN"),
  ("SADDLE BUTTE", "MT"),
  ("SADDLE RIDGE", "CO"),
  ("SADDLE RIVER", "NJ"),
  ("SADDLE ROCK", "NY"),
  ("SADDLE ROCK ESTATES", "NY"),
  ("SADDLEBROOKE", "AZ"),
  ("SADDLEBROOKE", "MO"),
  ("SADIEVILLE", "KY"),
  ("SADLER", "TX"),
  ("SADORUS", "IL"),
  ("SAEGERTOWN", "PA"),
  ("SAFETY HARBOR", "FL"),
  ("SAFFORD", "AZ"),
  ("SAG HARBOR", "NY"),
  ("SAGAMORE", "MA"),
  ("SAGAPONACK", "NY"),
  ("SAGEVILLE", "IA"),
  ("SAGINAW", "MI"),
  ("SAGINAW", "TX"),
  ("SAGINAW", "MO"),
  ("SAGUACHE", "CO"),
  ("SAHUARITA", "AZ"),
  ("SAILOR SPRINGS", "IL"),
  ("SAKS", "AL"),
  ("SALADO", "TX"),
  ("SALAMANCA", "NY"),
  ("SALAMATOF", "AK"),
  ("SALAMONIA", "IN"),
  ("SALCHA", "AK"),
  ("SALE CITY", "GA"),
  ("SALE CREEK", "TN"),
  ("SALEM", "OR"),
  ("SALEM", "VA"),
  ("SALEM", "UT"),
  ("SALEM", "GA"),
  ("SALEM", "MA"),
  ("SALEM", "IL"),
  ("SALEM", "OH"),
  ("SALEM", "NC"),
  ("SALEM", "IN"),
  ("SALEM", "AR"),
  ("SALEM", "OK"),
  ("SALEM", "AR"),
  ("SALEM", "MO"),
  ("SALEM", "NY"),
  ("SALEM", "NJ"),
  ("SALEM", "WV"),
  ("SALEM", "SD"),
  ("SALEM", "NM"),
  ("SALEM", "KY"),
  ("SALEM", "SC"),
  ("SALEM", "NE"),
  ("SALEM", "IA"),
  ("SALEM HEIGHTS", "OH"),
  ("SALEMBURG", "NC"),
  ("SALESVILLE", "AR"),
  ("SALESVILLE", "OH"),
  ("SALIDA", "CA"),
  ("SALIDA", "CO"),
  ("SALINA", "KS"),
  ("SALINA", "UT"),
  ("SALINA", "OK"),
  ("SALINAS", "CA"),
  ("SALINAS", "PR"),
  ("SALINE", "MI"),
  ("SALINE", "LA"),
  ("SALINEÒO", "TX"),
  ("SALINEÒO NORTH", "TX"),
  ("SALINEVILLE", "OH"),
  ("SALISBURY", "NC"),
  ("SALISBURY", "MD"),
  ("SALISBURY", "MA"),
  ("SALISBURY", "NY"),
  ("SALISBURY", "MO"),
  ("SALISBURY", "PA"),
  ("SALISBURY MILLS", "NY"),
  ("SALIX", "IA"),
  ("SALIX", "PA"),
  ("SALLADASBURG", "PA"),
  ("SALLEY", "SC"),
  ("SALLIS", "MS"),
  ("SALLISAW", "OK"),
  ("SALMON", "ID"),
  ("SALMON BROOK", "CT"),
  ("SALMON CREEK", "WA"),
  ("SALMON CREEK", "CA"),
  ("SALOME", "AZ"),
  ("SALT CREEK", "CO"),
  ("SALT CREEK COMMONS", "IN"),
  ("SALT LAKE CITY", "UT"),
  ("SALT LICK", "KY"),
  ("SALT POINT", "NY"),
  ("SALT ROCK", "WV"),
  ("SALTAIRE", "NY"),
  ("SALTILLO", "MS"),
  ("SALTILLO", "IN"),
  ("SALTILLO", "TN"),
  ("SALTILLO", "PA"),
  ("SALTON CITY", "CA"),
  ("SALTON SEA BEACH", "CA"),
  ("SALTSBURG", "PA"),
  ("SALTVILLE", "VA"),
  ("SALUDA", "VA"),
  ("SALUDA", "SC"),
  ("SALUDA", "NC"),
  ("SALUNGA", "PA"),
  ("SALVISA", "KY"),
  ("SALVO", "NC"),
  ("SALYERSVILLE", "KY"),
  ("SAM RAYBURN", "TX"),
  ("SAMAK", "UT"),
  ("SAMBURG", "TN"),
  ("SAMMAMISH", "WA"),
  ("SAMMONS POINT", "IL"),
  ("SAMMY MARTINEZ", "TX"),
  ("SAMNORWOOD", "TX"),
  ("SAMOA", "CA"),
  ("SAMOSET", "FL"),
  ("SAMS CORNER", "OK"),
  ("SAMSON", "AL"),
  ("SAMSULA-SPRUCE CREEK", "FL"),
  ("SAN ACACIA", "NM"),
  ("SAN ACACIO", "CO"),
  ("SAN ANDREAS", "CA"),
  ("SAN ANGELO", "TX"),
  ("SAN ANSELMO", "CA"),
  ("SAN ANTONIO", "TX"),
  ("SAN ANTONIO", "FL"),
  ("SAN ANTONIO", "NM"),
  ("SAN ANTONIO", "PR"),
  ("SAN ANTONIO", "PR"),
  ("SAN ANTONIO", "PR"),
  ("SAN ANTONIO HEIGHTS", "CA"),
  ("SAN ANTONITO", "NM"),
  ("SAN ANTONITO", "NM"),
  ("SAN ARDO", "CA"),
  ("SAN AUGUSTINE", "TX"),
  ("SAN BENITO", "TX"),
  ("SAN BERNARDINO", "CA"),
  ("SAN BRUNO", "CA"),
  ("SAN BUENAVENTURA (VENTURA)", "CA"),
  ("SAN CARLOS", "AZ"),
  ("SAN CARLOS", "CA"),
  ("SAN CARLOS", "TX"),
  ("SAN CARLOS I", "TX"),
  ("SAN CARLOS II", "TX"),
  ("SAN CARLOS PARK", "FL"),
  ("SAN CASTLE", "FL"),
  ("SAN CLEMENTE", "CA"),
  ("SAN CRISTOBAL", "NM"),
  ("SAN DIEGO", "CA"),
  ("SAN DIEGO", "TX"),
  ("SAN DIEGO COUNTRY ESTATES", "CA"),
  ("SAN DIMAS", "CA"),
  ("SAN ELIZARIO", "TX"),
  ("SAN FELIPE", "TX"),
  ("SAN FELIPE PUEBLO", "NM"),
  ("SAN FERNANDO", "CA"),
  ("SAN FERNANDO", "TX"),
  ("SAN FIDEL", "NM"),
  ("SAN FRANCISCO", "CA"),
  ("SAN GABRIEL", "CA"),
  ("SAN GERM·N", "PR"),
  ("SAN GERONIMO", "CA"),
  ("SAN ILDEFONSO PUEBLO", "NM"),
  ("SAN ISIDRO", "TX"),
  ("SAN ISIDRO", "PR"),
  ("SAN JACINTO", "CA"),
  ("SAN JOAQUIN", "CA"),
  ("SAN JON", "NM"),
  ("SAN JOSE", "CA"),
  ("SAN JOSE", "AZ"),
  ("SAN JOSE", "NM"),
  ("SAN JOSE", "IL"),
  ("SAN JOSE", "NM"),
  ("SAN JOSÈ", "PR"),
  ("SAN JUAN", "TX"),
  ("SAN JUAN BAUTISTA", "CA"),
  ("SAN JUAN CAPISTRANO", "CA"),
  ("SAN JUAN", "PR"),
  ("SAN LEANDRO", "CA"),
  ("SAN LEANNA", "TX"),
  ("SAN LEON", "TX"),
  ("SAN LORENZO", "CA"),
  ("SAN LORENZO", "NM"),
  ("SAN LORENZO", "PR"),
  ("SAN LUCAS", "CA"),
  ("SAN LUIS", "AZ"),
  ("SAN LUIS", "NM"),
  ("SAN LUIS", "CO"),
  ("SAN LUIS OBISPO", "CA"),
  ("SAN MANUEL", "AZ"),
  ("SAN MAR", "MD"),
  ("SAN MARCOS", "TX"),
  ("SAN MARCOS", "CA"),
  ("SAN MARINO", "CA"),
  ("SAN MARTIN", "CA"),
  ("SAN MATEO", "CA"),
  ("SAN MATEO", "NM"),
  ("SAN MIGUEL", "AZ"),
  ("SAN MIGUEL", "NM"),
  ("SAN MIGUEL", "CA"),
  ("SAN MIGUEL", "CA"),
  ("SAN PABLO", "CA"),
  ("SAN PABLO", "NM"),
  ("SAN PASQUAL", "CA"),
  ("SAN PATRICIO", "TX"),
  ("SAN PEDRO", "NM"),
  ("SAN PEDRO", "TX"),
  ("SAN PERLITA", "TX"),
  ("SAN PIERRE", "IN"),
  ("SAN RAFAEL", "CA"),
  ("SAN RAFAEL", "NM"),
  ("SAN RAMON", "CA"),
  ("SAN SABA", "TX"),
  ("SAN SEBASTI·N", "PR"),
  ("SAN SIMEON", "CA"),
  ("SAN SIMON", "AZ"),
  ("SAN TAN VALLEY", "AZ"),
  ("SAN YGNACIO", "TX"),
  ("SAN YSIDRO", "NM"),
  ("SAN YSIDRO", "NM"),
  ("SANATOGA", "PA"),
  ("SANBORN", "NY"),
  ("SANBORN", "MN"),
  ("SANBORN", "IA"),
  ("SANBORN", "ND"),
  ("SANBORNVILLE", "NH"),
  ("SANCTUARY", "TX"),
  ("SAND CITY", "CA"),
  ("SAND COULEE", "MT"),
  ("SAND FORK", "WV"),
  ("SAND HILL", "OK"),
  ("SAND HILL", "PA"),
  ("SAND LAKE", "MI"),
  ("SAND LAKE", "MI"),
  ("SAND POINT", "AK"),
  ("SAND RIDGE", "NY"),
  ("SAND ROCK", "AL"),
  ("SAND SPRINGS", "OK"),
  ("SAND SPRINGS", "TX"),
  ("SANDBORN", "IN"),
  ("SANDERS", "AZ"),
  ("SANDERS", "KY"),
  ("SANDERSON", "TX"),
  ("SANDERSVILLE", "GA"),
  ("SANDERSVILLE", "MS"),
  ("SANDIA", "TX"),
  ("SANDIA HEIGHTS", "NM"),
  ("SANDIA KNOLLS", "NM"),
  ("SANDIA PARK", "NM"),
  ("SANDOVAL", "IL"),
  ("SANDOVAL", "TX"),
  ("SANDPOINT", "ID"),
  ("SANDS POINT", "NY"),
  ("SANDSTON", "VA"),
  ("SANDSTONE", "MN"),
  ("SANDUSKY", "OH"),
  ("SANDUSKY", "MI"),
  ("SANDWICH", "IL"),
  ("SANDWICH", "MA"),
  ("SANDY", "UT"),
  ("SANDY", "OR"),
  ("SANDY", "PA"),
  ("SANDY CREEK", "NY"),
  ("SANDY CREEK", "NC"),
  ("SANDY HOLLOW-ESCONDIDAS", "TX"),
  ("SANDY HOOK", "WI"),
  ("SANDY HOOK", "KY"),
  ("SANDY HOOK", "MD"),
  ("SANDY LAKE", "PA"),
  ("SANDY LEVEL", "VA"),
  ("SANDY RIDGE", "PA"),
  ("SANDY SPRINGS", "GA"),
  ("SANDY VALLEY", "NV"),
  ("SANDYFIELD", "NC"),
  ("SANDYVILLE", "OH"),
  ("SANDYVILLE", "IA"),
  ("SANFORD", "NC"),
  ("SANFORD", "FL"),
  ("SANFORD", "ME"),
  ("SANFORD", "AL"),
  ("SANFORD", "VA"),
  ("SANFORD", "CO"),
  ("SANFORD", "MI"),
  ("SANFORD", "TX"),
  ("SANGAREE", "SC"),
  ("SANGER", "TX"),
  ("SANGER", "CA"),
  ("SANGREY", "MT"),
  ("SANIBEL", "FL"),
  ("SANKERTOWN", "PA"),
  ("SANOSTEE", "NM"),
  ("SANS SOUCI", "SC"),
  ("SANSOM PARK", "TX"),
  ("SANTA ANA", "CA"),
  ("SANTA ANA PUEBLO", "NM"),
  ("SANTA ANNA", "TX"),
  ("SANTA ANNA", "TX"),
  ("SANTA B·RBARA", "PR"),
  ("SANTA BARBARA", "CA"),
  ("SANTA CLARA", "CA"),
  ("SANTA CLARA", "UT"),
  ("SANTA CLARA", "TX"),
  ("SANTA CLARA", "NM"),
  ("SANTA CLARA", "PR"),
  ("SANTA CLARA PUEBLO", "NM"),
  ("SANTA CLARITA", "CA"),
  ("SANTA CLAUS", "IN"),
  ("SANTA CLAUS", "GA"),
  ("SANTA CRUZ", "CA"),
  ("SANTA CRUZ", "AZ"),
  ("SANTA CRUZ", "NM"),
  ("SANTA CRUZ", "TX"),
  ("SANTA FE", "NM"),
  ("SANTA FE", "TX"),
  ("SANTA FE SPRINGS", "CA"),
  ("SANTA ISABEL", "PR"),
  ("SANTA MARGARITA", "CA"),
  ("SANTA MARIA", "CA"),
  ("SANTA MARIA", "TX"),
  ("SANTA MONICA", "CA"),
  ("SANTA MONICA", "TX"),
  ("SANTA NELLA", "CA"),
  ("SANTA PAULA", "CA"),
  ("SANTA RITA", "MT"),
  ("SANTA ROSA", "CA"),
  ("SANTA ROSA", "AZ"),
  ("SANTA ROSA", "NM"),
  ("SANTA ROSA", "TX"),
  ("SANTA ROSA", "TX"),
  ("SANTA ROSA VALLEY", "CA"),
  ("SANTA SUSANA", "CA"),
  ("SANTA TERESA", "NM"),
  ("SANTA VENETIA", "CA"),
  ("SANTA YNEZ", "CA"),
  ("SANTAQUIN", "UT"),
  ("SANTEE", "CA"),
  ("SANTEE", "SC"),
  ("SANTEE", "NE"),
  ("SANTEL", "TX"),
  ("SANTIAGO", "WA"),
  ("SANTO DOMINGO", "PR"),
  ("SANTO DOMINGO PUEBLO", "NM"),
  ("SAPPINGTON", "MO"),
  ("SAPULPA", "OK"),
  ("SARAH ANN", "WV"),
  ("SARAHSVILLE", "OH"),
  ("SARALAND", "AL"),
  ("SARANAC", "MI"),
  ("SARANAC LAKE", "NY"),
  ("SARANAP", "CA"),
  ("SARASOTA", "FL"),
  ("SARASOTA SPRINGS", "FL"),
  ("SARATOGA", "CA"),
  ("SARATOGA", "WY"),
  ("SARATOGA", "NC"),
  ("SARATOGA", "IN"),
  ("SARATOGA SPRINGS", "NY"),
  ("SARATOGA SPRINGS", "UT"),
  ("SARBEN", "NE"),
  ("SARCOXIE", "MO"),
  ("SARDINIA", "OH"),
  ("SARDIS", "TN"),
  ("SARDIS", "MS"),
  ("SARDIS", "GA"),
  ("SARDIS", "OH"),
  ("SARDIS", "KY"),
  ("SARDIS CITY", "AL"),
  ("SAREPTA", "LA"),
  ("SARGEANT", "MN"),
  ("SARGENT", "NE"),
  ("SARITA", "TX"),
  ("SARLES", "ND"),
  ("SARONVILLE", "NE"),
  ("SARTELL", "MN"),
  ("SASAKWA", "OK"),
  ("SASSER", "GA"),
  ("SATANTA", "KS"),
  ("SATARTIA", "MS"),
  ("SATELLITE BEACH", "FL"),
  ("SATICOY", "CA"),
  ("SATILLA", "GA"),
  ("SATSOP", "WA"),
  ("SATSUMA", "AL"),
  ("SATTLEY", "CA"),
  ("SAUCIER", "MS"),
  ("SAUGATUCK", "MI"),
  ("SAUGERTIES", "NY"),
  ("SAUGERTIES SOUTH", "NY"),
  ("SAUGET", "IL"),
  ("SAUGUS", "MA"),
  ("SAUK CENTRE", "MN"),
  ("SAUK CITY", "WI"),
  ("SAUK RAPIDS", "MN"),
  ("SAUK VILLAGE", "IL"),
  ("SAUKVILLE", "WI"),
  ("SAULSBURY", "TN"),
  ("SAULT STE. MARIE", "MI"),
  ("SAUNEMIN", "IL"),
  ("SAUSAL", "NM"),
  ("SAUSALITO", "CA"),
  ("SAUTEE NACOOCHEE", "GA"),
  ("SAVAGE", "MN"),
  ("SAVAGE", "MD"),
  ("SAVAGE TOWN", "VA"),
  ("SAVAGEVILLE", "VA"),
  ("SAVANNA", "IL"),
  ("SAVANNA", "OK"),
  ("SAVANNAH", "GA"),
  ("SAVANNAH", "TN"),
  ("SAVANNAH", "MO"),
  ("SAVANNAH", "NY"),
  ("SAVANNAH", "TX"),
  ("SAVANNAH", "OH"),
  ("SAVONA", "NY"),
  ("SAVONBURG", "KS"),
  ("SAVOONGA", "AK"),
  ("SAVOY", "IL"),
  ("SAVOY", "TX"),
  ("SAW CREEK", "PA"),
  ("SAWGRASS", "FL"),
  ("SAWMILL", "AZ"),
  ("SAWMILLS", "NC"),
  ("SAWPIT", "CO"),
  ("SAWYER", "OK"),
  ("SAWYER", "ND"),
  ("SAWYER", "KS"),
  ("SAWYERVILLE", "IL"),
  ("SAWYERWOOD", "OH"),
  ("SAXAPAHAW", "NC"),
  ("SAXIS", "VA"),
  ("SAXMAN", "AK"),
  ("SAXON", "SC"),
  ("SAXON", "WI"),
  ("SAXONBURG", "PA"),
  ("SAXTON", "PA"),
  ("SAXTONS RIVER", "VT"),
  ("SAYBROOK", "IL"),
  ("SAYBROOK MANOR", "CT"),
  ("SAYLORSBURG", "PA"),
  ("SAYLORVILLE", "IA"),
  ("SAYNER", "WI"),
  ("SAYRE", "OK"),
  ("SAYRE", "PA"),
  ("SAYREVILLE", "NJ"),
  ("SAYVILLE", "NY"),
  ("SCAGGSVILLE", "MD"),
  ("SCALES MOUND", "IL"),
  ("SCALP LEVEL", "PA"),
  ("SCAMMON", "KS"),
  ("SCAMMON BAY", "AK"),
  ("SCANDIA", "MN"),
  ("SCANDIA", "KS"),
  ("SCANDINAVIA", "WI"),
  ("SCANLON", "MN"),
  ("SCAPPOOSE", "OR"),
  ("SCARBOROUGH", "ME"),
  ("SCARBRO", "WV"),
  ("SCARSDALE", "NY"),
  ("SCARVILLE", "IA"),
  ("SCENIC", "AZ"),
  ("SCENIC OAKS", "TX"),
  ("SCHAEFFERSTOWN", "PA"),
  ("SCHAGHTICOKE", "NY"),
  ("SCHALL CIRCLE", "FL"),
  ("SCHALLER", "IA"),
  ("SCHAUMBURG", "IL"),
  ("SCHELL CITY", "MO"),
  ("SCHELLSBURG", "PA"),
  ("SCHENECTADY", "NY"),
  ("SCHENEVUS", "NY"),
  ("SCHERERVILLE", "IN"),
  ("SCHERTZ", "TX"),
  ("SCHILLER PARK", "IL"),
  ("SCHLATER", "MS"),
  ("SCHLESWIG", "IA"),
  ("SCHLUSSER", "PA"),
  ("SCHNECKSVILLE", "PA"),
  ("SCHNEIDER", "IN"),
  ("SCHOENCHEN", "KS"),
  ("SCHOENECK", "PA"),
  ("SCHOFIELD", "WI"),
  ("SCHOFIELD BARRACKS", "HI"),
  ("SCHOHARIE", "NY"),
  ("SCHOOLCRAFT", "MI"),
  ("SCHRAM CITY", "IL"),
  ("SCHRIEVER", "LA"),
  ("SCHROON LAKE", "NY"),
  ("SCHUBERT", "PA"),
  ("SCHULENBURG", "TX"),
  ("SCHULTER", "OK"),
  ("SCHURZ", "NV"),
  ("SCHUYLER", "NE"),
  ("SCHUYLER", "VA"),
  ("SCHUYLERVILLE", "NY"),
  ("SCHUYLKILL HAVEN", "PA"),
  ("SCHWENKSVILLE", "PA"),
  ("SCIENCE HILL", "KY"),
  ("SCIO", "NY"),
  ("SCIO", "OH"),
  ("SCIO", "OR"),
  ("SCIOTA", "IL"),
  ("SCIOTODALE", "OH"),
  ("SCIPIO", "IN"),
  ("SCIPIO", "UT"),
  ("SCISSORS", "TX"),
  ("SCITUATE", "MA"),
  ("SCOBEY", "MT"),
  ("SCOFIELD", "UT"),
  ("SCOOBA", "MS"),
  ("SCOTCH MEADOWS", "NC"),
  ("SCOTCHTOWN", "NY"),
  ("SCOTIA", "SC"),
  ("SCOTIA", "NY"),
  ("SCOTIA", "CA"),
  ("SCOTIA", "NE"),
  ("SCOTLAND", "TX"),
  ("SCOTLAND", "GA"),
  ("SCOTLAND", "VA"),
  ("SCOTLAND", "SD"),
  ("SCOTLAND", "PA"),
  ("SCOTLAND", "IN"),
  ("SCOTLAND NECK", "NC"),
  ("SCOTSDALE", "MO"),
  ("SCOTT", "LA"),
  ("SCOTT", "AR"),
  ("SCOTT", "OH"),
  ("SCOTT AFB", "IL"),
  ("SCOTT CITY", "MO"),
  ("SCOTT CITY", "KS"),
  ("SCOTTDALE", "GA"),
  ("SCOTTDALE", "PA"),
  ("SCOTTS CORNERS", "NY"),
  ("SCOTTS HILL", "TN"),
  ("SCOTTS MILLS", "OR"),
  ("SCOTTS VALLEY", "CA"),
  ("SCOTTSBLUFF", "NE"),
  ("SCOTTSBORO", "AL"),
  ("SCOTTSBURG", "IN"),
  ("SCOTTSBURG", "VA"),
  ("SCOTTSBURG", "NY"),
  ("SCOTTSDALE", "AZ"),
  ("SCOTTSVILLE", "KY"),
  ("SCOTTSVILLE", "VA"),
  ("SCOTTSVILLE", "TX"),
  ("SCOTTSVILLE", "NY"),
  ("SCOTTSVILLE", "KS"),
  ("SCOTTVILLE", "MI"),
  ("SCOTTVILLE", "IL"),
  ("SCRANTON", "PA"),
  ("SCRANTON", "IA"),
  ("SCRANTON", "KS"),
  ("SCRANTON", "ND"),
  ("SCRANTON", "SC"),
  ("SCRANTON", "AR"),
  ("SCRAPER", "OK"),
  ("SCREVEN", "GA"),
  ("SCRIBNER", "NE"),
  ("SCURRY", "TX"),
  ("SEA BREEZE", "NC"),
  ("SEA BRIGHT", "NJ"),
  ("SEA CLIFF", "NY"),
  ("SEA GIRT", "NJ"),
  ("SEA ISLE CITY", "NJ"),
  ("SEA RANCH", "CA"),
  ("SEA RANCH LAKES", "FL"),
  ("SEABECK", "WA"),
  ("SEABOARD", "NC"),
  ("SEABROOK", "TX"),
  ("SEABROOK", "MD"),
  ("SEABROOK", "MA"),
  ("SEABROOK BEACH", "NH"),
  ("SEABROOK FARMS", "NJ"),
  ("SEABROOK ISLAND", "SC"),
  ("SEACLIFF", "CA"),
  ("SEADRIFT", "TX"),
  ("SEAFORD", "DE"),
  ("SEAFORD", "NY"),
  ("SEAFORTH", "MN"),
  ("SEAGOVILLE", "TX"),
  ("SEAGRAVES", "TX"),
  ("SEAGROVE", "NC"),
  ("SEAL BEACH", "CA"),
  ("SEALY", "TX"),
  ("SEAMA", "NM"),
  ("SEAMAN", "OH"),
  ("SEARCHLIGHT", "NV"),
  ("SEARCY", "AR"),
  ("SEARINGTOWN", "NY"),
  ("SEARLES", "MN"),
  ("SEARLES VALLEY", "CA"),
  ("SEARSBORO", "IA"),
  ("SEARSPORT", "ME"),
  ("SEASIDE", "CA"),
  ("SEASIDE", "OR"),
  ("SEASIDE HEIGHTS", "NJ"),
  ("SEASIDE PARK", "NJ"),
  ("SEAT PLEASANT", "MD"),
  ("SEATAC", "WA"),
  ("SEATON", "IL"),
  ("SEATONVILLE", "IL"),
  ("SEATTLE", "WA"),
  ("SEBA DALKAI", "AZ"),
  ("SEBASTIAN", "FL"),
  ("SEBASTIAN", "TX"),
  ("SEBASTOPOL", "CA"),
  ("SEBASTOPOL", "MS"),
  ("SEBEKA", "MN"),
  ("SEBEWAING", "MI"),
  ("SEBOYETA", "NM"),
  ("SEBREE", "KY"),
  ("SEBRING", "FL"),
  ("SEBRING", "OH"),
  ("SECAUCUS", "NJ"),
  ("SECO MINES", "TX"),
  ("SECOND MESA", "AZ"),
  ("SECONSETT ISLAND", "MA"),
  ("SECOR", "IL"),
  ("SECRETARY", "MD"),
  ("SECTION", "AL"),
  ("SECURITY-WIDEFIELD", "CO"),
  ("SEDALIA", "MO"),
  ("SEDALIA", "NC"),
  ("SEDALIA", "CO"),
  ("SEDALIA", "KY"),
  ("SEDAN", "MT"),
  ("SEDAN", "KS"),
  ("SEDAN", "MN"),
  ("SEDGEWICKVILLE", "MO"),
  ("SEDGWICK", "KS"),
  ("SEDGWICK", "CO"),
  ("SEDGWICK", "AR"),
  ("SEDILLO", "NM"),
  ("SEDLEY", "VA"),
  ("SEDONA", "AZ"),
  ("SEDRO-WOOLLEY", "WA"),
  ("SEELEY", "CA"),
  ("SEELEY LAKE", "MT"),
  ("SEELYVILLE", "IN"),
  ("SEFFNER", "FL"),
  ("SEGUIN", "TX"),
  ("SEGUNDO", "CO"),
  ("SEHILI", "AZ"),
  ("SEIBERT", "CO"),
  ("SEILING", "OK"),
  ("SEKIU", "WA"),
  ("SELAH", "WA"),
  ("SELAWIK", "AK"),
  ("SELBY", "SD"),
  ("SELBYVILLE", "DE"),
  ("SELDEN", "NY"),
  ("SELDEN", "KS"),
  ("SELDOVIA", "AK"),
  ("SELDOVIA VILLAGE", "AK"),
  ("SELFRIDGE", "ND"),
  ("SELIGMAN", "AZ"),
  ("SELIGMAN", "MO"),
  ("SELINSGROVE", "PA"),
  ("SELLERS", "SC"),
  ("SELLERSBURG", "IN"),
  ("SELLERSVILLE", "PA"),
  ("SELLS", "AZ"),
  ("SELMA", "AL"),
  ("SELMA", "OR"),
  ("SELMA", "CA"),
  ("SELMA", "TX"),
  ("SELMA", "NC"),
  ("SELMA", "IN"),
  ("SELMA", "VA"),
  ("SELMER", "TN"),
  ("SELMONT-WEST SELMONT", "AL"),
  ("SELTZER", "PA"),
  ("SELZ", "ND"),
  ("SEMINARY", "MS"),
  ("SEMINOLE", "OK"),
  ("SEMINOLE", "FL"),
  ("SEMINOLE", "TX"),
  ("SEMINOLE MANOR", "FL"),
  ("SENA", "NM"),
  ("SENATH", "MO"),
  ("SENATOBIA", "MS"),
  ("SENECA", "SC"),
  ("SENECA", "IL"),
  ("SENECA", "MO"),
  ("SENECA", "PA"),
  ("SENECA", "KS"),
  ("SENECA", "OR"),
  ("SENECA", "SD"),
  ("SENECA", "NE"),
  ("SENECA FALLS", "NY"),
  ("SENECA GARDENS", "KY"),
  ("SENECA KNOLLS", "NY"),
  ("SENECAVILLE", "OH"),
  ("SENOIA", "GA"),
  ("SENTINEL", "OK"),
  ("SENTINEL BUTTE", "ND"),
  ("SEQUIM", "WA"),
  ("SEQUOIA CREST", "CA"),
  ("SEQUOYAH", "OK"),
  ("SERENADA", "TX"),
  ("SERENO DEL MAR", "CA"),
  ("SERGEANT BLUFF", "IA"),
  ("SESSER", "IL"),
  ("SETAUKET-EAST SETAUKET", "NY"),
  ("SETH WARD", "TX"),
  ("SEVEN CORNERS", "VA"),
  ("SEVEN DEVILS", "NC"),
  ("SEVEN FIELDS", "PA"),
  ("SEVEN HILLS", "OH"),
  ("SEVEN HILLS", "CO"),
  ("SEVEN LAKES", "NC"),
  ("SEVEN MILE", "AZ"),
  ("SEVEN MILE", "OH"),
  ("SEVEN MILE FORD", "VA"),
  ("SEVEN OAKS", "SC"),
  ("SEVEN OAKS", "TX"),
  ("SEVEN POINTS", "TX"),
  ("SEVEN SPRINGS", "PA"),
  ("SEVEN SPRINGS", "NC"),
  ("SEVEN VALLEYS", "PA"),
  ("SEVENTH MOUNTAIN", "OR"),
  ("SEVERANCE", "CO"),
  ("SEVERANCE", "KS"),
  ("SEVERN", "MD"),
  ("SEVERN", "NC"),
  ("SEVERNA PARK", "MD"),
  ("SEVERY", "KS"),
  ("SEVIERVILLE", "TN"),
  ("SEVILLE", "FL"),
  ("SEVILLE", "OH"),
  ("SEVILLE", "GA"),
  ("SEVILLE", "CA"),
  ("SEWALL'S POINT", "FL"),
  ("SEWANEE", "TN"),
  ("SEWARD", "AK"),
  ("SEWARD", "NE"),
  ("SEWARD", "KS"),
  ("SEWARD", "PA"),
  ("SEWAREN", "NJ"),
  ("SEWICKLEY", "PA"),
  ("SEWICKLEY HEIGHTS", "PA"),
  ("SEWICKLEY HILLS", "PA"),
  ("SEXTON", "IA"),
  ("SEXTONVILLE", "WI"),
  ("SEYMOUR", "TN"),
  ("SEYMOUR", "IN"),
  ("SEYMOUR", "TX"),
  ("SEYMOUR", "MO"),
  ("SEYMOUR", "WI"),
  ("SEYMOUR", "IA"),
  ("SEYMOUR", "WI"),
  ("SEYMOUR", "IL"),
  ("SHABBONA", "IL"),
  ("SHACKELFORD", "CA"),
  ("SHACKLE ISLAND", "TN"),
  ("SHADE GAP", "PA"),
  ("SHADELAND", "IN"),
  ("SHADOW LAKE", "WA"),
  ("SHADY COVE", "OR"),
  ("SHADY DALE", "GA"),
  ("SHADY GROVE", "OK"),
  ("SHADY GROVE", "OK"),
  ("SHADY GROVE", "OK"),
  ("SHADY HILLS", "FL"),
  ("SHADY HOLLOW", "TX"),
  ("SHADY POINT", "OK"),
  ("SHADY SHORES", "TX"),
  ("SHADY SIDE", "MD"),
  ("SHADY SPRING", "WV"),
  ("SHADYBROOK", "TX"),
  ("SHADYSIDE", "OH"),
  ("SHAFER", "MN"),
  ("SHAFT", "MD"),
  ("SHAFTER", "CA"),
  ("SHAGELUK", "AK"),
  ("SHAKER HEIGHTS", "OH"),
  ("SHAKOPEE", "MN"),
  ("SHAKTOOLIK", "AK"),
  ("SHALIMAR", "FL"),
  ("SHALLOTTE", "NC"),
  ("SHALLOWATER", "TX"),
  ("SHAMBAUGH", "IA"),
  ("SHAMOKIN", "PA"),
  ("SHAMOKIN DAM", "PA"),
  ("SHAMROCK", "TX"),
  ("SHAMROCK", "OK"),
  ("SHAMROCK LAKES", "IN"),
  ("SHANDON", "CA"),
  ("SHANIKO", "OR"),
  ("SHANKSVILLE", "PA"),
  ("SHANNON", "GA"),
  ("SHANNON", "MS"),
  ("SHANNON", "NC"),
  ("SHANNON", "IL"),
  ("SHANNON CITY", "IA"),
  ("SHANNON HILLS", "AR"),
  ("SHANNONDALE", "WV"),
  ("SHANOR-NORTHVUE", "PA"),
  ("SHARK RIVER HILLS", "NJ"),
  ("SHARON", "MS"),
  ("SHARON", "PA"),
  ("SHARON", "CT"),
  ("SHARON", "MA"),
  ("SHARON", "WI"),
  ("SHARON", "ND"),
  ("SHARON", "SC"),
  ("SHARON", "TN"),
  ("SHARON", "GA"),
  ("SHARON", "KS"),
  ("SHARON", "OK"),
  ("SHARON HILL", "PA"),
  ("SHARON SPRINGS", "NY"),
  ("SHARON SPRINGS", "KS"),
  ("SHARONVILLE", "OH"),
  ("SHARPES", "FL"),
  ("SHARPSBURG", "NC"),
  ("SHARPSBURG", "GA"),
  ("SHARPSBURG", "PA"),
  ("SHARPSBURG", "IA"),
  ("SHARPSBURG", "MD"),
  ("SHARPSBURG", "KY"),
  ("SHARPSVILLE", "PA"),
  ("SHARPSVILLE", "IN"),
  ("SHARPTOWN", "MD"),
  ("SHARTLESVILLE", "PA"),
  ("SHASTA", "CA"),
  ("SHASTA LAKE", "CA"),
  ("SHATTUCK", "OK"),
  ("SHAVANO PARK", "TX"),
  ("SHAVER LAKE", "CA"),
  ("SHAVERTOWN", "PA"),
  ("SHAW", "MS"),
  ("SHAW HEIGHTS", "CO"),
  ("SHAWANO", "WI"),
  ("SHAWMUT", "MT"),
  ("SHAWNEE", "OK"),
  ("SHAWNEE", "KS"),
  ("SHAWNEE", "OH"),
  ("SHAWNEE", "OH"),
  ("SHAWNEE HILLS", "OH"),
  ("SHAWNEE HILLS", "OH"),
  ("SHAWNEELAND", "VA"),
  ("SHAWNEETOWN", "IL"),
  ("SHAWSVILLE", "VA"),
  ("SHEAKLEYVILLE", "PA"),
  ("SHEATOWN", "PA"),
  ("SHEBOYGAN", "WI"),
  ("SHEBOYGAN FALLS", "WI"),
  ("SHEDD", "OR"),
  ("SHEEP SPRINGS", "NM"),
  ("SHEFFIELD", "OH"),
  ("SHEFFIELD", "AL"),
  ("SHEFFIELD", "IA"),
  ("SHEFFIELD", "PA"),
  ("SHEFFIELD", "IL"),
  ("SHEFFIELD LAKE", "OH"),
  ("SHELBINA", "MO"),
  ("SHELBURN", "IN"),
  ("SHELBURNE", "VT"),
  ("SHELBURNE FALLS", "MA"),
  ("SHELBY", "NC"),
  ("SHELBY", "AL"),
  ("SHELBY", "OH"),
  ("SHELBY", "MT"),
  ("SHELBY", "MS"),
  ("SHELBY", "IA"),
  ("SHELBY", "MI"),
  ("SHELBY", "IN"),
  ("SHELBY", "NE"),
  ("SHELBYVILLE", "TN"),
  ("SHELBYVILLE", "IN"),
  ("SHELBYVILLE", "KY"),
  ("SHELBYVILLE", "IL"),
  ("SHELBYVILLE", "MO"),
  ("SHELDAHL", "IA"),
  ("SHELDON", "IA"),
  ("SHELDON", "TX"),
  ("SHELDON", "IL"),
  ("SHELDON", "WI"),
  ("SHELDON", "MO"),
  ("SHELDON", "ND"),
  ("SHELL", "WY"),
  ("SHELL KNOB", "MO"),
  ("SHELL LAKE", "WI"),
  ("SHELL POINT", "SC"),
  ("SHELL RIDGE", "CA"),
  ("SHELL ROCK", "IA"),
  ("SHELL VALLEY", "ND"),
  ("SHELLEY", "ID"),
  ("SHELLMAN", "GA"),
  ("SHELLSBURG", "IA"),
  ("SHELLY", "MN"),
  ("SHELOCTA", "PA"),
  ("SHELTER COVE", "CA"),
  ("SHELTER ISLAND", "NY"),
  ("SHELTER ISLAND HEIGHTS", "NY"),
  ("SHELTON", "CT"),
  ("SHELTON", "WA"),
  ("SHELTON", "NE"),
  ("SHENANDOAH", "LA"),
  ("SHENANDOAH", "IA"),
  ("SHENANDOAH", "VA"),
  ("SHENANDOAH", "TX"),
  ("SHENANDOAH", "PA"),
  ("SHENANDOAH FARMS", "VA"),
  ("SHENANDOAH HEIGHTS", "PA"),
  ("SHENANDOAH JUNCTION", "WV"),
  ("SHENANDOAH RETREAT", "VA"),
  ("SHENANDOAH SHORES", "VA"),
  ("SHENOROCK", "NY"),
  ("SHEPARDSVILLE", "IN"),
  ("SHEPHERD", "TX"),
  ("SHEPHERD", "MT"),
  ("SHEPHERD", "MI"),
  ("SHEPHERDSTOWN", "WV"),
  ("SHEPHERDSVILLE", "KY"),
  ("SHEPPTON", "PA"),
  ("SHERANDO", "VA"),
  ("SHERBURN", "MN"),
  ("SHERBURNE", "NY"),
  ("SHERIDAN", "CA"),
  ("SHERIDAN", "AR"),
  ("SHERIDAN", "WY"),
  ("SHERIDAN", "CO"),
  ("SHERIDAN", "IN"),
  ("SHERIDAN", "IL"),
  ("SHERIDAN", "OR"),
  ("SHERIDAN", "MI"),
  ("SHERIDAN", "MT"),
  ("SHERIDAN", "MO"),
  ("SHERIDAN LAKE", "CO"),
  ("SHERMAN", "TX"),
  ("SHERMAN", "IL"),
  ("SHERMAN", "MS"),
  ("SHERMAN", "NY"),
  ("SHERMAN", "SD"),
  ("SHERRARD", "IL"),
  ("SHERRELWOOD", "CO"),
  ("SHERRILL", "NY"),
  ("SHERRILL", "AR"),
  ("SHERRILL", "IA"),
  ("SHERRODSVILLE", "OH"),
  ("SHERWOOD", "AR"),
  ("SHERWOOD", "OR"),
  ("SHERWOOD", "WI"),
  ("SHERWOOD", "OH"),
  ("SHERWOOD", "OH"),
  ("SHERWOOD", "MI"),
  ("SHERWOOD", "ND"),
  ("SHERWOOD MANOR", "CT"),
  ("SHERWOOD SHORES", "TX"),
  ("SHEVLIN", "MN"),
  ("SHEYENNE", "ND"),
  ("SHICKLEY", "NE"),
  ("SHICKSHINNY", "PA"),
  ("SHIDLER", "OK"),
  ("SHIELDS", "MI"),
  ("SHILLINGTON", "PA"),
  ("SHILOH", "IL"),
  ("SHILOH", "SC"),
  ("SHILOH", "PA"),
  ("SHILOH", "GA"),
  ("SHILOH", "AL"),
  ("SHILOH", "NJ"),
  ("SHILOH", "OH"),
  ("SHINDLER", "SD"),
  ("SHINER", "TX"),
  ("SHINGLE SPRINGS", "CA"),
  ("SHINGLEHOUSE", "PA"),
  ("SHINGLETOWN", "CA"),
  ("SHINNECOCK HILLS", "NY"),
  ("SHINNSTON", "WV"),
  ("SHIOCTON", "WI"),
  ("SHIP BOTTOM", "NJ"),
  ("SHIPMAN", "VA"),
  ("SHIPMAN", "IL"),
  ("SHIPPENSBURG", "PA"),
  ("SHIPPENSBURG UNIVERSITY", "PA"),
  ("SHIPPENVILLE", "PA"),
  ("SHIPPINGPORT", "PA"),
  ("SHIPROCK", "NM"),
  ("SHIPSHEWANA", "IN"),
  ("SHIREMANSTOWN", "PA"),
  ("SHIRLEY", "NY"),
  ("SHIRLEY", "AR"),
  ("SHIRLEY", "MA"),
  ("SHIRLEY", "IN"),
  ("SHIRLEYSBURG", "PA"),
  ("SHISHMAREF", "AK"),
  ("SHIVELY", "KY"),
  ("SHOAL CREEK", "AL"),
  ("SHOAL CREEK DRIVE", "MO"),
  ("SHOAL CREEK ESTATES", "MO"),
  ("SHOALS", "IN"),
  ("SHOEMAKERSVILLE", "PA"),
  ("SHOKAN", "NY"),
  ("SHOLES", "NE"),
  ("SHONGALOO", "LA"),
  ("SHONGOPOVI", "AZ"),
  ("SHONTO", "AZ"),
  ("SHOREACRES", "TX"),
  ("SHOREHAM", "MI"),
  ("SHOREHAM", "NY"),
  ("SHORELINE", "WA"),
  ("SHOREVIEW", "MN"),
  ("SHOREWOOD", "IL"),
  ("SHOREWOOD", "MN"),
  ("SHOREWOOD", "WI"),
  ("SHOREWOOD FOREST", "IN"),
  ("SHOREWOOD HILLS", "WI"),
  ("SHOREWOOD-TOWER HILLS-HARBERT", "MI"),
  ("SHORT", "OK"),
  ("SHORT HILLS", "NJ"),
  ("SHORT PUMP", "VA"),
  ("SHORTER", "AL"),
  ("SHORTSVILLE", "NY"),
  ("SHOSHONE", "CA"),
  ("SHOSHONE", "ID"),
  ("SHOSHONI", "WY"),
  ("SHOW LOW", "AZ"),
  ("SHREVE", "OH"),
  ("SHREVEPORT", "LA"),
  ("SHREWSBURY", "NJ"),
  ("SHREWSBURY", "PA"),
  ("SHREWSBURY", "MO"),
  ("SHREWSBURY", "WV"),
  ("SHRUB OAK", "NY"),
  ("SHUBERT", "NE"),
  ("SHUBUTA", "MS"),
  ("SHUEYVILLE", "IA"),
  ("SHULLSBURG", "WI"),
  ("SHUMWAY", "IL"),
  ("SHUNGNAK", "AK"),
  ("SHUQUALAK", "MS"),
  ("SIASCONSET", "MA"),
  ("SIBLEY", "LA"),
  ("SIBLEY", "IA"),
  ("SIBLEY", "MO"),
  ("SIBLEY", "IL"),
  ("SIBLEY", "ND"),
  ("SICILY ISLAND", "LA"),
  ("SIDELL", "IL"),
  ("SIDMAN", "PA"),
  ("SIDNEY", "OH"),
  ("SIDNEY", "NE"),
  ("SIDNEY", "MT"),
  ("SIDNEY", "NY"),
  ("SIDNEY", "AR"),
  ("SIDNEY", "IA"),
  ("SIDNEY", "IL"),
  ("SIDNEY", "IN"),
  ("SIDON", "MS"),
  ("SIENNA PLANTATION", "TX"),
  ("SIERRA BLANCA", "TX"),
  ("SIERRA BROOKS", "CA"),
  ("SIERRA CITY", "CA"),
  ("SIERRA MADRE", "CA"),
  ("SIERRA VIEW", "PA"),
  ("SIERRA VILLAGE", "CA"),
  ("SIERRA VISTA", "AZ"),
  ("SIERRA VISTA SOUTHEAST", "AZ"),
  ("SIERRAVILLE", "CA"),
  ("SIESTA ACRES", "TX"),
  ("SIESTA KEY", "FL"),
  ("SIESTA SHORES", "TX"),
  ("SIGEL", "IL"),
  ("SIGLERVILLE", "PA"),
  ("SIGNAL HILL", "CA"),
  ("SIGNAL MOUNTAIN", "TN"),
  ("SIGOURNEY", "IA"),
  ("SIGURD", "UT"),
  ("SIKES", "LA"),
  ("SIKESTON", "MO"),
  ("SILAS", "AL"),
  ("SILER CITY", "NC"),
  ("SILERTON", "TN"),
  ("SILESIA", "MT"),
  ("SILETZ", "OR"),
  ("SILEX", "MO"),
  ("SILKWORTH", "PA"),
  ("SILO", "OK"),
  ("SILOAM", "GA"),
  ("SILOAM SPRINGS", "AR"),
  ("SILSBEE", "TX"),
  ("SILT", "CO"),
  ("SILVANA", "WA"),
  ("SILVER BAY", "MN"),
  ("SILVER CITY", "NM"),
  ("SILVER CITY", "NC"),
  ("SILVER CITY", "MS"),
  ("SILVER CITY", "CA"),
  ("SILVER CITY", "IA"),
  ("SILVER CLIFF", "CO"),
  ("SILVER CREEK", "MS"),
  ("SILVER CREEK", "MN"),
  ("SILVER CREEK", "NY"),
  ("SILVER CREEK", "MO"),
  ("SILVER CREEK", "NE"),
  ("SILVER FIRS", "WA"),
  ("SILVER GATE", "MT"),
  ("SILVER GROVE", "KY"),
  ("SILVER HILL", "MD"),
  ("SILVER LAKE", "NC"),
  ("SILVER LAKE", "FL"),
  ("SILVER LAKE", "OR"),
  ("SILVER LAKE", "OH"),
  ("SILVER LAKE", "WI"),
  ("SILVER LAKE", "NJ"),
  ("SILVER LAKE", "KS"),
  ("SILVER LAKE", "IN"),
  ("SILVER LAKE", "MN"),
  ("SILVER LAKE", "NJ"),
  ("SILVER LAKES", "CA"),
  ("SILVER PEAK", "NV"),
  ("SILVER PLUME", "CO"),
  ("SILVER RIDGE", "NJ"),
  ("SILVER SPRING", "MD"),
  ("SILVER SPRINGS", "NV"),
  ("SILVER SPRINGS", "AK"),
  ("SILVER SPRINGS", "NY"),
  ("SILVER SPRINGS SHORES", "FL"),
  ("SILVER SUMMIT", "UT"),
  ("SILVERADO RESORT", "CA"),
  ("SILVERDALE", "WA"),
  ("SILVERDALE", "PA"),
  ("SILVERHILL", "AL"),
  ("SILVERSTREET", "SC"),
  ("SILVERTHORNE", "CO"),
  ("SILVERTON", "OR"),
  ("SILVERTON", "OH"),
  ("SILVERTON", "TX"),
  ("SILVERTON", "CO"),
  ("SILVIS", "IL"),
  ("SIMI VALLEY", "CA"),
  ("SIMLA", "CO"),
  ("SIMMESPORT", "LA"),
  ("SIMMS", "OK"),
  ("SIMMS", "MT"),
  ("SIMONTON", "TX"),
  ("SIMONTON LAKE", "IN"),
  ("SIMPSON", "LA"),
  ("SIMPSON", "PA"),
  ("SIMPSON", "IL"),
  ("SIMPSON", "NC"),
  ("SIMPSON", "KS"),
  ("SIMPSONVILLE", "SC"),
  ("SIMPSONVILLE", "KY"),
  ("SIMS", "IL"),
  ("SIMS", "IN"),
  ("SIMS", "NC"),
  ("SIMS CHAPEL", "AL"),
  ("SIMSBORO", "LA"),
  ("SIMSBURY CENTER", "CT"),
  ("SINAI", "SD"),
  ("SINCLAIR", "WY"),
  ("SINCLAIRVILLE", "NY"),
  ("SINGAC", "NJ"),
  ("SINGER", "LA"),
  ("SINKING SPRING", "PA"),
  ("SINKING SPRING", "OH"),
  ("SINTON", "TX"),
  ("SIOUX CENTER", "IA"),
  ("SIOUX CITY", "IA"),
  ("SIOUX FALLS", "SD"),
  ("SIOUX RAPIDS", "IA"),
  ("SIPSEY", "AL"),
  ("SIRACUSAVILLE", "LA"),
  ("SIREN", "WI"),
  ("SISCO HEIGHTS", "WA"),
  ("SISQUOC", "CA"),
  ("SISSETON", "SD"),
  ("SISSONVILLE", "WV"),
  ("SISTER BAY", "WI"),
  ("SISTERS", "OR"),
  ("SISTERSVILLE", "WV"),
  ("SITKA AND", "AK"),
  ("SIX MILE", "SC"),
  ("SIX MILE RUN", "NJ"),
  ("SIX SHOOTER CANYON", "AZ"),
  ("SIXTEEN MILE STAND", "OH"),
  ("SKAGWAY", "AK"),
  ("SKAMOKAWA VALLEY", "WA"),
  ("SKANEATELES", "NY"),
  ("SKEDEE", "OK"),
  ("SKELLYTOWN", "TX"),
  ("SKIATOOK", "OK"),
  ("SKIDAWAY ISLAND", "GA"),
  ("SKIDMORE", "TX"),
  ("SKIDMORE", "MO"),
  ("SKIDWAY LAKE", "MI"),
  ("SKILLMAN", "NJ"),
  ("SKIPPACK", "PA"),
  ("SKIPPERS CORNER", "NC"),
  ("SKOKIE", "IL"),
  ("SKOKOMISH", "WA"),
  ("SKOWHEGAN", "ME"),
  ("SKWENTNA", "AK"),
  ("SKY LAKE", "FL"),
  ("SKY VALLEY", "CA"),
  ("SKY VALLEY", "GA"),
  ("SKYKOMISH", "WA"),
  ("SKYLAND", "NV"),
  ("SKYLAND ESTATES", "VA"),
  ("SKYLINE", "AL"),
  ("SKYLINE", "MN"),
  ("SKYLINE ACRES", "OH"),
  ("SKYLINE VIEW", "PA"),
  ("SKYLINE-GANIPA", "NM"),
  ("SLABTOWN", "PA"),
  ("SLANA", "AK"),
  ("SLATE SPRINGS", "MS"),
  ("SLATEDALE", "PA"),
  ("SLATER", "WY"),
  ("SLATER", "MO"),
  ("SLATER", "IA"),
  ("SLATER-MARIETTA", "SC"),
  ("SLATINGTON", "PA"),
  ("SLATON", "TX"),
  ("SLAUGHTER", "LA"),
  ("SLAUGHTER BEACH", "DE"),
  ("SLAUGHTERS", "KY"),
  ("SLAUGHTERVILLE", "OK"),
  ("SLAYDEN", "TN"),
  ("SLAYTON", "MN"),
  ("SLEDGE", "MS"),
  ("SLEEPY EYE", "MN"),
  ("SLEEPY HOLLOW", "CA"),
  ("SLEEPY HOLLOW", "NY"),
  ("SLEEPY HOLLOW", "IL"),
  ("SLEEPY HOLLOW", "WY"),
  ("SLEETMUTE", "AK"),
  ("SLICK", "OK"),
  ("SLICKVILLE", "PA"),
  ("SLIDELL", "LA"),
  ("SLIGO", "PA"),
  ("SLINGER", "WI"),
  ("SLIPPERY ROCK", "PA"),
  ("SLIPPERY ROCK UNIVERSITY", "PA"),
  ("SLOAN", "NY"),
  ("SLOAN", "IA"),
  ("SLOATSBURG", "NY"),
  ("SLOCOMB", "AL"),
  ("SLOVAN", "PA"),
  ("SMACKOVER", "AR"),
  ("SMALLWOOD", "NY"),
  ("SMARTSVILLE", "CA"),
  ("SMELTERTOWN", "CO"),
  ("SMELTERVILLE", "ID"),
  ("SMETHPORT", "PA"),
  ("SMICKSBURG", "PA"),
  ("SMILEY", "TX"),
  ("SMITH CENTER", "KS"),
  ("SMITH CORNER", "CA"),
  ("SMITH ISLAND", "MD"),
  ("SMITH MILLS", "MA"),
  ("SMITH RIVER", "CA"),
  ("SMITH VALLEY", "NV"),
  ("SMITH VILLAGE", "OK"),
  ("SMITHBORO", "IL"),
  ("SMITHERS", "WV"),
  ("SMITHFIELD", "NC"),
  ("SMITHFIELD", "VA"),
  ("SMITHFIELD", "UT"),
  ("SMITHFIELD", "OH"),
  ("SMITHFIELD", "PA"),
  ("SMITHFIELD", "IL"),
  ("SMITHFIELD", "WV"),
  ("SMITHFIELD", "NE"),
  ("SMITHFIELD", "KY"),
  ("SMITHLAND", "KY"),
  ("SMITHLAND", "IA"),
  ("SMITHS FERRY", "ID"),
  ("SMITHS GROVE", "KY"),
  ("SMITHS STATION", "AL"),
  ("SMITHSBURG", "MD"),
  ("SMITHTON", "IL"),
  ("SMITHTON", "MO"),
  ("SMITHTON", "PA"),
  ("SMITHTOWN", "NY"),
  ("SMITHVILLE", "MO"),
  ("SMITHVILLE", "TN"),
  ("SMITHVILLE", "NJ"),
  ("SMITHVILLE", "TX"),
  ("SMITHVILLE", "GA"),
  ("SMITHVILLE", "MS"),
  ("SMITHVILLE", "OH"),
  ("SMITHVILLE", "OK"),
  ("SMITHVILLE", "AR"),
  ("SMITHVILLE FLATS", "NY"),
  ("SMITHVILLE-SANDERS", "IN"),
  ("SMOAKS", "SC"),
  ("SMOCK", "PA"),
  ("SMOKE RISE", "AL"),
  ("SMOKETOWN", "PA"),
  ("SMOLAN", "KS"),
  ("SMOOT", "WY"),
  ("SMYER", "TX"),
  ("SMYRNA", "TN"),
  ("SMYRNA", "GA"),
  ("SMYRNA", "DE"),
  ("SMYRNA", "SC"),
  ("SMYRNA", "NY"),
  ("SNAKE CREEK", "OK"),
  ("SNEAD", "AL"),
  ("SNEADS", "FL"),
  ("SNEADS FERRY", "NC"),
  ("SNEEDVILLE", "TN"),
  ("SNELLING", "SC"),
  ("SNELLING", "CA"),
  ("SNELLVILLE", "GA"),
  ("SNOHOMISH", "WA"),
  ("SNOOK", "TX"),
  ("SNOQUALMIE", "WA"),
  ("SNOQUALMIE PASS", "WA"),
  ("SNOVER", "MI"),
  ("SNOW HILL", "MD"),
  ("SNOW HILL", "NC"),
  ("SNOW LAKE SHORES", "MS"),
  ("SNOW SHOE", "PA"),
  ("SNOWFLAKE", "AZ"),
  ("SNOWMASS VILLAGE", "CO"),
  ("SNOWVILLE", "VA"),
  ("SNOWVILLE", "UT"),
  ("SNYDER", "TX"),
  ("SNYDER", "OK"),
  ("SNYDER", "NE"),
  ("SNYDER", "CO"),
  ("SNYDERTOWN", "PA"),
  ("SNYDERTOWN", "PA"),
  ("SNYDERVILLE", "UT"),
  ("SOAP LAKE", "WA"),
  ("SOBIESKI", "MN"),
  ("SOBIESKI", "WI"),
  ("SOCASTEE", "SC"),
  ("SOCIAL CIRCLE", "GA"),
  ("SOCIETY HILL", "SC"),
  ("SOCIETY HILL", "NJ"),
  ("SOCORRO", "TX"),
  ("SOCORRO", "NM"),
  ("SODA BAY", "CA"),
  ("SODA SPRINGS", "ID"),
  ("SODA SPRINGS", "CA"),
  ("SODAVILLE", "OR"),
  ("SODDY-DAISY", "TN"),
  ("SODUS", "NY"),
  ("SODUS POINT", "NY"),
  ("SOHAM", "NM"),
  ("SO-HI", "AZ"),
  ("SOLANA", "FL"),
  ("SOLANA BEACH", "CA"),
  ("SOLDIER", "IA"),
  ("SOLDIER", "KS"),
  ("SOLDIER CREEK", "SD"),
  ("SOLDIERS GROVE", "WI"),
  ("SOLDOTNA", "AK"),
  ("SOLEDAD", "CA"),
  ("SOLEN", "ND"),
  ("SOLIS", "TX"),
  ("SOLOMON", "KS"),
  ("SOLOMON", "AZ"),
  ("SOLOMONS", "MD"),
  ("SOLON", "OH"),
  ("SOLON", "IA"),
  ("SOLON SPRINGS", "WI"),
  ("SOLVANG", "CA"),
  ("SOLVAY", "NY"),
  ("SOLWAY", "MN"),
  ("SOMBRILLO", "NM"),
  ("SOMERDALE", "NJ"),
  ("SOMERS", "MT"),
  ("SOMERS", "CT"),
  ("SOMERS", "IA"),
  ("SOMERS POINT", "NJ"),
  ("SOMERSET", "KY"),
  ("SOMERSET", "MA"),
  ("SOMERSET", "NJ"),
  ("SOMERSET", "WI"),
  ("SOMERSET", "PA"),
  ("SOMERSET", "TX"),
  ("SOMERSET", "OH"),
  ("SOMERSET", "IN"),
  ("SOMERSET", "MD"),
  ("SOMERSWORTH", "NH"),
  ("SOMERTON", "AZ"),
  ("SOMERVILLE", "TN"),
  ("SOMERVILLE", "MA"),
  ("SOMERVILLE", "TX"),
  ("SOMERVILLE", "AL"),
  ("SOMERVILLE", "NJ"),
  ("SOMERVILLE", "IN"),
  ("SOMERVILLE", "OH"),
  ("SOMONAUK", "IL"),
  ("SONOITA", "AZ"),
  ("SONOMA", "CA"),
  ("SONORA", "CA"),
  ("SONORA", "TX"),
  ("SONORA", "KY"),
  ("SOPCHOPPY", "FL"),
  ("SOPER", "OK"),
  ("SOPERTON", "GA"),
  ("SOPHIA", "WV"),
  ("SOQUEL", "CA"),
  ("SORENTO", "IL"),
  ("SORREL", "LA"),
  ("SORRENTO", "LA"),
  ("SORRENTO", "FL"),
  ("SOSO", "MS"),
  ("SOUDAN", "MN"),
  ("SOUDERSBURG", "PA"),
  ("SOUDERTON", "PA"),
  ("SOULSBYVILLE", "CA"),
  ("SOUND BEACH", "NY"),
  ("SOUR JOHN", "OK"),
  ("SOUR LAKE", "TX"),
  ("SOURIS", "ND"),
  ("SOUTH ACOMITA VILLAGE", "NM"),
  ("SOUTH ALAMO", "TX"),
  ("SOUTH AMANA", "IA"),
  ("SOUTH AMBOY", "NJ"),
  ("SOUTH AMHERST", "MA"),
  ("SOUTH AMHERST", "OH"),
  ("SOUTH APOPKA", "FL"),
  ("SOUTH ASHBURNHAM", "MA"),
  ("SOUTH BARRE", "VT"),
  ("SOUTH BARRINGTON", "IL"),
  ("SOUTH BAY", "FL"),
  ("SOUTH BEACH", "FL"),
  ("SOUTH BELOIT", "IL"),
  ("SOUTH BEND", "IN"),
  ("SOUTH BEND", "WA"),
  ("SOUTH BEND", "NE"),
  ("SOUTH BETHANY", "DE"),
  ("SOUTH BETHLEHEM", "PA"),
  ("SOUTH BLOOMFIELD", "OH"),
  ("SOUTH BLOOMING GROVE", "NY"),
  ("SOUTH BOARDMAN", "MI"),
  ("SOUTH BOSTON", "VA"),
  ("SOUTH BOUND BROOK", "NJ"),
  ("SOUTH BRADENTON", "FL"),
  ("SOUTH BROOKSVILLE", "FL"),
  ("SOUTH BROWNING", "MT"),
  ("SOUTH BURLINGTON", "VT"),
  ("SOUTH CANAL", "OH"),
  ("SOUTH CARROLLTON", "KY"),
  ("SOUTH CARTHAGE", "TN"),
  ("SOUTH CHARLESTON", "WV"),
  ("SOUTH CHARLESTON", "OH"),
  ("SOUTH CHICAGO HEIGHTS", "IL"),
  ("SOUTH CLE ELUM", "WA"),
  ("SOUTH CLEVELAND", "TN"),
  ("SOUTH COATESVILLE", "PA"),
  ("SOUTH COFFEYVILLE", "OK"),
  ("SOUTH CONGAREE", "SC"),
  ("SOUTH CONNELLSVILLE", "PA"),
  ("SOUTH CORNING", "NY"),
  ("SOUTH COVENTRY", "CT"),
  ("SOUTH CREEK", "WA"),
  ("SOUTH DAYTON", "NY"),
  ("SOUTH DAYTONA", "FL"),
  ("SOUTH DEERFIELD", "MA"),
  ("SOUTH DENNIS", "MA"),
  ("SOUTH DOS PALOS", "CA"),
  ("SOUTH DUXBURY", "MA"),
  ("SOUTH EL MONTE", "CA"),
  ("SOUTH ELGIN", "IL"),
  ("SOUTH ELIOT", "ME"),
  ("SOUTH END", "MN"),
  ("SOUTH ENGLISH", "IA"),
  ("SOUTH EUCLID", "OH"),
  ("SOUTH FALLSBURG", "NY"),
  ("SOUTH FARMINGDALE", "NY"),
  ("SOUTH FLORAL PARK", "NY"),
  ("SOUTH FORK", "MO"),
  ("SOUTH FORK", "CO"),
  ("SOUTH FORK", "PA"),
  ("SOUTH FORK ESTATES", "TX"),
  ("SOUTH FULTON", "TN"),
  ("SOUTH GATE", "CA"),
  ("SOUTH GATE RIDGE", "FL"),
  ("SOUTH GIFFORD", "MO"),
  ("SOUTH GLASTONBURY", "MT"),
  ("SOUTH GLENS FALLS", "NY"),
  ("SOUTH GORIN", "MO"),
  ("SOUTH GREELEY", "WY"),
  ("SOUTH GREENFIELD", "MO"),
  ("SOUTH GREENSBURG", "PA"),
  ("SOUTH GULL LAKE", "MI"),
  ("SOUTH HAVEN", "MI"),
  ("SOUTH HAVEN", "IN"),
  ("SOUTH HAVEN", "KS"),
  ("SOUTH HAVEN", "MN"),
  ("SOUTH HEART", "ND"),
  ("SOUTH HEIGHTS", "PA"),
  ("SOUTH HEMPSTEAD", "NY"),
  ("SOUTH HENDERSON", "NC"),
  ("SOUTH HIGHPOINT", "FL"),
  ("SOUTH HILL", "WA"),
  ("SOUTH HILL", "VA"),
  ("SOUTH HILL", "NY"),
  ("SOUTH HILLS", "MT"),
  ("SOUTH HOLLAND", "IL"),
  ("SOUTH HOOKSETT", "NH"),
  ("SOUTH HOUSTON", "TX"),
  ("SOUTH HUNTINGTON", "NY"),
  ("SOUTH HUTCHINSON", "KS"),
  ("SOUTH JACKSONVILLE", "IL"),
  ("SOUTH JORDAN", "UT"),
  ("SOUTH KENSINGTON", "MD"),
  ("SOUTH KOMELIK", "AZ"),
  ("SOUTH LA PALOMA", "TX"),
  ("SOUTH LAKE TAHOE", "CA"),
  ("SOUTH LANCASTER", "MA"),
  ("SOUTH LAUREL", "MD"),
  ("SOUTH LEAD HILL", "AR"),
  ("SOUTH LEBANON", "OH"),
  ("SOUTH LEBANON", "OR"),
  ("SOUTH LIMA", "NY"),
  ("SOUTH LINEVILLE", "MO"),
  ("SOUTH LOCKPORT", "NY"),
  ("SOUTH LYON", "MI"),
  ("SOUTH MANSFIELD", "LA"),
  ("SOUTH MIAMI", "FL"),
  ("SOUTH MIAMI HEIGHTS", "FL"),
  ("SOUTH MILLS", "NC"),
  ("SOUTH MILWAUKEE", "WI"),
  ("SOUTH MONROE", "MI"),
  ("SOUTH MONROVIA ISLAND", "CA"),
  ("SOUTH MOUNTAIN", "TX"),
  ("SOUTH NAKNEK", "AK"),
  ("SOUTH NEW CASTLE", "PA"),
  ("SOUTH NYACK", "NY"),
  ("SOUTH OGDEN", "UT"),
  ("SOUTH OROVILLE", "CA"),
  ("SOUTH PADRE ISLAND", "TX"),
  ("SOUTH PALM BEACH", "FL"),
  ("SOUTH PARIS", "ME"),
  ("SOUTH PARK", "WY"),
  ("SOUTH PARK TOWNSHIP", "PA"),
  ("SOUTH PARK VIEW", "KY"),
  ("SOUTH PASADENA", "CA"),
  ("SOUTH PASADENA", "FL"),
  ("SOUTH PATRICK SHORES", "FL"),
  ("SOUTH PEKIN", "IL"),
  ("SOUTH PHILIPSBURG", "PA"),
  ("SOUTH PITTSBURG", "TN"),
  ("SOUTH PLAINFIELD", "NJ"),
  ("SOUTH POINT", "OH"),
  ("SOUTH POINT", "TX"),
  ("SOUTH PORTLAND", "ME"),
  ("SOUTH POTTSTOWN", "PA"),
  ("SOUTH PRAIRIE", "WA"),
  ("SOUTH RANGE", "MI"),
  ("SOUTH RENOVO", "PA"),
  ("SOUTH RIDING", "VA"),
  ("SOUTH RIVER", "NJ"),
  ("SOUTH ROCKWOOD", "MI"),
  ("SOUTH ROSEMARY", "NC"),
  ("SOUTH ROXANA", "IL"),
  ("SOUTH ROYALTON", "VT"),
  ("SOUTH RUN", "VA"),
  ("SOUTH RUSSELL", "OH"),
  ("SOUTH SALEM", "OH"),
  ("SOUTH SALT LAKE", "UT"),
  ("SOUTH SAN FRANCISCO", "CA"),
  ("SOUTH SAN GABRIEL", "CA"),
  ("SOUTH SAN JOSE HILLS", "CA"),
  ("SOUTH SANFORD", "ME"),
  ("SOUTH SARASOTA", "FL"),
  ("SOUTH SHAFTSBURY", "VT"),
  ("SOUTH SHORE", "SD"),
  ("SOUTH SHORE", "KY"),
  ("SOUTH SIOUX CITY", "NE"),
  ("SOUTH SOLON", "OH"),
  ("SOUTH ST. PAUL", "MN"),
  ("SOUTH SUMTER", "SC"),
  ("SOUTH TAFT", "CA"),
  ("SOUTH TEMPLE", "PA"),
  ("SOUTH TOLEDO BEND", "TX"),
  ("SOUTH TOMS RIVER", "NJ"),
  ("SOUTH TUCSON", "AZ"),
  ("SOUTH UNIONTOWN", "PA"),
  ("SOUTH VACHERIE", "LA"),
  ("SOUTH VALLEY", "NM"),
  ("SOUTH VALLEY STREAM", "NY"),
  ("SOUTH VAN HORN", "AK"),
  ("SOUTH VENICE", "FL"),
  ("SOUTH VIENNA", "OH"),
  ("SOUTH VINEMONT", "AL"),
  ("SOUTH WALLINS", "KY"),
  ("SOUTH WAVERLY", "PA"),
  ("SOUTH WAYNE", "WI"),
  ("SOUTH WEBER", "UT"),
  ("SOUTH WEBSTER", "OH"),
  ("SOUTH WELDON", "NC"),
  ("SOUTH WENATCHEE", "WA"),
  ("SOUTH WHITLEY", "IN"),
  ("SOUTH WHITTIER", "CA"),
  ("SOUTH WILLARD", "UT"),
  ("SOUTH WILLIAMSON", "KY"),
  ("SOUTH WILLIAMSPORT", "PA"),
  ("SOUTH WILMINGTON", "IL"),
  ("SOUTH WINDHAM", "CT"),
  ("SOUTH WINDHAM", "ME"),
  ("SOUTH WOODSTOCK", "CT"),
  ("SOUTH YARMOUTH", "MA"),
  ("SOUTH ZANESVILLE", "OH"),
  ("SOUTHAMPTON", "NY"),
  ("SOUTHAMPTON MEADOWS", "VA"),
  ("SOUTHAVEN", "MS"),
  ("SOUTHBRIDGE TOWN", "MA"),
  ("SOUTHCHASE", "FL"),
  ("SOUTHEAST ARCADIA", "FL"),
  ("SOUTHERN GATEWAY", "VA"),
  ("SOUTHERN PINES", "NC"),
  ("SOUTHERN SHOPS", "SC"),
  ("SOUTHERN SHORES", "NC"),
  ("SOUTHERN UTE", "CO"),
  ("SOUTHERN VIEW", "IL"),
  ("SOUTHFIELD", "MI"),
  ("SOUTHFIELD", "MA"),
  ("SOUTHGATE", "MI"),
  ("SOUTHGATE", "FL"),
  ("SOUTHGATE", "KY"),
  ("SOUTHLAKE", "TX"),
  ("SOUTHMAYD", "TX"),
  ("SOUTHMONT", "NC"),
  ("SOUTHMONT", "PA"),
  ("SOUTHOLD", "NY"),
  ("SOUTHPORT", "NY"),
  ("SOUTHPORT", "NC"),
  ("SOUTHPORT", "CT"),
  ("SOUTHPORT", "IN"),
  ("SOUTHSIDE", "AL"),
  ("SOUTHSIDE CHESCONESSEX", "VA"),
  ("SOUTHSIDE PLACE", "TX"),
  ("SOUTHVIEW", "PA"),
  ("SOUTHWEST CITY", "MO"),
  ("SOUTHWEST GREENSBURG", "PA"),
  ("SOUTHWEST HARBOR", "ME"),
  ("SOUTHWEST RANCHES", "FL"),
  ("SOUTHWOOD ACRES", "CT"),
  ("SOUTHWORTH", "WA"),
  ("SPACKENKILL", "NY"),
  ("SPADE", "TX"),
  ("SPALDING", "NE"),
  ("SPANAWAY", "WA"),
  ("SPANGLE", "WA"),
  ("SPANISH FORK", "UT"),
  ("SPANISH FORT", "AL"),
  ("SPANISH LAKE", "MO"),
  ("SPANISH SPRINGS", "NV"),
  ("SPANISH VALLEY", "UT"),
  ("SPARKILL", "NY"),
  ("SPARKMAN", "AR"),
  ("SPARKS", "NV"),
  ("SPARKS", "GA"),
  ("SPARKS", "TX"),
  ("SPARKS", "OK"),
  ("SPARLAND", "IL"),
  ("SPARTA", "IL"),
  ("SPARTA", "TN"),
  ("SPARTA", "WI"),
  ("SPARTA", "KY"),
  ("SPARTA", "MI"),
  ("SPARTA", "NC"),
  ("SPARTA", "GA"),
  ("SPARTA", "MO"),
  ("SPARTA", "OH"),
  ("SPARTANBURG", "SC"),
  ("SPARTANSBURG", "PA"),
  ("SPAULDING", "CA"),
  ("SPAULDING", "OK"),
  ("SPAULDING", "IL"),
  ("SPAVINAW", "OK"),
  ("SPEARFISH", "SD"),
  ("SPEARMAN", "TX"),
  ("SPEARSVILLE", "LA"),
  ("SPEARVILLE", "KS"),
  ("SPECULATOR", "NY"),
  ("SPEED", "NC"),
  ("SPEED", "KS"),
  ("SPEEDWAY", "IN"),
  ("SPEERS", "PA"),
  ("SPELTER", "WV"),
  ("SPENCER", "IA"),
  ("SPENCER", "TN"),
  ("SPENCER", "OK"),
  ("SPENCER", "NC"),
  ("SPENCER", "MA"),
  ("SPENCER", "WI"),
  ("SPENCER", "IN"),
  ("SPENCER", "WV"),
  ("SPENCER", "ID"),
  ("SPENCER", "NY"),
  ("SPENCER", "OH"),
  ("SPENCER", "NE"),
  ("SPENCER", "SD"),
  ("SPENCER MOUNTAIN", "NC"),
  ("SPENCERPORT", "NY"),
  ("SPENCERVILLE", "NM"),
  ("SPENCERVILLE", "MD"),
  ("SPENCERVILLE", "OH"),
  ("SPERRY", "OK"),
  ("SPERRYVILLE", "VA"),
  ("SPICELAND", "IN"),
  ("SPICER", "MN"),
  ("SPICKARD", "MO"),
  ("SPILLERTOWN", "IL"),
  ("SPILLVILLE", "IA"),
  ("SPINDALE", "NC"),
  ("SPINNERSTOWN", "PA"),
  ("SPIRIT LAKE", "IA"),
  ("SPIRIT LAKE", "ID"),
  ("SPIRITWOOD", "ND"),
  ("SPIRITWOOD LAKE", "ND"),
  ("SPIRO", "OK"),
  ("SPIVEY", "KS"),
  ("SPIVEY'S CORNER", "NC"),
  ("SPLENDORA", "TX"),
  ("SPOFFORD", "TX"),
  ("SPOKANE", "WA"),
  ("SPOKANE", "LA"),
  ("SPOKANE", "MO"),
  ("SPOKANE CREEK", "MT"),
  ("SPOKANE VALLEY", "WA"),
  ("SPOONER", "WI"),
  ("SPORTSMEN ACRES", "OK"),
  ("SPOTSWOOD", "NJ"),
  ("SPOTSYLVANIA COURTHOUSE", "VA"),
  ("SPOTTSVILLE", "KY"),
  ("SPRAGUE", "WA"),
  ("SPRAGUE", "NE"),
  ("SPRAGUEVILLE", "IA"),
  ("SPRAY", "OR"),
  ("SPRECKELS", "CA"),
  ("SPRING", "TX"),
  ("SPRING ARBOR", "MI"),
  ("SPRING BAY", "IL"),
  ("SPRING CITY", "TN"),
  ("SPRING CITY", "UT"),
  ("SPRING CITY", "PA"),
  ("SPRING CREEK", "NV"),
  ("SPRING CREEK", "SD"),
  ("SPRING GAP", "MD"),
  ("SPRING GARDEN", "AL"),
  ("SPRING GARDEN", "CA"),
  ("SPRING GARDENS", "TX"),
  ("SPRING GLEN", "UT"),
  ("SPRING GREEN", "WI"),
  ("SPRING GROVE", "IL"),
  ("SPRING GROVE", "MN"),
  ("SPRING GROVE", "PA"),
  ("SPRING GROVE", "IN"),
  ("SPRING HILL", "FL"),
  ("SPRING HILL", "TN"),
  ("SPRING HILL", "KS"),
  ("SPRING HILL", "PA"),
  ("SPRING HILL", "MN"),
  ("SPRING HILL", "IA"),
  ("SPRING HILL", "IN"),
  ("SPRING HOPE", "NC"),
  ("SPRING HOUSE", "PA"),
  ("SPRING LAKE", "NC"),
  ("SPRING LAKE", "FL"),
  ("SPRING LAKE", "NJ"),
  ("SPRING LAKE", "MI"),
  ("SPRING LAKE", "UT"),
  ("SPRING LAKE", "IN"),
  ("SPRING LAKE HEIGHTS", "NJ"),
  ("SPRING LAKE PARK", "MN"),
  ("SPRING MILL", "KY"),
  ("SPRING MILLS", "PA"),
  ("SPRING MOUNT", "PA"),
  ("SPRING PARK", "MN"),
  ("SPRING RIDGE", "FL"),
  ("SPRING RIDGE", "MD"),
  ("SPRING RIDGE", "PA"),
  ("SPRING VALLEY", "NV"),
  ("SPRING VALLEY", "AZ"),
  ("SPRING VALLEY", "IL"),
  ("SPRING VALLEY", "CA"),
  ("SPRING VALLEY", "CA"),
  ("SPRING VALLEY", "WI"),
  ("SPRING VALLEY", "MN"),
  ("SPRING VALLEY", "NY"),
  ("SPRING VALLEY", "OH"),
  ("SPRING VALLEY", "KY"),
  ("SPRING VALLEY LAKE", "CA"),
  ("SPRING VALLEY VILLAGE", "TX"),
  ("SPRINGBORO", "OH"),
  ("SPRINGBORO", "PA"),
  ("SPRINGBROOK", "IA"),
  ("SPRINGBROOK", "ND"),
  ("SPRINGDALE", "AR"),
  ("SPRINGDALE", "NJ"),
  ("SPRINGDALE", "OH"),
  ("SPRINGDALE", "UT"),
  ("SPRINGDALE", "SC"),
  ("SPRINGDALE", "SC"),
  ("SPRINGDALE", "WA"),
  ("SPRINGDALE", "PA"),
  ("SPRINGDALE", "MD"),
  ("SPRINGDALE", "MT"),
  ("SPRINGER", "OK"),
  ("SPRINGER", "NM"),
  ("SPRINGERTON", "IL"),
  ("SPRINGERVILLE", "AZ"),
  ("SPRINGFIELD", "MO"),
  ("SPRINGFIELD", "IL"),
  ("SPRINGFIELD", "MA"),
  ("SPRINGFIELD", "OH"),
  ("SPRINGFIELD", "OR"),
  ("SPRINGFIELD", "TN"),
  ("SPRINGFIELD", "VA"),
  ("SPRINGFIELD", "FL"),
  ("SPRINGFIELD", "MI"),
  ("SPRINGFIELD", "KY"),
  ("SPRINGFIELD", "GA"),
  ("SPRINGFIELD", "VT"),
  ("SPRINGFIELD", "MN"),
  ("SPRINGFIELD", "SC"),
  ("SPRINGFIELD", "LA"),
  ("SPRINGFIELD", "WV"),
  ("SPRINGFIELD", "CO"),
  ("SPRINGFIELD", "SD"),
  ("SPRINGFIELD", "NE"),
  ("SPRINGFIELD", "WI"),
  ("SPRINGHILL", "FL"),
  ("SPRINGHILL", "LA"),
  ("SPRINGHILL", "MT"),
  ("SPRINGLAKE", "TX"),
  ("SPRINGMONT", "PA"),
  ("SPRINGPORT", "MI"),
  ("SPRINGPORT", "IN"),
  ("SPRINGS", "NY"),
  ("SPRINGTOWN", "TX"),
  ("SPRINGTOWN", "AR"),
  ("SPRINGVALE", "ME"),
  ("SPRINGVIEW", "NE"),
  ("SPRINGVILLE", "UT"),
  ("SPRINGVILLE", "AL"),
  ("SPRINGVILLE", "VA"),
  ("SPRINGVILLE", "CA"),
  ("SPRINGVILLE", "NY"),
  ("SPRINGVILLE", "IA"),
  ("SPRINGWATER HAMLET", "NY"),
  ("SPRUCE PINE", "NC"),
  ("SPRUCE PINE", "AL"),
  ("SPRY", "PA"),
  ("SPUR", "TX"),
  ("SPURGEON", "TN"),
  ("SPURGEON", "IN"),
  ("SQUAW LAKE", "MN"),
  ("SQUAW VALLEY", "CA"),
  ("SQUIRREL MOUNTAIN VALLEY", "CA"),
  ("ST JOHNS", "OH"),
  ("ST. ALBANS", "WV"),
  ("ST. ALBANS", "VT"),
  ("ST. ANDREWS", "SC"),
  ("ST. ANN", "MO"),
  ("ST. ANN HIGHLANDS", "CO"),
  ("ST. ANNE", "IL"),
  ("ST. ANSGAR", "IA"),
  ("ST. ANTHONY", "MN"),
  ("ST. ANTHONY", "ID"),
  ("ST. ANTHONY", "IA"),
  ("ST. ANTHONY", "MN"),
  ("ST. AUGUSTA", "MN"),
  ("ST. AUGUSTINE", "FL"),
  ("ST. AUGUSTINE", "IL"),
  ("ST. AUGUSTINE BEACH", "FL"),
  ("ST. AUGUSTINE SHORES", "FL"),
  ("ST. AUGUSTINE SOUTH", "FL"),
  ("ST. BENEDICT", "IA"),
  ("ST. BERNARD", "OH"),
  ("ST. BERNICE", "IN"),
  ("ST. BONAVENTURE", "NY"),
  ("ST. BONIFACIUS", "MN"),
  ("ST. CHARLES", "MO"),
  ("ST. CHARLES", "IL"),
  ("ST. CHARLES", "MN"),
  ("ST. CHARLES", "MI"),
  ("ST. CHARLES", "KY"),
  ("ST. CHARLES", "AR"),
  ("ST. CHARLES", "ID"),
  ("ST. CHARLES", "IA"),
  ("ST. CHARLES", "SD"),
  ("ST. CHARLES", "VA"),
  ("ST. CLAIR", "MO"),
  ("ST. CLAIR", "MI"),
  ("ST. CLAIR", "PA"),
  ("ST. CLAIR", "MN"),
  ("ST. CLAIR SHORES", "MI"),
  ("ST. CLAIRSVILLE", "OH"),
  ("ST. CLAIRSVILLE", "PA"),
  ("ST. CLEMENT", "MO"),
  ("ST. CLOUD", "MN"),
  ("ST. CLOUD", "FL"),
  ("ST. CLOUD", "MO"),
  ("ST. CLOUD", "WI"),
  ("ST. CROIX FALLS", "WI"),
  ("ST. DAVID", "AZ"),
  ("ST. DAVID", "IL"),
  ("ST. DONATUS", "IA"),
  ("ST. EDWARD", "NE"),
  ("ST. ELIZABETH", "MO"),
  ("ST. ELMO", "IL"),
  ("ST. FLORIAN", "AL"),
  ("ST. FRANCIS", "MN"),
  ("ST. FRANCIS", "WI"),
  ("ST. FRANCIS", "KS"),
  ("ST. FRANCIS", "AR"),
  ("ST. FRANCIS", "SD"),
  ("ST. FRANCISVILLE", "MO"),
  ("ST. FRANCISVILLE", "LA"),
  ("ST. FRANCISVILLE", "IL"),
  ("ST. GABRIEL", "LA"),
  ("ST. GEORGE", "UT"),
  ("ST. GEORGE", "AK"),
  ("ST. GEORGE", "SC"),
  ("ST. GEORGE", "KS"),
  ("ST. GEORGE", "MO"),
  ("ST. GEORGE ISLAND", "MD"),
  ("ST. HEDWIG", "TX"),
  ("ST. HELEN", "MI"),
  ("ST. HELENA", "NC"),
  ("ST. HELENA", "CA"),
  ("ST. HELENA", "NE"),
  ("ST. HELENS", "OR"),
  ("ST. HENRY", "OH"),
  ("ST. HILAIRE", "MN"),
  ("ST. IGNACE", "MI"),
  ("ST. IGNATIUS", "MT"),
  ("ST. JACOB", "IL"),
  ("ST. JAMES", "LA"),
  ("ST. JAMES", "NC"),
  ("ST. JAMES", "MD"),
  ("ST. JAMES", "NY"),
  ("ST. JAMES", "MO"),
  ("ST. JAMES", "MN"),
  ("ST. JAMES", "MI"),
  ("ST. JAMES CITY", "FL"),
  ("ST. JO", "TX"),
  ("ST. JOE", "AR"),
  ("ST. JOE", "IN"),
  ("ST. JOHN", "IN"),
  ("ST. JOHN", "KS"),
  ("ST. JOHN", "MO"),
  ("ST. JOHN", "WA"),
  ("ST. JOHN", "ND"),
  ("ST. JOHNS", "AZ"),
  ("ST. JOHNS", "MI"),
  ("ST. JOHNS", "AZ"),
  ("ST. JOHNS", "IL"),
  ("ST. JOHNSBURY", "VT"),
  ("ST. JOHNSVILLE", "NY"),
  ("ST. JOSEPH", "MO"),
  ("ST. JOSEPH", "MN"),
  ("ST. JOSEPH", "TN"),
  ("ST. JOSEPH", "MI"),
  ("ST. JOSEPH", "IL"),
  ("ST. JOSEPH", "WI"),
  ("ST. JOSEPH", "LA"),
  ("ST. JOSEPH", "IA"),
  ("ST. LAWRENCE", "PA"),
  ("ST. LAWRENCE", "SD"),
  ("ST. LEO", "FL"),
  ("ST. LEO", "MN"),
  ("ST. LEON", "IN"),
  ("ST. LEONARD", "MD"),
  ("ST. LIBORY", "IL"),
  ("ST. LIBORY", "NE"),
  ("ST. LOUIS", "MO"),
  ("ST. LOUIS", "OK"),
  ("ST. LOUIS", "MI"),
  ("ST. LOUIS PARK", "MN"),
  ("ST. LOUISVILLE", "OH"),
  ("ST. LUCAS", "IA"),
  ("ST. LUCIE VILLAGE", "FL"),
  ("ST. MARIE", "MT"),
  ("ST. MARIES", "ID"),
  ("ST. MARKS", "FL"),
  ("ST. MARTIN", "MS"),
  ("ST. MARTIN", "OH"),
  ("ST. MARTIN", "MN"),
  ("ST. MARTINS", "MO"),
  ("ST. MARTINVILLE", "LA"),
  ("ST. MARY", "MO"),
  ("ST. MARY OF THE WOODS", "IN"),
  ("ST. MARYS", "PA"),
  ("ST. MARYS", "GA"),
  ("ST. MARYS", "OH"),
  ("ST. MARYS", "KS"),
  ("ST. MARYS", "WV"),
  ("ST. MARYS", "IA"),
  ("ST. MARY'S", "AK"),
  ("ST. MARY'S", "CO"),
  ("ST. MARYS POINT", "MN"),
  ("ST. MATTHEWS", "KY"),
  ("ST. MATTHEWS", "SC"),
  ("ST. MAURICE", "LA"),
  ("ST. MEINRAD", "IN"),
  ("ST. MICHAEL", "MN"),
  ("ST. MICHAEL", "AK"),
  ("ST. MICHAEL", "PA"),
  ("ST. MICHAELS", "AZ"),
  ("ST. MICHAELS", "MD"),
  ("ST. NAZIANZ", "WI"),
  ("ST. OLAF", "IA"),
  ("ST. ONGE", "SD"),
  ("ST. PARIS", "OH"),
  ("ST. PAUL", "MN"),
  ("ST. PAUL", "AK"),
  ("ST. PAUL", "MO"),
  ("ST. PAUL", "TX"),
  ("ST. PAUL", "TX"),
  ("ST. PAUL", "VA"),
  ("ST. PAUL", "KS"),
  ("ST. PAUL", "NE"),
  ("ST. PAUL", "IA"),
  ("ST. PAUL", "IN"),
  ("ST. PAUL", "OR"),
  ("ST. PAUL", "AR"),
  ("ST. PAUL PARK", "MN"),
  ("ST. PAULS", "NC"),
  ("ST. PETE BEACH", "FL"),
  ("ST. PETER", "MN"),
  ("ST. PETER", "WI"),
  ("ST. PETER", "IL"),
  ("ST. PETERS", "MO"),
  ("ST. PETERSBURG", "FL"),
  ("ST. PETERSBURG", "PA"),
  ("ST. PIERRE", "MT"),
  ("ST. REGIS", "MT"),
  ("ST. REGIS FALLS", "NY"),
  ("ST. REGIS PARK", "KY"),
  ("ST. ROBERT", "MO"),
  ("ST. ROSA", "MN"),
  ("ST. ROSE", "LA"),
  ("ST. SIMONS", "GA"),
  ("ST. STEPHEN", "MN"),
  ("ST. STEPHEN", "SC"),
  ("ST. STEPHENS", "AL"),
  ("ST. STEPHENS", "NC"),
  ("ST. THOMAS", "ND"),
  ("ST. THOMAS", "MO"),
  ("ST. VINCENT", "MN"),
  ("ST. VINCENT COLLEGE", "PA"),
  ("ST. XAVIER", "MT"),
  ("STAATSBURG", "NY"),
  ("STACEY STREET", "FL"),
  ("STACY", "MN"),
  ("STACYVILLE", "IA"),
  ("STAFFORD", "TX"),
  ("STAFFORD", "OR"),
  ("STAFFORD", "KS"),
  ("STAFFORD", "OH"),
  ("STAFFORD COURTHOUSE", "VA"),
  ("STAFFORD SPRINGS", "CT"),
  ("STAGECOACH", "NV"),
  ("STAGECOACH", "TX"),
  ("STALEY", "NC"),
  ("STALLINGS", "NC"),
  ("STALLION SPRINGS", "CA"),
  ("STAMFORD", "CT"),
  ("STAMFORD", "TX"),
  ("STAMFORD", "NY"),
  ("STAMFORD", "NE"),
  ("STAMPING GROUND", "KY"),
  ("STAMPS", "AR"),
  ("STANAFORD", "WV"),
  ("STANARDSVILLE", "VA"),
  ("STANBERRY", "MO"),
  ("STANCHFIELD", "MN"),
  ("STANDARD", "IL"),
  ("STANDARD CITY", "IL"),
  ("STANDING PINE", "MS"),
  ("STANDING ROCK", "AL"),
  ("STANDISH", "ME"),
  ("STANDISH", "MI"),
  ("STANFIELD", "NC"),
  ("STANFIELD", "AZ"),
  ("STANFIELD", "OR"),
  ("STANFORD", "KY"),
  ("STANFORD", "CA"),
  ("STANFORD", "IL"),
  ("STANFORD", "MT"),
  ("STANHOPE", "NJ"),
  ("STANHOPE", "IA"),
  ("STANLEY", "WI"),
  ("STANLEY", "NC"),
  ("STANLEY", "LA"),
  ("STANLEY", "ND"),
  ("STANLEY", "VA"),
  ("STANLEY", "ID"),
  ("STANLEY", "IA"),
  ("STANLEYTOWN", "VA"),
  ("STANNARDS", "NY"),
  ("STANSBERRY LAKE", "WA"),
  ("STANSBURY PARK", "UT"),
  ("STANTON", "CA"),
  ("STANTON", "MI"),
  ("STANTON", "KY"),
  ("STANTON", "TX"),
  ("STANTON", "NE"),
  ("STANTON", "IA"),
  ("STANTON", "TN"),
  ("STANTON", "ND"),
  ("STANTONSBURG", "NC"),
  ("STANTONVILLE", "TN"),
  ("STANWOOD", "WA"),
  ("STANWOOD", "IA"),
  ("STANWOOD", "MI"),
  ("STAPLEHURST", "NE"),
  ("STAPLES", "MN"),
  ("STAPLES", "TX"),
  ("STAPLETON", "GA"),
  ("STAPLETON", "NE"),
  ("STAR", "ID"),
  ("STAR", "NC"),
  ("STAR CITY", "AR"),
  ("STAR CITY", "IN"),
  ("STAR CITY", "WV"),
  ("STAR HARBOR", "TX"),
  ("STAR JUNCTION", "PA"),
  ("STAR LAKE", "NY"),
  ("STAR PRAIRIE", "WI"),
  ("STAR VALLEY", "AZ"),
  ("STAR VALLEY RANCH", "WY"),
  ("STARBRICK", "PA"),
  ("STARBUCK", "MN"),
  ("STARBUCK", "WA"),
  ("STARK", "KS"),
  ("STARK CITY", "MO"),
  ("STARKE", "FL"),
  ("STARKS", "LA"),
  ("STARKVILLE", "MS"),
  ("STARKVILLE", "CO"),
  ("STARKWEATHER", "ND"),
  ("STARR", "SC"),
  ("STARR SCHOOL", "MT"),
  ("STARRUCCA", "PA"),
  ("START", "LA"),
  ("STARTEX", "SC"),
  ("STARTUP", "WA"),
  ("STATE CENTER", "IA"),
  ("STATE COLLEGE", "PA"),
  ("STATE LINE", "MS"),
  ("STATE LINE", "PA"),
  ("STATE LINE", "ID"),
  ("STATE LINE CITY", "IN"),
  ("STATEBURG", "SC"),
  ("STATELINE", "NV"),
  ("STATENVILLE", "GA"),
  ("STATESBORO", "GA"),
  ("STATESVILLE", "NC"),
  ("STATHAM", "GA"),
  ("STAUNTON", "VA"),
  ("STAUNTON", "IL"),
  ("STAUNTON", "IN"),
  ("STAVES", "AR"),
  ("STAYTON", "OR"),
  ("STE. GENEVIEVE", "MO"),
  ("STE. MARIE", "IL"),
  ("STEAMBOAT", "AZ"),
  ("STEAMBOAT ROCK", "IA"),
  ("STEAMBOAT SPRINGS", "CO"),
  ("STEARNS", "KY"),
  ("STEBBINS", "AK"),
  ("STEDMAN", "NC"),
  ("STEELE", "AL"),
  ("STEELE", "MO"),
  ("STEELE", "ND"),
  ("STEELE CITY", "NE"),
  ("STEELE CREEK", "AK"),
  ("STEELEVILLE", "IL"),
  ("STEELTON", "PA"),
  ("STEELVILLE", "MO"),
  ("STEELY HOLLOW", "OK"),
  ("STEEN", "MN"),
  ("STEEP FALLS", "ME"),
  ("STEGER", "IL"),
  ("STEILACOOM", "WA"),
  ("STEINAUER", "NE"),
  ("STEINHATCHEE", "FL"),
  ("STELLA", "NE"),
  ("STELLA", "MO"),
  ("STELLA", "PR"),
  ("STEM", "NC"),
  ("STEPHEN", "MN"),
  ("STEPHENS", "AR"),
  ("STEPHENS CITY", "VA"),
  ("STEPHENSON", "MI"),
  ("STEPHENVILLE", "TX"),
  ("STEPTOE", "WA"),
  ("STERLING", "AK"),
  ("STERLING", "CO"),
  ("STERLING", "IL"),
  ("STERLING", "VA"),
  ("STERLING", "KS"),
  ("STERLING", "MI"),
  ("STERLING", "OH"),
  ("STERLING", "OK"),
  ("STERLING", "NE"),
  ("STERLING", "UT"),
  ("STERLING CITY", "TX"),
  ("STERLING HEIGHTS", "MI"),
  ("STERLINGTON", "LA"),
  ("STERRETT", "AL"),
  ("STETSONVILLE", "WI"),
  ("STEUBEN", "WI"),
  ("STEUBENVILLE", "OH"),
  ("STEVENS", "PA"),
  ("STEVENS POINT", "WI"),
  ("STEVENS VILLAGE", "AK"),
  ("STEVENSON", "AL"),
  ("STEVENSON", "WA"),
  ("STEVENSON RANCH", "CA"),
  ("STEVENSVILLE", "MD"),
  ("STEVENSVILLE", "MI"),
  ("STEVENSVILLE", "MT"),
  ("STEVINSON", "CA"),
  ("STEWARD", "IL"),
  ("STEWARDSON", "IL"),
  ("STEWART", "MN"),
  ("STEWART", "OH"),
  ("STEWART MANOR", "NY"),
  ("STEWARTSTOWN", "PA"),
  ("STEWARTSVILLE", "MO"),
  ("STEWARTSVILLE", "NJ"),
  ("STEWARTVILLE", "AL"),
  ("STEWARTVILLE", "MN"),
  ("STICKNEY", "IL"),
  ("STICKNEY", "SD"),
  ("STIDHAM", "OK"),
  ("STIGLER", "OK"),
  ("STILES", "PA"),
  ("STILESVILLE", "IN"),
  ("STILLMAN VALLEY", "IL"),
  ("STILLMORE", "GA"),
  ("STILLWATER", "OK"),
  ("STILLWATER", "MN"),
  ("STILLWATER", "PA"),
  ("STILLWATER", "NY"),
  ("STILWELL", "OK"),
  ("STINESVILLE", "IN"),
  ("STINNETT", "TX"),
  ("STINSON BEACH", "CA"),
  ("STIRLING CITY", "CA"),
  ("STITES", "ID"),
  ("STOCK ISLAND", "FL"),
  ("STOCKBRIDGE", "GA"),
  ("STOCKBRIDGE", "WI"),
  ("STOCKBRIDGE", "MI"),
  ("STOCKDALE", "TX"),
  ("STOCKDALE", "OH"),
  ("STOCKDALE", "PA"),
  ("STOCKERTOWN", "PA"),
  ("STOCKETT", "MT"),
  ("STOCKHAM", "NE"),
  ("STOCKHOLM", "WI"),
  ("STOCKHOLM", "SD"),
  ("STOCKPORT", "IA"),
  ("STOCKPORT", "OH"),
  ("STOCKTON", "CA"),
  ("STOCKTON", "KS"),
  ("STOCKTON", "MO"),
  ("STOCKTON", "MD"),
  ("STOCKTON", "MN"),
  ("STOCKTON", "UT"),
  ("STOCKTON", "IL"),
  ("STOCKTON", "NJ"),
  ("STOCKTON", "IA"),
  ("STOCKVILLE", "NE"),
  ("STOCKWELL", "IN"),
  ("STODDARD", "WI"),
  ("STOKES", "NC"),
  ("STOKESDALE", "NC"),
  ("STOLLINGS", "WV"),
  ("STONE CITY", "IA"),
  ("STONE CREEK", "OH"),
  ("STONE HARBOR", "NJ"),
  ("STONE LAKE", "WI"),
  ("STONE MOUNTAIN", "GA"),
  ("STONE PARK", "IL"),
  ("STONE RIDGE", "NY"),
  ("STONE RIDGE", "VA"),
  ("STONEBORO", "PA"),
  ("STONEFORT", "IL"),
  ("STONEGATE", "CO"),
  ("STONEHAM", "MA"),
  ("STONERSTOWN", "PA"),
  ("STONEVILLE", "NC"),
  ("STONEWALL", "TX"),
  ("STONEWALL", "LA"),
  ("STONEWALL", "MS"),
  ("STONEWALL", "NC"),
  ("STONEWALL", "OK"),
  ("STONEWALL GAP", "CO"),
  ("STONEWOOD", "WV"),
  ("STONEY POINT", "OK"),
  ("STONINGTON", "IL"),
  ("STONINGTON", "CT"),
  ("STONY BROOK", "NY"),
  ("STONY BROOK UNIVERSITY", "NY"),
  ("STONY CREEK", "VA"),
  ("STONY CREEK MILLS", "PA"),
  ("STONY POINT", "NY"),
  ("STONY POINT", "NC"),
  ("STONY POINT", "MI"),
  ("STONY PRAIRIE", "OH"),
  ("STONY RIDGE", "OH"),
  ("STONY RIVER", "AK"),
  ("STONYBROOK", "PA"),
  ("STONYFORD", "CA"),
  ("STORDEN", "MN"),
  ("STORLA", "SD"),
  ("STORM LAKE", "IA"),
  ("STORMSTOWN", "PA"),
  ("STORRIE", "CA"),
  ("STORRS", "CT"),
  ("STORY", "WY"),
  ("STORY CITY", "IA"),
  ("STOTESBURY", "MO"),
  ("STOTONIC VILLAGE", "AZ"),
  ("STOTTS CITY", "MO"),
  ("STOTTVILLE", "NY"),
  ("STOUCHSBURG", "PA"),
  ("STOUGHTON", "WI"),
  ("STOUT", "IA"),
  ("STOUTLAND", "MO"),
  ("STOUTSVILLE", "OH"),
  ("STOUTSVILLE", "MO"),
  ("STOVALL", "NC"),
  ("STOVER", "MO"),
  ("STOW", "OH"),
  ("STOWE", "PA"),
  ("STOWE", "VT"),
  ("STOWELL", "TX"),
  ("STOY", "IL"),
  ("STOYSTOWN", "PA"),
  ("STRAFFORD", "MO"),
  ("STRANDBURG", "SD"),
  ("STRANDQUIST", "MN"),
  ("STRANG", "OK"),
  ("STRANG", "NE"),
  ("STRASBURG", "CO"),
  ("STRASBURG", "VA"),
  ("STRASBURG", "OH"),
  ("STRASBURG", "PA"),
  ("STRASBURG", "IL"),
  ("STRASBURG", "ND"),
  ("STRASBURG", "MO"),
  ("STRATFORD", "CT"),
  ("STRATFORD", "WI"),
  ("STRATFORD", "TX"),
  ("STRATFORD", "IA"),
  ("STRATFORD", "NJ"),
  ("STRATFORD", "OK"),
  ("STRATFORD", "CA"),
  ("STRATFORD", "SD"),
  ("STRATHCONA", "MN"),
  ("STRATHMERE", "NJ"),
  ("STRATHMOOR MANOR", "KY"),
  ("STRATHMOOR VILLAGE", "KY"),
  ("STRATHMORE", "NJ"),
  ("STRATHMORE", "CA"),
  ("STRATMOOR", "CO"),
  ("STRATTANVILLE", "PA"),
  ("STRATTON", "OH"),
  ("STRATTON", "CO"),
  ("STRATTON", "NE"),
  ("STRAUGHN", "IN"),
  ("STRAUSSTOWN", "PA"),
  ("STRAWBERRY", "AZ"),
  ("STRAWBERRY", "AR"),
  ("STRAWBERRY", "CA"),
  ("STRAWBERRY", "CA"),
  ("STRAWBERRY POINT", "IA"),
  ("STRAWN", "TX"),
  ("STRAWN", "IL"),
  ("STREAMWOOD", "IL"),
  ("STREATOR", "IL"),
  ("STREETER", "ND"),
  ("STREETMAN", "TX"),
  ("STREETSBORO", "OH"),
  ("STRINGTOWN", "OK"),
  ("STRODES MILLS", "PA"),
  ("STROMSBURG", "NE"),
  ("STRONACH", "MI"),
  ("STRONG", "AR"),
  ("STRONG", "PA"),
  ("STRONG CITY", "KS"),
  ("STRONG CITY", "OK"),
  ("STRONGHURST", "IL"),
  ("STRONGSVILLE", "OH"),
  ("STROUD", "OK"),
  ("STROUDSBURG", "PA"),
  ("STRUBLE", "IA"),
  ("STRUM", "WI"),
  ("STRUTHERS", "OH"),
  ("STRYKER", "MT"),
  ("STRYKER", "OH"),
  ("STRYKERSVILLE", "NY"),
  ("STUART", "FL"),
  ("STUART", "VA"),
  ("STUART", "IA"),
  ("STUART", "NE"),
  ("STUART", "OK"),
  ("STUARTS DRAFT", "VA"),
  ("STUCKEY", "SC"),
  ("STUDY BUTTE", "TX"),
  ("STURBRIDGE", "MA"),
  ("STURGEON", "PA"),
  ("STURGEON", "MO"),
  ("STURGEON BAY", "WI"),
  ("STURGEON LAKE", "MN"),
  ("STURGIS", "MI"),
  ("STURGIS", "SD"),
  ("STURGIS", "KY"),
  ("STURGIS", "MS"),
  ("STURTEVANT", "WI"),
  ("STUTTGART", "AR"),
  ("SU·REZ", "PR"),
  ("SUAMICO", "WI"),
  ("SUBIACO", "AR"),
  ("SUBLETTE", "KS"),
  ("SUBLETTE", "IL"),
  ("SUBLIMITY", "OR"),
  ("SUCCASUNNA", "NJ"),
  ("SUCCESS", "AR"),
  ("SUDAN", "TX"),
  ("SUDDEN VALLEY", "WA"),
  ("SUDLERSVILLE", "MD"),
  ("SUDLEY", "VA"),
  ("SUFFERN", "NY"),
  ("SUFFIELD DEPOT", "CT"),
  ("SUFFOLK", "VA"),
  ("SUGAR BUSH KNOLLS", "OH"),
  ("SUGAR CITY", "ID"),
  ("SUGAR CITY", "CO"),
  ("SUGAR CREEK", "MO"),
  ("SUGAR GROVE", "IL"),
  ("SUGAR GROVE", "VA"),
  ("SUGAR GROVE", "PA"),
  ("SUGAR GROVE", "OH"),
  ("SUGAR HILL", "GA"),
  ("SUGAR LAND", "TX"),
  ("SUGAR MOUNTAIN", "NC"),
  ("SUGAR NOTCH", "PA"),
  ("SUGARCREEK", "PA"),
  ("SUGARCREEK", "OH"),
  ("SUGARLAND RUN", "VA"),
  ("SUGARLOAF", "CO"),
  ("SUGARLOAF MOUNTAIN PARK", "CA"),
  ("SUGARLOAF SAW MILL", "CA"),
  ("SUGARLOAF VILLAGE", "CA"),
  ("SUGARMILL WOODS", "FL"),
  ("SUGARTOWN", "LA"),
  ("SUGDEN", "OK"),
  ("SUISSEVALE", "NH"),
  ("SUISUN CITY", "CA"),
  ("SUITLAND", "MD"),
  ("SULA", "MT"),
  ("SULLIGENT", "AL"),
  ("SULLIVAN", "MO"),
  ("SULLIVAN", "IL"),
  ("SULLIVAN", "IN"),
  ("SULLIVAN", "WI"),
  ("SULLIVAN CITY", "TX"),
  ("SULLIVAN'S ISLAND", "SC"),
  ("SULLY", "IA"),
  ("SULPHUR", "LA"),
  ("SULPHUR", "OK"),
  ("SULPHUR ROCK", "AR"),
  ("SULPHUR SPRINGS", "TX"),
  ("SULPHUR SPRINGS", "AR"),
  ("SULPHUR SPRINGS", "AR"),
  ("SULPHUR SPRINGS", "IN"),
  ("SULPHUR SPRINGS", "OH"),
  ("SULTAN", "WA"),
  ("SULTANA", "CA"),
  ("SUMAS", "WA"),
  ("SUMATRA", "FL"),
  ("SUMITON", "AL"),
  ("SUMMER SHADE", "KY"),
  ("SUMMERDALE", "AL"),
  ("SUMMERFIELD", "NC"),
  ("SUMMERFIELD", "MD"),
  ("SUMMERFIELD", "IL"),
  ("SUMMERFIELD", "OH"),
  ("SUMMERFIELD", "KS"),
  ("SUMMERHAVEN", "AZ"),
  ("SUMMERHILL", "PA"),
  ("SUMMERLAND", "CA"),
  ("SUMMERLIN SOUTH", "NV"),
  ("SUMMERSET", "SD"),
  ("SUMMERSIDE", "OH"),
  ("SUMMERSVILLE", "WV"),
  ("SUMMERSVILLE", "KY"),
  ("SUMMERSVILLE", "MO"),
  ("SUMMERTON", "SC"),
  ("SUMMERTOWN", "TN"),
  ("SUMMERTOWN", "GA"),
  ("SUMMERVILLE", "SC"),
  ("SUMMERVILLE", "GA"),
  ("SUMMERVILLE", "PA"),
  ("SUMMERVILLE", "OR"),
  ("SUMMIT", "NJ"),
  ("SUMMIT", "WA"),
  ("SUMMIT", "AZ"),
  ("SUMMIT", "MS"),
  ("SUMMIT", "IL"),
  ("SUMMIT", "SC"),
  ("SUMMIT", "AR"),
  ("SUMMIT", "OK"),
  ("SUMMIT", "UT"),
  ("SUMMIT", "SD"),
  ("SUMMIT", "OR"),
  ("SUMMIT HILL", "PA"),
  ("SUMMIT LAKE", "WI"),
  ("SUMMIT PARK", "UT"),
  ("SUMMIT STATION", "PA"),
  ("SUMMIT VIEW", "WA"),
  ("SUMMITVIEW", "WA"),
  ("SUMMITVILLE", "OH"),
  ("SUMMITVILLE", "IN"),
  ("SUMNER", "WA"),
  ("SUMNER", "IA"),
  ("SUMNER", "GA"),
  ("SUMNER", "IL"),
  ("SUMNER", "MS"),
  ("SUMNER", "NE"),
  ("SUMNER", "MO"),
  ("SUMPTER", "OR"),
  ("SUMRALL", "MS"),
  ("SUMTER", "SC"),
  ("SUN", "LA"),
  ("SUN CITY", "AZ"),
  ("SUN CITY", "KS"),
  ("SUN CITY CENTER", "FL"),
  ("SUN CITY WEST", "AZ"),
  ("SUN LAKES", "AZ"),
  ("SUN PRAIRIE", "WI"),
  ("SUN PRAIRIE", "MT"),
  ("SUN RIVER", "MT"),
  ("SUN RIVER TERRACE", "IL"),
  ("SUN VALLEY", "AZ"),
  ("SUN VALLEY", "NV"),
  ("SUN VALLEY", "ID"),
  ("SUN VALLEY", "PA"),
  ("SUN VALLEY", "TX"),
  ("SUN VALLEY LAKE", "IA"),
  ("SUN VILLAGE", "CA"),
  ("SUNBRIGHT", "TN"),
  ("SUNBURG", "MN"),
  ("SUNBURST", "MT"),
  ("SUNBURY", "OH"),
  ("SUNBURY", "NC"),
  ("SUNBURY", "PA"),
  ("SUNCOAST ESTATES", "FL"),
  ("SUNCOOK", "NH"),
  ("SUNDANCE", "WY"),
  ("SUNDAY LAKE", "WA"),
  ("SUNDOWN", "TX"),
  ("SUNDOWN", "MO"),
  ("SUNFIELD", "MI"),
  ("SUNFISH LAKE", "MN"),
  ("SUNFLOWER", "MS"),
  ("SUNIZONA", "AZ"),
  ("SUNLAND PARK", "NM"),
  ("SUNMAN", "IN"),
  ("SUNNY ISLES BEACH", "FL"),
  ("SUNNY SIDE", "GA"),
  ("SUNNY SLOPES", "CA"),
  ("SUNNYSIDE", "WA"),
  ("SUNNYSIDE", "UT"),
  ("SUNNYSIDE", "CA"),
  ("SUNNYSIDE", "GA"),
  ("SUNNYSIDE-TAHOE CITY", "CA"),
  ("SUNNYSLOPE", "WA"),
  ("SUNNYSLOPE", "CA"),
  ("SUNNYVALE", "CA"),
  ("SUNNYVALE", "TX"),
  ("SUNOL", "CA"),
  ("SUNOL", "NE"),
  ("SUNRAY", "TX"),
  ("SUNRISE", "FL"),
  ("SUNRISE", "AK"),
  ("SUNRISE BEACH", "MO"),
  ("SUNRISE BEACH VILLAGE", "TX"),
  ("SUNRISE LAKE", "PA"),
  ("SUNRISE MANOR", "NV"),
  ("SUNRIVER", "OR"),
  ("SUNSET", "TX"),
  ("SUNSET", "FL"),
  ("SUNSET", "LA"),
  ("SUNSET", "UT"),
  ("SUNSET", "AR"),
  ("SUNSET", "TX"),
  ("SUNSET ACRES", "TX"),
  ("SUNSET BAY", "NY"),
  ("SUNSET BEACH", "NC"),
  ("SUNSET BEACH", "CA"),
  ("SUNSET HILLS", "MO"),
  ("SUNSET VALLEY", "TX"),
  ("SUNSET VILLAGE", "GA"),
  ("SUNSHINE", "NM"),
  ("SUNSHINE", "CO"),
  ("SUNWEST", "AZ"),
  ("SUNY OSWEGO", "NY"),
  ("SUPAI", "AZ"),
  ("SUPERIOR", "WI"),
  ("SUPERIOR", "CO"),
  ("SUPERIOR", "AZ"),
  ("SUPERIOR", "NE"),
  ("SUPERIOR", "WI"),
  ("SUPERIOR", "WY"),
  ("SUPERIOR", "MT"),
  ("SUPERIOR", "IA"),
  ("SUPREME", "LA"),
  ("SUQUAMISH", "WA"),
  ("SURF CITY", "NC"),
  ("SURF CITY", "NJ"),
  ("SURFSIDE", "FL"),
  ("SURFSIDE BEACH", "SC"),
  ("SURFSIDE BEACH", "TX"),
  ("SURGOINSVILLE", "TN"),
  ("SURING", "WI"),
  ("SURPRISE", "AZ"),
  ("SURPRISE", "NE"),
  ("SURRENCY", "GA"),
  ("SURREY", "ND"),
  ("SURRY", "VA"),
  ("SUSAN MOORE", "AL"),
  ("SUSANK", "KS"),
  ("SUSANVILLE", "CA"),
  ("SUSITNA", "AK"),
  ("SUSITNA NORTH", "AK"),
  ("SUSQUEHANNA DEPOT", "PA"),
  ("SUSQUEHANNA TRAILS", "PA"),
  ("SUSSEX", "WI"),
  ("SUSSEX", "VA"),
  ("SUSSEX", "NJ"),
  ("SUTCLIFFE", "NV"),
  ("SUTERSVILLE", "PA"),
  ("SUTHERLAND", "UT"),
  ("SUTHERLAND", "NE"),
  ("SUTHERLAND", "IA"),
  ("SUTHERLIN", "OR"),
  ("SUTTER", "CA"),
  ("SUTTER CREEK", "CA"),
  ("SUTTON", "NE"),
  ("SUTTON", "WV"),
  ("SUTTON", "ND"),
  ("SUTTON-ALPINE", "AK"),
  ("SUTTONS BAY", "MI"),
  ("SUWANEE", "GA"),
  ("SWAINSBORO", "GA"),
  ("SWALEDALE", "IA"),
  ("SWALL MEADOWS", "CA"),
  ("SWAMPSCOTT", "MA"),
  ("SWAN", "IA"),
  ("SWAN LAKE", "MT"),
  ("SWAN QUARTER", "NC"),
  ("SWAN VALLEY", "ID"),
  ("SWANNANOA", "NC"),
  ("SWANSBORO", "NC"),
  ("SWANSEA", "IL"),
  ("SWANSEA", "SC"),
  ("SWANTON", "OH"),
  ("SWANTON", "VT"),
  ("SWANTON", "MD"),
  ("SWANTON", "NE"),
  ("SWANVILLE", "MN"),
  ("SWARTHMORE", "PA"),
  ("SWARTZ", "LA"),
  ("SWARTZ CREEK", "MI"),
  ("SWARTZVILLE", "PA"),
  ("SWAYZEE", "IN"),
  ("SWEA CITY", "IA"),
  ("SWEDE HEAVEN", "WA"),
  ("SWEDEN VALLEY", "PA"),
  ("SWEDESBORO", "NJ"),
  ("SWEENY", "TX"),
  ("SWEET GRASS", "MT"),
  ("SWEET HOME", "OR"),
  ("SWEET HOME", "AR"),
  ("SWEET SPRINGS", "MO"),
  ("SWEET WATER", "AL"),
  ("SWEET WATER VILLAGE", "AZ"),
  ("SWEETSER", "IN"),
  ("SWEETWATER", "OK"),
  ("SWEETWATER", "TX"),
  ("SWEETWATER", "TN"),
  ("SWEETWATER", "ID"),
  ("SWEETWATER", "FL"),
  ("SWEPSONVILLE", "NC"),
  ("SWIFT TRAIL JUNCTION", "AZ"),
  ("SWIFTON", "AR"),
  ("SWINK", "CO"),
  ("SWINK", "OK"),
  ("SWISHER", "IA"),
  ("SWISSVALE", "PA"),
  ("SWITZ CITY", "IN"),
  ("SWITZER", "WV"),
  ("SWOYERSVILLE", "PA"),
  ("SYCAMORE", "IL"),
  ("SYCAMORE", "OK"),
  ("SYCAMORE", "SC"),
  ("SYCAMORE", "GA"),
  ("SYCAMORE", "OH"),
  ("SYCAMORE", "KY"),
  ("SYCAMORE HILLS", "MO"),
  ("SYKESTON", "ND"),
  ("SYKESVILLE", "PA"),
  ("SYKESVILLE", "MD"),
  ("SYLACAUGA", "AL"),
  ("SYLVA", "NC"),
  ("SYLVAN BEACH", "NY"),
  ("SYLVAN GROVE", "KS"),
  ("SYLVAN LAKE", "MI"),
  ("SYLVAN SPRINGS", "AL"),
  ("SYLVANIA", "AL"),
  ("SYLVANIA", "OH"),
  ("SYLVANIA", "GA"),
  ("SYLVANIA", "PA"),
  ("SYLVANITE", "MT"),
  ("SYLVARENA", "MS"),
  ("SYLVESTER", "GA"),
  ("SYLVESTER", "WV"),
  ("SYLVIA", "KS"),
  ("SYMERTON", "IL"),
  ("SYMSONIA", "KY"),
  ("SYOSSET", "NY"),
  ("SYRACUSE", "NY"),
  ("SYRACUSE", "UT"),
  ("SYRACUSE", "KS"),
  ("SYRACUSE", "IN"),
  ("SYRACUSE", "NE"),
  ("SYRACUSE", "OH"),
  ("SYRACUSE", "MO"),
  ("TABERNASH", "CO"),
  ("TABIONA", "UT"),
  ("TABLE GROVE", "IL"),
  ("TABLE ROCK", "WY"),
  ("TABLE ROCK", "NE"),
  ("TABLE ROCK", "PA"),
  ("TABOR", "IA"),
  ("TABOR", "SD"),
  ("TABOR CITY", "NC"),
  ("TACNA", "AZ"),
  ("TACOMA", "WA"),
  ("TACONITE", "MN"),
  ("TAFT", "CA"),
  ("TAFT", "LA"),
  ("TAFT", "OK"),
  ("TAFT", "TX"),
  ("TAFT", "FL"),
  ("TAFT HEIGHTS", "CA"),
  ("TAFT MOSSWOOD", "CA"),
  ("TAFT SOUTHWEST", "TX"),
  ("TAGG FLATS", "OK"),
  ("TAHLEQUAH", "OK"),
  ("TAHOE VISTA", "CA"),
  ("TAHOKA", "TX"),
  ("TAHOLAH", "WA"),
  ("TAHOMA", "CA"),
  ("TAINTER LAKE", "WI"),
  ("TAJIQUE", "NM"),
  ("TAKILMA", "OR"),
  ("TAKOMA PARK", "MD"),
  ("TAKOTNA", "AK"),
  ("TALAHI ISLAND", "GA"),
  ("TALALA", "OK"),
  ("TALBOTTON", "GA"),
  ("TALCO", "TX"),
  ("TALENT", "OR"),
  ("TALIHINA", "OK"),
  ("TALKEETNA", "AK"),
  ("TALKING ROCK", "GA"),
  ("TALL TIMBER", "CO"),
  ("TALL TIMBERS", "MD"),
  ("TALLABOA ALTA", "PR"),
  ("TALLABOA", "PR"),
  ("TALLADEGA", "AL"),
  ("TALLADEGA SPRINGS", "AL"),
  ("TALLAHASSEE", "FL"),
  ("TALLAPOOSA", "GA"),
  ("TALLAPOOSA", "MO"),
  ("TALLASSEE", "AL"),
  ("TALLMADGE", "OH"),
  ("TALLULA", "IL"),
  ("TALLULAH", "LA"),
  ("TALLULAH FALLS", "GA"),
  ("TALMAGE", "CA"),
  ("TALMAGE", "NE"),
  ("TALMAGE", "KS"),
  ("TALMO", "GA"),
  ("TALOGA", "OK"),
  ("TALPA", "NM"),
  ("TALTY", "TX"),
  ("TAMA", "IA"),
  ("TAMAHA", "OK"),
  ("TAMALPAIS-HOMESTEAD VALLEY", "CA"),
  ("TAMAQUA", "PA"),
  ("TAMARAC", "FL"),
  ("TAMARACK", "MN"),
  ("TAMAROA", "IL"),
  ("TAMIAMI", "FL"),
  ("TAMMS", "IL"),
  ("TAMORA", "NE"),
  ("TAMPA", "FL"),
  ("TAMPA", "KS"),
  ("TAMPICO", "WA"),
  ("TAMPICO", "IL"),
  ("TANACROSS", "AK"),
  ("TANAINA", "AK"),
  ("TANANA", "AK"),
  ("TANEYTOWN", "MD"),
  ("TANEYVILLE", "MO"),
  ("TANGELO PARK", "FL"),
  ("TANGENT", "OR"),
  ("TANGERINE", "FL"),
  ("TANGIER", "VA"),
  ("TANGIPAHOA", "LA"),
  ("TANGLEWILDE", "WA"),
  ("TANNER", "WA"),
  ("TANNERSVILLE", "NY"),
  ("TANQUE VERDE", "AZ"),
  ("TANQUECITOS SOUTH ACRES", "TX"),
  ("TANQUECITOS SOUTH ACRES II", "TX"),
  ("TAOPI", "MN"),
  ("TAOS", "NM"),
  ("TAOS", "MO"),
  ("TAOS PUEBLO", "NM"),
  ("TAOS SKI VALLEY", "NM"),
  ("TAPPAHANNOCK", "VA"),
  ("TAPPAN", "NY"),
  ("TAPPEN", "ND"),
  ("TAR HEEL", "NC"),
  ("TARA HILLS", "CA"),
  ("TARBORO", "NC"),
  ("TARENTUM", "PA"),
  ("TARIFFVILLE", "CT"),
  ("TARKIO", "MO"),
  ("TARLTON", "OH"),
  ("TARNOV", "NE"),
  ("TARPEY VILLAGE", "CA"),
  ("TARPON SPRINGS", "FL"),
  ("TARRANT", "AL"),
  ("TARRANTS", "MO"),
  ("TARRYTOWN", "NY"),
  ("TARRYTOWN", "GA"),
  ("TASLEY", "VA"),
  ("TAT MOMOLI", "AZ"),
  ("TATAMY", "PA"),
  ("TATE CITY", "GA"),
  ("TATITLEK", "AK"),
  ("TATUM", "TX"),
  ("TATUM", "NM"),
  ("TATUM", "SC"),
  ("TATUMS", "OK"),
  ("TAUNTON", "MA"),
  ("TAUNTON", "MN"),
  ("TAVARES", "FL"),
  ("TAVERNIER", "FL"),
  ("TAVISTOCK", "NJ"),
  ("TAWAS CITY", "MI"),
  ("TAYCHEEDAH", "WI"),
  ("TAYLOR", "AZ"),
  ("TAYLOR", "MI"),
  ("TAYLOR", "TX"),
  ("TAYLOR", "AL"),
  ("TAYLOR", "PA"),
  ("TAYLOR", "MS"),
  ("TAYLOR", "WY"),
  ("TAYLOR", "AR"),
  ("TAYLOR", "WI"),
  ("TAYLOR", "ND"),
  ("TAYLOR", "NE"),
  ("TAYLOR CREEK", "OH"),
  ("TAYLOR CREEK", "FL"),
  ("TAYLOR LAKE VILLAGE", "TX"),
  ("TAYLOR LANDING", "TX"),
  ("TAYLOR MILL", "KY"),
  ("TAYLOR SPRINGS", "IL"),
  ("TAYLORS", "SC"),
  ("TAYLORS FALLS", "MN"),
  ("TAYLORS ISLAND", "MD"),
  ("TAYLORSTOWN", "PA"),
  ("TAYLORSVILLE", "UT"),
  ("TAYLORSVILLE", "MS"),
  ("TAYLORSVILLE", "CA"),
  ("TAYLORSVILLE", "NC"),
  ("TAYLORSVILLE", "GA"),
  ("TAYLORSVILLE", "IN"),
  ("TAYLORSVILLE", "KY"),
  ("TAYLORTOWN", "NC"),
  ("TAYLORVILLE", "IL"),
  ("TAZEWELL", "VA"),
  ("TAZEWELL", "TN"),
  ("TAZLINA", "AK"),
  ("TCHULA", "MS"),
  ("TEA", "SD"),
  ("TEACHEY", "NC"),
  ("TEAGUE", "TX"),
  ("TEASDALE", "UT"),
  ("TEATICKET", "MA"),
  ("TEAYS VALLEY", "WV"),
  ("TECOLOTE", "NM"),
  ("TECOLOTITO", "NM"),
  ("TECOPA", "CA"),
  ("TECUMSEH", "OK"),
  ("TECUMSEH", "MI"),
  ("TECUMSEH", "IN"),
  ("TECUMSEH", "NE"),
  ("TEDROW", "OH"),
  ("TEEC NOS POS", "AZ"),
  ("TEES TOH", "AZ"),
  ("TEGA CAY", "SC"),
  ("TEHACHAPI", "CA"),
  ("TEHAMA", "CA"),
  ("TEHUACANA", "TX"),
  ("TEKAMAH", "NE"),
  ("TEKOA", "WA"),
  ("TEKONSHA", "MI"),
  ("TELFORD", "TN"),
  ("TELFORD", "PA"),
  ("TELL CITY", "IN"),
  ("TELLER", "AK"),
  ("TELLICO PLAINS", "TN"),
  ("TELLICO VILLAGE", "TN"),
  ("TELLURIDE", "CO"),
  ("TEMECULA", "CA"),
  ("TEMELEC", "CA"),
  ("TEMESCAL VALLEY", "CA"),
  ("TEMPE", "AZ"),
  ("TEMPERANCE", "MI"),
  ("TEMPERANCEVILLE", "VA"),
  ("TEMPLE", "TX"),
  ("TEMPLE", "GA"),
  ("TEMPLE", "OK"),
  ("TEMPLE", "PA"),
  ("TEMPLE CITY", "CA"),
  ("TEMPLE HILLS", "MD"),
  ("TEMPLE TERRACE", "FL"),
  ("TEMPLETON", "CA"),
  ("TEMPLETON", "VA"),
  ("TEMPLETON", "PA"),
  ("TEMPLETON", "IA"),
  ("TEMPLEVILLE", "MD"),
  ("TEN BROECK", "KY"),
  ("TEN MILE RUN", "NJ"),
  ("TEN SLEEP", "WY"),
  ("TENAFLY", "NJ"),
  ("TENAHA", "TX"),
  ("TENAKEE SPRINGS", "AK"),
  ("TENINO", "WA"),
  ("TENKILLER", "OK"),
  ("TENNANT", "IA"),
  ("TENNANT", "CA"),
  ("TENNESSEE", "IL"),
  ("TENNESSEE RIDGE", "TN"),
  ("TENNEY", "MN"),
  ("TENNILLE", "GA"),
  ("TENNYSON", "WI"),
  ("TENNYSON", "IN"),
  ("TENSED", "ID"),
  ("TENSTRIKE", "MN"),
  ("TEQUESTA", "FL"),
  ("TERESITA", "OK"),
  ("TERLINGUA", "TX"),
  ("TERLTON", "OK"),
  ("TERMINOUS", "CA"),
  ("TERRA ALTA", "WV"),
  ("TERRA BELLA", "CA"),
  ("TERRACE HEIGHTS", "WA"),
  ("TERRACE PARK", "OH"),
  ("TERRAL", "OK"),
  ("TERRAMUGGUS", "CT"),
  ("TERRE DU LAC", "MO"),
  ("TERRE HAUTE", "IN"),
  ("TERRE HILL", "PA"),
  ("TERREBONNE", "OR"),
  ("TERRELL", "TX"),
  ("TERRELL HILLS", "TX"),
  ("TERRIL", "IA"),
  ("TERRY", "MS"),
  ("TERRY", "MT"),
  ("TERRYTOWN", "LA"),
  ("TERRYTOWN", "NE"),
  ("TERRYVILLE", "NY"),
  ("TERRYVILLE", "CT"),
  ("TESCOTT", "KS"),
  ("TESUQUE", "NM"),
  ("TESUQUE PUEBLO", "NM"),
  ("TETERBORO", "NJ"),
  ("TETHEROW", "OR"),
  ("TETLIN", "AK"),
  ("TETON", "ID"),
  ("TETON VILLAGE", "WY"),
  ("TETONIA", "ID"),
  ("TEUTOPOLIS", "IL"),
  ("TEVISTON", "CA"),
  ("TEXANNA", "OK"),
  ("TEXARKANA", "AR"),
  ("TEXARKANA", "TX"),
  ("TEXAS CITY", "TX"),
  ("TEXHOMA", "TX"),
  ("TEXHOMA", "OK"),
  ("TEXICO", "NM"),
  ("TEXLINE", "TX"),
  ("TEXOLA", "OK"),
  ("THACKERVILLE", "OK"),
  ("THARPTOWN (UNIONTOWN)", "PA"),
  ("THATCHER", "UT"),
  ("THATCHER", "AZ"),
  ("THAWVILLE", "IL"),
  ("THAXTON", "MS"),
  ("THAYER", "MO"),
  ("THAYER", "KS"),
  ("THAYER", "IL"),
  ("THAYER", "NE"),
  ("THAYER", "IA"),
  ("THAYNE", "WY"),
  ("THE ACREAGE", "FL"),
  ("THE COLONY", "TX"),
  ("THE CROSSINGS", "FL"),
  ("THE DALLES", "OR"),
  ("THE GALENA TERRITORY", "IL"),
  ("THE HAMMOCKS", "FL"),
  ("THE HIDEOUT", "PA"),
  ("THE HILLS", "TX"),
  ("THE LAKES", "MN"),
  ("THE MEADOWS", "FL"),
  ("THE PINEHILLS", "MA"),
  ("THE PINERY", "CO"),
  ("THE PLAINS", "OH"),
  ("THE PLAINS", "VA"),
  ("THE RANCH", "MN"),
  ("THE ROCK", "GA"),
  ("THE SILOS", "MT"),
  ("THE VILLAGE", "OK"),
  ("THE VILLAGE OF INDIAN HILL", "OH"),
  ("THE VILLAGES", "FL"),
  ("THE WOODLANDS", "TX"),
  ("THEBA", "AZ"),
  ("THEBES", "IL"),
  ("THEDFORD", "NE"),
  ("THEODORE", "AL"),
  ("THEODOSIA", "MO"),
  ("THERESA", "NY"),
  ("THERESA", "WI"),
  ("THERMAL", "CA"),
  ("THERMALITO", "CA"),
  ("THERMOPOLIS", "WY"),
  ("THIBODAUX", "LA"),
  ("THIEF RIVER FALLS", "MN"),
  ("THIELLS", "NY"),
  ("THIENSVILLE", "WI"),
  ("THIRD LAKE", "IL"),
  ("THOMAS", "WV"),
  ("THOMAS", "OK"),
  ("THOMASBORO", "IL"),
  ("THOMASTON", "GA"),
  ("THOMASTON", "ME"),
  ("THOMASTON", "AL"),
  ("THOMASTON", "CT"),
  ("THOMASTON", "NY"),
  ("THOMASVILLE", "NC"),
  ("THOMASVILLE", "GA"),
  ("THOMASVILLE", "AL"),
  ("THOMASVILLE", "MO"),
  ("THOMPSON", "IA"),
  ("THOMPSON", "PA"),
  ("THOMPSON", "ND"),
  ("THOMPSON FALLS", "MT"),
  ("THOMPSON SPRINGS", "UT"),
  ("THOMPSONS", "TX"),
  ("THOMPSON'S STATION", "TN"),
  ("THOMPSONTOWN", "PA"),
  ("THOMPSONVILLE", "TX"),
  ("THOMPSONVILLE", "PA"),
  ("THOMPSONVILLE", "CT"),
  ("THOMPSONVILLE", "IL"),
  ("THOMPSONVILLE", "MI"),
  ("THOMSON", "GA"),
  ("THOMSON", "IL"),
  ("THOMSON", "MN"),
  ("THONOTOSASSA", "FL"),
  ("THOR", "IA"),
  ("THOREAU", "NM"),
  ("THORNBURG", "PA"),
  ("THORNBURG", "IA"),
  ("THORNDALE", "PA"),
  ("THORNDALE", "TX"),
  ("THORNE BAY", "AK"),
  ("THORNHILL", "KY"),
  ("THORNPORT", "OH"),
  ("THORNTON", "CO"),
  ("THORNTON", "IL"),
  ("THORNTON", "CA"),
  ("THORNTON", "AR"),
  ("THORNTON", "IA"),
  ("THORNTON", "TX"),
  ("THORNTON", "WI"),
  ("THORNTONVILLE", "TX"),
  ("THORNTOWN", "IN"),
  ("THORNVILLE", "OH"),
  ("THORNWOOD", "NY"),
  ("THORP", "WI"),
  ("THORP", "WA"),
  ("THORSBY", "AL"),
  ("THOUSAND ISLAND PARK", "NY"),
  ("THOUSAND OAKS", "CA"),
  ("THOUSAND PALMS", "CA"),
  ("THRALL", "TX"),
  ("THREE CREEKS", "MO"),
  ("THREE FORKS", "MT"),
  ("THREE LAKES", "WA"),
  ("THREE LAKES", "FL"),
  ("THREE LAKES", "WI"),
  ("THREE MILE BAY", "NY"),
  ("THREE OAKS", "FL"),
  ("THREE OAKS", "MI"),
  ("THREE POINTS", "AZ"),
  ("THREE RIVERS", "CA"),
  ("THREE RIVERS", "OR"),
  ("THREE RIVERS", "MI"),
  ("THREE RIVERS", "TX"),
  ("THREE ROCKS", "CA"),
  ("THREE SPRINGS", "PA"),
  ("THREE WAY", "TN"),
  ("THROCKMORTON", "TX"),
  ("THROOP", "PA"),
  ("THUNDERBIRD BAY", "TX"),
  ("THUNDERBOLT", "GA"),
  ("THURMAN", "IA"),
  ("THURMOND", "WV"),
  ("THURMONT", "MD"),
  ("THURSTON", "OH"),
  ("THURSTON", "NE"),
  ("THYNEDALE", "VA"),
  ("TIAWAH", "OK"),
  ("TIBBIE", "AL"),
  ("TIBES", "PR"),
  ("TIBURON", "CA"),
  ("TIBURONES", "PR"),
  ("TICE", "FL"),
  ("TICHIGAN", "WI"),
  ("TICKFAW", "LA"),
  ("TICONDEROGA", "NY"),
  ("TIDIOUTE", "PA"),
  ("TIDMORE BEND", "AL"),
  ("TIERRA AMARILLA", "NM"),
  ("TIERRA BONITA", "TX"),
  ("TIERRA DORADA", "TX"),
  ("TIERRA GRANDE", "TX"),
  ("TIERRA VERDE", "TX"),
  ("TIERRA VERDE", "FL"),
  ("TIERRAS NUEVAS PONIENTE", "PR"),
  ("TIETON", "WA"),
  ("TIFFIN", "OH"),
  ("TIFFIN", "IA"),
  ("TIFTON", "GA"),
  ("TIGARD", "OR"),
  ("TIGER", "GA"),
  ("TIGER POINT", "FL"),
  ("TIGERTON", "WI"),
  ("TIGERVILLE", "SC"),
  ("TIGHTWAD", "MO"),
  ("TIGNALL", "GA"),
  ("TIJERAS", "NM"),
  ("TIKI ISLAND", "TX"),
  ("TILDEN", "IL"),
  ("TILDEN", "NE"),
  ("TILDEN", "TX"),
  ("TILDENVILLE", "FL"),
  ("TILGHMAN ISLAND", "MD"),
  ("TILGHMANTON", "MD"),
  ("TILLAMOOK", "OR"),
  ("TILLAR", "AR"),
  ("TILLATOBA", "MS"),
  ("TILLEDA", "WI"),
  ("TILLMANS CORNER", "AL"),
  ("TILLSON", "NY"),
  ("TILTON", "IL"),
  ("TILTON NORTHFIELD", "NH"),
  ("TILTONSVILLE", "OH"),
  ("TIMBER COVE", "CA"),
  ("TIMBER HILLS", "PA"),
  ("TIMBER LAKE", "SD"),
  ("TIMBER LAKES", "UT"),
  ("TIMBER PINES", "FL"),
  ("TIMBERCREEK CANYON", "TX"),
  ("TIMBERLAKE", "VA"),
  ("TIMBERLAKE", "OH"),
  ("TIMBERLANE", "IL"),
  ("TIMBERLANE", "LA"),
  ("TIMBERON", "NM"),
  ("TIMBERVILLE", "VA"),
  ("TIMBERWOOD PARK", "TX"),
  ("TIMBLIN", "PA"),
  ("TIME", "IL"),
  ("TIMKEN", "KS"),
  ("TIMMONSVILLE", "SC"),
  ("TIMNATH", "CO"),
  ("TIMONIUM", "MD"),
  ("TIMPSON", "TX"),
  ("TINA", "MO"),
  ("TINDALL", "MO"),
  ("TINGLEY", "IA"),
  ("TINLEY PARK", "IL"),
  ("TINSMAN", "AR"),
  ("TINTAH", "MN"),
  ("TINTON FALLS", "NJ"),
  ("TIOGA", "ND"),
  ("TIOGA", "TX"),
  ("TIOGA", "WV"),
  ("TIOGA", "PA"),
  ("TIONESTA", "PA"),
  ("TIPP CITY", "OH"),
  ("TIPPECANOE", "OH"),
  ("TIPTON", "IN"),
  ("TIPTON", "IA"),
  ("TIPTON", "MO"),
  ("TIPTON", "PA"),
  ("TIPTON", "CA"),
  ("TIPTON", "OK"),
  ("TIPTON", "KS"),
  ("TIPTONVILLE", "TN"),
  ("TIRA", "TX"),
  ("TIRO", "OH"),
  ("TISHOMINGO", "OK"),
  ("TISHOMINGO", "MS"),
  ("TISKILWA", "IL"),
  ("TITANIC", "OK"),
  ("TITONKA", "IA"),
  ("TITUSVILLE", "FL"),
  ("TITUSVILLE", "PA"),
  ("TITUSVILLE", "NY"),
  ("TIVERTON", "RI"),
  ("TIVOLI", "NY"),
  ("TIVOLI", "TX"),
  ("TOA ALTA", "PR"),
  ("TOA BAJA", "PR"),
  ("TOAD HOP", "IN"),
  ("TOAST", "NC"),
  ("TOBACCOVILLE", "NC"),
  ("TOBIAS", "NE"),
  ("TOBIN", "CA"),
  ("TOCCOA", "GA"),
  ("TOCCOPOLA", "MS"),
  ("TOCO", "TX"),
  ("TODD CREEK", "CO"),
  ("TODD MISSION", "TX"),
  ("TOETERVILLE", "IA"),
  ("TOFTREES", "PA"),
  ("TOGIAK", "AK"),
  ("TOHATCHI", "NM"),
  ("TOK", "AK"),
  ("TOKELAND", "WA"),
  ("TOKSOOK BAY", "AK"),
  ("TOLANI LAKE", "AZ"),
  ("TOLAR", "TX"),
  ("TOLCHESTER", "MD"),
  ("TOLEDO", "OH"),
  ("TOLEDO", "IA"),
  ("TOLEDO", "OR"),
  ("TOLEDO", "IL"),
  ("TOLEDO", "WA"),
  ("TOLLESON", "AZ"),
  ("TOLLETTE", "AR"),
  ("TOLLEY", "ND"),
  ("TOLNA", "ND"),
  ("TOLONO", "IL"),
  ("TOLSONA", "AK"),
  ("TOLSTOY", "SD"),
  ("TOLU", "KY"),
  ("TOLUCA", "IL"),
  ("TOM BEAN", "TX"),
  ("TOMAH", "WI"),
  ("TOMAHAWK", "WI"),
  ("TOMALES", "CA"),
  ("TOMBALL", "TX"),
  ("TOMBSTONE", "AZ"),
  ("TOME", "NM"),
  ("TOMPKINSVILLE", "KY"),
  ("TOMS BROOK", "VA"),
  ("TOMS RIVER", "NJ"),
  ("TONALEA", "AZ"),
  ("TONASKET", "WA"),
  ("TONAWANDA", "NY"),
  ("TONAWANDA", "NY"),
  ("TONGANOXIE", "KS"),
  ("TONICA", "IL"),
  ("TONKA BAY", "MN"),
  ("TONKAWA", "OK"),
  ("TONOPAH", "NV"),
  ("TONOPAH", "AZ"),
  ("TONSINA", "AK"),
  ("TONTITOWN", "AR"),
  ("TONTO BASIN", "AZ"),
  ("TONTO VILLAGE", "AZ"),
  ("TONTOGANY", "OH"),
  ("TONY", "WI"),
  ("TONYVILLE", "CA"),
  ("TOOELE", "UT"),
  ("TOOL", "TX"),
  ("TOOLEVILLE", "CA"),
  ("TOOMSBORO", "GA"),
  ("TOOMSUBA", "MS"),
  ("TOONE", "TN"),
  ("TOPANGA", "CA"),
  ("TOPAWA", "AZ"),
  ("TOPAZ", "CA"),
  ("TOPAZ LAKE", "NV"),
  ("TOPAZ RANCH ESTATES", "NV"),
  ("TOPEKA", "KS"),
  ("TOPEKA", "IN"),
  ("TOPEKA", "IL"),
  ("TOPOCK", "AZ"),
  ("TOP-OF-THE-WORLD", "AZ"),
  ("TOPPENISH", "WA"),
  ("TOPSAIL BEACH", "NC"),
  ("TOPSFIELD", "MA"),
  ("TOPSHAM", "ME"),
  ("TOPTON", "PA"),
  ("TOQUERVILLE", "UT"),
  ("TORBOY", "WA"),
  ("TORNILLO", "TX"),
  ("TORO CANYON", "CA"),
  ("TORONTO", "OH"),
  ("TORONTO", "KS"),
  ("TORONTO", "SD"),
  ("TORONTO", "IA"),
  ("TORRANCE", "CA"),
  ("TORREON", "NM"),
  ("TORREON", "NM"),
  ("TORREY", "UT"),
  ("TORRINGTON", "CT"),
  ("TORRINGTON", "WY"),
  ("TOSTON", "MT"),
  ("TOTOWA", "NJ"),
  ("TOUCHET", "WA"),
  ("TOUGHKENAMON", "PA"),
  ("TOULON", "IL"),
  ("TOVEY", "IL"),
  ("TOWAMENSING TRAILS", "PA"),
  ("TOWANDA", "PA"),
  ("TOWANDA", "KS"),
  ("TOWANDA", "IL"),
  ("TOWAOC", "CO"),
  ("TOWER", "MN"),
  ("TOWER CITY", "ND"),
  ("TOWER CITY", "PA"),
  ("TOWER HILL", "IL"),
  ("TOWER LAKES", "IL"),
  ("TOWN AND COUNTRY", "MO"),
  ("TOWN AND COUNTRY", "WA"),
  ("TOWN CREEK", "AL"),
  ("TOWN LINE", "NY"),
  ("TOWN 'N' COUNTRY", "FL"),
  ("TOWN OF PINES", "IN"),
  ("TOWNER", "ND"),
  ("TOWNER", "CO"),
  ("TOWNSEND", "TN"),
  ("TOWNSEND", "MA"),
  ("TOWNSEND", "MT"),
  ("TOWNSEND", "DE"),
  ("TOWNSEND", "WI"),
  ("TOWNVILLE", "PA"),
  ("TOWSON", "MD"),
  ("TOXEY", "AL"),
  ("TOYAH", "TX"),
  ("TOYEI", "AZ"),
  ("TRACY", "CA"),
  ("TRACY", "MN"),
  ("TRACY", "MO"),
  ("TRACY CITY", "TN"),
  ("TRACYTON", "WA"),
  ("TRADEWINDS", "TX"),
  ("TRAER", "IA"),
  ("TRAFALGAR", "IN"),
  ("TRAFFORD", "AL"),
  ("TRAFFORD", "PA"),
  ("TRAIL", "OR"),
  ("TRAIL", "MN"),
  ("TRAIL CREEK", "IN"),
  ("TRAIL SIDE", "CO"),
  ("TRAINER", "PA"),
  ("TRANQUILLITY", "CA"),
  ("TRAPPE", "MD"),
  ("TRAPPE", "PA"),
  ("TRAPPER CREEK", "AK"),
  ("TRASKWOOD", "AR"),
  ("TRAVELERS REST", "SC"),
  ("TRAVER", "CA"),
  ("TRAVERSE CITY", "MI"),
  ("TRAVILAH", "MD"),
  ("TRAVIS RANCH", "TX"),
  ("TREASURE ISLAND", "FL"),
  ("TREASURE LAKE", "PA"),
  ("TREECE", "KS"),
  ("TREGO", "MT"),
  ("TREGO", "WI"),
  ("TREGO-ROHRERSVILLE STATION", "MD"),
  ("TREMONT", "MS"),
  ("TREMONT", "IL"),
  ("TREMONT", "PA"),
  ("TREMONT CITY", "OH"),
  ("TREMONTON", "UT"),
  ("TREMPEALEAU", "WI"),
  ("TRENT", "SD"),
  ("TRENT", "TX"),
  ("TRENT WOODS", "NC"),
  ("TRENTON", "TN"),
  ("TRENTON", "NJ"),
  ("TRENTON", "UT"),
  ("TRENTON", "MI"),
  ("TRENTON", "MO"),
  ("TRENTON", "OH"),
  ("TRENTON", "FL"),
  ("TRENTON", "GA"),
  ("TRENTON", "TX"),
  ("TRENTON", "IL"),
  ("TRENTON", "SC"),
  ("TRENTON", "NE"),
  ("TRENTON", "KY"),
  ("TRENTON", "NC"),
  ("TRES PINOS", "CA"),
  ("TRESCKOW", "PA"),
  ("TREVORTON", "PA"),
  ("TREVOSE", "PA"),
  ("TREXLERTOWN", "PA"),
  ("TREYNOR", "IA"),
  ("TREZEVANT", "TN"),
  ("TRIADELPHIA", "WV"),
  ("TRIANA", "AL"),
  ("TRIANGLE", "VA"),
  ("TRIBBEY", "OK"),
  ("TRIBES HILL", "NY"),
  ("TRIBUNE", "KS"),
  ("TRI-CITY", "OR"),
  ("TRI-LAKES", "IN"),
  ("TRILBY", "FL"),
  ("TRIMBLE", "OH"),
  ("TRIMBLE", "TN"),
  ("TRIMBLE", "MO"),
  ("TRIMONT", "MN"),
  ("TRINIDAD", "TX"),
  ("TRINIDAD", "CO"),
  ("TRINIDAD", "CA"),
  ("TRINITY", "NC"),
  ("TRINITY", "FL"),
  ("TRINITY", "AL"),
  ("TRINITY", "TX"),
  ("TRINITY CENTER", "CA"),
  ("TRINITY VILLAGE", "CA"),
  ("TRINWAY", "OH"),
  ("TRION", "GA"),
  ("TRIPLETT", "MO"),
  ("TRIPOLI", "IA"),
  ("TRIPP", "SD"),
  ("TRIUMPH", "LA"),
  ("TROMMALD", "MN"),
  ("TRONA", "CA"),
  ("TROOPER", "PA"),
  ("TROPHY CLUB", "TX"),
  ("TROPIC", "UT"),
  ("TROSKY", "MN"),
  ("TROTWOOD", "OH"),
  ("TROUP", "TX"),
  ("TROUT CREEK", "MT"),
  ("TROUT LAKE", "WA"),
  ("TROUT VALLEY", "IL"),
  ("TROUT VALLEY", "NM"),
  ("TROUTDALE", "OR"),
  ("TROUTDALE", "VA"),
  ("TROUTMAN", "NC"),
  ("TROUTVILLE", "PA"),
  ("TROUTVILLE", "VA"),
  ("TROWBRIDGE", "CA"),
  ("TROWBRIDGE PARK", "MI"),
  ("TROXELVILLE", "PA"),
  ("TROY", "MI"),
  ("TROY", "AL"),
  ("TROY", "OH"),
  ("TROY", "NY"),
  ("TROY", "MO"),
  ("TROY", "IL"),
  ("TROY", "TX"),
  ("TROY", "NC"),
  ("TROY", "TN"),
  ("TROY", "NH"),
  ("TROY", "KS"),
  ("TROY", "VT"),
  ("TROY", "SC"),
  ("TROY", "ID"),
  ("TROY", "PA"),
  ("TROY", "MT"),
  ("TROY", "IN"),
  ("TROY GROVE", "IL"),
  ("TRUCHAS", "NM"),
  ("TRUCKEE", "CA"),
  ("TRUCKSVILLE", "PA"),
  ("TRUESDALE", "MO"),
  ("TRUESDALE", "IA"),
  ("TRUJILLO ALTO", "PR"),
  ("TRUMAN", "MN"),
  ("TRUMANN", "AR"),
  ("TRUMANSBURG", "NY"),
  ("TRUMBAUERSVILLE", "PA"),
  ("TRUMBULL", "CT"),
  ("TRUMBULL", "NE"),
  ("TRURO", "IA"),
  ("TRUSSVILLE", "AL"),
  ("TRUTH OR CONSEQUENCES", "NM"),
  ("TRUXTON", "AZ"),
  ("TRUXTON", "MO"),
  ("TRYON", "OK"),
  ("TRYON", "NC"),
  ("TRYON", "NE"),
  ("TSAILE", "AZ"),
  ("TSE BONITO", "NM"),
  ("TSELAKAI DEZZA", "UT"),
  ("TUALATIN", "OR"),
  ("TUBA CITY", "AZ"),
  ("TUBAC", "AZ"),
  ("TUCKAHOE", "VA"),
  ("TUCKAHOE", "NY"),
  ("TUCKAHOE", "NY"),
  ("TUCKER", "GA"),
  ("TUCKER", "MS"),
  ("TUCKERMAN", "AR"),
  ("TUCKERTON", "NJ"),
  ("TUCSON", "AZ"),
  ("TUCSON ESTATES", "AZ"),
  ("TUCUMCARI", "NM"),
  ("TUKWILA", "WA"),
  ("TULARE", "CA"),
  ("TULARE", "SD"),
  ("TULAROSA", "NM"),
  ("TULELAKE", "CA"),
  ("TULETA", "TX"),
  ("TULIA", "TX"),
  ("TULL", "AR"),
  ("TULLAHASSEE", "OK"),
  ("TULLAHOMA", "TN"),
  ("TULLOS", "LA"),
  ("TULLY", "NY"),
  ("TULLYTOWN", "PA"),
  ("TULSA", "OK"),
  ("TULSITA", "TX"),
  ("TULUKSAK", "AK"),
  ("TUMACACORI-CARMEN", "AZ"),
  ("TUMALO", "OR"),
  ("TUMBLING SHOALS", "AR"),
  ("TUMWATER", "WA"),
  ("TUNICA", "MS"),
  ("TUNICA RESORTS", "MS"),
  ("TUNKHANNOCK", "PA"),
  ("TUNNEL CITY", "WI"),
  ("TUNNEL HILL", "GA"),
  ("TUNNELHILL", "PA"),
  ("TUNNELTON", "WV"),
  ("TUNTUTULIAK", "AK"),
  ("TUNUNAK", "AK"),
  ("TUOLUMNE CITY", "CA"),
  ("TUPELO", "MS"),
  ("TUPELO", "OK"),
  ("TUPELO", "AR"),
  ("TUPMAN", "CA"),
  ("TUPPER LAKE", "NY"),
  ("TUPPERS PLAINS", "OH"),
  ("TURAH", "MT"),
  ("TURBEVILLE", "SC"),
  ("TURBOTVILLE", "PA"),
  ("TURIN", "GA"),
  ("TURIN", "NY"),
  ("TURIN", "IA"),
  ("TURKEY", "TX"),
  ("TURKEY", "NC"),
  ("TURKEY CREEK", "LA"),
  ("TURKEY CREEK", "AZ"),
  ("TURLEY", "OK"),
  ("TURLOCK", "CA"),
  ("TURNER", "OR"),
  ("TURNER", "MI"),
  ("TURNER", "MT"),
  ("TURNERS FALLS", "MA"),
  ("TURNERSVILLE", "NJ"),
  ("TURNERVILLE", "WY"),
  ("TURNEY", "MO"),
  ("TURON", "KS"),
  ("TURPIN", "OK"),
  ("TURPIN HILLS", "OH"),
  ("TURRELL", "AR"),
  ("TURTLE CREEK", "PA"),
  ("TURTLE LAKE", "WI"),
  ("TURTLE LAKE", "WI"),
  ("TURTLE LAKE", "MT"),
  ("TURTLE LAKE", "ND"),
  ("TURTLE RIVER", "MN"),
  ("TURTON", "SD"),
  ("TUSAYAN", "AZ"),
  ("TUSCALOOSA", "AL"),
  ("TUSCARAWAS", "OH"),
  ("TUSCARORA", "PA"),
  ("TUSCARORA", "NY"),
  ("TUSCOLA", "IL"),
  ("TUSCOLA", "TX"),
  ("TUSCULUM", "TN"),
  ("TUSCUMBIA", "AL"),
  ("TUSCUMBIA", "MO"),
  ("TUSHKA", "OK"),
  ("TUSKAHOMA", "OK"),
  ("TUSKEGEE", "AL"),
  ("TUSTIN", "CA"),
  ("TUSTIN", "WI"),
  ("TUSTIN", "MI"),
  ("TUTTLE", "OK"),
  ("TUTTLE", "CA"),
  ("TUTTLE", "ND"),
  ("TUTTLETOWN", "CA"),
  ("TUTUILLA", "OR"),
  ("TUTWILER", "MS"),
  ("TUXEDO PARK", "NY"),
  ("TWAIN", "CA"),
  ("TWAIN HARTE", "CA"),
  ("TWENTYNINE PALMS", "CA"),
  ("TWILIGHT", "PA"),
  ("TWILIGHT", "WV"),
  ("TWIN", "AL"),
  ("TWIN BRIDGES", "MT"),
  ("TWIN BROOKS", "SD"),
  ("TWIN CITY", "GA"),
  ("TWIN FALLS", "ID"),
  ("TWIN FORKS", "NM"),
  ("TWIN GROVE", "IL"),
  ("TWIN GROVES", "AR"),
  ("TWIN HILLS", "AK"),
  ("TWIN LAKE", "MI"),
  ("TWIN LAKES", "NM"),
  ("TWIN LAKES", "WI"),
  ("TWIN LAKES", "CO"),
  ("TWIN LAKES", "WA"),
  ("TWIN LAKES", "MN"),
  ("TWIN LAKES", "CO"),
  ("TWIN LAKES", "IA"),
  ("TWIN LAKES", "VA"),
  ("TWIN LAKES", "CA"),
  ("TWIN LAKES", "MN"),
  ("TWIN OAKS", "OK"),
  ("TWIN OAKS", "MO"),
  ("TWIN RIVERS", "NJ"),
  ("TWIN VALLEY", "MN"),
  ("TWINING", "MI"),
  ("TWINSBURG", "OH"),
  ("TWINSBURG HEIGHTS", "OH"),
  ("TWISP", "WA"),
  ("TWO BUTTES", "CO"),
  ("TWO HARBORS", "MN"),
  ("TWO RIVERS", "AK"),
  ("TWO RIVERS", "WI"),
  ("TWO STRIKE", "SD"),
  ("TY TY", "GA"),
  ("TYASKIN", "MD"),
  ("TYBEE ISLAND", "GA"),
  ("TYE", "TX"),
  ("TYGH VALLEY", "OR"),
  ("TYHEE", "ID"),
  ("TYLER", "TX"),
  ("TYLER", "MN"),
  ("TYLER RUN", "PA"),
  ("TYLERSBURG", "PA"),
  ("TYLERTOWN", "MS"),
  ("TYNAN", "TX"),
  ("TYNDALL", "SD"),
  ("TYNDALL AFB", "FL"),
  ("TYONEK", "AK"),
  ("TYRO", "NC"),
  ("TYRO", "KS"),
  ("TYRONE", "GA"),
  ("TYRONE", "PA"),
  ("TYRONE", "OK"),
  ("TYRONE", "NM"),
  ("TYRONZA", "AR"),
  ("TYSONS CORNER", "VA"),
  ("UALAPU'E", "HI"),
  ("UBLY", "MI"),
  ("UCON", "ID"),
  ("UDALL", "KS"),
  ("UDELL", "IA"),
  ("UEHLING", "NE"),
  ("UGASHIK", "AK"),
  ("UHLAND", "TX"),
  ("UHRICHSVILLE", "OH"),
  ("UINTAH", "UT"),
  ("UKIAH", "CA"),
  ("UKIAH", "OR"),
  ("ULEN", "MN"),
  ("ULEN", "IN"),
  ("ULLIN", "IL"),
  ("ULM", "MT"),
  ("ULM", "AR"),
  ("ULMER", "SC"),
  ("ULYSSES", "PA"),
  ("ULYSSES", "KS"),
  ("ULYSSES", "NE"),
  ("UMAPINE", "OR"),
  ("UMATILLA", "OR"),
  ("UMATILLA", "FL"),
  ("UMBER VIEW HEIGHTS", "MO"),
  ("UNADILLA", "GA"),
  ("UNADILLA", "NY"),
  ("UNADILLA", "NE"),
  ("UNALAKLEET", "AK"),
  ("UNALASKA", "AK"),
  ("UNCERTAIN", "TX"),
  ("UNDERWOOD", "ND"),
  ("UNDERWOOD", "MN"),
  ("UNDERWOOD", "IA"),
  ("UNDERWOOD-PETERSVILLE", "AL"),
  ("UNICOI", "TN"),
  ("UNION", "LA"),
  ("UNION", "MO"),
  ("UNION", "SC"),
  ("UNION", "OH"),
  ("UNION", "MS"),
  ("UNION", "KY"),
  ("UNION", "OR"),
  ("UNION", "WA"),
  ("UNION", "IL"),
  ("UNION", "AL"),
  ("UNION", "IA"),
  ("UNION", "WV"),
  ("UNION", "NH"),
  ("UNION", "NE"),
  ("UNION BEACH", "NJ"),
  ("UNION BRIDGE", "MD"),
  ("UNION CENTER", "WI"),
  ("UNION CITY", "OK"),
  ("UNION CITY", "CA"),
  ("UNION CITY", "GA"),
  ("UNION CITY", "TN"),
  ("UNION CITY", "IN"),
  ("UNION CITY", "PA"),
  ("UNION CITY", "MI"),
  ("UNION CITY", "NJ"),
  ("UNION CITY", "OH"),
  ("UNION DALE", "PA"),
  ("UNION DEPOSIT", "PA"),
  ("UNION GAP", "WA"),
  ("UNION GROVE", "WI"),
  ("UNION GROVE", "TX"),
  ("UNION GROVE", "AL"),
  ("UNION HALL", "VA"),
  ("UNION HILL", "IL"),
  ("UNION HILL-NOVELTY HILL", "WA"),
  ("UNION LEVEL", "VA"),
  ("UNION PARK", "FL"),
  ("UNION POINT", "GA"),
  ("UNION SPRINGS", "AL"),
  ("UNION SPRINGS", "NY"),
  ("UNION STAR", "MO"),
  ("UNION VALLEY", "TX"),
  ("UNIONDALE", "NY"),
  ("UNIONDALE", "IN"),
  ("UNIONTOWN", "OH"),
  ("UNIONTOWN", "PA"),
  ("UNIONTOWN", "AL"),
  ("UNIONTOWN", "WA"),
  ("UNIONTOWN", "KY"),
  ("UNIONTOWN", "KS"),
  ("UNIONVILLE", "NC"),
  ("UNIONVILLE", "TN"),
  ("UNIONVILLE", "PA"),
  ("UNIONVILLE", "MO"),
  ("UNIONVILLE", "MI"),
  ("UNIONVILLE", "GA"),
  ("UNIONVILLE", "IA"),
  ("UNIONVILLE", "NY"),
  ("UNIONVILLE", "PA"),
  ("UNIONVILLE CENTER", "OH"),
  ("UNIOPOLIS", "OH"),
  ("UNITY", "ME"),
  ("UNITY", "WI"),
  ("UNITY", "OR"),
  ("UNITY VILLAGE", "MO"),
  ("UNIVERSAL", "IN"),
  ("UNIVERSAL CITY", "TX"),
  ("UNIVERSITY", "FL"),
  ("UNIVERSITY", "FL"),
  ("UNIVERSITY", "MS"),
  ("UNIVERSITY AT BUFFALO", "NY"),
  ("UNIVERSITY CENTER", "VA"),
  ("UNIVERSITY CITY", "MO"),
  ("UNIVERSITY GARDENS", "NY"),
  ("UNIVERSITY HEIGHTS", "OH"),
  ("UNIVERSITY HEIGHTS", "IA"),
  ("UNIVERSITY OF CALIFORNIA DAVIS", "CA"),
  ("UNIVERSITY OF CALIFORNIA MERCED", "CA"),
  ("UNIVERSITY OF PITTSBURGH JOHNSTOWN", "PA"),
  ("UNIVERSITY OF VIRGINIA", "VA"),
  ("UNIVERSITY PARK", "IL"),
  ("UNIVERSITY PARK", "FL"),
  ("UNIVERSITY PARK", "TX"),
  ("UNIVERSITY PARK", "NM"),
  ("UNIVERSITY PARK", "IA"),
  ("UNIVERSITY PARK", "MD"),
  ("UNIVERSITY PLACE", "WA"),
  ("UPHAM", "ND"),
  ("UPLAND", "CA"),
  ("UPLAND", "IN"),
  ("UPLAND", "PA"),
  ("UPLAND", "NE"),
  ("UPLANDS PARK", "MO"),
  ("UPPER ARLINGTON", "OH"),
  ("UPPER BEAR CREEK", "CO"),
  ("UPPER BROOKVILLE", "NY"),
  ("UPPER ELOCHOMAN", "WA"),
  ("UPPER EXETER", "PA"),
  ("UPPER FALLS", "WV"),
  ("UPPER FRUITLAND", "NM"),
  ("UPPER GRAND LAGOON", "FL"),
  ("UPPER KALSKAG", "AK"),
  ("UPPER LAKE", "CA"),
  ("UPPER MARLBORO", "MD"),
  ("UPPER MONTCLAIR", "NJ"),
  ("UPPER NYACK", "NY"),
  ("UPPER POHATCONG", "NJ"),
  ("UPPER SADDLE RIVER", "NJ"),
  ("UPPER SANDUSKY", "OH"),
  ("UPPER SANTAN VILLAGE", "AZ"),
  ("UPPER ST. CLAIR", "PA"),
  ("UPPER STEWARTSVILLE", "NJ"),
  ("UPSALA", "MN"),
  ("UPTON", "WY"),
  ("UPTON", "MA"),
  ("UPTON", "KY"),
  ("URANIA", "LA"),
  ("URBANA", "IL"),
  ("URBANA", "OH"),
  ("URBANA", "MD"),
  ("URBANA", "IA"),
  ("URBANA", "MO"),
  ("URBANCREST", "OH"),
  ("URBANDALE", "IA"),
  ("URBANK", "MN"),
  ("URBANNA", "VA"),
  ("URIAH", "AL"),
  ("URICH", "MO"),
  ("URIE", "WY"),
  ("URSA", "IL"),
  ("URSINA", "PA"),
  ("URSINE", "NV"),
  ("UTE", "IA"),
  ("UTE PARK", "NM"),
  ("UTICA", "NY"),
  ("UTICA", "MS"),
  ("UTICA", "MI"),
  ("UTICA", "OH"),
  ("UTICA", "PA"),
  ("UTICA", "SC"),
  ("UTICA", "IN"),
  ("UTICA", "MN"),
  ("UTICA", "MO"),
  ("UTICA", "NE"),
  ("UTICA", "SD"),
  ("UTICA", "KS"),
  ("UTOPIA", "TX"),
  ("UTTING", "AZ"),
  ("UTUADO", "PR"),
  ("UVALDA", "GA"),
  ("UVALDE", "TX"),
  ("UVALDE ESTATES", "TX"),
  ("V·ZQUEZ", "PR"),
  ("VACAVILLE", "CA"),
  ("VADER", "WA"),
  ("VADITO", "NM"),
  ("VADNAIS HEIGHTS", "MN"),
  ("VADO", "NM"),
  ("VAIDEN", "MS"),
  ("VAIL", "AZ"),
  ("VAIL", "CO"),
  ("VAIL", "IA"),
  ("VAILS GATE", "NY"),
  ("VAIVA VO", "AZ"),
  ("VAL VERDE", "CA"),
  ("VAL VERDE PARK", "TX"),
  ("VALATIE", "NY"),
  ("VALDERS", "WI"),
  ("VALDESE", "NC"),
  ("VALDEZ", "AK"),
  ("VALDEZ", "CO"),
  ("VALDOSTA", "GA"),
  ("VALE", "SD"),
  ("VALE", "OR"),
  ("VALE SUMMIT", "MD"),
  ("VALENCIA", "NM"),
  ("VALENCIA", "PA"),
  ("VALENCIA WEST", "AZ"),
  ("VALENTINE", "NE"),
  ("VALENTINE", "AZ"),
  ("VALENTINE", "TX"),
  ("VALERIA", "IA"),
  ("VALHALLA", "NY"),
  ("VALIER", "IL"),
  ("VALIER", "MT"),
  ("VALINDA", "CA"),
  ("VALLE", "AZ"),
  ("VALLE CRUCIS", "NC"),
  ("VALLE HERMOSO", "TX"),
  ("VALLE VERDE", "TX"),
  ("VALLE VISTA", "AZ"),
  ("VALLE VISTA", "CA"),
  ("VALLE VISTA", "TX"),
  ("VALLECITO", "CA"),
  ("VALLEJO", "CA"),
  ("VALLEY", "AL"),
  ("VALLEY", "NE"),
  ("VALLEY", "WA"),
  ("VALLEY ACRES", "CA"),
  ("VALLEY BEND", "WV"),
  ("VALLEY BROOK", "OK"),
  ("VALLEY CENTER", "CA"),
  ("VALLEY CENTER", "KS"),
  ("VALLEY CITY", "ND"),
  ("VALLEY CITY", "IL"),
  ("VALLEY COTTAGE", "NY"),
  ("VALLEY FALLS", "SC"),
  ("VALLEY FALLS", "RI"),
  ("VALLEY FALLS", "KS"),
  ("VALLEY FALLS", "NY"),
  ("VALLEY FORD", "CA"),
  ("VALLEY GRANDE", "AL"),
  ("VALLEY GREEN", "PA"),
  ("VALLEY GROVE", "WV"),
  ("VALLEY HEAD", "AL"),
  ("VALLEY HEAD", "WV"),
  ("VALLEY HI", "OH"),
  ("VALLEY HILL", "NC"),
  ("VALLEY HOME", "CA"),
  ("VALLEY MILLS", "TX"),
  ("VALLEY PARK", "MO"),
  ("VALLEY PARK", "OK"),
  ("VALLEY RANCH", "CA"),
  ("VALLEY SPRINGS", "CA"),
  ("VALLEY SPRINGS", "SD"),
  ("VALLEY SPRINGS", "AR"),
  ("VALLEY STREAM", "NY"),
  ("VALLEY VIEW", "OH"),
  ("VALLEY VIEW", "PA"),
  ("VALLEY VIEW", "TX"),
  ("VALLEY VIEW", "PA"),
  ("VALLEY WELLS", "CA"),
  ("VALLEY-HI", "PA"),
  ("VALLEYVIEW", "OH"),
  ("VALLIANT", "OK"),
  ("VALLONIA", "IN"),
  ("VALMEYER", "IL"),
  ("VALMONT", "CO"),
  ("VALMY", "NV"),
  ("VALPARAISO", "IN"),
  ("VALPARAISO", "FL"),
  ("VALPARAISO", "NE"),
  ("VALRICO", "FL"),
  ("VAMO", "FL"),
  ("VAN", "TX"),
  ("VAN", "WV"),
  ("VAN ALSTYNE", "TX"),
  ("VAN BIBBER LAKE", "IN"),
  ("VAN BUREN", "AR"),
  ("VAN BUREN", "ME"),
  ("VAN BUREN", "MO"),
  ("VAN BUREN", "IN"),
  ("VAN BUREN", "OH"),
  ("VAN DYNE", "WI"),
  ("VAN ETTEN", "NY"),
  ("VAN HORN", "TX"),
  ("VAN HORNE", "IA"),
  ("VAN METER", "IA"),
  ("VAN TASSELL", "WY"),
  ("VAN VLECK", "TX"),
  ("VAN VOORHIS", "PA"),
  ("VAN WERT", "OH"),
  ("VAN WERT", "IA"),
  ("VANCE", "AL"),
  ("VANCE", "SC"),
  ("VANCEBORO", "NC"),
  ("VANCEBURG", "KY"),
  ("VANCLEAVE", "MS"),
  ("VANCOUVER", "WA"),
  ("VANDALIA", "OH"),
  ("VANDALIA", "IL"),
  ("VANDALIA", "MO"),
  ("VANDALIA", "MI"),
  ("VANDEMERE", "NC"),
  ("VANDENBERG AFB", "CA"),
  ("VANDENBERG VILLAGE", "CA"),
  ("VANDER", "NC"),
  ("VANDERBILT", "TX"),
  ("VANDERBILT", "MI"),
  ("VANDERBILT", "PA"),
  ("VANDERCOOK LAKE", "MI"),
  ("VANDERGRIFT", "PA"),
  ("VANDERVOORT", "AR"),
  ("VANDIVER", "AL"),
  ("VANDIVER", "MO"),
  ("VANDLING", "PA"),
  ("VANDUSER", "MO"),
  ("VANLEER", "TN"),
  ("VANLUE", "OH"),
  ("VANN CROSSROADS", "NC"),
  ("VANSANT", "VA"),
  ("VANTAGE", "WA"),
  ("VARDAMAN", "MS"),
  ("VARINA", "IA"),
  ("VARNA", "IL"),
  ("VARNADO", "LA"),
  ("VARNAMTOWN", "NC"),
  ("VARNELL", "GA"),
  ("VARNVILLE", "SC"),
  ("VASHON", "WA"),
  ("VASS", "NC"),
  ("VASSAR", "KS"),
  ("VASSAR", "MI"),
  ("VAUGHN", "NM"),
  ("VAUGHN", "MT"),
  ("VAUGHN", "WA"),
  ("VAUGHNSVILLE", "OH"),
  ("VAYAS", "PR"),
  ("VEBLEN", "SD"),
  ("VEEDERSBURG", "IN"),
  ("VEGA", "TX"),
  ("VEGA ALTA", "PR"),
  ("VEGA BAJA", "PR"),
  ("VEGUITA", "NM"),
  ("VELARDE", "NM"),
  ("VELDA CITY", "MO"),
  ("VELDA VILLAGE HILLS", "MO"),
  ("VELMA", "OK"),
  ("VELVA", "ND"),
  ("VENANGO", "PA"),
  ("VENANGO", "NE"),
  ("VENEDOCIA", "OH"),
  ("VENEDY", "IL"),
  ("VENERSBORG", "WA"),
  ("VENETA", "OR"),
  ("VENETIAN VILLAGE", "IL"),
  ("VENETIE", "AK"),
  ("VENICE", "FL"),
  ("VENICE", "IL"),
  ("VENICE", "LA"),
  ("VENICE", "NE"),
  ("VENICE GARDENS", "FL"),
  ("VENTANA", "AZ"),
  ("VENTNOR CITY", "NJ"),
  ("VENTRESS", "LA"),
  ("VENTURA", "NM"),
  ("VENTURA", "IA"),
  ("VENTURIA", "ND"),
  ("VENUS", "TX"),
  ("VERA", "OK"),
  ("VERA CRUZ", "IN"),
  ("VERDE VILLAGE", "AZ"),
  ("VERDEL", "NE"),
  ("VERDEN", "OK"),
  ("VERDI", "CA"),
  ("VERDI", "NV"),
  ("VERDIGRE", "NE"),
  ("VERDIGRIS", "OK"),
  ("VERDON", "SD"),
  ("VERDON", "NE"),
  ("VERDUNVILLE", "WV"),
  ("VERGAS", "MN"),
  ("VERGENNES", "VT"),
  ("VERGENNES", "IL"),
  ("VERLOT", "WA"),
  ("VERMILION", "OH"),
  ("VERMILION", "IL"),
  ("VERMILLION", "SD"),
  ("VERMILLION", "MN"),
  ("VERMILLION", "KS"),
  ("VERMONT", "IL"),
  ("VERMONTVILLE", "MI"),
  ("VERNAL", "UT"),
  ("VERNDALE", "MN"),
  ("VERNON", "TX"),
  ("VERNON", "UT"),
  ("VERNON", "AL"),
  ("VERNON", "CA"),
  ("VERNON", "FL"),
  ("VERNON", "CO"),
  ("VERNON", "NY"),
  ("VERNON", "IL"),
  ("VERNON", "MI"),
  ("VERNON", "AZ"),
  ("VERNON", "IN"),
  ("VERNON CENTER", "NJ"),
  ("VERNON CENTER", "MN"),
  ("VERNON HILLS", "IL"),
  ("VERNON VALLEY", "NJ"),
  ("VERNONBURG", "GA"),
  ("VERNONIA", "OR"),
  ("VERO BEACH", "FL"),
  ("VERO BEACH SOUTH", "FL"),
  ("VERONA", "KY"),
  ("VERONA", "VA"),
  ("VERONA", "WI"),
  ("VERONA", "MS"),
  ("VERONA", "NY"),
  ("VERONA", "MO"),
  ("VERONA", "PA"),
  ("VERONA", "OH"),
  ("VERONA", "ND"),
  ("VERONA", "IL"),
  ("VERONA WALK", "FL"),
  ("VERPLANCK", "NY"),
  ("VERSAILLES", "KY"),
  ("VERSAILLES", "MO"),
  ("VERSAILLES", "OH"),
  ("VERSAILLES", "IN"),
  ("VERSAILLES", "IL"),
  ("VERSAILLES", "PA"),
  ("VESPER", "WI"),
  ("VESTA", "MN"),
  ("VESTAVIA HILLS", "AL"),
  ("VETERAN", "WY"),
  ("VEVAY", "IN"),
  ("VEYO", "UT"),
  ("VIAN", "OK"),
  ("VIBORG", "SD"),
  ("VIBURNUM", "MO"),
  ("VICCO", "KY"),
  ("VICI", "OK"),
  ("VICKERY", "OH"),
  ("VICKSBURG", "AZ"),
  ("VICKSBURG", "MS"),
  ("VICKSBURG", "MI"),
  ("VICKSBURG", "PA"),
  ("VICTOR", "ID"),
  ("VICTOR", "NY"),
  ("VICTOR", "CA"),
  ("VICTOR", "IA"),
  ("VICTOR", "MT"),
  ("VICTOR", "CO"),
  ("VICTORIA", "TX"),
  ("VICTORIA", "MN"),
  ("VICTORIA", "VA"),
  ("VICTORIA", "IL"),
  ("VICTORIA", "KS"),
  ("VICTORIA", "AR"),
  ("VICTORIA VERA", "TX"),
  ("VICTORVILLE", "CA"),
  ("VICTORY", "NY"),
  ("VICTORY GARDENS", "NJ"),
  ("VICTORY LAKES", "NJ"),
  ("VIDALIA", "GA"),
  ("VIDALIA", "LA"),
  ("VIDETTE", "GA"),
  ("VIDOR", "TX"),
  ("VIENNA", "GA"),
  ("VIENNA", "VA"),
  ("VIENNA", "WV"),
  ("VIENNA", "LA"),
  ("VIENNA", "NJ"),
  ("VIENNA", "IL"),
  ("VIENNA", "MO"),
  ("VIENNA", "SD"),
  ("VIENNA", "MD"),
  ("VIENNA BEND", "LA"),
  ("VIENNA CENTER", "OH"),
  ("VIEQUES", "PR"),
  ("VIEQUES", "PR"),
  ("VIERA EAST", "FL"),
  ("VIERA WEST", "FL"),
  ("VIEW PARK-WINDSOR HILLS", "CA"),
  ("VIKING", "MN"),
  ("VILAS", "SD"),
  ("VILAS", "CO"),
  ("VILLA DEL SOL", "TX"),
  ("VILLA GROVE", "IL"),
  ("VILLA HEIGHTS", "VA"),
  ("VILLA HILLS", "KY"),
  ("VILLA PANCHO", "TX"),
  ("VILLA PARK", "IL"),
  ("VILLA PARK", "CA"),
  ("VILLA RICA", "GA"),
  ("VILLA RIDGE", "MO"),
  ("VILLA VERDE", "TX"),
  ("VILLAGE GREEN", "NY"),
  ("VILLAGE GREEN-GREEN RIDGE", "PA"),
  ("VILLAGE OF CLARKSTON", "MI"),
  ("VILLAGE OF FOUR SEASONS", "MO"),
  ("VILLAGE OF GROSSE POINTE SHORES", "MI"),
  ("VILLAGE OF OAK CREEK (BIG PARK)", "AZ"),
  ("VILLAGE OF THE BRANCH", "NY"),
  ("VILLAGE SHIRES", "PA"),
  ("VILLAGE ST. GEORGE", "LA"),
  ("VILLALBA", "PR"),
  ("VILLANO BEACH", "FL"),
  ("VILLANUEVA", "NM"),
  ("VILLARD", "MN"),
  ("VILLARREAL", "TX"),
  ("VILLAS", "FL"),
  ("VILLAS", "NJ"),
  ("VILLE PLATTE", "LA"),
  ("VILLISCA", "IA"),
  ("VILONIA", "AR"),
  ("VINA", "AL"),
  ("VINA", "CA"),
  ("VINCENNES", "IN"),
  ("VINCENT", "AL"),
  ("VINCENT", "CA"),
  ("VINCENT", "OH"),
  ("VINCENT", "IA"),
  ("VINCO", "PA"),
  ("VINE GROVE", "KY"),
  ("VINE HILL", "CA"),
  ("VINEGAR BEND", "AL"),
  ("VINELAND", "NJ"),
  ("VINELAND", "MN"),
  ("VINELAND", "CO"),
  ("VINEYARD", "CA"),
  ("VINEYARD", "UT"),
  ("VINEYARD HAVEN", "MA"),
  ("VINEYARD LAKE", "MI"),
  ("VINEYARDS", "FL"),
  ("VINING", "MN"),
  ("VINING", "IA"),
  ("VINING", "KS"),
  ("VININGS", "GA"),
  ("VINITA", "OK"),
  ("VINITA PARK", "MO"),
  ("VINITA TERRACE", "MO"),
  ("VINTON", "LA"),
  ("VINTON", "IA"),
  ("VINTON", "VA"),
  ("VINTON", "TX"),
  ("VINTON", "OH"),
  ("VINTONDALE", "PA"),
  ("VIOLA", "NY"),
  ("VIOLA", "AR"),
  ("VIOLA", "WI"),
  ("VIOLA", "IL"),
  ("VIOLA", "DE"),
  ("VIOLA", "TN"),
  ("VIOLA", "KS"),
  ("VIOLET", "LA"),
  ("VIRDEN", "IL"),
  ("VIRDEN", "NM"),
  ("VIRGIE", "KY"),
  ("VIRGIL", "IL"),
  ("VIRGIL", "SD"),
  ("VIRGIL", "KS"),
  ("VIRGILINA", "VA"),
  ("VIRGIN", "UT"),
  ("VIRGINIA", "MN"),
  ("VIRGINIA", "IL"),
  ("VIRGINIA", "NE"),
  ("VIRGINIA BEACH", "VA"),
  ("VIRGINIA CITY", "MT"),
  ("VIRGINIA CITY", "NV"),
  ("VIRGINIA GARDENS", "FL"),
  ("VIRGINVILLE", "PA"),
  ("VIROQUA", "WI"),
  ("VISALIA", "CA"),
  ("VISTA", "CA"),
  ("VISTA", "MO"),
  ("VISTA CENTER", "NJ"),
  ("VISTA SANTA ROSA", "CA"),
  ("VISTA WEST", "WY"),
  ("VIVIAN", "LA"),
  ("VIVIAN", "SD"),
  ("VIVIAN", "WV"),
  ("VOLANT", "PA"),
  ("VOLCANO", "HI"),
  ("VOLCANO", "CA"),
  ("VOLENTE", "TX"),
  ("VOLGA", "SD"),
  ("VOLGA", "IA"),
  ("VOLIN", "SD"),
  ("VOLO", "IL"),
  ("VOLTA", "CA"),
  ("VOLTAIRE", "ND"),
  ("VON ORMY", "TX"),
  ("VONA", "CO"),
  ("VONORE", "TN"),
  ("VOORHEES", "NJ"),
  ("VOORHEESVILLE", "NY"),
  ("VOWINCKEL", "PA"),
  ("VREDENBURGH", "AL"),
  ("WABASH", "IN"),
  ("WABASHA", "MN"),
  ("WABASSO", "FL"),
  ("WABASSO", "MN"),
  ("WABASSO BEACH", "FL"),
  ("WABBASEKA", "AR"),
  ("WABENO", "WI"),
  ("WACHAPREAGUE", "VA"),
  ("WACISSA", "FL"),
  ("WACO", "TX"),
  ("WACO", "GA"),
  ("WACO", "NC"),
  ("WACO", "MO"),
  ("WACO", "NE"),
  ("WACONIA", "MN"),
  ("WACOUSTA", "MI"),
  ("WADDINGTON", "NY"),
  ("WADE", "MS"),
  ("WADE", "NC"),
  ("WADE HAMPTON", "SC"),
  ("WADENA", "MN"),
  ("WADENA", "IA"),
  ("WADESBORO", "NC"),
  ("WADING RIVER", "NY"),
  ("WADLEY", "GA"),
  ("WADLEY", "AL"),
  ("WADSWORTH", "OH"),
  ("WADSWORTH", "IL"),
  ("WADSWORTH", "NV"),
  ("WADSWORTH", "NY"),
  ("WAELDER", "TX"),
  ("WAGENER", "SC"),
  ("WAGGAMAN", "LA"),
  ("WAGGONER", "IL"),
  ("WAGNER", "SD"),
  ("WAGNER", "PA"),
  ("WAGON MOUND", "NM"),
  ("WAGON WHEEL", "AZ"),
  ("WAGONER", "OK"),
  ("WAGRAM", "NC"),
  ("WAHAK HOTRONTK", "AZ"),
  ("WAHIAWA", "HI"),
  ("WAHKON", "MN"),
  ("WAHNETA", "FL"),
  ("WAHOO", "NE"),
  ("WAHPETON", "ND"),
  ("WAHPETON", "IA"),
  ("WAIALUA", "HI"),
  ("WAIANAE", "HI"),
  ("WAIHEE-WAIEHU", "HI"),
  ("WAIKANE", "HI"),
  ("WAIKAPU", "HI"),
  ("WAIKELE", "HI"),
  ("WAIKOLOA VILLAGE", "HI"),
  ("WAILEA", "HI"),
  ("WAILUA", "HI"),
  ("WAILUA HOMESTEADS", "HI"),
  ("WAILUKU", "HI"),
  ("WAIMALU", "HI"),
  ("WAIMANALO", "HI"),
  ("WAIMANALO BEACH", "HI"),
  ("WAIMEA", "HI"),
  ("WAIMEA", "HI"),
  ("WAINAKU", "HI"),
  ("WAINIHA", "HI"),
  ("WAINSCOTT", "NY"),
  ("WAINWRIGHT", "AK"),
  ("WAINWRIGHT", "OK"),
  ("WAIOHINU", "HI"),
  ("WAIPAHU", "HI"),
  ("WAIPIO", "HI"),
  ("WAIPIO ACRES", "HI"),
  ("WAITE HILL", "OH"),
  ("WAITE PARK", "MN"),
  ("WAITSBURG", "WA"),
  ("WAITSFIELD", "VT"),
  ("WAKARUSA", "KS"),
  ("WAKARUSA", "IN"),
  ("WAKE FOREST", "NC"),
  ("WAKE VILLAGE", "TX"),
  ("WAKEENEY", "KS"),
  ("WAKEFIELD", "MI"),
  ("WAKEFIELD", "MA"),
  ("WAKEFIELD", "VA"),
  ("WAKEFIELD", "PA"),
  ("WAKEFIELD", "VA"),
  ("WAKEFIELD", "NE"),
  ("WAKEFIELD", "KS"),
  ("WAKEFIELD-PEACEDALE", "RI"),
  ("WAKEMAN", "OH"),
  ("WAKITA", "OK"),
  ("WAKONDA", "SD"),
  ("WAKULLA", "NC"),
  ("WALBRIDGE", "OH"),
  ("WALCOTT", "IA"),
  ("WALCOTT", "ND"),
  ("WALDEN", "TN"),
  ("WALDEN", "NY"),
  ("WALDEN", "CO"),
  ("WALDENBURG", "AR"),
  ("WALDO", "AL"),
  ("WALDO", "AR"),
  ("WALDO", "FL"),
  ("WALDO", "WI"),
  ("WALDO", "OH"),
  ("WALDO", "KS"),
  ("WALDOBORO", "ME"),
  ("WALDORF", "MD"),
  ("WALDORF", "MN"),
  ("WALDPORT", "OR"),
  ("WALDRON", "AR"),
  ("WALDRON", "IN"),
  ("WALDRON", "MI"),
  ("WALDRON", "KS"),
  ("WALDWICK", "NJ"),
  ("WALES", "WI"),
  ("WALES", "AK"),
  ("WALES", "UT"),
  ("WALES", "ND"),
  ("WALESKA", "GA"),
  ("WALFORD", "IA"),
  ("WALHALLA", "SC"),
  ("WALHALLA", "ND"),
  ("WALKER", "MI"),
  ("WALKER", "CA"),
  ("WALKER", "LA"),
  ("WALKER", "MN"),
  ("WALKER", "IA"),
  ("WALKER", "MO"),
  ("WALKER LAKE", "NV"),
  ("WALKER MILL", "MD"),
  ("WALKER VALLEY", "NY"),
  ("WALKERSVILLE", "MD"),
  ("WALKERTON", "IN"),
  ("WALKERTOWN", "NC"),
  ("WALKERVILLE", "MT"),
  ("WALKERVILLE", "MI"),
  ("WALL", "SD"),
  ("WALL", "PA"),
  ("WALL LAKE", "IA"),
  ("WALL LANE", "AZ"),
  ("WALLA WALLA", "WA"),
  ("WALLA WALLA EAST", "WA"),
  ("WALLACE", "FL"),
  ("WALLACE", "SC"),
  ("WALLACE", "LA"),
  ("WALLACE", "CA"),
  ("WALLACE", "NC"),
  ("WALLACE", "ID"),
  ("WALLACE", "NE"),
  ("WALLACE", "KS"),
  ("WALLACE", "SD"),
  ("WALLACE", "IN"),
  ("WALLACE RIDGE", "LA"),
  ("WALLACETON", "PA"),
  ("WALLAND", "TN"),
  ("WALLBURG", "NC"),
  ("WALLED LAKE", "MI"),
  ("WALLENPAUPACK LAKE ESTATES", "PA"),
  ("WALLER", "WA"),
  ("WALLER", "TX"),
  ("WALLER", "PA"),
  ("WALLINGFORD", "VT"),
  ("WALLINGFORD", "IA"),
  ("WALLINGFORD CENTER", "CT"),
  ("WALLINGTON", "NJ"),
  ("WALLINS CREEK", "KY"),
  ("WALLIS", "TX"),
  ("WALLKILL", "NY"),
  ("WALLOON LAKE", "MI"),
  ("WALLOWA", "OR"),
  ("WALLOWA LAKE", "OR"),
  ("WALLS", "MS"),
  ("WALLSBURG", "UT"),
  ("WALLULA", "WA"),
  ("WALNUT", "CA"),
  ("WALNUT", "MS"),
  ("WALNUT", "IA"),
  ("WALNUT", "KS"),
  ("WALNUT", "IL"),
  ("WALNUT COVE", "NC"),
  ("WALNUT CREEK", "CA"),
  ("WALNUT CREEK", "OH"),
  ("WALNUT CREEK", "NC"),
  ("WALNUT CREEK", "AZ"),
  ("WALNUT GROVE", "CA"),
  ("WALNUT GROVE", "TN"),
  ("WALNUT GROVE", "AL"),
  ("WALNUT GROVE", "TN"),
  ("WALNUT GROVE", "WA"),
  ("WALNUT GROVE", "GA"),
  ("WALNUT GROVE", "MS"),
  ("WALNUT GROVE", "MN"),
  ("WALNUT GROVE", "MO"),
  ("WALNUT HILL", "TN"),
  ("WALNUT HILL", "IL"),
  ("WALNUT PARK", "CA"),
  ("WALNUT RIDGE", "AR"),
  ("WALNUT SPRINGS", "TX"),
  ("WALNUTPORT", "PA"),
  ("WALNUTTOWN", "PA"),
  ("WALPOLE", "MA"),
  ("WALPOLE", "NH"),
  ("WALSENBURG", "CO"),
  ("WALSH", "CO"),
  ("WALSHVILLE", "IL"),
  ("WALSTONBURG", "NC"),
  ("WALTERBORO", "SC"),
  ("WALTERHILL", "TN"),
  ("WALTERS", "OK"),
  ("WALTERS", "MN"),
  ("WALTHALL", "MS"),
  ("WALTHAM", "MA"),
  ("WALTHAM", "MN"),
  ("WALTHILL", "NE"),
  ("WALTHOURVILLE", "GA"),
  ("WALTON", "KY"),
  ("WALTON", "NE"),
  ("WALTON", "NY"),
  ("WALTON", "IN"),
  ("WALTON", "KS"),
  ("WALTON HILLS", "OH"),
  ("WALTON PARK", "NY"),
  ("WALTONVILLE", "IL"),
  ("WALWORTH", "WI"),
  ("WAMAC", "IL"),
  ("WAMEGO", "KS"),
  ("WAMIC", "OR"),
  ("WAMPSVILLE", "NY"),
  ("WAMPUM", "PA"),
  ("WAMSUTTER", "WY"),
  ("WANAKAH", "NY"),
  ("WANAMASSA", "NJ"),
  ("WANAMIE", "PA"),
  ("WANAMINGO", "MN"),
  ("WANAQUE", "NJ"),
  ("WANATAH", "IN"),
  ("WANBLEE", "SD"),
  ("WANCHESE", "NC"),
  ("WANDA", "MN"),
  ("WANETTE", "OK"),
  ("WANN", "NE"),
  ("WANN", "OK"),
  ("WANSHIP", "UT"),
  ("WANTAGH", "NY"),
  ("WAPAKONETA", "OH"),
  ("WAPANUCKA", "OK"),
  ("WAPATO", "WA"),
  ("WAPELLA", "IL"),
  ("WAPELLO", "IA"),
  ("WAPPINGERS FALLS", "NY"),
  ("WAR", "WV"),
  ("WARBA", "MN"),
  ("WARD", "AR"),
  ("WARD", "SC"),
  ("WARD", "CO"),
  ("WARD", "SD"),
  ("WARDELL", "MO"),
  ("WARDEN", "WA"),
  ("WARDENSVILLE", "WV"),
  ("WARDNER", "ID"),
  ("WARDSVILLE", "MO"),
  ("WARE", "MA"),
  ("WARE PLACE", "SC"),
  ("WARE SHOALS", "SC"),
  ("WAREHAM CENTER", "MA"),
  ("WARETOWN", "NJ"),
  ("WARFIELD", "VA"),
  ("WARFIELD", "KY"),
  ("WARM BEACH", "WA"),
  ("WARM MINERAL SPRINGS", "FL"),
  ("WARM RIVER", "ID"),
  ("WARM SPRINGS", "OR"),
  ("WARM SPRINGS", "CA"),
  ("WARM SPRINGS", "VA"),
  ("WARM SPRINGS", "GA"),
  ("WARMINSTER HEIGHTS", "PA"),
  ("WARNER", "OK"),
  ("WARNER", "NH"),
  ("WARNER", "SD"),
  ("WARNER ROBINS", "GA"),
  ("WARNER VALLEY", "CA"),
  ("WARR ACRES", "OK"),
  ("WARREN", "MI"),
  ("WARREN", "OH"),
  ("WARREN", "AR"),
  ("WARREN", "OR"),
  ("WARREN", "TX"),
  ("WARREN", "PA"),
  ("WARREN", "MN"),
  ("WARREN", "MA"),
  ("WARREN", "IN"),
  ("WARREN", "IL"),
  ("WARREN AFB", "WY"),
  ("WARREN CITY", "TX"),
  ("WARREN PARK", "IN"),
  ("WARRENS", "WI"),
  ("WARRENSBURG", "NY"),
  ("WARRENSBURG", "MO"),
  ("WARRENSBURG", "IL"),
  ("WARRENSVILLE HEIGHTS", "OH"),
  ("WARRENTON", "OR"),
  ("WARRENTON", "MO"),
  ("WARRENTON", "VA"),
  ("WARRENTON", "GA"),
  ("WARRENTON", "NC"),
  ("WARRENVILLE", "IL"),
  ("WARRENVILLE", "SC"),
  ("WARRINGTON", "FL"),
  ("WARRIOR", "AL"),
  ("WARRIOR RUN", "PA"),
  ("WARROAD", "MN"),
  ("WARSAW", "IN"),
  ("WARSAW", "IL"),
  ("WARSAW", "NY"),
  ("WARSAW", "VA"),
  ("WARSAW", "NC"),
  ("WARSAW", "MO"),
  ("WARSAW", "MN"),
  ("WARSAW", "KY"),
  ("WARSAW", "OH"),
  ("WARSON WOODS", "MO"),
  ("WARTBURG", "TN"),
  ("WARTRACE", "TN"),
  ("WARWICK", "RI"),
  ("WARWICK", "OK"),
  ("WARWICK", "NY"),
  ("WARWICK", "GA"),
  ("WARWICK", "ND"),
  ("WASCO", "CA"),
  ("WASCO", "OR"),
  ("WASECA", "MN"),
  ("WASHAM", "WY"),
  ("WASHBURN", "ME"),
  ("WASHBURN", "WI"),
  ("WASHBURN", "ND"),
  ("WASHBURN", "IA"),
  ("WASHBURN", "MO"),
  ("WASHBURN", "IL"),
  ("WASHINGTON DC", "DC"),
  ("WASHINGTON D.C.", "DC"),
  ("WASHINGTON", "DC"),
  ("WASHINGTON", "UT"),
  ("WASHINGTON", "MO"),
  ("WASHINGTON", "NC"),
  ("WASHINGTON", "IL"),
  ("WASHINGTON", "GA"),
  ("WASHINGTON", "IA"),
  ("WASHINGTON", "IN"),
  ("WASHINGTON", "WV"),
  ("WASHINGTON", "PA"),
  ("WASHINGTON", "NJ"),
  ("WASHINGTON", "CA"),
  ("WASHINGTON", "OK"),
  ("WASHINGTON", "AR"),
  ("WASHINGTON", "KS"),
  ("WASHINGTON", "LA"),
  ("WASHINGTON", "VA"),
  ("WASHINGTON", "NE"),
  ("WASHINGTON BORO", "PA"),
  ("WASHINGTON COURT HOUSE", "OH"),
  ("WASHINGTON GROVE", "MD"),
  ("WASHINGTON HEIGHTS", "NY"),
  ("WASHINGTON MILLS", "NY"),
  ("WASHINGTON PARK", "IL"),
  ("WASHINGTON PARK", "AZ"),
  ("WASHINGTON PARK", "FL"),
  ("WASHINGTON PARK", "NC"),
  ("WASHINGTON TERRACE", "UT"),
  ("WASHINGTONVILLE", "NY"),
  ("WASHINGTONVILLE", "OH"),
  ("WASHINGTONVILLE", "PA"),
  ("WASHOE VALLEY", "NV"),
  ("WASHOUGAL", "WA"),
  ("WASHTA", "IA"),
  ("WASHTUCNA", "WA"),
  ("WASILLA", "AK"),
  ("WASKOM", "TX"),
  ("WASOLA", "MO"),
  ("WASTA", "SD"),
  ("WATAGA", "IL"),
  ("WATAUGA", "TX"),
  ("WATAUGA", "TN"),
  ("WATCH HILL", "RI"),
  ("WATCHTOWER", "NY"),
  ("WATCHUNG", "NJ"),
  ("WATER MILL", "NY"),
  ("WATER VALLEY", "MS"),
  ("WATER VALLEY", "KY"),
  ("WATERBURY", "CT"),
  ("WATERBURY", "VT"),
  ("WATERBURY", "NE"),
  ("WATERFLOW", "NM"),
  ("WATERFORD", "WI"),
  ("WATERFORD", "CA"),
  ("WATERFORD", "CT"),
  ("WATERFORD", "PA"),
  ("WATERFORD", "OH"),
  ("WATERFORD", "NY"),
  ("WATERGATE", "FL"),
  ("WATERLOO", "IA"),
  ("WATERLOO", "IL"),
  ("WATERLOO", "CA"),
  ("WATERLOO", "WI"),
  ("WATERLOO", "NY"),
  ("WATERLOO", "IN"),
  ("WATERLOO", "SC"),
  ("WATERLOO", "AL"),
  ("WATERLOO", "NE"),
  ("WATERLOO", "OR"),
  ("WATERMAN", "IL"),
  ("WATERPROOF", "LA"),
  ("WATERSMEET", "MI"),
  ("WATERTOWN", "SD"),
  ("WATERTOWN", "WI"),
  ("WATERTOWN", "NY"),
  ("WATERTOWN", "MN"),
  ("WATERTOWN", "FL"),
  ("WATERTOWN", "CT"),
  ("WATERTOWN", "TN"),
  ("WATERTOWN TOWN", "MA"),
  ("WATERVIEW", "MD"),
  ("WATERVILLE", "ME"),
  ("WATERVILLE", "OH"),
  ("WATERVILLE", "MN"),
  ("WATERVILLE", "NY"),
  ("WATERVILLE", "WA"),
  ("WATERVILLE", "KS"),
  ("WATERVILLE", "IA"),
  ("WATERVLIET", "NY"),
  ("WATERVLIET", "MI"),
  ("WATFORD CITY", "ND"),
  ("WATHA", "NC"),
  ("WATHENA", "KS"),
  ("WATKINS", "CO"),
  ("WATKINS", "MN"),
  ("WATKINS", "IA"),
  ("WATKINS GLEN", "NY"),
  ("WATKINSVILLE", "GA"),
  ("WATONGA", "OK"),
  ("WATROUS", "NM"),
  ("WATSEKA", "IL"),
  ("WATSON", "IL"),
  ("WATSON", "LA"),
  ("WATSON", "AR"),
  ("WATSON", "MN"),
  ("WATSON", "MO"),
  ("WATSONTOWN", "PA"),
  ("WATSONVILLE", "CA"),
  ("WATTERSON PARK", "KY"),
  ("WATTS", "OK"),
  ("WATTS MILLS", "SC"),
  ("WATTSBURG", "PA"),
  ("WATTSVILLE", "VA"),
  ("WAUBAY", "SD"),
  ("WAUBEKA", "WI"),
  ("WAUBUN", "MN"),
  ("WAUCHULA", "FL"),
  ("WAUCOMA", "IA"),
  ("WAUCONDA", "IL"),
  ("WAUHILLAU", "OK"),
  ("WAUKAU", "WI"),
  ("WAUKEE", "IA"),
  ("WAUKEENAH", "FL"),
  ("WAUKEGAN", "IL"),
  ("WAUKENA", "CA"),
  ("WAUKESHA", "WI"),
  ("WAUKOMIS", "OK"),
  ("WAUKON", "IA"),
  ("WAUMANDEE", "WI"),
  ("WAUNA", "WA"),
  ("WAUNAKEE", "WI"),
  ("WAUNETA", "NE"),
  ("WAUPACA", "WI"),
  ("WAUPUN", "WI"),
  ("WAUREGAN", "CT"),
  ("WAURIKA", "OK"),
  ("WAUSA", "NE"),
  ("WAUSAU", "WI"),
  ("WAUSAU", "FL"),
  ("WAUSAUKEE", "WI"),
  ("WAUSEON", "OH"),
  ("WAUTOMA", "WI"),
  ("WAUWATOSA", "WI"),
  ("WAUZEKA", "WI"),
  ("WAVELAND", "MS"),
  ("WAVELAND", "IN"),
  ("WAVERLY", "IA"),
  ("WAVERLY", "MI"),
  ("WAVERLY", "TN"),
  ("WAVERLY", "VA"),
  ("WAVERLY", "AL"),
  ("WAVERLY", "NE"),
  ("WAVERLY", "NY"),
  ("WAVERLY", "MN"),
  ("WAVERLY", "PA"),
  ("WAVERLY", "FL"),
  ("WAVERLY", "WV"),
  ("WAVERLY", "MO"),
  ("WAVERLY", "IL"),
  ("WAVERLY", "SD"),
  ("WAVERLY", "KS"),
  ("WAVERLY", "WA"),
  ("WAVERLY", "KY"),
  ("WAVERLY CITY", "OH"),
  ("WAVERLY HALL", "GA"),
  ("WAVES", "NC"),
  ("WAWONA", "CA"),
  ("WAXAHACHIE", "TX"),
  ("WAXHAW", "NC"),
  ("WAYCROSS", "GA"),
  ("WAYLAND", "MI"),
  ("WAYLAND", "KY"),
  ("WAYLAND", "NY"),
  ("WAYLAND", "IA"),
  ("WAYLAND", "MO"),
  ("WAYMART", "PA"),
  ("WAYNE", "MI"),
  ("WAYNE", "IL"),
  ("WAYNE", "NE"),
  ("WAYNE", "WV"),
  ("WAYNE", "OK"),
  ("WAYNE", "OH"),
  ("WAYNE CITY", "IL"),
  ("WAYNE HEIGHTS", "PA"),
  ("WAYNE LAKES", "OH"),
  ("WAYNESBORO", "VA"),
  ("WAYNESBORO", "MS"),
  ("WAYNESBORO", "GA"),
  ("WAYNESBORO", "TN"),
  ("WAYNESBORO", "PA"),
  ("WAYNESBURG", "PA"),
  ("WAYNESBURG", "OH"),
  ("WAYNESFIELD", "OH"),
  ("WAYNESVILLE", "NC"),
  ("WAYNESVILLE", "MO"),
  ("WAYNESVILLE", "OH"),
  ("WAYNESVILLE", "IL"),
  ("WAYNETOWN", "IN"),
  ("WAYNOKA", "OK"),
  ("WAYZATA", "MN"),
  ("WEATHERBY", "MO"),
  ("WEATHERBY LAKE", "MO"),
  ("WEATHERFORD", "TX"),
  ("WEATHERFORD", "OK"),
  ("WEATHERLY", "PA"),
  ("WEATOGUE", "CT"),
  ("WEAUBLEAU", "MO"),
  ("WEAVER", "AL"),
  ("WEAVERVILLE", "CA"),
  ("WEAVERVILLE", "NC"),
  ("WEBB", "AL"),
  ("WEBB", "IA"),
  ("WEBB", "MS"),
  ("WEBB CITY", "MO"),
  ("WEBB CITY", "OK"),
  ("WEBBER", "KS"),
  ("WEBBERS FALLS", "OK"),
  ("WEBBERVILLE", "TX"),
  ("WEBBERVILLE", "MI"),
  ("WEBER CITY", "VA"),
  ("WEBSTER", "TX"),
  ("WEBSTER", "MA"),
  ("WEBSTER", "NY"),
  ("WEBSTER", "WI"),
  ("WEBSTER", "SD"),
  ("WEBSTER", "FL"),
  ("WEBSTER", "NC"),
  ("WEBSTER", "PA"),
  ("WEBSTER", "IA"),
  ("WEBSTER", "GA"),
  ("WEBSTER CITY", "IA"),
  ("WEBSTER GROVES", "MO"),
  ("WEBSTERS CROSSING", "NY"),
  ("WEBSTERVILLE", "VT"),
  ("WEDDINGTON", "NC"),
  ("WEDGEFIELD", "FL"),
  ("WEDGEFIELD", "SC"),
  ("WEDGEWOOD", "MI"),
  ("WEDOWEE", "AL"),
  ("WEED", "NM"),
  ("WEED", "CA"),
  ("WEEDPATCH", "CA"),
  ("WEEDSPORT", "NY"),
  ("WEEDVILLE", "PA"),
  ("WEEKAPAUG", "RI"),
  ("WEEKI WACHEE", "FL"),
  ("WEEKI WACHEE GARDENS", "FL"),
  ("WEEKSVILLE", "MT"),
  ("WEEPING WATER", "NE"),
  ("WEIDMAN", "MI"),
  ("WEIGELSTOWN", "PA"),
  ("WEIMAR", "TX"),
  ("WEINER", "AR"),
  ("WEINERT", "TX"),
  ("WEINGARTEN", "MO"),
  ("WEIPPE", "ID"),
  ("WEIR", "TX"),
  ("WEIR", "MS"),
  ("WEIR", "KS"),
  ("WEIRTON", "WV"),
  ("WEISER", "ID"),
  ("WEISSPORT", "PA"),
  ("WEISSPORT EAST", "PA"),
  ("WEKIWA SPRINGS", "FL"),
  ("WELAKA", "FL"),
  ("WELBY", "CO"),
  ("WELCH", "WV"),
  ("WELCH", "TX"),
  ("WELCH", "OK"),
  ("WELCOME", "NC"),
  ("WELCOME", "SC"),
  ("WELCOME", "LA"),
  ("WELCOME", "MN"),
  ("WELDA", "KS"),
  ("WELDON", "CA"),
  ("WELDON", "NC"),
  ("WELDON", "IL"),
  ("WELDON", "AR"),
  ("WELDON", "IA"),
  ("WELDON SPRING", "MO"),
  ("WELDON SPRING HEIGHTS", "MO"),
  ("WELDONA", "CO"),
  ("WELEETKA", "OK"),
  ("WELLERSBURG", "PA"),
  ("WELLESLEY", "MA"),
  ("WELLFLEET", "NE"),
  ("WELLFORD", "SC"),
  ("WELLING", "OK"),
  ("WELLINGTON", "FL"),
  ("WELLINGTON", "KS"),
  ("WELLINGTON", "UT"),
  ("WELLINGTON", "OH"),
  ("WELLINGTON", "CO"),
  ("WELLINGTON", "TX"),
  ("WELLINGTON", "MO"),
  ("WELLINGTON", "IL"),
  ("WELLINGTON", "KY"),
  ("WELLMAN", "IA"),
  ("WELLMAN", "TX"),
  ("WELLS", "NV"),
  ("WELLS", "MN"),
  ("WELLS", "TX"),
  ("WELLS", "VT"),
  ("WELLS BRANCH", "TX"),
  ("WELLS RIVER", "VT"),
  ("WELLSBORO", "PA"),
  ("WELLSBURG", "IA"),
  ("WELLSBURG", "WV"),
  ("WELLSBURG", "NY"),
  ("WELLSTON", "OH"),
  ("WELLSTON", "OK"),
  ("WELLSTON", "MI"),
  ("WELLSTON", "MO"),
  ("WELLSVILLE", "UT"),
  ("WELLSVILLE", "NY"),
  ("WELLSVILLE", "OH"),
  ("WELLSVILLE", "MO"),
  ("WELLSVILLE", "KS"),
  ("WELLSVILLE", "PA"),
  ("WELLTON", "AZ"),
  ("WELLTON HILLS", "AZ"),
  ("WELSH", "LA"),
  ("WELTON", "IA"),
  ("WENATCHEE", "WA"),
  ("WENDELL", "NC"),
  ("WENDELL", "ID"),
  ("WENDELL", "MN"),
  ("WENDEN", "AZ"),
  ("WENDOVER", "UT"),
  ("WENONA", "IL"),
  ("WENONAH", "IL"),
  ("WENONAH", "NJ"),
  ("WENTWORTH", "NC"),
  ("WENTWORTH", "SD"),
  ("WENTWORTH", "MO"),
  ("WENTZVILLE", "MO"),
  ("WEOGUFKA", "AL"),
  ("WEOTT", "CA"),
  ("WERNERSVILLE", "PA"),
  ("WESCOSVILLE", "PA"),
  ("WESKAN", "KS"),
  ("WESLACO", "TX"),
  ("WESLEY", "IA"),
  ("WESLEY CHAPEL", "FL"),
  ("WESLEY CHAPEL", "NC"),
  ("WESLEY HILLS", "NY"),
  ("WESLEYVILLE", "PA"),
  ("WESSINGTON", "SD"),
  ("WESSINGTON SPRINGS", "SD"),
  ("WESSON", "MS"),
  ("WEST ALEXANDER", "PA"),
  ("WEST ALEXANDRIA", "OH"),
  ("WEST ALLIS", "WI"),
  ("WEST ALTO BONITO", "TX"),
  ("WEST ALTON", "MO"),
  ("WEST AMANA", "IA"),
  ("WEST ATHENS", "CA"),
  ("WEST BABYLON", "NY"),
  ("WEST BADEN SPRINGS", "IN"),
  ("WEST BARABOO", "WI"),
  ("WEST BAY SHORE", "NY"),
  ("WEST BELMAR", "NJ"),
  ("WEST BEND", "WI"),
  ("WEST BEND", "IA"),
  ("WEST BISHOP", "CA"),
  ("WEST BLOCTON", "AL"),
  ("WEST BOUNTIFUL", "UT"),
  ("WEST BRADENTON", "FL"),
  ("WEST BRANCH", "IA"),
  ("WEST BRANCH", "MI"),
  ("WEST BRATTLEBORO", "VT"),
  ("WEST BROOKFIELD", "MA"),
  ("WEST BROOKLYN", "IL"),
  ("WEST BROWNSVILLE", "PA"),
  ("WEST BUECHEL", "KY"),
  ("WEST BURKE", "VT"),
  ("WEST BURLINGTON", "IA"),
  ("WEST CANTON", "NC"),
  ("WEST CAPE MAY", "NJ"),
  ("WEST CARROLLTON", "OH"),
  ("WEST CARSON", "CA"),
  ("WEST CARTHAGE", "NY"),
  ("WEST CHATHAM", "MA"),
  ("WEST CHAZY", "NY"),
  ("WEST CHESTER", "PA"),
  ("WEST CHESTER", "IA"),
  ("WEST CHICAGO", "IL"),
  ("WEST CITY", "IL"),
  ("WEST CLARKSTON-HIGHLAND", "WA"),
  ("WEST COLLEGE CORNER", "IN"),
  ("WEST COLUMBIA", "SC"),
  ("WEST COLUMBIA", "TX"),
  ("WEST CONCORD", "MA"),
  ("WEST CONCORD", "MN"),
  ("WEST CONSHOHOCKEN", "PA"),
  ("WEST COVINA", "CA"),
  ("WEST CROSSETT", "AR"),
  ("WEST DECATUR", "PA"),
  ("WEST DELAND", "FL"),
  ("WEST DENNIS", "MA"),
  ("WEST DENTON", "MD"),
  ("WEST DES MOINES", "IA"),
  ("WEST DUNDEE", "IL"),
  ("WEST EASTON", "PA"),
  ("WEST ELIZABETH", "PA"),
  ("WEST ELKTON", "OH"),
  ("WEST ELMIRA", "NY"),
  ("WEST END", "NY"),
  ("WEST END-COBB TOWN", "AL"),
  ("WEST FAIRVIEW", "PA"),
  ("WEST FALLS", "PA"),
  ("WEST FALLS CHURCH", "VA"),
  ("WEST FALMOUTH", "MA"),
  ("WEST FARGO", "ND"),
  ("WEST FARMINGTON", "OH"),
  ("WEST FORK", "AR"),
  ("WEST FRANKFORT", "IL"),
  ("WEST FREEHOLD", "NJ"),
  ("WEST GLACIER", "MT"),
  ("WEST GLENDIVE", "MT"),
  ("WEST GLENS FALLS", "NY"),
  ("WEST GOSHEN", "CA"),
  ("WEST GROVE", "PA"),
  ("WEST HAMBURG", "PA"),
  ("WEST HAMLIN", "WV"),
  ("WEST HAMMOND", "NM"),
  ("WEST HAMPTON DUNES", "NY"),
  ("WEST HARRISON", "IN"),
  ("WEST HARTFORD", "CT"),
  ("WEST HATTIESBURG", "MS"),
  ("WEST HAVEN", "CT"),
  ("WEST HAVEN", "UT"),
  ("WEST HAVEN-SYLVAN", "OR"),
  ("WEST HAVERSTRAW", "NY"),
  ("WEST HAVRE", "MT"),
  ("WEST HAZLETON", "PA"),
  ("WEST HEMPSTEAD", "NY"),
  ("WEST HILL", "OH"),
  ("WEST HILLS", "NY"),
  ("WEST HILLS", "PA"),
  ("WEST HOLLYWOOD", "CA"),
  ("WEST HOMESTEAD", "PA"),
  ("WEST HURLEY", "NY"),
  ("WEST ISHPEMING", "MI"),
  ("WEST ISLIP", "NY"),
  ("WEST JEFFERSON", "OH"),
  ("WEST JEFFERSON", "NC"),
  ("WEST JEFFERSON", "AL"),
  ("WEST JORDAN", "UT"),
  ("WEST KENNEBUNK", "ME"),
  ("WEST KITTANNING", "PA"),
  ("WEST KOOTENAI", "MT"),
  ("WEST LAFAYETTE", "IN"),
  ("WEST LAFAYETTE", "OH"),
  ("WEST LAKE HILLS", "TX"),
  ("WEST LAUREL", "MD"),
  ("WEST LAWN", "PA"),
  ("WEST LEALMAN", "FL"),
  ("WEST LEBANON", "IN"),
  ("WEST LEECHBURG", "PA"),
  ("WEST LEIPSIC", "OH"),
  ("WEST LIBERTY", "KY"),
  ("WEST LIBERTY", "PA"),
  ("WEST LIBERTY", "IA"),
  ("WEST LIBERTY", "OH"),
  ("WEST LIBERTY", "WV"),
  ("WEST LINE", "MO"),
  ("WEST LINN", "OR"),
  ("WEST LITTLE RIVER", "FL"),
  ("WEST LIVINGSTON", "TX"),
  ("WEST LOCH ESTATE", "HI"),
  ("WEST LOGAN", "WV"),
  ("WEST LONG BRANCH", "NJ"),
  ("WEST MANCHESTER", "OH"),
  ("WEST MANSFIELD", "OH"),
  ("WEST MARION", "NC"),
  ("WEST MAYFIELD", "PA"),
  ("WEST MELBOURNE", "FL"),
  ("WEST MEMPHIS", "AR"),
  ("WEST MENLO PARK", "CA"),
  ("WEST MIAMI", "FL"),
  ("WEST MIDDLESEX", "PA"),
  ("WEST MIDDLETOWN", "PA"),
  ("WEST MIFFLIN", "PA"),
  ("WEST MILFORD", "WV"),
  ("WEST MILLGROVE", "OH"),
  ("WEST MILTON", "OH"),
  ("WEST MILTON", "PA"),
  ("WEST MILWAUKEE", "WI"),
  ("WEST MINERAL", "KS"),
  ("WEST MODESTO", "CA"),
  ("WEST MONROE", "LA"),
  ("WEST MONROE", "MI"),
  ("WEST MOUNTAIN", "UT"),
  ("WEST NANTICOKE", "PA"),
  ("WEST NEW YORK", "NJ"),
  ("WEST NEWTON", "PA"),
  ("WEST NYACK", "NY"),
  ("WEST OCEAN CITY", "MD"),
  ("WEST ODESSA", "TX"),
  ("WEST OKOBOJI", "IA"),
  ("WEST ORANGE", "TX"),
  ("WEST PALM BEACH", "FL"),
  ("WEST PARK", "FL"),
  ("WEST PARK", "CA"),
  ("WEST PASCO", "WA"),
  ("WEST PEAVINE", "OK"),
  ("WEST PELZER", "SC"),
  ("WEST PENSACOLA", "FL"),
  ("WEST PEORIA", "IL"),
  ("WEST PERRINE", "FL"),
  ("WEST PITTSBURG", "PA"),
  ("WEST PITTSTON", "PA"),
  ("WEST PLAINS", "MO"),
  ("WEST PLEASANT VIEW", "CO"),
  ("WEST POCOMOKE", "MD"),
  ("WEST POINT", "MS"),
  ("WEST POINT", "NY"),
  ("WEST POINT", "GA"),
  ("WEST POINT", "UT"),
  ("WEST POINT", "VA"),
  ("WEST POINT", "IN"),
  ("WEST POINT", "CA"),
  ("WEST POINT", "AL"),
  ("WEST POINT", "NE"),
  ("WEST POINT", "IA"),
  ("WEST POINT", "KY"),
  ("WEST POINT", "AR"),
  ("WEST POINT", "IL"),
  ("WEST PORTSMOUTH", "OH"),
  ("WEST PUENTE VALLEY", "CA"),
  ("WEST RANCHO DOMINGUEZ", "CA"),
  ("WEST READING", "PA"),
  ("WEST RICHLAND", "WA"),
  ("WEST ROY LAKE", "MN"),
  ("WEST RUSHVILLE", "OH"),
  ("WEST RUTLAND", "VT"),
  ("WEST SACRAMENTO", "CA"),
  ("WEST SALEM", "WI"),
  ("WEST SALEM", "IL"),
  ("WEST SALEM", "OH"),
  ("WEST SAMOSET", "FL"),
  ("WEST SAND LAKE", "NY"),
  ("WEST SAYVILLE", "NY"),
  ("WEST SCIO", "OR"),
  ("WEST SENECA", "NY"),
  ("WEST SHARYLAND", "TX"),
  ("WEST SIDE HIGHWAY", "WA"),
  ("WEST SILOAM SPRINGS", "OK"),
  ("WEST SIMSBURY", "CT"),
  ("WEST SLOPE", "OR"),
  ("WEST SPRINGFIELD", "VA"),
  ("WEST SPRINGFIELD TOWN", "MA"),
  ("WEST ST. PAUL", "MN"),
  ("WEST STEWARTSTOWN", "NH"),
  ("WEST SULLIVAN", "MO"),
  ("WEST SUNBURY", "PA"),
  ("WEST SWANZEY", "NH"),
  ("WEST TAWAKONI", "TX"),
  ("WEST TERRE HAUTE", "IN"),
  ("WEST UNION", "OH"),
  ("WEST UNION", "IA"),
  ("WEST UNION", "IL"),
  ("WEST UNION", "SC"),
  ("WEST UNION", "MN"),
  ("WEST UNION", "WV"),
  ("WEST UNITY", "OH"),
  ("WEST UNIVERSITY PLACE", "TX"),
  ("WEST VALLEY", "NY"),
  ("WEST VALLEY CITY", "UT"),
  ("WEST VERO CORRIDOR", "FL"),
  ("WEST VIEW", "PA"),
  ("WEST WAREHAM", "MA"),
  ("WEST WAYNESBURG", "PA"),
  ("WEST WENDOVER", "NV"),
  ("WEST WHITTIER-LOS NIETOS", "CA"),
  ("WEST WILDWOOD", "NJ"),
  ("WEST WINFIELD", "NY"),
  ("WEST WOOD", "UT"),
  ("WEST WYOMING", "PA"),
  ("WEST WYOMISSING", "PA"),
  ("WEST YARMOUTH", "MA"),
  ("WEST YELLOWSTONE", "MT"),
  ("WEST YORK", "PA"),
  ("WEST YORK", "IL"),
  ("WESTBORO", "WI"),
  ("WESTBORO", "MO"),
  ("WESTBOROUGH", "MA"),
  ("WESTBROOK", "ME"),
  ("WESTBROOK", "MN"),
  ("WESTBROOK", "TX"),
  ("WESTBROOK CENTER", "CT"),
  ("WESTBURY", "NY"),
  ("WESTBY", "WI"),
  ("WESTBY", "MT"),
  ("WESTCHASE", "FL"),
  ("WESTCHESTER", "FL"),
  ("WESTCHESTER", "IL"),
  ("WESTCLIFFE", "CO"),
  ("WESTCREEK", "CO"),
  ("WESTDALE", "TX"),
  ("WESTERLY", "RI"),
  ("WESTERN", "NE"),
  ("WESTERN GROVE", "AR"),
  ("WESTERN LAKE", "TX"),
  ("WESTERN SPRINGS", "IL"),
  ("WESTERNPORT", "MD"),
  ("WESTERVELT", "IL"),
  ("WESTERVILLE", "OH"),
  ("WESTERVILLE", "NE"),
  ("WESTFIELD", "MA"),
  ("WESTFIELD", "IN"),
  ("WESTFIELD", "NJ"),
  ("WESTFIELD", "NY"),
  ("WESTFIELD", "WI"),
  ("WESTFIELD", "IL"),
  ("WESTFIELD", "PA"),
  ("WESTFIELD", "IA"),
  ("WESTFIELD CENTER", "OH"),
  ("WESTFIR", "OR"),
  ("WESTGATE", "FL"),
  ("WESTGATE", "IA"),
  ("WESTHAMPTON", "NY"),
  ("WESTHAMPTON BEACH", "NY"),
  ("WESTHAVEN-MOONSTONE", "CA"),
  ("WESTHOPE", "ND"),
  ("WESTLAKE", "OH"),
  ("WESTLAKE", "TX"),
  ("WESTLAKE", "LA"),
  ("WESTLAKE CORNER", "VA"),
  ("WESTLAKE VILLAGE", "CA"),
  ("WESTLAND", "MI"),
  ("WESTLAND", "PA"),
  ("WESTLEY", "CA"),
  ("WESTMERE", "NY"),
  ("WESTMINSTER", "CO"),
  ("WESTMINSTER", "CA"),
  ("WESTMINSTER", "MD"),
  ("WESTMINSTER", "TX"),
  ("WESTMINSTER", "SC"),
  ("WESTMINSTER", "VT"),
  ("WESTMINSTER", "LA"),
  ("WESTMONT", "IL"),
  ("WESTMONT", "PA"),
  ("WESTMONT", "CA"),
  ("WESTMORELAND", "TN"),
  ("WESTMORELAND", "NY"),
  ("WESTMORELAND", "KS"),
  ("WESTMORLAND", "CA"),
  ("WESTON", "FL"),
  ("WESTON", "WI"),
  ("WESTON", "TX"),
  ("WESTON", "MO"),
  ("WESTON", "CO"),
  ("WESTON", "ID"),
  ("WESTON", "WV"),
  ("WESTON", "NJ"),
  ("WESTON", "OH"),
  ("WESTON", "OR"),
  ("WESTON", "PA"),
  ("WESTON", "IA"),
  ("WESTON", "NE"),
  ("WESTON LAKES", "TX"),
  ("WESTON MILLS", "NY"),
  ("WESTOVER", "AL"),
  ("WESTOVER", "PA"),
  ("WESTOVER", "WV"),
  ("WESTOVER HILLS", "TX"),
  ("WESTPHALIA", "MD"),
  ("WESTPHALIA", "IN"),
  ("WESTPHALIA", "MI"),
  ("WESTPHALIA", "MO"),
  ("WESTPHALIA", "KS"),
  ("WESTPHALIA", "IA"),
  ("WESTPORT", "CT"),
  ("WESTPORT", "OK"),
  ("WESTPORT", "WA"),
  ("WESTPORT", "NC"),
  ("WESTPORT", "NY"),
  ("WESTPORT", "IN"),
  ("WESTPORT", "KY"),
  ("WESTPORT", "OR"),
  ("WESTPORT", "MN"),
  ("WESTPORT", "SD"),
  ("WESTSIDE", "IA"),
  ("WESTVALE", "NY"),
  ("WESTVIEW", "FL"),
  ("WESTVIEW CIRCLE", "WY"),
  ("WESTVILLE", "FL"),
  ("WESTVILLE", "IN"),
  ("WESTVILLE", "IL"),
  ("WESTVILLE", "OK"),
  ("WESTVILLE", "NJ"),
  ("WESTWAY", "TX"),
  ("WESTWEGO", "LA"),
  ("WESTWOOD", "CA"),
  ("WESTWOOD", "KY"),
  ("WESTWOOD", "MI"),
  ("WESTWOOD", "NJ"),
  ("WESTWOOD", "MO"),
  ("WESTWOOD", "PA"),
  ("WESTWOOD", "KS"),
  ("WESTWOOD", "IA"),
  ("WESTWOOD", "KY"),
  ("WESTWOOD HILLS", "KS"),
  ("WESTWOOD LAKES", "FL"),
  ("WESTWOOD SHORES", "TX"),
  ("WESTWORTH VILLAGE", "TX"),
  ("WET CAMP VILLAGE", "AZ"),
  ("WETHERINGTON", "OH"),
  ("WETHERSFIELD", "CT"),
  ("WETMORE", "KS"),
  ("WETONKA", "SD"),
  ("WETUMKA", "OK"),
  ("WETUMPKA", "AL"),
  ("WEWAHITCHKA", "FL"),
  ("WEWEANTIC", "MA"),
  ("WEWOKA", "OK"),
  ("WEYAUWEGA", "WI"),
  ("WEYERHAEUSER", "WI"),
  ("WEYERS CAVE", "VA"),
  ("WEYMOUTH TOWN", "MA"),
  ("WHALAN", "MN"),
  ("WHALE PASS", "AK"),
  ("WHALEYVILLE", "MD"),
  ("WHARTON", "TX"),
  ("WHARTON", "NJ"),
  ("WHARTON", "OH"),
  ("WHAT CHEER", "IA"),
  ("WHATLEY", "AL"),
  ("WHEAT RIDGE", "CO"),
  ("WHEATCROFT", "KY"),
  ("WHEATFIELD", "IN"),
  ("WHEATFIELDS", "AZ"),
  ("WHEATLAND", "MT"),
  ("WHEATLAND", "WY"),
  ("WHEATLAND", "ND"),
  ("WHEATLAND", "CA"),
  ("WHEATLAND", "PA"),
  ("WHEATLAND", "MO"),
  ("WHEATLAND", "IA"),
  ("WHEATLAND", "IN"),
  ("WHEATLEY", "AR"),
  ("WHEATLEY HEIGHTS", "NY"),
  ("WHEATON", "IL"),
  ("WHEATON", "MD"),
  ("WHEATON", "MN"),
  ("WHEATON", "MO"),
  ("WHEATON", "KS"),
  ("WHEELER", "IN"),
  ("WHEELER", "TX"),
  ("WHEELER", "WI"),
  ("WHEELER", "IL"),
  ("WHEELER", "OR"),
  ("WHEELER AFB", "HI"),
  ("WHEELERSBURG", "OH"),
  ("WHEELING", "WV"),
  ("WHEELING", "IL"),
  ("WHEELING", "MO"),
  ("WHEELWRIGHT", "KY"),
  ("WHELEN SPRINGS", "AR"),
  ("WHETSTONE", "AZ"),
  ("WHIDBEY ISLAND STATION", "WA"),
  ("WHIGHAM", "GA"),
  ("WHIPHOLT", "MN"),
  ("WHISKEY CREEK", "FL"),
  ("WHISPERING PINES", "NC"),
  ("WHISPERING PINES", "AZ"),
  ("WHITAKER", "PA"),
  ("WHITAKERS", "NC"),
  ("WHITE", "SD"),
  ("WHITE", "GA"),
  ("WHITE BEAR LAKE", "MN"),
  ("WHITE BIRD", "ID"),
  ("WHITE BLUFF", "TN"),
  ("WHITE CASTLE", "LA"),
  ("WHITE CENTER", "WA"),
  ("WHITE CITY", "FL"),
  ("WHITE CITY", "OR"),
  ("WHITE CITY", "KS"),
  ("WHITE CITY", "IL"),
  ("WHITE CITY", "UT"),
  ("WHITE CLAY", "NE"),
  ("WHITE CLOUD", "MI"),
  ("WHITE CLOUD", "KS"),
  ("WHITE DEER", "TX"),
  ("WHITE EARTH", "MN"),
  ("WHITE EARTH", "ND"),
  ("WHITE HALL", "AL"),
  ("WHITE HALL", "AR"),
  ("WHITE HALL", "IL"),
  ("WHITE HALL", "WV"),
  ("WHITE HAVEN", "PA"),
  ("WHITE HAVEN", "MT"),
  ("WHITE HEATH", "IL"),
  ("WHITE HILLS", "AZ"),
  ("WHITE HORSE", "SD"),
  ("WHITE HORSE", "NJ"),
  ("WHITE HOUSE", "TN"),
  ("WHITE HOUSE STATION", "NJ"),
  ("WHITE ISLAND SHORES", "MA"),
  ("WHITE LAKE", "WI"),
  ("WHITE LAKE", "NC"),
  ("WHITE LAKE", "SD"),
  ("WHITE MARSH", "MD"),
  ("WHITE MEADOW LAKE", "NJ"),
  ("WHITE MESA", "UT"),
  ("WHITE MILLS", "PA"),
  ("WHITE MOUNTAIN", "AK"),
  ("WHITE MOUNTAIN LAKE", "AZ"),
  ("WHITE OAK", "TX"),
  ("WHITE OAK", "PA"),
  ("WHITE OAK", "OH"),
  ("WHITE OAK", "OK"),
  ("WHITE OAK", "NC"),
  ("WHITE OAK", "MD"),
  ("WHITE OAK", "MS"),
  ("WHITE PIGEON", "MI"),
  ("WHITE PINE", "MI"),
  ("WHITE PINE", "TN"),
  ("WHITE PLAINS", "AL"),
  ("WHITE PLAINS", "NY"),
  ("WHITE PLAINS", "GA"),
  ("WHITE PLAINS", "NC"),
  ("WHITE PLAINS", "KY"),
  ("WHITE RIVER", "SD"),
  ("WHITE RIVER JUNCTION", "VT"),
  ("WHITE ROCK", "NM"),
  ("WHITE ROCK", "SD"),
  ("WHITE SALMON", "WA"),
  ("WHITE SANDS", "NM"),
  ("WHITE SETTLEMENT", "TX"),
  ("WHITE SHIELD", "ND"),
  ("WHITE SIGNAL", "NM"),
  ("WHITE SPRINGS", "FL"),
  ("WHITE STONE", "VA"),
  ("WHITE SULPHUR SPRINGS", "WV"),
  ("WHITE SULPHUR SPRINGS", "MT"),
  ("WHITE SWAN", "WA"),
  ("WHITE WATER", "OK"),
  ("WHITEASH", "IL"),
  ("WHITECONE", "AZ"),
  ("WHITEFACE", "TX"),
  ("WHITEFIELD", "OK"),
  ("WHITEFIELD", "NH"),
  ("WHITEFISH", "MT"),
  ("WHITEFISH BAY", "WI"),
  ("WHITEHALL", "OH"),
  ("WHITEHALL", "NY"),
  ("WHITEHALL", "PA"),
  ("WHITEHALL", "MI"),
  ("WHITEHALL", "WI"),
  ("WHITEHALL", "MT"),
  ("WHITEHAVEN", "MD"),
  ("WHITEHAWK", "CA"),
  ("WHITEHORSE", "SD"),
  ("WHITEHOUSE", "TX"),
  ("WHITEHOUSE", "OH"),
  ("WHITELAND", "IN"),
  ("WHITELAW", "WI"),
  ("WHITEMAN AFB", "MO"),
  ("WHITEMARSH ISLAND", "GA"),
  ("WHITERIVER", "AZ"),
  ("WHITEROCKS", "UT"),
  ("WHITES CITY", "NM"),
  ("WHITES LANDING", "OH"),
  ("WHITESBORO", "AL"),
  ("WHITESBORO", "NJ"),
  ("WHITESBORO", "TX"),
  ("WHITESBORO", "OK"),
  ("WHITESBORO", "NY"),
  ("WHITESBURG", "KY"),
  ("WHITESBURG", "GA"),
  ("WHITESIDE", "MO"),
  ("WHITESTONE", "AK"),
  ("WHITESTONE LOGGING CAMP", "AK"),
  ("WHITESTOWN", "IN"),
  ("WHITESVILLE", "KY"),
  ("WHITESVILLE", "VA"),
  ("WHITESVILLE", "WV"),
  ("WHITEVILLE", "NC"),
  ("WHITEVILLE", "TN"),
  ("WHITEWATER", "CA"),
  ("WHITEWATER", "WI"),
  ("WHITEWATER", "MT"),
  ("WHITEWATER", "KS"),
  ("WHITEWATER", "MO"),
  ("WHITEWATER", "IN"),
  ("WHITEWOOD", "SD"),
  ("WHITEWRIGHT", "TX"),
  ("WHITFIELD", "FL"),
  ("WHITFIELD", "FL"),
  ("WHITFIELD", "PA"),
  ("WHITING", "IN"),
  ("WHITING", "WI"),
  ("WHITING", "WY"),
  ("WHITING", "KS"),
  ("WHITING", "IA"),
  ("WHITINSVILLE", "MA"),
  ("WHITLEY CITY", "KY"),
  ("WHITLEY GARDENS", "CA"),
  ("WHITMER", "WV"),
  ("WHITMIRE", "SC"),
  ("WHITMORE LAKE", "MI"),
  ("WHITMORE VILLAGE", "HI"),
  ("WHITNEY", "NV"),
  ("WHITNEY", "TX"),
  ("WHITNEY", "NE"),
  ("WHITNEY POINT", "NY"),
  ("WHITSETT", "NC"),
  ("WHITTEMORE", "MI"),
  ("WHITTEMORE", "IA"),
  ("WHITTEN", "IA"),
  ("WHITTIER", "CA"),
  ("WHITTIER", "AK"),
  ("WHITTINGHAM", "NJ"),
  ("WHITTLESEY", "WI"),
  ("WHITWELL", "TN"),
  ("WHY", "AZ"),
  ("WIBAUX", "MT"),
  ("WICHITA", "KS"),
  ("WICHITA FALLS", "TX"),
  ("WICKENBURG", "AZ"),
  ("WICKERHAM MANOR-FISHER", "PA"),
  ("WICKES", "AR"),
  ("WICKETT", "TX"),
  ("WICKLIFFE", "OH"),
  ("WICKLIFFE", "OK"),
  ("WICKLIFFE", "KY"),
  ("WICONSICO", "PA"),
  ("WIDE RUINS", "AZ"),
  ("WIDENER", "AR"),
  ("WIEDERKEHR VILLAGE", "AR"),
  ("WIGGINS", "MS"),
  ("WIGGINS", "CO"),
  ("WIGHTMANS GROVE", "OH"),
  ("WIKIEUP", "AZ"),
  ("WILBER", "NE"),
  ("WILBERFORCE", "OH"),
  ("WILBRAHAM", "MA"),
  ("WILBUR", "WA"),
  ("WILBUR PARK", "MO"),
  ("WILBURTON", "OK"),
  ("WILBURTON NUMBER ONE", "PA"),
  ("WILBURTON NUMBER TWO", "PA"),
  ("WILCOX", "NE"),
  ("WILCOX", "PA"),
  ("WILD PEACH VILLAGE", "TX"),
  ("WILD ROSE", "WI"),
  ("WILDER", "KY"),
  ("WILDER", "VT"),
  ("WILDER", "MN"),
  ("WILDER", "ID"),
  ("WILDERNESS RIM", "WA"),
  ("WILDOMAR", "CA"),
  ("WILDROSE", "ND"),
  ("WILDWOOD", "MO"),
  ("WILDWOOD", "FL"),
  ("WILDWOOD", "TX"),
  ("WILDWOOD", "TN"),
  ("WILDWOOD", "NJ"),
  ("WILDWOOD", "KY"),
  ("WILDWOOD CREST", "NJ"),
  ("WILDWOOD LAKE", "TN"),
  ("WILEY", "CO"),
  ("WILEY FORD", "WV"),
  ("WILHOIT", "AZ"),
  ("WILKERSON", "CA"),
  ("WILKES-BARRE", "PA"),
  ("WILKESBORO", "NC"),
  ("WILKESON", "WA"),
  ("WILKESVILLE", "OH"),
  ("WILKINSBURG", "PA"),
  ("WILKINSON", "IN"),
  ("WILKINSON HEIGHTS", "SC"),
  ("WILLACOOCHEE", "GA"),
  ("WILLAMINA", "OR"),
  ("WILLAPA", "WA"),
  ("WILLARD", "MO"),
  ("WILLARD", "UT"),
  ("WILLARD", "OH"),
  ("WILLARD", "NM"),
  ("WILLARD", "KS"),
  ("WILLARDS", "MD"),
  ("WILLCOX", "AZ"),
  ("WILLERNIE", "MN"),
  ("WILLEY", "IA"),
  ("WILLIAMS", "AZ"),
  ("WILLIAMS", "OR"),
  ("WILLIAMS", "CA"),
  ("WILLIAMS", "IN"),
  ("WILLIAMS", "MN"),
  ("WILLIAMS", "IA"),
  ("WILLIAMS", "SC"),
  ("WILLIAMS BAY", "WI"),
  ("WILLIAMS CREEK", "IN"),
  ("WILLIAMSBURG", "VA"),
  ("WILLIAMSBURG", "KY"),
  ("WILLIAMSBURG", "IA"),
  ("WILLIAMSBURG", "FL"),
  ("WILLIAMSBURG", "CO"),
  ("WILLIAMSBURG", "OH"),
  ("WILLIAMSBURG", "KS"),
  ("WILLIAMSBURG", "NM"),
  ("WILLIAMSBURG", "PA"),
  ("WILLIAMSDALE", "OH"),
  ("WILLIAMSFIELD", "IL"),
  ("WILLIAMSON", "AZ"),
  ("WILLIAMSON", "NY"),
  ("WILLIAMSON", "WV"),
  ("WILLIAMSON", "IL"),
  ("WILLIAMSON", "GA"),
  ("WILLIAMSON", "IA"),
  ("WILLIAMSPORT", "PA"),
  ("WILLIAMSPORT", "OH"),
  ("WILLIAMSPORT", "IN"),
  ("WILLIAMSPORT", "MD"),
  ("WILLIAMSTON", "NC"),
  ("WILLIAMSTON", "SC"),
  ("WILLIAMSTON", "MI"),
  ("WILLIAMSTOWN", "KY"),
  ("WILLIAMSTOWN", "NJ"),
  ("WILLIAMSTOWN", "MA"),
  ("WILLIAMSTOWN", "VT"),
  ("WILLIAMSTOWN", "WV"),
  ("WILLIAMSTOWN", "PA"),
  ("WILLIAMSVILLE", "IL"),
  ("WILLIAMSVILLE", "NY"),
  ("WILLIAMSVILLE", "MO"),
  ("WILLIFORD", "AR"),
  ("WILLIMANTIC", "CT"),
  ("WILLINGTON", "SC"),
  ("WILLIS", "TX"),
  ("WILLIS", "KS"),
  ("WILLISBURG", "KY"),
  ("WILLISTON", "SC"),
  ("WILLISTON", "ND"),
  ("WILLISTON", "FL"),
  ("WILLISTON", "TN"),
  ("WILLISTON", "OH"),
  ("WILLISTON", "MD"),
  ("WILLISTON HIGHLANDS", "FL"),
  ("WILLISTON PARK", "NY"),
  ("WILLISVILLE", "AR"),
  ("WILLISVILLE", "IL"),
  ("WILLITS", "CA"),
  ("WILLMAR", "MN"),
  ("WILLOUGHBY", "OH"),
  ("WILLOUGHBY HILLS", "OH"),
  ("WILLOW", "AK"),
  ("WILLOW", "OK"),
  ("WILLOW CANYON", "AZ"),
  ("WILLOW CITY", "ND"),
  ("WILLOW CREEK", "AK"),
  ("WILLOW CREEK", "CA"),
  ("WILLOW CREEK", "MT"),
  ("WILLOW GROVE", "PA"),
  ("WILLOW HILL", "IL"),
  ("WILLOW ISLAND", "NE"),
  ("WILLOW LAKE", "SD"),
  ("WILLOW OAK", "FL"),
  ("WILLOW PARK", "TX"),
  ("WILLOW RIVER", "MN"),
  ("WILLOW SPRINGS", "IL"),
  ("WILLOW SPRINGS", "MO"),
  ("WILLOW STREET", "PA"),
  ("WILLOW VALLEY", "AZ"),
  ("WILLOWBROOK", "CA"),
  ("WILLOWBROOK", "IL"),
  ("WILLOWBROOK", "IL"),
  ("WILLOWBROOK", "KS"),
  ("WILLOWICK", "OH"),
  ("WILLOWS", "CA"),
  ("WILLS POINT", "TX"),
  ("WILLSBORO", "NY"),
  ("WILLSHIRE", "OH"),
  ("WILMAR", "AR"),
  ("WILMER", "TX"),
  ("WILMERDING", "PA"),
  ("WILMETTE", "IL"),
  ("WILMINGTON", "NC"),
  ("WILMINGTON", "MA"),
  ("WILMINGTON", "DE"),
  ("WILMINGTON", "OH"),
  ("WILMINGTON", "IL"),
  ("WILMINGTON", "NY"),
  ("WILMINGTON", "VT"),
  ("WILMINGTON", "IL"),
  ("WILMINGTON ISLAND", "GA"),
  ("WILMINGTON MANOR", "DE"),
  ("WILMONT", "MN"),
  ("WILMORE", "KY"),
  ("WILMORE", "PA"),
  ("WILMORE", "KS"),
  ("WILMOT", "AR"),
  ("WILMOT", "WI"),
  ("WILMOT", "SD"),
  ("WILMOT", "OH"),
  ("WILROADS GARDENS", "KS"),
  ("WILSALL", "MT"),
  ("WILSEY", "KS"),
  ("WILSON", "NC"),
  ("WILSON", "WY"),
  ("WILSON", "OK"),
  ("WILSON", "LA"),
  ("WILSON", "WI"),
  ("WILSON", "PA"),
  ("WILSON", "AR"),
  ("WILSON", "NY"),
  ("WILSON", "TX"),
  ("WILSON", "KS"),
  ("WILSON", "OH"),
  ("WILSON CITY", "MO"),
  ("WILSON CREEK", "WA"),
  ("WILSON-CONOCOCHEAGUE", "MD"),
  ("WILSONIA", "CA"),
  ("WILSON'S MILLS", "NC"),
  ("WILSONVILLE", "AL"),
  ("WILSONVILLE", "OR"),
  ("WILSONVILLE", "IL"),
  ("WILSONVILLE", "NE"),
  ("WILTON", "CA"),
  ("WILTON", "ME"),
  ("WILTON", "MN"),
  ("WILTON", "IA"),
  ("WILTON", "NH"),
  ("WILTON", "AR"),
  ("WILTON", "AL"),
  ("WILTON", "WI"),
  ("WILTON", "ND"),
  ("WILTON CENTER", "CT"),
  ("WILTON MANORS", "FL"),
  ("WIMAUMA", "FL"),
  ("WIMBERLEY", "TX"),
  ("WIMBLEDON", "ND"),
  ("WIMER", "OR"),
  ("WINAMAC", "IN"),
  ("WINCHENDON", "MA"),
  ("WINCHESTER", "TN"),
  ("WINCHESTER", "VA"),
  ("WINCHESTER", "KY"),
  ("WINCHESTER", "CA"),
  ("WINCHESTER", "MA"),
  ("WINCHESTER", "OK"),
  ("WINCHESTER", "NV"),
  ("WINCHESTER", "IN"),
  ("WINCHESTER", "NH"),
  ("WINCHESTER", "OH"),
  ("WINCHESTER", "WI"),
  ("WINCHESTER", "IL"),
  ("WINCHESTER", "AR"),
  ("WINCHESTER", "KS"),
  ("WINCHESTER", "MO"),
  ("WINCHESTER", "ID"),
  ("WINCHESTER BAY", "OR"),
  ("WIND GAP", "PA"),
  ("WIND LAKE", "WI"),
  ("WIND POINT", "WI"),
  ("WIND RIDGE", "PA"),
  ("WINDBER", "PA"),
  ("WINDCREST", "TX"),
  ("WINDEMERE", "TX"),
  ("WINDER", "GA"),
  ("WINDERMERE", "FL"),
  ("WINDFALL CITY", "IN"),
  ("WINDHAM", "OH"),
  ("WINDHAM", "NY"),
  ("WINDMILL", "NM"),
  ("WINDOM", "MN"),
  ("WINDOM", "TX"),
  ("WINDOM", "KS"),
  ("WINDOW ROCK", "AZ"),
  ("WINDSOR", "CO"),
  ("WINDSOR", "CA"),
  ("WINDSOR", "VA"),
  ("WINDSOR", "WI"),
  ("WINDSOR", "NC"),
  ("WINDSOR", "MO"),
  ("WINDSOR", "VT"),
  ("WINDSOR", "NY"),
  ("WINDSOR", "FL"),
  ("WINDSOR", "SC"),
  ("WINDSOR", "IL"),
  ("WINDSOR", "PA"),
  ("WINDSOR", "IL"),
  ("WINDSOR HEIGHTS", "IA"),
  ("WINDSOR HEIGHTS", "WV"),
  ("WINDSOR LOCKS", "CT"),
  ("WINDSOR PLACE", "MO"),
  ("WINDTHORST", "TX"),
  ("WINDY HILLS", "KY"),
  ("WINEGLASS", "MT"),
  ("WINESBURG", "OH"),
  ("WINFALL", "NC"),
  ("WINFIELD", "AL"),
  ("WINFIELD", "IN"),
  ("WINFIELD", "KS"),
  ("WINFIELD", "TN"),
  ("WINFIELD", "IL"),
  ("WINFIELD", "PA"),
  ("WINFIELD", "WV"),
  ("WINFIELD", "IA"),
  ("WINFIELD", "TX"),
  ("WINFIELD", "MO"),
  ("WINFRED", "SD"),
  ("WING", "ND"),
  ("WINGATE", "NC"),
  ("WINGATE", "IN"),
  ("WINGER", "MN"),
  ("WINGO", "KY"),
  ("WINIFRED", "MT"),
  ("WINIGAN", "MO"),
  ("WINK", "TX"),
  ("WINKELMAN", "AZ"),
  ("WINLOCK", "WA"),
  ("WINNEBAGO", "MN"),
  ("WINNEBAGO", "IL"),
  ("WINNEBAGO", "NE"),
  ("WINNECONNE", "WI"),
  ("WINNEMUCCA", "NV"),
  ("WINNER", "SD"),
  ("WINNETKA", "IL"),
  ("WINNETOON", "NE"),
  ("WINNETT", "MT"),
  ("WINNFIELD", "LA"),
  ("WINNIE", "TX"),
  ("WINNSBORO", "LA"),
  ("WINNSBORO", "TX"),
  ("WINNSBORO", "SC"),
  ("WINNSBORO MILLS", "SC"),
  ("WINONA", "MN"),
  ("WINONA", "MS"),
  ("WINONA", "MO"),
  ("WINONA", "TX"),
  ("WINONA", "KS"),
  ("WINONA LAKE", "IN"),
  ("WINOOSKI", "VT"),
  ("WINSIDE", "NE"),
  ("WINSLOW", "ME"),
  ("WINSLOW", "AZ"),
  ("WINSLOW", "AR"),
  ("WINSLOW", "IN"),
  ("WINSLOW", "IL"),
  ("WINSLOW", "NE"),
  ("WINSLOW WEST", "AZ"),
  ("WINSTED", "CT"),
  ("WINSTED", "MN"),
  ("WINSTON", "MT"),
  ("WINSTON", "OR"),
  ("WINSTON", "NM"),
  ("WINSTON", "MO"),
  ("WINSTON-SALEM", "NC"),
  ("WINSTONVILLE", "MS"),
  ("WINTER", "WI"),
  ("WINTER BEACH", "FL"),
  ("WINTER GARDEN", "FL"),
  ("WINTER GARDENS", "CA"),
  ("WINTER HARBOR", "ME"),
  ("WINTER HAVEN", "FL"),
  ("WINTER PARK", "CO"),
  ("WINTER PARK", "FL"),
  ("WINTER SPRINGS", "FL"),
  ("WINTERGREEN", "VA"),
  ("WINTERHAVEN", "CA"),
  ("WINTERPORT", "ME"),
  ("WINTERS", "CA"),
  ("WINTERS", "TX"),
  ("WINTERSBURG", "AZ"),
  ("WINTERSET", "IA"),
  ("WINTERSTOWN", "PA"),
  ("WINTERSVILLE", "OH"),
  ("WINTERVILLE", "NC"),
  ("WINTERVILLE", "GA"),
  ("WINTHROP", "ME"),
  ("WINTHROP", "NY"),
  ("WINTHROP", "AR"),
  ("WINTHROP", "MN"),
  ("WINTHROP", "WA"),
  ("WINTHROP", "IA"),
  ("WINTHROP HARBOR", "IL"),
  ("WINTHROP TOWN", "MA"),
  ("WINTON", "CA"),
  ("WINTON", "NC"),
  ("WINTON", "MN"),
  ("WIOTA", "IA"),
  ("WISCASSET", "ME"),
  ("WISCON", "FL"),
  ("WISCONSIN DELLS", "WI"),
  ("WISCONSIN RAPIDS", "WI"),
  ("WISDOM", "MT"),
  ("WISE", "VA"),
  ("WISEMAN", "AK"),
  ("WISHEK", "ND"),
  ("WISHRAM", "WA"),
  ("WISNER", "NE"),
  ("WISNER", "LA"),
  ("WISTER", "OK"),
  ("WITHAMSVILLE", "OH"),
  ("WITHEE", "WI"),
  ("WITHERBEE", "NY"),
  ("WITMER", "PA"),
  ("WITT", "IL"),
  ("WITTENBERG", "WI"),
  ("WITTMANN", "AZ"),
  ("WIXOM", "MI"),
  ("WIXON VALLEY", "TX"),
  ("WOBURN", "MA"),
  ("WODEN", "IA"),
  ("WOFFORD HEIGHTS", "CA"),
  ("WOLBACH", "NE"),
  ("WOLCOTT", "NY"),
  ("WOLCOTT", "IN"),
  ("WOLCOTT", "CO"),
  ("WOLCOTTVILLE", "IN"),
  ("WOLF CREEK", "UT"),
  ("WOLF LAKE", "MI"),
  ("WOLF LAKE", "MN"),
  ("WOLF POINT", "MT"),
  ("WOLF SUMMIT", "WV"),
  ("WOLF TRAP", "VA"),
  ("WOLFDALE", "PA"),
  ("WOLFE CITY", "TX"),
  ("WOLFEBORO", "NH"),
  ("WOLFFORTH", "TX"),
  ("WOLFHURST", "OH"),
  ("WOLFORD", "ND"),
  ("WOLLOCHET", "WA"),
  ("WOLSEY", "SD"),
  ("WOLVERINE", "MI"),
  ("WOLVERINE LAKE", "MI"),
  ("WOLVERTON", "MN"),
  ("WOMELSDORF", "PA"),
  ("WOMELSDORF (COALTON)", "WV"),
  ("WOMENS BAY", "AK"),
  ("WONDER LAKE", "IL"),
  ("WONEWOC", "WI"),
  ("WOOD", "SD"),
  ("WOOD DALE", "IL"),
  ("WOOD HEIGHTS", "MO"),
  ("WOOD LAKE", "MN"),
  ("WOOD LAKE", "NE"),
  ("WOOD RIVER", "IL"),
  ("WOOD RIVER", "NE"),
  ("WOOD VILLAGE", "OR"),
  ("WOODACRE", "CA"),
  ("WOODALL", "OK"),
  ("WOODBINE", "NJ"),
  ("WOODBINE", "GA"),
  ("WOODBINE", "IA"),
  ("WOODBINE", "KS"),
  ("WOODBOURNE", "PA"),
  ("WOODBRANCH", "TX"),
  ("WOODBRIDGE", "NJ"),
  ("WOODBRIDGE", "CA"),
  ("WOODBRIDGE", "VA"),
  ("WOODBURN", "OR"),
  ("WOODBURN", "VA"),
  ("WOODBURN", "IN"),
  ("WOODBURN", "IA"),
  ("WOODBURN", "KY"),
  ("WOODBURY", "NY"),
  ("WOODBURY", "MN"),
  ("WOODBURY", "NY"),
  ("WOODBURY", "GA"),
  ("WOODBURY", "TN"),
  ("WOODBURY", "NJ"),
  ("WOODBURY", "KY"),
  ("WOODBURY", "PA"),
  ("WOODBURY CENTER", "CT"),
  ("WOODBURY HEIGHTS", "NJ"),
  ("WOODCLIFF LAKE", "NJ"),
  ("WOODCOCK", "PA"),
  ("WOODCREEK", "TX"),
  ("WOODCREST", "CA"),
  ("WOODFIELD", "SC"),
  ("WOODFIN", "NC"),
  ("WOODFORD", "SC"),
  ("WOODFORD", "WI"),
  ("WOODHAVEN", "MI"),
  ("WOODHULL", "IL"),
  ("WOODINVILLE", "WA"),
  ("WOODLAKE", "VA"),
  ("WOODLAKE", "CA"),
  ("WOODLAND", "CA"),
  ("WOODLAND", "WA"),
  ("WOODLAND", "UT"),
  ("WOODLAND", "AL"),
  ("WOODLAND", "NC"),
  ("WOODLAND", "ME"),
  ("WOODLAND", "MI"),
  ("WOODLAND", "GA"),
  ("WOODLAND", "MN"),
  ("WOODLAND", "MS"),
  ("WOODLAND", "IL"),
  ("WOODLAND", "MD"),
  ("WOODLAND BEACH", "MI"),
  ("WOODLAND HEIGHTS", "PA"),
  ("WOODLAND HILLS", "UT"),
  ("WOODLAND HILLS", "NE"),
  ("WOODLAND HILLS", "KY"),
  ("WOODLAND MILLS", "TN"),
  ("WOODLAND PARK", "CO"),
  ("WOODLAND PARK", "NJ"),
  ("WOODLAND PARK", "NE"),
  ("WOODLANDS", "CA"),
  ("WOODLAWN", "VA"),
  ("WOODLAWN", "MD"),
  ("WOODLAWN", "NC"),
  ("WOODLAWN", "OH"),
  ("WOODLAWN", "AR"),
  ("WOODLAWN", "VA"),
  ("WOODLAWN", "MD"),
  ("WOODLAWN", "IL"),
  ("WOODLAWN", "KY"),
  ("WOODLAWN BEACH", "FL"),
  ("WOODLAWN HEIGHTS", "IN"),
  ("WOODLAWN PARK", "KY"),
  ("WOODLAWN PARK", "OK"),
  ("WOODLOCH", "TX"),
  ("WOODLYN", "PA"),
  ("WOODLYNNE", "NJ"),
  ("WOODMAN", "WI"),
  ("WOODMERE", "LA"),
  ("WOODMERE", "NY"),
  ("WOODMERE", "OH"),
  ("WOODMONT", "CT"),
  ("WOODMOOR", "CO"),
  ("WOODMORE", "MD"),
  ("WOODRIDGE", "IL"),
  ("WOODRIDGE", "NY"),
  ("WOOD-RIDGE", "NJ"),
  ("WOODRUFF", "AZ"),
  ("WOODRUFF", "SC"),
  ("WOODRUFF", "WI"),
  ("WOODRUFF", "UT"),
  ("WOODS BAY", "MT"),
  ("WOODS CREEK", "WA"),
  ("WOODS CROSS", "UT"),
  ("WOODS HOLE", "MA"),
  ("WOODS LANDING-JELM", "WY"),
  ("WOODSBORO", "TX"),
  ("WOODSBORO", "MD"),
  ("WOODSBURGH", "NY"),
  ("WOODSFIELD", "OH"),
  ("WOODSIDE", "CA"),
  ("WOODSIDE", "PA"),
  ("WOODSIDE", "DE"),
  ("WOODSIDE EAST", "DE"),
  ("WOODSON", "AR"),
  ("WOODSON", "TX"),
  ("WOODSON", "IL"),
  ("WOODSON TERRACE", "MO"),
  ("WOODSTOCK", "IL"),
  ("WOODSTOCK", "GA"),
  ("WOODSTOCK", "AL"),
  ("WOODSTOCK", "NY"),
  ("WOODSTOCK", "VA"),
  ("WOODSTOCK", "VT"),
  ("WOODSTOCK", "MN"),
  ("WOODSTOCK", "OH"),
  ("WOODSTON", "KS"),
  ("WOODSTOWN", "NJ"),
  ("WOODSVILLE", "NH"),
  ("WOODSVILLE", "NY"),
  ("WOODVILLE", "AL"),
  ("WOODVILLE", "FL"),
  ("WOODVILLE", "GA"),
  ("WOODVILLE", "CA"),
  ("WOODVILLE", "TX"),
  ("WOODVILLE", "WI"),
  ("WOODVILLE", "OH"),
  ("WOODVILLE", "MS"),
  ("WOODWARD", "OK"),
  ("WOODWARD", "IA"),
  ("WOODWARD", "PA"),
  ("WOODWAY", "TX"),
  ("WOODWAY", "WA"),
  ("WOODWORTH", "LA"),
  ("WOODWORTH", "ND"),
  ("WOODY CREEK", "CO"),
  ("WOOLDRIDGE", "MO"),
  ("WOOLSEY", "GA"),
  ("WOOLSTOCK", "IA"),
  ("WOONSOCKET", "RI"),
  ("WOONSOCKET", "SD"),
  ("WOOSTER", "OH"),
  ("WOOSTER", "AR"),
  ("WORCESTER", "MA"),
  ("WORCESTER", "NY"),
  ("WORCESTER", "VT"),
  ("WORDEN", "MT"),
  ("WORDEN", "IL"),
  ("WORLAND", "WY"),
  ("WORLD GOLF VILLAGE", "FL"),
  ("WORLEY", "ID"),
  ("WORMLEYSBURG", "PA"),
  ("WORTH", "IL"),
  ("WORTH", "MO"),
  ("WORTHAM", "TX"),
  ("WORTHAM", "MO"),
  ("WORTHING", "SD"),
  ("WORTHINGTON", "MN"),
  ("WORTHINGTON", "OH"),
  ("WORTHINGTON", "KY"),
  ("WORTHINGTON", "IN"),
  ("WORTHINGTON", "PA"),
  ("WORTHINGTON", "WV"),
  ("WORTHINGTON", "IA"),
  ("WORTHINGTON", "MO"),
  ("WORTHINGTON HILLS", "KY"),
  ("WORTHINGTON SPRINGS", "FL"),
  ("WORTHVILLE", "PA"),
  ("WORTHVILLE", "KY"),
  ("WORTON", "MD"),
  ("WOUNDED KNEE", "SD"),
  ("WOXHALL", "PA"),
  ("WRANGELL AND", "AK"),
  ("WRAY", "CO"),
  ("WREN", "OH"),
  ("WRENS", "GA"),
  ("WRENSHALL", "MN"),
  ("WRIGHT", "FL"),
  ("WRIGHT", "WY"),
  ("WRIGHT", "KS"),
  ("WRIGHT", "MN"),
  ("WRIGHT CITY", "MO"),
  ("WRIGHT CITY", "OK"),
  ("WRIGHT-PATTERSON AFB", "OH"),
  ("WRIGHTSBORO", "NC"),
  ("WRIGHTSTOWN", "WI"),
  ("WRIGHTSTOWN", "NJ"),
  ("WRIGHTSVILLE", "GA"),
  ("WRIGHTSVILLE", "AR"),
  ("WRIGHTSVILLE", "PA"),
  ("WRIGHTSVILLE BEACH", "NC"),
  ("WRIGHTWOOD", "CA"),
  ("WRIGLEY", "TN"),
  ("WURTLAND", "KY"),
  ("WURTSBORO", "NY"),
  ("WYACONDA", "MO"),
  ("WYALUSING", "PA"),
  ("WYANDANCH", "NY"),
  ("WYANDOTTE", "MI"),
  ("WYANDOTTE", "OK"),
  ("WYANET", "IL"),
  ("WYANO", "PA"),
  ("WYATT", "MO"),
  ("WYE", "MT"),
  ("WYEVILLE", "WI"),
  ("WYKOFF", "MN"),
  ("WYLANDVILLE", "PA"),
  ("WYLDWOOD", "TX"),
  ("WYLIE", "TX"),
  ("WYMORE", "NE"),
  ("WYNANTSKILL", "NY"),
  ("WYNCOTE", "PA"),
  ("WYNDHAM", "VA"),
  ("WYNDMERE", "ND"),
  ("WYNDMOOR", "PA"),
  ("WYNNE", "AR"),
  ("WYNNEDALE", "IN"),
  ("WYNNEWOOD", "OK"),
  ("WYNONA", "OK"),
  ("WYNOT", "NE"),
  ("WYOCENA", "WI"),
  ("WYOLA", "MT"),
  ("WYOMING", "MI"),
  ("WYOMING", "MN"),
  ("WYOMING", "OH"),
  ("WYOMING", "PA"),
  ("WYOMING", "DE"),
  ("WYOMING", "IL"),
  ("WYOMING", "RI"),
  ("WYOMING", "NY"),
  ("WYOMING", "IA"),
  ("WYOMISSING", "PA"),
  ("WYTHEVILLE", "VA"),
  ("XENIA", "OH"),
  ("XENIA", "IL"),
  ("YAAK", "MT"),
  ("YABUCOA", "PR"),
  ("YACHATS", "OR"),
  ("YACOLT", "WA"),
  ("YADKINVILLE", "NC"),
  ("YAH-TA-HEY", "NM"),
  ("YAKIMA", "WA"),
  ("YAKUTAT", "AK"),
  ("YALAHA", "FL"),
  ("YALE", "MI"),
  ("YALE", "OK"),
  ("YALE", "IL"),
  ("YALE", "IA"),
  ("YALE", "SD"),
  ("YAMHILL", "OR"),
  ("YAMPA", "CO"),
  ("YANCEYVILLE", "NC"),
  ("YANKEE HILL", "CA"),
  ("YANKEE HILL", "NE"),
  ("YANKEE LAKE", "OH"),
  ("YANKEETOWN", "FL"),
  ("YANKTON", "SD"),
  ("YANTIS", "TX"),
  ("YAPHANK", "NY"),
  ("YARBOROUGH LANDING", "AR"),
  ("YARDLEY", "PA"),
  ("YARDVILLE", "NJ"),
  ("YARMOUTH", "ME"),
  ("YARMOUTH PORT", "MA"),
  ("YARNELL", "AZ"),
  ("YARROW POINT", "WA"),
  ("YARROWSBURG", "MD"),
  ("YATES CENTER", "KS"),
  ("YATES CITY", "IL"),
  ("YATESVILLE", "GA"),
  ("YATESVILLE", "PA"),
  ("YAUCO", "PR"),
  ("YAUREL", "PR"),
  ("YAZOO CITY", "MS"),
  ("YEADON", "PA"),
  ("YEAGER", "OK"),
  ("YEAGERTOWN", "PA"),
  ("YEEHAW JUNCTION", "FL"),
  ("YELLOW BLUFF", "AL"),
  ("YELLOW PINE", "ID"),
  ("YELLOW SPRINGS", "OH"),
  ("YELLVILLE", "AR"),
  ("YELM", "WA"),
  ("YEMASSEE", "SC"),
  ("YEOMAN", "IN"),
  ("YERINGTON", "NV"),
  ("YETTEM", "CA"),
  ("YETTER", "IA"),
  ("Y-O RANCH", "WY"),
  ("YOAKUM", "TX"),
  ("YODER", "KS"),
  ("YODER", "WY"),
  ("YOE", "PA"),
  ("YOGAVILLE", "VA"),
  ("YOLO", "CA"),
  ("YONAH", "GA"),
  ("YONCALLA", "OR"),
  ("YONKERS", "NY"),
  ("YORBA LINDA", "CA"),
  ("YORK", "SC"),
  ("YORK", "AL"),
  ("YORK", "NE"),
  ("YORK", "PA"),
  ("YORK", "AZ"),
  ("YORK", "ND"),
  ("YORK HAMLET", "NY"),
  ("YORK HARBOR", "ME"),
  ("YORK HAVEN", "PA"),
  ("YORK SPRINGS", "PA"),
  ("YORKANA", "PA"),
  ("YORKETOWN", "NJ"),
  ("YORKLYN", "PA"),
  ("YORKSHIRE", "VA"),
  ("YORKSHIRE", "NY"),
  ("YORKSHIRE", "OH"),
  ("YORKTOWN", "IN"),
  ("YORKTOWN", "TX"),
  ("YORKTOWN", "VA"),
  ("YORKTOWN", "IA"),
  ("YORKTOWN HEIGHTS", "NY"),
  ("YORKVILLE", "IL"),
  ("YORKVILLE", "TN"),
  ("YORKVILLE", "NY"),
  ("YORKVILLE", "OH"),
  ("YOSEMITE LAKES", "CA"),
  ("YOSEMITE VALLEY", "CA"),
  ("YOUNG", "AZ"),
  ("YOUNG HARRIS", "GA"),
  ("YOUNG PLACE", "NM"),
  ("YOUNGSTOWN", "OH"),
  ("YOUNGSTOWN", "NY"),
  ("YOUNGSTOWN", "PA"),
  ("YOUNGSVILLE", "LA"),
  ("YOUNGSVILLE", "NC"),
  ("YOUNGSVILLE", "PA"),
  ("YOUNGSVILLE", "NM"),
  ("YOUNGTOWN", "AZ"),
  ("YOUNGWOOD", "PA"),
  ("YOUNTVILLE", "CA"),
  ("YPSILANTI", "MI"),
  ("YPSILANTI", "ND"),
  ("YREKA", "CA"),
  ("YUBA", "WI"),
  ("YUBA CITY", "CA"),
  ("YUCAIPA", "CA"),
  ("YUCCA", "AZ"),
  ("YUCCA VALLEY", "CA"),
  ("YUKON", "OK"),
  ("YUKON", "PA"),
  ("YULEE", "FL"),
  ("YUMA", "AZ"),
  ("YUMA", "CO"),
  ("YUTAN", "NE"),
  ("YZNAGA", "TX"),
  ("ZACHARY", "LA"),
  ("ZALESKI", "OH"),
  ("ZALMA", "MO"),
  ("ZANESFIELD", "OH"),
  ("ZANESVILLE", "OH"),
  ("ZANESVILLE", "IN"),
  ("ZAP", "ND"),
  ("ZAPATA", "TX"),
  ("ZAPATA RANCH", "TX"),
  ("ZARATE", "TX"),
  ("ZAREPHATH", "NJ"),
  ("ZAVALLA", "TX"),
  ("ZAYANTE", "CA"),
  ("ZEARING", "IA"),
  ("ZEB", "OK"),
  ("ZEBA", "MI"),
  ("ZEBULON", "GA"),
  ("ZEBULON", "NC"),
  ("ZEELAND", "MI"),
  ("ZEELAND", "ND"),
  ("ZEIGLER", "IL"),
  ("ZELIENOPLE", "PA"),
  ("ZELLWOOD", "FL"),
  ("ZEMPLE", "MN"),
  ("ZENA", "OK"),
  ("ZENA", "NY"),
  ("ZENDA", "KS"),
  ("ZEPHYR COVE", "NV"),
  ("ZEPHYRHILLS", "FL"),
  ("ZEPHYRHILLS NORTH", "FL"),
  ("ZEPHYRHILLS SOUTH", "FL"),
  ("ZEPHYRHILLS WEST", "FL"),
  ("ZIA PUEBLO", "NM"),
  ("ZIHLMAN", "MD"),
  ("ZILLAH", "WA"),
  ("ZILWAUKEE", "MI"),
  ("ZIMMERMAN", "MN"),
  ("ZINC", "AR"),
  ("ZION", "IL"),
  ("ZION", "PA"),
  ("ZION", "OK"),
  ("ZIONSVILLE", "IN"),
  ("ZOAR", "WI"),
  ("ZOAR", "OH"),
  ("ZOLFO SPRINGS", "FL"),
  ("ZORTMAN", "MT"),
  ("ZUEHL", "TX"),
  ("ZUMBRO FALLS", "MN"),
  ("ZUMBROTA", "MN"),
  ("ZUNI PUEBLO", "NM"),
  ("ZURICH", "KS"),
  ("ZWINGLE", "IA"),
  ("ZWOLLE", "LA")
);
$ME_LA_CityToState = TableScan("ME_LA_CityToState");
CreateTable("ME_Keyword2Category_Map",
  (
    "clue" => "Text",
    "category" => "Text"
  ),
  ("storyline", "plot"),
  ("slo", "plot"),
  ("lines", "plot"),
  ("plot", "plot"),
  ("scene", "plot"),
  ("scenes", "plot"),
  ("situations", "plot"),
  ("scenario", "plot"),
  ("scenarios", "plot"),
  ("story", "plot"),
  ("pacing", "plot"),
  ("gimmick", "plot"),
  ("direction", "plot"),
  ("pace", "plot"),
  ("is about", "plot"),
  ("boring", "plot"),
  ("violent", "plot"),
  ("violence", "plot"),
  ("the part where", "plot"),
  ("the part when", "plot"),
  ("ending", "plot"),
  ("producer", "cast"),
  ("directed by", "cast"),
  ("starring", "cast"),
  ("stars", "cast"),
  ("plays", "cast"),
  ("perform", "cast"),
  ("performs", "cast"),
  ("performance", "cast"),
  ("acting", "cast"),
  ("female lead", "cast"),
  ("male lead", "cast"),
  ("male romantic lead", "cast"),
  ("performer", "cast"),
  ("actor", "cast"),
  ("actress", "cast"),
  ("actors", "cast"),
  ("crew", "cast"),
  ("filmmaker", "cast"),
  ("cast", "cast"),
  ("casting", "cast"),
  ("director", "cast"),
  ("character", "cast"),
  ("figure", "cast"),
  ("role", "cast"),
  ("commercial", "trailer"),
  ("commercials", "trailer"),
  ("trailer", "trailer"),
  ("trailers", "trailer"),
  ("footage", "trailer"),
  ("preview", "trailer"),
  ("previews", "trailer"),
  ("tv spot", "trailer"),
  ("tv add", "trailer"),
  ("adds", "trailer"),
  ("stunts", "special effects"),
  ("stunning", "special effects"),
  ("special effects", "special effects"),
  ("visual effects", "special effects"),
  ("explosions", "special effects"),
  ("creatures", "special effects"),
  ("visually", "special effects"),
  ("effects", "special effects"),
  ("animation", "special effects"),
  ("music", "music"),
  ("soundtrack", "music"),
  ("sound track", "music"),
  ("song", "music"),
  ("name", "name"),
  ("nomination", "award"),
  ("nominate", "award"),
  ("front runner", "award"),
  ("Oscar", "award"),
  ("nominating ballots", "award"),
  ("voter", "award"),
  ("awards", "award"),
  ("Golden Globes", "award"),
  ("goldenglobes", "award"),
  ("nominee", "award"),
  ("rated", "rating"),
  ("rating", "rating"),
  ("reviewers", "cast"),
  ("poster", "marketing"),
  ("stills", "marketing"),
  ("release", "events"),
  ("premiere", "events")
);
$ME_Keyword2Category_Map = TableScan("ME_Keyword2Category_Map");
CreateTable("BL_FoodNonTypical2ShortName",
  (
    "long" => "Text",
    "short" => "Text"
  ),
  ("mcdonald's", "mcdonald"),
  ("mcdonald's", "mcdonalds"),
  ("p.f. chang's", "p.f. chang"),
  ("wendy's", "wendys"),
  ("applebee's", "applebee"),
  ("applebee's", "applebees"),
  ("mark hix food", "mark hix food"),
  ("red robin", "red robin"),
  ("starbucks", "starbucks"),
  ("jamba juice", "jamba juice"),
  ("famous dave's", "famous daves"),
  ("quiznos", "quiznos"),
  ("quiznos", "quizno"),
  ("taco bell", "taco bell"),
  ("subway", "subway"),
  ("pinkberry", "pinkberry"),
  ("yogurtland", "yogurtland")
);
$BL_FoodNonTypical2ShortName = TableScan("BL_FoodNonTypical2ShortName");
CreateTable("ME_Movies2Star2Role_Map",
  (
    "formalName" => "Text",
    "star" => "Text",
    "role" => "Text"
  ),
  ("A Warrior's Heart", "Ashley Green", "Brooklyn"),
  ("A Warrior's Heart", "Kellan Lutz", "Conor Sullivan"),
  ("A Warrior's Heart", "Gabrielle Anwar", "Claire Sullivan"),
  ("Answers to Nothing", "Dane Cook", "Ryan"),
  ("Answers to Nothing", "Elizabeth Cook", "Kate"),
  ("Answers to Nothing", "Julie Benz", "Frankie"),
  ("Answers to Nothing", "Barbara Hershey", "Marilyn"),
  ("Outrage", "Takeshi Kitano", "Otomo as Beat Takeshi"),
  ("Outrage", "Kippei Shiina", "Mizuno"),
  ("Outrage", "Ryo Kase", "Ishihara"),
  ("Pastorela", "Carolos Cobos", "Padre Mundo"),
  ("Pastorela", "Eduardo Espana", "Compadre Bulmaro"),
  ("Pastorela", "Ana Serradilla", "Monja"),
  ("Redline", "Takuya Kimura", "JP"),
  ("Redline", "Yu Aoi", "Sonoshee"),
  ("Redline", "Tadanobu Asano", "Frisbee"),
  ("Sleeping Beauty", "Emily Browning", "Lucy"),
  ("New Year's Eve", "Zac Efron", "Paul"),
  ("New Year's Eve", "Robert De Niro", "Stan Harris"),
  ("New Year's Eve", "Katherine Heigl", "Laura"),
  ("New Year's Eve", "Sarah Jessica Parker", "Kim"),
  ("New Year's Eve", "Jessica Biel", "Tess Byrne"),
  ("The Sitter", "Jonah Hill", "Noah Griffith"),
  ("The Sitter", "Max Records", "Slater"),
  ("The Sitter", "Ari Graynor", "Marisa Lewis"),
  ("I Melt With You", "Thomas Jane", "Richard"),
  ("I Melt With You", "Jeremy Piven", "Ron"),
  ("I Melt With You", "Rob Lowe", "Jonathan"),
  ("In Darkness", "Robert Wieckiewicz", "Leopold Socha"),
  ("In Darkness", "Benno F�rmann", "Mundek Margulies"),
  ("In Darkness", "Agnieszka Grochowska", "Klara Keller"),
  ("Ladies Vs. Ricky Bahl", "Ranveer Singh", "Ricky Bahl"),
  ("Ladies Vs. Ricky Bahl", "Parineeta Chopra", "Dimple Chaddha"),
  ("Ladies Vs. Ricky Bahl", "Dippanita Sharma", "Raina Parulekar"),
  ("Tinker, Tailor, Soldier, Spy", "Gary Oldman", "George Smiley"),
  ("Tinker, Tailor, Soldier, Spy", "Colin Firth", "Bill Haydon"),
  ("Tinker, Tailor, Soldier, Spy", "Tom Hardy", "Ricki Tarr"),
  ("We Need To Talk About Kevin", "Tilda Swinton", "Eva Khatchadourian"),
  ("We Need To Talk About Kevin", "John C. Reilly", "Franklin"),
  ("We Need To Talk About Kevin", "Ezra Miller", "Kevin"),
  ("Young Adult", "Charlize Theron", "Mavis Gary"),
  ("Young Adult", "Patton Oswalt", "Matt Freehauf"),
  ("Young Adult", "Patrick Wilson", "Buddy Slade"),
  ("Addiction Incorporated", "Danny Abel", "Himself"),
  ("Addiction Incorporated", "Phil Barnett", "Himself"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Jason Lee", "Dave"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Justin Long", "Alvin"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Matthew Gray Gubler", "Simon"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Jesse McCartney", "Theodore"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Amy Poehler", "Eleanor"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Anna Faris", "Jeanette"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Christina Applegate", "Brittany"),
  ("Alvin and the Chipmunks:  Chipwrecked", "Alan Tudyk", "Simone "),
  ("Sherlock Holmes: A Game of Shadows", "Robert Downey", "Sherlock Holmes"),
  ("Sherlock Holmes: A Game of Shadows", "Jude Law", "Dr. John Watson"),
  ("Sherlock Holmes: A Game of Shadows", "Noomi Rapace", "Madam Simza Heron"),
  ("Sherlock Holmes: A Game of Shadows", "Rachel McAdams", "Irene Adler"),
  ("Carnage", "Jodie Foster", "Penelope Longstreet"),
  ("Carnage", "Kate Winslet", "Nancy Cowan"),
  ("Carnage", "Christoph Waltz", "Alan Cowan"),
  ("Carnage", "John C. Reilly", "Michael Longstreet "),
  ("Cook County", "Anson Mount", "Bump"),
  ("Cook County", "Xander Berkeley", "Sonny"),
  ("Cook County", "Ryan Donowho", "Abe"),
  ("Corman's World: Exploits of a Hollywood Rebel�", "Robert De Niro", "Himself"),
  ("Corman's World: Exploits of a Hollywood Rebel�", "Quentin Tarantino", "Himself"),
  ("Corman's World: Exploits of a Hollywood Rebel�", "Martin Scorsese", "Himself"),
  ("Corman's World: Exploits of a Hollywood Rebel�", "Jack Nicholson", "Himself"),
  ("Corman's World: Exploits of a Hollywood Rebel�", "Ron Howard", "Himself"),
  ("Corman's World: Exploits of a Hollywood Rebel�", "Roger Corman", "Himself"),
  ("Mission:  Impossible - Ghost Protocol", "Tom Cruise", "Ethan Hunt"),
  ("Mission:  Impossible - Ghost Protocol", "Jeremy Renner", "William Brandt"),
  ("Mission:  Impossible - Ghost Protocol", "Simon Pegg", "Benji Dunn"),
  ("Mission:  Impossible - Ghost Protocol", "Paula Patton", "Jane Carter"),
  ("The Girl With The Dragon Tattoo", "Daniel Craig", "Mikael Blomkvist"),
  ("The Girl With The Dragon Tattoo", "Rooney Mara", "Lisbeth Salander"),
  ("The Girl With The Dragon Tattoo", "Chirstopher Plummer", "Henrik Vanger"),
  ("The Girl With The Dragon Tattoo", "Stellan Skarsgard", "Martin Vanger  "),
  ("The Adventures of Tintin", "Jamie Bell", "Tintin"),
  ("The Adventures of Tintin", "Andy Serkis", "Captain Haddock"),
  ("The Adventures of Tintin", "Andy Serkis", "Sir Francis Haddock"),
  ("The Adventures of Tintin", "Daniel Craig", "Rackham"),
  ("The Adventures of Tintin", "Daniel Craig", "Sakharine "),
  ("Albert Nobbs", "Jonathan Rhys Meyers", "Viscount Yarrell"),
  ("Albert Nobbs", "Mia Wasikowska", "Helen Dawes"),
  ("Albert Nobbs", "Aaron Johnson", "Joe Macken"),
  ("Albert Nobbs", "Brendan Gleeson", "Dr. Holloran"),
  ("Albert Nobbs", "Glenn Close", "Albert Nobbs"),
  ("We Bought A Zoo", "Matt Damon", "Benjamin Mee"),
  ("We Bought A Zoo", "Scarlet Johansson", "Kelly Foster"),
  ("We Bought A Zoo", "Thomas Haden Church", "Duncan Mee"),
  ("Don 2", "Shah Rukh Khan", "Devdas"),
  ("Don 2", "Priyanka Chopra", "Don"),
  ("In The Land of Blood and Honey", "Rade Serbedzija", "Nebojsa"),
  ("In The Land of Blood and Honey", "Zana Marjanovic", "Ajla"),
  ("In The Land of Blood and Honey", "Goran Kostic", "Danijel "),
  ("Pina", "Pina Bausch", "Herself"),
  ("The Darkest Hour", "Emile Hirsch", "Sean"),
  ("The Darkest Hour", "Olivia Thirlby", "Natalie"),
  ("The Darkest Hour", "Max Minghella", "Ben"),
  ("War Horse", "Jeremy Irvine", "Albert Narracott"),
  ("War Horse", "Peter Mullan", "Ted Narracott"),
  ("War Horse", "Emily Watson", "Rose Narracott "),
  ("Extremely Loud and Incredibly Close", "Tom Hanks", "Thomas Schell"),
  ("Extremely Loud and Incredibly Close", "Thomas Horn", "Oskar Schell"),
  ("Extremely Loud and Incredibly Close", "Sandra Bullock", "Linda Schell"),
  ("Extremely Loud and Incredibly Close", "Max von Sydow", "The Renter"),
  ("Pariah", "Adepero Oduye", "Alike"),
  ("Pariah", "Pernell Walker", "Laura"),
  ("Pariah", "Aasha Davis", "Bina"),
  ("A Separation", "Peyman Maadi", "Nader"),
  ("A Separation", "Leila Hatami", "Simin"),
  ("A Separation", "Sareh Bayat", "Razieh"),
  ("Angels Crest", "Ameko Eks Mass Carroll", "Nate"),
  ("Angels Crest", "Thomas Dekker", "Ethan"),
  ("Angels Crest", "Mira Sorvino", "Angie"),
  ("The Iron Lady", "Meryl Streep", "Margaret Thatcher"),
  ("The Iron Lady", "Jim Boradbent", "Denis Thatcher"),
  ("Loosies", "Peter Facinelli", "Bobby"),
  ("Loosies", "Jaimie Alexander", "Lucy"),
  ("Loosies", "Michael Madsen", "Sully"),
  ("The Devil Inside", "Fernanda Andrade", "Isabella Rossi"),
  ("The Devil Inside", "Simon Quarterman", "Ben"),
  ("The Devil Inside", "Evan Helmuth", "David"),
  ("Beneath the Darkness", "Dennis Quaid", "Ely"),
  ("Beneath the Darkness", "Tony Oller", "Travis"),
  ("Beneath the Darkness", "Aimee Teagarden", "Abby"),
  ("Roadie", "Ron Eldard", "Jimmy"),
  ("Roadie", "Jill Hennessey", "Nikki"),
  ("Roadie", "Bobby Cannavale", "Randy Stevens"),
  ("The Divide", "Lauren German", "Eva"),
  ("The Divide", "Michael Biehn", "Mickey"),
  ("The Divide", "Milo Ventimiglia", "Josh"),
  ("Joyful Noise", "Dolly Parton", "G.G. Sparrow"),
  ("Joyful Noise", "Queen Latifah", "Vi Rose Hill"),
  ("Joyful Noise", "Keke Palmer", "Olivia Hill"),
  ("Underworld:  Awakening", "Kate Beckinsale", "Selene"),
  ("Underworld:  Awakening", "India Eisley", "Eve"),
  ("Underworld:  Awakening", "Charles Dance", "Thomas"),
  ("Red Tails", "Bryan Cranston", "Maj. William Mortamus"),
  ("Red Tails", "Joshua David", "Ryan"),
  ("Red Tails", "Cuba Gooding Jr.", "Major Emanuelle Stance"),
  ("Coriolanus", "Jessica Chastain", "Virgilia"),
  ("Coriolanus", "Ralph Fiennes", "Caius Martius Coriolanus"),
  ("Coriolanus", "Gerard Butler", "Tullus Aufidius"),
  ("Haywire", "Channing Tatum", "Aaron"),
  ("Haywire", "Michael Fassbender", "Paul"),
  ("Haywire", "Ewan McGregor", "Kenneth"),
  ("Haywire", "Michael Douglas", "Coblenz"),
  ("16-Love", "lindsey Shaw", "Ally Mash"),
  ("16-Love", "Chandler Massey", "Farrell Gambles"),
  ("16-Love", "Keith Coulouris", "Dave Mash"),
  ("One For the Money", "Katherine Heigl", "Stephanie Plum"),
  ("One For the Money", "Jason O'Mara", "Joe Morelli"),
  ("One For the Money", "John Leguizamo", "Jimmy Alpha"),
  ("One For the Money", "Daniel Sunjata", "Ranger"),
  ("One For the Money", "Debbie Reynolds", "Grandma Mazur"),
  ("The Grey", "Liam Neeson", "Ottway"),
  ("The Grey", "Dermot Mulroney", "Talget"),
  ("The Grey", "Frank Grillo", "Diaz"),
  ("Touchback", "Brian Presley", "Scott Murphy"),
  ("Touchback", "Kurt Russell", "Coach Hand"),
  ("Touchback", "Melanie Lynsky", "Macy"),
  ("The Woman in Black", "Daniel Radcliffe", "Arthur Kipps"),
  ("The Woman in Black", "Ciaran Hinds", "Mr. Daily"),
  ("The Woman in Black", "Shaun Dooley", "Fisher"),
  ("The Innkeepers", "Sara Paxton", "Claire"),
  ("The Innkeepers", "Pat Healy", "Luke"),
  ("The Innkeepers", "Kelly McGillis", "Leane Rease-Jones"),
  ("The Innkeepers", "George Riddle", "Old Man"),
  ("Big Miracle", "Drew Barrymore", "Rachel Kramer"),
  ("Journey 2:  The Mysterious Island", "Josh Hutcherson", "Sean Anderson"),
  ("Journey 2:  The Mysterious Island", "Dwayne Johnson", "Hank Parsons"),
  ("Journey 2:  The Mysterious Island", "Vanessa Hudgens", "Kailani"),
  ("Journey 2:  The Mysterious Island", "Michael Caine", "Grandfather"),
  ("Safe House", "Ryan Reynolds", "Mark Weston"),
  ("Safe House", "Denzel Washington", "Tobin Frost"),
  ("The Vow", "Rachel McAdams", "Paige"),
  ("The Vow", "Channing Tatum", "Leo"),
  ("Perfect Sense", "Ewan McGregor", "Michael"),
  ("Perfect Sense", "Eva Green", "Susan"),
  ("Ghost Rider:  Spirit of Vengeance", "Nicholas Cage", "Johnny Blaze"),
  ("Ghost Rider:  Spirit of Vengeance", "Nicholas Cage", "Ghost Rider"),
  ("Ghost Rider:  Spirit of Vengeance", "Idris Elba", "Moreau"),
  ("Ghost Rider:  Spirit of Vengeance", "Ciaran Hinds", "The Devil"),
  ("This Means War", "Reese Witherspoon", "Lauren"),
  ("The Secret World of Arrietty", "Mirai Shida", "Arrietty"),
  ("The Secret World of Arrietty", "Ry�nosuke Kamiki", "Sho"),
  ("The Secret World of Arrietty", "hinobu Ohtake", "Homily"),
  ("Act of Valor", "Timothy Gibbs", "J.C. Palmer"),
  ("Wanderlust", "Jennifer Aniston", "Linda"),
  ("Wanderlust", "Malin Akerman", "Eva"),
  ("Wanderlust", "Paul Rudd", "George"),
  ("Good Deeds", "Thandie Newton", "Lindsey"),
  ("Good Deeds", "Rebecca Romijn", "Heidi"),
  ("Good Deeds", "Tyler Perry", "Wesley Deeds"),
  ("Good Deeds", "Gabrielle Union", "Natalie"),
  ("Playback", "Christian Slater", "Frank Lyons"),
  ("Playback", "Alessandra Torresani", "Brianna"),
  ("Playback", "Johnny Pacar", "Julian"),
  ("Hansel and Gretel:  Witch Hunters", "Jeremy Renner", "Hansel"),
  ("Hansel and Gretel:  Witch Hunters", "Gemma Arterton", "Gretel"),
  ("Hansel and Gretel:  Witch Hunters", "Famke Janssen", "Muriel"),
  ("Project X", "Thomas Mann", "Thomas"),
  ("Project X", "Jonathan Daniel Brown", "J.B."),
  ("Project X", "Oliver Cooper", "Costa"),
  ("Dr. Seuss' The Lorax", "Zac Efron", "Ted"),
  ("Dr. Seuss' The Lorax", "Taylor Swift", "Audrey"),
  ("Dr. Seuss' The Lorax", "Betty White", "Norma"),
  ("Dr. Seuss' The Lorax", "Ed Helms", "Once-ler"),
  ("Dr. Seuss' The Lorax", "Danny DeVito", "The Lorax"),
  ("Jeff Who Lives at Home", "Jason Segel", "Jeff"),
  ("Jeff Who Lives at Home", "Judy Greer", "Linda"),
  ("Jeff Who Lives at Home", "Ed Helms", "Pat"),
  ("Jeff Who Lives at Home", "Susan Sarandon", "Sharon"),
  ("Being Flynn", "Robert De Niro", "Jonathan"),
  ("Being Flynn", "Julianne Moore", "Jodie Flynn"),
  ("Being Flynn", "Olivia Thirlby", "Denise"),
  ("Being Flynn", "Paul Dano", "Nick Flynn"),
  ("John Carter", "Bryan Cranston", "Powell"),
  ("John Carter", "Mark Strong", "Matai"),
  ("John Carter", "Taylor Kitsch", "John Carter"),
  ("John Carter", "Ciaran Hinds", "Tardos"),
  ("The Raven", "Alice Eve", "Emily"),
  ("The Raven", "John Cusack", "Edgar Allen Poe"),
  ("Silent House", "Elizabeth Olsen", "Sarah"),
  ("Silent House", "Adam Trese", "John"),
  ("Silent House", "Eric Sheffer Stevens", "Peter"),
  ("Think Like a Man", "Chris Brown", "Alex"),
  ("Playing the Field", "Jessica Biel", "Stacie"),
  ("Playing the Field", "Gerard Butler", "George"),
  ("Salmon Fishing in the Yemen", "Ewan McGregor", "Fred Jones"),
  ("Salmon Fishing in the Yemen", "Emily Blunt", "Harriet Chetwode-Talbot"),
  ("Salmon Fishing in the Yemen", "Kristin Scott Thomas", "Bridget Maxwell"),
  ("Footnote", "Lior Ashkenazi", "Uriel Shkolnik"),
  ("Footnote", "Shlomo Bar-Aba", "Eliezer Shkolnik"),
  ("Footnote", "Yuval Scharf", "Noa the Reporter"),
  ("Jiro Dreams of Sushi", "Jiro Ono", "Himself"),
  ("Jiro Dreams of Sushi", "Sukiyabashi Ono", "Himself"),
  ("21 Jump Street", "Johnny Depp", "Tom Hanson"),
  ("21 Jump Street", "Channing Tatum", "Jenko"),
  ("21 Jump Street", "Jonah Hill", "Schmidt"),
  ("Mirror Mirror", "Julia Roberts", "Evil Queen"),
  ("Mirror Mirror", "Lily Collins", "Snow White"),
  ("Mirror Mirror", "Armie Hammer", "Prince Andrew Alcott"),
  ("Seeking Justice", "Nicolas Cage", "Will Gerard"),
  ("Seeking Justice", "January Jones", "Laura Gerard"),
  ("Seeking Justice", "Guy Pearce", "Simon"),
  ("Butter", "Olivia Wilde", "Brooke Swinkowski"),
  ("Butter", "Hugh Jackman", "Boyd Bolton"),
  ("Butter", "Ashley Greene", "Kaitlen Pickler"),
  ("Butter", "Jennifer Garner", "Laura Pickler"),
  ("Butter", "Alicia Silverstone", "Julie Emmet"),
  ("Casa de Mi Padre", "Will Ferrell", "Armando Alvarez"),
  ("Casa de Mi Padre", "Gael Garc�a Bernal", "Onza"),
  ("Casa de Mi Padre", "Diego Luna", "Raul"),
  ("The Hunger Games", "Jennifer Lawrence", "Katniss Everdeen"),
  ("The Hunger Games", "Josh Hutcherson", "Peeta Mellark"),
  ("A Thousand Words", "Eddie Murphy", "Jack McCall"),
  ("Wrath of the Titans", "Liam Neeson", "Zeus"),
  ("Wrath of the Titans", "Sam Worthington", "Perseus"),
  ("Wrath of the Titans", "Ralph Fiennes", "Hades"),
  ("The Deep Blue Sea", "Rachel Weisz", "Hester Collyer"),
  ("The Deep Blue Sea", "Tom Hiddleston", "Freddie Page"),
  ("Goon", "Seann William Scott", "Doug Glatt"),
  ("Goon", "Alisonn Pill", "Eva"),
  ("Goon", "Liev Schreiber", "Ross Rhea"),
  ("Snowtown", "Lucas Pittaway", "Jamie Vlassakis"),
  ("Snowtown", "Daniel Henshall", "John Bunting"),
  ("Dorothy of Oz", "Lea Michele", "Dorothy"),
  ("Dorothy of Oz", "Patrick Stewart", "Tugg"),
  ("Dorothy of Oz", "Hugh Dancy", "Marshall Mallow"),
  ("Dorothy of Oz", "Dan Ackroyd", "Scarecrow"),
  ("Dorothy of Oz", "Kelsey Grammer", "Tin Man"),
  ("Dorothy of Oz", "James Belushi", "Lion"),
  ("Intruders", "Clive Owen", "John Farrow"),
  ("Intruders", "Carice von Houten", "Susanna"),
  ("Intruders", "Daniel Bruhl", "Father Antonio"),
  ("Iron Sky", "Julia Dietze", "Renate Richter"),
  ("Iron Sky", "Christopher Kirby", "James Washington"),
  ("American Reunion", "Alyson Hannigan", "Michelle Flaherty-Levenstein"),
  ("American Reunion", "Seann William Scott", "Steve Stifler"),
  ("American Reunion", "Katrina Bowden", "Mia"),
  ("Damsels in Distress", "Greta Gerwig", "Violet"),
  ("Damsels in Distress", "Adam Brody", "Charlie"),
  ("Damsels in Distress", "Analeigh Tipton", "Lily"),
  ("The Cold Light of Day", "Bruce Willis", "Martin"),
  ("The Cold Light of Day", "Henry Cavill", "Will Shaw"),
  ("The Three Stooges", "Sophia Vergara", "Lydia"),
  ("The Three Stooges", "Jane Lynch", "Mother Superior"),
  ("The Three Stooges", "Sean Hayes", "Larry"),
  ("The Three Stooges", "Chris Diamontopoulos", "Moe"),
  ("The Three Stooges", "Will Sasso", "Curly"),
  ("The Cabin In The Woods", "Richard Jenkins", "Steve Hadley"),
  ("The Cabin In The Woods", "Bradley Whitford", "Richard Sitterson"),
  ("Bullet To The Head", "Sylvester Stallone", "Jimmy Bobo"),
  ("Bullet To The Head", "Jason Momoa", "Keegan"),
  ("Bullet To The Head", "Christian Slater", "Marcus Baptiste"),
  ("Scary Movie 5", "Anna Faris", "Cindy Campbell"),
  ("Scary Movie 5", "Anthony Anderson", "Mahalik"),
  ("Scary Movie 5", "Regina Hall", "Brenda Meeks"),
  ("House at the End of the Street", "Jennifer Lawrence", "Elissa"),
  ("House at the End of the Street", "Elisabeth Shue", "Sarah"),
  ("Seeking a Friend for the End of the World", "Keira Knightley", "Penny"),
  ("Seeking a Friend for the End of the World", "Steve Carell", "Dodge"),
  ("Seeking a Friend for the End of the World", "Connie Britton", "Diane"),
  ("The Lucky One", "Zac Efron", "Logan Thibault"),
  ("The Lucky One", "Taylor Schilling", "Beth Clayton"),
  ("The Lucky One", "Blythe Danner", "Nana"),
  ("Darling Companion", "Diane Keaton", "Beth Winter"),
  ("Darling Companion", "Kevin Kline", "Joseph Winter"),
  ("Darling Companion", "Dianne Wiest", "Penny Alexander"),
  ("Darling Companion", "Richard Jenkins", "Russell"),
  ("The Five-Year Engagement", "Jason Segel", "Tom Solomon"),
  ("The Five-Year Engagement", "Emily Blunt", "Violet Barnes"),
  ("Safe", "Jason Statham", "Luke Wright"),
  ("Safe", "Anson Mount", "Alex Rosen"),
  ("Safe", "Catherine Chan", "Mei"),
  ("The Avengers", "Jeremy Renner", "Clint"),
  ("The Avengers", "Jeremy Renner", "Hawkeye"),
  ("The Avengers", "Robert Downey", "Tony Stark"),
  ("The Avengers", "Robert Downey", "Ironman"),
  ("The Avengers", "Scarlett Johansson", "Natasha"),
  ("The Avengers", "Scarlett Johansson", "Black Widow"),
  ("The Avengers", "Chris Evans", "Captain America"),
  ("The Avengers", "Chris Hemsworth", "Thor"),
  ("The Avengers", "Mark Ruffalo", "Bruce Banner"),
  ("The Avengers", "Mark Ruffalo", "Hulk"),
  ("The Avengers", "Clark Gregg", "Phil Coulson"),
  ("The Avengers", "Samuel L. Jackson", "Nick Fury"),
  ("The Avengers", "Cobie Smulders", "Maria Hill"),
  ("The Avengers", "Tom Hiddleston", "Loki"),
  ("The Best Exotic Marigold Hotel", "Maggie Smith", "Muriel"),
  ("The Best Exotic Marigold Hotel", "Bill Nighy", "Douglas"),
  ("The Best Exotic Marigold Hotel", "Judi Dench", "Evelyn"),
  ("Dark Shadows", "Johnny Depp", "Barnabas Collins"),
  ("Dark Shadows", "Eva Green", "Angelique Bouchard"),
  ("Dark Shadows", "Michelle Pfeiffer", "Elizabeth Collins Stoddard"),
  ("The Dictator", "Megan Fox", "Herself"),
  ("The Dictator", "Sacha Baron Cohen", "General Aladeen"),
  ("What to Expect When You're Expecting", "Elizabeth Banks", "Wendy"),
  ("What to Expect When You're Expecting", "Anna Kendrick", "Rosie"),
  ("What to Expect When You're Expecting", "Cameron Diaz", "Jules"),
  ("What to Expect When You're Expecting", "Dennis Quaid", "Ramsey"),
  ("Battleship", "Liam Neeson", "Admiral Shane"),
  ("Battleship", "Alexander Skarsgard", "Stone Hopper"),
  ("Battleship", "Taylor Kitsch", "Alex Hopper"),
  ("Battleship", "Brooklyn Decker", "Samantha"),
  ("Men In Black III", "Will Smith", "Agent J"),
  ("Men In Black III", "Tommy Lee Jones", "Agent K"),
  ("Men In Black III", "Josh Brolin", "Young Agent K"),
  ("Men In Black III", "Alice Eve", "Young Agent Oh"),
  ("Men In Black III", "Emma Thompson", "Oh"),
  ("Men In Black III", "Rip Torn", "Zed"),
  ("Brave", "Kelly Macdonald", "Princess"),
  ("Brave", "Emma Thompson", "Queen"),
  ("Brave", "Kevin McKidd", "Lord MacGuffin"),
  ("G.I. Joe:  Retaliation", "Channing Tatum", "Captain Duke Hauser"),
  ("G.I. Joe:  Retaliation", "Bruce Willis", "Joe Colton"),
  ("G.I. Joe:  Retaliation", "Dwayne Johnson", "Roadblock"),
  ("Snow White and the Huntsman", "Kristen Stewart", "Snow White"),
  ("Snow White and the Huntsman", "Chris Hemsworth", "The Hunstman"),
  ("Snow White and the Huntsman", "Charlize Theron", "Queen"),
  ("Titanic in 3D", "Leonardo DiCaprio", "Jack Dawson"),
  ("Titanic in 3D", "Kate Winslet", "Rose"),
  ("Titanic in 3D", "Billy Zane", "Caledon"),
  ("The Dark Knight Rises", "Tom Hardy", "Bane"),
  ("The Dark Knight Rises", "Liam Neeson", "Ghul"),
  ("The Dark Knight Rises", "Joseph Gordon", "John Blake"),
  ("The Dark Knight Rises", "Gary Oldman", "Jim Gordon"),
  ("The Dark Knight Rises", "Chrtian Bale", "Bruce Wayne"),
  ("The Dark Knight Rises", "Christian Bale", "Batman"),
  ("The Dark Knight Rises", "Anne Hathaway", "Selina Kyle"),
  ("The Dark Knight Rises", "Anne Hathaway", "Catwoman"),
  ("The Amazing Spider-man", "Emma Stone", "Gwen Stacy"),
  ("The Amazing Spider-man", "Andrew Garfield", "Peter Parker"),
  ("The Amazing Spider-man", "Andrew Garfield", "Spider-Man"),
  ("The Amazing Spider-man", "Rhys Ifans", "Curt Connors"),
  ("The Amazing Spider-man", "Rhys Ifans", "The Lizard"),
  ("The Amazing Spider-man", "Martin Sheen", "Ben Parker"),
  ("Man on a Ledge", "Elizabeth Banks", "Lydia"),
  ("Man on a Ledge", "Sam Worthington", "Nick"),
  ("Man on a Ledge", "Jamie Bell", "Joey"),
  ("Man on a Ledge", "Edward Burns", "Jack Dougherty"),
  ("Man on a Ledge", "Ed Harris", "David Englander")
);
$ME_Movies2Star2Role_Map = TableScan("ME_Movies2Star2Role_Map");
CreateTable("ME_LA_PopulousNonUSCitiesToCountry",
  (
    "city" => "Text",
    "country" => "Text"
  ),
  ("AACHEN", "GERMANY"),
  ("AALBORG", "DENMARK"),
  ("AARGAU", "SWITZERLAND"),
  ("ĀBADAN", "IRAN"),
  ("ABAKALIKI", "NIGERIA"),
  ("ABAKAN", "RUSSIA"),
  ("ABA", "NIGERIA"),
  ("ABBOTSFORD", "CANADA"),
  ("ABENGOUROU", "IVORY COAST"),
  ("ABEOKUTA", "NIGERIA"),
  ("ABERDEENSHIRE", "UNITED KINGDOM"),
  ("ABERDEEN", "UNITED KINGDOM"),
  ("ABERPURA", "INDONESIA"),
  ("ABHAR", "IRAN"),
  ("ABHA", "SAUDI ARABIA"),
  ("ABHAYNAGAR", "BANGLADESH"),
  ("ABIA", "NIGERIA"),
  ("ABIDJAN", "IVORY COAST"),
  ("ABIKO", "JAPAN"),
  ("ABKHASIA", "GEORGIA"),
  ("ABOHAR", "INDIA"),
  ("ABO KABIR", "EGYPT"),
  ("ABOMEY-CALAVI", "BENIN"),
  ("ABOTTABAD", "PAKISTAN"),
  ("ABRA", "PHILIPPINES"),
  ("ABRUZZES", "ITALY"),
  ("ABŞERON", "AZERBAIJAN"),
  ("'ABS", "YEMEN"),
  ("ABU DHABI", "UNITED ARAB EMIRATES"),
  ("ABUJA FEDERAL CAPITAL TERRITORY", "NIGERIA"),
  ("ABUJA", "NIGERIA"),
  ("ABYAN", "YEMEN"),
  ("ACAPULCO DE JUÁREZ", "MEXICO"),
  ("ACARIGUA", "VENEZUELA"),
  ("ACCRA", "GHANA"),
  ("ACEH", "INDONESIA"),
  ("ACHALPUR", "INDIA"),
  ("ACHENG", "CHINA"),
  ("ACHHAM", "NEPAL"),
  ("ACHINSK", "RUSSIA"),
  ("AÇORES", "PORTUGAL"),
  ("A CORUÑA", "SPAIN"),
  ("ACRE", "BRAZIL"),
  ("ADAMAOUA", "CAMEROON"),
  ("ADAMAWA", "NIGERIA"),
  ("ADANA", "TURKEY"),
  ("'ADAN", "YEMEN"),
  ("ADAPAZARI", "TURKEY"),
  ("AD-DAH̱ĪLIYAH", "OMAN"),
  ("AD-DALI'", "YEMEN"),
  ("AD̨-D̨ALI'", "YEMEN"),
  ("AD-DAMAZĪN", "SUDAN"),
  ("AD-DAMĪR", "SUDAN"),
  ("AD-DAMMAM", "SAUDI ARABIA"),
  ("AD-DAQAHLĪYAH", "EGYPT"),
  ("ADDIS ABABA", "ETHIOPIA"),
  ("ADDIS ABEBA", "ETHIOPIA"),
  ("ĀDDĪS ĀBEBA", "ETHIOPIA"),
  ("AD-DĪWANĪYAH", "IRAQ"),
  ("AD̨-D̨U'AYN", "SUDAN"),
  ("AD-DUWAYM", "SUDAN"),
  ("ADELAIDE", "AUSTRALIA"),
  ("ADEN", "YEMEN"),
  ("ADILABAD", "INDIA"),
  ("ĀDILABAD", "INDIA"),
  ("ĀDITYAPUR", "INDIA"),
  ("ADIWERNA", "INDONESIA"),
  ("ADIYAMAN", "TURKEY"),
  ("ADO", "NIGERIA"),
  ("ADONI", "INDIA"),
  ("ADRAR", "ALGERIA"),
  ("ADYGEYA", "RUSSIA"),
  ("AFAR", "ETHIOPIA"),
  ("AFLOU", "ALGERIA"),
  ("AFYONKARAHISAR", "TURKEY"),
  ("AGADEZ", "NIGER"),
  ("AGADIR IDA OU TANAN", "MOROCCO"),
  ("AGADIR", "MOROCCO"),
  ("AGARTALA", "INDIA"),
  ("AGARTALA MCL", "INDIA"),
  ("AGBOR", "NIGERIA"),
  ("AĞCABƏDI", "AZERBAIJAN"),
  ("AĞDAM", "AZERBAIJAN"),
  ("AĞDAS", "AZERBAIJAN"),
  ("AGEO", "JAPAN"),
  ("AGNÉBY", "IVORY COAST"),
  ("AGRA", "INDIA"),
  ("ĀGRA", "INDIA"),
  ("AĞRI", "TURKEY"),
  ("AGUALVA-CACÉM", "PORTUGAL"),
  ("AGUASCALIENTES", "MEXICO"),
  ("ÁGUAS LINDAS DE GOIÁS", "BRAZIL"),
  ("AGUSAN DEL NORTE", "PHILIPPINES"),
  ("AGUSAN DEL SUR", "PHILIPPINES"),
  ("AHAIA", "GREECE"),
  ("AHAL", "TURKMENISTAN"),
  ("AHAR", "IRAN"),
  ("AHMADABAD", "INDIA"),
  ("AHMADNAGAR", "INDIA"),
  ("AHMEDABAD", "INDIA"),
  ("AHRWEILER", "GERMANY"),
  ("AHUACHAPÁN", "EL SALVADOR"),
  ("AHVAZ", "IRAN"),
  ("AICHACH-FRIEDBERG", "GERMANY"),
  ("AICHI", "JAPAN"),
  ("AIN BEIDA", "ALGERIA"),
  ("AIN DEFLA", "ALGERIA"),
  ("AIN", "FRANCE"),
  ("AIN M'LILA", "ALGERIA"),
  ("AIN OUSSERA", "ALGERIA"),
  ("AIN TEMOUCHENT", "ALGERIA"),
  ("AISÉN", "CHILE"),
  ("AISNE", "FRANCE"),
  ("AITOLÍA KAI AKARNANÍA", "GREECE"),
  ("AIX-EN-PROVENCE", "FRANCE"),
  ("AIZAWL", "INDIA"),
  ("ĀĪZAWL", "INDIA"),
  ("AIZUWAKAMATSU", "JAPAN"),
  ("AJARIA", "GEORGIA"),
  ("'AJLŪN", "JORDAN"),
  ("'AJMAN", "UNITED ARAB EMIRATES"),
  ("AJMER", "INDIA"),
  ("AKASHI", "JAPAN"),
  ("AKERSHUS", "NORWAY"),
  ("AKHARNAÍ", "GREECE"),
  ("AKHISAR", "TURKEY"),
  ("AKHMIM", "EGYPT"),
  ("AKISHIMA", "JAPAN"),
  ("AKITA", "JAPAN"),
  ("AKLAN", "PHILIPPINES"),
  ("AKMECHET", "KAZAKHSTAN"),
  ("AKOLA", "INDIA"),
  ("AKSARAY", "TURKEY"),
  ("AKSU", "CHINA"),
  ("AKTAŪ", "KAZAKHSTAN"),
  ("AKURE", "NIGERIA"),
  ("AKWA IBOM", "NIGERIA"),
  ("AKYAB", "MYANMAR"),
  ("ALACANT", "SPAIN"),
  ("ALAGOAS", "BRAZIL"),
  ("ALAGOINHAS", "BRAZIL"),
  ("AL-AH̨MADĪ", "KUWAIT"),
  ("ALAJUELA", "COSTA RICA"),
  ("AL-'AMARAH", "IRAQ"),
  ("AL-ANBAR", "IRAQ"),
  ("ALANDUR", "INDIA"),
  ("ALAPPUZHA", "INDIA"),
  ("AL-'AQABAH", "JORDAN"),
  ("AL-'ĀŞAMAH", "KUWAIT"),
  ("ÁLAVA", "SPAIN"),
  ("AL-'AYN", "UNITED ARAB EMIRATES"),
  ("AL-'AYŪN", "WESTERN SAHARA"),
  ("AL-BAB", "SYRIA"),
  ("ALBACETE", "SPAIN"),
  ("AL-BAH̨AH", "SAUDI ARABIA"),
  ("AL-BAH̨R-AL-AH̨MAR", "EGYPT"),
  ("AL-BAH̨R-AL-AH̨MAR", "SUDAN"),
  ("AL-BALQA'", "JORDAN"),
  ("ALBA", "ROMANIA"),
  ("AL-BAŞRAH", "IRAQ"),
  ("AL-BAŢINAH", "OMAN"),
  ("AL-BAYDA", "YEMEN"),
  ("ALBAY", "PHILIPPINES"),
  ("ALB-DONAU-KREIS", "GERMANY"),
  ("ALBERTA", "CANADA"),
  ("ALBERTON", "SOUTH AFRICA"),
  ("AL-BIQA'A", "LEBANON"),
  ("AL-BURAYMI", "OMAN"),
  ("AL-BUŢNAN", "LIBYA"),
  ("ALCALÁ DE HENARES", "SPAIN"),
  ("ALCHEVS'K", "UKRAINE"),
  ("ALCOBENDAS", "SPAIN"),
  ("ALCORCÓN", "SPAIN"),
  ("ALENTEJO", "PORTUGAL"),
  ("ALEPPO", "SYRIA"),
  ("ALEXANDRIA", "EGYPT"),
  ("AL-FALLŪJAH", "IRAQ"),
  ("AL-FARWANĪYAH", "KUWAIT"),
  ("AL-FAŠIR", "SUDAN"),
  ("AL-FUJAYRAH", "UNITED ARAB EMIRATES"),
  ("ALGARVE", "PORTUGAL"),
  ("ALGECIRAS", "SPAIN"),
  ("ALGIERS", "ALGERIA"),
  ("AL-H̨ADA'", "YEMEN"),
  ("AL-H̨ALĪ", "YEMEN"),
  ("AL HAOUZ", "MOROCCO"),
  ("AL-H̱ARJ", "SAUDI ARABIA"),
  ("AL-H̱ARŢŪM BAH̨RĪ", "SUDAN"),
  ("AL-H̨ASAKAH", "SYRIA"),
  ("AL-HAWAK", "YEMEN"),
  ("AL-H̨AWAMIDIYAH", "EGYPT"),
  ("AL-H̨AWĪYAH", "SAUDI ARABIA"),
  ("AL-H̨ILLAH", "IRAQ"),
  ("AL HOCEIMA", "MOROCCO"),
  ("AL-H̱UBAR", "SAUDI ARABIA"),
  ("AL-H̨UDAYDAH", "YEMEN"),
  ("AL-H̨UDŪD-AŠ-ŠAMALĪYAH", "SAUDI ARABIA"),
  ("AL-HUFŪF", "SAUDI ARABIA"),
  ("ALĪABAD", "IRAN"),
  ("'ĀLĪ", "BAHRAIN"),
  ("ALIBORI", "BENIN"),
  ("ALIGARH", "INDIA"),
  ("ALĪGARH", "INDIA"),
  ("ALĪGŪDARZ", "IRAN"),
  ("ALIRAJPUR", "INDIA"),
  ("AL-JABAL AL-AH̱D̨AR", "LIBYA"),
  ("AL-JABAL AL-GARBĪ", "LIBYA"),
  ("AL-JABĪN", "YEMEN"),
  ("AL-JAHRA'", "KUWAIT"),
  ("AL-JANUB", "LEBANON"),
  ("AL-JARRAH̨Ī", "YEMEN"),
  ("AL-JAWF", "SAUDI ARABIA"),
  ("AL-JAWF", "YEMEN"),
  ("AL-JAZĪRAH", "SUDAN"),
  ("AL-JIFARAH", "LIBYA"),
  ("AL-JUBAYHAH", "JORDAN"),
  ("AL-JUBAYL", "SAUDI ARABIA"),
  ("AL-JUNAYNAH", "SUDAN"),
  ("AL-KAF", "TUNISIA"),
  ("AL-KARAK", "JORDAN"),
  ("ALKMAAR", "NETHERLANDS"),
  ("AL-KŪT", "IRAQ"),
  ("AL-LAĐIQĪYAH", "SYRIA"),
  ("ALLAHABAD", "INDIA"),
  ("ALLIER", "FRANCE"),
  ("AL-LUHIYAH", "YEMEN"),
  ("AL-MA'AFIR", "YEMEN"),
  ("AL-MADĪNAH", "SAUDI ARABIA"),
  ("AL-MAFRAQ", "JORDAN"),
  ("AL-MAH̱ADIR", "YEMEN"),
  ("AL-MAHDĪYAH", "TUNISIA"),
  ("AL-MAHRAH", "YEMEN"),
  ("AL-MAHWIT", "YEMEN"),
  ("AL-MANAQIL", "SUDAN"),
  ("AL-MANŞU-RAH", "YEMEN"),
  ("AL-MARAWI'AH", "YEMEN"),
  ("AL-MARJ", "LIBYA"),
  ("AL-MARQAB", "LIBYA"),
  ("AL-MAŠANNAH", "YEMEN"),
  ("ALMATY", "KAZAKHSTAN"),
  ("AL-MAWASIŢ", "YEMEN"),
  ("AL-MAWŞIL", "IRAQ"),
  ("ALMERE", "NETHERLANDS"),
  ("ALMERÍA", "SPAIN"),
  ("ALMETYEVSK", "RUSSIA"),
  ("AL-MĪNA'", "YEMEN"),
  ("ALMIRANTE BROWN", "ARGENTINA"),
  ("ALMIRANTE TAMANDARÉ", "BRAZIL"),
  ("AL-MISRAH̱", "YEMEN"),
  ("ALMORA", "INDIA"),
  ("AL-MUBARRAZ", "SAUDI ARABIA"),
  ("AL-MUH̨ARRAQ", "BAHRAIN"),
  ("AL-MUKALLA", "YEMEN"),
  ("AL-MUNASTĪR", "TUNISIA"),
  ("AL-MUṮANNA", "IRAQ"),
  ("AL-MUZ̨AFFIR", "YEMEN"),
  ("ALOR SETAR", "MALAYSIA"),
  ("ALPES-DE-HAUTE-PROVENCE", "FRANCE"),
  ("ALPES-MARITIMES", "FRANCE"),
  ("AL-QABBAYŢAH", "YEMEN"),
  ("AL-QAD̨ARIF", "SUDAN"),
  ("AL-QADISIYAH", "IRAQ"),
  ("AL-QAFR", "YEMEN"),
  ("AL-QAHIRAH", "YEMEN"),
  ("AL-QALYŪBIYAH", "EGYPT"),
  ("AL-QAMIŠLĪ", "SYRIA"),
  ("AL-QAŞĪM", "SAUDI ARABIA"),
  ("AL-QAŞRAYN", "TUNISIA"),
  ("AL-QAYRAWAN", "TUNISIA"),
  ("AL-QURAYN", "KUWAIT"),
  ("AL-QURAYYAT", "SAUDI ARABIA"),
  ("AL-QUWAYSIMAH", "JORDAN"),
  ("ALSACE", "FRANCE"),
  ("ALTAI REPUBLIC", "RUSSIA"),
  ("ALTAISKI KRAY", "RUSSIA"),
  ("ALTA VERAPAZ", "GUATEMALA"),
  ("ALTAY", "CHINA"),
  ("ALTENKIRCHEN", "GERMANY"),
  ("ALTO HOSPICIO", "CHILE"),
  ("ALTO PARANÁ", "PARAGUAY"),
  ("ALTÖTTING", "GERMANY"),
  ("AL-UBAYYID̨", "SUDAN"),
  ("AL-'UDAYN", "YEMEN"),
  ("ALVORADA", "BRAZIL"),
  ("AL-WADI AL-JADID", "EGYPT"),
  ("AL-WAH̨AT", "LIBYA"),
  ("AL-WAH̨DAH", "YEMEN"),
  ("ALWAL", "INDIA"),
  ("ALWAR", "INDIA"),
  ("ALYTAUS", "LITHUANIA"),
  ("ALZEY-WORMS", "GERMANY"),
  ("AMADORA", "PORTUGAL"),
  ("AMAGASAKI", "JAPAN"),
  ("AMALNER", "INDIA"),
  ("AMAMBAY", "PARAGUAY"),
  ("AMANAH AL-'ĀŞMAH", "YEMEN"),
  ("AMAPÁ", "BRAZIL"),
  ("AMASYA", "TURKEY"),
  ("AMATITLÁN", "GUATEMALA"),
  ("AMAZONAS", "BRAZIL"),
  ("AMAZONAS", "PERU"),
  ("AMBALA", "INDIA"),
  ("AMBALA SADAR", "INDIA"),
  ("AMBATO", "ECUADOR"),
  ("AMBATTUR", "INDIA"),
  ("AMBEDKAR NAGAR", "INDIA"),
  ("AMBERG-SULZBACH", "GERMANY"),
  ("AMBON", "INDONESIA"),
  ("ĀMBŪR", "INDIA"),
  ("AMERICANA", "BRAZIL"),
  ("AMERSFOORT", "NETHERLANDS"),
  ("AMHARA", "ETHIOPIA"),
  ("AMIENS", "FRANCE"),
  ("'AMMAN", "JORDAN"),
  ("AMMERLAND", "GERMANY"),
  ("AMNAT CHAROEN", "THAILAND"),
  ("ĀMOL", "IRAN"),
  ("AMPANG JAYA", "MALAYSIA"),
  ("AMPARAI", "SRI LANKA"),
  ("'AMRAN", "YEMEN"),
  ("AMRAN", "YEMEN"),
  ("AMRAVATI", "INDIA"),
  ("AMRELI", "INDIA"),
  ("AMRITSAR", "INDIA"),
  ("AMROHA", "INDIA"),
  ("AMSTERDAM", "NETHERLANDS"),
  ("AMUR", "RUSSIA"),
  ("ANACO", "VENEZUELA"),
  ("ANAMBRA", "NIGERIA"),
  ("ANAND", "INDIA"),
  ("ĀNAND", "INDIA"),
  ("ANANINDEUA", "BRAZIL"),
  ("ANANTAPUR", "INDIA"),
  ("ANANTNAG", "INDIA"),
  ("ANÁPOLIS", "BRAZIL"),
  ("ANBARABAD", "IRAN"),
  ("ANBU", "CHINA"),
  ("ANCASH", "PERU"),
  ("ANCONA", "ITALY"),
  ("ANDA", "CHINA"),
  ("ANDALUSIA", "SPAIN"),
  ("ANDAMAN AND NICOBAR ISLANDS", "INDIA"),
  ("ANDHRA PRADESH", "INDIA"),
  ("ANDIJON", "UZBEKISTAN"),
  ("ANDIMESHK", "IRAN"),
  ("ANDĪMESHK", "IRAN"),
  ("ANDONG", "SOUTH KOREA"),
  ("ANDRIA", "ITALY"),
  ("ANGARSK", "RUSSIA"),
  ("ANGERS", "FRANCE"),
  ("AN GIANG", "VIETNAM"),
  ("ANGONO", "PHILIPPINES"),
  ("ANGRA DOS REIS", "BRAZIL"),
  ("AŅGREN", "UZBEKISTAN"),
  ("ANG THONG", "THAILAND"),
  ("ANGUS", "UNITED KINGDOM"),
  ("ANHUI", "CHINA"),
  ("ANJO", "JAPAN"),
  ("ANKANG", "CHINA"),
  ("ANKARA", "TURKEY"),
  ("ANNABA", "ALGERIA"),
  ("AN-NABATIYAH", "LEBANON"),
  ("AN-NAJAF", "IRAQ"),
  ("AN-NAŞIRĪYAH", "IRAQ"),
  ("AN-NĪL-AL-ABYAD̨", "SUDAN"),
  ("AN-NĪL-AL-AZRAQ", "SUDAN"),
  ("AN-NUHŪD", "SUDAN"),
  ("AN-NUQAŢ AL-H̱UMS", "LIBYA"),
  ("ANQING", "CHINA"),
  ("ANQIU", "CHINA"),
  ("ANSAN", "SOUTH KOREA"),
  ("ANSEBA", "ERITREA"),
  ("ANSHAN", "CHINA"),
  ("ANSHUN", "CHINA"),
  ("ANSŎNG", "SOUTH KOREA"),
  ("'ANS", "YEMEN"),
  ("ANTAKYA", "TURKEY"),
  ("ANTALYA", "TURKEY"),
  ("ANTANANARIVO", "MADAGASCAR"),
  ("ANTIOQUIA", "COLOMBIA"),
  ("ANTIPOLO", "PHILIPPINES"),
  ("ANTIQUE", "PHILIPPINES"),
  ("ANTOFAGASTA", "CHILE"),
  ("ANTSIRABÉ", "MADAGASCAR"),
  ("ANTSIRANANA", "MADAGASCAR"),
  ("ANTWERP", "BELGIUM"),
  ("ANUGUL", "INDIA"),
  ("ANUPPUR", "INDIA"),
  ("ANURADHAPURA", "SRI LANKA"),
  ("ANYAMA", "IVORY COAST"),
  ("ANYANG", "CHINA"),
  ("ANYANG", "SOUTH KOREA"),
  ("ANZOÁTEGUI", "VENEZUELA"),
  ("AOMEN", "CHINA"),
  ("AOMORI", "JAPAN"),
  ("APARECIDA DE GOIÂNIA", "BRAZIL"),
  ("APARTADÓ", "COLOMBIA"),
  ("APATZINGÁN DE LA CONSTITUCIÓN", "MEXICO"),
  ("APAYAO", "PHILIPPINES"),
  ("APELDOORN", "NETHERLANDS"),
  ("APOPA", "EL SALVADOR"),
  ("APUCARANA", "BRAZIL"),
  ("APULIA", "ITALY"),
  ("APURE", "VENEZUELA"),
  ("APURÍMAC", "PERU"),
  ("AQMOLA", "KAZAKHSTAN"),
  ("ĀQ QALA", "IRAN"),
  ("AQTÖBE", "KAZAKHSTAN"),
  ("AQUITAINE", "FRANCE"),
  ("ARA'AR", "SAUDI ARABIA"),
  ("ARACAJU", "BRAZIL"),
  ("ARAÇATUBA", "BRAZIL"),
  ("ARAD", "ROMANIA"),
  ("ARAGATSOTN", "ARMENIA"),
  ("ARAGON", "SPAIN"),
  ("ARAGUAÍNA", "BRAZIL"),
  ("ARAGUARI", "BRAZIL"),
  ("ARAGUA", "VENEZUELA"),
  ("ARAK", "IRAN"),
  ("ARAN", "AZERBAIJAN"),
  ("ARAPIRACA", "BRAZIL"),
  ("ARAPONGAS", "BRAZIL"),
  ("ARARAQUARA", "BRAZIL"),
  ("ARARAS", "BRAZIL"),
  ("ARARAT", "ARMENIA"),
  ("ARARIA", "INDIA"),
  ("ARARUAMA", "BRAZIL"),
  ("ARAUCA", "COLOMBIA"),
  ("ARAUCANÍA", "CHILE"),
  ("ARAUCÁRIA", "BRAZIL"),
  ("ARAUCO", "CHILE"),
  ("ARAYAT", "PHILIPPINES"),
  ("ARBINDA", "BURKINA FASO"),
  ("ARDABĪL", "IRAN"),
  ("ARDÈCHE", "FRANCE"),
  ("ARDENNES", "FRANCE"),
  ("ARECIBO", "PUERTO RICO"),
  ("AREQUIPA", "PERU"),
  ("ARGENTEUIL", "FRANCE"),
  ("ARGEŞ", "ROMANIA"),
  ("ARGHAKHANCHI", "NEPAL"),
  ("ARH̨AB", "YEMEN"),
  ("ARHANGAJ", "MONGOLIA"),
  ("ÅRHUS", "DENMARK"),
  ("ARICA", "CHILE"),
  ("ARIÈGE", "FRANCE"),
  ("ARIYALUR", "INDIA"),
  ("ARJAWINANGUN", "INDONESIA"),
  ("ARKHANGELSK", "RUSSIA"),
  ("ARLESHEIM", "SWITZERLAND"),
  ("ARLIT", "NIGER"),
  ("ARMAVIR", "ARMENIA"),
  ("ARMAVIR", "RUSSIA"),
  ("ARMENIA", "COLOMBIA"),
  ("ARNHEM", "NETHERLANDS"),
  ("ARRAH", "INDIA"),
  ("AR-RAMADĪ", "IRAQ"),
  ("AR-RAMṮA", "JORDAN"),
  ("AR-RAQQAH", "SYRIA"),
  ("AR-RAŠIDĪYAH", "IRAQ"),
  ("AR-RAWD̨AH", "YEMEN"),
  ("AR-RAYYAN", "QATAR"),
  ("AR-RIFA'A", "BAHRAIN"),
  ("AR-RUŞŞAYFAH", "JORDAN"),
  ("ARTIBONITE", "HAITI"),
  ("ARTVIN", "TURKEY"),
  ("ARTYOM", "RUSSIA"),
  ("ARUNACHAL PRADESH", "INDIA"),
  ("ARUSHA", "TANZANIA"),
  ("ARWAL", "INDIA"),
  ("ARYANAH", "TUNISIA"),
  ("ARZAMAS", "RUSSIA"),
  ("ASABA", "NIGERIA"),
  ("ASADABAD", "IRAN"),
  ("ASAHIKAWA", "JAPAN"),
  ("ASAKA", "JAPAN"),
  ("ASANSOL", "INDIA"),
  ("ASAN", "SOUTH KOREA"),
  ("AŞGABAT", "TURKMENISTAN"),
  ("ASHANTI", "GHANA"),
  ("ASHDOD", "ISRAEL"),
  ("ASHIAMAN", "GHANA"),
  ("ASHIKAGA", "JAPAN"),
  ("ASHOKNAGAR", "INDIA"),
  ("ASHOKNAGAR KALYANGARH", "INDIA"),
  ("ASHQELON", "ISRAEL"),
  ("'ASĪR", "SAUDI ARABIA"),
  ("ĀSMARA", "ERITREA"),
  ("ASNIÈRES-SUR-SEINE", "FRANCE"),
  ("ASSABA", "MAURITANIA"),
  ("AS-SAB'AYN", "YEMEN"),
  ("AS-SAFĪRAH", "SYRIA"),
  ("AŞ-ŞAFIYAH", "YEMEN"),
  ("AS-SALIMIYAH", "KUWAIT"),
  ("AS-SALŢ", "JORDAN"),
  ("AŠ-ŠAMALĪYAH", "SUDAN"),
  ("AŠ-ŠAMAL", "LEBANON"),
  ("AS-SAMAWAH", "IRAQ"),
  ("AŠ-ŠAMAYATAYN", "YEMEN"),
  ("ASSAM", "INDIA"),
  ("AŠ-ŠARQĪYAH", "OMAN"),
  ("AŠ-ŠARQĪYAH", "SAUDI ARABIA"),
  ("AŠ-ŠAYH̱ 'UṮMAN", "YEMEN"),
  ("AS-SAYYANĪ", "YEMEN"),
  ("ĀSSEB", "ERITREA"),
  ("ĀSSELA", "ETHIOPIA"),
  ("AS-SĪB", "OMAN"),
  ("AS-SULAYMANĪYAH", "IRAQ"),
  ("AS-SUWAYDA", "SYRIA"),
  ("AS-SUWAYQ", "OMAN"),
  ("ASTANAJAPURA", "INDONESIA"),
  ("ASTANA", "KAZAKHSTAN"),
  ("ĀSTANEH-YE-ASHRAFIYEH", "IRAN"),
  ("ASTRAKHAN", "RUSSIA"),
  ("ASTURIAS", "SPAIN"),
  ("ASUNCIÓN", "PARAGUAY"),
  ("ASWAN", "EGYPT"),
  ("ASYUT", "EGYPT"),
  ("ATACAMA", "CHILE"),
  ("ATACORA", "BENIN"),
  ("'AŢBARAH", "SUDAN"),
  ("ATHENS", "GREECE"),
  ("ATIBAIA", "BRAZIL"),
  ("ATLÁNTICO", "COLOMBIA"),
  ("ATLÁNTICO NORTE", "NICARAGUA"),
  ("ATLÁNTICO SUR", "NICARAGUA"),
  ("ATLÁNTIDA", "HONDURAS"),
  ("ATLANTIQUE", "BENIN"),
  ("ATSUGI", "JAPAN"),
  ("AT-TAD̨AMAN DAWWAR HĪŠAR", "TUNISIA"),
  ("AŢ-ŢA'ĪF", "SAUDI ARABIA"),
  ("AT-TA'IZIYAH", "YEMEN"),
  ("AT-TA'MĪM", "IRAQ"),
  ("AṮ-ṮAWRAH", "SYRIA"),
  ("AṮ-ṮAWRAH", "YEMEN"),
  ("ATTIKÍ", "GREECE"),
  ("ATTOPU", "LAOS"),
  ("ATYRAU", "KAZAKHSTAN"),
  ("AUBE", "FRANCE"),
  ("AUCKLAND", "NEW ZEALAND"),
  ("AUDE", "FRANCE"),
  ("AUGSBURG", "GERMANY"),
  ("AURAIYA", "INDIA"),
  ("AURANGABAD", "INDIA"),
  ("AURICH", "GERMANY"),
  ("AURORA", "PHILIPPINES"),
  ("AUST-AGDER", "NORWAY"),
  ("AUSTRALIAN CAPITAL TERRITORY", "AUSTRALIA"),
  ("AUVERGNE", "FRANCE"),
  ("AVADI", "INDIA"),
  ("AVELLANEDA", "ARGENTINA"),
  ("AVEYRON", "FRANCE"),
  ("ÁVILA", "SPAIN"),
  ("ĀWASSA", "ETHIOPIA"),
  ("AWDAAL", "SOMALIA"),
  ("AYACUCHO", "PERU"),
  ("AYDIN", "TURKEY"),
  ("AYEYARWADY", "MYANMAR"),
  ("AZAD KASHMIR", "PAKISTAN"),
  ("AZAMGARH", "INDIA"),
  ("AZARBAYEJAN-E GHARBI", "IRAN"),
  ("AZARBAYEJAN-E SHARQI", "IRAN"),
  ("ĀZARSHAHR", "IRAN"),
  ("AZILAL", "MOROCCO"),
  ("AZUA", "DOMINICAN REPUBLIC"),
  ("AZUAY", "ECUADOR"),
  ("AZUMINO", "JAPAN"),
  ("AZ̨-Z̨AHIRAH", "OMAN"),
  ("AZ̨-Z̨AHRAN", "SAUDI ARABIA"),
  ("ĀZZAL", "YEMEN"),
  ("AZ-ZARQA'", "JORDAN"),
  ("AZ-ZAWIYAH", "LIBYA"),
  ("AZ-ZAYDIYAH", "YEMEN"),
  ("AZ̨-Z̨IHAR", "YEMEN"),
  ("AZ-ZUHRAH", "YEMEN"),
  ("BAAKOOL", "SOMALIA"),
  ("BAARII", "SOMALIA"),
  ("BAAY", "SOMALIA"),
  ("BABAKAN", "INDONESIA"),
  ("BABIL", "IRAQ"),
  ("BABOL", "IRAN"),
  ("BABOLSAR", "IRAN"),
  ("BABRUJSK", "BELARUS"),
  ("BACĂU", "ROMANIA"),
  ("BACOLOD", "PHILIPPINES"),
  ("BACOOR", "PHILIPPINES"),
  ("BÁCS-KISKUN", "HUNGARY"),
  ("BADAJOZ", "SPAIN"),
  ("BADAKHSHAN", "AFGHANISTAN"),
  ("BADALONA", "SPAIN"),
  ("BA'DAN", "YEMEN"),
  ("BADAOJIANG", "CHINA"),
  ("BAD DÜRKHEIM", "GERMANY"),
  ("BADEN", "SWITZERLAND"),
  ("BADEN-WÜRTTEMBERG", "GERMANY"),
  ("BADÉ", "TAIWAN"),
  ("BADGAM", "INDIA"),
  ("BADGĪS", "AFGHANISTAN"),
  ("BAD KISSINGEN", "GERMANY"),
  ("BAD KREUZNACH", "GERMANY"),
  ("BADLAPUR", "INDIA"),
  ("BAD TÖLZ-WOLFRATSHAUSEN", "GERMANY"),
  ("BADULLA", "SRI LANKA"),
  ("BAFATÁ", "GUINEA-BISSAU"),
  ("BA", "FIJI ISLANDS"),
  ("BAFING", "IVORY COAST"),
  ("BAFOUSSAM", "CAMEROON"),
  ("BAFT", "IRAN"),
  ("BAGAHA", "INDIA"),
  ("BAGALKOT", "INDIA"),
  ("BAGAR HAŢ", "BANGLADESH"),
  ("BAGDAD", "IRAQ"),
  ("BAGESHWAR", "INDIA"),
  ("BAGHDAD", "IRAQ"),
  ("BAGHEMALEK", "IRAN"),
  ("BAGHPAT", "INDIA"),
  ("BAĠLAN", "AFGHANISTAN"),
  ("BAGLUNG", "NEPAL"),
  ("BAGO", "MYANMAR"),
  ("BAGUIO", "PHILIPPINES"),
  ("BAHADURGARH", "INDIA"),
  ("BAHARAMPUR", "INDIA"),
  ("BAHAR", "IRAN"),
  ("BAHAWALNAGAR", "PAKISTAN"),
  ("BAHAWALPUR", "PAKISTAN"),
  ("BAHÍA BLANCA", "ARGENTINA"),
  ("BAHIA", "BRAZIL"),
  ("BAHIR DAR", "ETHIOPIA"),
  ("BAHRAICH", "INDIA"),
  ("BAIA MARE", "ROMANIA"),
  ("BAICHENG", "CHINA"),
  ("BAIDYABATI", "INDIA"),
  ("BAIJIANTAN", "CHINA"),
  ("BAITADI", "NEPAL"),
  ("BAIYIN", "CHINA"),
  ("BAJA CALIFORNIA", "MEXICO"),
  ("BAJA CALIFORNIA SUR", "MEXICO"),
  ("BAJAH", "TUNISIA"),
  ("BAJAN-ÖLGIJ", "MONGOLIA"),
  ("BAJA VERAPAZ", "GUATEMALA"),
  ("BAJHANG", "NEPAL"),
  ("BAJIL", "YEMEN"),
  ("BAJOS DE HAINA", "DOMINICAN REPUBLIC"),
  ("BAJURA", "NEPAL"),
  ("BAKI", "AZERBAIJAN"),
  ("BAKSA", "INDIA"),
  ("BAKSAN", "RUSSIA"),
  ("BAKU", "AZERBAIJAN"),
  ("BALAGHAT", "INDIA"),
  ("BALAKA", "MALAWI"),
  ("BALAKOVO", "RUSSIA"),
  ("BALANGIR", "INDIA"),
  ("BALANGĪR", "INDIA"),
  ("BALARAJA", "INDONESIA"),
  ("BALASHIKHA", "RUSSIA"),
  ("BALEARIC ISLANDS", "SPAIN"),
  ("BALÉ", "BURKINA FASO"),
  ("BALEENDAH", "INDONESIA"),
  ("BALESHWAR", "INDIA"),
  ("BALH̱", "AFGHANISTAN"),
  ("BALI", "INDONESIA"),
  ("BALIKESIR", "TURKEY"),
  ("BALIKPAPAN", "INDONESIA"),
  ("BALIUAG", "PHILIPPINES"),
  ("BALKANABAT", "TURKMENISTAN"),
  ("BALKAN", "TURKMENISTAN"),
  ("BALLIA", "INDIA"),
  ("BALLY CANTONMENT", "INDIA"),
  ("BALLY", "INDIA"),
  ("BALNEÁRIO CAMBORIÚ", "BRAZIL"),
  ("BALRAMPUR", "INDIA"),
  ("BĂLŢI", "MOLDOVA"),
  ("BALUCHISTAN", "PAKISTAN"),
  ("BALURGHAT", "INDIA"),
  ("BAMAKO", "MALI"),
  ("BAM", "BURKINA FASO"),
  ("BAMENDA", "CAMEROON"),
  ("BAM", "IRAN"),
  ("BAMIYAN", "AFGHANISTAN"),
  ("BANAADIR", "SOMALIA"),
  ("BANAS KANTHA", "INDIA"),
  ("BANDA ACEH", "INDONESIA"),
  ("BANDA", "ARGENTINA"),
  ("BANDA", "INDIA"),
  ("BANDARBAN", "BANGLADESH"),
  ("BANDAR-E 'ABBAS", "IRAN"),
  ("BANDAR-E-ABBAS", "IRAN"),
  ("BANDAR-E ANZALĪ", "IRAN"),
  ("BANDAR-E-ANZALĪ", "IRAN"),
  ("BANDAR-E-LENGEH", "IRAN"),
  ("BANDAR-E MAHSHAHR", "IRAN"),
  ("BANDAR-E-MAHSHAHR", "IRAN"),
  ("BANDAR LAMPUNG", "INDONESIA"),
  ("BANDIPORE", "INDIA"),
  ("BANDIRMA", "TURKEY"),
  ("BANDUNDU", "CONGO"),
  ("BANDUNG", "INDONESIA"),
  ("BANEH", "IRAN"),
  ("BANFORA", "BURKINA FASO"),
  ("BANGALORE", "INDIA"),
  ("BANGALORE RURAL", "INDIA"),
  ("BANGAON", "INDIA"),
  ("BANGAZĪ", "LIBYA"),
  ("BANGKA-BELITUNG", "INDONESIA"),
  ("BANGKOK METROPOLITAN AREA", "THAILAND"),
  ("BANGKOK", "THAILAND"),
  ("BANGLA", "INDIA"),
  ("BANGUI", "CENTRAL AFRICAN REPUBLIC"),
  ("BANĪ AL-H̨ARIṮ", "YEMEN"),
  ("BANÍ", "DOMINICAN REPUBLIC"),
  ("BANĪ MAŢAR", "YEMEN"),
  ("BANJA LUKA", "BOSNIA AND HERZEGOVINA"),
  ("BANJARAN", "INDONESIA"),
  ("BANJARBARU", "INDONESIA"),
  ("BANJAR", "INDONESIA"),
  ("BANJARMASIN", "INDONESIA"),
  ("BANKA", "INDIA"),
  ("BANKE", "NEPAL"),
  ("BANKURA", "INDIA"),
  ("BĂNQIÁO", "TAIWAN"),
  ("BANSBARIA", "INDIA"),
  ("BANSKÁ BYSTRICA", "SLOVAKIA"),
  ("BANSKOBYSTRICKÝ", "SLOVAKIA"),
  ("BANSWARA", "INDIA"),
  ("BANTEAY MEAN CHEY", "CAMBODIA"),
  ("BANTEN", "INDONESIA"),
  ("BANTOU", "CHINA"),
  ("BANWA", "BURKINA FASO"),
  ("BANYUWANGI", "INDONESIA"),
  ("BAODING", "CHINA"),
  ("BAOJI", "CHINA"),
  ("BAOSHAN", "CHINA"),
  ("BAOTOU", "CHINA"),
  ("BA'QŪBAH", "IRAQ"),
  ("BARABAI", "INDONESIA"),
  ("BARA BANKI", "INDIA"),
  ("BARAHONA", "DOMINICAN REPUBLIC"),
  ("BARAKALDO", "SPAIN"),
  ("BARAMULA", "INDIA"),
  ("BARAMŪLA", "INDIA"),
  ("BARANAGAR", "INDIA"),
  ("BARANAVIČY", "BELARUS"),
  ("BARA", "NEPAL"),
  ("BARAN", "INDIA"),
  ("BARANYA", "HUNGARY"),
  ("BARAUT", "INDIA"),
  ("BÀ RỊA - VŨNG TÀU", "VIETNAM"),
  ("BARBACENA", "BRAZIL"),
  ("BARBERTON", "SOUTH AFRICA"),
  ("BARCELONA", "SPAIN"),
  ("BARCELONA", "VENEZUELA"),
  ("BARDDHAMAN", "INDIA"),
  ("BARDIYA", "NEPAL"),
  ("BAREILLY", "INDIA"),
  ("BARELI", "INDIA"),
  ("BARGARH", "INDIA"),
  ("BARGUNA", "BANGLADESH"),
  ("BARI", "ITALY"),
  ("BARIKA", "ALGERIA"),
  ("BARILOCHE", "ARGENTINA"),
  ("BARINAS", "VENEZUELA"),
  ("BARIPADA", "INDIA"),
  ("BAŖĪSAL", "BANGLADESH"),
  ("BARMER", "INDIA"),
  ("BARNALA", "INDIA"),
  ("BARNAUL", "RUSSIA"),
  ("BARNIM", "GERMANY"),
  ("BARPETA", "INDIA"),
  ("BARQUISIMETO", "VENEZUELA"),
  ("BARRA MANSA", "BRAZIL"),
  ("BARRANCABERMEJA", "COLOMBIA"),
  ("BARRANQUILLA", "COLOMBIA"),
  ("BARREIRAS", "BRAZIL"),
  ("BARRETOS", "BRAZIL"),
  ("BARRIE", "CANADA"),
  ("BARSI", "INDIA"),
  ("BARTIN", "TURKEY"),
  ("BARUERI", "BRAZIL"),
  ("BARUTA", "VENEZUELA"),
  ("BARWANI", "INDIA"),
  ("BARYSAŬ", "BELARUS"),
  ("BAS-CONGO", "CONGO"),
  ("BASEL-LANDSCHAFT", "SWITZERLAND"),
  ("BASEL-STADT", "SWITZERLAND"),
  ("BASEL", "SWITZERLAND"),
  ("BASEL-TOWN", "SWITZERLAND"),
  ("BASHKORTOSTAN", "RUSSIA"),
  ("BASILAN", "PHILIPPINES"),
  ("BASILDON", "UNITED KINGDOM"),
  ("BASILICATA", "ITALY"),
  ("BASĪRHAT", "INDIA"),
  ("BASQUE COUNTRY", "SPAIN"),
  ("BAS-RHIN", "FRANCE"),
  ("BAS SASSANDRA", "IVORY COAST"),
  ("BASSE", "GAMBIA"),
  ("BASSE GUINÉE", "GUINEA"),
  ("BASSE-KOTTO", "CENTRAL AFRICAN REPUBLIC"),
  ("BASSE-NORMANDIE", "FRANCE"),
  ("BASSE-TERRE", "GUADELOUPE"),
  ("BASTAR", "INDIA"),
  ("BASTI", "INDIA"),
  ("BATAAN", "PHILIPPINES"),
  ("BATA", "EQUATORIAL GUINEA"),
  ("BATALA", "INDIA"),
  ("BATAM", "INDONESIA"),
  ("BATANGAS", "PHILIPPINES"),
  ("BATANG", "INDONESIA"),
  ("BATAYSK", "RUSSIA"),
  ("BAT DÂMBÂNG", "CAMBODIA"),
  ("BATHA", "CHAD"),
  ("BATH AND NORTH EAST SOMERSET", "UNITED KINGDOM"),
  ("BATHINDA", "INDIA"),
  ("BATIS ĶAZAĶSTAN", "KAZAKHSTAN"),
  ("BATKEN", "KYRGYZSTAN"),
  ("BATMAN", "TURKEY"),
  ("BATNA", "ALGERIA"),
  ("BATTICALOA", "SRI LANKA"),
  ("BATU", "INDONESIA"),
  ("BATUMI", "GEORGIA"),
  ("BATURAJA", "INDONESIA"),
  ("BAT YAM", "ISRAEL"),
  ("BAU BAU", "INDONESIA"),
  ("BAUCAU", "EAST TIMOR"),
  ("BAUCHI", "NIGERIA"),
  ("BAUDH", "INDIA"),
  ("BAURU", "BRAZIL"),
  ("BAUTZEN", "GERMANY"),
  ("BAVARIA", "GERMANY"),
  ("BAWŠAR", "OMAN"),
  ("BAYAMO", "CUBA"),
  ("BAYAMÓN", "PUERTO RICO"),
  ("BAYELSA", "NIGERIA"),
  ("BAYEUX", "BRAZIL"),
  ("BAY OF PLENTY", "NEW ZEALAND"),
  ("BAYRAMALI", "TURKMENISTAN"),
  ("BAYRŪT", "LEBANON"),
  ("BAYT-AL-FAQIYAH", "YEMEN"),
  ("BAYT LAH̨M", "PALESTINE"),
  ("BAZÉGA", "BURKINA FASO"),
  ("BẮC GIANG", "VIETNAM"),
  ("BẮC KẠN", "VIETNAM"),
  ("BẠC LIÊU", "VIETNAM"),
  ("BẮC NINH", "VIETNAM"),
  ("BẮC TRUNG BỘ", "VIETNAM"),
  ("BEAU BASSIN-ROSE HILL", "MAURITIUS"),
  ("BEAWAR", "INDIA"),
  ("BECHAR", "ALGERIA"),
  ("BEDFORDSHIRE", "UNITED KINGDOM"),
  ("BE'ER SHEVA", "ISRAEL"),
  ("BEGUSARAI", "INDIA"),
  ("BEHBAHAN", "IRAN"),
  ("BEHERA", "EGYPT"),
  ("BEHSHAHR", "IRAN"),
  ("BEHTA HAJIPUR", "INDIA"),
  ("BEIAN", "CHINA"),
  ("BEIBEI", "CHINA"),
  ("BEIHAI", "CHINA"),
  ("BEIPIAO", "CHINA"),
  ("BEIRA", "MOZAMBIQUE"),
  ("BEITBRIDGE", "ZIMBABWE"),
  ("BEJAIA", "ALGERIA"),
  ("BEKASI", "INDONESIA"),
  ("BÉKÉS", "HUNGARY"),
  ("BEKOBOD", "UZBEKISTAN"),
  ("BELA-BELA", "SOUTH AFRICA"),
  ("BELAWAN", "INDONESIA"),
  ("BELBEES", "EGYPT"),
  ("BELÉM", "BRAZIL"),
  ("BELFAST", "UNITED KINGDOM"),
  ("BELFORD ROXO", "BRAZIL"),
  ("BELGAUM", "INDIA"),
  ("BELGOROD", "RUSSIA"),
  ("BELGRADE", "SERBIA"),
  ("BELLARY", "INDIA"),
  ("BELLO", "COLOMBIA"),
  ("BELO HORIZONTE", "BRAZIL"),
  ("BENE BERAQ", "ISRAEL"),
  ("BENGBU", "CHINA"),
  ("BENGKULU", "INDONESIA"),
  ("BENGO", "ANGOLA"),
  ("BENGUELA", "ANGOLA"),
  ("BENGUET", "PHILIPPINES"),
  ("BENHA", "EGYPT"),
  ("BENI", "BOLIVIA"),
  ("BENI MELLAL", "MOROCCO"),
  ("BENIN", "NIGERIA"),
  ("BENISHANGUL", "ETHIOPIA"),
  ("BENI SUEF", "EGYPT"),
  ("BENONI", "SOUTH AFRICA"),
  ("BENSLIMANE", "MOROCCO"),
  ("BENTO GONÇALVES", "BRAZIL"),
  ("BENUE", "NIGERIA"),
  ("BENXI", "CHINA"),
  ("BEOGRAD", "SERBIA"),
  ("BEPPU", "JAPAN"),
  ("BERAT", "ALBANIA"),
  ("BERAZATEGUI", "ARGENTINA"),
  ("BERBÉRATI", "CENTRAL AFRICAN REPUBLIC"),
  ("BERCHTESGADENER LAND", "GERMANY"),
  ("BERDYANS'K", "UKRAINE"),
  ("BEREA", "LESOTHO"),
  ("BEREZNIKI", "RUSSIA"),
  ("BERGAMO", "ITALY"),
  ("BERGEN", "NORWAY"),
  ("BERGISCH GLADBACH", "GERMANY"),
  ("BERGSTRASSE", "GERMANY"),
  ("BERKANE", "MOROCCO"),
  ("BERLIN", "GERMANY"),
  ("BERNKASTEL-WITTLICH", "GERMANY"),
  ("BERN", "SWITZERLAND"),
  ("BERRECHID", "MOROCCO"),
  ("BERTOUA", "CAMEROON"),
  ("BESANÇON", "FRANCE"),
  ("BETHAL", "SOUTH AFRICA"),
  ("BETHLEHEM", "SOUTH AFRICA"),
  ("BETIM", "BRAZIL"),
  ("BET SHEMESH", "ISRAEL"),
  ("BETTIAH", "INDIA"),
  ("BETUL", "INDIA"),
  ("BETŪL", "INDIA"),
  ("BEYLA", "GUINEA"),
  ("BEYLIKDÜZÜ", "TURKEY"),
  ("BHADRAK", "INDIA"),
  ("BHADRAVATI", "INDIA"),
  ("BHADRESWAR", "INDIA"),
  ("BHAGALPUR", "INDIA"),
  ("BHAIRAB BAZAR", "BANGLADESH"),
  ("BHAKTAPUR", "NEPAL"),
  ("BHALSWA JAHANGIRPUR", "INDIA"),
  ("BHANDARA", "INDIA"),
  ("BHARATPUR", "INDIA"),
  ("BHARATPUR", "NEPAL"),
  ("BHARUCH", "INDIA"),
  ("BHARŪCH", "INDIA"),
  ("BHATPARA", "INDIA"),
  ("BHAVNAGAR", "INDIA"),
  ("BHILAI", "INDIA"),
  ("BHILWARA", "INDIA"),
  ("BHĪLWARA", "INDIA"),
  ("BHĪMAVARAM", "INDIA"),
  ("BHIND", "INDIA"),
  ("BHISHO", "SOUTH AFRICA"),
  ("BHIWANDI", "INDIA"),
  ("BHIWANI", "INDIA"),
  ("BHOJPUR", "INDIA"),
  ("BHOJPUR", "NEPAL"),
  ("BHOLA", "BANGLADESH"),
  ("BHOPAL", "INDIA"),
  ("BHUBANESWAR", "INDIA"),
  ("BHUJ", "INDIA"),
  ("BHULI", "INDIA"),
  ("BHUSAWAL", "INDIA"),
  ("BIAŁYSTOK", "POLAND"),
  ("BIBERACH", "GERMANY"),
  ("BICOL", "PHILIPPINES"),
  ("BIDA", "NIGERIA"),
  ("BIDAR", "INDIA"),
  ("BĪDAR", "INDIA"),
  ("BIDHANNAGAR", "INDIA"),
  ("BID", "INDIA"),
  ("BĪD", "INDIA"),
  ("BIÉ", "ANGOLA"),
  ("BIELEFELD", "GERMANY"),
  ("BIELSKO-BIAŁA", "POLAND"),
  ("BIÊN HÒA", "VIETNAM"),
  ("BIHAR", "INDIA"),
  ("BIHOR", "ROMANIA"),
  ("BIJAPUR", "INDIA"),
  ("BIJELJINA", "BOSNIA AND HERZEGOVINA"),
  ("BIJNOR", "INDIA"),
  ("BIKANER", "INDIA"),
  ("BĪKANER", "INDIA"),
  ("BIKITA", "ZIMBABWE"),
  ("BILANGA", "BURKINA FASO"),
  ("BILASPUR", "INDIA"),
  ("BILA TSERKVA", "UKRAINE"),
  ("BILBAO", "SPAIN"),
  ("BILECIK", "TURKEY"),
  ("BILIRAN", "PHILIPPINES"),
  ("BILTINE", "CHAD"),
  ("BIMA", "INDONESIA"),
  ("BIMBO", "CENTRAL AFRICAN REPUBLIC"),
  ("BINANGONAN", "PHILIPPINES"),
  ("BIN 'ARŪS", "TUNISIA"),
  ("BINDURA", "ZIMBABWE"),
  ("BINGA", "ZIMBABWE"),
  ("BINGÖL", "TURKEY"),
  ("BÌNH DƯƠNG", "VIETNAM"),
  ("BÌNH ĐỊNH", "VIETNAM"),
  ("BÌNH PHƯỚC", "VIETNAM"),
  ("BÌNH THUẬN", "VIETNAM"),
  ("BINJAI", "INDONESIA"),
  ("BINƏQƏDI", "AZERBAIJAN"),
  ("BINTULU", "MALAYSIA"),
  ("BINZART", "TUNISIA"),
  ("BINZHOU", "CHINA"),
  ("BIOBÍO", "CHILE"),
  ("BÍO BÍO", "CHILE"),
  ("BIOKO NORTE", "EQUATORIAL GUINEA"),
  ("BIOMBO", "GUINEA-BISSAU"),
  ("BIRATNAGAR", "NEPAL"),
  ("BIRBHUM", "INDIA"),
  ("BIR EL DJIR", "ALGERIA"),
  ("BĪRGANJ", "NEPAL"),
  ("BIRIGUI", "BRAZIL"),
  ("BĪRJAND", "IRAN"),
  ("BIRMINGHAM", "UNITED KINGDOM"),
  ("BIRNIN KEBBI", "NIGERIA"),
  ("BĪŠAH", "SAUDI ARABIA"),
  ("BISHNUPUR", "INDIA"),
  ("BIŞKEK", "KYRGYZSTAN"),
  ("BISKRA", "ALGERIA"),
  ("BISSAU", "GUINEA-BISSAU"),
  ("BISTRIŢA-NĂSĂUD", "ROMANIA"),
  ("BITLIS", "TURKEY"),
  ("BITOLA", "MACEDONIA"),
  ("BITTERFELD", "GERMANY"),
  ("BITUNG", "INDONESIA"),
  ("BIYSK", "RUSSIA"),
  ("BJELOVAR-BILOGORA", "CROATIA"),
  ("BLACKBURN", "UNITED KINGDOM"),
  ("BLACKBURN WITH DARWEN", "UNITED KINGDOM"),
  ("BLACKPOOL", "UNITED KINGDOM"),
  ("BLAGOEVGRAD", "BULGARIA"),
  ("BLAGOVESHCHENSK", "RUSSIA"),
  ("BLANSKO", "CZECH REPUBLIC"),
  ("BLANTYRE CITY", "MALAWI"),
  ("BLANTYRE", "MALAWI"),
  ("BLANTYRE RURAL", "MALAWI"),
  ("BLEKINGE", "SWEDEN"),
  ("BLIDA", "ALGERIA"),
  ("BLITAR", "INDONESIA"),
  ("BLOEMFONTEIN", "SOUTH AFRICA"),
  ("BLUMENAU", "BRAZIL"),
  ("BẾN TRE", "VIETNAM"),
  ("BOACO", "NICARAGUA"),
  ("BOA VISTA", "BRAZIL"),
  ("BÖBLINGEN", "GERMANY"),
  ("BOBO DIOULASSO", "BURKINA FASO"),
  ("BOBO-DIOULASSO", "BURKINA FASO"),
  ("BOCA CHICA", "DOMINICAN REPUBLIC"),
  ("BOCAS DEL TORO", "PANAMA"),
  ("BOCAUE", "PHILIPPINES"),
  ("BOCHUM", "GERMANY"),
  ("BODENSEEKREIS", "GERMANY"),
  ("BOFFA", "GUINEA"),
  ("BOGANDÉ", "BURKINA FASO"),
  ("BOGORA", "BANGLADESH"),
  ("BOGOR", "INDONESIA"),
  ("BOGOTÁ", "COLOMBIA"),
  ("BOGOTA", "COLOMBIA"),
  ("BOHICON", "BENIN"),
  ("BOHOL", "PHILIPPINES"),
  ("BOJNŪRD", "IRAN"),
  ("BOJONEGORO", "INDONESIA"),
  ("BOJONG GEDE", "INDONESIA"),
  ("BOKARO", "INDIA"),
  ("BOKÉ", "GUINEA"),
  ("BOKEO", "LAOS"),
  ("BOKSBURG", "SOUTH AFRICA"),
  ("BOLI", "CHINA"),
  ("BOLIKHAMSAY", "LAOS"),
  ("BOLÍVAR", "COLOMBIA"),
  ("BOLÍVAR", "ECUADOR"),
  ("BOLÍVAR", "VENEZUELA"),
  ("BOLOGNA", "ITALY"),
  ("BOLTON", "UNITED KINGDOM"),
  ("BOLU", "TURKEY"),
  ("BOLZANO", "ITALY"),
  ("BOMA", "CONGO"),
  ("BOMBALI", "SIERRA LEONE"),
  ("BOMBAY", "INDIA"),
  ("BOMMANAHALLI", "INDIA"),
  ("BONAB", "IRAN"),
  ("BONAO", "DOMINICAN REPUBLIC"),
  ("BONGAIGAON", "INDIA"),
  ("BONG", "LIBERIA"),
  ("BONN", "GERMANY"),
  ("BONTANG", "INDONESIA"),
  ("BONTHE", "SIERRA LEONE"),
  ("BOOSAASO", "SOMALIA"),
  ("BORDEAUX", "FRANCE"),
  ("BÖRDE", "GERMANY"),
  ("BORDJ BOU ARRERIDJ", "ALGERIA"),
  ("BORGOU", "BENIN"),
  ("BORKEN", "GERMANY"),
  ("BORKHAR-E MEYMEH", "IRAN"),
  ("BORNO", "NIGERIA"),
  ("BOR", "SERBIA"),
  ("BORSOD-ABAÚJ-ZEMPLÉN", "HUNGARY"),
  ("BORU-JEN", "IRAN"),
  ("BORUJERD", "IRAN"),
  ("BORŪJERD", "IRAN"),
  ("BOSHAN", "CHINA"),
  ("BO", "SIERRA LEONE"),
  ("BOTAD", "INDIA"),
  ("BOTOŞANI", "ROMANIA"),
  ("BOTSHABELO", "SOUTH AFRICA"),
  ("BOTTROP", "GERMANY"),
  ("BOTUCATU", "BRAZIL"),
  ("BOUAKÉ", "IVORY COAST"),
  ("BOUCHES-DU-RHÔNE", "FRANCE"),
  ("BOUENZA", "CONGO"),
  ("BOUGOURIBA", "BURKINA FASO"),
  ("BOUIRA", "ALGERIA"),
  ("BOULEMANE", "MOROCCO"),
  ("BOULGOU", "BURKINA FASO"),
  ("BOULKIEMDÉ", "BURKINA FASO"),
  ("BOULOGNE-BILLANCOURT", "FRANCE"),
  ("BOUMERDES", "ALGERIA"),
  ("BOURGOGNE", "FRANCE"),
  ("BOURKOU-ENNEDI-TIBESTI", "CHAD"),
  ("BOURNEMOUTH", "UNITED KINGDOM"),
  ("BOUSAADA", "ALGERIA"),
  ("BOYACÁ", "COLOMBIA"),
  ("BOYER AHMAD", "IRAN"),
  ("BOYINZAHRA", "IRAN"),
  ("BOZHOU", "CHINA"),
  ("BRABANT WALLON", "BELGIUM"),
  ("BRACKNELL FOREST", "UNITED KINGDOM"),
  ("BRADFORD", "UNITED KINGDOM"),
  ("BRAGANÇA PAULISTA", "BRAZIL"),
  ("BRAGA", "PORTUGAL"),
  ("BRAHMAN BARIYA", "BANGLADESH"),
  ("BRAHMAPUR", "INDIA"),
  ("BRĂILA", "ROMANIA"),
  ("BRAKNA", "MAURITANIA"),
  ("BRAKPAN", "SOUTH AFRICA"),
  ("BRANDENBURG", "GERMANY"),
  ("BRANIČEVO", "SERBIA"),
  ("BRASÍLIA", "BRAZIL"),
  ("BRAŞOV", "ROMANIA"),
  ("BRATISLAVA", "SLOVAKIA"),
  ("BRATISLAVSKÝ", "SLOVAKIA"),
  ("BRATSK", "RUSSIA"),
  ("BRAUNSCHWEIG", "GERMANY"),
  ("BRAZZAVILLE", "CONGO"),
  ("BƏRDƏ", "AZERBAIJAN"),
  ("BREBES", "INDONESIA"),
  ("BŘECLAV", "CZECH REPUBLIC"),
  ("BREDA", "NETHERLANDS"),
  ("BREISGAU-HOCHSCHWARZWALD", "GERMANY"),
  ("BREMEN", "GERMANY"),
  ("BREMERHAVEN", "GERMANY"),
  ("BRESCIA", "ITALY"),
  ("BRÈST", "BELARUS"),
  ("BREST", "FRANCE"),
  ("BRETAGNE", "FRANCE"),
  ("BRIDGEND", "UNITED KINGDOM"),
  ("BRIGHTON AND HOVE", "UNITED KINGDOM"),
  ("BRIGHTON", "UNITED KINGDOM"),
  ("BRIKAMA", "GAMBIA"),
  ("BRISBANE", "AUSTRALIA"),
  ("BRISTOL", "UNITED KINGDOM"),
  ("BRITISH COLUMBIA", "CANADA"),
  ("BRITS", "SOUTH AFRICA"),
  ("BRNO", "CZECH REPUBLIC"),
  ("BRNO-MĚSTO", "CZECH REPUBLIC"),
  ("BRNO-VENKOV", "CZECH REPUBLIC"),
  ("BRONG-AHAFO", "GHANA"),
  ("BRUGGE", "BELGIUM"),
  ("BRUNEI-MUARA", "BRUNEI"),
  ("BRUNSWICK", "GERMANY"),
  ("BRUNTÁL", "CZECH REPUBLIC"),
  ("BRUSQUE", "BRAZIL"),
  ("BRUSSELS", "BELGIUM"),
  ("BRYANSK", "RUSSIA"),
  ("BUBANZA", "BURUNDI"),
  ("BUCARAMANGA", "COLOMBIA"),
  ("BUCHAREST", "ROMANIA"),
  ("BUCKINGHAMSHIRE", "UNITED KINGDOM"),
  ("BUDAPEST", "HUNGARY"),
  ("BUDAUN", "INDIA"),
  ("BUÉA", "CAMEROON"),
  ("BUENAVENTURA", "COLOMBIA"),
  ("BUENAVISTA", "MEXICO"),
  ("BUENOS AIRES", "ARGENTINA"),
  ("BUHERA", "ZIMBABWE"),
  ("BUHORO", "UZBEKISTAN"),
  ("BUJUMBURA", "BURUNDI"),
  ("BŪKAN", "IRAN"),
  ("BUKAVU", "CONGO"),
  ("BUKIDNON", "PHILIPPINES"),
  ("BUKIT TINGGI", "INDONESIA"),
  ("BULACAN", "PHILIPPINES"),
  ("BÜLACH", "SWITZERLAND"),
  ("BULANDSHAHR", "INDIA"),
  ("BULAON", "PHILIPPINES"),
  ("BULAWAYO", "ZIMBABWE"),
  ("BULDANA", "INDIA"),
  ("BUMBA", "CONGO"),
  ("BUNDI", "INDIA"),
  ("BŪNDI", "INDIA"),
  ("BUNIA", "CONGO"),
  ("BUÔN MA THUỘT", "VIETNAM"),
  ("BURAYDAH", "SAUDI ARABIA"),
  ("BURCO", "SOMALIA"),
  ("BURDUR", "TURKEY"),
  ("BŪREWALA", "PAKISTAN"),
  ("BURGAS", "BULGARIA"),
  ("BURGENLAND", "AUSTRIA"),
  ("BURGENLANDKREIS", "GERMANY"),
  ("BURGOS", "SPAIN"),
  ("BURHANPUR", "INDIA"),
  ("BURI RAM", "THAILAND"),
  ("BURSA", "TURKEY"),
  ("BŪR SŪDAN", "SUDAN"),
  ("BURURI", "BURUNDI"),
  ("BURYATIA", "RUSSIA"),
  ("BUSAN SOUTH", "SOUTH KOREA"),
  ("BŪSHEHR", "IRAN"),
  ("BUSKERUD", "NORWAY"),
  ("BUTARE", "RWANDA"),
  ("BUTEMBO", "CONGO"),
  ("BUTHA-BUTHE", "LESOTHO"),
  ("BUTUAN", "PHILIPPINES"),
  ("BUTWAL", "NEPAL"),
  ("BUXAR", "INDIA"),
  ("BUZĂU", "ROMANIA"),
  ("BYATARAYANAPURA", "INDIA"),
  ("BYDGOSZCZ", "POLAND"),
  ("BYTOM", "POLAND"),
  ("BYUMBA", "RWANDA"),
  ("CAAGUAZÚ", "PARAGUAY"),
  ("CAAZAPÁ", "PARAGUAY"),
  ("CABAÑAS", "EL SALVADOR"),
  ("CABANATUAN", "PHILIPPINES"),
  ("CABIMAS", "VENEZUELA"),
  ("CABINDA", "ANGOLA"),
  ("CABO DELGADO", "MOZAMBIQUE"),
  ("CABO DE SANTO AGOSTINHO", "BRAZIL"),
  ("CABO FRIO", "BRAZIL"),
  ("CÁCERES", "SPAIN"),
  ("CACHAPOAL", "CHILE"),
  ("CACHAR", "INDIA"),
  ("CACHEU", "GUINEA-BISSAU"),
  ("CACHOEIRINHA", "BRAZIL"),
  ("CACHOEIRO DE ITAPEMIRIM", "BRAZIL"),
  ("CADIZ", "PHILIPPINES"),
  ("CÁDIZ", "SPAIN"),
  ("CAEN", "FRANCE"),
  ("CAERPHILLY", "UNITED KINGDOM"),
  ("CAGAYAN", "PHILIPPINES"),
  ("CAGAYAN VALLEY", "PHILIPPINES"),
  ("CAGLIARI", "ITALY"),
  ("CAGUAS", "PUERTO RICO"),
  ("CAGUA", "VENEZUELA"),
  ("CAINTA", "PHILIPPINES"),
  ("CAIRNS", "AUSTRALIA"),
  ("CAIRO", "EGYPT"),
  ("CAJAMARCA", "PERU"),
  ("CALABAR", "NIGERIA"),
  ("CALABOZO", "VENEZUELA"),
  ("CALABRIA", "ITALY"),
  ("CALAMA", "CHILE"),
  ("CALAMBA", "PHILIPPINES"),
  ("CĂLĂRAŞI", "ROMANIA"),
  ("CALCUTTA", "INDIA"),
  ("CALDAS", "COLOMBIA"),
  ("CALGARY", "CANADA"),
  ("CALI", "COLOMBIA"),
  ("CALLAO", "PERU"),
  ("CALUMPIT", "PHILIPPINES"),
  ("CALVADOS", "FRANCE"),
  ("CALW", "GERMANY"),
  ("CAMAÇARI", "BRAZIL"),
  ("CAMAGÜEY", "CUBA"),
  ("CAMARAGIBE", "BRAZIL"),
  ("CAMARINES NORTE", "PHILIPPINES"),
  ("CAMARINES SUR", "PHILIPPINES"),
  ("CÀ MAU", "VIETNAM"),
  ("CAMBRIDGESHIRE", "UNITED KINGDOM"),
  ("CAMBRIDGE", "UNITED KINGDOM"),
  ("ČAMČAMAL", "IRAQ"),
  ("CAMPANIA", "ITALY"),
  ("CAMPECHE", "MEXICO"),
  ("CAMPINA GRANDE", "BRAZIL"),
  ("CAMPINAS", "BRAZIL"),
  ("CAMPO GRANDE", "BRAZIL"),
  ("CAMPOS", "BRAZIL"),
  ("CAM RANH", "VIETNAM"),
  ("ÇANAKKALE", "TURKEY"),
  ("CAÑAR", "ECUADOR"),
  ("CANARY ISLANDS", "SPAIN"),
  ("CANBERRA-QUEANBEYAN (ACT-NSW)", "AUSTRALIA"),
  ("CANCÚN", "MEXICO"),
  ("CANELONES", "URUGUAY"),
  ("CANENDIYÚ", "PARAGUAY"),
  ("CANGZHOU", "CHINA"),
  ("ÇANKIRI", "TURKEY"),
  ("CANKUZO", "BURUNDI"),
  ("CANOAS", "BRAZIL"),
  ("CANTABRIA", "SPAIN"),
  ("CANTAL", "FRANCE"),
  ("CANTERBURY", "NEW ZEALAND"),
  ("CAO BẰNG", "VIETNAM"),
  ("CĂOTÚN", "TAIWAN"),
  ("CAPE COAST", "GHANA"),
  ("CAPE TOWN", "SOUTH AFRICA"),
  ("CAP-HAÏTIEN", "HAITI"),
  ("CAPIATÁ", "PARAGUAY"),
  ("CAPITAL", "ARGENTINA"),
  ("CAPITAL", "BAHRAIN"),
  ("CAPIZ", "PHILIPPINES"),
  ("CAQUETÁ", "COLOMBIA"),
  ("CARABOBO", "VENEZUELA"),
  ("CARACAS", "VENEZUELA"),
  ("CARAGA", "PHILIPPINES"),
  ("CARAGUATATUBA", "BRAZIL"),
  ("CARAPICUÍBA", "BRAZIL"),
  ("CARAŞ-SEVERIN", "ROMANIA"),
  ("CARAZO", "NICARAGUA"),
  ("CARCHI", "ECUADOR"),
  ("CÁRDENAS", "CUBA"),
  ("CARDIFF", "UNITED KINGDOM"),
  ("CARIACICA", "BRAZIL"),
  ("CARINGAN", "INDONESIA"),
  ("CARLTONVILLE", "SOUTH AFRICA"),
  ("CARMARTHENSHIRE", "UNITED KINGDOM"),
  ("CAROLINA", "PUERTO RICO"),
  ("CARORA", "VENEZUELA"),
  ("CARREFOUR", "HAITI"),
  ("CARTAGENA", "COLOMBIA"),
  ("CARTAGENA", "SPAIN"),
  ("CARTAGO", "COLOMBIA"),
  ("CARTAGO", "COSTA RICA"),
  ("CARUARU", "BRAZIL"),
  ("CARÚPANO", "VENEZUELA"),
  ("CASABLANCA", "MOROCCO"),
  ("CASANARE", "COLOMBIA"),
  ("CASCAVEL", "BRAZIL"),
  ("CASTANHAL", "BRAZIL"),
  ("CASTELLANOS", "ARGENTINA"),
  ("CASTELLÓ", "SPAIN"),
  ("CASTILE AND LEON", "SPAIN"),
  ("CASTILE-LA MANCHA", "SPAIN"),
  ("CATALONIA", "SPAIN"),
  ("CATAMARCA", "ARGENTINA"),
  ("CATANDUANES", "PHILIPPINES"),
  ("CATANDUVA", "BRAZIL"),
  ("CATANIA", "ITALY"),
  ("CATBALOGAN", "PHILIPPINES"),
  ("CATIA LA MAR", "VENEZUELA"),
  ("CAUCA", "COLOMBIA"),
  ("CAUCAIA", "BRAZIL"),
  ("CAUTÍN", "CHILE"),
  ("CAVITE", "PHILIPPINES"),
  ("CAXIAS", "BRAZIL"),
  ("CAXIAS DO SUL", "BRAZIL"),
  ("CAYENNE", "FRENCH GUIANA"),
  ("CEARÁ", "BRAZIL"),
  ("CEBU", "PHILIPPINES"),
  ("ÇEKMEKÖY", "TURKEY"),
  ("CELALABAD", "KYRGYZSTAN"),
  ("CELAYA", "MEXICO"),
  ("CELLE", "GERMANY"),
  ("CENTENARY", "ZIMBABWE"),
  ("CENTRAL", "BAHRAIN"),
  ("CENTRAL COAST", "AUSTRALIA"),
  ("CENTRAL EQUATORIA", "SOUTH SUDAN"),
  ("CENTRAL", "FIJI ISLANDS"),
  ("CENTRAL FINLAND", "FINLAND"),
  ("CENTRAL", "GHANA"),
  ("CENTRAL", "INDIA"),
  ("CENTRAL", "KENYA"),
  ("CENTRAL LUZON", "PHILIPPINES"),
  ("CENTRAL MINDANAO", "PHILIPPINES"),
  ("CENTRAL", "PAPUA NEW GUINEA"),
  ("CENTRAL", "PARAGUAY"),
  ("CENTRAL SERBIA", "SERBIA"),
  ("CENTRAL", "THAILAND"),
  ("CENTRAL", "UGANDA"),
  ("CENTRAL VISAYAS", "PHILIPPINES"),
  ("CENTRAL", "ZAMBIA"),
  ("CENTRE", "CAMEROON"),
  ("CENTRE", "FRANCE"),
  ("CENTRE", "HAITI"),
  ("CENTRE", "TOGO"),
  ("CENTRO", "PORTUGAL"),
  ("CENTRO SUR", "EQUATORIAL GUINEA"),
  ("CÉSAR", "COLOMBIA"),
  ("ČESKÁ LÍPA", "CZECH REPUBLIC"),
  ("ČESKÉ BUDĚJOVICE", "CZECH REPUBLIC"),
  ("CEYHAN", "TURKEY"),
  ("CHACABUCO", "CHILE"),
  ("CHACAO", "VENEZUELA"),
  ("CHACHOENGSAO", "THAILAND"),
  ("CHACO", "ARGENTINA"),
  ("CHAGANGDO", "NORTH KOREA"),
  ("CHAHAR MAHAL-E BAKHTIARI", "IRAN"),
  ("CHAHBAHAR", "IRAN"),
  ("CHAH BAHAR", "IRAN"),
  ("CHAI NAT", "THAILAND"),
  ("CHAIYAPHUM", "THAILAND"),
  ("CHAKARIA", "BANGLADESH"),
  ("CHALATENANGO", "EL SALVADOR"),
  ("CHALCO DE DÍAZ COVARRUBIAS", "MEXICO"),
  ("CHALISGAON", "INDIA"),
  ("CHALŪS", "IRAN"),
  ("CHAMARAJANAGAR", "INDIA"),
  ("CHAMBA", "INDIA"),
  ("CHAM", "GERMANY"),
  ("CHAMOLI", "INDIA"),
  ("CHAMPAGNE-ARDENNE", "FRANCE"),
  ("CHAMPASAK", "LAOS"),
  ("CHAMPAWAT", "INDIA"),
  ("CHAMPDANI", "INDIA"),
  ("CHAMPHAI", "INDIA"),
  ("CHANDANNAGAR", "INDIA"),
  ("CHANDAULI", "INDIA"),
  ("CHANDAUSI", "INDIA"),
  ("CHANDEL", "INDIA"),
  ("CHANDIGARH", "INDIA"),
  ("CHANDĪGARH", "INDIA"),
  ("CHANDPŪR", "BANGLADESH"),
  ("CHANDRAPUR", "INDIA"),
  ("CHANGCHUN", "CHINA"),
  ("CHANGDE", "CHINA"),
  ("CHANGJI", "CHINA"),
  ("CHANGLANG", "INDIA"),
  ("CHANGPING", "CHINA"),
  ("CHANGSHA", "CHINA"),
  ("CHANGWŎN", "SOUTH KOREA"),
  ("CHANGZHI", "CHINA"),
  ("CHANGZHOU", "CHINA"),
  ("CHANTHABURI", "THAILAND"),
  ("CHAOHU", "CHINA"),
  ("CHAOUIA-OUARDIGHA", "MOROCCO"),
  ("CHAOYANG", "CHINA"),
  ("CHAOZHOU", "CHINA"),
  ("CHAPECÓ", "BRAZIL"),
  ("CHARENTE", "FRANCE"),
  ("CHARENTE-MARITIME", "FRANCE"),
  ("CHARI-BAGUIRMI", "CHAD"),
  ("CHARLEROI", "BELGIUM"),
  ("CHARODA", "INDIA"),
  ("CHAS", "INDIA"),
  ("CHATRA", "INDIA"),
  ("CHAŢŢAGAM", "BANGLADESH"),
  ("CHAUK", "MYANMAR"),
  ("CHEBOKSARY", "RUSSIA"),
  ("CHECHNYA", "RUSSIA"),
  ("CHECHON", "SOUTH KOREA"),
  ("CHEFCHAOUEN", "MOROCCO"),
  ("CHEGUTU", "ZIMBABWE"),
  ("CHEJU", "SOUTH KOREA"),
  ("CHELMSFORD", "UNITED KINGDOM"),
  ("CHELTENHAM", "UNITED KINGDOM"),
  ("CHELYABINSK", "RUSSIA"),
  ("CHEMNITZ", "GERMANY"),
  ("CHENARAN", "IRAN"),
  ("CHENGDE", "CHINA"),
  ("CHENGDU", "CHINA"),
  ("CHENGHAI", "CHINA"),
  ("CHENGZIHE", "CHINA"),
  ("CHENNAI", "INDIA"),
  ("CHENZHOU", "CHINA"),
  ("CHEREPOVETS", "RUSSIA"),
  ("CHER", "FRANCE"),
  ("CHERKAS'KA", "UKRAINE"),
  ("CHERKASY", "UKRAINE"),
  ("CHERKESSK", "RUSSIA"),
  ("CHERNIHIVS'KA", "UKRAINE"),
  ("CHERNIHIV", "UKRAINE"),
  ("CHERNIVETS'KA", "UKRAINE"),
  ("CHERNIVTSI", "UKRAINE"),
  ("CHESHIRE", "UNITED KINGDOM"),
  ("CHETUMAL", "MEXICO"),
  ("CHHAPRA", "INDIA"),
  ("CHHATARPUR", "INDIA"),
  ("CHHATTISGARH", "INDIA"),
  ("CHHINDWARA", "INDIA"),
  ("CHIANG MAI", "THAILAND"),
  ("CHIANG RAI", "THAILAND"),
  ("CHIAPAS", "MEXICO"),
  ("CHIBA", "JAPAN"),
  ("CHICHAOUA", "MOROCCO"),
  ("CHICLAYO", "PERU"),
  ("CHICOLOAPAN DE JUÁREZ", "MEXICO"),
  ("CHICOUTIMI-JONQUIÈRE", "CANADA"),
  ("CHIFENG", "CHINA"),
  ("CHIGASAKI", "JAPAN"),
  ("CHIHUAHUA", "MEXICO"),
  ("CHIKKABALLAPUR", "INDIA"),
  ("CHIKMAGALUR", "INDIA"),
  ("CHIKMAGALŪR", "INDIA"),
  ("CHIKOMBA", "ZIMBABWE"),
  ("CHIKUSEI", "JAPAN"),
  ("CHIKUSHINO", "JAPAN"),
  ("CHIKWAWA", "MALAWI"),
  ("CHILAKALŪRUPET", "INDIA"),
  ("CHILLÁN", "CHILE"),
  ("CHILOÉ", "CHILE"),
  ("CHILPANCINGO DE LOS BRAVO", "MEXICO"),
  ("CHIMALHUACÁN", "MEXICO"),
  ("CHIMALTENANGO", "GUATEMALA"),
  ("CHIMANIMANI", "ZIMBABWE"),
  ("CHIMBAS", "ARGENTINA"),
  ("CHIMBORAZO", "ECUADOR"),
  ("CHIMBOTE", "PERU"),
  ("CHIMOIO", "MOZAMBIQUE"),
  ("CHINANDEGA", "NICARAGUA"),
  ("CHINAUTLA", "GUATEMALA"),
  ("CHINCHA ALTA", "PERU"),
  ("CHINGOLA", "ZAMBIA"),
  ("CHINIOT", "PAKISTAN"),
  ("CHINJU", "SOUTH KOREA"),
  ("CHIN", "MYANMAR"),
  ("CHINNACHAWK", "INDIA"),
  ("CHIPATA", "ZAMBIA"),
  ("CHIPINGE", "ZIMBABWE"),
  ("CHIQUIMULA", "GUATEMALA"),
  ("CHIRADZULU", "MALAWI"),
  ("CHĪRALA", "INDIA"),
  ("CHIRANG", "INDIA"),
  ("CHIREDZI", "ZIMBABWE"),
  ("CHIRIQUÍ", "PANAMA"),
  ("CHIRMIRI", "INDIA"),
  ("CHISHTIAN MANDI", "PAKISTAN"),
  ("CHIŞINĂU", "MOLDOVA"),
  ("CHITA", "RUSSIA"),
  ("CHITIPA", "MALAWI"),
  ("CHITRADURGA", "INDIA"),
  ("CHITRAKOOT", "INDIA"),
  ("CHITTAURGARH", "INDIA"),
  ("CHITTOOR", "INDIA"),
  ("CHITTUR", "INDIA"),
  ("CHITUNGWIZA", "ZIMBABWE"),
  ("CHITWAN", "NEPAL"),
  ("CHIVI", "ZIMBABWE"),
  ("CHIZHOU", "CHINA"),
  ("CHLEF", "ALGERIA"),
  ("CHŎNAN", "SOUTH KOREA"),
  ("CHŎNGJIN", "NORTH KOREA"),
  ("CHŎNGJU", "SOUTH KOREA"),
  ("CHŎNJU", "SOUTH KOREA"),
  ("CHOCÓ", "COLOMBIA"),
  ("CHOFU", "JAPAN"),
  ("CHOLLABUK", "SOUTH KOREA"),
  ("CHOLLANAM", "SOUTH KOREA"),
  ("CHOLOMA", "HONDURAS"),
  ("CHOLUTECA", "HONDURAS"),
  ("CHOMUTOV", "CZECH REPUBLIC"),
  ("CHON BURI", "THAILAND"),
  ("CHONGQING", "CHINA"),
  ("CHONGŬP", "SOUTH KOREA"),
  ("CHONTALES", "NICARAGUA"),
  ("CHORZÓW", "POLAND"),
  ("CHOUCHENG", "CHINA"),
  ("CHRISTCHURCH", "NEW ZEALAND"),
  ("CHRUDIM", "CZECH REPUBLIC"),
  ("CHTOUKA AIT BAHA", "MOROCCO"),
  ("CHUADANGA", "BANGLADESH"),
  ("CHUBUT", "ARGENTINA"),
  ("CHUMPHON", "THAILAND"),
  ("CHUNCHENG", "CHINA"),
  ("CHUNCHŎN", "SOUTH KOREA"),
  ("CHUNGCHŎNGBUK", "SOUTH KOREA"),
  ("CHUNGCHŎNGNAM", "SOUTH KOREA"),
  ("CHUNGJU", "SOUTH KOREA"),
  ("CHUQUISACA", "BOLIVIA"),
  ("CHURACHANDPUR", "INDIA"),
  ("CHURU", "INDIA"),
  ("CHŪRU", "INDIA"),
  ("CHUVASHIA", "RUSSIA"),
  ("CHUZHOU", "CHINA"),
  ("CIAMIS", "INDONESIA"),
  ("CIAMPEA", "INDONESIA"),
  ("CIANJUR", "INDONESIA"),
  ("CIBADAK", "INDONESIA"),
  ("CIBINONG", "INDONESIA"),
  ("CIBITOKE", "BURUNDI"),
  ("CIBITUNG", "INDONESIA"),
  ("CIBUNGBULANG", "INDONESIA"),
  ("CICALENGKA", "INDONESIA"),
  ("CICURUK", "INDONESIA"),
  ("CIEGO DE ÁVILA", "CUBA"),
  ("CIÉNAGA", "COLOMBIA"),
  ("CIENFUEGOS", "CUBA"),
  ("CIKAMPEK", "INDONESIA"),
  ("CIKARANG", "INDONESIA"),
  ("CIKERUH", "INDONESIA"),
  ("CIKUPA", "INDONESIA"),
  ("CILACAP", "INDONESIA"),
  ("CILEDUG", "INDONESIA"),
  ("CILEGON", "INDONESIA"),
  ("CILEUNGSI", "INDONESIA"),
  ("CILEUNYI", "INDONESIA"),
  ("CIMAHI", "INDONESIA"),
  ("CIOMAS", "INDONESIA"),
  ("CIPARAY", "INDONESIA"),
  ("CIPUTAT", "INDONESIA"),
  ("ÇIRÇIĶ", "UZBEKISTAN"),
  ("CIREBON", "INDONESIA"),
  ("CIREBON UTARA", "INDONESIA"),
  ("CISAAT", "INDONESIA"),
  ("CISARUA", "INDONESIA"),
  ("CITEUREUP", "INDONESIA"),
  ("CITY OF MAKATI", "PHILIPPINES"),
  ("CITY OF MANDALYONG", "PHILIPPINES"),
  ("CITY OF MANILA", "PHILIPPINES"),
  ("CITY OF MARIKINA", "PHILIPPINES"),
  ("CITY OF MUNTINLUPA", "PHILIPPINES"),
  ("CITY OF PARAÑAQUE", "PHILIPPINES"),
  ("CITY OF PASIG", "PHILIPPINES"),
  ("CITY OF VALENZUELA", "PHILIPPINES"),
  ("CIUDAD ACUÑA", "MEXICO"),
  ("CIUDAD APODACA", "MEXICO"),
  ("CIUDAD BENITO JUÁREZ", "MEXICO"),
  ("CIUDAD BOLÍVAR", "VENEZUELA"),
  ("CIUDAD DE LA COSTA", "URUGUAY"),
  ("CIUDAD DE LA HABANA", "CUBA"),
  ("CIUDAD DEL CARMEN", "MEXICO"),
  ("CIUDAD DEL ESTE", "PARAGUAY"),
  ("CIUDAD DE MÉXICO", "MEXICO"),
  ("CIUDAD DE VILLA DE ÁLVAREZ", "MEXICO"),
  ("CIUDAD GENERAL ESCOBEDO", "MEXICO"),
  ("CIUDAD GUAYANA", "VENEZUELA"),
  ("CIUDAD LÓPEZ MATEOS", "MEXICO"),
  ("CIUDAD MADERO", "MEXICO"),
  ("CIUDAD NEZAHUALCÓYOTL", "MEXICO"),
  ("CIUDAD OBREGÓN", "MEXICO"),
  ("CIUDAD OJEDA", "VENEZUELA"),
  ("CIUDAD REAL", "SPAIN"),
  ("CIUDAD SANTA CATARINA", "MEXICO"),
  ("CIUDAD VALLES", "MEXICO"),
  ("CIUDAD VICTORIA", "MEXICO"),
  ("CIZAH", "UZBEKISTAN"),
  ("CIZRE", "TURKEY"),
  ("CLARE", "IRELAND"),
  ("CLARENDON", "JAMAICA"),
  ("CLERMONT-FERRAND", "FRANCE"),
  ("CƏLILABAD", "AZERBAIJAN"),
  ("CLOPPENBURG", "GERMANY"),
  ("CLUJ-NAPOCA", "ROMANIA"),
  ("CLUJ", "ROMANIA"),
  ("CẨM PHẢ", "VIETNAM"),
  ("CẦN THƠ", "VIETNAM"),
  ("COAHUILA", "MEXICO"),
  ("COATZACOALCOS", "MEXICO"),
  ("COCHABAMBA", "BOLIVIA"),
  ("COCLÉ", "PANAMA"),
  ("COESFELD", "GERMANY"),
  ("COIMBATORE", "INDIA"),
  ("COIMBRA", "PORTUGAL"),
  ("COJEDES", "VENEZUELA"),
  ("COLATINA", "BRAZIL"),
  ("COLCHAGUA", "CHILE"),
  ("COLCHESTER", "UNITED KINGDOM"),
  ("COLIMA", "MEXICO"),
  ("COLINA", "CHILE"),
  ("COLLINES", "BENIN"),
  ("COLOGNE", "GERMANY"),
  ("COLOMBO", "BRAZIL"),
  ("COLOMBO", "SRI LANKA"),
  ("COLÓN", "ARGENTINA"),
  ("COLÓN", "HONDURAS"),
  ("COLONIA", "URUGUAY"),
  ("COLÓN", "PANAMA"),
  ("COMAYAGUA", "HONDURAS"),
  ("COMITÁN DE DOMÍNGUEZ", "MEXICO"),
  ("COMODORO RIVADAVIA", "ARGENTINA"),
  ("COMOÉ", "BURKINA FASO"),
  ("COMPOSTELA VALLEY", "PHILIPPINES"),
  ("CONAKRY", "GUINEA"),
  ("CONCEPCIÓN", "CHILE"),
  ("CONCEPCIÓN", "PARAGUAY"),
  ("CONCORDIA", "ARGENTINA"),
  ("CONFLUENCIA", "ARGENTINA"),
  ("CONSELHEIRO LAFAIETE", "BRAZIL"),
  ("CONSTANŢA", "ROMANIA"),
  ("CONSTANTINE", "ALGERIA"),
  ("CONTAGEM", "BRAZIL"),
  ("CONTAI", "INDIA"),
  ("CONWY", "UNITED KINGDOM"),
  ("COPÁN", "HONDURAS"),
  ("COPIAPÓ", "CHILE"),
  ("COPPERBELT", "ZAMBIA"),
  ("COQUIMBO", "CHILE"),
  ("CORDILLERA", "CHILE"),
  ("CORDILLERA", "PARAGUAY"),
  ("CORDILLERA", "PHILIPPINES"),
  ("CÓRDOBA", "ARGENTINA"),
  ("CÓRDOBA", "COLOMBIA"),
  ("CÓRDOBA", "MEXICO"),
  ("CÓRDOBA", "SPAIN"),
  ("CORK", "IRELAND"),
  ("ÇORLU", "TURKEY"),
  ("CORNWALL", "UNITED KINGDOM"),
  ("CORONEL", "CHILE"),
  ("CORONEL FABRICIANO", "BRAZIL"),
  ("CORO", "VENEZUELA"),
  ("CORRÈZE", "FRANCE"),
  ("CORRIENTES", "ARGENTINA"),
  ("CORSE-DU-SUD", "FRANCE"),
  ("CORSE", "FRANCE"),
  ("CORTÉS", "HONDURAS"),
  ("ÇORUM", "TURKEY"),
  ("COTABATO CITY", "PHILIPPINES"),
  ("COTABATO", "PHILIPPINES"),
  ("CÔTE-D'OR", "FRANCE"),
  ("CÔTES-D'ARMOR", "FRANCE"),
  ("COTIA", "BRAZIL"),
  ("COTONOU", "BENIN"),
  ("COTOPAXI", "ECUADOR"),
  ("COTTBUS", "GERMANY"),
  ("COTZUMALGUAPA", "GUATEMALA"),
  ("COUFFO", "BENIN"),
  ("COUVA-TABAQUITE-TALPARO", "TRINIDAD AND TOBAGO"),
  ("COVASNA", "ROMANIA"),
  ("COVENTRY", "UNITED KINGDOM"),
  ("COYAH", "GUINEA"),
  ("CRACOW", "POLAND"),
  ("CRAIOVA", "ROMANIA"),
  ("CRATO", "BRAZIL"),
  ("CREUSE", "FRANCE"),
  ("CRICIÚMA", "BRAZIL"),
  ("CROSS RIVER", "NIGERIA"),
  ("CRUZ ALTA", "ARGENTINA"),
  ("CSONGRÁD", "HUNGARY"),
  ("CUAMBA", "MOZAMBIQUE"),
  ("CUANDO-CUBANGO", "ANGOLA"),
  ("CUANZA-NORTE", "ANGOLA"),
  ("CUANZA-SUL", "ANGOLA"),
  ("CUAUHTÉMOC", "MEXICO"),
  ("CUAUTITLÁN IZCALLI", "MEXICO"),
  ("CUAUTITLÁN", "MEXICO"),
  ("CUAUTLA", "MEXICO"),
  ("CÚA", "VENEZUELA"),
  ("CUBATÃO", "BRAZIL"),
  ("CÚCUTA", "COLOMBIA"),
  ("CUDDALORE", "INDIA"),
  ("CUDDAPAH", "INDIA"),
  ("CUENCA", "ECUADOR"),
  ("CUENCA", "SPAIN"),
  ("CUERNAVACA", "MEXICO"),
  ("CUIABÁ", "BRAZIL"),
  ("CULIACÁN ROSALES", "MEXICO"),
  ("CUMANÁ", "VENEZUELA"),
  ("CUMBRIA", "UNITED KINGDOM"),
  ("CUNDINAMARCA", "COLOMBIA"),
  ("CUNENE", "ANGOLA"),
  ("CURICÓ", "CHILE"),
  ("CURITIBA", "BRAZIL"),
  ("CURUG", "INDONESIA"),
  ("CUSCATLÁN", "EL SALVADOR"),
  ("CUSCO", "PERU"),
  ("CUTTACK", "INDIA"),
  ("CUVETTE", "CONGO"),
  ("CUXHAVEN", "GERMANY"),
  ("ÇUY", "KYRGYZSTAN"),
  ("CYANGUGU", "RWANDA"),
  ("CZĘSTOCHOWA", "POLAND"),
  ("DAAN", "CHINA"),
  ("DABOLA", "GUINEA"),
  ("DĄBROWA GÓRNICZA", "POLAND"),
  ("DACHAU", "GERMANY"),
  ("DADELDHURA", "NEPAL"),
  ("DADIANGAS", "PHILIPPINES"),
  ("DADRA AND NAGAR HAVELI", "INDIA"),
  ("DADRI", "INDIA"),
  ("DAGESTAN", "RUSSIA"),
  ("DAĞLIQ ŞIRVAN", "AZERBAIJAN"),
  ("DAGUPAN", "PHILIPPINES"),
  ("DAHME-SPREEWALD", "GERMANY"),
  ("DAHŪK", "IRAQ"),
  ("DAILEKH", "NEPAL"),
  ("DAIPO", "CHINA"),
  ("DAITO", "JAPAN"),
  ("DAKAR", "SENEGAL"),
  ("DAKSHINA KANNADA", "INDIA"),
  ("DAKSHIN BASTAR DANTEWADA", "INDIA"),
  ("DAKSHIN DINAJPUR", "INDIA"),
  ("DALABA", "GUINEA"),
  ("DALARNA", "SWEDEN"),
  ("DALFAN", "IRAN"),
  ("DALIAN", "CHINA"),
  ("DALIANG", "CHINA"),
  ("DÀLIÁO", "TAIWAN"),
  ("DALI", "CHINA"),
  ("DÀLI", "TAIWAN"),
  ("DALLO PURA", "INDIA"),
  ("DALOA", "IVORY COAST"),
  ("ĐÀ LẠT", "VIETNAM"),
  ("DAMAN AND DIU", "INDIA"),
  ("DAMANHOOR", "EGYPT"),
  ("DAMAN", "INDIA"),
  ("ĐAMAR", "YEMEN"),
  ("DAMASCUS", "SYRIA"),
  ("DAMAVAND", "IRAN"),
  ("DÂMBOVIŢA", "ROMANIA"),
  ("DAMIETTA", "EGYPT"),
  ("DAMOH", "INDIA"),
  ("DANDONG", "CHINA"),
  ("DANG DEOKHURI", "NEPAL"),
  ("ĐÀ NẴNG", "VIETNAM"),
  ("DANSHUI", "CHINA"),
  ("DÀNSHUĬ", "TAIWAN"),
  ("DARAB", "IRAN"),
  ("DAR-AS-SALAM", "EGYPT"),
  ("DAR'A", "SYRIA"),
  ("DARBHANGA", "INDIA"),
  ("DARCHULA", "NEPAL"),
  ("DAR ES SALAAM", "TANZANIA"),
  ("DARJILING", "INDIA"),
  ("DARLINGTON", "UNITED KINGDOM"),
  ("DARMSTADT-DIEBURG", "GERMANY"),
  ("DARMSTADT", "GERMANY"),
  ("DARNAH", "LIBYA"),
  ("DARRANG", "INDIA"),
  ("DAR SA'D", "YEMEN"),
  ("DASARAHALLI", "INDIA"),
  ("DASHT-E-ĀZADEGAN", "IRAN"),
  ("DASHTESTAN", "IRAN"),
  ("DASKA", "PAKISTAN"),
  ("DASMARIÑAS", "PHILIPPINES"),
  ("DAŞOĞUZ", "TURKMENISTAN"),
  ("DATIA", "INDIA"),
  ("DATONG", "CHINA"),
  ("DAUGAVPILS", "LATVIA"),
  ("DAUGAVPILS PILSĒTA", "LATVIA"),
  ("DAUSA", "INDIA"),
  ("DAVANAGERE", "INDIA"),
  ("DAVAO DEL NORTE", "PHILIPPINES"),
  ("DAVAO DEL SUR", "PHILIPPINES"),
  ("DAVAO ORIENTAL", "PHILIPPINES"),
  ("DAVAO", "PHILIPPINES"),
  ("DAWEI", "MYANMAR"),
  ("D̨AWRAN ANISS", "YEMEN"),
  ("DAWUKOU", "CHINA"),
  ("DAXIAN", "CHINA"),
  ("DAYKONDĪ", "AFGHANISTAN"),
  ("DAYR-AL-BALAH", "PALESTINE"),
  ("DAYR AZ-ZAWR", "SYRIA"),
  ("DAYR-AZ-ZAWR", "SYRIA"),
  ("DEBAGARH", "INDIA"),
  ("DEBRECEN", "HUNGARY"),
  ("DEBRE MARK'OS", "ETHIOPIA"),
  ("DEBRE ZEYIT", "ETHIOPIA"),
  ("DEBUB", "ERITREA"),
  ("DEBUB-KEIH-BAHRI", "ERITREA"),
  ("DĚČÍN", "CZECH REPUBLIC"),
  ("DEDOUGOU", "BURKINA FASO"),
  ("DEDZA", "MALAWI"),
  ("DEGGENDORF", "GERMANY"),
  ("DEHIWALA-MOUNT LAVINIA", "SRI LANKA"),
  ("DEHRADUN", "INDIA"),
  ("DEHRA DŪN", "INDIA"),
  ("DEHRI", "INDIA"),
  ("DEHUI", "CHINA"),
  ("DELHI", "INDIA"),
  ("DELICIAS", "MEXICO"),
  ("DELMAS", "HAITI"),
  ("DELMAS", "SOUTH AFRICA"),
  ("DELTA AMACURO", "VENEZUELA"),
  ("DELTA", "NIGERIA"),
  ("DEMERARA-MAHAICA", "GUYANA"),
  ("DENAU", "UZBEKISTAN"),
  ("DENGUÉLÉ", "IVORY COAST"),
  ("DENIZLI", "TURKEY"),
  ("DENPASAR", "INDONESIA"),
  ("DEOGHAR", "INDIA"),
  ("DEOLI", "INDIA"),
  ("DEORIA", "INDIA"),
  ("DEPOK", "INDONESIA"),
  ("DEQING", "CHINA"),
  ("DERA GHAZI KHAN", "PAKISTAN"),
  ("DERBENT", "RUSSIA"),
  ("DERBYSHIRE", "UNITED KINGDOM"),
  ("DERBY", "UNITED KINGDOM"),
  ("DERINCE", "TURKEY"),
  ("DESĒ", "ETHIOPIA"),
  ("DESUK", "EGYPT"),
  ("DEUX-SÈVRES", "FRANCE"),
  ("DEVENTER", "NETHERLANDS"),
  ("DEVGHAR", "INDIA"),
  ("DEVON", "UNITED KINGDOM"),
  ("DEWAS", "INDIA"),
  ("DEYANG", "CHINA"),
  ("DEZFŪL", "IRAN"),
  ("DEZHOU", "CHINA"),
  ("DHADING", "NEPAL"),
  ("DHAKA", "BANGLADESH"),
  ("DHALAI", "INDIA"),
  ("DHAMTARI", "INDIA"),
  ("DHANBAD", "INDIA"),
  ("DHANGADHI", "NEPAL"),
  ("DHANKUTA", "NEPAL"),
  ("DHANUSA", "NEPAL"),
  ("DHARAN", "NEPAL"),
  ("DHAR", "INDIA"),
  ("DHARMAPURI", "INDIA"),
  ("DHARMAVARAM", "INDIA"),
  ("DHARWAD", "INDIA"),
  ("DHAULPUR", "INDIA"),
  ("DHEMAJI", "INDIA"),
  ("DHENKANAL", "INDIA"),
  ("DHUBRI", "INDIA"),
  ("DHULE", "INDIA"),
  ("DIADEMA", "BRAZIL"),
  ("ĐI AS-SUFAL", "YEMEN"),
  ("DIBRUGARH", "INDIA"),
  ("DIDAO", "CHINA"),
  ("DIEGO MARTÍN", "TRINIDAD AND TOBAGO"),
  ("DIEPHOLZ", "GERMANY"),
  ("DIFFA", "NIGER"),
  ("DIGOS", "PHILIPPINES"),
  ("DIJON", "FRANCE"),
  ("DILI", "EAST TIMOR"),
  ("DILLI CANTONMENT", "INDIA"),
  ("DIMA HASAO", "INDIA"),
  ("DIMAPUR", "INDIA"),
  ("DIMITROVGRAD", "RUSSIA"),
  ("DINAJPŪR", "BANGLADESH"),
  ("DINAPUR", "INDIA"),
  ("ĐIỆN BIÊN", "VIETNAM"),
  ("DINDIGUL", "INDIA"),
  ("DINDORI", "INDIA"),
  ("DINGSHU", "CHINA"),
  ("DINGUIRAYE", "GUINEA"),
  ("DINGZHOU", "CHINA"),
  ("DIOURBEL", "SENEGAL"),
  ("DIPOLOG", "PHILIPPINES"),
  ("ĐĪ QAR", "IRAQ"),
  ("DIREDAWA", "ETHIOPIA"),
  ("DIRĒ DAWA", "ETHIOPIA"),
  ("DĪSA", "INDIA"),
  ("DISTRITO CAPITAL", "VENEZUELA"),
  ("DISTRITO CENTRAL", "HONDURAS"),
  ("DISTRITO ESCOLAR I", "ARGENTINA"),
  ("DISTRITO ESCOLAR II", "ARGENTINA"),
  ("DISTRITO ESCOLAR III", "ARGENTINA"),
  ("DISTRITO ESCOLAR IX", "ARGENTINA"),
  ("DISTRITO ESCOLAR V", "ARGENTINA"),
  ("DISTRITO ESCOLAR VI", "ARGENTINA"),
  ("DISTRITO ESCOLAR VII", "ARGENTINA"),
  ("DISTRITO ESCOLAR VIII", "ARGENTINA"),
  ("DISTRITO ESCOLAR X", "ARGENTINA"),
  ("DISTRITO ESCOLAR XI", "ARGENTINA"),
  ("DISTRITO ESCOLAR XII", "ARGENTINA"),
  ("DISTRITO ESCOLAR XIII", "ARGENTINA"),
  ("DISTRITO ESCOLAR XIV", "ARGENTINA"),
  ("DISTRITO ESCOLAR XIX", "ARGENTINA"),
  ("DISTRITO ESCOLAR XV", "ARGENTINA"),
  ("DISTRITO ESCOLAR XVII", "ARGENTINA"),
  ("DISTRITO ESCOLAR XVIII", "ARGENTINA"),
  ("DISTRITO ESCOLAR XX", "ARGENTINA"),
  ("DISTRITO ESCOLAR XXI", "ARGENTINA"),
  ("DISTRITO FEDERAL", "ARGENTINA"),
  ("DISTRITO FEDERAL", "BRAZIL"),
  ("DISTRITO FEDERAL", "MEXICO"),
  ("DISTRITO NACIONAL", "DOMINICAN REPUBLIC"),
  ("DITHMARSCHEN", "GERMANY"),
  ("DIVINÓPOLIS", "BRAZIL"),
  ("DIVO", "IVORY COAST"),
  ("DIX-HUIT MONTAGNES", "IVORY COAST"),
  ("DIYALA", "IRAQ"),
  ("DIYARBAKIR", "TURKEY"),
  ("DJELFA", "ALGERIA"),
  ("DJIBOUTI", "DJIBOUTI"),
  ("DJOUGOU", "BENIN"),
  ("ĐẮK LẮK", "VIETNAM"),
  ("ĐẮK NÔNG", "VIETNAM"),
  ("ĐỒNG BẰNG SÔNG CỬU LONG", "VIETNAM"),
  ("ĐỒNG BẰNG SÔNG HỒNG", "VIETNAM"),
  ("ĐỒNG NAI", "VIETNAM"),
  ("ĐỒNG THÁP", "VIETNAM"),
  ("DNIPRODZERZHYNS'K", "UKRAINE"),
  ("DNIPROPETROVS'KA", "UKRAINE"),
  ("DNIPROPETROVS'K", "UKRAINE"),
  ("DOBOJ", "BOSNIA AND HERZEGOVINA"),
  ("DOBRIČ", "BULGARIA"),
  ("DOBRICH", "BULGARIA"),
  ("DODA", "INDIA"),
  ("DODEKÁNISOS", "GREECE"),
  ("DODOMA", "TANZANIA"),
  ("DOHAD", "INDIA"),
  ("DOHA", "QATAR"),
  ("DOHAR", "BANGLADESH"),
  ("DOLAKHA", "NEPAL"),
  ("DOLJ", "ROMANIA"),
  ("DOLNOŚLĄSKIE", "POLAND"),
  ("DONAU-RIES", "GERMANY"),
  ("DONEGAL", "IRELAND"),
  ("DONETSK", "UKRAINE"),
  ("DONGA", "BENIN"),
  ("ĐÔNG BẮC BỘ", "VIETNAM"),
  ("DONGCHANG", "CHINA"),
  ("DONGGUAN", "CHINA"),
  ("DONGHAI", "CHINA"),
  ("DONGLI", "CHINA"),
  ("DONGLING", "CHINA"),
  ("ĐÔNG NAM BỘ", "VIETNAM"),
  ("DONGSHENG", "CHINA"),
  ("DONGTAI", "CHINA"),
  ("DONGYING", "CHINA"),
  ("DONGZHEN", "CHINA"),
  ("DORDOGNE", "FRANCE"),
  ("DORDRECHT", "NETHERLANDS"),
  ("DORI", "BURKINA FASO"),
  ("DORSET", "UNITED KINGDOM"),
  ("DORTMUND", "GERMANY"),
  ("DORŪD", "IRAN"),
  ("DOS HERMANAS", "SPAIN"),
  ("DOS QUEBRADAS", "COLOMBIA"),
  ("DOSSO", "NIGER"),
  ("DOTI", "NEPAL"),
  ("DOUALA", "CAMEROON"),
  ("DOUBS", "FRANCE"),
  ("DOUKKALA-ABDA", "MOROCCO"),
  ("DOURADOS", "BRAZIL"),
  ("DOWA", "MALAWI"),
  ("DRAMMEN", "NORWAY"),
  ("DRENTHE", "NETHERLANDS"),
  ("DRESDEN", "GERMANY"),
  ("DROBETA-TURNU SEVERIN", "ROMANIA"),
  ("DRÔME", "FRANCE"),
  ("DUARTE", "DOMINICAN REPUBLIC"),
  ("DUBAI", "UNITED ARAB EMIRATES"),
  ("DUBLIN", "IRELAND"),
  ("DUBRÉKA", "GUINEA"),
  ("DUBROVNIK-NERETVA", "CROATIA"),
  ("DUCHENG", "CHINA"),
  ("DUDLEY", "UNITED KINGDOM"),
  ("DUISBURG", "GERMANY"),
  ("DUITAMA", "COLOMBIA"),
  ("DUKUHTURI", "INDONESIA"),
  ("DŎULIÙ", "TAIWAN"),
  ("DUMAGUETE", "PHILIPPINES"),
  ("DUMAI", "INDONESIA"),
  ("DŪMA", "SYRIA"),
  ("DUM DUM", "INDIA"),
  ("DUMFRIES AND GALLOWAY", "UNITED KINGDOM"),
  ("DUMKA", "INDIA"),
  ("DUNAJSKÁ STREDA", "SLOVAKIA"),
  ("DUNDEE", "SOUTH AFRICA"),
  ("DUNDEE", "UNITED KINGDOM"),
  ("DUNEDIN", "NEW ZEALAND"),
  ("DUNGARPUR", "INDIA"),
  ("DUNHUA", "CHINA"),
  ("DUQUE DE CAXIAS", "BRAZIL"),
  ("DURANGO", "MEXICO"),
  ("DURBAN", "SOUTH AFRICA"),
  ("DÜREN", "GERMANY"),
  ("DURGAPUR", "INDIA"),
  ("DURG", "INDIA"),
  ("DURHAM", "UNITED KINGDOM"),
  ("DURRËS", "ALBANIA"),
  ("DUSHANBE", "TAJIKISTAN"),
  ("DÜSSELDORF", "GERMANY"),
  ("DUYÊN HẢI NAM TRUNG BỘ", "VIETNAM"),
  ("DÜZCE", "TURKEY"),
  ("DZERZHINSK", "RUSSIA"),
  ("DZOKHAR GALA, GROZNYY", "RUSSIA"),
  ("EAST AYRSHIRE", "UNITED KINGDOM"),
  ("EAST BERBICE-CORENTYNE", "GUYANA"),
  ("EASTBOURNE", "UNITED KINGDOM"),
  ("EAST DUNBARTONSHIRE", "UNITED KINGDOM"),
  ("EASTERN CAPE", "SOUTH AFRICA"),
  ("EASTERN EQUATORIA", "SOUTH SUDAN"),
  ("EASTERN", "GHANA"),
  ("EASTERN HIGHLANDS", "PAPUA NEW GUINEA"),
  ("EASTERN", "KENYA"),
  ("EASTERN SAMAR", "PHILIPPINES"),
  ("EASTERN", "SIERRA LEONE"),
  ("EASTERN", "UGANDA"),
  ("EASTERN VISAYAS", "PHILIPPINES"),
  ("EASTERN", "ZAMBIA"),
  ("EAST FLANDERS", "BELGIUM"),
  ("EAST GARO HILLS", "INDIA"),
  ("EAST GODAVARI", "INDIA"),
  ("EAST KHASI HILLS", "INDIA"),
  ("EAST LONDON", "SOUTH AFRICA"),
  ("EAST NEW BRITAIN", "PAPUA NEW GUINEA"),
  ("EAST NIMAR", "INDIA"),
  ("EAST RIDING OF YORKSHIRE", "UNITED KINGDOM"),
  ("EAST SEPIK", "PAPUA NEW GUINEA"),
  ("EAST SUSSEX", "UNITED KINGDOM"),
  ("EBERSBERG", "GERMANY"),
  ("EBETSU", "JAPAN"),
  ("EBINA", "JAPAN"),
  ("EBONYI", "NIGERIA"),
  ("ECATEPEC DE MORELOS", "MEXICO"),
  ("EDE", "NETHERLANDS"),
  ("EDFO", "EGYPT"),
  ("EDINBURGH", "UNITED KINGDOM"),
  ("EDIRNE", "TURKEY"),
  ("EDKO", "EGYPT"),
  ("EDMONTON", "CANADA"),
  ("EDO", "NIGERIA"),
  ("EHIME", "JAPAN"),
  ("EICHSFELD", "GERMANY"),
  ("EICHSTÄTT", "GERMANY"),
  ("EINDHOVEN", "NETHERLANDS"),
  ("ÈKIBASTUZ", "KAZAKHSTAN"),
  ("EKITI", "NIGERIA"),
  ("EKPOMA", "NIGERIA"),
  ("EL ALTO", "BOLIVIA"),
  ("EL ARISH", "EGYPT"),
  ("EL ASHER MEN RAMADAN", "EGYPT"),
  ("ELAZIĞ", "TURKEY"),
  ("ELBASAN", "ALBANIA"),
  ("EL BAYADH", "ALGERIA"),
  ("ELBE-ELSTER", "GERMANY"),
  ("ELBLĄG", "POLAND"),
  ("EL BOUNI", "ALGERIA"),
  ("ELBURZ", "IRAN"),
  ("EL CAFETAL", "VENEZUELA"),
  ("EL CARMEN", "ARGENTINA"),
  ("ELDORET", "KENYA"),
  ("ELEKTROSTAL", "RUSSIA"),
  ("EL EULMA", "ALGERIA"),
  ("EL FAIYUM", "EGYPT"),
  ("EL HAJEB", "MOROCCO"),
  ("ELISTA", "RUSSIA"),
  ("EL JADIDA, EL-JADIDA", "MOROCCO"),
  ("EL JADIDA", "MOROCCO"),
  ("EL KELAA DES SRAGHNA", "MOROCCO"),
  ("EL KHROUB", "ALGERIA"),
  ("EL LIMÓN", "VENEZUELA"),
  ("EL LOA", "CHILE"),
  ("EL MAHALLA EL KUBRA", "EGYPT"),
  ("EL MANSURA", "EGYPT"),
  ("EL ORO", "ECUADOR"),
  ("EL OUED", "ALGERIA"),
  ("ELOY ALFARO", "ECUADOR"),
  ("EL PARAÍSO", "HONDURAS"),
  ("EL PROGRESO", "GUATEMALA"),
  ("EL PROGRESO", "HONDURAS"),
  ("ELQUI", "CHILE"),
  ("EL TARF", "ALGERIA"),
  ("EL TIGRE", "VENEZUELA"),
  ("ELŪRU", "INDIA"),
  ("ELX", "SPAIN"),
  ("EL ZAGAZIG", "EGYPT"),
  ("EMALAHLENI", "SOUTH AFRICA"),
  ("EMBALENHLE", "SOUTH AFRICA"),
  ("EMBU", "BRAZIL"),
  ("EMILIA-ROMAGNA", "ITALY"),
  ("EMMENDINGEN", "GERMANY"),
  ("EMMEN", "NETHERLANDS"),
  ("EMNAMBITHI", "SOUTH AFRICA"),
  ("EMSLAND", "GERMANY"),
  ("ENCHENG", "CHINA"),
  ("ENGA", "PAPUA NEW GUINEA"),
  ("ENGELS", "RUSSIA"),
  ("ENNEPE-RUHR-KREIS", "GERMANY"),
  ("ENSCHEDE", "NETHERLANDS"),
  ("ENSENADA", "MEXICO"),
  ("ENTRE RÍOS", "ARGENTINA"),
  ("ENUGU", "NIGERIA"),
  ("ENVIGADO", "COLOMBIA"),
  ("ENZKREIS", "GERMANY"),
  ("EPUMALANGA", "SOUTH AFRICA"),
  ("EPWORTH", "ZIMBABWE"),
  ("EQLĪD", "IRAN"),
  ("ÉQUATEUR", "CONGO"),
  ("ERDING", "GERMANY"),
  ("EREĞLI", "TURKEY"),
  ("ERFURT", "GERMANY"),
  ("ERLANGEN", "GERMANY"),
  ("ERLANGEN-HÖCHSTADT", "GERMANY"),
  ("ERMERA", "EAST TIMOR"),
  ("ERNAKULAM", "INDIA"),
  ("ERODE", "INDIA"),
  ("ERONGO", "NAMIBIA"),
  ("ERRACHIDIA", "MOROCCO"),
  ("ERZGEBIRGSKREIS", "GERMANY"),
  ("ERZINCAN", "TURKEY"),
  ("ERZURUM", "TURKEY"),
  ("ESBJERG", "DENMARK"),
  ("ESCALANTE", "ARGENTINA"),
  ("ESCH-SUR-ALZETTE", "LUXEMBOURG"),
  ("ESCOBAR", "ARGENTINA"),
  ("ESCUINTLA", "GUATEMALA"),
  ("ESENYURT", "TURKEY"),
  ("EŞFAHAN", "IRAN"),
  ("ESFARAYEN", "IRAN"),
  ("ESKIŞEHIR", "TURKEY"),
  ("ESLAMABAD-E-GHARB", "IRAN"),
  ("ESLAMSHAHR", "IRAN"),
  ("ESMERALDAS", "ECUADOR"),
  ("ESPAILLAT", "DOMINICAN REPUBLIC"),
  ("ESPÍRITO SANTO", "BRAZIL"),
  ("ESPOO", "FINLAND"),
  ("ESSAOUIRA", "MOROCCO"),
  ("ESSEN", "GERMANY"),
  ("ES SENIA", "ALGERIA"),
  ("ESSEQUIBO ISLANDS-WEST DEMERARA", "GUYANA"),
  ("ESSEX", "UNITED KINGDOM"),
  ("ESSLINGEN", "GERMANY"),
  ("ESSONNE", "FRANCE"),
  ("EST", "CAMEROON"),
  ("ESTEBAN ECHEVERRÍA", "ARGENTINA"),
  ("ESTELÍ", "NICARAGUA"),
  ("ESTUAIRE", "GABON"),
  ("ETAH", "INDIA"),
  ("ETAWAH", "INDIA"),
  ("EURE-ET-LOIR", "FRANCE"),
  ("EURE", "FRANCE"),
  ("EUSKIRCHEN", "GERMANY"),
  ("ÉVROS", "GREECE"),
  ("ÉVVOIA", "GREECE"),
  ("EXETER", "UNITED KINGDOM"),
  ("EXTREMADURA", "SPAIN"),
  ("EZEIZA", "ARGENTINA"),
  ("EZHOU", "CHINA"),
  ("FACATATIVÁ", "COLOMBIA"),
  ("FADA N'GOURMA", "BURKINA FASO"),
  ("FAHS ANJRA", "MOROCCO"),
  ("FAISALABAD", "PAKISTAN"),
  ("FAIZABAD", "INDIA"),
  ("FALAVARJAN", "IRAN"),
  ("FALCÓN", "VENEZUELA"),
  ("FALKIRK", "UNITED KINGDOM"),
  ("FANGSHAN", "CHINA"),
  ("FARAH", "AFGHANISTAN"),
  ("FAR'-AL-'UDAYN", "YEMEN"),
  ("FARANAH", "GUINEA"),
  ("FARGONA", "UZBEKISTAN"),
  ("FARIDABAD", "INDIA"),
  ("FARĪDABAD", "INDIA"),
  ("FARIDKOT", "INDIA"),
  ("FARĪDKOT", "INDIA"),
  ("FARĪDPŪR", "BANGLADESH"),
  ("FARRUKHABAD", "INDIA"),
  ("FARS", "IRAN"),
  ("FARYAB", "AFGHANISTAN"),
  ("FASA", "IRAN"),
  ("FATEHABAD", "INDIA"),
  ("FATEHGARH SAHIB", "INDIA"),
  ("FATEHPUR", "INDIA"),
  ("FATICK", "SENEGAL"),
  ("FEDERACIJA BOSNA I HERCEGOVINA", "BOSNIA AND HERZEGOVINA"),
  ("FEDERAL CAPITAL AREA", "PAKISTAN"),
  ("FEDERALLY ADMINISTERED TRIBAL AREAS", "PAKISTAN"),
  ("FEIRA DE SANTANA", "BRAZIL"),
  ("FEJÉR", "HUNGARY"),
  ("FENGCHENG", "CHINA"),
  ("FÈNGSHAN", "TAIWAN"),
  ("FĒNGYUÁN", "TAIWAN"),
  ("FENĪ", "BANGLADESH"),
  ("FERNANDO DE LA MORA", "PARAGUAY"),
  ("FERRARA", "ITALY"),
  ("FERRAZ DE VASCONCELOS", "BRAZIL"),
  ("FÈS-BOULEMANE", "MOROCCO"),
  ("FES, FEZ", "MOROCCO"),
  ("FES", "MOROCCO"),
  ("FIANARANTSOA", "MADAGASCAR"),
  ("FIER", "ALBANIA"),
  ("FIFE", "UNITED KINGDOM"),
  ("FIGUIG", "MOROCCO"),
  ("FINISTÈRE", "FRANCE"),
  ("FIROZABAD", "INDIA"),
  ("FĪROZABAD", "INDIA"),
  ("FIROZPUR", "INDIA"),
  ("FĪROZPUR", "INDIA"),
  ("FĪRŪZABAD", "IRAN"),
  ("FLACQ", "MAURITIUS"),
  ("FLEMISH BRABANT", "BELGIUM"),
  ("FLEVOLAND", "NETHERLANDS"),
  ("FLINTSHIRE", "UNITED KINGDOM"),
  ("FLORENCE", "ITALY"),
  ("FLORENCIA", "COLOMBIA"),
  ("FLORENCIO VARELA", "ARGENTINA"),
  ("FLORIANÓPOLIS", "BRAZIL"),
  ("FLORIDABLANCA", "COLOMBIA"),
  ("FLY RIVER", "PAPUA NEW GUINEA"),
  ("FOGGIA", "ITALY"),
  ("FORCHHEIM", "GERMANY"),
  ("FORÉCARIAH", "GUINEA"),
  ("FORLÌ", "ITALY"),
  ("FORMOSA", "ARGENTINA"),
  ("FORTALEZA", "BRAZIL"),
  ("FORT-DE-FRANCE", "MARTINIQUE"),
  ("FOSHAN", "CHINA"),
  ("FOZ DO IGUAÇU", "BRAZIL"),
  ("FRANCA", "BRAZIL"),
  ("FRANCHE-COMTÉ", "FRANCE"),
  ("FRANCISCO MORATO", "BRAZIL"),
  ("FRANCISCO MORAZÁN", "HONDURAS"),
  ("FRANCISTOWN", "BOTSWANA"),
  ("FRANCO DA ROCHA", "BRAZIL"),
  ("FRANKFURT AM MAIN", "GERMANY"),
  ("FRANKFURT", "GERMANY"),
  ("FREDRIKSTAD/SARPSBORG", "NORWAY"),
  ("FREE STATE", "SOUTH AFRICA"),
  ("FREETOWN", "SIERRA LEONE"),
  ("FREIBURG", "GERMANY"),
  ("FREISING", "GERMANY"),
  ("FRESNILLO", "MEXICO"),
  ("FREUDENSTADT", "GERMANY"),
  ("FRIA", "GUINEA"),
  ("FRIBOURG", "SWITZERLAND"),
  ("FRIESLAND", "NETHERLANDS"),
  ("FRIULI-VENEZIA GIULIA", "ITALY"),
  ("FROMAGER", "IVORY COAST"),
  ("FRÝDEK-MÍSTEK", "CZECH REPUBLIC"),
  ("FTHIÓTIS", "GREECE"),
  ("FUCHŪ", "JAPAN"),
  ("FUENLABRADA", "SPAIN"),
  ("FUJIAN", "CHINA"),
  ("FUJIEDA", "JAPAN"),
  ("FUJI", "JAPAN"),
  ("FUJIMI", "JAPAN"),
  ("FUJIMINO", "JAPAN"),
  ("FUJINOMIYA", "JAPAN"),
  ("FUJISAWA", "JAPAN"),
  ("FUKAYA", "JAPAN"),
  ("FUKUI", "JAPAN"),
  ("FUKUOKA", "JAPAN"),
  ("FUKUSHIMA", "JAPAN"),
  ("FUKUYAMA", "JAPAN"),
  ("FULADU EAST", "GAMBIA"),
  ("FULDA", "GERMANY"),
  ("FULING", "CHINA"),
  ("FUNABASHI", "JAPAN"),
  ("FÜRSTENFELDBRUCK", "GERMANY"),
  ("FÜRTH", "GERMANY"),
  ("FUSAGASUGÁ", "COLOMBIA"),
  ("FUSHUN", "CHINA"),
  ("FUXIN", "CHINA"),
  ("FUYANG", "CHINA"),
  ("FUYU", "CHINA"),
  ("FUZHOU", "CHINA"),
  ("FÜZULI", "AZERBAIJAN"),
  ("GAALGUUDUUD", "SOMALIA"),
  ("GABORONE", "BOTSWANA"),
  ("GABROVO", "BULGARIA"),
  ("GABÚ", "GUINEA-BISSAU"),
  ("GACHSARAN", "IRAN"),
  ("GADAG", "INDIA"),
  ("GADCHIROLI", "INDIA"),
  ("GĂGĂUZIA", "MOLDOVA"),
  ("GAGNOA", "IVORY COAST"),
  ("GAJAPATI", "INDIA"),
  ("GAJUVAKA", "INDIA"),
  ("GALAŢI", "ROMANIA"),
  ("GALICIA", "SPAIN"),
  ("GALLE", "SRI LANKA"),
  ("GALWAY", "IRELAND"),
  ("GAMBELLA", "ETHIOPIA"),
  ("GAMPAHA", "SRI LANKA"),
  ("GANDAJIKA", "CONGO"),
  ("GANDERBAL", "INDIA"),
  ("GANDHĪDHAM", "INDIA"),
  ("GANDHINAGAR", "INDIA"),
  ("GANDHĪNAGAR", "INDIA"),
  ("GANGANAGAR", "INDIA"),
  ("GANGAPUR", "INDIA"),
  ("GANGAWATI", "INDIA"),
  ("GANGDONG", "CHINA"),
  ("GANJAM", "INDIA"),
  ("GANSU", "CHINA"),
  ("GANZHOU", "CHINA"),
  ("GANZOURGOU", "BURKINA FASO"),
  ("GAO", "MALI"),
  ("GAOMI", "CHINA"),
  ("GAOUAL", "GUINEA"),
  ("GAOXIÓNG SHÌ", "TAIWAN"),
  ("GAOXIÓNG", "TAIWAN"),
  ("GAOXIÓNG XIÀN", "TAIWAN"),
  ("GAOZHOU", "CHINA"),
  ("GARANHUNS", "BRAZIL"),
  ("ĠARB DARFŪR", "SUDAN"),
  ("GARCÍA", "MEXICO"),
  ("GARD", "FRANCE"),
  ("GARHWA", "INDIA"),
  ("GARHWAL", "INDIA"),
  ("GAROUA", "CAMEROON"),
  ("GARUE", "MOZAMBIQUE"),
  ("GARUT", "INDONESIA"),
  ("GASH-BARKA", "ERITREA"),
  ("GAUTAM BUDDHA NAGAR", "INDIA"),
  ("GAUTENG", "SOUTH AFRICA"),
  ("GÄVLEBORG", "SWEDEN"),
  ("ĠAWR", "AFGHANISTAN"),
  ("GAYA", "INDIA"),
  ("GAYBANDA", "BANGLADESH"),
  ("GAZA", "MOZAMBIQUE"),
  ("GAZIANTEP", "TURKEY"),
  ("GAZIPUR", "BANGLADESH"),
  ("GAZĪPŪR", "BANGLADESH"),
  ("ĠAZNĪ", "AFGHANISTAN"),
  ("ĠAZZAH", "PALESTINE"),
  ("GBOKO", "NIGERIA"),
  ("GDAŃSK", "POLAND"),
  ("GDYNIA", "POLAND"),
  ("GEBZE", "TURKEY"),
  ("GEDOO", "SOMALIA"),
  ("GEELONG", "AUSTRALIA"),
  ("GEGHARKUNIK", "ARMENIA"),
  ("GEJIU", "CHINA"),
  ("GELDERLAND", "NETHERLANDS"),
  ("GELSENKIRCHEN", "GERMANY"),
  ("GEMENA", "CONGO"),
  ("GENERAL JOSÉ DE SAN MARTÍN", "ARGENTINA"),
  ("GENERAL LÓPEZ", "ARGENTINA"),
  ("GENERAL MARIANO ALVAREZ", "PHILIPPINES"),
  ("GENERAL OBLIGADO", "ARGENTINA"),
  ("GENERAL PEDERNERA", "ARGENTINA"),
  ("GENERAL PUEYRREDÓN", "ARGENTINA"),
  ("GENERAL ROCA", "ARGENTINA"),
  ("GENERAL SAN MARTÍN", "ARGENTINA"),
  ("GENERAL TRIAS", "PHILIPPINES"),
  ("GENEVA", "SWITZERLAND"),
  ("GENÈVE", "SWITZERLAND"),
  ("GENOA", "ITALY"),
  ("GENT", "BELGIUM"),
  ("GEORGE", "SOUTH AFRICA"),
  ("GEORGETOWN", "GUYANA"),
  ("GEORGETOWN", "MALAYSIA"),
  ("GERGA", "EGYPT"),
  ("GERMERSHEIM", "GERMANY"),
  ("GERS", "FRANCE"),
  ("GETAFE", "SPAIN"),
  ("GHARB-CHRARDA-BÉNI HSSEN", "MOROCCO"),
  ("GHARBIA", "EGYPT"),
  ("GHARDAIA", "ALGERIA"),
  ("GHARDAÏA", "ALGERIA"),
  ("GHATLODIYA", "INDIA"),
  ("GHAZIABAD", "INDIA"),
  ("GHAZIPUR", "INDIA"),
  ("GHAZĪPUR", "INDIA"),
  ("GIA LAI", "VIETNAM"),
  ("GIESSEN", "GERMANY"),
  ("GIFHORN", "GERMANY"),
  ("GIFU", "JAPAN"),
  ("GIJÓN", "SPAIN"),
  ("GIKONGORO", "RWANDA"),
  ("GĪLAN", "IRAN"),
  ("GIRESUN", "TURKEY"),
  ("GIRIDIH", "INDIA"),
  ("GIRONA", "SPAIN"),
  ("GIRÓN", "COLOMBIA"),
  ("GIRONDE", "FRANCE"),
  ("GISENYI", "RWANDA"),
  ("GITARAMA", "RWANDA"),
  ("GITEGA", "BURUNDI"),
  ("GIUGLIANO IN CAMPANIA", "ITALY"),
  ("GIURGIU", "ROMANIA"),
  ("GIZEH", "EGYPT"),
  ("GLASGOW", "UNITED KINGDOM"),
  ("GLIFÁDA", "GREECE"),
  ("GLIWICE", "POLAND"),
  ("GLOUCESTERSHIRE", "UNITED KINGDOM"),
  ("GLOUCESTER", "UNITED KINGDOM"),
  ("GNAGNA", "BURKINA FASO"),
  ("GƏNCƏ", "AZERBAIJAN"),
  ("GƏNCƏ-QAZAX", "AZERBAIJAN"),
  ("GOA", "INDIA"),
  ("GOALPARA", "INDIA"),
  ("GODDA", "INDIA"),
  ("GODHRA", "INDIA"),
  ("GODOY CRUZ", "ARGENTINA"),
  ("GOIÂNIA", "BRAZIL"),
  ("GOIÁS", "BRAZIL"),
  ("GOJRA", "PAKISTAN"),
  ("GOKALPUR", "INDIA"),
  ("GOKWE NORTH", "ZIMBABWE"),
  ("GOKWE SOUTH", "ZIMBABWE"),
  ("GOLAGHAT", "INDIA"),
  ("GOLD COAST-TWEED HEADS", "AUSTRALIA"),
  ("GOLESTAN", "IRAN"),
  ("GOMA", "CONGO"),
  ("GOMBE", "NIGERIA"),
  ("GÓMEZ PALACIO", "MEXICO"),
  ("GONABAD", "IRAN"),
  ("GONAÏVES", "HAITI"),
  ("GONBAD-E KAVŪS", "IRAN"),
  ("GONBAD-E-KAVŪS", "IRAN"),
  ("GONDA", "INDIA"),
  ("GONDAL", "INDIA"),
  ("GONDAR", "ETHIOPIA"),
  ("GONDIYA", "INDIA"),
  ("GONGZHULING", "CHINA"),
  ("GOPALGANJ", "BANGLADESH"),
  ("GOPALGANJ", "INDIA"),
  ("GOPALPUR", "INDIA"),
  ("GÖPPINGEN", "GERMANY"),
  ("GORAKHPUR", "INDIA"),
  ("GORENJSKA", "SLOVENIA"),
  ("GORGAN", "IRAN"),
  ("GORIŠKA", "SLOVENIA"),
  ("GORJ", "ROMANIA"),
  ("GORKHA", "NEPAL"),
  ("GÖRLITZ", "GERMANY"),
  ("GORNO-BADAKHSHAN", "TAJIKISTAN"),
  ("GOROM-GOROM", "BURKINA FASO"),
  ("GOROMONZI", "ZIMBABWE"),
  ("GORONTALO", "INDONESIA"),
  ("GORZÓW WIELKOPOLSKI", "POLAND"),
  ("GOSLAR", "GERMANY"),
  ("GOSTIVAR", "MACEDONIA"),
  ("GÖTEBORG", "SWEDEN"),
  ("GOTHA", "GERMANY"),
  ("GÖTTINGEN", "GERMANY"),
  ("GOURMA", "BURKINA FASO"),
  ("GOVERNADOR VALADARES", "BRAZIL"),
  ("GOVERNMENT CONTROLLED AREA", "CYPRUS"),
  ("GÖYÇAY", "AZERBAIJAN"),
  ("GRAD ZAGREB", "CROATIA"),
  ("GRAFSCHAFT BENTHEIM", "GERMANY"),
  ("GRAHAMSTOWN", "SOUTH AFRICA"),
  ("GRANADA", "NICARAGUA"),
  ("GRANADA", "SPAIN"),
  ("GRAND'ANSE", "HAITI"),
  ("GRAND BASSA", "LIBERIA"),
  ("GRAND CAPE MOUNT", "LIBERIA"),
  ("GRANDE-TERRE", "GUADELOUPE"),
  ("GRAND GEDEH", "LIBERIA"),
  ("GRAND PORT", "MAURITIUS"),
  ("GRANMA", "CUBA"),
  ("GRAUBÜNDEN", "SWITZERLAND"),
  ("GRAVATAÍ", "BRAZIL"),
  ("GRAZ", "AUSTRIA"),
  ("GREATER ACCRA", "GHANA"),
  ("GREATER MANCHESTER", "UNITED KINGDOM"),
  ("GREIZ", "GERMANY"),
  ("GRENOBLE", "FRANCE"),
  ("GROGOL", "INDONESIA"),
  ("GRONINGEN", "NETHERLANDS"),
  ("GROSS-GERAU", "GERMANY"),
  ("GUACARA", "VENEZUELA"),
  ("GUADALAJARA", "MEXICO"),
  ("GUADALAJARA", "SPAIN"),
  ("GUADALUPE", "MEXICO"),
  ("GUAIRÁ", "PARAGUAY"),
  ("GUALEGUAYCHÚ", "ARGENTINA"),
  ("GUANACASTE", "COSTA RICA"),
  ("GUANAJUATO", "MEXICO"),
  ("GUANARE", "VENEZUELA"),
  ("GUANGDONG", "CHINA"),
  ("GUANGSHUI", "CHINA"),
  ("GUANGXI", "CHINA"),
  ("GUANGYUAN", "CHINA"),
  ("GUANGZHOU", "CHINA"),
  ("GUANJIAO", "CHINA"),
  ("GUANTÁNAMO", "CUBA"),
  ("GUARAPARI", "BRAZIL"),
  ("GUARAPUAVA", "BRAZIL"),
  ("GUARATINGUETÁ", "BRAZIL"),
  ("GUARENAS", "VENEZUELA"),
  ("GUÁRICO", "VENEZUELA"),
  ("GUARUJÁ", "BRAZIL"),
  ("GUARULHOS", "BRAZIL"),
  ("GUATEMALA", "GUATEMALA"),
  ("GUATIRE", "VENEZUELA"),
  ("GUAVIARE", "COLOMBIA"),
  ("GUAYAMA", "PUERTO RICO"),
  ("GUAYAQUIL", "ECUADOR"),
  ("GUAYAS", "ECUADOR"),
  ("GUAYMALLÉN", "ARGENTINA"),
  ("GUAYNABO", "PUERTO RICO"),
  ("GŪDALŪR", "INDIA"),
  ("GUDIVADA", "INDIA"),
  ("GUDIYATTAM", "INDIA"),
  ("GUÉCKÉDOU", "GUINEA"),
  ("GUÉKÉDOU", "GUINEA"),
  ("GUELMA", "ALGERIA"),
  ("GUELMIM", "MOROCCO"),
  ("GUELPH", "CANADA"),
  ("GUÉRA", "CHAD"),
  ("GÜER AIKE", "ARGENTINA"),
  ("GUERRERO", "MEXICO"),
  ("GUIDIMAGHA", "MAURITANIA"),
  ("GUIGUINTO", "PHILIPPINES"),
  ("GUILIN", "CHINA"),
  ("GUIMARAS", "PHILIPPINES"),
  ("GUINÉE FORESTIÈRE", "GUINEA"),
  ("GUIPÚZCOA", "SPAIN"),
  ("GUĪSHAN", "TAIWAN"),
  ("GUIYANG", "CHINA"),
  ("GUIZHOU", "CHINA"),
  ("GUJARAT", "INDIA"),
  ("GUJRANWALA", "PAKISTAN"),
  ("GUJRAT", "PAKISTAN"),
  ("GULBARGA", "INDIA"),
  ("GULF", "PAPUA NEW GUINEA"),
  ("GULMI", "NEPAL"),
  ("GULU", "UGANDA"),
  ("GUMLA", "INDIA"),
  ("GUMMA", "JAPAN"),
  ("GUNA", "INDIA"),
  ("GUNTAKAL", "INDIA"),
  ("GUNTUR", "INDIA"),
  ("GUNTŪR", "INDIA"),
  ("GUNUNG PUTRI", "INDONESIA"),
  ("GÜNZBURG", "GERMANY"),
  ("GURDASPUR", "INDIA"),
  ("GURGAON", "INDIA"),
  ("GURGUL", "MAURITANIA"),
  ("GURIA", "GEORGIA"),
  ("GURUÉ", "MOZAMBIQUE"),
  ("GURUVE", "ZIMBABWE"),
  ("GUSAU", "NIGERIA"),
  ("GÜTERSLOH", "GERMANY"),
  ("GUTU", "ZIMBABWE"),
  ("GUWAHATI", "INDIA"),
  ("GUYONG", "PHILIPPINES"),
  ("GWALIOR", "INDIA"),
  ("GWANDA", "ZIMBABWE"),
  ("GWERU", "ZIMBABWE"),
  ("GWYNEDD", "UNITED KINGDOM"),
  ("GYŐR", "HUNGARY"),
  ("GYŐR-MOSON-SOPRON", "HUNGARY"),
  ("GYUMRI", "ARMENIA"),
  ("HAARLEMMERMEER", "NETHERLANDS"),
  ("HAARLEM", "NETHERLANDS"),
  ("HABĪGANJ", "BANGLADESH"),
  ("HABIKINO", "JAPAN"),
  ("HABRA", "INDIA"),
  ("HACHINOHE", "JAPAN"),
  ("HACHIOJI", "JAPAN"),
  ("HADANO", "JAPAN"),
  ("HADAROM", "ISRAEL"),
  ("H̱ADĪR", "YEMEN"),
  ("HADRAMAUT", "YEMEN"),
  ("HAEJU", "NORTH KOREA"),
  ("H̨AFAR AL-BAŢIN", "SAUDI ARABIA"),
  ("HAFIZABAD", "PAKISTAN"),
  ("HAGEN", "GERMANY"),
  ("HÀ GIANG", "VIETNAM"),
  ("HAGONOY", "PHILIPPINES"),
  ("HAIBOWAN", "CHINA"),
  ("HAICHENG", "CHINA"),
  ("HAIFA", "ISRAEL"),
  ("HAIKOU", "CHINA"),
  ("HAILAKANDI", "INDIA"),
  ("HAILAR", "CHINA"),
  ("H̨A'IL", "SAUDI ARABIA"),
  ("HAILUN", "CHINA"),
  ("HAIMEN", "CHINA"),
  ("HAINAN", "CHINA"),
  ("HAINAUT", "BELGIUM"),
  ("HAJDÚ-BIHAR", "HUNGARY"),
  ("HAJĪPUR", "INDIA"),
  ("HAJJAH", "YEMEN"),
  ("HAKKARI", "TURKEY"),
  ("HAKODATE", "JAPAN"),
  ("HAKUSAN", "JAPAN"),
  ("H̱ALDA WA TILA'-AL-'ALĪ", "JORDAN"),
  ("HALDWANI", "INDIA"),
  ("H̨ALFA AL-JADĪDAH", "SUDAN"),
  ("HALIFAX", "CANADA"),
  ("HALĪSAHAR", "INDIA"),
  ("HALLAND", "SWEDEN"),
  ("HALLE", "GERMANY"),
  ("HALTON", "UNITED KINGDOM"),
  ("HAMADAN", "IRAN"),
  ("H̨AMAH", "SYRIA"),
  ("HAMAMATSU", "JAPAN"),
  ("HAMBANTOTA", "SRI LANKA"),
  ("HAMBURG", "GERMANY"),
  ("HAMELN-PYRMONT", "GERMANY"),
  ("HAMERKAZ", "ISRAEL"),
  ("HAMGYŎNGBUKTO", "NORTH KOREA"),
  ("HAMGYŎNGNAMDO", "NORTH KOREA"),
  ("HAMHŬNG", "NORTH KOREA"),
  ("HAMI", "CHINA"),
  ("HAMILTON", "CANADA"),
  ("HAMILTON", "NEW ZEALAND"),
  ("HAMIRPUR", "INDIA"),
  ("H̱AMĪS MUŠAYŢ", "SAUDI ARABIA"),
  ("HAMM", "GERMANY"),
  ("HAMPARAN PERAK", "INDONESIA"),
  ("HAMPSHIRE", "UNITED KINGDOM"),
  ("HANAM", "SOUTH KOREA"),
  ("HÀ NAM", "VIETNAM"),
  ("HANDA", "JAPAN"),
  ("HANDAN", "CHINA"),
  ("H̱ANFIR", "YEMEN"),
  ("HANGU", "CHINA"),
  ("HANGZHOU", "CHINA"),
  ("HANIÁ", "GREECE"),
  ("HÀ NỘI", "VIETNAM"),
  ("HANNOVER", "GERMANY"),
  ("HANOVER", "GERMANY"),
  ("HANTING", "CHINA"),
  ("HANUMANGARH", "INDIA"),
  ("H̱AN YŪNIS", "PALESTINE"),
  ("HANZHONG", "CHINA"),
  ("HAORA", "INDIA"),
  ("HAPUR", "INDIA"),
  ("H̨ARAD̨", "YEMEN"),
  ("HARAR", "ETHIOPIA"),
  ("HARARE", "ZIMBABWE"),
  ("HARBIN", "CHINA"),
  ("HARBURG", "GERMANY"),
  ("HARDA", "INDIA"),
  ("HARDOI", "INDIA"),
  ("HARDOĪ", "INDIA"),
  ("HARDWAR", "INDIA"),
  ("HARGEYSA", "SOMALIA"),
  ("HARGHITA", "ROMANIA"),
  ("HARIDWAR", "INDIA"),
  ("HARJU", "ESTONIA"),
  ("HARYANA", "INDIA"),
  ("HARZ", "GERMANY"),
  ("HASKOVO", "BULGARIA"),
  ("HASSAN", "INDIA"),
  ("HASSIA", "GERMANY"),
  ("HASSI BAHBAH", "ALGERIA"),
  ("HASTSAL", "INDIA"),
  ("HATAY", "TURKEY"),
  ("HÀ TÂY", "VIETNAM"),
  ("HATHRAS", "INDIA"),
  ("HÀ TĨNH", "VIETNAM"),
  ("HAT YAI", "THAILAND"),
  ("HAUT-CONGO", "CONGO"),
  ("HAUTE-CORSE", "FRANCE"),
  ("HAUTE-GARONNE", "FRANCE"),
  ("HAUTE GUINÉE", "GUINEA"),
  ("HAUTE-KOTTO", "CENTRAL AFRICAN REPUBLIC"),
  ("HAUTE-LOIRE", "FRANCE"),
  ("HAUTE-MARNE", "FRANCE"),
  ("HAUTE-NORMANDIE", "FRANCE"),
  ("HAUTES-ALPES", "FRANCE"),
  ("HAUTE-SAÔNE", "FRANCE"),
  ("HAUTE-SAVOIE", "FRANCE"),
  ("HAUTES-PYRÉNÉES", "FRANCE"),
  ("HAUTE-VIENNE", "FRANCE"),
  ("HAUT-OGOOUÉ", "GABON"),
  ("HAUT-RHIN", "FRANCE"),
  ("HAUT-SASSANDRA", "IVORY COAST"),
  ("HAUTS-DE-SEINE", "FRANCE"),
  ("HAVANNA", "CUBA"),
  ("HAVELLAND", "GERMANY"),
  ("HAVERI", "INDIA"),
  ("HAWALLĪ", "KUWAIT"),
  ("HAWKE'S BAY", "NEW ZEALAND"),
  ("HAẔAFON", "ISRAEL"),
  ("HAZARIBAGH", "INDIA"),
  ("HAZARĪBAG", "INDIA"),
  ("HEBEI", "CHINA"),
  ("HEBI", "CHINA"),
  ("HEBRON", "PALESTINE"),
  ("HEDMARK", "NORWAY"),
  ("HEFEI", "CHINA"),
  ("HEGANG", "CHINA"),
  ("HEIDEKREIS", "GERMANY"),
  ("HEIDELBERG", "GERMANY"),
  ("HEIDENHEIM", "GERMANY"),
  ("HEIHE", "CHINA"),
  ("HEILBRONN", "GERMANY"),
  ("HEILIN", "CHINA"),
  ("HEILONGJIANG", "CHINA"),
  ("HEINSBERG", "GERMANY"),
  ("HEKOU", "CHINA"),
  ("HELSINKI", "FINLAND"),
  ("HENAN", "CHINA"),
  ("HENGSHAN", "CHINA"),
  ("HENGSHUI", "CHINA"),
  ("HENGYANG", "CHINA"),
  ("HENZADA", "MYANMAR"),
  ("HEPO", "CHINA"),
  ("HERAT", "AFGHANISTAN"),
  ("HÉRAULT", "FRANCE"),
  ("HERCEGOVAČKO-NERETVANSKI", "BOSNIA AND HERZEGOVINA"),
  ("HEREDIA", "COSTA RICA"),
  ("HEREFORDSHIRE", "UNITED KINGDOM"),
  ("HERFORD", "GERMANY"),
  ("HERMOSILLO", "MEXICO"),
  ("HERNE", "GERMANY"),
  ("HEROICA MATAMOROS", "MEXICO"),
  ("HEROICA NOGALES", "MEXICO"),
  ("HERÓICA PUEBLA DE ZARAGOZA", "MEXICO"),
  ("HERRERA", "PANAMA"),
  ("HERSFELD-ROTENBURG", "GERMANY"),
  ("HERTFORDSHIRE", "UNITED KINGDOM"),
  ("HERZOGTUM LAUENBURG", "GERMANY"),
  ("HETIAN", "CHINA"),
  ("HEVES", "HUNGARY"),
  ("HEZE", "CHINA"),
  ("HHOHHO", "SWAZILAND"),
  ("HIDALGO DEL PARRAL", "MEXICO"),
  ("HIDALGO", "MEXICO"),
  ("HẢI DƯƠNG", "VIETNAM"),
  ("HIGASHIHIROSHIMA", "JAPAN"),
  ("HIGASHIKURUME", "JAPAN"),
  ("HIGASHIMURAYAMA", "JAPAN"),
  ("HIGASHIOSAKA", "JAPAN"),
  ("HIGHLAND", "UNITED KINGDOM"),
  ("HIGÜEY", "DOMINICAN REPUBLIC"),
  ("HIIRAAN", "SOMALIA"),
  ("HIKONE", "JAPAN"),
  ("HILDESHEIM", "GERMANY"),
  ("HILMAND", "AFGHANISTAN"),
  ("HIMACHAL PRADESH", "INDIA"),
  ("HIMEJI", "JAPAN"),
  ("H̨IMŞ", "SYRIA"),
  ("HÎNCEŞTI", "MOLDOVA"),
  ("HINDAUN", "INDIA"),
  ("HINDUPUR", "INDIA"),
  ("HINGANGHAT", "INDIA"),
  ("HINGOLI", "INDIA"),
  ("HINO", "JAPAN"),
  ("HẢI PHÒNG", "VIETNAM"),
  ("HIRAKATA", "JAPAN"),
  ("HIRATSUKA", "JAPAN"),
  ("HIROSAKI", "JAPAN"),
  ("HIROSHIMA", "JAPAN"),
  ("HISAR", "INDIA"),
  ("HITACHI", "JAPAN"),
  ("HITACHINAKA", "JAPAN"),
  ("HẠ LONG", "VIETNAM"),
  ("HƯNG YÊN", "VIETNAM"),
  ("HÒA BÌNH", "VIETNAM"),
  ("HOBART", "AUSTRALIA"),
  ("HO CHI MINH CITY", "VIETNAM"),
  ("HO CHI MINH", "VIETNAM"),
  ("HOCHSAUERLANDKREIS", "GERMANY"),
  ("HOCHTAUNUSKREIS", "GERMANY"),
  ("HODH ECH CHARGUI", "MAURITANIA"),
  ("HODH EL GHARBI", "MAURITANIA"),
  ("HODONÍN", "CZECH REPUBLIC"),
  ("HÖFUÐBORGARSVÆÐI", "ICELAND"),
  ("HOFU", "JAPAN"),
  ("HOHENLOHEKREIS", "GERMANY"),
  ("HOHHOT", "CHINA"),
  ("HOKKAIDO", "JAPAN"),
  ("HOLGUÍN", "CUBA"),
  ("H̱OLON", "ISRAEL"),
  ("HOMEL'", "BELARUS"),
  ("HOMJEL'", "BELARUS"),
  ("HONGGANG", "CHINA"),
  ("HONGHU", "CHINA"),
  ("HONG KONG", "CHINA"),
  ("HORAZM", "UZBEKISTAN"),
  ("HORDALAND", "NORWAY"),
  ("HORGEN", "SWITZERLAND"),
  ("HORLIVKA", "UKRAINE"),
  ("HORMOZGAN", "IRAN"),
  ("HORTOLÂNDIA", "BRAZIL"),
  ("HOSHANGABAD", "INDIA"),
  ("HOSHIARPUR", "INDIA"),
  ("HOSPET", "INDIA"),
  ("HOSŪR", "INDIA"),
  ("HOUAPHANH", "LAOS"),
  ("HOUET", "BURKINA FASO"),
  ("HOUMA", "CHINA"),
  ("HOVD", "MONGOLIA"),
  ("HOVEDSTADEN", "DENMARK"),
  ("HÖVSGÖL", "MONGOLIA"),
  ("HÖXTER", "GERMANY"),
  ("HRADEC KRÁLOVÉ", "CZECH REPUBLIC"),
  ("HRODNA", "BELARUS"),
  ("HUADIAN", "CHINA"),
  ("HUAIBEI", "CHINA"),
  ("HUAIHUA", "CHINA"),
  ("HUAINAN", "CHINA"),
  ("HUAIYIN", "CHINA"),
  ("HUALIÁN", "TAIWAN"),
  ("HUAMBO", "ANGOLA"),
  ("HUANCAVELICA", "PERU"),
  ("HUANCAYO", "PERU"),
  ("HUANGCUN", "CHINA"),
  ("HUANGGANG", "CHINA"),
  ("HUANGPU", "CHINA"),
  ("HUANGSHI", "CHINA"),
  ("HUANGYAN", "CHINA"),
  ("HUANGZHOU", "CHINA"),
  ("HUÁNUCO", "PERU"),
  ("HUARAZ", "PERU"),
  ("HUAZHOU", "CHINA"),
  ("H̨UBAYŠ", "YEMEN"),
  ("HUBEI", "CHINA"),
  ("HUBLI", "INDIA"),
  ("HÜCAYLI", "UZBEKISTAN"),
  ("HUDDERSFIELD", "UNITED KINGDOM"),
  ("HUEHUETENANGO", "GUATEMALA"),
  ("HUELVA", "SPAIN"),
  ("HUESCA", "SPAIN"),
  ("HẬU GIANG", "VIETNAM"),
  ("HUGLI-CHUNCHURA", "INDIA"),
  ("HUGLI", "INDIA"),
  ("HUICHENG", "CHINA"),
  ("HUÍLA", "ANGOLA"),
  ("HUILA", "COLOMBIA"),
  ("HUIZHOU", "CHINA"),
  ("HULAN", "CHINA"),
  ("HULAN ERGI", "CHINA"),
  ("HUMACAO", "PUERTO RICO"),
  ("HUMEN", "CHINA"),
  ("HUNAN", "CHINA"),
  ("HUNEDOARA", "ROMANIA"),
  ("HŬNGNAM", "NORTH KOREA"),
  ("H̱URAYBAT AS-SŪQ", "JORDAN"),
  ("HURGHADA", "EGYPT"),
  ("HURLINGHAM", "ARGENTINA"),
  ("HURUNGWE", "ZIMBABWE"),
  ("H̱UTAYLAH", "IRAQ"),
  ("HUẾ", "VIETNAM"),
  ("HUZHOU", "CHINA"),
  ("HWANGE", "ZIMBABWE"),
  ("HWANGHAEBUKTO", "NORTH KOREA"),
  ("HWANGHAENAMDO", "NORTH KOREA"),
  ("HWASŎNG", "SOUTH KOREA"),
  ("HYDERABAD", "INDIA"),
  ("HYOGO", "JAPAN"),
  ("IALOMIŢA", "ROMANIA"),
  ("IAŞI", "ROMANIA"),
  ("IBADAN", "NIGERIA"),
  ("IBAGUÉ", "COLOMBIA"),
  ("IBARAKI", "JAPAN"),
  ("IBARRA", "ECUADOR"),
  ("IBB", "YEMEN"),
  ("IBIRITÉ", "BRAZIL"),
  ("'IBRĪ", "OMAN"),
  ("ICA", "PERU"),
  ("ICHALKARANJI", "INDIA"),
  ("ICHIHARA", "JAPAN"),
  ("ICHIKAWA", "JAPAN"),
  ("ICHINOSEKI", "JAPAN"),
  ("ICHON", "SOUTH KOREA"),
  ("IDAH", "NIGERIA"),
  ("IDA-VIRU", "ESTONIA"),
  ("IDLIB", "SYRIA"),
  ("IDUKKI", "INDIA"),
  ("IFE", "NIGERIA"),
  ("IFRANE", "MOROCCO"),
  ("IFUGAO", "PHILIPPINES"),
  ("IGA", "JAPAN"),
  ("IGDIR", "TURKEY"),
  ("IGUALA DE LA INDEPENDENCIA", "MEXICO"),
  ("IHIALA", "NIGERIA"),
  ("IIDA", "JAPAN"),
  ("IJEBU IGBO", "NIGERIA"),
  ("IJEBU ODE", "NIGERIA"),
  ("IKARE", "NIGERIA"),
  ("IKEDA", "JAPAN"),
  ("IKIRE", "NIGERIA"),
  ("IKIRUN", "NIGERIA"),
  ("IKOMA", "JAPAN"),
  ("IKSAN", "SOUTH KOREA"),
  ("ĪLAM", "IRAN"),
  ("ILAM", "NEPAL"),
  ("ÎLE-DE-FRANCE", "FRANCE"),
  ("ÎLES DU VENT", "FRENCH POLYNESIA"),
  ("ILESHA", "NIGERIA"),
  ("ILFOV", "ROMANIA"),
  ("ILHÉUS", "BRAZIL"),
  ("ILÍA", "GREECE"),
  ("ILIGAN", "PHILIPPINES"),
  ("ILLE-ET-VILAINE", "FRANCE"),
  ("ILM-KREIS", "GERMANY"),
  ("ILOBU", "NIGERIA"),
  ("ILOCOS NORTE", "PHILIPPINES"),
  ("ILOCOS", "PHILIPPINES"),
  ("ILOCOS SUR", "PHILIPPINES"),
  ("ILOILO", "PHILIPPINES"),
  ("ILORIN", "NIGERIA"),
  ("IMABARI", "JAPAN"),
  ("IMATHÍA", "GREECE"),
  ("IMBABURA", "ECUADOR"),
  ("IMERETI", "GEORGIA"),
  ("İMIŞLI", "AZERBAIJAN"),
  ("IMO", "NIGERIA"),
  ("IMPERATRIZ", "BRAZIL"),
  ("IMPHAL EAST", "INDIA"),
  ("IMPHAL", "INDIA"),
  ("IMPHAL WEST", "INDIA"),
  ("IMUS", "PHILIPPINES"),
  ("INAZAWA", "JAPAN"),
  ("INCHŎN", "SOUTH KOREA"),
  ("INDAIATUBA", "BRAZIL"),
  ("INDORE", "INDIA"),
  ("INDRAMAYU", "INDONESIA"),
  ("INDRE-ET-LOIRE", "FRANCE"),
  ("INDRE", "FRANCE"),
  ("İNEGÖL", "TURKEY"),
  ("INEZGANE AIT MELLOUL", "MOROCCO"),
  ("INGOLSTADT", "GERMANY"),
  ("INGRAJ BAZAR", "INDIA"),
  ("INGUSHETIA", "RUSSIA"),
  ("INHAMBANE", "MOZAMBIQUE"),
  ("INNSBRUCK", "AUSTRIA"),
  ("INTIBUCÁ", "HONDURAS"),
  ("IOÁNNINA", "GREECE"),
  ("IOBA", "BURKINA FASO"),
  ("IPATINGA", "BRAZIL"),
  ("IPOH", "MALAYSIA"),
  ("IPSWICH", "UNITED KINGDOM"),
  ("IQUIQUE", "CHILE"),
  ("IQUITOS", "PERU"),
  ("IRÁKLION", "GREECE"),
  ("ĪRANSHAHR", "IRAN"),
  ("IRAPUATO", "MEXICO"),
  ("IRBID", "JORDAN"),
  ("IRBĪL", "IRAQ"),
  ("IRIGA", "PHILIPPINES"),
  ("IRINGA", "TANZANIA"),
  ("IRKUTSK", "RUSSIA"),
  ("IRUMA", "JAPAN"),
  ("ISABELA", "PHILIPPINES"),
  ("ISAHAYA", "JAPAN"),
  ("ISEHARA", "JAPAN"),
  ("ISÈRE", "FRANCE"),
  ("ISESAKI", "JAPAN"),
  ("ISEYIN", "NIGERIA"),
  ("ISHIKAWA", "JAPAN"),
  ("ISHINOMAKI", "JAPAN"),
  ("ISHURDĪ", "BANGLADESH"),
  ("ISIRO", "CONGO"),
  ("İSKENDERUN", "TURKEY"),
  ("ISLAMABAD", "PAKISTAN"),
  ("ISLE OF WIGHT", "UNITED KINGDOM"),
  ("ISMAILIA", "EGYPT"),
  ("İSPARTA", "TURKEY"),
  ("ISSIK-GÖL", "KYRGYZSTAN"),
  ("ISTANBUL", "TURKEY"),
  ("İSTANBUL", "TURKEY"),
  ("ISTRA", "CROATIA"),
  ("ITABIRA", "BRAZIL"),
  ("ITABORAÍ", "BRAZIL"),
  ("ITABUNA", "BRAZIL"),
  ("ITAGUAÍ", "BRAZIL"),
  ("ITAGÜÍ", "COLOMBIA"),
  ("ITAJAÍ", "BRAZIL"),
  ("ITAMI", "JAPAN"),
  ("ITAPECERICA DA SERRA", "BRAZIL"),
  ("ITAPETININGA", "BRAZIL"),
  ("ITAPEVI", "BRAZIL"),
  ("ITAPÚA", "PARAGUAY"),
  ("ITAQUAQUECETUBA", "BRAZIL"),
  ("ITARSI", "INDIA"),
  ("ITAUGUÁ", "PARAGUAY"),
  ("ITU", "BRAZIL"),
  ("ITUZAINGÓ", "ARGENTINA"),
  ("IVANO-FRANKIVS'KA", "UKRAINE"),
  ("IVANO-FRANKIVS'K", "UKRAINE"),
  ("IVANOVO", "RUSSIA"),
  ("IWAKI", "JAPAN"),
  ("IWATA", "JAPAN"),
  ("IWATE", "JAPAN"),
  ("IWO", "NIGERIA"),
  ("IXTAPALUCA", "MEXICO"),
  ("IZABAL", "GUATEMALA"),
  ("ĪZEH", "IRAN"),
  ("IZHEVSK", "RUSSIA"),
  ("İZMIR", "TURKEY"),
  ("İZMIT", "TURKEY"),
  ("IZUMI", "JAPAN"),
  ("IZUMISANO", "JAPAN"),
  ("IZUMO", "JAPAN"),
  ("JABAL H̨ABAŠĪ", "YEMEN"),
  ("JABAL LUBNAN", "LEBANON"),
  ("JABALPUR", "INDIA"),
  ("JABLANICA", "SERBIA"),
  ("JABOATÃO", "BRAZIL"),
  ("JACAREÍ", "BRAZIL"),
  ("JACOBABAD", "PAKISTAN"),
  ("JAÉN", "SPAIN"),
  ("JAFFNA", "SRI LANKA"),
  ("JAFFRABAD", "INDIA"),
  ("JAGADHRI", "INDIA"),
  ("JAGATSINGHAPUR", "INDIA"),
  ("JAGTIAL", "INDIA"),
  ("JAHANABAD", "INDIA"),
  ("JAHRAN", "YEMEN"),
  ("JAHROM", "IRAN"),
  ("JAINTIA HILLS", "INDIA"),
  ("JAIPŪR HAŢ", "BANGLADESH"),
  ("JAIPUR", "INDIA"),
  ("JAISALMER", "INDIA"),
  ("JAJAPUR", "INDIA"),
  ("JAJARKOT", "NEPAL"),
  ("JAKARTA", "INDONESIA"),
  ("JÁKUTSKAJ, YAKUTSK", "RUSSIA"),
  ("JALALABAD", "AFGHANISTAN"),
  ("JALANDHAR", "INDIA"),
  ("JALAPA", "GUATEMALA"),
  ("JALAUN", "INDIA"),
  ("JALGAON", "INDIA"),
  ("JALĪB AŠ-ŠUYŪH̱", "KUWAIT"),
  ("JALINGO", "NIGERIA"),
  ("JALISCO", "MEXICO"),
  ("JALNA", "INDIA"),
  ("JALOR", "INDIA"),
  ("JALPAIGURI", "INDIA"),
  ("JAMALPŪR", "BANGLADESH"),
  ("JAMALPUR", "INDIA"),
  ("JAMBI", "INDONESIA"),
  ("JAMBOL", "BULGARIA"),
  ("JAMMU AND KASHMIR", "INDIA"),
  ("JAMMU", "INDIA"),
  ("JAMNAGAR", "INDIA"),
  ("JAMSHEDPUR", "INDIA"),
  ("JAMTARA", "INDIA"),
  ("JÄMTLAND", "SWEDEN"),
  ("JAMUI", "INDIA"),
  ("JAMŪI", "INDIA"),
  ("JAMURIA", "INDIA"),
  ("JANAKPUR", "NEPAL"),
  ("JANDIRA", "BRAZIL"),
  ("JANĪN", "PALESTINE"),
  ("JANJANBUREH", "GAMBIA"),
  ("JANJGIR-CHAMPA", "INDIA"),
  ("JANŪB DARFŪR", "SUDAN"),
  ("JANŪB KURDUFAN", "SUDAN"),
  ("JANŪB SĪNA", "EGYPT"),
  ("JARAGUÁ DO SUL", "BRAZIL"),
  ("JARANWALA", "PAKISTAN"),
  ("JARAŠ", "JORDAN"),
  ("JASHPUR", "INDIA"),
  ("JÁSZ-NAGYKUN-SZOLNOK", "HUNGARY"),
  ("JAÚ", "BRAZIL"),
  ("JAUNPUR", "INDIA"),
  ("JAWA BARAT", "INDONESIA"),
  ("JAWA TENGAH", "INDONESIA"),
  ("JAWA TIMUR", "INDONESIA"),
  ("JAWZJAN", "AFGHANISTAN"),
  ("JAYA PURA", "INDONESIA"),
  ("JEDDAH", "SAUDI ARABIA"),
  ("JEHANABAD", "INDIA"),
  ("JEMBER", "INDONESIA"),
  ("JENA", "GERMANY"),
  ("JEQUIÉ", "BRAZIL"),
  ("JEREZ", "SPAIN"),
  ("JERUSALEM", "ISRAEL"),
  ("JESSOR", "BANGLADESH"),
  ("JETPUR", "INDIA"),
  ("JEWISH REPUBLIC", "RUSSIA"),
  ("JHABUA", "INDIA"),
  ("JHAJJAR", "INDIA"),
  ("JHALAKAŢĪ", "BANGLADESH"),
  ("JHALAWAR", "INDIA"),
  ("JHANAYDAH", "BANGLADESH"),
  ("JHANG", "PAKISTAN"),
  ("JHANSI", "INDIA"),
  ("JHAPA", "NEPAL"),
  ("JHARKHAND", "INDIA"),
  ("JHARSUGUDA", "INDIA"),
  ("JHELUM", "PAKISTAN"),
  ("JHUNJHUNUN", "INDIA"),
  ("JHUNJHUNŪN", "INDIA"),
  ("JIAGEDAGI", "CHINA"),
  ("JIAMUSI", "CHINA"),
  ("JIAN", "CHINA"),
  ("JIANGMEN", "CHINA"),
  ("JIANGSU", "CHINA"),
  ("JIANGXI", "CHINA"),
  ("JIANGYIN", "CHINA"),
  ("JIANGYOU", "CHINA"),
  ("JIAOHE", "CHINA"),
  ("JIAOJIANG", "CHINA"),
  ("JIAOZHOU", "CHINA"),
  ("JIAOZUO", "CHINA"),
  ("JIAXING", "CHINA"),
  ("JIAYÌ SHÌ", "TAIWAN"),
  ("JIAYÌ", "TAIWAN"),
  ("JIAYÌ XIÀN", "TAIWAN"),
  ("JIAYUGUAN", "CHINA"),
  ("JIAZI", "CHINA"),
  ("JIBLAH", "YEMEN"),
  ("JIDDAH", "SAUDI ARABIA"),
  ("JIESHI", "CHINA"),
  ("JIESHOU", "CHINA"),
  ("JIGAWA", "NIGERIA"),
  ("JIHLAVA", "CZECH REPUBLIC"),
  ("JIHOČESKÝ", "CZECH REPUBLIC"),
  ("JIHOMORAVSKÝ", "CZECH REPUBLIC"),
  ("JIJEL", "ALGERIA"),
  ("JIJIGA", "ETHIOPIA"),
  ("JILIN", "CHINA"),
  ("JĪLÓNG", "TAIWAN"),
  ("JIMETA", "NIGERIA"),
  ("JĪMMA", "ETHIOPIA"),
  ("JINAN", "CHINA"),
  ("JINCHANG", "CHINA"),
  ("JINCHENG", "CHINA"),
  ("JINCHENGJIANG", "CHINA"),
  ("JIND", "INDIA"),
  ("JĪND", "INDIA"),
  ("JINGDEZHEN", "CHINA"),
  ("JINGMEN", "CHINA"),
  ("JINGZHOU", "CHINA"),
  ("JINHUA", "CHINA"),
  ("JINING", "CHINA"),
  ("JINJA", "UGANDA"),
  ("JINMA", "CHINA"),
  ("JĪNMÉN", "TAIWAN"),
  ("JINOTEGA", "NICARAGUA"),
  ("JINSHA", "CHINA"),
  ("JINXI", "CHINA"),
  ("JINZHOU", "CHINA"),
  ("JI-PARANÁ", "BRAZIL"),
  ("JĪROFT", "IRAN"),
  ("JISHOU", "CHINA"),
  ("JISHU", "CHINA"),
  ("JIUJIANG", "CHINA"),
  ("JIULONG", "CHINA"),
  ("JIUPU", "CHINA"),
  ("JIUTAI", "CHINA"),
  ("JIUTEPEC", "MEXICO"),
  ("JIXI", "CHINA"),
  ("JĪZAN", "SAUDI ARABIA"),
  ("JOÃO PESSOA", "BRAZIL"),
  ("JODHPUR", "INDIA"),
  ("JOETSU", "JAPAN"),
  ("JOHANNESBURG", "SOUTH AFRICA"),
  ("JOHOR BAHRU", "MALAYSIA"),
  ("JOHOR", "MALAYSIA"),
  ("JOINVILLE", "BRAZIL"),
  ("JOLO", "PHILIPPINES"),
  ("JOMBANG", "INDONESIA"),
  ("JONGLEI", "SOUTH SUDAN"),
  ("JÖNKÖPING", "SWEDEN"),
  ("JORHAT", "INDIA"),
  ("JOSÉ C. PAZ", "ARGENTINA"),
  ("JOS", "NIGERIA"),
  ("JUÁREZ", "MEXICO"),
  ("JUAZEIRO", "BRAZIL"),
  ("JUAZEIRO DO NORTE", "BRAZIL"),
  ("JUBA", "SOUTH SUDAN"),
  ("JUBBADA DHEXE", "SOMALIA"),
  ("JUBBADA HOOSE", "SOMALIA"),
  ("JUDEA AND SAMARIA", "ISRAEL"),
  ("JUGOVŽODNA SLOVENIJA", "SLOVENIA"),
  ("JUIZ DE FORA", "BRAZIL"),
  ("JUJUY", "ARGENTINA"),
  ("JULIACA", "PERU"),
  ("JUMLA", "NEPAL"),
  ("JUNAGADH", "INDIA"),
  ("JŪNAGADH", "INDIA"),
  ("JUNDIAÍ", "BRAZIL"),
  ("JUNDŪBAH", "TUNISIA"),
  ("JUNÍN", "PERU"),
  ("JŪNIYAH", "LEBANON"),
  ("JURA", "FRANCE"),
  ("JUTIAPA", "GUATEMALA"),
  ("JUŽNO-BAČKA", "SERBIA"),
  ("JUŽNO-BANAT", "SERBIA"),
  ("JYOTIBA PHULE NAGAR", "INDIA"),
  ("KABANKALAN", "PHILIPPINES"),
  ("KABARDINO-BALKARIA", "RUSSIA"),
  ("KABINDA", "CONGO"),
  ("KABIRDHAM", "INDIA"),
  ("KABŪDARAHANG", "IRAN"),
  ("KABUL", "AFGHANISTAN"),
  ("KABWE", "ZAMBIA"),
  ("KACHCHH", "INDIA"),
  ("KACHIN", "MYANMAR"),
  ("KADIOGO", "BURKINA FASO"),
  ("KADOMA", "JAPAN"),
  ("KADOMA", "ZIMBABWE"),
  ("KADUNA", "NIGERIA"),
  ("KAESŎNG", "NORTH KOREA"),
  ("KAFR EL SHEIKH", "EGYPT"),
  ("KAGAWA", "JAPAN"),
  ("KAGERA", "TANZANIA"),
  ("KAGOSHIMA", "JAPAN"),
  ("KAHNŪJ", "IRAN"),
  ("KAHRAMANMARAŞ", "TURKEY"),
  ("KAIFENG", "CHINA"),
  ("KAILAHUN", "SIERRA LEONE"),
  ("KAILALI", "NEPAL"),
  ("KAILI", "CHINA"),
  ("KAIMUR", "INDIA"),
  ("KAITHAL", "INDIA"),
  ("KAIYUAN", "CHINA"),
  ("KAKAMIGAHARA", "JAPAN"),
  ("KAKEGAWA", "JAPAN"),
  ("KAKHETI", "GEORGIA"),
  ("KAKINADA", "INDIA"),
  ("KAKOGAWA", "JAPAN"),
  ("KALAHANDI", "INDIA"),
  ("KALALEH", "IRAN"),
  ("KALASIN", "THAILAND"),
  ("KALATURA", "SRI LANKA"),
  ("KALIKOT", "NEPAL"),
  ("KALIMANTAN BARAT", "INDONESIA"),
  ("KALIMANTAN SELATAN", "INDONESIA"),
  ("KALIMANTAN TENGAH", "INDONESIA"),
  ("KALIMANTAN TIMUR", "INDONESIA"),
  ("KALINGA", "PHILIPPINES"),
  ("KALININGRAD", "RUSSIA"),
  ("KALISZ", "POLAND"),
  ("KALLITHÉA", "GREECE"),
  ("KALLUR", "INDIA"),
  ("KALMAR", "SWEDEN"),
  ("KALMUNAI", "SRI LANKA"),
  ("KALMYKIA", "RUSSIA"),
  ("KALOL", "INDIA"),
  ("KALOOKAN CITY", "PHILIPPINES"),
  ("KALUGA", "RUSSIA"),
  ("KALULUSHI", "ZAMBIA"),
  ("KALYANI", "INDIA"),
  ("KALYAN", "INDIA"),
  ("KAMAGAYA", "JAPAN"),
  ("KAMAKURA", "JAPAN"),
  ("KAMARHATI", "INDIA"),
  ("KAMBIA", "SIERRA LEONE"),
  ("KAMCHATKA", "RUSSIA"),
  ("KAMENSK-URALSKIY", "RUSSIA"),
  ("KAMINA", "CONGO"),
  ("KAMISU", "JAPAN"),
  ("KAMOKE", "PAKISTAN"),
  ("KAMPALA", "UGANDA"),
  ("KAMPHAENG PHET", "THAILAND"),
  ("KÂMPÓNG CHAM", "CAMBODIA"),
  ("KÂMPÓNG CHHNANG", "CAMBODIA"),
  ("KÂMPÓNG SPOEU", "CAMBODIA"),
  ("KÂMPÓNG THUM", "CAMBODIA"),
  ("KÂMPÔT", "CAMBODIA"),
  ("KAMRUP", "INDIA"),
  ("KAMRUP METROPOLITAN", "INDIA"),
  ("KAMYARAN", "IRAN"),
  ("KAMYSHIN", "RUSSIA"),
  ("KANAGAWA", "JAPAN"),
  ("KANANGA", "CONGO"),
  ("KANATA", "CANADA"),
  ("KANAZAWA", "JAPAN"),
  ("KANCHANABURI", "THAILAND"),
  ("KANCHANPUR", "NEPAL"),
  ("KANCHEEPURAM", "INDIA"),
  ("KANCHIPURAM", "INDIA"),
  ("KANCHRAPARA", "INDIA"),
  ("KANDAHAR", "AFGHANISTAN"),
  ("KÂNDAL", "CAMBODIA"),
  ("KANDHAMAL", "INDIA"),
  ("KANDI", "BENIN"),
  ("KANDY", "SRI LANKA"),
  ("KANEM", "CHAD"),
  ("KANGAN", "IRAN"),
  ("KANGGYE", "NORTH KOREA"),
  ("KANGNŬNG", "SOUTH KOREA"),
  ("KANGRA", "INDIA"),
  ("KANGWŎN", "NORTH KOREA"),
  ("KANGWŎN", "SOUTH KOREA"),
  ("KANIFING", "GAMBIA"),
  ("KANIFING URBAN DISTRICT COUNCIL", "GAMBIA"),
  ("KANI", "JAPAN"),
  ("KANKAN", "GUINEA"),
  ("KANNAUJ", "INDIA"),
  ("KANNIYAKUMARI", "INDIA"),
  ("KANNUR", "INDIA"),
  ("KANO", "NIGERIA"),
  ("KANPUR CANTONMENT", "INDIA"),
  ("KANPUR DEHAT", "INDIA"),
  ("KANPUR", "INDIA"),
  ("KANPUR NAGAR", "INDIA"),
  ("KANSHIRAM NAGAR", "INDIA"),
  ("KANTA-HÄME", "FINLAND"),
  ("KAÔH KÔNG", "CAMBODIA"),
  ("KAOLACK", "SENEGAL"),
  ("KAPILVASTU", "NEPAL"),
  ("KAPĪSA", "AFGHANISTAN"),
  ("KAPRA", "INDIA"),
  ("KAPURTHALA", "INDIA"),
  ("KAPŪRTHALA", "INDIA"),
  ("KARABÜK", "TURKEY"),
  ("KARACHAI-CHERKESS REPUBLIC", "RUSSIA"),
  ("KARACHI", "PAKISTAN"),
  ("KARAIKAL", "INDIA"),
  ("KARAJ", "IRAN"),
  ("KARAKÖSE", "TURKEY"),
  ("KARAMAN", "TURKEY"),
  ("KARAMAY", "CHINA"),
  ("KARANGASSO-VIGUE", "BURKINA FASO"),
  ("KARANG TENGAH", "INDONESIA"),
  ("KARA", "TOGO"),
  ("KARATSU", "JAPAN"),
  ("KARAULI", "INDIA"),
  ("KARAWAL NAGAR", "INDIA"),
  ("KARAWANG", "INDONESIA"),
  ("KARBALA", "IRAQ"),
  ("KARBALA'", "IRAQ"),
  ("KARBI ANGLONG", "INDIA"),
  ("KARDÍTSA", "GREECE"),
  ("KĂRDŽALI", "BULGARIA"),
  ("KARELIA", "RUSSIA"),
  ("KARGIL", "INDIA"),
  ("KARIMGANJ", "INDIA"),
  ("KARIMNAGAR", "INDIA"),
  ("KARĪMNAGAR", "INDIA"),
  ("KARIYA", "JAPAN"),
  ("KARLOVAC", "CROATIA"),
  ("KARLOVARSKÝ", "CZECH REPUBLIC"),
  ("KARLOVY VARY", "CZECH REPUBLIC"),
  ("KARLSRUHE", "GERMANY"),
  ("KARNAL", "INDIA"),
  ("KARNATAKA", "INDIA"),
  ("KÄRNTEN", "AUSTRIA"),
  ("KARNŪL", "INDIA"),
  ("KARONGA", "MALAWI"),
  ("KAROTEGIN", "TAJIKISTAN"),
  ("KARSANA", "NIGERIA"),
  ("ĶARŞI", "UZBEKISTAN"),
  ("KARS", "TURKEY"),
  ("KARUR", "INDIA"),
  ("KARUZI", "BURUNDI"),
  ("KARVINÁ", "CZECH REPUBLIC"),
  ("KASAI-OCCIDENTAL", "CONGO"),
  ("KASAI-ORIENTAL", "CONGO"),
  ("KASAMA", "ZAMBIA"),
  ("KASARAGOD", "INDIA"),
  ("KASESE", "UGANDA"),
  ("KASGANJ", "INDIA"),
  ("KASHAN", "IRAN"),
  ("KASHI", "CHINA"),
  ("KASHIHARA", "JAPAN"),
  ("KASHĪPUR", "INDIA"),
  ("KASHIWA", "JAPAN"),
  ("KASHMAR", "IRAN"),
  ("KASIHAN", "INDONESIA"),
  ("ĶAŞĶADARYA", "UZBEKISTAN"),
  ("KASKI", "NEPAL"),
  ("KASSALA", "SUDAN"),
  ("KASSEL", "GERMANY"),
  ("KASTAMONU", "TURKEY"),
  ("KASUGAI", "JAPAN"),
  ("KASUGA", "JAPAN"),
  ("KASUKABE", "JAPAN"),
  ("KASULO", "TANZANIA"),
  ("KASUNGU", "MALAWI"),
  ("KASŪR", "PAKISTAN"),
  ("KATAKA", "INDIA"),
  ("KATANGA", "CONGO"),
  ("KATHMANDU", "NEPAL"),
  ("KATHUA", "INDIA"),
  ("KATIHAR", "INDIA"),
  ("KATNI", "INDIA"),
  ("KATOWICE", "POLAND"),
  ("KATSINA", "NIGERIA"),
  ("KAUNAS", "LITHUANIA"),
  ("KAUNIA", "BANGLADESH"),
  ("KAUNO", "LITHUANIA"),
  ("KAUSHAMBI", "INDIA"),
  ("KAVÁLA", "GREECE"),
  ("KAVANGO", "NAMIBIA"),
  ("KAVREPALANCHOK", "NEPAL"),
  ("KAVUNDAMPALAIYAM", "INDIA"),
  ("KAWACHINAGANO", "JAPAN"),
  ("KAWAGOE", "JAPAN"),
  ("KAWAGUCHI", "JAPAN"),
  ("KAWANISHI", "JAPAN"),
  ("KAWASAKI", "JAPAN"),
  ("KAYA", "BURKINA FASO"),
  ("KAYAH", "MYANMAR"),
  ("KAYANZA", "BURUNDI"),
  ("KAYAPINAR", "TURKEY"),
  ("KAYES", "MALI"),
  ("KAYIN", "MYANMAR"),
  ("KAYSERI", "TURKEY"),
  ("KAZAN", "RUSSIA"),
  ("KAZERŪN", "IRAN"),
  ("KAZILAMIHUNDA", "TANZANIA"),
  ("KEBBI", "NIGERIA"),
  ("KEBUMEN", "INDONESIA"),
  ("KECSKEMÉT", "HUNGARY"),
  ("KEDAH", "MALAYSIA"),
  ("KEDIRI", "INDONESIA"),
  ("KEDUNGWARU", "INDONESIA"),
  ("KEDUNGWUNI", "INDONESIA"),
  ("KEGALLA", "SRI LANKA"),
  ("KELANTAN", "MALAYSIA"),
  ("KELHEIM", "GERMANY"),
  ("KELOWNA", "CANADA"),
  ("KEMANG", "INDONESIA"),
  ("KEMBARAN", "INDONESIA"),
  ("KEMEROVO", "RUSSIA"),
  ("KÉMO", "CENTRAL AFRICAN REPUBLIC"),
  ("KENDARI", "INDONESIA"),
  ("KENDRAPARA", "INDIA"),
  ("KENDUJHAR", "INDIA"),
  ("KÉNÉDOUGOU", "BURKINA FASO"),
  ("KENEMA", "SIERRA LEONE"),
  ("KENITRA", "MOROCCO"),
  ("KENTRIKI ELLADA", "GREECE"),
  ("KENT", "UNITED KINGDOM"),
  ("KERALA", "INDIA"),
  ("KERCH", "UKRAINE"),
  ("KEREWAN", "GAMBIA"),
  ("KÉRKIRA", "GREECE"),
  ("KERMAN", "IRAN"),
  ("KERMANSHAH", "IRAN"),
  ("KÉROUANE", "GUINEA"),
  ("KERRY", "IRELAND"),
  ("KETAPANG", "INDONESIA"),
  ("KGOTSONG", "SOUTH AFRICA"),
  ("KHABAROVSK KRAI", "RUSSIA"),
  ("KHABAROVSK", "RUSSIA"),
  ("KHAGARIA", "INDIA"),
  ("KHAGRACHARI", "BANGLADESH"),
  ("KHAGRACHHARI", "BANGLADESH"),
  ("KHAIRPUR", "PAKISTAN"),
  ("KHAKASIA", "RUSSIA"),
  ("KHAMGAON", "INDIA"),
  ("KHAMMAM", "INDIA"),
  ("KHAMMOUANE", "LAOS"),
  ("KHANDWA", "INDIA"),
  ("KHANEWAL", "PAKISTAN"),
  ("KHÁNH HÒA", "VIETNAM"),
  ("KHANNA", "INDIA"),
  ("KHANPUR", "PAKISTAN"),
  ("KHANTY-MANSI", "RUSSIA"),
  ("KHARAGPUR", "INDIA"),
  ("KHARDAHA", "INDIA"),
  ("KHARGONE", "INDIA"),
  ("KHARKIVS'KA", "UKRAINE"),
  ("KHARKIV", "UKRAINE"),
  ("KHARTOUM", "SUDAN"),
  ("KHASAVYURT, XASUN-YURT, XASUNYURT", "RUSSIA"),
  ("KHASH", "IRAN"),
  ("KHATLON", "TAJIKISTAN"),
  ("KHEDA", "INDIA"),
  ("KHEMISSET", "MOROCCO"),
  ("KHENCHELA", "ALGERIA"),
  ("KHENIFRA", "MOROCCO"),
  ("KHERI", "INDIA"),
  ("KHERSONS'KA", "UKRAINE"),
  ("KHERSON", "UKRAINE"),
  ("KHIMKI", "RUSSIA"),
  ("KHLONG LUANG", "THAILAND"),
  ("KHMEL'NYTS'KA", "UKRAINE"),
  ("KHMEL'NYTS'KYY", "UKRAINE"),
  ("KHODABANDEH", "IRAN"),
  ("KHOMAS", "NAMIBIA"),
  ("KHOMEYN", "IRAN"),
  ("KHOMEYNĪSHAHR", "IRAN"),
  ("KHON KAEN", "THAILAND"),
  ("KHORA", "INDIA"),
  ("KHORASAN-E RAZAVĪ", "IRAN"),
  ("KHORASAN JANŪBĪ", "IRAN"),
  ("KHORASAN SHAMALĪ", "IRAN"),
  ("KHORDHA", "INDIA"),
  ("KHORRAMABAD", "IRAN"),
  ("KHORRAMSHAHR", "IRAN"),
  ("KHOTANG", "NEPAL"),
  ("KHOURIBGA", "MOROCCO"),
  ("KHOWST", "AFGHANISTAN"),
  ("KHOY", "IRAN"),
  ("KHUJAND", "TAJIKISTAN"),
  ("KHULNA", "BANGLADESH"),
  ("KHUNTI", "INDIA"),
  ("KHURJA", "INDIA"),
  ("KHŪZESTAN", "IRAN"),
  ("KHVORASGAN", "IRAN"),
  ("KHVOY", "IRAN"),
  ("KHWAF", "IRAN"),
  ("KIBUNGO", "RWANDA"),
  ("KIBUYE", "RWANDA"),
  ("KIELCE", "POLAND"),
  ("KIEL", "GERMANY"),
  ("KIÊN GIANG", "VIETNAM"),
  ("KIÉ-NTEM", "EQUATORIAL GUINEA"),
  ("KIEV", "UKRAINE"),
  ("KIGALI-NGALI", "RWANDA"),
  ("KIGALI", "RWANDA"),
  ("KIGOMA", "TANZANIA"),
  ("KIKLÁDES", "GREECE"),
  ("KIKWIT", "CONGO"),
  ("KILDARE", "IRELAND"),
  ("KILIMANJARO", "TANZANIA"),
  ("KILINOCHCHI", "SRI LANKA"),
  ("KILIS", "TURKEY"),
  ("KIMBERLEY", "SOUTH AFRICA"),
  ("KIMCHAEK", "NORTH KOREA"),
  ("KIMCHŎN", "SOUTH KOREA"),
  ("KIMHAE", "SOUTH KOREA"),
  ("KIMPO", "SOUTH KOREA"),
  ("KINDIA", "GUINEA"),
  ("KINDU", "CONGO"),
  ("KINGSTON", "CANADA"),
  ("KINGSTON", "JAMAICA"),
  ("KINGSTON UPON HULL", "UNITED KINGDOM"),
  ("KINSHASA", "CONGO"),
  ("KIPUSHI", "CONGO"),
  ("KIRAÇ", "TURKEY"),
  ("KIRARI SULEMAN NAGAR", "INDIA"),
  ("KIRIKKALE", "TURKEY"),
  ("KIRKLARELI", "TURKEY"),
  ("KIRKŪK", "IRAQ"),
  ("KIROVOHRADS'KA", "UKRAINE"),
  ("KIROVOHRAD", "UKRAINE"),
  ("KIROV", "RUSSIA"),
  ("KIRŞEHIR", "TURKEY"),
  ("KIRUNDO", "BURUNDI"),
  ("KIRYŪ", "JAPAN"),
  ("KISANGANI", "CONGO"),
  ("KISARAN", "INDONESIA"),
  ("KISARAZU", "JAPAN"),
  ("KISHANGANJ", "INDIA"),
  ("KISHANGARH", "INDIA"),
  ("KISHIWADA", "JAPAN"),
  ("KISHORGANJ", "BANGLADESH"),
  ("KISHTWAR", "INDIA"),
  ("KISLOVODSK", "RUSSIA"),
  ("KISSIDOUGOU", "GUINEA"),
  ("KISUMU", "KENYA"),
  ("KITAKYŪSHŪ", "JAPAN"),
  ("KITAMI", "JAPAN"),
  ("KITCHENER", "CANADA"),
  ("KITGUM", "UGANDA"),
  ("KITWE", "ZAMBIA"),
  ("KIZILTEPE", "TURKEY"),
  ("KŎJE", "SOUTH KOREA"),
  ("KJUSTENDIL", "BULGARIA"),
  ("KLADNO", "CZECH REPUBLIC"),
  ("KLAIPĖDA", "LITHUANIA"),
  ("KLAIPĖDOS", "LITHUANIA"),
  ("KLANGENAN", "INDONESIA"),
  ("KLANG", "MALAYSIA"),
  ("KLATEN", "INDONESIA"),
  ("KƏLBƏCƏR-LAÇIN", "AZERBAIJAN"),
  ("KLERKSDORP", "SOUTH AFRICA"),
  ("KLEVE", "GERMANY"),
  ("KOBE", "JAPAN"),
  ("KØBENHAVN", "DENMARK"),
  ("KOBLENZ", "GERMANY"),
  ("KOCAELI", "TURKEY"),
  ("KOCH BIHAR", "INDIA"),
  ("KOCHI", "INDIA"),
  ("KOCHI", "JAPAN"),
  ("KODAGU", "INDIA"),
  ("KODAIRA", "JAPAN"),
  ("KODARMA", "INDIA"),
  ("KOFORIDUA", "GHANA"),
  ("KOFU", "JAPAN"),
  ("KOGA", "JAPAN"),
  ("KOGANEI", "JAPAN"),
  ("KOGI", "NIGERIA"),
  ("KOHAT", "PAKISTAN"),
  ("KOHGĪLUYEH-E BOYERAHMAD", "IRAN"),
  ("KOHGĪLUYEH", "IRAN"),
  ("KOHIMA", "INDIA"),
  ("KOINADUGU", "SIERRA LEONE"),
  ("KOKRAJHAR", "INDIA"),
  ("KOKS BAZAR", "BANGLADESH"),
  ("KÖKŞETAŪ", "KAZAKHSTAN"),
  ("KOKUBUNJI", "JAPAN"),
  ("KOLAR", "INDIA"),
  ("KOLDA", "SENEGAL"),
  ("KOLHAPUR", "INDIA"),
  ("KOLKATA", "INDIA"),
  ("KOLLAM", "INDIA"),
  ("KÖLN", "GERMANY"),
  ("KOLOMNA", "RUSSIA"),
  ("KOLUBARA", "SERBIA"),
  ("KOLWEZI", "CONGO"),
  ("KOMAKI", "JAPAN"),
  ("KOMANDJOARI", "BURKINA FASO"),
  ("KOMÁRNO", "SLOVAKIA"),
  ("KOMÁROM-ESZTERGOM", "HUNGARY"),
  ("KOMATSU", "JAPAN"),
  ("KOMBO CENTRAL", "GAMBIA"),
  ("KOMBO NORTH", "GAMBIA"),
  ("KOMĪLLA", "BANGLADESH"),
  ("KOMI-PERMYAK", "RUSSIA"),
  ("KOMI", "RUSSIA"),
  ("KOMPIENGA", "BURKINA FASO"),
  ("KOMSOMOLSK-NA-AMURE", "RUSSIA"),
  ("KONAN", "JAPAN"),
  ("KONGJU", "SOUTH KOREA"),
  ("KONO", "SIERRA LEONE"),
  ("KONOSU", "JAPAN"),
  ("KONSTANZ", "GERMANY"),
  ("KON TUM", "VIETNAM"),
  ("KONYA", "TURKEY"),
  ("KOPEYSK", "RUSSIA"),
  ("KOPPAL", "INDIA"),
  ("KOPRIVNICA-KRIŽEVCI", "CROATIA"),
  ("ĶORAĶALPOGISTON", "UZBEKISTAN"),
  ("KORAPUT", "INDIA"),
  ("KORBA", "INDIA"),
  ("KORÇË", "ALBANIA"),
  ("KORDESTAN", "IRAN"),
  ("KÖRFEZ", "TURKEY"),
  ("KORHOGO", "IVORY COAST"),
  ("KORINTHÍA", "GREECE"),
  ("KORIYA", "INDIA"),
  ("KORIYAMA", "JAPAN"),
  ("KORLA", "CHINA"),
  ("KOROLYOV", "RUSSIA"),
  ("KORONADAL", "PHILIPPINES"),
  ("KOSAMBI", "INDONESIA"),
  ("KOSHIGAYA", "JAPAN"),
  ("KOŠICE-OKOLIE", "SLOVAKIA"),
  ("KOŠICE", "SLOVAKIA"),
  ("KOŠICKÝ", "SLOVAKIA"),
  ("KOSSI", "BURKINA FASO"),
  ("KOSTROMA", "RUSSIA"),
  ("KOSZALIN", "POLAND"),
  ("KOTA BAHRU", "MALAYSIA"),
  ("KOTA", "INDIA"),
  ("KOTA KINABALU", "MALAYSIA"),
  ("KOTAYK", "ARMENIA"),
  ("KOT KAPŪRA", "INDIA"),
  ("KOTTAYAM", "INDIA"),
  ("KOTTE", "SRI LANKA"),
  ("KOUDOUGOU", "BURKINA FASO"),
  ("KOULIKORO", "MALI"),
  ("KOULPÉLOGO", "BURKINA FASO"),
  ("KOUNDARA", "GUINEA"),
  ("KOURITENGA", "BURKINA FASO"),
  ("KOUROUSSA", "GUINEA"),
  ("KOURWÉOGO", "BURKINA FASO"),
  ("KOUSSÉRI", "CAMEROON"),
  ("KOVILPATTI", "INDIA"),
  ("KOVROV", "RUSSIA"),
  ("KOYAMPATTUR", "INDIA"),
  ("KOYANG", "SOUTH KOREA"),
  ("KOZÁNI", "GREECE"),
  ("KOZHIKKOD", "INDIA"),
  ("KOZHIKODE", "INDIA"),
  ("KRABI", "THAILAND"),
  ("KRÂCHÉH", "CAMBODIA"),
  ("KRAGUJEVAC", "SERBIA"),
  ("KRÁLOVÉHRADECKÝ", "CZECH REPUBLIC"),
  ("KRAMATORS'K", "UKRAINE"),
  ("KRAPINA-ZAGORJE", "CROATIA"),
  ("KRASNODAR", "RUSSIA"),
  ("KRASNOGORSK", "RUSSIA"),
  ("KRASNOKOKSHAISK, YOSHKAR-OLA", "RUSSIA"),
  ("KRASNOYARSK", "RUSSIA"),
  ("KREFELD", "GERMANY"),
  ("KREMENCHUK", "UKRAINE"),
  ("KRESEK", "INDONESIA"),
  ("KRISHNAGIRI", "INDIA"),
  ("KRISHNA", "INDIA"),
  ("KRISHNANAGAR", "INDIA"),
  ("KRISHNARAJAPURA", "INDIA"),
  ("KROMĚŘÍŽ", "CZECH REPUBLIC"),
  ("KRONG PREAH SIHANOUK", "CAMBODIA"),
  ("KRONOBERG", "SWEDEN"),
  ("KROONSTAD", "SOUTH AFRICA"),
  ("KRUGERSDORP", "SOUTH AFRICA"),
  ("KRYM", "UKRAINE"),
  ("KRYVYY RIH", "UKRAINE"),
  ("KSAR EL KEBIR", "MOROCCO"),
  ("KUALA LUMPUR", "MALAYSIA"),
  ("KUALA TERENGGANU", "MALAYSIA"),
  ("KUANTAN", "MALAYSIA"),
  ("KUCHING", "MALAYSIA"),
  ("KŪHDASHT", "IRAN"),
  ("KUIQING", "CHINA"),
  ("KUITO", "ANGOLA"),
  ("KUJAWSKO-POMORSKIE", "POLAND"),
  ("KUKATPALLE", "INDIA"),
  ("ĶÜĶON", "UZBEKISTAN"),
  ("KULGAM", "INDIA"),
  ("KULLU", "INDIA"),
  ("KULTI", "INDIA"),
  ("KUMAGAYA", "JAPAN"),
  ("KUMAMOTO", "JAPAN"),
  ("KUMANOVO", "MACEDONIA"),
  ("KUMASI", "GHANA"),
  ("KUMBA", "CAMEROON"),
  ("KUMBAKONAM", "INDIA"),
  ("KUMBO", "CAMEROON"),
  ("KUMI", "SOUTH KOREA"),
  ("KUNARHA", "AFGHANISTAN"),
  ("KUNDUZ", "AFGHANISTAN"),
  ("KUNMING", "CHINA"),
  ("KUNPO", "SOUTH KOREA"),
  ("KUNSAN", "SOUTH KOREA"),
  ("KUPANG", "INDONESIA"),
  ("KUPWARA", "INDIA"),
  ("KURASHIKI", "JAPAN"),
  ("KÜRDƏMIR", "AZERBAIJAN"),
  ("KURE", "JAPAN"),
  ("KURGAN", "RUSSIA"),
  ("KUŖĪGRAM", "BANGLADESH"),
  ("KURI", "SOUTH KOREA"),
  ("KURNOOL", "INDIA"),
  ("KURSK", "RUSSIA"),
  ("KURUKSHETRA", "INDIA"),
  ("KURUME", "JAPAN"),
  ("KURUNEGALA", "SRI LANKA"),
  ("KUSATSU", "JAPAN"),
  ("KUSHINAGAR", "INDIA"),
  ("KUSHŢIYA", "BANGLADESH"),
  ("KŪSTĪ", "SUDAN"),
  ("KÜTAHYA", "TURKEY"),
  ("KUTAISI", "GEORGIA"),
  ("KUTLWANONG", "SOUTH AFRICA"),
  ("KUWANA", "JAPAN"),
  ("KUYTUN", "CHINA"),
  ("KVEMO KARTLI", "GEORGIA"),
  ("KWANGJU", "SOUTH KOREA"),
  ("KWANGMYŎNG", "SOUTH KOREA"),
  ("KWANGYANG", "SOUTH KOREA"),
  ("KWARA", "NIGERIA"),
  ("KWAZULU NATAL", "SOUTH AFRICA"),
  ("KWEKWE", "ZIMBABWE"),
  ("KWENENG", "BOTSWANA"),
  ("KYMENLAAKSO", "FINLAND"),
  ("KYŎNGGI", "SOUTH KOREA"),
  ("KYŎNGJU", "SOUTH KOREA"),
  ("KYŎNGSANGBUK", "SOUTH KOREA"),
  ("KYŎNGSANGNAM", "SOUTH KOREA"),
  ("KYŎNGSAN", "SOUTH KOREA"),
  ("KYOTO", "JAPAN"),
  ("KYYIVS'KA", "UKRAINE"),
  ("KYZYL", "RUSSIA"),
  ("LA ALTAGRACIA", "DOMINICAN REPUBLIC"),
  ("LABÉ", "GUINEA"),
  ("LA CAPITAL", "ARGENTINA"),
  ("LAC", "CHAD"),
  ("LA CEIBA", "HONDURAS"),
  ("LACS", "IVORY COAST"),
  ("LAE", "PAPUA NEW GUINEA"),
  ("LAGES", "BRAZIL"),
  ("LAGHOUAT", "ALGERIA"),
  ("LAĠMAN", "AFGHANISTAN"),
  ("LAGOS DE MORENO", "MEXICO"),
  ("LAGOS", "NIGERIA"),
  ("LA GUAJIRA", "COLOMBIA"),
  ("LAGUNA", "PHILIPPINES"),
  ("LAGUNES", "IVORY COAST"),
  ("LA HABANA", "CUBA"),
  ("LAHĪJAN", "IRAN"),
  ("LAHIJ", "YEMEN"),
  ("LAHN-DILL-KREIS", "GERMANY"),
  ("LAHORE", "PAKISTAN"),
  ("LAHTI", "FINLAND"),
  ("LAI CHÂU", "VIETNAM"),
  ("LAIWU", "CHINA"),
  ("LAIYANG", "CHINA"),
  ("LAKES", "SOUTH SUDAN"),
  ("LAKHIMPUR", "INDIA"),
  ("LAKHĪMPUR", "INDIA"),
  ("LAKHISARAI", "INDIA"),
  ("LAKHNAU", "INDIA"),
  ("LAKSHMĪPŪR", "BANGLADESH"),
  ("LALBAHADUR NAGAR", "INDIA"),
  ("LA LIBERTAD", "EL SALVADOR"),
  ("LA LIBERTAD", "PERU"),
  ("LALITPUR", "INDIA"),
  ("LALITPUR", "NEPAL"),
  ("LALMANĪR HAT", "BANGLADESH"),
  ("LA MATANZA", "ARGENTINA"),
  ("LAMBARÉ", "PARAGUAY"),
  ("LAMBAYEQUE", "PERU"),
  ("LÂM ĐỒNG", "VIETNAM"),
  ("LAMJUNG", "NEPAL"),
  ("LAMPANG", "THAILAND"),
  ("LAMPHUN", "THAILAND"),
  ("LAMPUNG", "INDONESIA"),
  ("LANAO DEL NORTE", "PHILIPPINES"),
  ("LANAO DEL SUR", "PHILIPPINES"),
  ("LANCASHIRE", "UNITED KINGDOM"),
  ("LANDES", "FRANCE"),
  ("LANDKREIS ANSBACH", "GERMANY"),
  ("LANDKREIS ASCHAFFENBURG", "GERMANY"),
  ("LANDKREIS AUGSBURG", "GERMANY"),
  ("LANDKREIS BAMBERG", "GERMANY"),
  ("LANDKREIS BAYREUTH", "GERMANY"),
  ("LANDKREIS FÜRTH", "GERMANY"),
  ("LANDKREIS KAISERSLAUTERN", "GERMANY"),
  ("LANDKREIS KASSEL", "GERMANY"),
  ("LANDKREIS LANDSHUT", "GERMANY"),
  ("LANDKREIS LEIPZIG", "GERMANY"),
  ("LANDKREIS MÜNCHEN", "GERMANY"),
  ("LANDKREIS OLDENBURG", "GERMANY"),
  ("LANDKREIS OSNABRÜCK", "GERMANY"),
  ("LANDKREIS PASSAU", "GERMANY"),
  ("LANDKREIS REGENSBURG", "GERMANY"),
  ("LANDKREIS ROSENHEIM", "GERMANY"),
  ("LANDKREIS ROSTOCK", "GERMANY"),
  ("LANDKREIS SCHWEINFURT", "GERMANY"),
  ("LANDKREIS WÜRZBURG", "GERMANY"),
  ("LANDSBERG AM LECH", "GERMANY"),
  ("LANGFANG", "CHINA"),
  ("LANGRŪD", "IRAN"),
  ("LANGSA", "INDONESIA"),
  ("LANGUEDOC-ROUSSILLON", "FRANCE"),
  ("LANJAN", "IRAN"),
  ("LANÚS", "ARGENTINA"),
  ("LANZHOU", "CHINA"),
  ("LAOAG", "PHILIPPINES"),
  ("LÀO CAI", "VIETNAM"),
  ("LAOHEKOU", "CHINA"),
  ("LA PAMPA", "ARGENTINA"),
  ("LA PAZ", "BOLIVIA"),
  ("LA PAZ", "EL SALVADOR"),
  ("LA PAZ", "HONDURAS"),
  ("LA PAZ", "MEXICO"),
  ("LAPLAND", "FINLAND"),
  ("LA PLATA", "ARGENTINA"),
  ("LAPU-LAPU", "PHILIPPINES"),
  ("LARACHE", "MOROCCO"),
  ("LARA", "VENEZUELA"),
  ("LARESTAN", "IRAN"),
  ("LA RIOJA", "ARGENTINA"),
  ("LA RIOJA", "SPAIN"),
  ("LÁRISA", "GREECE"),
  ("LARKANA", "PAKISTAN"),
  ("LA ROMANA", "DOMINICAN REPUBLIC"),
  ("LASA", "CHINA"),
  ("LAS COLONIAS", "ARGENTINA"),
  ("LAS CUMBRES", "PANAMA"),
  ("LA SERENA", "CHILE"),
  ("LAS HERAS", "ARGENTINA"),
  ("LASHIO", "MYANMAR"),
  ("LAS PALMAS", "SPAIN"),
  ("LAS PIÑAS", "PHILIPPINES"),
  ("LAS TUNAS", "CUBA"),
  ("LATEHAR", "INDIA"),
  ("LATINA", "ITALY"),
  ("LATUR", "INDIA"),
  ("LATŪR", "INDIA"),
  ("LA UNIÓN", "EL SALVADOR"),
  ("LA UNION", "PHILIPPINES"),
  ("LAURO DE FREITAS", "BRAZIL"),
  ("LAUSANNE", "SWITZERLAND"),
  ("LA VEGA", "DOMINICAN REPUBLIC"),
  ("LA VICTORIA", "VENEZUELA"),
  ("LAWANG", "INDONESIA"),
  ("LAWDAR", "YEMEN"),
  ("LAWGAR", "AFGHANISTAN"),
  ("LAWNGTLAI", "INDIA"),
  ("LAZIO", "ITALY"),
  ("LEBAP", "TURKMENISTAN"),
  ("LECCE", "ITALY"),
  ("LECHENG", "CHINA"),
  ("LEEDS", "UNITED KINGDOM"),
  ("LEER", "GERMANY"),
  ("LEGANÉS", "SPAIN"),
  ("LEGAZPI", "PHILIPPINES"),
  ("LEGHORN", "ITALY"),
  ("LEGNICA", "POLAND"),
  ("LE HAVRE", "FRANCE"),
  ("LEH", "INDIA"),
  ("LEICESTERSHIRE", "UNITED KINGDOM"),
  ("LEICESTER", "UNITED KINGDOM"),
  ("LEICHENG", "CHINA"),
  ("LEIDEN", "NETHERLANDS"),
  ("LEIPZIG", "GERMANY"),
  ("LEIYANG", "CHINA"),
  ("LÉLOUMA", "GUINEA"),
  ("LE MANS", "FRANCE"),
  ("LE MARIN", "MARTINIQUE"),
  ("LEMBANG", "INDONESIA"),
  ("LEMESOS", "CYPRUS"),
  ("LEMPIRA", "HONDURAS"),
  ("LENGSHUIJIANG", "CHINA"),
  ("LENINGRAD", "RUSSIA"),
  ("LENINSK-KUZNETSKIY", "RUSSIA"),
  ("LEÓN DE LOS ALDAMA", "MEXICO"),
  ("LEÓN", "NICARAGUA"),
  ("LEÓN", "SPAIN"),
  ("LÉRABA", "BURKINA FASO"),
  ("LERIBE", "LESOTHO"),
  ("LESHAN", "CHINA"),
  ("LÉSVOS", "GREECE"),
  ("LEUWILIANG", "INDONESIA"),
  ("LEVERKUSEN", "GERMANY"),
  ("LEVICE", "SLOVAKIA"),
  ("LEYTE", "PHILIPPINES"),
  ("LHOKSEUMAWE", "INDONESIA"),
  ("L'HOSPITALET DE LLOBREGAT", "SPAIN"),
  ("LIANCHENG", "CHINA"),
  ("LIANGXIANG", "CHINA"),
  ("LIANRAN", "CHINA"),
  ("LIANZHOU", "CHINA"),
  ("LIAOCHENG", "CHINA"),
  ("LIAONING", "CHINA"),
  ("LIAOYANG", "CHINA"),
  ("LIAOYUAN", "CHINA"),
  ("LIBEREC", "CZECH REPUBLIC"),
  ("LIBERECKÝ", "CZECH REPUBLIC"),
  ("LIBERTADOR GENERAL BERNARDO O'HIGGINS", "CHILE"),
  ("LIBREVILLE", "GABON"),
  ("LICHENG", "CHINA"),
  ("LICHINGA", "MOZAMBIQUE"),
  ("LIÈGE", "BELGIUM"),
  ("LIGURIA", "ITALY"),
  ("LIKASI", "CONGO"),
  ("LIKOUALA", "CONGO"),
  ("LILING", "CHINA"),
  ("LILLE", "FRANCE"),
  ("LILONGWE CITY", "MALAWI"),
  ("LILONGWE", "MALAWI"),
  ("LILONGWE RURAL", "MALAWI"),
  ("LIMA METROPOLITANA", "PERU"),
  ("LIMA", "PERU"),
  ("LIMA PROVINCIAS", "PERU"),
  ("LIMARÍ", "CHILE"),
  ("LIMBURG", "BELGIUM"),
  ("LIMBURG", "NETHERLANDS"),
  ("LIMBURG-WEILBURG", "GERMANY"),
  ("LIMEIRA", "BRAZIL"),
  ("LIMERICK", "IRELAND"),
  ("LIMOGES", "FRANCE"),
  ("LIMÓN", "COSTA RICA"),
  ("LIMOUSIN", "FRANCE"),
  ("LIMPIO", "PARAGUAY"),
  ("LIMPOPO", "SOUTH AFRICA"),
  ("LINARES", "CHILE"),
  ("LINCHUAN", "CHINA"),
  ("LINCOLNSHIRE", "UNITED KINGDOM"),
  ("LINDI", "TANZANIA"),
  ("LINFEN", "CHINA"),
  ("LINHAI", "CHINA"),
  ("LINHARES", "BRAZIL"),
  ("LINHE", "CHINA"),
  ("LINKÖPING", "SWEDEN"),
  ("LINQING", "CHINA"),
  ("LINSHUI", "CHINA"),
  ("LINXIA", "CHINA"),
  ("LINXI", "CHINA"),
  ("LINYI", "CHINA"),
  ("LINZ", "AUSTRIA"),
  ("LIPA", "PHILIPPINES"),
  ("LIPETSK", "RUSSIA"),
  ("LIPPE", "GERMANY"),
  ("LIRA", "UGANDA"),
  ("LISBOA E VALE DO TEJO", "PORTUGAL"),
  ("LISBON", "PORTUGAL"),
  ("LISBURN", "UNITED KINGDOM"),
  ("LISHU", "CHINA"),
  ("LISHUI", "CHINA"),
  ("LITOMĚŘICE", "CZECH REPUBLIC"),
  ("LITORAL", "EQUATORIAL GUINEA"),
  ("LITTORAL", "BENIN"),
  ("LITTORAL", "CAMEROON"),
  ("LIUPANSHUI", "CHINA"),
  ("LIUSHA", "CHINA"),
  ("LIUZHOU", "CHINA"),
  ("LIVERPOOL", "UNITED KINGDOM"),
  ("LIVINGSTONE", "ZAMBIA"),
  ("LJUBLJANA", "SLOVENIA"),
  ("LLANQUIHUE", "CHILE"),
  ("LLEIDA", "SPAIN"),
  ("LẠNG SƠN", "VIETNAM"),
  ("LƏNKƏRAN", "AZERBAIJAN"),
  ("LOA JANAN", "INDONESIA"),
  ("LOBAYE", "CENTRAL AFRICAN REPUBLIC"),
  ("LOBITO", "ANGOLA"),
  ("ŁÓDZKIE", "POLAND"),
  ("ŁÓDŹ", "POLAND"),
  ("LOEI", "THAILAND"),
  ("LOFA", "LIBERIA"),
  ("LOGONE OCCIDENTAL", "CHAD"),
  ("LOGONE ORIENTAL", "CHAD"),
  ("LOGROÑO", "SPAIN"),
  ("LOHARDAGA", "INDIA"),
  ("LOHIT", "INDIA"),
  ("LOIRE-ATLANTIQUE", "FRANCE"),
  ("LOIRE", "FRANCE"),
  ("LOIR-ET-CHER", "FRANCE"),
  ("LOIRET", "FRANCE"),
  ("LOJA", "ECUADOR"),
  ("LOKOJA", "NIGERIA"),
  ("LOKOSSA", "BENIN"),
  ("LOLA", "GUINEA"),
  ("LOMAS DE ZAMORA", "ARGENTINA"),
  ("LOMBARDY", "ITALY"),
  ("LOMÉ", "TOGO"),
  ("LONDONDERRY", "UNITED KINGDOM"),
  ("LONDON", "UNITED KINGDOM"),
  ("LONDRINA", "BRAZIL"),
  ("LONG AN", "VIETNAM"),
  ("LONGFENG", "CHINA"),
  ("LONGJIANG", "CHINA"),
  ("LONGJING", "CHINA"),
  ("LONGQUAN", "CHINA"),
  ("LÓNGTÁN", "TAIWAN"),
  ("LONG XUYÊN", "VIETNAM"),
  ("LONGYAN", "CHINA"),
  ("LONI", "INDIA"),
  ("LOP BURI", "THAILAND"),
  ("LORDAGAN", "IRAN"),
  ("LORESTAN", "IRAN"),
  ("LORETO", "PERU"),
  ("LORI", "ARMENIA"),
  ("LOROUM", "BURKINA FASO"),
  ("LÖRRACH", "GERMANY"),
  ("LORRAINE", "FRANCE"),
  ("LOS ALCARRIZOS", "DOMINICAN REPUBLIC"),
  ("LOS ANDES", "CHILE"),
  ("LOS ÁNGELES", "CHILE"),
  ("LOS BAÑOS", "PHILIPPINES"),
  ("LOS LAGOS", "CHILE"),
  ("LOS MOCHIS", "MEXICO"),
  ("LOS RÍOS", "ECUADOR"),
  ("LOS SANTOS", "PANAMA"),
  ("LOS TEQUES", "VENEZUELA"),
  ("LOT-ET-GARONNE", "FRANCE"),
  ("LOT", "FRANCE"),
  ("LOUDI", "CHINA"),
  ("LOUGA", "SENEGAL"),
  ("LOUTH", "IRELAND"),
  ("LOVEČ", "BULGARIA"),
  ("LOWER SAXONY", "GERMANY"),
  ("LUANCHENG", "CHINA"),
  ("LUAN", "CHINA"),
  ("LUANDA", "ANGOLA"),
  ("LUANG NAM THA", "LAOS"),
  ("LUANG PRABANG", "LAOS"),
  ("LUANSHYA", "ZAMBIA"),
  ("LUAPALA", "ZAMBIA"),
  ("LUBANGO", "ANGOLA"),
  ("LÜBECK", "GERMANY"),
  ("LUBELSKIE", "POLAND"),
  ("LUBLIN", "POLAND"),
  ("LUBOMBO", "SWAZILAND"),
  ("LUBU", "CHINA"),
  ("LUBUK LINGGAU", "INDONESIA"),
  ("LUBUK PAKAM", "INDONESIA"),
  ("LUBUMBASHI", "CONGO"),
  ("LUBUSKIE", "POLAND"),
  ("LUCENA", "PHILIPPINES"),
  ("LUCKNOW", "INDIA"),
  ("LUDHIANA", "INDIA"),
  ("LUDWIGSBURG", "GERMANY"),
  ("LUDWIGSHAFEN AM RHEIN", "GERMANY"),
  ("LUDWIGSHAFEN", "GERMANY"),
  ("LUDWIGSLUST-PARCHIM", "GERMANY"),
  ("LUGANO", "SWITZERLAND"),
  ("LUGO", "SPAIN"),
  ("LUHANS'KA", "UKRAINE"),
  ("LUHANS'K", "UKRAINE"),
  ("LUJÁN", "ARGENTINA"),
  ("LUJÁN DE CUYO", "ARGENTINA"),
  ("LÜLEBURGAZ", "TURKEY"),
  ("LUMAJANG", "INDONESIA"),
  ("LUNDA NORTE", "ANGOLA"),
  ("LUNDA SUL", "ANGOLA"),
  ("LÜNEBURG", "GERMANY"),
  ("LUNGLEI", "INDIA"),
  ("LUOCHENG", "CHINA"),
  ("LUOHE", "CHINA"),
  ("LUOYANG", "CHINA"),
  ("LUQIAO", "CHINA"),
  ("LUQUE", "PARAGUAY"),
  ("LUSAKA", "ZAMBIA"),
  ("LUSHNJË", "ALBANIA"),
  ("LUTON", "UNITED KINGDOM"),
  ("LUTS'K", "UKRAINE"),
  ("LUXEMBOURG", "LUXEMBOURG"),
  ("LUXEMBURG", "BELGIUM"),
  ("LUXOR", "EGYPT"),
  ("LUZERN", "SWITZERLAND"),
  ("LUZHOU", "CHINA"),
  ("LÚZHOU", "TAIWAN"),
  ("LÚZHÚ", "TAIWAN"),
  ("LUZIÂNIA", "BRAZIL"),
  ("L'VIVS'KA", "UKRAINE"),
  ("L'VIV", "UKRAINE"),
  ("LYON", "FRANCE"),
  ("LYSYCHANS'K", "UKRAINE"),
  ("LYUBERTSY", "RUSSIA"),
  ("MA'AN", "JORDAN"),
  ("MAANSHAN", "CHINA"),
  ("MAASTRICHT", "NETHERLANDS"),
  ("MA'AYN", "YEMEN"),
  ("MABA", "CHINA"),
  ("MABALACAT", "PHILIPPINES"),
  ("MACAÉ", "BRAZIL"),
  ("MACAPÁ", "BRAZIL"),
  ("MACEIÓ", "BRAZIL"),
  ("MACENTA", "GUINEA"),
  ("MACHALA", "ECUADOR"),
  ("MACHENG", "CHINA"),
  ("MACHIDA", "JAPAN"),
  ("MACHILĪPATNAM", "INDIA"),
  ("MACHINGA", "MALAWI"),
  ("MAČVA", "SERBIA"),
  ("MADABA", "JORDAN"),
  ("MADANG", "PAPUA NEW GUINEA"),
  ("MADANĪYĪN", "TUNISIA"),
  ("MADARĪPŪR", "BANGLADESH"),
  ("MADEIRA", "PORTUGAL"),
  ("MADHAVARAM", "INDIA"),
  ("MADHEPURA", "INDIA"),
  ("MADHUBANI", "INDIA"),
  ("MADHUPUR", "BANGLADESH"),
  ("MADHYAMGRAM", "INDIA"),
  ("MADHYA PRADESH", "INDIA"),
  ("MADINA", "GHANA"),
  ("MADĪNAT-AL-MUKALLA", "YEMEN"),
  ("MADĪNAT ĐAMAR", "YEMEN"),
  ("MADĪNAT H̨AMAD", "BAHRAIN"),
  ("MADĪNAT SITTAH UKTŪBAR", "EGYPT"),
  ("MADIUN", "INDONESIA"),
  ("MADRAS", "INDIA"),
  ("MADRE DE DIOS", "PERU"),
  ("MADRID", "SPAIN"),
  ("MADRIZ", "NICARAGUA"),
  ("MADURAI", "INDIA"),
  ("MADURAVOYAL", "INDIA"),
  ("MAEBASHI", "JAPAN"),
  ("MAE HONG SON", "THAILAND"),
  ("MAEKEL", "ERITREA"),
  ("MAFETENG", "LESOTHO"),
  ("MAGADAN", "RUSSIA"),
  ("MAGDALENA", "COLOMBIA"),
  ("MAGDEBURG", "GERMANY"),
  ("MAGÉ", "BRAZIL"),
  ("MAGELANG", "INDONESIA"),
  ("MAGELLANES", "CHILE"),
  ("MAGHNIA", "ALGERIA"),
  ("MAGNISÍA", "GREECE"),
  ("MAGNITOGORSK", "RUSSIA"),
  ("MAGUINDANAO", "PHILIPPINES"),
  ("MAGURA", "BANGLADESH"),
  ("MAGWAY", "MYANMAR"),
  ("MAHABAD", "IRAN"),
  ("MAHADEVAPURA", "INDIA"),
  ("MAHAJANGA", "MADAGASCAR"),
  ("MAHALAPYE", "BOTSWANA"),
  ("MAHAMAYA NAGAR", "INDIA"),
  ("MAHARAJGANJ", "INDIA"),
  ("MAHARASHTRA", "INDIA"),
  ("MAHASAMUND", "INDIA"),
  ("MAHA SARAKHAM", "THAILAND"),
  ("MAHBUBNAGAR", "INDIA"),
  ("MAHBŪBNAGAR", "INDIA"),
  ("MAHENDRAGARH", "INDIA"),
  ("MAHENDRANAGAR", "NEPAL"),
  ("MAHESANA", "INDIA"),
  ("MAHESHTALA", "INDIA"),
  ("MAHILJOŬ", "BELARUS"),
  ("MAHILJOW", "BELARUS"),
  ("MAH̨MŪD-AL-'ALĪ", "IRAQ"),
  ("MAHOBA", "INDIA"),
  ("MAHOTTARI", "NEPAL"),
  ("MAIDUGURI", "NIGERIA"),
  ("MAIMANSINGH", "BANGLADESH"),
  ("MAINE-ET-LOIRE", "FRANCE"),
  ("MAIN-KINZIG-KREIS", "GERMANY"),
  ("MAINPURI", "INDIA"),
  ("MAIN-SPESSART", "GERMANY"),
  ("MAIN-TAUBER-KREIS", "GERMANY"),
  ("MAIN-TAUNUS-KREIS", "GERMANY"),
  ("MAINZ-BINGEN", "GERMANY"),
  ("MAINZ", "GERMANY"),
  ("MAIPO", "CHILE"),
  ("MAIPÚ", "ARGENTINA"),
  ("MAISŪRU", "INDIA"),
  ("MAJALAYA", "INDONESIA"),
  ("MAJALENGKA", "INDONESIA"),
  ("MAJIE", "CHINA"),
  ("MAKAMBA", "BURUNDI"),
  ("MAKASAR", "INDONESIA"),
  ("MAKENI", "SIERRA LEONE"),
  ("MAKHACHKALA", "RUSSIA"),
  ("MAKIYIVKA", "UKRAINE"),
  ("MAKKAH", "SAUDI ARABIA"),
  ("MAKONDE", "ZIMBABWE"),
  ("MAKONI", "ZIMBABWE"),
  ("MAKRANA", "INDIA"),
  ("MAKŪ", "IRAN"),
  ("MAKURDI", "NIGERIA"),
  ("MAKWANPUR", "NEPAL"),
  ("MALABO", "EQUATORIAL GUINEA"),
  ("MALABON", "PHILIPPINES"),
  ("MÁLAGA", "SPAIN"),
  ("MALAITA", "SOLOMON ISLANDS"),
  ("MALAKAL", "SOUTH SUDAN"),
  ("MALAMBO", "COLOMBIA"),
  ("MALANG", "INDONESIA"),
  ("MALANJE", "ANGOLA"),
  ("MALAPPURAM", "INDIA"),
  ("MALARD", "IRAN"),
  ("MALATYA", "TURKEY"),
  ("MALAYER", "IRAN"),
  ("MALDAH", "INDIA"),
  ("MALDONADO", "URUGUAY"),
  ("MALEGAON", "INDIA"),
  ("MALEKAN", "IRAN"),
  ("MALÉ", "MALDIVES"),
  ("MALER KOTLA", "INDIA"),
  ("MALI", "GUINEA"),
  ("MALKAJGIRI", "INDIA"),
  ("MALKANGIRI", "INDIA"),
  ("MALLECO", "CHILE"),
  ("MALMÖ", "SWEDEN"),
  ("MALOLOS", "PHILIPPINES"),
  ("MAŁOPOLSKIE", "POLAND"),
  ("MALUKU", "INDONESIA"),
  ("MALUKU UTARA", "INDONESIA"),
  ("MALVINAS ARGENTINAS", "ARGENTINA"),
  ("MAMASANĪ", "IRAN"),
  ("MAMBÉRÉ-KADÉÏ", "CENTRAL AFRICAN REPUBLIC"),
  ("MAMOU", "GUINEA"),
  ("MANABÍ", "ECUADOR"),
  ("MANADO", "INDONESIA"),
  ("MANAGUA", "NICARAGUA"),
  ("MANAMA", "BAHRAIN"),
  ("MANAUS", "BRAZIL"),
  ("MANAWATU-WANGANUI", "NEW ZEALAND"),
  ("MANCHE", "FRANCE"),
  ("MANCHESTER", "UNITED KINGDOM"),
  ("MANDALAY", "MYANMAR"),
  ("MANDAUE", "PHILIPPINES"),
  ("MANDIANA", "GUINEA"),
  ("MANDI", "INDIA"),
  ("MANDLA", "INDIA"),
  ("MANDOLI", "INDIA"),
  ("MANDSAUR", "INDIA"),
  ("MANDURAH", "AUSTRALIA"),
  ("MANDYA", "INDIA"),
  ("MANGALDAN", "PHILIPPINES"),
  ("MANGALURU", "INDIA"),
  ("MANGOCHI", "MALAWI"),
  ("MANGO", "INDIA"),
  ("MANICALAND", "ZIMBABWE"),
  ("MANICA", "MOZAMBIQUE"),
  ("MANIEMA", "CONGO"),
  ("MAŅIKGANJ", "BANGLADESH"),
  ("MANILA", "PHILIPPINES"),
  ("MANIPUR", "INDIA"),
  ("MANISA", "TURKEY"),
  ("MANITOBA", "CANADA"),
  ("MAN", "IVORY COAST"),
  ("MANIZALES", "COLOMBIA"),
  ("MAŅĶISTAU", "KAZAKHSTAN"),
  ("MANNHEIM", "GERMANY"),
  ("MANSA", "INDIA"),
  ("MANSFELD-SÜDHARZ", "GERMANY"),
  ("MANTA", "ECUADOR"),
  ("MANŪBAH", "TUNISIA"),
  ("MANUKAU", "NEW ZEALAND"),
  ("MANYARA", "TANZANIA"),
  ("MANZANILLO", "CUBA"),
  ("MANZANILLO", "MEXICO"),
  ("MANZINI", "SWAZILAND"),
  ("MAOMING", "CHINA"),
  ("MAPUTO", "MOZAMBIQUE"),
  ("MAPUTO PROVINCIA", "MOZAMBIQUE"),
  ("MAQBANAH", "YEMEN"),
  ("MARABÁ", "BRAZIL"),
  ("MARACAIBO", "VENEZUELA"),
  ("MARACANAÚ", "BRAZIL"),
  ("MARACAY", "VENEZUELA"),
  ("MARADI", "NIGER"),
  ("MARAGHEH", "IRAN"),
  ("MARAHOUÉ", "IVORY COAST"),
  ("MARAMUREŞ", "ROMANIA"),
  ("MARAND", "IRAN"),
  ("MARANHÃO", "BRAZIL"),
  ("MARA", "TANZANIA"),
  ("MARAWI CITY", "PHILIPPINES"),
  ("MARAWI", "PHILIPPINES"),
  ("MARBELLA", "SPAIN"),
  ("MARBURG-BIEDENKOPF", "GERMANY"),
  ("MARCHE", "ITALY"),
  ("MARCOS JUÁREZ", "ARGENTINA"),
  ("MARDAN", "PAKISTAN"),
  ("MAR DEL PLATA", "ARGENTINA"),
  ("MARDIN", "TURKEY"),
  ("MARGIBI", "LIBERIA"),
  ("MARGILON", "UZBEKISTAN"),
  ("MARIANO ROQUE ALONSO", "PARAGUAY"),
  ("MARIARA", "VENEZUELA"),
  ("MARÍA TRINIDAD SÁNCHEZ", "DOMINICAN REPUBLIC"),
  ("MARIBOR", "SLOVENIA"),
  ("MA'RIB", "YEMEN"),
  ("MARICÁ", "BRAZIL"),
  ("MARI EL", "RUSSIA"),
  ("MARIGAON", "INDIA"),
  ("MARIJAMPOLĖS", "LITHUANIA"),
  ("MARÍLIA", "BRAZIL"),
  ("MARINDUQUE", "PHILIPPINES"),
  ("MARINGÁ", "BRAZIL"),
  ("MARITIME", "TOGO"),
  ("MARITUBA", "BRAZIL"),
  ("MARI", "TURKMENISTAN"),
  ("MARIUPOL'", "UKRAINE"),
  ("MARĪVAN", "IRAN"),
  ("MARKAZĪ", "IRAN"),
  ("MÄRKISCHER KREIS", "GERMANY"),
  ("MÄRKISCH-ODERLAND", "GERMANY"),
  ("MARNE", "FRANCE"),
  ("MARONDERA", "ZIMBABWE"),
  ("MAROUA", "CAMEROON"),
  ("MARRAKECH, MARRAKESH", "MOROCCO"),
  ("MARRAKECH", "MOROCCO"),
  ("MARRAKECH-TENSIFT-AL HAOUZ", "MOROCCO"),
  ("MARSA MATRUH, MATRUH", "EGYPT"),
  ("MARSEILLE", "FRANCE"),
  ("MARTAPURA", "INDONESIA"),
  ("MARUGAME", "JAPAN"),
  ("MARVDASHT", "IRAN"),
  ("MARV DASHT", "IRAN"),
  ("MARYLAND", "LIBERIA"),
  ("MASALLI", "AZERBAIJAN"),
  ("MASAYA", "NICARAGUA"),
  ("MASBATE", "PHILIPPINES"),
  ("MASCARA", "ALGERIA"),
  ("MASERU", "LESOTHO"),
  ("MASHHAD", "IRAN"),
  ("MASHONALAND CENTRAL", "ZIMBABWE"),
  ("MASHONALAND EAST", "ZIMBABWE"),
  ("MASHONALAND WEST", "ZIMBABWE"),
  ("MASJED-E SOLEYMAN", "IRAN"),
  ("MASJED SOLEYMAN", "IRAN"),
  ("MASVINGO", "ZIMBABWE"),
  ("MATABELELAND NORTH", "ZIMBABWE"),
  ("MATABELELAND SOUTH", "ZIMBABWE"),
  ("MATADI", "CONGO"),
  ("MATAGALPA", "NICARAGUA"),
  ("MATALE", "SRI LANKA"),
  ("MATAM", "SENEGAL"),
  ("MATANZAS", "CUBA"),
  ("MATARAM", "INDONESIA"),
  ("MATARA", "SRI LANKA"),
  ("MATARIA", "EGYPT"),
  ("MATARÓ", "SPAIN"),
  ("MATHURA", "INDIA"),
  ("MATI", "PHILIPPINES"),
  ("MATLAB", "BANGLADESH"),
  ("MATOBO", "ZIMBABWE"),
  ("MATO GROSSO", "BRAZIL"),
  ("MATO GROSSO DO SUL", "BRAZIL"),
  ("MATOLA", "MOZAMBIQUE"),
  ("MATRUH", "EGYPT"),
  ("MATRUH", "OMAN"),
  ("MATSUBARA", "JAPAN"),
  ("MATSUDO", "JAPAN"),
  ("MATSUE", "JAPAN"),
  ("MATSUMOTO", "JAPAN"),
  ("MATSUSAKA", "JAPAN"),
  ("MATSUYAMA", "JAPAN"),
  ("MATURÍN", "VENEZUELA"),
  ("MAUÁ", "BRAZIL"),
  ("MAU", "INDIA"),
  ("MAULE", "CHILE"),
  ("MAULVI BAZAR", "BANGLADESH"),
  ("MAWIYAH", "YEMEN"),
  ("MAWLAMYINE", "MYANMAR"),
  ("MAXIXE", "MOZAMBIQUE"),
  ("MAYAGÜEZ-AGUADILLA", "PUERTO RICO"),
  ("MAYDAN-WARDAK", "AFGHANISTAN"),
  ("MAYEN-KOBLENZ", "GERMANY"),
  ("MAYENNE", "FRANCE"),
  ("MAYKOP", "RUSSIA"),
  ("MAYMYO", "MYANMAR"),
  ("MAYO", "IRELAND"),
  ("MAYO-KÉBBI", "CHAD"),
  ("MAYOTTE", "MAYOTTE"),
  ("MAYSAN", "IRAQ"),
  ("MAYURBHANJ", "INDIA"),
  ("MAZABUKA", "ZAMBIA"),
  ("MAZANDARAN", "IRAN"),
  ("MAZAR-E ŠARĪF", "AFGHANISTAN"),
  ("MAZATLÁN", "MEXICO"),
  ("MAZOWE", "ZIMBABWE"),
  ("MAZOWIECKIE", "POLAND"),
  ("MAZYR", "BELARUS"),
  ("MBANDAKA", "CONGO"),
  ("MBANZA-NGUNGU", "CONGO"),
  ("MBERENGWA", "ZIMBABWE"),
  ("MBEYA", "TANZANIA"),
  ("MBOMOU", "CENTRAL AFRICAN REPUBLIC"),
  ("MBOUR", "SENEGAL"),
  ("MBUJI-MAYI", "CONGO"),
  ("MCHINJI", "MALAWI"),
  ("MEATH", "IRELAND"),
  ("MECCA", "SAUDI ARABIA"),
  ("MECKLENBURGISCHE SEENPLATTE", "GERMANY"),
  ("MECKLENBURG-WEST POMMERANIA", "GERMANY"),
  ("MEDAK", "INDIA"),
  ("MEDAN", "INDONESIA"),
  ("MEDEA", "ALGERIA"),
  ("MEDELLÍN", "COLOMBIA"),
  ("MEĐIMURJE", "CROATIA"),
  ("MEDIOUNA", "MOROCCO"),
  ("MEDWAY", "UNITED KINGDOM"),
  ("MEERUT", "INDIA"),
  ("MEET GHAMR", "EGYPT"),
  ("MEGHALAYA", "INDIA"),
  ("MEHEDINŢI", "ROMANIA"),
  ("MEHERPUR", "BANGLADESH"),
  ("MEIKTILA", "MYANMAR"),
  ("MEILU", "CHINA"),
  ("MEISSEN", "GERMANY"),
  ("MEIZHOU", "CHINA"),
  ("MEJICANOS", "EL SALVADOR"),
  ("MEK'ELĒ", "ETHIOPIA"),
  ("MEKNES", "MOROCCO"),
  ("MEKNES-TAFILALET", "MOROCCO"),
  ("MELAKA", "MALAYSIA"),
  ("MELAWI", "EGYPT"),
  ("MELBOURNE", "AUSTRALIA"),
  ("MELIPILLA", "CHILE"),
  ("MELITOPOL'", "UKRAINE"),
  ("MENDOZA", "ARGENTINA"),
  ("MENIA", "EGYPT"),
  ("MENIAT EL NASR", "EGYPT"),
  ("MENTOUGOU", "CHINA"),
  ("MENUFIA", "EGYPT"),
  ("MERCEDES", "ARGENTINA"),
  ("MERGUI", "MYANMAR"),
  ("MÉRIDA", "MEXICO"),
  ("MÉRIDA", "VENEZUELA"),
  ("MERLO", "ARGENTINA"),
  ("MERSEYSIDE", "UNITED KINGDOM"),
  ("MERSIN", "TURKEY"),
  ("MERZIG-WADERN", "GERMANY"),
  ("MESHKĪNSHAHR", "IRAN"),
  ("MESSAAD", "ALGERIA"),
  ("MESSINA", "ITALY"),
  ("MESSINÍA", "GREECE"),
  ("META", "COLOMBIA"),
  ("METROPOLITANA", "CHILE"),
  ("METTMANN", "GERMANY"),
  ("METZ", "FRANCE"),
  ("MEURTHE-ET-MOSELLE", "FRANCE"),
  ("MEUSE", "FRANCE"),
  ("MEWAT", "INDIA"),
  ("MEXICALI", "MEXICO"),
  ("MÉXICO", "MEXICO"),
  ("MEYCAUAYAN", "PHILIPPINES"),
  ("MEZHDURECHENSK", "RUSSIA"),
  ("MIANCHANG", "CHINA"),
  ("MĪANDŪAB", "IRAN"),
  ("MIANYANG", "CHINA"),
  ("MIÁOLÌ", "TAIWAN"),
  ("MIASS", "RUSSIA"),
  ("MICHALOVCE", "SLOVAKIA"),
  ("MICHOACÁN", "MEXICO"),
  ("MIDDELBURG", "SOUTH AFRICA"),
  ("MIDDLESBROUGH", "UNITED KINGDOM"),
  ("MIDI-PYRÉNÉES", "FRANCE"),
  ("MIDLANDS", "ZIMBABWE"),
  ("MIDNAPUR", "INDIA"),
  ("MIDSTREAM", "SOUTH AFRICA"),
  ("MIDTJYLLAND", "DENMARK"),
  ("MIE", "JAPAN"),
  ("MIHARA", "JAPAN"),
  ("MILA", "ALGERIA"),
  ("MILAGRO", "ECUADOR"),
  ("MILAN", "ITALY"),
  ("MILH̨AN", "YEMEN"),
  ("MILNE BAY", "PAPUA NEW GUINEA"),
  ("MILTENBERG", "GERMANY"),
  ("MILTON KEYNES", "UNITED KINGDOM"),
  ("MĪNAB", "IRAN"),
  ("MINAS GERAIS", "BRAZIL"),
  ("MINATITLÁN", "MEXICO"),
  ("MINDEN-LÜBBECKE", "GERMANY"),
  ("MINGAORA", "PAKISTAN"),
  ("MINGSHUI", "CHINA"),
  ("MINNA", "NIGERIA"),
  ("MINO", "JAPAN"),
  ("MINSKAJA VOBLASTS'", "BELARUS"),
  ("MINSK", "BELARUS"),
  ("MĪNŪDASHT", "IRAN"),
  ("MIRA BHAYANDAR", "INDIA"),
  ("MIRAMAR", "MEXICO"),
  ("MIRANDA", "VENEZUELA"),
  ("MĪRAT", "INDIA"),
  ("MIRI", "MALAYSIA"),
  ("MĪRPUR KHAS", "PAKISTAN"),
  ("MIRYALAGUDA", "INDIA"),
  ("MIRYANG", "SOUTH KOREA"),
  ("MIRZAPUR", "INDIA"),
  ("MISAMIS OCCIDENTAL", "PHILIPPINES"),
  ("MISAMIS ORIENTAL", "PHILIPPINES"),
  ("MISHIMA", "JAPAN"),
  ("MISIONES", "ARGENTINA"),
  ("MISIONES", "PARAGUAY"),
  ("MISKOLC", "HUNGARY"),
  ("MISSISSAUGA", "CANADA"),
  ("MIŞRATAH", "LIBYA"),
  ("MITAKA", "JAPAN"),
  ("MITO", "JAPAN"),
  ("MITTELSACHSEN", "GERMANY"),
  ("MIXCO", "GUATEMALA"),
  ("MIYAGI", "JAPAN"),
  ("MIYAKONOJO", "JAPAN"),
  ("MIYANDOAB", "IRAN"),
  ("MIYANEH", "IRAN"),
  ("MIYAZAKI", "JAPAN"),
  ("MIZORAM", "INDIA"),
  ("MLADÁ BOLESLAV", "CZECH REPUBLIC"),
  ("MOBARAKEH", "IRAN"),
  ("MOCA", "DOMINICAN REPUBLIC"),
  ("MODENA", "ITALY"),
  ("MODI'IN-MAKKABIM-RE'UT", "ISRAEL"),
  ("MODINAGAR", "INDIA"),
  ("MOERS", "GERMANY"),
  ("MOGA", "INDIA"),
  ("MOGI GUAÇU", "BRAZIL"),
  ("MOGOK", "MYANMAR"),
  ("MOHALE'S HOEK", "LESOTHO"),
  ("MOHALI", "INDIA"),
  ("MOH̨AMMADSHAHR", "IRAN"),
  ("MOHAMMEDIA", "MOROCCO"),
  ("MOJI DAS CRUZES", "BRAZIL"),
  ("MOJOKERTO", "INDONESIA"),
  ("MOKHOTLONG", "LESOTHO"),
  ("MOKOKCHUNG", "INDIA"),
  ("MOKOPANE", "SOUTH AFRICA"),
  ("MOKPO", "SOUTH KOREA"),
  ("MOLISE", "ITALY"),
  ("MOMBASA", "KENYA"),
  ("MONAGAS", "VENEZUELA"),
  ("MONARAGALA", "SRI LANKA"),
  ("MÖNCHENGLADBACH", "GERMANY"),
  ("MONCLOVA", "MEXICO"),
  ("MONCTON", "CANADA"),
  ("MON", "INDIA"),
  ("MON", "MYANMAR"),
  ("MONO", "BENIN"),
  ("MONROVIA", "LIBERIA"),
  ("MONSEÑOR NOUEL", "DOMINICAN REPUBLIC"),
  ("MONTALBAN", "PHILIPPINES"),
  ("MONTANA", "BULGARIA"),
  ("MONTE CRISTI", "DOMINICAN REPUBLIC"),
  ("MONTE PLATA", "DOMINICAN REPUBLIC"),
  ("MONTERÍA", "COLOMBIA"),
  ("MONTERO", "BOLIVIA"),
  ("MONTERREY", "MEXICO"),
  ("MONTES CLAROS", "BRAZIL"),
  ("MONTEVIDEO", "URUGUAY"),
  ("MONTPELLIER", "FRANCE"),
  ("MONTREAL", "CANADA"),
  ("MONTSERRADO", "LIBERIA"),
  ("MONYWA", "MYANMAR"),
  ("MONZA", "ITALY"),
  ("MOPTI", "MALI"),
  ("MOQUEGUA", "PERU"),
  ("MORADABAD", "INDIA"),
  ("MORANG", "NEPAL"),
  ("MORATUWA", "SRI LANKA"),
  ("MORAVICA", "SERBIA"),
  ("MORAVSKOSLEZSKÝ", "CZECH REPUBLIC"),
  ("MORAZÁN", "EL SALVADOR"),
  ("MORBIHAN", "FRANCE"),
  ("MORDOVIA", "RUSSIA"),
  ("MORELIA", "MEXICO"),
  ("MORELOS", "MEXICO"),
  ("MORENA", "INDIA"),
  ("MORENO", "ARGENTINA"),
  ("MØRE OG ROMSDAL", "NORWAY"),
  ("MORIGUCHI", "JAPAN"),
  ("MORIOKA", "JAPAN"),
  ("MORMUGAO", "INDIA"),
  ("MOROBE", "PAPUA NEW GUINEA"),
  ("MOROGORO", "TANZANIA"),
  ("MORÓN", "ARGENTINA"),
  ("MORONA SANTIAGO", "ECUADOR"),
  ("MORVI", "INDIA"),
  ("MOSCOW", "RUSSIA"),
  ("MOSELLE", "FRANCE"),
  ("MOSHI", "TANZANIA"),
  ("MOSKOVSKAYA OBLAST", "RUSSIA"),
  ("MOSSORÓ", "BRAZIL"),
  ("MOSTAGHANEM", "ALGERIA"),
  ("MOST", "CZECH REPUBLIC"),
  ("MÓSTOLES", "SPAIN"),
  ("MOTĪHARI", "INDIA"),
  ("MOUHOUN", "BURKINA FASO"),
  ("MOULAY YACOUB", "MOROCCO"),
  ("MOUNDOU", "CHAD"),
  ("MOUNTAIN PROVINCE", "PHILIPPINES"),
  ("MOUNT DARWIN", "ZIMBABWE"),
  ("MOXICO", "ANGOLA"),
  ("MOYAMBA", "SIERRA LEONE"),
  ("MOYEN-CAVALLY", "IVORY COAST"),
  ("MOYEN-CHARI", "CHAD"),
  ("MOYEN-COMOÉ", "IVORY COAST"),
  ("MOYENNE GUINÉE", "GUINEA"),
  ("MPUMALANGA", "SOUTH AFRICA"),
  ("M'SILA", "ALGERIA"),
  ("MỸ THO", "VIETNAM"),
  ("MTSKHETA-MTIANETI", "GEORGIA"),
  ("MTWARA", "TANZANIA"),
  ("MUBARAK AL-KABĪR", "KUWAIT"),
  ("MUBI", "NIGERIA"),
  ("MUDANJIANG", "CHINA"),
  ("MUDON", "MYANMAR"),
  ("MUDUG", "SOMALIA"),
  ("MUDZI", "ZIMBABWE"),
  ("MUFULIRA", "ZAMBIA"),
  ("MUGHAL SARAI", "INDIA"),
  ("MUĞLA", "TURKEY"),
  ("MUHARRAQ", "BAHRAIN"),
  ("MÜHLDORF AM INN", "GERMANY"),
  ("MUKDAHAN", "THAILAND"),
  ("MUKOTO", "ZIMBABWE"),
  ("MUKTSAR", "INDIA"),
  ("MULANJE", "MALAWI"),
  ("MÜLHEIM AN DER RUHR", "GERMANY"),
  ("MÜLHEIM", "GERMANY"),
  ("MULHOUSE", "FRANCE"),
  ("MULLAITIVU", "SRI LANKA"),
  ("MULTAN", "PAKISTAN"),
  ("MUMBAI", "INDIA"),
  ("MUMBAI SUBURBAN", "INDIA"),
  ("MUNAKATA", "JAPAN"),
  ("MÜNCHEN", "GERMANY"),
  ("MUNDKA", "INDIA"),
  ("MUNGER", "INDIA"),
  ("MUNICH", "GERMANY"),
  ("MUNSHIGANJ", "BANGLADESH"),
  ("MÜNSTER", "GERMANY"),
  ("MUQDISHO", "SOMALIA"),
  ("MURADNAGAR", "INDIA"),
  ("MURAMVYA", "BURUNDI"),
  ("MURCIA", "SPAIN"),
  ("MUREHWA", "ZIMBABWE"),
  ("MUREŞ", "ROMANIA"),
  ("MURĪDKE", "PAKISTAN"),
  ("MURMANSK", "RUSSIA"),
  ("MUROM", "RUSSIA"),
  ("MURSHIDABAD", "INDIA"),
  ("MURWARA", "INDIA"),
  ("MUSASHINO", "JAPAN"),
  ("MUSCAT", "OMAN"),
  ("MUSLIM MINDANAO", "PHILIPPINES"),
  ("MUSOMA", "TANZANIA"),
  ("MUSTAFABAD", "INDIA"),
  ("MUŞ", "TURKEY"),
  ("MUTARE", "ZIMBABWE"),
  ("MUTASA", "ZIMBABWE"),
  ("MUYINGA", "BURUNDI"),
  ("MUZAFFARGARH", "PAKISTAN"),
  ("MUZAFFARNAGAR", "INDIA"),
  ("MUZAFFARPUR", "INDIA"),
  ("MWANZA", "MALAWI"),
  ("MWANZA", "TANZANIA"),
  ("MWARO", "BURUNDI"),
  ("MWENE-DITU", "CONGO"),
  ("MWENEZI", "ZIMBABWE"),
  ("MYAGDI", "NEPAL"),
  ("MYINGYAN", "MYANMAR"),
  ("MYITKYINA", "MYANMAR"),
  ("MYKOLAYIVS'KA", "UKRAINE"),
  ("MYKOLAYIV", "UKRAINE"),
  ("MYSORE", "INDIA"),
  ("MYTISHCHI", "RUSSIA"),
  ("MZIMBA", "MALAWI"),
  ("MZUZU CITY", "MALAWI"),
  ("MZUZU", "MALAWI"),
  ("NAAMA", "ALGERIA"),
  ("NABARANGAPUR", "INDIA"),
  ("NABEREZHNYYE CHELNY, YARCHALLY", "RUSSIA"),
  ("NABLUS", "PALESTINE"),
  ("NABUL", "TUNISIA"),
  ("NACALA", "MOZAMBIQUE"),
  ("NÁCHOD", "CZECH REPUBLIC"),
  ("NADIAD", "INDIA"),
  ("NADIA", "INDIA"),
  ("NADOR", "MOROCCO"),
  ("NAGALAND", "INDIA"),
  ("NAGANO", "JAPAN"),
  ("NAGAOKA", "JAPAN"),
  ("NAGAON", "INDIA"),
  ("NAGAPATTINAM", "INDIA"),
  ("NAGA", "PHILIPPINES"),
  ("NAGAREYAMA", "JAPAN"),
  ("NAGASAKI", "JAPAN"),
  ("NAGAUR", "INDIA"),
  ("NAGDA", "INDIA"),
  ("NAGERCOIL", "INDIA"),
  ("NAGOYA", "JAPAN"),
  ("NAGPUR", "INDIA"),
  ("NAHA", "JAPAN"),
  ("NAHAVAND", "IRAN"),
  ("NAHOURI", "BURKINA FASO"),
  ("NAHR-AN-NIL", "SUDAN"),
  ("NAIHATI", "INDIA"),
  ("NAINITAL", "INDIA"),
  ("NAIROBI", "KENYA"),
  ("NAITASIRI", "FIJI ISLANDS"),
  ("NAJAFABAD", "IRAN"),
  ("NAJRAN", "SAUDI ARABIA"),
  ("NAKHODKA", "RUSSIA"),
  ("NAKHON NAYOK", "THAILAND"),
  ("NAKHON PATHOM", "THAILAND"),
  ("NAKHON PHANOM", "THAILAND"),
  ("NAKHON RATCHASIMA", "THAILAND"),
  ("NAKHON SAWAN", "THAILAND"),
  ("NAKHON SI THAMMARAT", "THAILAND"),
  ("NAKURU", "KENYA"),
  ("NALANDA", "INDIA"),
  ("NALASOPARA", "INDIA"),
  ("NALBARI", "INDIA"),
  ("NALCHIK", "RUSSIA"),
  ("NALGONDA", "INDIA"),
  ("NAMAKKAL", "INDIA"),
  ("NAMAŅGAN", "UZBEKISTAN"),
  ("NAM ĐỊNH", "VIETNAM"),
  ("NAMENTENGA", "BURKINA FASO"),
  ("NAMIBE", "ANGOLA"),
  ("NAMPO", "NORTH KOREA"),
  ("NAMPULA", "MOZAMBIQUE"),
  ("NAMUR", "BELGIUM"),
  ("NAMYANGJU", "SOUTH KOREA"),
  ("NANA-GRIBIZI", "CENTRAL AFRICAN REPUBLIC"),
  ("NANA-MAMBÉRÉ", "CENTRAL AFRICAN REPUBLIC"),
  ("NANCHA", "CHINA"),
  ("NANCHANG", "CHINA"),
  ("NANCHONG", "CHINA"),
  ("NANCY", "FRANCE"),
  ("NANDED", "INDIA"),
  ("NANDURBAR", "INDIA"),
  ("NANDYAL", "INDIA"),
  ("NANGARHAR", "AFGHANISTAN"),
  ("NANGLOI JAT", "INDIA"),
  ("NANJING", "CHINA"),
  ("NANNING", "CHINA"),
  ("NANPIAO", "CHINA"),
  ("NANPING", "CHINA"),
  ("NANTES", "FRANCE"),
  ("NAN", "THAILAND"),
  ("NANTONG", "CHINA"),
  ("NANTONGKUANG", "CHINA"),
  ("NÁNTÓU", "TAIWAN"),
  ("NANYANG", "CHINA"),
  ("NAPLES", "ITALY"),
  ("NAPO", "ECUADOR"),
  ("NAQADEH", "IRAN"),
  ("NARA", "JAPAN"),
  ("NARAL", "BANGLADESH"),
  ("NARASHINO", "JAPAN"),
  ("NARATHIWAT", "THAILAND"),
  ("NARAYANGANJ", "BANGLADESH"),
  ("NARAYANPUR", "INDIA"),
  ("NARIN", "KYRGYZSTAN"),
  ("NARIÑO", "COLOMBIA"),
  ("NARITA", "JAPAN"),
  ("NARMADA", "INDIA"),
  ("NARSIMHAPUR", "INDIA"),
  ("NARSINGDI", "BANGLADESH"),
  ("NASHIK", "INDIA"),
  ("NASĪMSHAHR", "IRAN"),
  ("NASSARAWA", "NIGERIA"),
  ("NASSAU", "BAHAMAS"),
  ("NASUSHIOBARA", "JAPAN"),
  ("NATAL", "BRAZIL"),
  ("NATIONAL CAPITAL DISTRICT", "PAPUA NEW GUINEA"),
  ("NATIONAL CAPITAL REGION", "PHILIPPINES"),
  ("NAŢOR", "BANGLADESH"),
  ("NAUCALPAN DE JUÁREZ", "MEXICO"),
  ("NAUGAON", "BANGLADESH"),
  ("NAVADWĪP", "INDIA"),
  ("NAVARRA", "SPAIN"),
  ("NAVGHAR", "INDIA"),
  ("NAVI MUMBAI", "INDIA"),
  ("NAVOI", "UZBEKISTAN"),
  ("NAVOJOA", "MEXICO"),
  ("NAVOTAS", "PHILIPPINES"),
  ("NAVSARI", "INDIA"),
  ("NAWABGANJ", "BANGLADESH"),
  ("NAWABSHAH", "PAKISTAN"),
  ("NAWADA", "INDIA"),
  ("NAWALPARASI", "NEPAL"),
  ("NAXÇIVAN", "AZERBAIJAN"),
  ("NAYAGARH", "INDIA"),
  ("NAYALA", "BURKINA FASO"),
  ("NAYARIT", "MEXICO"),
  ("NAZ̨ARABAD", "IRAN"),
  ("NAZARABAD", "IRAN"),
  ("NAZILLI", "TURKEY"),
  ("NAZRAN", "RUSSIA"),
  ("NAZRĒT", "ETHIOPIA"),
  ("N'DJAMÉNA", "CHAD"),
  ("NDOLA", "ZAMBIA"),
  ("NDZOUANI", "COMOROS"),
  ("NEAMŢ", "ROMANIA"),
  ("NEATH PORT TALBOT", "UNITED KINGDOM"),
  ("NECKAR-ODENWALD-KREIS", "GERMANY"),
  ("NEEMUCH", "INDIA"),
  ("NEFTEKAMSK", "RUSSIA"),
  ("NEFTEYUGANSK", "RUSSIA"),
  ("NEGERI SEMBILAN", "MALAYSIA"),
  ("NEGOMBO", "SRI LANKA"),
  ("NEGROS OCCIDENTAL", "PHILIPPINES"),
  ("NEGROS ORIENTAL", "PHILIPPINES"),
  ("NEHE", "CHINA"),
  ("NEIJIANG", "CHINA"),
  ("NEIMENGGU", "CHINA"),
  ("NEIVA", "COLOMBIA"),
  ("NEKA", "IRAN"),
  ("NEK'EMTĒ", "ETHIOPIA"),
  ("NELLORE", "INDIA"),
  ("NELLUR", "INDIA"),
  ("NELSPRUIT", "SOUTH AFRICA"),
  ("ÑEMBY", "PARAGUAY"),
  ("NENO", "MALAWI"),
  ("NETANYA", "ISRAEL"),
  ("NETRAKONA", "BANGLADESH"),
  ("NEUCHÂTEL", "SWITZERLAND"),
  ("NEUMARKT IN DER OBERPFALZ", "GERMANY"),
  ("NEUNKIRCHEN", "GERMANY"),
  ("NEUQUÉN", "ARGENTINA"),
  ("NEUSS", "GERMANY"),
  ("NEU-ULM", "GERMANY"),
  ("NEUWIED", "GERMANY"),
  ("NEVINNOMYSSK", "RUSSIA"),
  ("NEVŞEHIR", "TURKEY"),
  ("NEW BRUNSWICK", "CANADA"),
  ("NEWCASTLE", "AUSTRALIA"),
  ("NEWCASTLE UPON TYNE", "UNITED KINGDOM"),
  ("NEW DELHI", "INDIA"),
  ("NEWFOUNDLAND AND LABRADOR", "CANADA"),
  ("NEW IRELAND", "PAPUA NEW GUINEA"),
  ("NEWPORT", "UNITED KINGDOM"),
  ("NEW PROVIDENCE", "BAHAMAS"),
  ("NEWRY AND MOURNE", "UNITED KINGDOM"),
  ("NEW SOUTH WALES", "AUSTRALIA"),
  ("NEYAGAWA", "JAPAN"),
  ("NEYRĪZ", "IRAN"),
  ("NEYSHABŪR", "IRAN"),
  ("NEYVELI", "INDIA"),
  ("NEYYATTINKARA", "INDIA"),
  ("NGAMPRAH", "INDONESIA"),
  ("NGAOUNDÉRÉ", "CAMEROON"),
  ("NGAZIDJA", "COMOROS"),
  ("NGHỆ AN", "VIETNAM"),
  ("NGÖBE BUGLÉ", "PANAMA"),
  ("NGOUNIÉ", "GABON"),
  ("NGOZI", "BURUNDI"),
  ("NGWAKETSE", "BOTSWANA"),
  ("NHA TRANG", "VIETNAM"),
  ("NIAMEY", "NIGER"),
  ("NIARI", "CONGO"),
  ("NIASSA", "MOZAMBIQUE"),
  ("NI BARAKPUR", "INDIA"),
  ("NICE", "FRANCE"),
  ("NICOSIA", "CYPRUS"),
  ("NI DILLI", "INDIA"),
  ("NIEDERÖSTERREICH", "AUSTRIA"),
  ("NIENBURG", "GERMANY"),
  ("NIÈVRE", "FRANCE"),
  ("NIĞDE", "TURKEY"),
  ("NIGEL", "SOUTH AFRICA"),
  ("NIGER", "NIGERIA"),
  ("NIIGATA", "JAPAN"),
  ("NIIHAMA", "JAPAN"),
  ("NIIZA", "JAPAN"),
  ("NIJMEGEN", "NETHERLANDS"),
  ("NÍKAIA", "GREECE"),
  ("NIKOPOL'", "UKRAINE"),
  ("NĪKSHAHR", "IRAN"),
  ("NILÓPOLIS", "BRAZIL"),
  ("NILPHAMARI", "BANGLADESH"),
  ("NĪMACH", "INDIA"),
  ("NIMBA", "LIBERIA"),
  ("NÎMES", "FRANCE"),
  ("NIMRUZ", "AFGHANISTAN"),
  ("NĪNAWA", "IRAQ"),
  ("NINGBO", "CHINA"),
  ("NINGXIA", "CHINA"),
  ("NINH BÌNH", "VIETNAM"),
  ("NINH THUẬN", "VIETNAM"),
  ("NIORO", "MALI"),
  ("NIŠAVA", "SERBIA"),
  ("NISHINOMIYA", "JAPAN"),
  ("NISHIO", "JAPAN"),
  ("NISHITOKYO", "JAPAN"),
  ("NISIA AIGAIOU KRITI", "GREECE"),
  ("NIŠ", "SERBIA"),
  ("NITERÓI", "BRAZIL"),
  ("NITRA", "SLOVAKIA"),
  ("NITRIANSKÝ", "SLOVAKIA"),
  ("NIYALA", "SUDAN"),
  ("NIZAMABAD", "INDIA"),
  ("NIZAMI", "AZERBAIJAN"),
  ("NIZHNEKAMSK", "RUSSIA"),
  ("NIZHNEVARTOVSK", "RUSSIA"),
  ("NIZHNI NOVGOROD, NIZHNIY NOVGOROD", "RUSSIA"),
  ("NIZHNIY NOVGOROD", "RUSSIA"),
  ("NIZHNIY TAGIL", "RUSSIA"),
  ("NIZIP", "TURKEY"),
  ("NKAYI", "ZIMBABWE"),
  ("NKHATA BAY", "MALAWI"),
  ("NKHOTAKOTA", "MALAWI"),
  ("NKONGSAMBA", "CAMEROON"),
  ("NOAKHALI", "BANGLADESH"),
  ("NOBEOKA", "JAPAN"),
  ("NODA", "JAPAN"),
  ("NOGINSK", "RUSSIA"),
  ("NÓGRÁD", "HUNGARY"),
  ("NOIDA", "INDIA"),
  ("NONG BUA LAM PHU", "THAILAND"),
  ("NONG KHAI", "THAILAND"),
  ("NONSAN", "SOUTH KOREA"),
  ("NONTHABURI", "THAILAND"),
  ("NOORD-BRABANT", "NETHERLANDS"),
  ("NOORD-HOLLAND", "NETHERLANDS"),
  ("NORD", "CAMEROON"),
  ("NORD-EST", "HAITI"),
  ("NORD EXTRÈME", "CAMEROON"),
  ("NORD", "FRANCE"),
  ("NORDFRIESLAND", "GERMANY"),
  ("NORD", "HAITI"),
  ("NORDJYLLAND", "DENMARK"),
  ("NORD-KIVU", "CONGO"),
  ("NORDLAND", "NORWAY"),
  ("NORDOUEST", "CAMEROON"),
  ("NORD-OUEST", "HAITI"),
  ("NORD-PAS-DE-CALAIS", "FRANCE"),
  ("NORDSACHSEN", "GERMANY"),
  ("NORD-TRØNDELAG", "NORWAY"),
  ("NORDWESTMECKLENBURG", "GERMANY"),
  ("NORFOLK", "UNITED KINGDOM"),
  ("NORILSK", "RUSSIA"),
  ("NORRBOTTEN", "SWEDEN"),
  ("NORTE DE SANTANDER", "COLOMBIA"),
  ("NORTE", "PORTUGAL"),
  ("NORTHAMPTONSHIRE", "UNITED KINGDOM"),
  ("NORTHAMPTON", "UNITED KINGDOM"),
  ("NORTH AND MIDDLE ANDAMANS", "INDIA"),
  ("NORTH AYRSHIRE", "UNITED KINGDOM"),
  ("NORTH BARAKPUR", "INDIA"),
  ("NORTH DUM DUM", "INDIA"),
  ("NORTH EASTERN", "KENYA"),
  ("NORTH EAST LINCOLNSHIRE", "UNITED KINGDOM"),
  ("NORTHEIM", "GERMANY"),
  ("NORTHERN AREAS", "PAKISTAN"),
  ("NORTHERN", "BAHRAIN"),
  ("NORTHERN BAHR EL GHAZAL", "SOUTH SUDAN"),
  ("NORTHERN CAPE", "SOUTH AFRICA"),
  ("NORTHERN HARBOUR", "MALTA"),
  ("NORTHERN MINDANAO", "PHILIPPINES"),
  ("NORTHERN SAMAR", "PHILIPPINES"),
  ("NORTHERN TERRITORY", "AUSTRALIA"),
  ("NORTH GOA", "INDIA"),
  ("NORTH KARELIA", "FINLAND"),
  ("NORTH LANARKSHIRE", "UNITED KINGDOM"),
  ("NORTHLAND", "NEW ZEALAND"),
  ("NORTH LINCOLNSHIRE", "UNITED KINGDOM"),
  ("NORTH OSSETIA", "RUSSIA"),
  ("NORTH OSTROBOTHNIA", "FINLAND"),
  ("NORTH RHINE-WESTPHALIA", "GERMANY"),
  ("NORTH SAVO", "FINLAND"),
  ("NORTH SHORE", "NEW ZEALAND"),
  ("NORTH SINAI", "EGYPT"),
  ("NORTH SOLOMONS", "PAPUA NEW GUINEA"),
  ("NORTH SOMERSET", "UNITED KINGDOM"),
  ("NORTH TRIPURA", "INDIA"),
  ("NORTH TWENTY FOUR PARGANAS", "INDIA"),
  ("NORTHUMBERLAND", "UNITED KINGDOM"),
  ("NORTH-WESTERN", "ZAMBIA"),
  ("NORTH-WEST FRONTIER", "PAKISTAN"),
  ("NORTH YORKSHIRE", "UNITED KINGDOM"),
  ("NORWICH", "UNITED KINGDOM"),
  ("NOSSA SENHORA DO SOCORRO", "BRAZIL"),
  ("NOTTINGHAMSHIRE", "UNITED KINGDOM"),
  ("NOTTINGHAM", "UNITED KINGDOM"),
  ("NOUACEUR", "MOROCCO"),
  ("NOUAKCHOTT", "MAURITANIA"),
  ("NOUMÉA", "NEW CALEDONIA"),
  ("NOVA FRIBURGO", "BRAZIL"),
  ("NOVA IGUAÇU", "BRAZIL"),
  ("NOVARA", "ITALY"),
  ("NOVA SCOTIA", "CANADA"),
  ("NOVAYA SAMARA, NOVOKUYBYSHEVSK", "RUSSIA"),
  ("NOVÉ ZÁMKY", "SLOVAKIA"),
  ("NOVGOROD", "RUSSIA"),
  ("NOVI SAD", "SERBIA"),
  ("NOVOCHEBOKSARSK", "RUSSIA"),
  ("NOVOCHERKASSK", "RUSSIA"),
  ("NOVO HAMBURGO", "BRAZIL"),
  ("NOVOKUZNETSK", "RUSSIA"),
  ("NOVOMOSKOVSK", "RUSSIA"),
  ("NOVOROSSIYSK", "RUSSIA"),
  ("NOVOSHAKHTINSK", "RUSSIA"),
  ("NOVOSIBIRSK", "RUSSIA"),
  ("NOVOTROITSK", "RUSSIA"),
  ("NOVÝ JIČÍN", "CZECH REPUBLIC"),
  ("NOVYY URENGOY", "RUSSIA"),
  ("NOYABRSK", "RUSSIA"),
  ("NƏRIMANOV", "AZERBAIJAN"),
  ("NSANJE", "MALAWI"),
  ("NƏSIMI", "AZERBAIJAN"),
  ("NTCHEU", "MALAWI"),
  ("NTCHISI", "MALAWI"),
  ("NUAPADA", "INDIA"),
  ("ÑUBLE", "CHILE"),
  ("NUEVA ECIJA", "PHILIPPINES"),
  ("NUEVA ESPARTA", "VENEZUELA"),
  ("NUEVA SAN SALVADOR", "EL SALVADOR"),
  ("NUEVA SEGOVIA", "NICARAGUA"),
  ("NUEVA VIZCAYA", "PHILIPPINES"),
  ("NUEVO LAREDO", "MEXICO"),
  ("NUEVO LEÓN", "MEXICO"),
  ("NUKUS", "UZBEKISTAN"),
  ("NUMAZU", "JAPAN"),
  ("NUREMBERG", "GERMANY"),
  ("NŪR", "IRAN"),
  ("NŪRISTAN", "AFGHANISTAN"),
  ("NÜRNBERGER LAND", "GERMANY"),
  ("NÜRNBERG", "GERMANY"),
  ("NUSA TENGGARA BARAT", "INDONESIA"),
  ("NUSA TENGGARA TIMUR", "INDONESIA"),
  ("NŪSHAHR", "IRAN"),
  ("NUUGAAL", "SOMALIA"),
  ("NUWAKOT", "NEPAL"),
  ("NUWARA ELIYA", "SRI LANKA"),
  ("NYANGA", "ZIMBABWE"),
  ("NYANZA", "KENYA"),
  ("NYAUNGLEBIN", "MYANMAR"),
  ("NYÍREGYHÁZA", "HUNGARY"),
  ("NZÉRÉKORÉ", "GUINEA"),
  ("N'ZI-COMOÉ", "IVORY COAST"),
  ("OAXACA DE JUÁREZ", "MEXICO"),
  ("OAXACA", "MEXICO"),
  ("OBALNO-KRAŠKA", "SLOVENIA"),
  ("OBERÁ", "ARGENTINA"),
  ("OBERALLGÄU", "GERMANY"),
  ("OBERBERGISCHER KREIS", "GERMANY"),
  ("OBERHAUSEN", "GERMANY"),
  ("OBERHAVEL", "GERMANY"),
  ("OBERÖSTERREICH", "AUSTRIA"),
  ("OBERSPREEWALD-LAUSITZ", "GERMANY"),
  ("OBIHIRO", "JAPAN"),
  ("OBNINSK", "RUSSIA"),
  ("OBUASI", "GHANA"),
  ("OCCIDENTAL MINDORO", "PHILIPPINES"),
  ("OCOTEPEQUE", "HONDURAS"),
  ("OCUMARE DEL TUY", "VENEZUELA"),
  ("ODAWARA", "JAPAN"),
  ("ODENSE", "DENMARK"),
  ("ODER-SPREE", "GERMANY"),
  ("ODESA", "UKRAINE"),
  ("ODES'KA", "UKRAINE"),
  ("ODINTSOVO", "RUSSIA"),
  ("OFFA", "NIGERIA"),
  ("OFFENBACH AM MAIN", "GERMANY"),
  ("OFFENBACH", "GERMANY"),
  ("ŌGAKI", "JAPAN"),
  ("OGBOMOSHO", "NIGERIA"),
  ("OGOOUÉ-MARITIME", "GABON"),
  ("OGUN", "NIGERIA"),
  ("OGWASHI UKU", "NIGERIA"),
  ("OHANGWENA", "NAMIBIA"),
  ("OIO", "GUINEA-BISSAU"),
  ("OISE", "FRANCE"),
  ("OITA", "JAPAN"),
  ("ŌITA", "JAPAN"),
  ("OJO DE AGUA", "MEXICO"),
  ("OKARA", "PAKISTAN"),
  ("OKAYAMA", "JAPAN"),
  ("OKAZAKI", "JAPAN"),
  ("OKENE", "NIGERIA"),
  ("OKHALDHUNGA", "NEPAL"),
  ("OKINAWA", "JAPAN"),
  ("OKITIPUPA", "NIGERIA"),
  ("OKTYABRSKIY", "RUSSIA"),
  ("OLANCHO", "HONDURAS"),
  ("OLAVARRÍA", "ARGENTINA"),
  ("OLDBURY-SMETHWICK", "UNITED KINGDOM"),
  ("OLDENBURG", "GERMANY"),
  ("OLDHAM", "UNITED KINGDOM"),
  ("OLD MALDAH", "INDIA"),
  ("OLINDA", "BRAZIL"),
  ("OLMALIĶ", "UZBEKISTAN"),
  ("OLOMOUC", "CZECH REPUBLIC"),
  ("OLOMOUCKÝ", "CZECH REPUBLIC"),
  ("OLONGAPO", "PHILIPPINES"),
  ("OLPE", "GERMANY"),
  ("OLSZTYN", "POLAND"),
  ("OLT", "ROMANIA"),
  ("OMBELLA MPOKO", "CENTRAL AFRICAN REPUBLIC"),
  ("ŌME", "JAPAN"),
  ("OMSK", "RUSSIA"),
  ("OMUSATI", "NAMIBIA"),
  ("ŌMUTA", "JAPAN"),
  ("ONDO", "NIGERIA"),
  ("ONGOLE", "INDIA"),
  ("ONITSHA", "NIGERIA"),
  ("ONOMICHI", "JAPAN"),
  ("ONTARIO", "CANADA"),
  ("OŅTÜSTIK ĶAZAĶSTAN", "KAZAKHSTAN"),
  ("OPAVA", "CZECH REPUBLIC"),
  ("OPOLE", "POLAND"),
  ("OPOLSKIE", "POLAND"),
  ("OPPLAND", "NORWAY"),
  ("ORADEA", "ROMANIA"),
  ("ORAI", "INDIA"),
  ("ORAL", "KAZAKHSTAN"),
  ("ORAN", "ALGERIA"),
  ("ORÁN", "ARGENTINA"),
  ("ORDU", "TURKEY"),
  ("ÖREBRO", "SWEDEN"),
  ("OREKHOVO-ZUEVO", "RUSSIA"),
  ("ORELLANA", "ECUADOR"),
  ("OREL", "RUSSIA"),
  ("ORENBURG", "RUSSIA"),
  ("ORIENTAL MINDORO", "PHILIPPINES"),
  ("ORIENTAL", "MOROCCO"),
  ("ORISSA", "INDIA"),
  ("ORIZABA", "MEXICO"),
  ("ORKNEY", "SOUTH AFRICA"),
  ("ORLÉANS", "FRANCE"),
  ("ORMOC", "PHILIPPINES"),
  ("ORNE", "FRANCE"),
  ("OROMIA", "ETHIOPIA"),
  ("ORO", "PAPUA NEW GUINEA"),
  ("ORSHA", "BELARUS"),
  ("ORSK", "RUSSIA"),
  ("ORTENAUKREIS", "GERMANY"),
  ("ORŪMIYEH", "IRAN"),
  ("ORŪMĪYEH", "IRAN"),
  ("ORURO", "BOLIVIA"),
  ("ORYOL", "RUSSIA"),
  ("OSAKA", "JAPAN"),
  ("ŌSAKA", "JAPAN"),
  ("OSAN", "SOUTH KOREA"),
  ("OSASCO", "BRAZIL"),
  ("OSHANA", "NAMIBIA"),
  ("OSHAWA", "CANADA"),
  ("OSHIKOTO", "NAMIBIA"),
  ("OSHOGBO", "NIGERIA"),
  ("OSIJEK-BARANJA", "CROATIA"),
  ("ÖSKEMEN", "KAZAKHSTAN"),
  ("OŞ", "KYRGYZSTAN"),
  ("OSLO", "NORWAY"),
  ("OSMANABAD", "INDIA"),
  ("OSMANIYE", "TURKEY"),
  ("OSNABRÜCK", "GERMANY"),
  ("OSORNO", "CHILE"),
  ("OSREDNJESLOVENSKA", "SLOVENIA"),
  ("OSTALBKREIS", "GERMANY"),
  ("OSTALLGÄU", "GERMANY"),
  ("ÖSTERGÖTLAND", "SWEDEN"),
  ("OSTERHOLZ", "GERMANY"),
  ("ØSTFOLD", "NORWAY"),
  ("OSTHOLSTEIN", "GERMANY"),
  ("OSTPRIGNITZ-RUPPIN", "GERMANY"),
  ("OSTRAVA", "CZECH REPUBLIC"),
  ("OSTRAVA - MĚSTO", "CZECH REPUBLIC"),
  ("OSTROBOTHNIA", "FINLAND"),
  ("OSUN", "NIGERIA"),
  ("OTAGO", "NEW ZEALAND"),
  ("ŌTA", "JAPAN"),
  ("OTARU", "JAPAN"),
  ("OTDAR MEAN CHEY", "CAMBODIA"),
  ("OTJOZONDJUPA", "NAMIBIA"),
  ("ŌTSU", "JAPAN"),
  ("OTTAWA", "CANADA"),
  ("OTURKPO", "NIGERIA"),
  ("OUADDAÏ", "CHAD"),
  ("OUAGADOUGOU", "BURKINA FASO"),
  ("OUAHIGOUYA", "BURKINA FASO"),
  ("OUAKA", "CENTRAL AFRICAN REPUBLIC"),
  ("OUARGLA", "ALGERIA"),
  ("OUARZAZATE", "MOROCCO"),
  ("OUBRITENGA", "BURKINA FASO"),
  ("OUDALAN", "BURKINA FASO"),
  ("OUDOMXAY", "LAOS"),
  ("OUÉMÉ", "BENIN"),
  ("OUEST", "CAMEROON"),
  ("OUEST", "HAITI"),
  ("OUHAM", "CENTRAL AFRICAN REPUBLIC"),
  ("OUHAM-PENDÉ", "CENTRAL AFRICAN REPUBLIC"),
  ("OUJDA ANGAD", "MOROCCO"),
  ("OUJDA", "MOROCCO"),
  ("OULED YAICH", "ALGERIA"),
  ("OULU", "FINLAND"),
  ("OUM EL BOUAGHI", "ALGERIA"),
  ("OURENSE", "SPAIN"),
  ("OURINHOS", "BRAZIL"),
  ("OVERIJSSEL", "NETHERLANDS"),
  ("OVIEDO", "SPAIN"),
  ("ÖVÖRHANGAJ", "MONGOLIA"),
  ("OWERRI", "NIGERIA"),
  ("OWO", "NIGERIA"),
  ("OXFORDSHIRE", "UNITED KINGDOM"),
  ("OXFORD", "UNITED KINGDOM"),
  ("OYAMA", "JAPAN"),
  ("OYO", "NIGERIA"),
  ("OZAMIZ", "PHILIPPINES"),
  ("OZHUKARAI", "INDIA"),
  ("PAARL", "SOUTH AFRICA"),
  ("PABNA", "BANGLADESH"),
  ("PACET", "INDONESIA"),
  ("PACHUCA DE SOTO", "MEXICO"),
  ("PADALARANG", "INDONESIA"),
  ("PADANG", "INDONESIA"),
  ("PADANG SIDEMPUAN", "INDONESIA"),
  ("PADERBORN", "GERMANY"),
  ("PADOVA", "ITALY"),
  ("PAGADIAN", "PHILIPPINES"),
  ("PAHANG", "MALAYSIA"),
  ("PÄIJÄT-HÄME", "FINLAND"),
  ("PAJU", "SOUTH KOREA"),
  ("PAKAUR", "INDIA"),
  ("PAKDASHT", "IRAN"),
  ("PAK KRET", "THAILAND"),
  ("PAKOKKU", "MYANMAR"),
  ("PAKPATTAN", "PAKISTAN"),
  ("PAKTĪKA", "AFGHANISTAN"),
  ("PAKTIYA", "AFGHANISTAN"),
  ("PAKXE", "LAOS"),
  ("PALAKKAD", "INDIA"),
  ("PALAMU", "INDIA"),
  ("PALANGKA RAYA", "INDONESIA"),
  ("PALASA", "INDIA"),
  ("PALAWAN", "PHILIPPINES"),
  ("PALEMBANG", "INDONESIA"),
  ("PALENCIA", "SPAIN"),
  ("PALERMO", "ITALY"),
  ("PALGHAR", "INDIA"),
  ("PALHOÇA", "BRAZIL"),
  ("PALI", "INDIA"),
  ("PALIMANAN", "INDONESIA"),
  ("PALLAVARAM", "INDIA"),
  ("PALMAS", "BRAZIL"),
  ("PALMA", "SPAIN"),
  ("PALMIRA", "COLOMBIA"),
  ("PALOPO", "INDONESIA"),
  ("PALPA", "NEPAL"),
  ("PALU", "INDONESIA"),
  ("PALWAL", "INDIA"),
  ("PAMANUKAN", "INDONESIA"),
  ("PAMEKASAN", "INDONESIA"),
  ("PAMPANGA", "PHILIPPINES"),
  ("PAMPLEMOUSSES", "MAURITIUS"),
  ("PAMPLONA", "SPAIN"),
  ("PAMULANG", "INDONESIA"),
  ("PANAMÁ", "PANAMA"),
  ("PANCHAGARH", "BANGLADESH"),
  ("PANCHKULA", "INDIA"),
  ("PANCH MAHALS", "INDIA"),
  ("PANCHTHAR", "NEPAL"),
  ("PANDEGELANG", "INDONESIA"),
  ("PANEVĖŽIO", "LITHUANIA"),
  ("PANEVĖŽYS", "LITHUANIA"),
  ("PANGASINAN", "PHILIPPINES"),
  ("PANGKAH", "INDONESIA"),
  ("PANGKAL PINANG", "INDONESIA"),
  ("PANIHATI", "INDIA"),
  ("PANIPAT", "INDIA"),
  ("PANĪPAT", "INDIA"),
  ("PANJIN", "CHINA"),
  ("PANJŠĪR", "AFGHANISTAN"),
  ("PANNA", "INDIA"),
  ("PANZHIHUA", "CHINA"),
  ("PAPUA BARAT", "INDONESIA"),
  ("PAPUA", "INDONESIA"),
  ("PAPUM PARE", "INDIA"),
  ("PARÁ", "BRAZIL"),
  ("PARADWIP", "INDIA"),
  ("PARAGUARÍ", "PARAGUAY"),
  ("PARAÍBA", "BRAZIL"),
  ("PARAKOU", "BENIN"),
  ("PARAMAKKUDI", "INDIA"),
  ("PARAMARIBO", "SURINAME"),
  ("PARANÁ", "ARGENTINA"),
  ("PARANÁ", "BRAZIL"),
  ("PARANAGUÁ", "BRAZIL"),
  ("PARAUAPEBAS", "BRAZIL"),
  ("PARBAT", "NEPAL"),
  ("PARBHANI", "INDIA"),
  ("PARDUBICE", "CZECH REPUBLIC"),
  ("PARDUBICKÝ", "CZECH REPUBLIC"),
  ("PARE PARE", "INDONESIA"),
  ("PARIS", "FRANCE"),
  ("PARLA", "SPAIN"),
  ("PARMA", "ITALY"),
  ("PARNAÍBA", "BRAZIL"),
  ("PARNAMIRIM", "BRAZIL"),
  ("PARSABAD", "IRAN"),
  ("PARSA", "NEPAL"),
  ("PARUNG", "INDONESIA"),
  ("PARWAN", "AFGHANISTAN"),
  ("PARYS", "SOUTH AFRICA"),
  ("PASARKEMIS", "INDONESIA"),
  ("PASAY CITY", "PHILIPPINES"),
  ("PASCHIM MEDINIPUR", "INDIA"),
  ("PASCO", "PERU"),
  ("PAS-DE-CALAIS", "FRANCE"),
  ("PASEH", "INDONESIA"),
  ("PASHCHIM CHAMPARAN", "INDIA"),
  ("PASHCHIMI SINGHBHUM", "INDIA"),
  ("PASSO FUNDO", "BRAZIL"),
  ("PASSORÉ", "BURKINA FASO"),
  ("PASSOS", "BRAZIL"),
  ("PASTO", "COLOMBIA"),
  ("PASURUAN", "INDONESIA"),
  ("PATAN", "INDIA"),
  ("PATHANAMTHITTA", "INDIA"),
  ("PATHANKOT", "INDIA"),
  ("PATHEIN", "MYANMAR"),
  ("PATHUM THANI", "THAILAND"),
  ("PATIALA", "INDIA"),
  ("PATI", "INDONESIA"),
  ("PATNA", "INDIA"),
  ("PATOS DE MINAS", "BRAZIL"),
  ("PÁTRAI", "GREECE"),
  ("PATTANAGERE", "INDIA"),
  ("PATTANI", "THAILAND"),
  ("PATTAYA", "THAILAND"),
  ("PAŢŪAKHALĪ", "BANGLADESH"),
  ("PAULISTA", "BRAZIL"),
  ("PAVLODAR", "KAZAKHSTAN"),
  ("PAVLOHRAD", "UKRAINE"),
  ("PAYSANDÚ", "URUGUAY"),
  ("PAYS-DE-LA-LOIRE", "FRANCE"),
  ("PAZARDŽIK", "BULGARIA"),
  ("PČINJA", "SERBIA"),
  ("PÉCS", "HUNGARY"),
  ("PEINE", "GERMANY"),
  ("PEKALONGAN", "INDONESIA"),
  ("PEKAN BARU", "INDONESIA"),
  ("PEKING", "CHINA"),
  ("PÉLLA", "GREECE"),
  ("PELOTAS", "BRAZIL"),
  ("PEMALANG", "INDONESIA"),
  ("PEMATANG SIANTAR", "INDONESIA"),
  ("PEMBA", "MOZAMBIQUE"),
  ("PEMBROKESHIRE", "UNITED KINGDOM"),
  ("PENZA", "RUSSIA"),
  ("PERAK", "MALAYSIA"),
  ("PERAMBALUR", "INDIA"),
  ("PERAVIA", "DOMINICAN REPUBLIC"),
  ("PERBAUNGAN", "INDONESIA"),
  ("PERCUT SEI TUAN", "INDONESIA"),
  ("PEREIRA", "COLOMBIA"),
  ("PERGAMINO", "ARGENTINA"),
  ("PERISTÉRION", "GREECE"),
  ("PERLIS", "MALAYSIA"),
  ("PERM", "RUSSIA"),
  ("PERNAMBUCO", "BRAZIL"),
  ("PERNIK", "BULGARIA"),
  ("PERPIGNAN", "FRANCE"),
  ("PERTH AND KINROSS", "UNITED KINGDOM"),
  ("PERTH", "AUSTRALIA"),
  ("PERUGIA", "ITALY"),
  ("PERVOURALSK", "RUSSIA"),
  ("PESCARA", "ITALY"),
  ("PESHAWAR", "PAKISTAN"),
  ("PEST", "HUNGARY"),
  ("PETAH̱ TIQWA", "ISRAEL"),
  ("PETALING JAYA", "MALAYSIA"),
  ("PETAPA", "GUATEMALA"),
  ("PETARE", "VENEZUELA"),
  ("PETÉN", "GUATEMALA"),
  ("PETERBOROUGH", "UNITED KINGDOM"),
  ("PÉTIONVILLE", "HAITI"),
  ("PETROLINA", "BRAZIL"),
  ("PETROPAVL", "KAZAKHSTAN"),
  ("PETROPAVLOVSK-KAMCHATSKIY", "RUSSIA"),
  ("PETRÓPOLIS", "BRAZIL"),
  ("PETROZAVODSK", "RUSSIA"),
  ("PFAFFENHOFEN AN DER ILM", "GERMANY"),
  ("PFORZHEIM", "GERMANY"),
  ("PHAGWARA", "INDIA"),
  ("PHALABORWA", "SOUTH AFRICA"),
  ("PHALOMBE", "MALAWI"),
  ("PHANGNGA", "THAILAND"),
  ("PHAN RANG", "VIETNAM"),
  ("PHAN THIẾT", "VIETNAM"),
  ("PHATTHALUNG", "THAILAND"),
  ("PHAYAO", "THAILAND"),
  ("PHEK", "INDIA"),
  ("PHETCHABUN", "THAILAND"),
  ("PHETCHABURI", "THAILAND"),
  ("PHICHIT", "THAILAND"),
  ("PHITSANULOK", "THAILAND"),
  ("PHNUM PÉNH", "CAMBODIA"),
  ("PHONGSALY", "LAOS"),
  ("PHRAE", "THAILAND"),
  ("PHRA NAKHON SI AYUTTHAYA", "THAILAND"),
  ("PHRA PRADAENG", "THAILAND"),
  ("PHUKET", "THAILAND"),
  ("PHUTHADITJHABA", "SOUTH AFRICA"),
  ("PHÚ THỌ", "VIETNAM"),
  ("PHÚ YÊN", "VIETNAM"),
  ("PIACENZA", "ITALY"),
  ("PIATRA NEAMŢ", "ROMANIA"),
  ("PIAUÍ", "BRAZIL"),
  ("PICARDIE", "FRANCE"),
  ("PICHINCHA", "ECUADOR"),
  ("PIEDECUESTA", "COLOMBIA"),
  ("PIEDRAS NEGRAS", "MEXICO"),
  ("PIEMONTE", "ITALY"),
  ("PIERÍA", "GREECE"),
  ("PIETERMARITZBURG", "SOUTH AFRICA"),
  ("PIET RETIEF", "SOUTH AFRICA"),
  ("PILAR", "ARGENTINA"),
  ("PILIBHIT", "INDIA"),
  ("PĪLĪBHĪT", "INDIA"),
  ("PIMPRI", "INDIA"),
  ("PINAR DEL RIO", "CUBA"),
  ("PINAR DEL RÍO", "CUBA"),
  ("PINDAMONHANGABA", "BRAZIL"),
  ("PINGDINGSHAN", "CHINA"),
  ("PÍNGDONG", "TAIWAN"),
  ("PINGLIANG", "CHINA"),
  ("PINGSHAN", "CHINA"),
  ("PINGXIANG", "CHINA"),
  ("PÍNGZHÈN", "TAIWAN"),
  ("PINHAIS", "BRAZIL"),
  ("PINNEBERG", "GERMANY"),
  ("PINSK", "BELARUS"),
  ("PIRACICABA", "BRAZIL"),
  ("PIRAIEÚS", "GREECE"),
  ("PIRANSHAHR", "IRAN"),
  ("PIROJPŪR", "BANGLADESH"),
  ("PISSILA", "BURKINA FASO"),
  ("PITA", "GUINEA"),
  ("PITEŞTI", "ROMANIA"),
  ("PITHAMPUR", "INDIA"),
  ("PITHORAGARH", "INDIA"),
  ("PIURA", "PERU"),
  ("PLAINES WILHELM", "MAURITIUS"),
  ("PLATEAU", "BENIN"),
  ("PLATEAU", "NIGERIA"),
  ("PLATEAUX", "CONGO"),
  ("PLATEAUX", "TOGO"),
  ("PLAYA DEL CARMEN", "MEXICO"),
  ("PLEIKU", "VIETNAM"),
  ("PLEVEN", "BULGARIA"),
  ("PŁOCK", "POLAND"),
  ("PLOIEŞTI", "ROMANIA"),
  ("PLÖN", "GERMANY"),
  ("PLOVDIV", "BULGARIA"),
  ("PLUMBON", "INDONESIA"),
  ("PLYMOUTH", "UNITED KINGDOM"),
  ("PLZEŇ", "CZECH REPUBLIC"),
  ("PLZEŇ-MĚSTO", "CZECH REPUBLIC"),
  ("PLZEŇSKÝ", "CZECH REPUBLIC"),
  ("POÁ", "BRAZIL"),
  ("POCHON", "SOUTH KOREA"),
  ("POÇOS DE CALDAS", "BRAZIL"),
  ("PODGORICA", "MONTENEGRO"),
  ("PODKARPACKIE", "POLAND"),
  ("PODLASKIE", "POLAND"),
  ("PODOLSK", "RUSSIA"),
  ("PODRAVSKA", "SLOVENIA"),
  ("PODUNAVLJE", "SERBIA"),
  ("POHANG", "SOUTH KOREA"),
  ("POINTE NOIRE", "CONGO"),
  ("POINTE-NOIRE", "CONGO"),
  ("POITOU-CHARENTES", "FRANCE"),
  ("POKHARA", "NEPAL"),
  ("POLOKWANE", "SOUTH AFRICA"),
  ("POLONNARUWA", "SRI LANKA"),
  ("POLTAVA", "UKRAINE"),
  ("POLTAVS'KA", "UKRAINE"),
  ("POMORAVLJE", "SERBIA"),
  ("POMORSKIE", "POLAND"),
  ("POMURSKA", "SLOVENIA"),
  ("PONCE", "PUERTO RICO"),
  ("PONDICHERRY", "INDIA"),
  ("PONDOK AREN", "INDONESIA"),
  ("PONI", "BURKINA FASO"),
  ("PONNANI", "INDIA"),
  ("PONTA GROSSA", "BRAZIL"),
  ("PONTEVEDRA", "SPAIN"),
  ("PONTIANAK", "INDONESIA"),
  ("POOL", "CONGO"),
  ("POOLE", "UNITED KINGDOM"),
  ("POPAYÁN", "COLOMBIA"),
  ("POPRAD", "SLOVAKIA"),
  ("PORBANDAR", "INDIA"),
  ("PORLAMAR", "VENEZUELA"),
  ("PORT-AU-PRINCE", "HAITI"),
  ("PORT BLAIR", "INDIA"),
  ("PORT ELIZABETH", "SOUTH AFRICA"),
  ("PORT-GENTIL", "GABON"),
  ("PORT HARCOURT", "NIGERIA"),
  ("PORT LOKO", "SIERRA LEONE"),
  ("PORT LOUIS", "MAURITIUS"),
  ("PORTMORE", "JAMAICA"),
  ("PORT MORESBY", "PAPUA NEW GUINEA"),
  ("PORTO ALEGRE", "BRAZIL"),
  ("PORTO NOVO", "BENIN"),
  ("PORTO", "PORTUGAL"),
  ("PORTO SEGURO", "BRAZIL"),
  ("PORTO VELHO", "BRAZIL"),
  ("PORTOVIEJO", "ECUADOR"),
  ("PORT SAID", "EGYPT"),
  ("PORTSMOUTH", "UNITED KINGDOM"),
  ("PORTUGUESA", "VENEZUELA"),
  ("PORYONG", "SOUTH KOREA"),
  ("POSADAS", "ARGENTINA"),
  ("POTCHEFSTROOM", "SOUTH AFRICA"),
  ("POTISKUM", "NIGERIA"),
  ("POTOSÍ", "BOLIVIA"),
  ("POTSDAM", "GERMANY"),
  ("POTSDAM-MITTELMARK", "GERMANY"),
  ("POUSAT", "CAMBODIA"),
  ("POUSO ALEGRE", "BRAZIL"),
  ("POWYS", "UNITED KINGDOM"),
  ("POZA RICA DE HIDALGO", "MEXICO"),
  ("POZNAŃ", "POLAND"),
  ("PRABUMULIH", "INDONESIA"),
  ("PRACHIN BURI", "THAILAND"),
  ("PRACHUAP KHIRI KHAN", "THAILAND"),
  ("PRAGUE", "CZECH REPUBLIC"),
  ("PRAHA", "CZECH REPUBLIC"),
  ("PRAHA-VÝCHOD", "CZECH REPUBLIC"),
  ("PRAHA-ZÁPAD", "CZECH REPUBLIC"),
  ("PRAHOVA", "ROMANIA"),
  ("PRAIA", "CAPE VERDE"),
  ("PRAIA GRANDE", "BRAZIL"),
  ("PRAKASAM", "INDIA"),
  ("PRATAPGARH", "INDIA"),
  ("PRATO", "ITALY"),
  ("PREAH SIHANOUK", "CAMBODIA"),
  ("PREAH VIHÉAR", "CAMBODIA"),
  ("PŘEROV", "CZECH REPUBLIC"),
  ("PRESIDENTE HAYES", "PARAGUAY"),
  ("PRESIDENTE PRUDENTE", "BRAZIL"),
  ("PREŠOVSKÝ", "SLOVAKIA"),
  ("PREŠOV", "SLOVAKIA"),
  ("PRESTON", "UNITED KINGDOM"),
  ("PRETORIA", "SOUTH AFRICA"),
  ("PREY VEAENG", "CAMBODIA"),
  ("PŘÍBRAM", "CZECH REPUBLIC"),
  ("PRIEVIDZA", "SLOVAKIA"),
  ("PRIMORJE-GORSKI KOTAR", "CROATIA"),
  ("PRIMORSKI", "RUSSIA"),
  ("PRINCE EDWARD ISLAND", "CANADA"),
  ("PRINGSEWU", "INDONESIA"),
  ("PRIŠTINA", "KOSOVO"),
  ("PRIZREN", "KOSOVO"),
  ("PROBOLINGGO", "INDONESIA"),
  ("PRODDATŪR", "INDIA"),
  ("PROKOPYEVSK", "RUSSIA"),
  ("PROSTĚJOV", "CZECH REPUBLIC"),
  ("PROVENCE-ALPES-CÔTE-D'AZUR", "FRANCE"),
  ("PSKOV", "RUSSIA"),
  ("PUCALLPA", "PERU"),
  ("PUCHŎN", "SOUTH KOREA"),
  ("PUDUCHERRY", "INDIA"),
  ("PUDUKKOTTAI", "INDIA"),
  ("PUEBLA", "MEXICO"),
  ("PUENTE ALTO", "CHILE"),
  ("PUERTO CABELLO", "VENEZUELA"),
  ("PUERTO LA CRUZ", "VENEZUELA"),
  ("PUERTO MONTT", "CHILE"),
  ("PUERTO PLATA", "DOMINICAN REPUBLIC"),
  ("PUERTO PRINCESA", "PHILIPPINES"),
  ("PUERTO VALLARTA", "MEXICO"),
  ("PUJEHUN", "SIERRA LEONE"),
  ("PULANDIAN", "CHINA"),
  ("PULAU PINANG", "MALAYSIA"),
  ("PUL PEHLAD", "INDIA"),
  ("PULWAMA", "INDIA"),
  ("PUNA", "INDIA"),
  ("PUNCH", "INDIA"),
  ("PUNE", "INDIA"),
  ("PUNILLA", "ARGENTINA"),
  ("PUNJAB", "INDIA"),
  ("PUNJAB", "PAKISTAN"),
  ("PUNO", "PERU"),
  ("PUNTA ARENAS", "CHILE"),
  ("PUNTARENAS", "COSTA RICA"),
  ("PUNTO FIJO", "VENEZUELA"),
  ("PUQI", "CHINA"),
  ("PURBA CHAMPARAN", "INDIA"),
  ("PURBA MEDINIPUR", "INDIA"),
  ("PURBI SINGHBHUM", "INDIA"),
  ("PURI", "INDIA"),
  ("PURNIA", "INDIA"),
  ("PŪRNIA", "INDIA"),
  ("PURSAKLAR", "TURKEY"),
  ("PURULIYA", "INDIA"),
  ("PURWAKARTA", "INDONESIA"),
  ("PURWODADI", "INDONESIA"),
  ("PURWOKERTO", "INDONESIA"),
  ("PURWOREJO", "INDONESIA"),
  ("PUSAN", "SOUTH KOREA"),
  ("PUSHKINO", "RUSSIA"),
  ("PUTIAN", "CHINA"),
  ("PŪTTALAMA", "SRI LANKA"),
  ("PUTUMAYO", "COLOMBIA"),
  ("PUYANG", "CHINA"),
  ("PUY-DE-DÔME", "FRANCE"),
  ("PWANI", "TANZANIA"),
  ("PYATIGORSK", "RUSSIA"),
  ("PYAY", "MYANMAR"),
  ("PYINMANA", "MYANMAR"),
  ("PYŎNGANBUKTO", "NORTH KOREA"),
  ("PYŎNGANNAMDO", "NORTH KOREA"),
  ("PYŎNGSŎNG", "NORTH KOREA"),
  ("PYŎNGTAEK", "SOUTH KOREA"),
  ("PYŎNGYANG", "NORTH KOREA"),
  ("PYRÉNÉES-ATLANTIQUES", "FRANCE"),
  ("PYRÉNÉES-ORIENTALES", "FRANCE"),
  ("PYUTHAN", "NEPAL"),
  ("QA'AŢABAH", "YEMEN"),
  ("QABIS", "TUNISIA"),
  ("QA'EMSHAHR", "IRAN"),
  ("QAEMSHAHR", "IRAN"),
  ("QA'ENAT", "IRAN"),
  ("QAFŞAH", "TUNISIA"),
  ("QALQĪLYAH", "PALESTINE"),
  ("QALYŪB", "EGYPT"),
  ("QANDAHAR", "AFGHANISTAN"),
  ("QARADAĞ", "AZERBAIJAN"),
  ("QARAGANDY", "KAZAKHSTAN"),
  ("QARCHAK", "IRAN"),
  ("QAZVĪN", "IRAN"),
  ("QENA", "EGYPT"),
  ("QESHM", "IRAN"),
  ("QIANGUO", "CHINA"),
  ("QIANJIANG", "CHINA"),
  ("QIBILĪ", "TUNISIA"),
  ("QINCHENG", "CHINA"),
  ("QINGDAO", "CHINA"),
  ("QINGHAI", "CHINA"),
  ("QINGYUAN", "CHINA"),
  ("QINHUANGDAO", "CHINA"),
  ("QINZHOU", "CHINA"),
  ("QIQIHAR", "CHINA"),
  ("QITAIHE", "CHINA"),
  ("QODS", "IRAN"),
  ("QOM", "IRAN"),
  ("QORVEH", "IRAN"),
  ("QOSTANAY", "KAZAKHSTAN"),
  ("QUANWAN", "CHINA"),
  ("QUANZHOU", "CHINA"),
  ("QUBA", "AZERBAIJAN"),
  ("QUBA-XAÇMAZ", "AZERBAIJAN"),
  ("QŪCHAN", "IRAN"),
  ("QUEBEC", "CANADA"),
  ("QUEENSLAND", "AUSTRALIA"),
  ("QUEENSTOWN", "SOUTH AFRICA"),
  ("QUEIMADOS", "BRAZIL"),
  ("QUELIMANE", "MOZAMBIQUE"),
  ("QUELUZ", "PORTUGAL"),
  ("QUERÉTARO", "MEXICO"),
  ("QUETTA", "PAKISTAN"),
  ("QUETZALTENANGO", "GUATEMALA"),
  ("QUEVEDO", "ECUADOR"),
  ("QUEZALTENANGO", "GUATEMALA"),
  ("QUEZON CITY", "PHILIPPINES"),
  ("QUEZON", "PHILIPPINES"),
  ("QUIBDÓ", "COLOMBIA"),
  ("QUICHÉ", "GUATEMALA"),
  ("QUILLOTA", "CHILE"),
  ("QUILMES", "ARGENTINA"),
  ("QUILPUÉ", "CHILE"),
  ("QUINDIÓ", "COLOMBIA"),
  ("QUI NHƠN", "VIETNAM"),
  ("QUINTANA ROO", "MEXICO"),
  ("QUIRINO", "PHILIPPINES"),
  ("QUITO", "ECUADOR"),
  ("QUJING", "CHINA"),
  ("QUNDŪZ", "AFGHANISTAN"),
  ("QUẢNG BÌNH", "VIETNAM"),
  ("QUẢNG NAM", "VIETNAM"),
  ("QUẢNG NGÃI", "VIETNAM"),
  ("QUẢNG NINH", "VIETNAM"),
  ("QUẢNG TRỊ", "VIETNAM"),
  ("QUTHING", "LESOTHO"),
  ("QUTUBULLAPUR", "INDIA"),
  ("RABAK", "SUDAN"),
  ("RABAT", "MOROCCO"),
  ("RABAT-SALÉ-ZAMMOUR-ZAER", "MOROCCO"),
  ("RADOM", "POLAND"),
  ("RAE BARELI", "INDIA"),
  ("RAFAELA", "ARGENTINA"),
  ("RAFAH̨", "PALESTINE"),
  ("RAFSANJAN", "IRAN"),
  ("RAGHOGARH", "INDIA"),
  ("RAHĪM YAR KHAN", "PAKISTAN"),
  ("RAICHUR", "INDIA"),
  ("RAICHŪR", "INDIA"),
  ("RAIGANJ", "INDIA"),
  ("RAIGARH", "INDIA"),
  ("RAIPUR", "INDIA"),
  ("RAISEN", "INDIA"),
  ("RAJAMAHENDRI", "INDIA"),
  ("RAJAPALAIYAM", "INDIA"),
  ("RAJASTHAN", "INDIA"),
  ("RAJAURI", "INDIA"),
  ("RAJBAŖĪ", "BANGLADESH"),
  ("RAJENDRANAGAR", "INDIA"),
  ("RAJGARH", "INDIA"),
  ("RAJKOT", "INDIA"),
  ("RAJNANDGAON", "INDIA"),
  ("RAJPUR", "INDIA"),
  ("RAJSAMAND", "INDIA"),
  ("RAJSHAHĪ", "BANGLADESH"),
  ("RAKHINE", "MYANMAR"),
  ("RAMAGUNDAM", "INDIA"),
  ("RAM ALLAH WAL-BĪRAH", "PALESTINE"),
  ("RAMANAGARA", "INDIA"),
  ("RAMANAGARAM", "INDIA"),
  ("RAMANATHAPURAM", "INDIA"),
  ("RAMAT GAN", "ISRAEL"),
  ("RAMECHHAP", "NEPAL"),
  ("RAMGARH", "INDIA"),
  ("RAMHORMOZ", "IRAN"),
  ("RÂMNICU VÂLCEA", "ROMANIA"),
  ("RAMPUR", "INDIA"),
  ("RANCAEKEK", "INDONESIA"),
  ("RANCAGUA", "CHILE"),
  ("RANCHI", "INDIA"),
  ("RANDFONTEIN", "SOUTH AFRICA"),
  ("RANGAMATĪ", "BANGLADESH"),
  ("RANGAREDDI", "INDIA"),
  ("RANGHULU", "CHINA"),
  ("RANGKASBITUNG", "INDONESIA"),
  ("RANGOON", "MYANMAR"),
  ("RANGPŪR", "BANGLADESH"),
  ("RANGUNIA", "BANGLADESH"),
  ("RANĪBENNUR", "INDIA"),
  ("RANĪGANJ", "INDIA"),
  ("RANIP", "INDIA"),
  ("RANONG", "THAILAND"),
  ("RANTAUPRAPAT", "INDONESIA"),
  ("RAOZAN", "BANGLADESH"),
  ("RA'S AL-H̱AYMAH", "UNITED ARAB EMIRATES"),
  ("RAS AL KHAYMAH", "UNITED ARAB EMIRATES"),
  ("RASHT", "IRAN"),
  ("RASINA", "SERBIA"),
  ("RAŠKA", "SERBIA"),
  ("RASON", "NORTH KOREA"),
  ("RASTATT", "GERMANY"),
  ("RATCHABURI", "THAILAND"),
  ("RATISBON", "GERMANY"),
  ("RATLAM", "INDIA"),
  ("RATNAGIRI", "INDIA"),
  ("RATNAPURA", "SRI LANKA"),
  ("RAURKELA", "INDIA"),
  ("RAURKELA INDUSTRIAL TOWNSHIP", "INDIA"),
  ("RAUTAHAT", "NEPAL"),
  ("RAVENNA", "ITALY"),
  ("RAVENSBURG", "GERMANY"),
  ("RAWALPINDI", "PAKISTAN"),
  ("RAWANDŪZ", "IRAQ"),
  ("RAWSON", "ARGENTINA"),
  ("RAYAGADA", "INDIA"),
  ("RAYMAH", "YEMEN"),
  ("RAYONG", "THAILAND"),
  ("RAZAN", "IRAN"),
  ("RAZGRAD", "BULGARIA"),
  ("RẠCH GIÁ", "VIETNAM"),
  ("READING", "UNITED KINGDOM"),
  ("REASI", "INDIA"),
  ("RECIFE", "BRAZIL"),
  ("RECKLINGHAUSEN", "GERMANY"),
  ("RECONQUISTA", "ARGENTINA"),
  ("REDCAR AND CLEVELAND", "UNITED KINGDOM"),
  ("RED DEER", "CANADA"),
  ("REGENSBURG", "GERMANY"),
  ("REGGIO DI CALABRIA", "ITALY"),
  ("REGGIO NELL'EMILIA", "ITALY"),
  ("REGINA", "CANADA"),
  ("REGIONALVERBAND SAARBRÜCKEN", "GERMANY"),
  ("REGION OF TAMPERE", "FINLAND"),
  ("REH̱OVOT", "ISRAEL"),
  ("REIMS", "FRANCE"),
  ("RELIZANE", "ALGERIA"),
  ("REMSCHEID", "GERMANY"),
  ("REMS-MURR-KREIS", "GERMANY"),
  ("RENDSBURG-ECKERNFÖRDE", "GERMANY"),
  ("RENFREWSHIRE", "UNITED KINGDOM"),
  ("RENGASDENGKLOK", "INDONESIA"),
  ("RENNES", "FRANCE"),
  ("RENQIU", "CHINA"),
  ("REPUBLIKA SRPSKA", "BOSNIA AND HERZEGOVINA"),
  ("RESENDE", "BRAZIL"),
  ("RESHT", "IRAN"),
  ("RESISTENCIA", "ARGENTINA"),
  ("RETALHULEU", "GUATEMALA"),
  ("REUS", "SPAIN"),
  ("REUTLINGEN", "GERMANY"),
  ("REWA", "FIJI ISLANDS"),
  ("REWA", "INDIA"),
  ("REWARI", "INDIA"),
  ("REY", "IRAN"),
  ("REYKJAVÍK", "ICELAND"),
  ("REYNOSA", "MEXICO"),
  ("RHEIN-ERFT-KREIS", "GERMANY"),
  ("RHEINGAU-TAUNUS-KREIS", "GERMANY"),
  ("RHEIN-HUNSRÜCK-KREIS", "GERMANY"),
  ("RHEINISCH-BERGISCHER KREIS", "GERMANY"),
  ("RHEIN-LAHN-KREIS", "GERMANY"),
  ("RHEIN-NECKAR-KREIS", "GERMANY"),
  ("RHEIN-PFALZ-KREIS", "GERMANY"),
  ("RHEIN-SIEG-KREIS", "GERMANY"),
  ("RHINELAND-PALATINATE", "GERMANY"),
  ("RHONDDA CYNON TAFF", "UNITED KINGDOM"),
  ("RHÔNE-ALPES", "FRANCE"),
  ("RHÔNE", "FRANCE"),
  ("RIAU", "INDONESIA"),
  ("RIAU KEPULAUAN", "INDONESIA"),
  ("RIBEIRÃO DAS NEVES", "BRAZIL"),
  ("RIBEIRÃO PIRES", "BRAZIL"),
  ("RIBEIRÃO PRETO", "BRAZIL"),
  ("RIBHOI", "INDIA"),
  ("RICHARDS BAY", "SOUTH AFRICA"),
  ("RIFT VALLEY", "KENYA"),
  ("RĪGA", "LATVIA"),
  ("RĪGAS", "LATVIA"),
  ("RIJEKA", "CROATIA"),
  ("RIMINI", "ITALY"),
  ("RIOBAMBA", "ECUADOR"),
  ("RIO BRANCO", "BRAZIL"),
  ("RIO CLARO", "BRAZIL"),
  ("RÍO CUARTO", "ARGENTINA"),
  ("RIO DAS OSTRAS", "BRAZIL"),
  ("RIO DE JANEIRO", "BRAZIL"),
  ("RIO GRANDE", "BRAZIL"),
  ("RIO GRANDE DO NORTE", "BRAZIL"),
  ("RIO GRANDE DO SUL", "BRAZIL"),
  ("RÍOHACHA", "COLOMBIA"),
  ("RÍO NEGRO", "ARGENTINA"),
  ("RÍO SAN JUAN", "NICARAGUA"),
  ("RÍO SEGUNDO", "ARGENTINA"),
  ("RIO VERDE", "BRAZIL"),
  ("RISARALDA", "COLOMBIA"),
  ("RISHON LEẔIYYON", "ISRAEL"),
  ("RISHRA", "INDIA"),
  ("RIVADAVIA", "ARGENTINA"),
  ("RIVAS", "NICARAGUA"),
  ("RIVERA", "URUGUAY"),
  ("RIVERS", "NIGERIA"),
  ("RIVIERE DU REMPART", "MAURITIUS"),
  ("RIVNENS'KA", "UKRAINE"),
  ("RIVNE", "UKRAINE"),
  ("RIYADH", "SAUDI ARABIA"),
  ("RIZAL", "PHILIPPINES"),
  ("RIZE", "TURKEY"),
  ("RIZHAO", "CHINA"),
  ("ROBATKARĪM", "IRAN"),
  ("ROBERTSONPET", "INDIA"),
  ("RODÓPI", "GREECE"),
  ("ROGALAND", "NORWAY"),
  ("ROHTAK", "INDIA"),
  ("ROHTAS", "INDIA"),
  ("ROI ET", "THAILAND"),
  ("ROLPA", "NEPAL"),
  ("ROMBLON", "PHILIPPINES"),
  ("ROME", "ITALY"),
  ("RONDÔNIA", "BRAZIL"),
  ("RONDONÓPOLIS", "BRAZIL"),
  ("RONGCHENG", "CHINA"),
  ("RORAIMA", "BRAZIL"),
  ("ROSARIO", "ARGENTINA"),
  ("ROSTOCK", "GERMANY"),
  ("ROSTOV-NA-DONU", "RUSSIA"),
  ("ROSTOV", "RUSSIA"),
  ("RÔTANAK KIRI", "CAMBODIA"),
  ("ROTENBURG", "GERMANY"),
  ("ROTHERHAM", "UNITED KINGDOM"),
  ("ROTH", "GERMANY"),
  ("ROTTAL-INN", "GERMANY"),
  ("ROTTERDAM", "NETHERLANDS"),
  ("ROTTWEIL", "GERMANY"),
  ("ROUEN", "FRANCE"),
  ("ROXAS", "PHILIPPINES"),
  ("RUBTSOVSK", "RUSSIA"),
  ("RŪDAN", "IRAN"),
  ("RUDA ŚLĄSKA", "POLAND"),
  ("RŪDBAR", "IRAN"),
  ("RŪDNI", "KAZAKHSTAN"),
  ("RUDRAPRAYAG", "INDIA"),
  ("RŪDRAPUR", "INDIA"),
  ("RŪDSAR", "IRAN"),
  ("RUHENGERI", "RWANDA"),
  ("RUIAN", "CHINA"),
  ("RUIRU", "KENYA"),
  ("RUKUM", "NEPAL"),
  ("RUKWA", "TANZANIA"),
  ("RUMBEK", "SOUTH SUDAN"),
  ("RUMPHI", "MALAWI"),
  ("RUPANDEHI", "NEPAL"),
  ("RUPNAGAR", "INDIA"),
  ("RŪRKĪ", "INDIA"),
  ("RUSE", "BULGARIA"),
  ("RUSTAVI", "GEORGIA"),
  ("RUSTENBURG", "SOUTH AFRICA"),
  ("RUTANA", "BURUNDI"),
  ("RUVUMA", "TANZANIA"),
  ("RUYIGI", "BURUNDI"),
  ("RYAZAN", "RUSSIA"),
  ("RYBINSK", "RUSSIA"),
  ("RYBNIK", "POLAND"),
  ("RZESZÓW", "POLAND"),
  ("SAALEKREIS", "GERMANY"),
  ("SAALFELD-RUDOLSTADT", "GERMANY"),
  ("SAARBRÜCKEN", "GERMANY"),
  ("SAARLAND", "GERMANY"),
  ("SAARLOUIS", "GERMANY"),
  ("SAARPFALZ-KREIS", "GERMANY"),
  ("SABADELL", "SPAIN"),
  ("SABAH", "MALAYSIA"),
  ("SABARÁ", "BRAZIL"),
  ("SABAR KANTHA", "INDIA"),
  ("SABH̨A", "LIBYA"),
  ("SABIRABAD", "AZERBAIJAN"),
  ("ŞABR AL-MAWADIM", "YEMEN"),
  ("SABUNÇU", "AZERBAIJAN"),
  ("ŠABWAH", "YEMEN"),
  ("SABZEVAR", "IRAN"),
  ("SACABA", "BOLIVIA"),
  ("SACATEPÉQUEZ", "GUATEMALA"),
  ("SACHŎN", "SOUTH KOREA"),
  ("SACHSEN-ANHALT", "GERMANY"),
  ("SÄCHSISCHE SCHWEIZ-OSTERZGEBIRGE", "GERMANY"),
  ("ŞA'DAH", "YEMEN"),
  ("SADIQABAD", "PAKISTAN"),
  ("SAERTU", "CHINA"),
  ("ŞAFAQIS", "TUNISIA"),
  ("SAFI", "MOROCCO"),
  ("SAGAING", "MYANMAR"),
  ("SAGA", "JAPAN"),
  ("SAGAMIHARA", "JAPAN"),
  ("SAGAR", "INDIA"),
  ("ŞAH̨AM", "OMAN"),
  ("SAHARANPUR", "INDIA"),
  ("SAHARSA", "INDIA"),
  ("SAH̨AR", "YEMEN"),
  ("SAHIBGANJ", "INDIA"),
  ("SAHIBZADA AJIT SINGH NAGAR", "INDIA"),
  ("SAHĪWAL", "PAKISTAN"),
  ("SAIDA", "ALGERIA"),
  ("SA'IDPUR", "BANGLADESH"),
  ("SAIGONG", "CHINA"),
  ("SAIJO", "JAPAN"),
  ("SAINT ANDREW", "JAMAICA"),
  ("SAINT ANN", "JAMAICA"),
  ("SAINT-BENOÎT", "REUNION"),
  ("SAINT CATHARINES-NIAGARA", "CANADA"),
  ("SAINT CATHERINE", "JAMAICA"),
  ("SAINT-DENIS", "FRANCE"),
  ("SAINT-DENIS", "REUNION"),
  ("SAINT ELIZABETH", "JAMAICA"),
  ("SAINT-ÉTIENNE", "FRANCE"),
  ("SAINT GALL", "SWITZERLAND"),
  ("SAINT HELENS", "UNITED KINGDOM"),
  ("SAINT JAMES", "JAMAICA"),
  ("SAINT JOHN'S", "CANADA"),
  ("SAINT-LOUIS", "SENEGAL"),
  ("SAINT MARY", "JAMAICA"),
  ("SAINT-PAUL", "REUNION"),
  ("SAINT PETERSBURG", "RUSSIA"),
  ("SAINT-PIERRE", "REUNION"),
  ("SAITAMA", "JAPAN"),
  ("SAKADO", "JAPAN"),
  ("SA KAEO", "THAILAND"),
  ("SAKAI", "JAPAN"),
  ("SAKAKAH", "SAUDI ARABIA"),
  ("SAKARYA", "TURKEY"),
  ("SAKHALIN", "RUSSIA"),
  ("SAKON NAKHON", "THAILAND"),
  ("SAKU", "JAPAN"),
  ("SAKURA", "JAPAN"),
  ("ŞALAH̨-AD-DĪN", "IRAQ"),
  ("SĂLAJ", "ROMANIA"),
  ("ŞALALAH", "OMAN"),
  ("SALAMANCA", "MEXICO"),
  ("SALAMANCA", "SPAIN"),
  ("SALAMAT", "CHAD"),
  ("SALAMĪYAH", "SYRIA"),
  ("SALATIGA", "INDONESIA"),
  ("SALAVAT", "RUSSIA"),
  ("SALEM", "INDIA"),
  ("SALE", "MOROCCO"),
  ("SALERNO", "ITALY"),
  ("ŞALH", "YEMEN"),
  ("SALIHLI", "TURKEY"),
  ("SALIHORSK", "BELARUS"),
  ("SALIMA", "MALAWI"),
  ("SALMAS", "IRAN"),
  ("SALTA", "ARGENTINA"),
  ("SALTILLO", "MEXICO"),
  ("SALTO", "BRAZIL"),
  ("SALTO", "URUGUAY"),
  ("SALVADOR", "BRAZIL"),
  ("SALYAN", "AZERBAIJAN"),
  ("SALYAN", "NEPAL"),
  ("SALZBURG", "AUSTRIA"),
  ("SALZGITTER", "GERMANY"),
  ("SALZLANDKREIS", "GERMANY"),
  ("SAMAGRELO AND ZEMO SVANETI", "GEORGIA"),
  ("ŠAMAL DARFŪR", "SUDAN"),
  ("ŠAMAL ĠAZZAH", "PALESTINE"),
  ("ŠAMAL KURDUFAN", "SUDAN"),
  ("SAMANÁ", "DOMINICAN REPUBLIC"),
  ("SAMANDIRA", "TURKEY"),
  ("SAMANGAN", "AFGHANISTAN"),
  ("SAMARA", "RUSSIA"),
  ("SAMARINDA", "INDONESIA"),
  ("SAMARKAND", "UZBEKISTAN"),
  ("SAMAR", "PHILIPPINES"),
  ("SAMARRA'", "IRAQ"),
  ("SAMASTIPUR", "INDIA"),
  ("SAMBA", "INDIA"),
  ("SAMBALPUR", "INDIA"),
  ("SAMBHAL", "INDIA"),
  ("SAMSUN", "TURKEY"),
  ("SAMTSKHE-JAVAKHETI", "GEORGIA"),
  ("SAMUT PRAKAN", "THAILAND"),
  ("SAMUT SAKHON", "THAILAND"),
  ("SAMUT SONGKHRAN", "THAILAND"),
  ("SANAAG", "SOMALIA"),
  ("SANANDAJ", "IRAN"),
  ("SAN ANTONIO", "CHILE"),
  ("SAN'A", "YEMEN"),
  ("ŞAN'A", "YEMEN"),
  ("SAN BERNARDO", "CHILE"),
  ("SANBU", "CHINA"),
  ("SAN CARLOS", "PHILIPPINES"),
  ("SAN CARLOS", "VENEZUELA"),
  ("SÁNCHEZ RAMÍREZ", "DOMINICAN REPUBLIC"),
  ("SANCHÓNG", "TAIWAN"),
  ("SAN CRISTÓBAL DE LA LAGUNA", "SPAIN"),
  ("SAN CRISTÓBAL DE LAS CASAS", "MEXICO"),
  ("SAN CRISTÓBAL", "DOMINICAN REPUBLIC"),
  ("SAN CRISTÓBAL", "VENEZUELA"),
  ("SANCTI SPÍRITUS", "CUBA"),
  ("SANDA", "JAPAN"),
  ("SANDAKAN", "MALAYSIA"),
  ("SANDAUN", "PAPUA NEW GUINEA"),
  ("SAN FELIPE DE ACONCAGUA", "CHILE"),
  ("SAN FELIPE", "VENEZUELA"),
  ("SAN FERNANDO", "ARGENTINA"),
  ("SAN FERNANDO", "PHILIPPINES"),
  ("SAN FERNANDO", "VENEZUELA"),
  ("SAN FRANCISCO COACALCO", "MEXICO"),
  ("SAN FRANCISCO DE CAMPECHE", "MEXICO"),
  ("SAN FRANCISCO DE MACORÍS", "DOMINICAN REPUBLIC"),
  ("SANGHA-MBAÉRÉ", "CENTRAL AFRICAN REPUBLIC"),
  ("SANGJU", "SOUTH KOREA"),
  ("SANGLI", "INDIA"),
  ("SANGLI-MIRAJ", "INDIA"),
  ("SANGRUR", "INDIA"),
  ("SANGRŪR", "INDIA"),
  ("SANGUIÉ", "BURKINA FASO"),
  ("SANH̨AN WA BANĪ BAHLŪL", "YEMEN"),
  ("SAN ISIDRO", "ARGENTINA"),
  ("SANJO", "JAPAN"),
  ("SAN JOSÉ", "COSTA RICA"),
  ("SAN JOSE DEL MONTE", "PHILIPPINES"),
  ("SAN JOSÉ", "URUGUAY"),
  ("SAN JUAN", "ARGENTINA"),
  ("SAN JUAN BAUTISTA TUXTEPEC", "MEXICO"),
  ("SAN JUAN DE LOS MORROS", "VENEZUELA"),
  ("SAN JUAN DEL RÍO", "MEXICO"),
  ("SAN JUAN", "DOMINICAN REPUBLIC"),
  ("SAN JUAN-LAVENTVILLE", "TRINIDAD AND TOBAGO"),
  ("SAN JUAN", "PHILIPPINES"),
  ("SAN JUAN", "PUERTO RICO"),
  ("SAN JUAN SACATEPÉQUEZ", "GUATEMALA"),
  ("SAN JUSTO", "ARGENTINA"),
  ("SANKHUWASABHA", "NEPAL"),
  ("SANKT GALLEN", "SWITZERLAND"),
  ("ŞANLIURFA", "TURKEY"),
  ("SAN LORENZO", "ARGENTINA"),
  ("SAN LORENZO", "PARAGUAY"),
  ("SAN LUIS", "ARGENTINA"),
  ("SAN LUIS POTOSÍ", "MEXICO"),
  ("SAN LUIS RÍO COLORADO", "MEXICO"),
  ("SAN MARCOS", "GUATEMALA"),
  ("SAN MARTÍN", "ARGENTINA"),
  ("SAN MARTÍN", "PERU"),
  ("SANMATENGA", "BURKINA FASO"),
  ("SAN MATEO", "PHILIPPINES"),
  ("SANMENXIA", "CHINA"),
  ("SAN MIGUEL", "ARGENTINA"),
  ("SAN MIGUEL", "EL SALVADOR"),
  ("SAN MIGUELITO", "PANAMA"),
  ("SANMING", "CHINA"),
  ("SAN NICOLÁS", "ARGENTINA"),
  ("SAN NICOLÁS DE LOS GARZA", "MEXICO"),
  ("SANO", "JAPAN"),
  ("SAN PABLO DE LAS SALINAS", "MEXICO"),
  ("SAN PABLO", "PHILIPPINES"),
  ("SAN PEDRO DE MACORÍS", "DOMINICAN REPUBLIC"),
  ("SAN PEDRO GARZA GARCÍA", "MEXICO"),
  ("SAN-PÉDRO", "IVORY COAST"),
  ("SAN PEDRO", "PARAGUAY"),
  ("SAN PEDRO", "PHILIPPINES"),
  ("SAN PEDRO SULA", "HONDURAS"),
  ("SAN RAFAEL", "ARGENTINA"),
  ("SAN SALVADOR", "EL SALVADOR"),
  ("SAN SEBASTIÁN", "SPAIN"),
  ("SANTA ANA", "EL SALVADOR"),
  ("SANTA BÁRBARA D'OESTE", "BRAZIL"),
  ("SANTA BÁRBARA", "HONDURAS"),
  ("SANTA CATARINA", "BRAZIL"),
  ("SANTA CLARA", "CUBA"),
  ("SANTA COLOMA DE GRAMENET", "SPAIN"),
  ("SANTA CRUZ", "ARGENTINA"),
  ("SANTA CRUZ", "BOLIVIA"),
  ("SANTA CRUZ DE TENERIFE", "SPAIN"),
  ("SANTA CRUZ DO SUL", "BRAZIL"),
  ("SANTA CRUZ", "PHILIPPINES"),
  ("SANTA FÉ", "ARGENTINA"),
  ("SANTA LUZIA", "BRAZIL"),
  ("SANTA MARÍA", "ARGENTINA"),
  ("SANTA MARIA", "BRAZIL"),
  ("SANTA MARTA", "COLOMBIA"),
  ("SANTANA", "BRAZIL"),
  ("SANTANA DE PARNAÍBA", "BRAZIL"),
  ("SANTANDER", "COLOMBIA"),
  ("SANTANDER", "SPAIN"),
  ("SANTARÉM", "BRAZIL"),
  ("SANTA RITA", "BRAZIL"),
  ("SANTA ROSA", "ARGENTINA"),
  ("SANTA ROSA", "GUATEMALA"),
  ("SANTA ROSA", "PHILIPPINES"),
  ("SANTA TERESA", "VENEZUELA"),
  ("SANTIAGO", "CHILE"),
  ("SANTIAGO DE CUBA", "CUBA"),
  ("SANTIAGO DEL ESTERO", "ARGENTINA"),
  ("SANTIAGO DE QUERÉTARO", "MEXICO"),
  ("SANTIAGO", "DOMINICAN REPUBLIC"),
  ("SANTIAGO", "PHILIPPINES"),
  ("SANT KABIR NAGAR", "INDIA"),
  ("SANTO ANDRÉ", "BRAZIL"),
  ("SANTO DOMINGO DE GUZMÁN", "DOMINICAN REPUBLIC"),
  ("SANTO DOMINGO", "DOMINICAN REPUBLIC"),
  ("SANTO DOMINGO", "ECUADOR"),
  ("SANTO DOMINGO ESTE", "DOMINICAN REPUBLIC"),
  ("SANTO DOMINGO NORTE", "DOMINICAN REPUBLIC"),
  ("SANTO DOMINGO OESTE", "DOMINICAN REPUBLIC"),
  ("SANTOS", "BRAZIL"),
  ("SANT RAVIDAS NAGAR BHADOHI", "INDIA"),
  ("SAN VICENTE", "EL SALVADOR"),
  ("SANXIÁ", "TAIWAN"),
  ("SANYA", "CHINA"),
  ("SÃO BERNARDO DO CAMPO", "BRAZIL"),
  ("SÃO CAETANO DO SUL", "BRAZIL"),
  ("SÃO CARLOS", "BRAZIL"),
  ("SÃO GONÇALO", "BRAZIL"),
  ("SÃO JOÃO DE MERITI", "BRAZIL"),
  ("SÃO JOSÉ", "BRAZIL"),
  ("SÃO JOSÉ DO RIO PRETO", "BRAZIL"),
  ("SÃO JOSÉ DOS CAMPOS", "BRAZIL"),
  ("SÃO JOSÉ DOS PINHAIS", "BRAZIL"),
  ("SÃO LEOPOLDO", "BRAZIL"),
  ("SÃO LUÍS", "BRAZIL"),
  ("SAÔNE-ET-LOIRE", "FRANCE"),
  ("SAO PAULO", "BRAZIL"),
  ("SÃO PAULO", "BRAZIL"),
  ("SÃO TIAGO", "CAPE VERDE"),
  ("SÃO VICENTE", "BRAZIL"),
  ("SAPELE", "NIGERIA"),
  ("SAPPORO", "JAPAN"),
  ("SAPTARI", "NEPAL"),
  ("SAPUCAIA", "BRAZIL"),
  ("SAQQEZ", "IRAN"),
  ("ŠAR'AB AR-RAWNAH", "YEMEN"),
  ("ŠAR'AB AS-SALAM", "YEMEN"),
  ("SARAB", "IRAN"),
  ("SARABURI", "THAILAND"),
  ("SARAIKELA KHARSAWAN", "INDIA"),
  ("SARAJEVO", "BOSNIA AND HERZEGOVINA"),
  ("SARAJEVO-ROMANIJA", "BOSNIA AND HERZEGOVINA"),
  ("SARANGANI", "PHILIPPINES"),
  ("SARAN", "INDIA"),
  ("SARANSK", "RUSSIA"),
  ("SARATOV", "RUSSIA"),
  ("SARAVAN", "IRAN"),
  ("SARAVAN", "LAOS"),
  ("SARAWAK", "MALAYSIA"),
  ("SARBAZ", "IRAN"),
  ("SARDASHT", "IRAN"),
  ("SARDEGNA", "ITALY"),
  ("SAR-E PUL", "AFGHANISTAN"),
  ("SARGODHA", "PAKISTAN"),
  ("SARH", "CHAD"),
  ("SARIGAZI", "TURKEY"),
  ("SARĪ", "IRAN"),
  ("SARIWŎN", "NORTH KOREA"),
  ("SARLAHI", "NEPAL"),
  ("SARNI", "INDIA"),
  ("SARTHE", "FRANCE"),
  ("SASARAM", "INDIA"),
  ("SASEBO", "JAPAN"),
  ("SASKATCHEWAN", "CANADA"),
  ("SASKATOON", "CANADA"),
  ("SASSARI", "ITALY"),
  ("SATAKUNTA", "FINLAND"),
  ("SATARA", "INDIA"),
  ("SATKHĪRA", "BANGLADESH"),
  ("SATNA", "INDIA"),
  ("SATU MARE", "ROMANIA"),
  ("SATUN", "THAILAND"),
  ("SAVANES", "IVORY COAST"),
  ("SAVANES", "TOGO"),
  ("SAVANNAKHET", "LAOS"),
  ("SAVEH", "IRAN"),
  ("SAVINJSKA", "SLOVENIA"),
  ("SAVOIE", "FRANCE"),
  ("SAVOJBOLAGH", "IRAN"),
  ("SAWAI MADHOPUR", "INDIA"),
  ("SAWANGAN", "INDONESIA"),
  ("SAXONY", "GERMANY"),
  ("SAYAMA", "JAPAN"),
  ("SAY'ŪN", "YEMEN"),
  ("SCHAUMBURG", "GERMANY"),
  ("SCHLESWIG-FLENSBURG", "GERMANY"),
  ("SCHLESWIG-HOLSTEIN", "GERMANY"),
  ("SCHMALKALDEN-MEININGEN", "GERMANY"),
  ("SCHWÄBISCH HALL", "GERMANY"),
  ("SCHWALM-EDER-KREIS", "GERMANY"),
  ("SCHWANDORF", "GERMANY"),
  ("SCHWARZWALD-BAAR-KREIS", "GERMANY"),
  ("SCHWYZ", "SWITZERLAND"),
  ("SCOTTISH BORDERS", "UNITED KINGDOM"),
  ("SEFROU", "MOROCCO"),
  ("SEGEBERG", "GERMANY"),
  ("SÉGOU", "MALI"),
  ("SEGOVIA", "SPAIN"),
  ("SEHORE", "INDIA"),
  ("SEINE-ET-MARNE", "FRANCE"),
  ("SEINE-MARITIME", "FRANCE"),
  ("SEINE-SAINT-DENIS", "FRANCE"),
  ("SEKONDI", "GHANA"),
  ("SEKONG", "LAOS"),
  ("SELANGOR", "MALAYSIA"),
  ("SELAYANG BARU", "MALAYSIA"),
  ("SÈLÈNGÈ", "MONGOLIA"),
  ("SEMARANG", "INDONESIA"),
  ("SEMEY", "KAZAKHSTAN"),
  ("SEMIEN-KEIH-BAHRI", "ERITREA"),
  ("SEMNAN", "IRAN"),
  ("SENAPATI", "INDIA"),
  ("SENDAI", "JAPAN"),
  ("SÉNO", "BURKINA FASO"),
  ("SEONI", "INDIA"),
  ("SEONĪ", "INDIA"),
  ("SEPATAN", "INDONESIA"),
  ("SERANG", "INDONESIA"),
  ("SEREMBAN", "MALAYSIA"),
  ("SERGIPE", "BRAZIL"),
  ("SERGIYEV POSAD", "RUSSIA"),
  ("SERILUNGAMPALLE", "INDIA"),
  ("SEROWE-PALAPYE", "BOTSWANA"),
  ("SERPONG", "INDONESIA"),
  ("SERPUKHOV", "RUSSIA"),
  ("SERRA", "BRAZIL"),
  ("SÉRRAI", "GREECE"),
  ("SERRE KUNDA", "GAMBIA"),
  ("SERTÃOZINHO", "BRAZIL"),
  ("SETE LAGOAS", "BRAZIL"),
  ("SETIF", "ALGERIA"),
  ("SÉTIF", "ALGERIA"),
  ("SETO", "JAPAN"),
  ("SETTAT", "MOROCCO"),
  ("SETÚBAL", "PORTUGAL"),
  ("SEVASTOPOL'", "UKRAINE"),
  ("SEVERNO-BAČKA", "SERBIA"),
  ("SEVERNO-BANAT", "SERBIA"),
  ("SEVERODVINSK", "RUSSIA"),
  ("SEVERSK", "RUSSIA"),
  ("SEVILLA", "SPAIN"),
  ("S-GRAVENHAGE", "NETHERLANDS"),
  ("SŎGWIPO", "SOUTH KOREA"),
  ("SHAANXI", "CHINA"),
  ("SHABEELLAHA DHEXE", "SOMALIA"),
  ("SHABEELLAHA HOOSE", "SOMALIA"),
  ("SHABESTAR", "IRAN"),
  ("SHADEGAN", "IRAN"),
  ("SHAGAMU", "NIGERIA"),
  ("SHAH ALAM", "MALAYSIA"),
  ("SHAHDOL", "INDIA"),
  ("SHAHE", "CHINA"),
  ("SHAHID BHAGAT SINGH NAGAR", "INDIA"),
  ("SHAHĪN SHAHR", "IRAN"),
  ("SHAHJAHANPUR", "INDIA"),
  ("SHAHR-E-BABAK", "IRAN"),
  ("SHAHR-E KORD", "IRAN"),
  ("SHAHR-E-KORD", "IRAN"),
  ("SHAHREZA", "IRAN"),
  ("SHAHRĪAR", "IRAN"),
  ("SHAHRIYAR", "IRAN"),
  ("SHAHRŪD", "IRAN"),
  ("SHAJAPUR", "INDIA"),
  ("SHAKHTY", "RUSSIA"),
  ("SHAKI", "NIGERIA"),
  ("SHAMLI", "INDIA"),
  ("SHANDONG", "CHINA"),
  ("SHANGHAI", "CHINA"),
  ("SHANGQIU", "CHINA"),
  ("SHANGRAO", "CHINA"),
  ("SHAN", "MYANMAR"),
  ("SHANTIPUR", "INDIA"),
  ("SHANTOU", "CHINA"),
  ("SHANWEI", "CHINA"),
  ("SHANXI", "CHINA"),
  ("SHAOGUAN", "CHINA"),
  ("SHAOWU", "CHINA"),
  ("SHAOXING", "CHINA"),
  ("SHAOYANG", "CHINA"),
  ("SHAPING", "CHINA"),
  ("SHARIATPŪR", "BANGLADESH"),
  ("SHARJAH", "UNITED ARAB EMIRATES"),
  ("SHARKIA", "EGYPT"),
  ("SHASHEMENNĒ", "ETHIOPIA"),
  ("SHASHI", "CHINA"),
  ("SHATIAN", "CHINA"),
  ("SHAZAND", "IRAN"),
  ("SHCHYOLKOVO", "RUSSIA"),
  ("SHEBIN-EL-KOM", "EGYPT"),
  ("SHEFFIELD", "UNITED KINGDOM"),
  ("SHEIKHPURA", "INDIA"),
  ("SHEKHŪPURA", "PAKISTAN"),
  ("SHENJIAMEN", "CHINA"),
  ("SHENYANG", "CHINA"),
  ("SHENZHEN", "CHINA"),
  ("SHEOHAR", "INDIA"),
  ("SHEOPUR", "INDIA"),
  ("SHERBROOKE", "CANADA"),
  ("SHERPŪR", "BANGLADESH"),
  ("S-HERTOGENBOSCH", "NETHERLANDS"),
  ("SHIBATA", "JAPAN"),
  ("SHIDA KARTLI", "GEORGIA"),
  ("SHIGA", "JAPAN"),
  ("SHIHEZI", "CHINA"),
  ("SHIHŬNG", "SOUTH KOREA"),
  ("SHIJIAZHUANG", "CHINA"),
  ("SHIKARPUR", "PAKISTAN"),
  ("SHIKOHABAD", "INDIA"),
  ("SHILĪGURI", "INDIA"),
  ("SHILLONG", "INDIA"),
  ("SHILONG", "CHINA"),
  ("SHIMADA", "JAPAN"),
  ("SHIMANE", "JAPAN"),
  ("SHIMLA", "INDIA"),
  ("SHIMOGA", "INDIA"),
  ("SHIMONOSEKI", "JAPAN"),
  ("SHINYANGA", "TANZANIA"),
  ("SHIONGSHUI", "CHINA"),
  ("SHIQIAO", "CHINA"),
  ("SHIRAK", "ARMENIA"),
  ("SHĪRAZ", "IRAN"),
  ("SHĪRVAN", "IRAN"),
  ("SHISELWENI", "SWAZILAND"),
  ("SHISHI", "CHINA"),
  ("SHISHOU", "CHINA"),
  ("SHIVAPURI", "INDIA"),
  ("SHIVPURI", "INDIA"),
  ("SHIYAN", "CHINA"),
  ("SHIZUISHAN", "CHINA"),
  ("SHIZUOKA", "JAPAN"),
  ("SHKODËR", "ALBANIA"),
  ("SHOLAPUR", "INDIA"),
  ("SHRAWASTI", "INDIA"),
  ("SHRĪRAMPUR", "INDIA"),
  ("SHROPSHIRE", "UNITED KINGDOM"),
  ("SHUANGCHENG", "CHINA"),
  ("SHUANGYASHAN", "CHINA"),
  ("SHUBRA-EL-KHEMA", "EGYPT"),
  ("SHÙLÍN", "TAIWAN"),
  ("SHUNAN", "JAPAN"),
  ("SHUNYI", "CHINA"),
  ("SHUPIYAN", "INDIA"),
  ("SHŪSH", "IRAN"),
  ("SHŪSHTAR", "IRAN"),
  ("SHYMKENT", "KAZAKHSTAN"),
  ("SIALKOT", "PAKISTAN"),
  ("ŠIAULIAI", "LITHUANIA"),
  ("ŠIAULIŲ", "LITHUANIA"),
  ("ŠIBENIK-KNIN", "CROATIA"),
  ("SIBIU", "ROMANIA"),
  ("SIBU", "MALAYSIA"),
  ("SICHUAN", "CHINA"),
  ("SICILY", "ITALY"),
  ("SIDDHARTHNAGAR", "INDIA"),
  ("SIDERADOUGOU", "BURKINA FASO"),
  ("SIDHI", "INDIA"),
  ("SIDI BEL ABBES", "ALGERIA"),
  ("SĪDĪ BŪ ZAYD", "TUNISIA"),
  ("SIDI CHAMI", "ALGERIA"),
  ("SIDI KACEM", "MOROCCO"),
  ("SIDOARJO", "INDONESIA"),
  ("SIEGEN", "GERMANY"),
  ("SIEGEN-WITTGENSTEIN", "GERMANY"),
  ("SIEM REAB", "CAMBODIA"),
  ("ŞIGIS ĶAZAĶSTAN", "KAZAKHSTAN"),
  ("SIGMARINGEN", "GERMANY"),
  ("SIGUIRI", "GUINEA"),
  ("SIHLANGU", "SOUTH AFRICA"),
  ("SIIRT", "TURKEY"),
  ("SIKANDARABAD", "INDIA"),
  ("SIKAR", "INDIA"),
  ("SĪKAR", "INDIA"),
  ("SIKASSO", "MALI"),
  ("SIKKIM", "INDIA"),
  ("SILANGAN", "PHILIPPINES"),
  ("SILANG", "PHILIPPINES"),
  ("SILCHAR", "INDIA"),
  ("SILHAŢ", "BANGLADESH"),
  ("SILISTRA", "BULGARIA"),
  ("SILYANAH", "TUNISIA"),
  ("SIMBU", "PAPUA NEW GUINEA"),
  ("SIMDEGA", "INDIA"),
  ("SIMFEROPOL'", "UKRAINE"),
  ("SIMÕES FILHO", "BRAZIL"),
  ("SINALOA", "MEXICO"),
  ("SINCELEJO", "COLOMBIA"),
  ("SINDHUDURG", "INDIA"),
  ("SINDHULI", "NEPAL"),
  ("SINDHUPALCHOK", "NEPAL"),
  ("SIND", "PAKISTAN"),
  ("SINGAPORE", "SINGAPORE"),
  ("SINGARAJA", "INDONESIA"),
  ("SING BURI", "THAILAND"),
  ("SINGIDA", "TANZANIA"),
  ("SINGKAWANG", "INDONESIA"),
  ("SINGRAULI", "INDIA"),
  ("SINNAR", "SUDAN"),
  ("SINOE", "LIBERIA"),
  ("SINOP", "BRAZIL"),
  ("SINOP", "TURKEY"),
  ("SINŬIJU", "NORTH KOREA"),
  ("SIPING", "CHINA"),
  ("SIQUIJOR", "PHILIPPINES"),
  ("SI RACHA", "THAILAND"),
  ("SIRAHA", "NEPAL"),
  ("SIRAJGANJ", "BANGLADESH"),
  ("SIRDARE", "UZBEKISTAN"),
  ("SĪRJAN", "IRAN"),
  ("SIRMAUR", "INDIA"),
  ("ŞIRNAK", "TURKEY"),
  ("SIROHI", "INDIA"),
  ("SIRSA", "INDIA"),
  ("SI SA KET", "THAILAND"),
  ("SISAK-MOSLAVINA", "CROATIA"),
  ("SISOPHON", "CAMBODIA"),
  ("SISSILI", "BURKINA FASO"),
  ("SĪSTAN-E BALŪCHESTAN", "IRAN"),
  ("SITAMARHI", "INDIA"),
  ("SITAPUR", "INDIA"),
  ("SĪTAPUR", "INDIA"),
  ("SIVAGANGA", "INDIA"),
  ("SIVASAGAR", "INDIA"),
  ("SIVAS", "TURKEY"),
  ("SIWAN", "INDIA"),
  ("SJÆLLAND", "DENMARK"),
  ("SKÅNE", "SWEDEN"),
  ("SKHIRATE-TEMARA", "MOROCCO"),
  ("ŞƏKI", "AZERBAIJAN"),
  ("SKIKDA", "ALGERIA"),
  ("ŞƏKI-ZAQATALA", "AZERBAIJAN"),
  ("SKOPJE", "MACEDONIA"),
  ("ŚLĄSKIE", "POLAND"),
  ("SLAVONSKI BROD-POSAVINA", "CROATIA"),
  ("SLAV'YANS'K", "UKRAINE"),
  ("SLIVEN", "BULGARIA"),
  ("SLOUGH", "UNITED KINGDOM"),
  ("ŞƏMKIR", "AZERBAIJAN"),
  ("SMOLENSK", "RUSSIA"),
  ("SMOLJAN", "BULGARIA"),
  ("SŎNGNAM", "SOUTH KOREA"),
  ("SƠN LA", "VIETNAM"),
  ("SOACHA", "COLOMBIA"),
  ("SOBRAL", "BRAZIL"),
  ("SOCHI", "RUSSIA"),
  ("SÓC TRĂNG", "VIETNAM"),
  ("SÖDERMANLAND", "SWEDEN"),
  ("SOEST", "GERMANY"),
  ("SOFALA", "MOZAMBIQUE"),
  ("SOFIA, SOFIYA", "BULGARIA"),
  ("SOFIJA GRAD", "BULGARIA"),
  ("SOFIJSKA OBLAST", "BULGARIA"),
  ("SOGAMOSO", "COLOMBIA"),
  ("SOGN OG FJORDANE", "NORWAY"),
  ("SOHAG", "EGYPT"),
  ("SOKA", "JAPAN"),
  ("SOKODÉ", "TOGO"),
  ("SOKOTO", "NIGERIA"),
  ("SOLAN", "INDIA"),
  ("SOLAPUR", "INDIA"),
  ("SOLEDAD", "COLOMBIA"),
  ("SOLEDAD DE GRACIANO SÁNCHEZ", "MEXICO"),
  ("SOLENZO", "BURKINA FASO"),
  ("SOLINGEN", "GERMANY"),
  ("SOLOLÁ", "GUATEMALA"),
  ("SOLOTHURN", "SWITZERLAND"),
  ("SOLTÜSTIK ĶAZAĶSTAN", "KAZAKHSTAN"),
  ("SOLUKHUMBU", "NEPAL"),
  ("SOMALI", "ETHIOPIA"),
  ("SOMBAOPU", "INDONESIA"),
  ("SOMERSET", "UNITED KINGDOM"),
  ("SOMERSET WEST", "SOUTH AFRICA"),
  ("SOMME", "FRANCE"),
  ("SOMOGY", "HUNGARY"),
  ("SONAPUR", "INDIA"),
  ("SONBHADRA", "INDIA"),
  ("SONGEA", "TANZANIA"),
  ("SONGKHLA", "THAILAND"),
  ("SONGNIM", "NORTH KOREA"),
  ("SONIPAT", "INDIA"),
  ("SONĪPAT", "INDIA"),
  ("SONITPUR", "INDIA"),
  ("SONORA", "MEXICO"),
  ("SONSONATE", "EL SALVADOR"),
  ("SOOL", "SOMALIA"),
  ("SOREANG", "INDONESIA"),
  ("SOROCABA", "BRAZIL"),
  ("SORONG", "INDONESIA"),
  ("SORSOGON", "PHILIPPINES"),
  ("SØR-TRØNDELAG", "NORWAY"),
  ("SOSNOWIEC", "POLAND"),
  ("SOUBRÉ", "IVORY COAST"),
  ("SOUK AHRAS", "ALGERIA"),
  ("SOUM", "BURKINA FASO"),
  ("SOUROU", "BURKINA FASO"),
  ("SOUSS MASSA-DRAÂ", "MOROCCO"),
  ("SOUTHAMPTON", "UNITED KINGDOM"),
  ("SOUTH ANDAMAN", "INDIA"),
  ("SOUTH AUSTRALIA", "AUSTRALIA"),
  ("SOUTH AYRSHIRE", "UNITED KINGDOM"),
  ("SOUTH COTABATO", "PHILIPPINES"),
  ("SOUTH DUM DUM", "INDIA"),
  ("SOUTHEND-ON-SEA", "UNITED KINGDOM"),
  ("SOUTHERN HIGHLANDS", "PAPUA NEW GUINEA"),
  ("SOUTHERN LEYTE", "PHILIPPINES"),
  ("SOUTHERN MINDANAO", "PHILIPPINES"),
  ("SOUTHERN TAGALOG", "PHILIPPINES"),
  ("SOUTH GARO HILLS", "INDIA"),
  ("SOUTH GLOUCESTERSHIRE", "UNITED KINGDOM"),
  ("SOUTH GOA", "INDIA"),
  ("SOUTH KARELIA", "FINLAND"),
  ("SOUTH LANARKSHIRE", "UNITED KINGDOM"),
  ("SOUTH OSTROBOTHNIA", "FINLAND"),
  ("SOUTH SAVO", "FINLAND"),
  ("SOUTH TRIPURA", "INDIA"),
  ("SOUTH  TWENTY FOUR PARGANAS", "INDIA"),
  ("SOUTHWEST FINLAND", "FINLAND"),
  ("SOUTH YORKSHIRE", "UNITED KINGDOM"),
  ("SOWETO", "SOUTH AFRICA"),
  ("SOYAPANGO", "EL SALVADOR"),
  ("SPANISH TOWN", "JAMAICA"),
  ("SPLIT", "CROATIA"),
  ("SPLIT-DALMACIJA", "CROATIA"),
  ("SPREE-NEISSE", "GERMANY"),
  ("SPRINGS", "SOUTH AFRICA"),
  ("SREDNJE-BANAT", "SERBIA"),
  ("SREDNJOBOSANSKI", "BOSNIA AND HERZEGOVINA"),
  ("SREM", "SERBIA"),
  ("SRIKAKULAM", "INDIA"),
  ("SRĪKAKULAM", "INDIA"),
  ("SRINAGAR", "INDIA"),
  ("SRĪNAGAR", "INDIA"),
  ("ŞƏRUR", "AZERBAIJAN"),
  ("SŎSAN", "SOUTH KOREA"),
  ("STADE", "GERMANY"),
  ("STAFFORDSHIRE", "UNITED KINGDOM"),
  ("STARA ZAGORA", "BULGARIA"),
  ("STARNBERG", "GERMANY"),
  ("STARYY OSKOL", "RUSSIA"),
  ("STAVANGER-SANDNES", "NORWAY"),
  ("STAVROPOL", "RUSSIA"),
  ("STEIERMARK", "AUSTRIA"),
  ("STEINBURG", "GERMANY"),
  ("STEINFURT", "GERMANY"),
  ("STELLENBOSCH", "SOUTH AFRICA"),
  ("STENDAL", "GERMANY"),
  ("STERLITAMAK", "RUSSIA"),
  ("STILFONTEIN", "SOUTH AFRICA"),
  ("STOCKHOLM", "SWEDEN"),
  ("STOCKPORT", "UNITED KINGDOM"),
  ("STOCKTON-ON-TEES", "UNITED KINGDOM"),
  ("STOKE-ON-TRENT", "UNITED KINGDOM"),
  ("STORMARN", "GERMANY"),
  ("STRASBOURG", "FRANCE"),
  ("STŘEDOČESKÝ", "CZECH REPUBLIC"),
  ("STUENG TRAENG", "CAMBODIA"),
  ("STUTTGART", "GERMANY"),
  ("ŠU'AWB", "YEMEN"),
  ("SUBANG", "INDONESIA"),
  ("ŞUBBAH̨-AS-SALIM", "KUWAIT"),
  ("SUCEAVA", "ROMANIA"),
  ("SUCHENG", "CHINA"),
  ("SUCHITEPÉQUEZ", "GUATEMALA"),
  ("SUCRE", "BOLIVIA"),
  ("SUCRE", "COLOMBIA"),
  ("SUCRE", "VENEZUELA"),
  ("SUCUMBÍOS", "ECUADOR"),
  ("SUD-BANDAMA", "IVORY COAST"),
  ("SUDBURY", "CANADA"),
  ("SUD", "CAMEROON"),
  ("SUD-COMOÉ", "IVORY COAST"),
  ("SUD-EST", "HAITI"),
  ("SUD", "HAITI"),
  ("SUD-KIVU", "CONGO"),
  ("SÜDLICHE WEINSTRASSE", "GERMANY"),
  ("SUD", "NEW CALEDONIA"),
  ("SUDOUEST", "CAMEROON"),
  ("SUEZ", "EGYPT"),
  ("SUFFOLK", "UNITED KINGDOM"),
  ("SUGHD", "TAJIKISTAN"),
  ("ŞUH̨AR", "OMAN"),
  ("SUIHUA", "CHINA"),
  ("SUINING", "CHINA"),
  ("SUITA", "JAPAN"),
  ("SUIZHOU", "CHINA"),
  ("SUJIATUN", "CHINA"),
  ("SUKABUMI", "INDONESIA"),
  ("SUKARAJA", "INDONESIA"),
  ("SUKHOTHAI", "THAILAND"),
  ("SUKKUR", "PAKISTAN"),
  ("SULAWESI BARAT", "INDONESIA"),
  ("SULAWESI SELATAN", "INDONESIA"),
  ("SULAWESI TENGAH", "INDONESIA"),
  ("SULAWESI TENGGARA", "INDONESIA"),
  ("SULAWESI UTARA", "INDONESIA"),
  ("SULEJA", "NIGERIA"),
  ("SULLANA", "PERU"),
  ("SŎUL", "SOUTH KOREA"),
  ("SEOUL", "SOUTH KOREA"),
  ("SULTANBEYLI", "TURKEY"),
  ("SULTAN KUDARAT", "PHILIPPINES"),
  ("SULTANPUR", "INDIA"),
  ("SULTANPUR MAJRA", "INDIA"),
  ("SULU", "PHILIPPINES"),
  ("ŠUMADIJA", "SERBIA"),
  ("SUMARÉ", "BRAZIL"),
  ("SUMATERA BARAT", "INDONESIA"),
  ("SUMATERA SELATAN", "INDONESIA"),
  ("SUMATERA UTARA", "INDONESIA"),
  ("SUMBAWANGA", "TANZANIA"),
  ("SUMBER", "INDONESIA"),
  ("SUMEDANG", "INDONESIA"),
  ("SŪME'EH SARA", "IRAN"),
  ("ŠUMEN", "BULGARIA"),
  ("SUMENEP", "INDONESIA"),
  ("ŠUMPERK", "CZECH REPUBLIC"),
  ("SUMQAYIT", "AZERBAIJAN"),
  ("SUMS'KA", "UKRAINE"),
  ("SUMY", "UKRAINE"),
  ("SŪNAMGANJ", "BANGLADESH"),
  ("SUNCHŎN", "SOUTH KOREA"),
  ("SUNDARGARH", "INDIA"),
  ("SUNDERLAND", "UNITED KINGDOM"),
  ("SUNGAI LIAT", "INDONESIA"),
  ("SUNGAI PETANI", "MALAYSIA"),
  ("SUNGGAL", "INDONESIA"),
  ("SUNSARI", "NEPAL"),
  ("SUNSHINE COAST", "AUSTRALIA"),
  ("SUPAUL", "INDIA"),
  ("SUPHAN BURI", "THAILAND"),
  ("SURABAYA", "INDONESIA"),
  ("SURAKARTA", "INDONESIA"),
  ("SURAT", "INDIA"),
  ("SŪRAT", "INDIA"),
  ("SURAT THANI", "THAILAND"),
  ("SURAXANI", "AZERBAIJAN"),
  ("SURENDRANAGAR", "INDIA"),
  ("SURGUJA", "INDIA"),
  ("SURGUT", "RUSSIA"),
  ("SURHONDAR", "UZBEKISTAN"),
  ("SURIAPET", "INDIA"),
  ("SURIGAO DEL NORTE", "PHILIPPINES"),
  ("SURIGAO DEL SUR", "PHILIPPINES"),
  ("SURIGAO", "PHILIPPINES"),
  ("SURIN", "THAILAND"),
  ("SURKHET", "NEPAL"),
  ("SURREY", "UNITED KINGDOM"),
  ("SURT", "LIBYA"),
  ("SŪSAH", "TUNISIA"),
  ("SUTTON COLDFIELD", "UNITED KINGDOM"),
  ("SUWŎN", "SOUTH KOREA"),
  ("SUZANO", "BRAZIL"),
  ("SUZHOU", "CHINA"),
  ("SUZUKA", "JAPAN"),
  ("SVAY RIĚNG", "CAMBODIA"),
  ("SVERDLOVSK", "RUSSIA"),
  ("SVITAVY", "CZECH REPUBLIC"),
  ("SWANSEA", "UNITED KINGDOM"),
  ("ŚWIĘTOKRZYSKIE", "POLAND"),
  ("SWINDON", "UNITED KINGDOM"),
  ("SYANGJA", "NEPAL"),
  ("SYDDANMARK", "DENMARK"),
  ("SYDNEY", "AUSTRALIA"),
  ("SYEVERODONETS'K", "UKRAINE"),
  ("SYKTYVKAR", "RUSSIA"),
  ("SYRACUSE", "ITALY"),
  ("SYUNIK", "ARMENIA"),
  ("SYZRAN", "RUSSIA"),
  ("SZABOLCS-SZATMÁR-BEREG", "HUNGARY"),
  ("SZCZECIN", "POLAND"),
  ("SZEGED", "HUNGARY"),
  ("SZÉKESFEHÉRVÁR", "HUNGARY"),
  ("TABASCO", "MEXICO"),
  ("TABOÃO DA SERRA", "BRAZIL"),
  ("TABORA", "TANZANIA"),
  ("TÁBOR", "CZECH REPUBLIC"),
  ("TABRĪZ", "IRAN"),
  ("TABŪK", "SAUDI ARABIA"),
  ("TACHIKAWA", "JAPAN"),
  ("TÁCHIRA", "VENEZUELA"),
  ("TACLOBAN", "PHILIPPINES"),
  ("TACNA", "PERU"),
  ("TADEPALLEGŪDEM", "INDIA"),
  ("TADLA-AZILAL", "MOROCCO"),
  ("TADPATRI", "INDIA"),
  ("TAEGU", "SOUTH KOREA"),
  ("TAEJŎN", "SOUTH KOREA"),
  ("TAFÍ VIEJO", "ARGENTINA"),
  ("TAGANROG", "RUSSIA"),
  ("TAGAYTAY", "PHILIPPINES"),
  ("TAGBILARAN", "PHILIPPINES"),
  ("TAGUIG", "PHILIPPINES"),
  ("TAGUM", "PHILIPPINES"),
  ("TAH̱AR", "AFGHANISTAN"),
  ("TAHOUA", "NIGER"),
  ("TAIAN", "CHINA"),
  ("TÁIBĚI SHÌ", "TAIWAN"),
  ("TÁIBĚI", "TAIWAN"),
  ("TÁIBĚI XIÀN", "TAIWAN"),
  ("TAICHENG", "CHINA"),
  ("TÁIDONG", "TAIWAN"),
  ("TÁINÁN SHÌ", "TAIWAN"),
  ("TÁINÁN", "TAIWAN"),
  ("TÁINÁN XIÀN", "TAIWAN"),
  ("TAIPING", "MALAYSIA"),
  ("TÀIPÍNG", "TAIWAN"),
  ("TAIYUAN", "CHINA"),
  ("TÁIZHONG SHÌ", "TAIWAN"),
  ("TÁIZHONG", "TAIWAN"),
  ("TÁIZHONG XIÀN", "TAIWAN"),
  ("TAIZHOU", "CHINA"),
  ("TA'IZZ", "YEMEN"),
  ("TAJIMI", "JAPAN"),
  ("TAKAEV", "CAMBODIA"),
  ("TAKAMATSU", "JAPAN"),
  ("TAKAOKA", "JAPAN"),
  ("TAKARAZUKA", "JAPAN"),
  ("TAKASAKI", "JAPAN"),
  ("TAKATSUKI", "JAPAN"),
  ("TAKAYAMA", "JAPAN"),
  ("TAKESTAN", "IRAN"),
  ("TA KHMAU", "CAMBODIA"),
  ("TAKORADI", "GHANA"),
  ("TAK", "THAILAND"),
  ("TALAGANTE", "CHILE"),
  ("TALANG", "INDONESIA"),
  ("TALAS", "KYRGYZSTAN"),
  ("TALCA", "CHILE"),
  ("TALCAHUANO", "CHILE"),
  ("TALDIĶORĞAN", "KAZAKHSTAN"),
  ("TALESH", "IRAN"),
  ("TALISAY", "PHILIPPINES"),
  ("TALL 'AFAR", "IRAQ"),
  ("TALLINN", "ESTONIA"),
  ("TAMA", "JAPAN"),
  ("TAMALE", "GHANA"),
  ("TAMAN", "INDONESIA"),
  ("TAMANRASSET", "ALGERIA"),
  ("TAMAULIPAS", "MEXICO"),
  ("TAMBACOUNDA", "SENEGAL"),
  ("TAMBARAM", "INDIA"),
  ("TAMBOV", "RUSSIA"),
  ("TAMBUN", "INDONESIA"),
  ("TAMENGLONG", "INDIA"),
  ("TAMIL NADU", "INDIA"),
  ("TAMPERE", "FINLAND"),
  ("TAMPICO", "MEXICO"),
  ("TANAHU", "NEPAL"),
  ("TANDIL", "ARGENTINA"),
  ("TANDJILÉ", "CHAD"),
  ("TANDO ĀDAM", "PAKISTAN"),
  ("TANETE", "INDONESIA"),
  ("TANGA", "TANZANIA"),
  ("TANGAYAL", "BANGLADESH"),
  ("TANGERANG", "INDONESIA"),
  ("TANGERANG SELATAN", "INDONESIA"),
  ("TANGER ASSILAH", "MOROCCO"),
  ("TANGER, TANGIER", "MOROCCO"),
  ("TANGGU", "CHINA"),
  ("TANGIER-TÉTOUAN", "MOROCCO"),
  ("TANGSHAN", "CHINA"),
  ("TANINTHARYI", "MYANMAR"),
  ("TANJUNG BALAI", "INDONESIA"),
  ("TANJUNG BALAI-MERAL", "INDONESIA"),
  ("TANJUNG MORAWA", "INDONESIA"),
  ("TANJUNG PINANG", "INDONESIA"),
  ("TANTA", "EGYPT"),
  ("TANZA", "PHILIPPINES"),
  ("TÁNZI", "TAIWAN"),
  ("TAONAN", "CHINA"),
  ("TAOUNATE", "MOROCCO"),
  ("TAOURIRT", "MOROCCO"),
  ("TÁOYUÁN", "TAIWAN"),
  ("TAPACHULA DE CÓRDOVA Y ORDÓÑEZ", "MEXICO"),
  ("TAPI", "INDIA"),
  ("TAPLEJUNG", "NEPAL"),
  ("TAPOA", "BURKINA FASO"),
  ("ṮAQBAH", "SAUDI ARABIA"),
  ("TARABA", "NIGERIA"),
  ("ŢARABULUS", "LEBANON"),
  ("ŢARABULUS", "LIBYA"),
  ("TARAKAN", "INDONESIA"),
  ("TARANAKI", "NEW ZEALAND"),
  ("TARANTO", "ITALY"),
  ("TARAPACÁ", "CHILE"),
  ("TARAPOTO", "PERU"),
  ("TARAZ", "KAZAKHSTAN"),
  ("TĂRGOVIŠTE", "BULGARIA"),
  ("TÂRGU-MUREŞ", "ROMANIA"),
  ("TARIJA", "BOLIVIA"),
  ("TARĪM", "YEMEN"),
  ("TARLAC", "PHILIPPINES"),
  ("TARN-ET-GARONNE", "FRANCE"),
  ("TARN", "FRANCE"),
  ("TARNÓW", "POLAND"),
  ("TARN TARAN", "INDIA"),
  ("TAROUDANNT", "MOROCCO"),
  ("TARRAGONA", "SPAIN"),
  ("TARSUS", "TURKEY"),
  ("TARTU", "ESTONIA"),
  ("ŢARŢŪS", "SYRIA"),
  ("TARŪT", "SAUDI ARABIA"),
  ("TASHKENT", "UZBEKISTAN"),
  ("TASIKMALAYA", "INDONESIA"),
  ("TASMANIA", "AUSTRALIA"),
  ("TATA", "MOROCCO"),
  ("TATARSTAN", "RUSSIA"),
  ("TAŢAWĪN", "TUNISIA"),
  ("TATUÍ", "BRAZIL"),
  ("TAUBATÉ", "BRAZIL"),
  ("TAUNGGYI", "MYANMAR"),
  ("TAURAGĖS", "LITHUANIA"),
  ("TAURANGA", "NEW ZEALAND"),
  ("TAVUSH", "ARMENIA"),
  ("TAWAU", "MALAYSIA"),
  ("TAWI-TAWI", "PHILIPPINES"),
  ("TAWZAR", "TUNISIA"),
  ("TAYBAD", "IRAN"),
  ("TÂY BẮC BỘ", "VIETNAM"),
  ("TÂY NGUYÊN", "VIETNAM"),
  ("TÂY NINH", "VIETNAM"),
  ("TAYTAY", "PHILIPPINES"),
  ("TAZA-AL HOCEIMA-TAOUNATE", "MOROCCO"),
  ("TAZA", "MOROCCO"),
  ("TBILISI", "GEORGIA"),
  ("TEBESSA", "ALGERIA"),
  ("TÉBESSA", "ALGERIA"),
  ("TEBINGTINGGI", "INDONESIA"),
  ("TEGAL", "INDONESIA"),
  ("TEGUCIGALPA", "HONDURAS"),
  ("TEHRAN", "IRAN"),
  ("TEHRI GARHWAL", "INDIA"),
  ("TEHUACÁN", "MEXICO"),
  ("TEIXEIRA DE FREITAS", "BRAZIL"),
  ("TEKIRDAĞ", "TURKEY"),
  ("TEL AVIV", "ISRAEL"),
  ("TEL AVIV-YAFO", "ISRAEL"),
  ("TELDE", "SPAIN"),
  ("TELEMARK", "NORWAY"),
  ("TELEORMAN", "ROMANIA"),
  ("TELFORD AND WREKIN", "UNITED KINGDOM"),
  ("TÉLIMÉLÉ", "GUINEA"),
  ("TELŠIŲ", "LITHUANIA"),
  ("TELTOW-FLÄMING", "GERMANY"),
  ("TELUKNAGA", "INDONESIA"),
  ("TEMA", "GHANA"),
  ("TEMBILAHAN", "INDONESIA"),
  ("TEMBISA", "SOUTH AFRICA"),
  ("TEMIRTAŪ", "KAZAKHSTAN"),
  ("TEMIXCO", "MEXICO"),
  ("TEMUCO", "CHILE"),
  ("TENALI", "INDIA"),
  ("TENGZHOU", "CHINA"),
  ("TENKODOGO", "BURKINA FASO"),
  ("TEÓFILO OTONI", "BRAZIL"),
  ("TEPEXPAN", "MEXICO"),
  ("TEPIC", "MEXICO"),
  ("TEPLICE", "CZECH REPUBLIC"),
  ("TERCERO ARRIBA", "ARGENTINA"),
  ("TERENGGANU", "MALAYSIA"),
  ("TERESINA", "BRAZIL"),
  ("TERESÓPOLIS", "BRAZIL"),
  ("TERHATHUM", "NEPAL"),
  ("TERMIZ", "UZBEKISTAN"),
  ("TERNATE", "INDONESIA"),
  ("TERNI", "ITALY"),
  ("TERNOPIL'S'KA", "UKRAINE"),
  ("TERNOPIL'", "UKRAINE"),
  ("TERRASSA", "SPAIN"),
  ("TERRITOIRE DE BELFORT", "FRANCE"),
  ("TERUEL", "SPAIN"),
  ("TESHIE", "GHANA"),
  ("TETE", "MOZAMBIQUE"),
  ("TETOUAN", "MOROCCO"),
  ("TETOVO", "MACEDONIA"),
  ("TEXCOCO DE MORA", "MEXICO"),
  ("TEZPUR", "INDIA"),
  ("THABA-TSEKA", "LESOTHO"),
  ("THÁI BÌNH", "VIETNAM"),
  ("THÁI NGUYÊN", "VIETNAM"),
  ("THAKURGAON", "BANGLADESH"),
  ("THALTEJ", "INDIA"),
  ("THANA", "INDIA"),
  ("THANE", "INDIA"),
  ("THANESAR", "INDIA"),
  ("THANH HÓA", "VIETNAM"),
  ("THÀNH PHỐ HỒ CHÍ MINH", "VIETNAM"),
  ("THANJAVUR", "INDIA"),
  ("THANJAVŪR", "INDIA"),
  ("THANYABURI", "THAILAND"),
  ("THỪA THIÊN - HUẾ", "VIETNAM"),
  ("THATON", "MYANMAR"),
  ("THAYETMYO", "MYANMAR"),
  ("THƯ DẦU MỘT", "VIETNAM"),
  ("THE DANGS", "INDIA"),
  ("THENI ALLINAGARAM", "INDIA"),
  ("THENI", "INDIA"),
  ("THE NILGIRIS", "INDIA"),
  ("THESSALONÍKI", "GREECE"),
  ("THIÈS", "SENEGAL"),
  ("THIKA", "KENYA"),
  ("THIMPHU", "BHUTAN"),
  ("THIRUVALLUR", "INDIA"),
  ("THIRUVANANTHAPURAM", "INDIA"),
  ("THIRUVARUR", "INDIA"),
  ("THOOTHUKKUDI", "INDIA"),
  ("THOUBAL", "INDIA"),
  ("THRISSUR", "INDIA"),
  ("THRISSŪR", "INDIA"),
  ("THUNDER BAY", "CANADA"),
  ("THURGAU", "SWITZERLAND"),
  ("THURINGIA", "GERMANY"),
  ("THURROCK", "UNITED KINGDOM"),
  ("THŪTHUKKUDI", "INDIA"),
  ("THYOLO", "MALAWI"),
  ("TIANJIN", "CHINA"),
  ("TIANMEN", "CHINA"),
  ("TIARET", "ALGERIA"),
  ("TICINO", "SWITZERLAND"),
  ("TIELI", "CHINA"),
  ("TIELING", "CHINA"),
  ("TIERRA DEL FUEGO", "ARGENTINA"),
  ("TIGRAY", "ETHIOPIA"),
  ("TIGRE", "ARGENTINA"),
  ("TIJUANA", "MEXICO"),
  ("TIKAMGARH", "INDIA"),
  ("TIKRĪT", "IRAQ"),
  ("TILBURG", "NETHERLANDS"),
  ("TILLABÉRY", "NIGER"),
  ("TIMIŞOARA", "ROMANIA"),
  ("TIMIŞ", "ROMANIA"),
  ("TIMON", "BRAZIL"),
  ("TIỀN GIANG", "VIETNAM"),
  ("TINSUKIA", "INDIA"),
  ("TIPAZA", "ALGERIA"),
  ("TIRANA", "ALBANIA"),
  ("TIRAP", "INDIA"),
  ("TIRASPOL", "MOLDOVA"),
  ("TIRASPOL'", "MOLDOVA"),
  ("TIROL", "AUSTRIA"),
  ("TIRUCHCHIRAPPALLI", "INDIA"),
  ("TIRUCHENGODE", "INDIA"),
  ("TIRUCHIRAPPALLI", "INDIA"),
  ("TIRUNELVELI", "INDIA"),
  ("TIRUPATI", "INDIA"),
  ("TIRUPPUR", "INDIA"),
  ("TIRUVANNAMALAI", "INDIA"),
  ("TIRŪVOTTIYŪR", "INDIA"),
  ("TISSEMSILT", "ALGERIA"),
  ("TITAGARH", "INDIA"),
  ("TIZI OUZOU", "ALGERIA"),
  ("TIZNIT", "MOROCCO"),
  ("TLALNEPANTLA", "MEXICO"),
  ("TLAQUEPAQUE", "MEXICO"),
  ("TLAXCALA", "MEXICO"),
  ("TLEMCEN", "ALGERIA"),
  ("TOAMASINA", "MADAGASCAR"),
  ("TOCANTINS", "BRAZIL"),
  ("TOCHIGI", "JAPAN"),
  ("TOCUMEN", "PANAMA"),
  ("TODA", "JAPAN"),
  ("TOGDEER", "SOMALIA"),
  ("TOKAI", "JAPAN"),
  ("TOKAT", "TURKEY"),
  ("TOKOROZAWA", "JAPAN"),
  ("TOKUSHIMA", "JAPAN"),
  ("TOKYO", "JAPAN"),
  ("TOLEDO", "BRAZIL"),
  ("TOLEDO", "PHILIPPINES"),
  ("TOLEDO", "SPAIN"),
  ("TOLIARY", "MADAGASCAR"),
  ("TOLIMA", "COLOMBIA"),
  ("TOLNA", "HUNGARY"),
  ("TOLUCA DE LERDO", "MEXICO"),
  ("TOLYATTI", "RUSSIA"),
  ("TOMAKOMAI", "JAPAN"),
  ("TOMBALI", "GUINEA-BISSAU"),
  ("TOMBOUCTOU", "MALI"),
  ("TOMSK", "RUSSIA"),
  ("TONALÁ", "MEXICO"),
  ("TONDABAYASHI", "JAPAN"),
  ("TONEKABON", "IRAN"),
  ("TONGCHUAN", "CHINA"),
  ("TONGLIAO", "CHINA"),
  ("TONGLING", "CHINA"),
  ("TONGYONG", "SOUTH KOREA"),
  ("TONGZHOU", "CHINA"),
  ("TONK", "INDIA"),
  ("TONKOLILI", "SIERRA LEONE"),
  ("TOOWOOMBA", "AUSTRALIA"),
  ("TORBAT-E-HEYDARIYEH", "IRAN"),
  ("TORBAT-E H̨EYDARĪYEH", "IRAN"),
  ("TORBAT-E-JAM", "IRAN"),
  ("TORBAY", "UNITED KINGDOM"),
  ("TORIDE", "JAPAN"),
  ("TORKAMAN", "IRAN"),
  ("TORONTO", "CANADA"),
  ("TORREJÓN DE ARDOZ", "SPAIN"),
  ("TORREÓN", "MEXICO"),
  ("TORREVIEJA", "SPAIN"),
  ("TORUŃ", "POLAND"),
  ("TOSCANA", "ITALY"),
  ("TOTONICAPÁN", "GUATEMALA"),
  ("TOTTORI", "JAPAN"),
  ("TÓUFÈN", "TAIWAN"),
  ("TOUGUÉ", "GUINEA"),
  ("TOULON", "FRANCE"),
  ("TOULOUSE", "FRANCE"),
  ("TOUNGOO", "MYANMAR"),
  ("TOURS", "FRANCE"),
  ("TOUTUNHE", "CHINA"),
  ("TÖV", "MONGOLIA"),
  ("TOVUZ", "AZERBAIJAN"),
  ("TOWNSVILLE", "AUSTRALIA"),
  ("TOYAMA", "JAPAN"),
  ("TOYOHARA, YUZHNO-SAKHALINSK", "RUSSIA"),
  ("TOYOHASHI", "JAPAN"),
  ("TOYOKAWA", "JAPAN"),
  ("TOYONAKA", "JAPAN"),
  ("TOYOOKA", "JAPAN"),
  ("TOYOTA", "JAPAN"),
  ("TRABZON", "TURKEY"),
  ("TRANG", "THAILAND"),
  ("TRARZA", "MAURITANIA"),
  ("TRAT", "THAILAND"),
  ("TRAUNSTEIN", "GERMANY"),
  ("TRÀ VINH", "VIETNAM"),
  ("TŘEBÍČ", "CZECH REPUBLIC"),
  ("TREBIŠOV", "SLOVAKIA"),
  ("TRENČIANSKÝ", "SLOVAKIA"),
  ("TRENČÍN", "SLOVAKIA"),
  ("TRENTINO-ALTO ADIGE", "ITALY"),
  ("TRENTO", "ITALY"),
  ("TRES DE FEBRERO", "ARGENTINA"),
  ("TRÊS LAGOAS", "BRAZIL"),
  ("TRIER", "GERMANY"),
  ("TRIER-SAARBURG", "GERMANY"),
  ("TRIESTE", "ITALY"),
  ("TRÍKALA", "GREECE"),
  ("TRINCOMALEE", "SRI LANKA"),
  ("TRINDADE", "BRAZIL"),
  ("TRINIDAD", "BOLIVIA"),
  ("TRIPURA", "INDIA"),
  ("TRNAVA", "SLOVAKIA"),
  ("TRNAVSKÝ", "SLOVAKIA"),
  ("TROIS-RIVIÈRES", "CANADA"),
  ("TROMS", "NORWAY"),
  ("TRONDHEIM", "NORWAY"),
  ("TRUJILLO", "PERU"),
  ("TRUJILLO", "VENEZUELA"),
  ("TRUTNOV", "CZECH REPUBLIC"),
  ("TSHIKAPA", "CONGO"),
  ("TSHOLOTSHO", "ZIMBABWE"),
  ("TSUCHIURA", "JAPAN"),
  ("TSU", "JAPAN"),
  ("TSUKUBA", "JAPAN"),
  ("TSURUOKA", "JAPAN"),
  ("TSUYAMA", "JAPAN"),
  ("TUBAN", "YEMEN"),
  ("TÜBINGEN", "GERMANY"),
  ("ŢUBRUQ", "LIBYA"),
  ("TŬCHÉNG", "TAIWAN"),
  ("TUCUMÁN", "ARGENTINA"),
  ("TUCURUÍ", "BRAZIL"),
  ("TUENSANG", "INDIA"),
  ("TUGUEGARAO", "PHILIPPINES"),
  ("TULANCINGO", "MEXICO"),
  ("TULA", "RUSSIA"),
  ("TULCEA", "ROMANIA"),
  ("ŢŪLKARM", "PALESTINE"),
  ("TULUÁ", "COLOMBIA"),
  ("TUMBES", "PERU"),
  ("TUMKUR", "INDIA"),
  ("TUMKŪR", "INDIA"),
  ("TUNAPUNA-PIARCO", "TRINIDAD AND TOBAGO"),
  ("ŢUNGĪ", "BANGLADESH"),
  ("TUNGURAHUA", "ECUADOR"),
  ("TUNIS", "TUNISIA"),
  ("TUNJA", "COLOMBIA"),
  ("TURGUTLU", "TURKEY"),
  ("TURIN", "ITALY"),
  ("TURKISH CONTROLLED AREA", "CYPRUS"),
  ("TÜRKISTAN", "KAZAKHSTAN"),
  ("TÜRKMENABAT", "TURKMENISTAN"),
  ("TÜRKMENBAŞI", "TURKMENISTAN"),
  ("TURKU", "FINLAND"),
  ("TURMERO", "VENEZUELA"),
  ("TUTTLINGEN", "GERMANY"),
  ("TUTUME", "BOTSWANA"),
  ("TUXTLA GUTIÉRREZ", "MEXICO"),
  ("TUY", "BURKINA FASO"),
  ("TUYÊN QUANG", "VIETNAM"),
  ("TŪYSERKAN", "IRAN"),
  ("TUZLANSKI", "BOSNIA AND HERZEGOVINA"),
  ("TVER", "RUSSIA"),
  ("TYCHY", "POLAND"),
  ("TYNE AND WEAR", "UNITED KINGDOM"),
  ("TYUMEN", "RUSSIA"),
  ("TYVA", "RUSSIA"),
  ("UBÁ", "BRAZIL"),
  ("UBE", "JAPAN"),
  ("UBERABA", "BRAZIL"),
  ("UBERLÂNDIA", "BRAZIL"),
  ("UBON RATCHATHANI", "THAILAND"),
  ("UCAYALI", "PERU"),
  ("UCKERMARK", "GERMANY"),
  ("UDAGAMANDALAM", "INDIA"),
  ("UDAIPUR", "INDIA"),
  ("UDALGURI", "INDIA"),
  ("UDAYAPUR", "NEPAL"),
  ("UDGĪR", "INDIA"),
  ("UDHAMPUR", "INDIA"),
  ("UDHAM SINGH NAGAR", "INDIA"),
  ("UDMURTIA", "RUSSIA"),
  ("UDON THANI", "THAILAND"),
  ("UDUPI", "INDIA"),
  ("UEDA", "JAPAN"),
  ("UFA", "RUSSIA"),
  ("UHERSKÉ HRADIŠTĚ", "CZECH REPUBLIC"),
  ("UÍGE", "ANGOLA"),
  ("ŬIJŎNGBU", "SOUTH KOREA"),
  ("UITENHAGE", "SOUTH AFRICA"),
  ("ŬIWANG", "SOUTH KOREA"),
  ("UJI", "JAPAN"),
  ("UJJAIN", "INDIA"),
  ("UKHRUL", "INDIA"),
  ("UKHTA", "RUSSIA"),
  ("ULAANBAATAR", "MONGOLIA"),
  ("ULAN-UDE", "RUSSIA"),
  ("ULHASNAGAR", "INDIA"),
  ("ULM", "GERMANY"),
  ("ULSAN", "SOUTH KOREA"),
  ("ULUBARIA", "INDIA"),
  ("ULYANOVSK", "RUSSIA"),
  ("UMARIA", "INDIA"),
  ("UMBRIA", "ITALY"),
  ("UMM DURMAN", "SUDAN"),
  ("UMUTARA", "RWANDA"),
  ("UNA", "INDIA"),
  ("'UNAYZAH", "SAUDI ARABIA"),
  ("UNGARAN", "INDONESIA"),
  ("UNIÓN", "ARGENTINA"),
  ("UNITY", "SOUTH SUDAN"),
  ("UNNA", "GERMANY"),
  ("UNNAO", "INDIA"),
  ("UNSKO-SANSKI", "BOSNIA AND HERZEGOVINA"),
  ("UNSTRUT-HAINICH-KREIS", "GERMANY"),
  ("UNTERALLGÄU", "GERMANY"),
  ("UPINGTON", "SOUTH AFRICA"),
  ("UPPAL KALAN", "INDIA"),
  ("UPPER EAST", "GHANA"),
  ("UPPER NILE", "SOUTH SUDAN"),
  ("UPPER WEST", "GHANA"),
  ("UPPSALA", "SWEDEN"),
  ("URASOE", "JAPAN"),
  ("URAYASU", "JAPAN"),
  ("URDANETA", "PHILIPPINES"),
  ("URFA", "TURKEY"),
  ("ÜRGENÇ", "UZBEKISTAN"),
  ("URUAPAN", "MEXICO"),
  ("URUGUAIANA", "BRAZIL"),
  ("URUMA", "JAPAN"),
  ("URUMQI", "CHINA"),
  ("URŪZGAN", "AFGHANISTAN"),
  ("UŞAK", "TURKEY"),
  ("USSURIYSK", "RUSSIA"),
  ("ÚSTECKÝ", "CZECH REPUBLIC"),
  ("USTER", "SWITZERLAND"),
  ("ÚSTÍ NAD LABEM", "CZECH REPUBLIC"),
  ("ÚSTÍ NAD ORLICÍ", "CZECH REPUBLIC"),
  ("UST-ORDYN BURYAT", "RUSSIA"),
  ("USULUTÁN", "EL SALVADOR"),
  ("UTENOS", "LITHUANIA"),
  ("UTHAI THANI", "THAILAND"),
  ("'UTMAH", "YEMEN"),
  ("UTRECHT", "NETHERLANDS"),
  ("UTSUNOMIYA", "JAPAN"),
  ("UTTARADIT", "THAILAND"),
  ("UTTARA KANNADA", "INDIA"),
  ("UTTARAKHAND", "INDIA"),
  ("UTTAR BASTAR KANKER", "INDIA"),
  ("UTTAR DINAJPUR", "INDIA"),
  ("UTTARKASHI", "INDIA"),
  ("UTTARPARA-KOTRUNG", "INDIA"),
  ("UTTAR PRADESH", "INDIA"),
  ("UUSIMAA", "FINLAND"),
  ("UVINZA", "TANZANIA"),
  ("UVIRA", "CONGO"),
  ("UVS", "MONGOLIA"),
  ("UYO", "NIGERIA"),
  ("UZHHOROD", "UKRAINE"),
  ("UZUMBA MARAMBA PFUNGWE", "ZIMBABWE"),
  ("VADODARA", "INDIA"),
  ("VAISHALI", "INDIA"),
  ("VALAIS", "SWITZERLAND"),
  ("VÂLCEA", "ROMANIA"),
  ("VAL-DE-MARNE", "FRANCE"),
  ("VALDIVIA", "CHILE"),
  ("VAL-D'OISE", "FRANCE"),
  ("VALENCIA", "SPAIN"),
  ("VALENCIA", "VENEZUELA"),
  ("VALE OF GLAMORGAN", "UNITED KINGDOM"),
  ("VALERA", "VENEZUELA"),
  ("VALINHOS", "BRAZIL"),
  ("VALLADOLID", "SPAIN"),
  ("VALLE D'AOSTA", "ITALY"),
  ("VALLE DE LA PASCUA", "VENEZUELA"),
  ("VALLE DEL CAUCA", "COLOMBIA"),
  ("VALLEDUPAR", "COLOMBIA"),
  ("VALLÉE DU BANDAMA", "IVORY COAST"),
  ("VALLE", "HONDURAS"),
  ("VALPARAÍSO", "CHILE"),
  ("VALPARAISO DE GOIÁS", "BRAZIL"),
  ("VALPARAÍSO DE GOIÁS", "BRAZIL"),
  ("VALSAD", "INDIA"),
  ("VALVERDE", "DOMINICAN REPUBLIC"),
  ("VANADZOR", "ARMENIA"),
  ("VANCOUVER", "CANADA"),
  ("VANDERBIJLPARK", "SOUTH AFRICA"),
  ("VANIYAMBADI", "INDIA"),
  ("VANTAA", "FINLAND"),
  ("VAN", "TURKEY"),
  ("VAPI", "INDIA"),
  ("VARAMĪN", "IRAN"),
  ("VARANASI", "INDIA"),
  ("VARANASĪ", "INDIA"),
  ("VARAŽDIN", "CROATIA"),
  ("VAR", "FRANCE"),
  ("VARGAS", "VENEZUELA"),
  ("VARGINHA", "BRAZIL"),
  ("VÄRMLAND", "SWEDEN"),
  ("VARNA", "BULGARIA"),
  ("VÁRZEA GRANDE", "BRAZIL"),
  ("VÁRZEA PAULISTA", "BRAZIL"),
  ("VASCOAS-PHOENIX", "MAURITIUS"),
  ("VAS", "HUNGARY"),
  ("VASLUI", "ROMANIA"),
  ("VÄSTERÅS", "SWEDEN"),
  ("VÄSTERBOTTEN", "SWEDEN"),
  ("VÄSTERNORRLAND", "SWEDEN"),
  ("VÄSTMANLAND", "SWEDEN"),
  ("VÄSTRA GÖTALAND", "SWEDEN"),
  ("VASTRAL", "INDIA"),
  ("VAUCLUSE", "FRANCE"),
  ("VAUD", "SWITZERLAND"),
  ("VAVUNIYA", "SRI LANKA"),
  ("VECHTA", "GERMANY"),
  ("VEJALPUR", "INDIA"),
  ("VEJLE", "DENMARK"),
  ("VELIKIY NOVGOROD", "RUSSIA"),
  ("VELIKO TĂRNOVO", "BULGARIA"),
  ("VELLORE", "INDIA"),
  ("VELLURU", "INDIA"),
  ("VENDÉE", "FRANCE"),
  ("VENETO", "ITALY"),
  ("VENICE", "ITALY"),
  ("VERACRUZ", "MEXICO"),
  ("VERAGUAS", "PANAMA"),
  ("VERAVAL", "INDIA"),
  ("VERDEN", "GERMANY"),
  ("VEREENIGING", "SOUTH AFRICA"),
  ("VERONA", "ITALY"),
  ("VERWOERDBURG", "SOUTH AFRICA"),
  ("VESPASIANO", "BRAZIL"),
  ("VEST-AGDER", "NORWAY"),
  ("VESTFOLD", "NORWAY"),
  ("VESZPRÉM", "HUNGARY"),
  ("VIAMÃO", "BRAZIL"),
  ("VIANGCHAN PREFECTURE", "LAOS"),
  ("VIANGCHAN PROVINCE", "LAOS"),
  ("VICEBSK", "BELARUS"),
  ("VICENTE LÓPEZ", "ARGENTINA"),
  ("VICENZA", "ITALY"),
  ("VICTORIA", "AUSTRALIA"),
  ("VICTORIA", "CANADA"),
  ("VICTORIA DE DURANGO", "MEXICO"),
  ("VIDISHA", "INDIA"),
  ("VIENNA", "AUSTRIA"),
  ("VIENNE", "FRANCE"),
  ("VIENTIANE", "LAOS"),
  ("VIERSEN", "GERMANY"),
  ("VIGO", "SPAIN"),
  ("VIJAYAWADA", "INDIA"),
  ("VILA VELHA", "BRAZIL"),
  ("VILLA ALEMANA", "CHILE"),
  ("VILLA CANALES", "GUATEMALA"),
  ("VILLA CLARA", "CUBA"),
  ("VILLA ELISA", "PARAGUAY"),
  ("VILLAHERMOSA", "MEXICO"),
  ("VILLA NICOLÁS ROMERO", "MEXICO"),
  ("VILLA NUEVA", "GUATEMALA"),
  ("VILLAVICENCIO", "COLOMBIA"),
  ("VILLE DE KIGALI", "RWANDA"),
  ("VILLEURBANNE", "FRANCE"),
  ("VILNIAUS", "LITHUANIA"),
  ("VILNIUS", "LITHUANIA"),
  ("VILUPPURAM", "INDIA"),
  ("VIÑA DEL MAR", "CHILE"),
  ("VĨNH LONG", "VIETNAM"),
  ("VĨNH PHÚC", "VIETNAM"),
  ("VINNYTS'KA", "UKRAINE"),
  ("VINNYTSYA", "UKRAINE"),
  ("VIRAR", "INDIA"),
  ("VIRGINIA", "SOUTH AFRICA"),
  ("VIRUDHUNAGAR", "INDIA"),
  ("VISAKHAPATNAM", "INDIA"),
  ("VITÓRIA", "BRAZIL"),
  ("VITÓRIA DA CONQUISTA", "BRAZIL"),
  ("VITÓRIA DE SANTO ANTÃO", "BRAZIL"),
  ("VITORIA", "SPAIN"),
  ("VIZCAYA", "SPAIN"),
  ("VIZIANAGARAM", "INDIA"),
  ("VLADIKAVKAZ", "RUSSIA"),
  ("VLADIMIR", "RUSSIA"),
  ("VLADIVOSTOK", "RUSSIA"),
  ("VLASENICA", "BOSNIA AND HERZEGOVINA"),
  ("VLORË", "ALBANIA"),
  ("VOGELSBERGKREIS", "GERMANY"),
  ("VOGTLANDKREIS", "GERMANY"),
  ("VOIOTIÁ", "GREECE"),
  ("VOJVODINA", "SERBIA"),
  ("VOLGODONSK", "RUSSIA"),
  ("VOLGOGRAD", "RUSSIA"),
  ("VOLOGDA", "RUSSIA"),
  ("VOLTA", "GHANA"),
  ("VOLTA REDONDA", "BRAZIL"),
  ("VOLYNS'KA", "UKRAINE"),
  ("VOLZHSKIY", "RUSSIA"),
  ("VORARLBERG", "AUSTRIA"),
  ("VORIA ELLADA", "GREECE"),
  ("VORONEZH", "RUSSIA"),
  ("VORPOMMERN-GREIFSWALD", "GERMANY"),
  ("VORPOMMERN-RÜGEN", "GERMANY"),
  ("VOSGES", "FRANCE"),
  ("VOSKRESENSK", "RUSSIA"),
  ("VOTORANTIM", "BRAZIL"),
  ("VRACA", "BULGARIA"),
  ("VRANCEA", "ROMANIA"),
  ("VRYHEID", "SOUTH AFRICA"),
  ("VSETÍN", "CZECH REPUBLIC"),
  ("VUKOVAR-SRIJEM", "CROATIA"),
  ("VŨNG TÀU", "VIETNAM"),
  ("VYSOČINA", "CZECH REPUBLIC"),
  ("WAD-AĐ-ĐAHAB", "WESTERN SAHARA"),
  ("WADĪ AS-SĪR", "JORDAN"),
  ("WAD MADANĪ", "SUDAN"),
  ("WAFANGDIAN", "CHINA"),
  ("WA", "GHANA"),
  ("WAH", "PAKISTAN"),
  ("WAIKATO", "NEW ZEALAND"),
  ("WAITAKERE", "NEW ZEALAND"),
  ("WAKAYAMA", "JAPAN"),
  ("WAŁBRZYCH", "POLAND"),
  ("WALDECK-FRANKENBERG", "GERMANY"),
  ("WALDSHUT", "GERMANY"),
  ("WALES", "UNITED KINGDOM"),
  ("WALSALL", "UNITED KINGDOM"),
  ("WANXIAN", "CHINA"),
  ("WARANGAL", "INDIA"),
  ("WARDHA", "INDIA"),
  ("WARENDORF", "GERMANY"),
  ("WARMIŃSKO-MAZURSKIE", "POLAND"),
  ("WARRAP", "SOUTH SUDAN"),
  ("WARRINGTON", "UNITED KINGDOM"),
  ("WARRI", "NIGERIA"),
  ("WARSAW", "POLAND"),
  ("WARTBURGKREIS", "GERMANY"),
  ("WARU", "INDONESIA"),
  ("WARWICKSHIRE", "UNITED KINGDOM"),
  ("WASHIM", "INDIA"),
  ("WASIŢ", "IRAQ"),
  ("WATERFORD", "IRELAND"),
  ("WATFORD", "UNITED KINGDOM"),
  ("WAU", "SOUTH SUDAN"),
  ("WAYANAD", "INDIA"),
  ("WEIFANG", "CHINA"),
  ("WEIHAI", "CHINA"),
  ("WEILHEIM-SCHONGAU", "GERMANY"),
  ("WEINAN", "CHINA"),
  ("WELE-NZAS", "EQUATORIAL GUINEA"),
  ("WELKOM", "SOUTH AFRICA"),
  ("WELLINGTON", "NEW ZEALAND"),
  ("WENCHENG", "CHINA"),
  ("WENZHOU", "CHINA"),
  ("WERRA-MEISSNER-KREIS", "GERMANY"),
  ("WERU", "INDONESIA"),
  ("WESEL", "GERMANY"),
  ("WEST BERKSHIRE", "UNITED KINGDOM"),
  ("WEST BROMWICH", "UNITED KINGDOM"),
  ("WESTERN AUSTRALIA", "AUSTRALIA"),
  ("WESTERN BAHR EL GHAZAL", "SOUTH SUDAN"),
  ("WESTERN CAPE", "SOUTH AFRICA"),
  ("WESTERN EQUATORIA", "SOUTH SUDAN"),
  ("WESTERN", "FIJI ISLANDS"),
  ("WESTERN", "GHANA"),
  ("WESTERN HIGHLANDS", "PAPUA NEW GUINEA"),
  ("WESTERN", "KENYA"),
  ("WESTERN MINDANAO", "PHILIPPINES"),
  ("WESTERN RURAL", "SIERRA LEONE"),
  ("WESTERN", "SIERRA LEONE"),
  ("WESTERN", "UGANDA"),
  ("WESTERN URBAN", "SIERRA LEONE"),
  ("WESTERN VISAYAS", "PHILIPPINES"),
  ("WESTERN", "ZAMBIA"),
  ("WESTERWALDKREIS", "GERMANY"),
  ("WEST FLANDERS", "BELGIUM"),
  ("WEST GARO HILLS", "INDIA"),
  ("WEST GODAVARI", "INDIA"),
  ("WEST KHASI HILLS", "INDIA"),
  ("WESTLAND", "NETHERLANDS"),
  ("WEST LOTHIAN", "UNITED KINGDOM"),
  ("WEST MIDLANDS", "UNITED KINGDOM"),
  ("WESTMORELAND", "JAMAICA"),
  ("WEST NEW BRITAIN", "PAPUA NEW GUINEA"),
  ("WEST NIMAR", "INDIA"),
  ("WESTONARIA", "SOUTH AFRICA"),
  ("WEST SIANG", "INDIA"),
  ("WEST SUSSEX", "UNITED KINGDOM"),
  ("WEST TRIPURA", "INDIA"),
  ("WEST YORKSHIRE", "UNITED KINGDOM"),
  ("WETTERAUKREIS", "GERMANY"),
  ("WEXFORD", "IRELAND"),
  ("WICKLOW", "IRELAND"),
  ("WIELKOPOLSKIE", "POLAND"),
  ("WIEN", "AUSTRIA"),
  ("WIESBADEN", "GERMANY"),
  ("WILLEMSTAD", "CURAÇAO"),
  ("WILTSHIRE", "UNITED KINGDOM"),
  ("WINDHOEK", "NAMIBIA"),
  ("WINDSOR AND MAIDENHEAD", "UNITED KINGDOM"),
  ("WINDSOR", "CANADA"),
  ("WINNIPEG", "CANADA"),
  ("WINTERTHUR", "SWITZERLAND"),
  ("WITTENBERG", "GERMANY"),
  ("WŁOCŁAWEK", "POLAND"),
  ("WŎNJU", "SOUTH KOREA"),
  ("WŎNSAN", "NORTH KOREA"),
  ("WOKHA", "INDIA"),
  ("WOKING-BYFLEET", "UNITED KINGDOM"),
  ("WOKINGHAM", "UNITED KINGDOM"),
  ("WOLEU-NTEM", "GABON"),
  ("WOLFENBÜTTEL", "GERMANY"),
  ("WOLFSBURG", "GERMANY"),
  ("WOLLONGONG", "AUSTRALIA"),
  ("WOLVERHAMPTON", "UNITED KINGDOM"),
  ("WONOSOBO", "INDONESIA"),
  ("WOQOOYI GALBEED", "SOMALIA"),
  ("WORCESTERSHIRE", "UNITED KINGDOM"),
  ("WORCESTER", "SOUTH AFRICA"),
  ("WORODOUGOU", "IVORY COAST"),
  ("WREXHAM", "UNITED KINGDOM"),
  ("WROCŁAW", "POLAND"),
  ("WUDA", "CHINA"),
  ("WUFENG", "CHINA"),
  ("WUHAN", "CHINA"),
  ("WUHU", "CHINA"),
  ("WULANHAOTE", "CHINA"),
  ("WUNING", "CHINA"),
  ("WUPPERTAL", "GERMANY"),
  ("WÜRZBURG", "GERMANY"),
  ("WUŞAB AL-'ĀLĪ", "YEMEN"),
  ("WUŞAB AS-SAFIL", "YEMEN"),
  ("WUWEI", "CHINA"),
  ("WUXI", "CHINA"),
  ("WUXUE", "CHINA"),
  ("WUZHOU", "CHINA"),
  ("XAÇMAZ", "AZERBAIJAN"),
  ("XAIGNABURY", "LAOS"),
  ("XAI-XAI", "MOZAMBIQUE"),
  ("XALAPA-ENRÍQUEZ", "MEXICO"),
  ("XÁNTHI", "GREECE"),
  ("XIAMEN", "CHINA"),
  ("XIAN", "CHINA"),
  ("XIANGDONG", "CHINA"),
  ("XIANGFAN", "CHINA"),
  ("XIANGGANGDAO", "CHINA"),
  ("XIANG KHUANG", "LAOS"),
  ("XIANGTAN", "CHINA"),
  ("XIANNING", "CHINA"),
  ("XIANTAO", "CHINA"),
  ("XIANYANG", "CHINA"),
  ("XIAOGAN", "CHINA"),
  ("XIAOLAN", "CHINA"),
  ("XIAOSHAN", "CHINA"),
  ("XIAZHEN", "CHINA"),
  ("XICHANG", "CHINA"),
  ("XICO", "MEXICO"),
  ("XIGONG", "CHINA"),
  ("XILINHAOTE", "CHINA"),
  ("XINAN", "CHINA"),
  ("XĪNDIÀN", "TAIWAN"),
  ("XINGCHENG", "CHINA"),
  ("XINGTAI", "CHINA"),
  ("XINGYI", "CHINA"),
  ("XINING", "CHINA"),
  ("XINJIANG", "CHINA"),
  ("XINJI", "CHINA"),
  ("XINPU", "CHINA"),
  ("XINTAI", "CHINA"),
  ("XINXIANG", "CHINA"),
  ("XINYANG", "CHINA"),
  ("XINYU", "CHINA"),
  ("XINZHOU", "CHINA"),
  ("XĪNZHUANG", "TAIWAN"),
  ("XĪNZHÚ SHÌ", "TAIWAN"),
  ("XĪNZHÚ", "TAIWAN"),
  ("XĪNZHÚ XIÀN", "TAIWAN"),
  ("XIZANG", "CHINA"),
  ("XĪZHĬ", "TAIWAN"),
  ("XƏTAI", "AZERBAIJAN"),
  ("XUANHUA", "CHINA"),
  ("XUANZHOU", "CHINA"),
  ("XUCHANG", "CHINA"),
  ("XUZHOU", "CHINA"),
  ("XƏZƏR", "AZERBAIJAN"),
  ("YAAN", "CHINA"),
  ("YACHIYO", "JAPAN"),
  ("YADGIR", "INDIA"),
  ("YAGHA", "BURKINA FASO"),
  ("YAIZU", "JAPAN"),
  ("YAKESHI", "CHINA"),
  ("YAKUTIA", "RUSSIA"),
  ("YALA", "THAILAND"),
  ("YALOVA", "TURKEY"),
  ("YAMAGATA", "JAPAN"),
  ("YAMAGUCHI", "JAPAN"),
  ("YAMALO-NENETS", "RUSSIA"),
  ("YAMANASHI", "JAPAN"),
  ("YAMATO", "JAPAN"),
  ("YAMBIO", "SOUTH SUDAN"),
  ("YAMOUSSOUKRO", "IVORY COAST"),
  ("YAMUNANAGAR", "INDIA"),
  ("YANAN", "CHINA"),
  ("YANBU", "SAUDI ARABIA"),
  ("YANCHENG", "CHINA"),
  ("YANGGANG", "NORTH KOREA"),
  ("YANGJIANG", "CHINA"),
  ("YANGJU", "SOUTH KOREA"),
  ("YANGLIUQING", "CHINA"),
  ("YÁNGMÉI", "TAIWAN"),
  ("YANGON", "MYANMAR"),
  ("YANGQUAN", "CHINA"),
  ("YANGSAN", "SOUTH KOREA"),
  ("YANGZHOU", "CHINA"),
  ("YANJI", "CHINA"),
  ("YANTAI", "CHINA"),
  ("YAO", "JAPAN"),
  ("YAOUNDÉ", "CAMEROON"),
  ("YARACUY", "VENEZUELA"),
  ("YARĪM", "YEMEN"),
  ("YAROSLAVL", "RUSSIA"),
  ("YASAMAL", "AZERBAIJAN"),
  ("YASOTHON", "THAILAND"),
  ("YASŪJ", "IRAN"),
  ("YATENGA", "BURKINA FASO"),
  ("YATSUSHIRO", "JAPAN"),
  ("YAVATMAL", "INDIA"),
  ("YAZD", "IRAN"),
  ("YEI", "SOUTH SUDAN"),
  ("YEKATERINBURG", "RUSSIA"),
  ("YELAHANKA", "INDIA"),
  ("YELETS", "RUSSIA"),
  ("YENANGYAUNG", "MYANMAR"),
  ("YÊN BÁI", "VIETNAM"),
  ("YEREVAN", "ARMENIA"),
  ("YEVLAX", "AZERBAIJAN"),
  ("YEVPATORIYA", "UKRAINE"),
  ("YIBIN", "CHINA"),
  ("YICHANG", "CHINA"),
  ("YICHUN", "CHINA"),
  ("YIDU", "CHINA"),
  ("YÍLÁN", "TAIWAN"),
  ("YINCHUAN", "CHINA"),
  ("YINGCHENG", "CHINA"),
  ("YINGKOU", "CHINA"),
  ("YINGTAI", "CHINA"),
  ("YINGZHONG", "CHINA"),
  ("YINING", "CHINA"),
  ("YIYANG", "CHINA"),
  ("YIZHENG", "CHINA"),
  ("YŎNGHÉ", "TAIWAN"),
  ("YŎNGJU", "SOUTH KOREA"),
  ("YŎNGKANG", "TAIWAN"),
  ("YOBE", "NIGERIA"),
  ("YOGYAKARTA", "INDONESIA"),
  ("YOKKAICHI", "JAPAN"),
  ("YOKOHAMA", "JAPAN"),
  ("YOKOSUKA", "JAPAN"),
  ("YOKOTE", "JAPAN"),
  ("YOLA", "NIGERIA"),
  ("YOMOU", "GUINEA"),
  ("YONAGO", "JAPAN"),
  ("YONGAN", "CHINA"),
  ("YONGIN", "SOUTH KOREA"),
  ("YONNE", "FRANCE"),
  ("YOPAL", "COLOMBIA"),
  ("YORK", "UNITED KINGDOM"),
  ("YORO", "HONDURAS"),
  ("YOZGAT", "TURKEY"),
  ("YSR DISTRICT", "INDIA"),
  ("YŎSU", "SOUTH KOREA"),
  ("YUANCHENG", "CHINA"),
  ("YUÁNLÍN", "TAIWAN"),
  ("YUANLONG", "CHINA"),
  ("YUCATÁN", "MEXICO"),
  ("YUCI", "CHINA"),
  ("YUEYANG", "CHINA"),
  ("YUHONG", "CHINA"),
  ("YULIN", "CHINA"),
  ("YUNCHENG", "CHINA"),
  ("YÚNLÍN", "TAIWAN"),
  ("YUNNAN", "CHINA"),
  ("YUNYANG", "CHINA"),
  ("YUSHAN", "CHINA"),
  ("YUSHU", "CHINA"),
  ("YUXARI QARABAĞ", "AZERBAIJAN"),
  ("YUYAO", "CHINA"),
  ("YVELINES", "FRANCE"),
  ("ZAANSTAD", "NETHERLANDS"),
  ("ZABĪD", "YEMEN"),
  ("ZABOL", "IRAN"),
  ("ZABRZE", "POLAND"),
  ("ZABUL", "AFGHANISTAN"),
  ("ZACAPA", "GUATEMALA"),
  ("ZACATECAS", "MEXICO"),
  ("ZACHODNIO-POMORSKIE", "POLAND"),
  ("ZADAR", "CROATIA"),
  ("ZAGORA", "MOROCCO"),
  ("ZAGREB", "CROATIA"),
  ("ZAĠWAN", "TUNISIA"),
  ("ZAHEDAN", "IRAN"),
  ("ZAH̱Ū", "IRAQ"),
  ("ZAIRE", "ANGOLA"),
  ("ZAJEČAR", "SERBIA"),
  ("ZAKARPATS'KA", "UKRAINE"),
  ("ZAKA", "ZIMBABWE"),
  ("ZALA", "HUNGARY"),
  ("ZALANTUN", "CHINA"),
  ("ZAMA", "JAPAN"),
  ("ZAMBALES", "PHILIPPINES"),
  ("ZAMBEZIA", "MOZAMBIQUE"),
  ("ZAMBOANGA DEL NORTE", "PHILIPPINES"),
  ("ZAMBOANGA DEL SUR", "PHILIPPINES"),
  ("ZAMBOANGA", "PHILIPPINES"),
  ("ZAMFARA", "NIGERIA"),
  ("ZAMORA DE HIDALGO", "MEXICO"),
  ("ZAMORA", "SPAIN"),
  ("ZANJAN", "IRAN"),
  ("ZANZAN", "IVORY COAST"),
  ("ZANZIBAR AND PEMBA", "TANZANIA"),
  ("ZANZIBAR", "TANZANIA"),
  ("ZAOYANG", "CHINA"),
  ("ZAOZHUANG", "CHINA"),
  ("ZAPADNO-BAČKA", "SERBIA"),
  ("ZAPOPAN", "MEXICO"),
  ("ZAPORIZHZHYA", "UKRAINE"),
  ("ZAPORIZ'KA", "UKRAINE"),
  ("ZAQATALA", "AZERBAIJAN"),
  ("ZARAGOZA", "SPAIN"),
  ("ZARAND", "IRAN"),
  ("ZÁRATE", "ARGENTINA"),
  ("ZARIA", "NIGERIA"),
  ("ZAVHAN", "MONGOLIA"),
  ("ŽD'ÁR NAD SÁZAVOU", "CZECH REPUBLIC"),
  ("ZEELAND", "NETHERLANDS"),
  ("ZEFTA", "EGYPT"),
  ("ZENIČKO-DOBOJSKI", "BOSNIA AND HERZEGOVINA"),
  ("ZHALAINUOER", "CHINA"),
  ("ZHANGDIAN", "CHINA"),
  ("ZHANGHUÀ", "TAIWAN"),
  ("ZHANGJIAKOU", "CHINA"),
  ("ZHANGZHOU", "CHINA"),
  ("ZHANJIANG", "CHINA"),
  ("ZHAOCHENG", "CHINA"),
  ("ZHAODONG", "CHINA"),
  ("ZHAOQING", "CHINA"),
  ("ZHAOTONG", "CHINA"),
  ("ZHAOYANG", "CHINA"),
  ("ZHEJIANG", "CHINA"),
  ("ZHELEZNODOROZHNYY", "RUSSIA"),
  ("ZHENGZHOU", "CHINA"),
  ("ZHENJIANG", "CHINA"),
  ("ZHEZKAZGAN", "KAZAKHSTAN"),
  ("ZHICHENG", "CHINA"),
  ("ZHONGHÉ", "TAIWAN"),
  ("ZHONGLÌ", "TAIWAN"),
  ("ZHONGSHAN", "CHINA"),
  ("ZHOUCHENG", "CHINA"),
  ("ZHOUCUN", "CHINA"),
  ("ZHOUKOU", "CHINA"),
  ("ZHÚBĚI", "TAIWAN"),
  ("ZHUCHENG", "CHINA"),
  ("ZHÚDONG", "TAIWAN"),
  ("ZHUHAI", "CHINA"),
  ("ZHUJI", "CHINA"),
  ("ZHUKOVSKIY", "RUSSIA"),
  ("ZHUMADIAN", "CHINA"),
  ("ZHUNMEN", "CHINA"),
  ("ZHUOZHOU", "CHINA"),
  ("ZHUZHOU", "CHINA"),
  ("ZHYTOMYRS'KA", "UKRAINE"),
  ("ZHYTOMYR", "UKRAINE"),
  ("ZIELONA GÓRA", "POLAND"),
  ("ZIGONG", "CHINA"),
  ("ZIGUINCHOR", "SENEGAL"),
  ("ŽILINA", "SLOVAKIA"),
  ("ŽILINSKÝ", "SLOVAKIA"),
  ("ZINDER", "NIGER"),
  ("ZIPAQUIRÁ", "COLOMBIA"),
  ("ZIRO", "BURKINA FASO"),
  ("ZLATIBOR", "SERBIA"),
  ("ZLATOUST", "RUSSIA"),
  ("ZLÍN", "CZECH REPUBLIC"),
  ("ZLÍNSKÝ", "CZECH REPUBLIC"),
  ("ZNOJMO", "CZECH REPUBLIC"),
  ("ZOETERMEER", "NETHERLANDS"),
  ("ZOLLERNALBKREIS", "GERMANY"),
  ("ZOMBA RURAL", "MALAWI"),
  ("ZONAS NON DELIMITADAS", "ECUADOR"),
  ("ZONDOMA", "BURKINA FASO"),
  ("ZONGULDAK", "TURKEY"),
  ("ZOU", "BENIN"),
  ("ZOUNDWÉOGO", "BURKINA FASO"),
  ("ZOUXIAN", "CHINA"),
  ("Z̨UFAR", "OMAN"),
  ("ZUG", "SWITZERLAND"),
  ("ZUID-HOLLAND", "NETHERLANDS"),
  ("ZULIA", "VENEZUELA"),
  ("ZUNHEBOTO", "INDIA"),
  ("ZUNYI", "CHINA"),
  ("ZURICH", "SWITZERLAND"),
  ("ZÜRICH", "SWITZERLAND"),
  ("ZVIMBA", "ZIMBABWE"),
  ("ZVISHAVANE", "ZIMBABWE"),
  ("ZWICKAU", "GERMANY"),
  ("ZWOLLE", "NETHERLANDS")
);
$ME_LA_PopulousNonUSCitiesToCountry = TableScan("ME_LA_PopulousNonUSCitiesToCountry");
# Generated table for entries of inline dict 'Accessories_Electronics_Dict'
CreateTable(
  "Accessories_Electronics_Dict__TABLE",
  ("entry" => "Text"),
  ("camera pouch"),
  ("surge"),
  ("hdmi cable"),
  ("batteries"),
  ("chargers"),
  ("cables"),
  ("mounts"),
  ("a/v"),
  ("brackets"),
  ("remote"),
  ("3d"),
  ("surge protector"),
  ("cd"),
  ("cable"),
  ("camera cable"),
  ("digital photo frame"),
  ("digital frame"),
  ("dvd"),
  ("dvds"),
  ("cds")
);
CreateDict(
    "name" => "Accessories_Electronics_Dict",
    "table" => "Accessories_Electronics_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'AmbiguousVerbsDict'
CreateTable(
  "AmbiguousVerbsDict__TABLE",
  ("entry" => "Text"),
  ("wanna"),
  ("wana"),
  ("want to"),
  ("want 2"),
  ("wish"),
  ("wishes"),
  ("would"),
  ("could"),
  ("possibly"),
  ("probably"),
  ("apparently"),
  ("supposedly"),
  ("considering"),
  ("if I"),
  ("thinking about"),
  ("thinking of"),
  ("may be"),
  ("might"),
  ("feel like"),
  ("doubt it"),
  ("I think"),
  ("still thinks"),
  ("should be"),
  ("should have"),
  ("was dead set"),
  ("plan on"),
  ("almost"),
  ("with the idea")
);
CreateDict(
    "name" => "AmbiguousVerbsDict",
    "table" => "AmbiguousVerbsDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Auto_Brands_Dict'
CreateTable(
  "Auto_Brands_Dict__TABLE",
  ("entry" => "Text"),
  ("A4"),
  ("Accent"),
  ("Acclaim"),
  ("Accord"),
  ("Achieva"),
  ("Aerio"),
  ("Aerostar"),
  ("Alero"),
  ("Allante"),
  ("Alliance"),
  ("Altima"),
  ("Alto"),
  ("Amigo"),
  ("Aries"),
  ("Arnage"),
  ("Arrow"),
  ("Ascender"),
  ("Aspen"),
  ("Aspire"),
  ("Astro"),
  ("Aurora"),
  ("Austin"),
  ("Avalanche"),
  ("Avenger"),
  ("Aveo"),
  ("Aviator"),
  ("Axiom"),
  ("Axxess"),
  ("Aztek"),
  ("Azure"),
  ("Baja"),
  ("Barchetta"),
  ("Beetle"),
  ("Beretta"),
  ("Blackwood"),
  ("Blazer"),
  ("Bonneville"),
  ("Boxter"),
  ("Brat"),
  ("Brava"),
  ("Bravada"),
  ("Breeze"),
  ("Bronco"),
  ("Brooklands"),
  ("Brougham"),
  ("Caballero"),
  ("Cabrio"),
  ("Cabriolet"),
  ("Calais"),
  ("Camargue"),
  ("Camry"),
  ("Capri"),
  ("Caprice"),
  ("Caravan"),
  ("Caravelle"),
  ("Carry"),
  ("Catera"),
  ("Cavalier"),
  ("Cayenne"),
  ("Celica"),
  ("Century"),
  ("Challenger"),
  ("Champ"),
  ("Charade"),
  ("Charger"),
  ("Cherokee"),
  ("Chevelle"),
  ("Chevette"),
  ("Cheyenne"),
  ("Ciera"),
  ("Cimarron"),
  ("Cirrus"),
  ("Citation"),
  ("City"),
  ("Civic"),
  ("Club Wagon"),
  ("Colorado"),
  ("Colt"),
  ("Comanche"),
  ("Concord"),
  ("Concorde"),
  ("Conquest"),
  ("Continental"),
  ("Contour"),
  ("Cooper"),
  ("Cordia"),
  ("Cordoba"),
  ("Corniche"),
  ("Corolla"),
  ("Corrado"),
  ("Corsica"),
  ("Corvette"),
  ("Cougar"),
  ("Countach"),
  ("Courier"),
  ("Cressida"),
  ("Crown Victoria"),
  ("Cultus"),
  ("Cutlass"),
  ("Dakota"),
  ("Dart"),
  ("Dasher"),
  ("Daytona"),
  ("Defender"),
  ("del Sol"),
  ("DeVille"),
  ("Diablo"),
  ("Diamante"),
  ("Dino"),
  ("Diplomat"),
  ("Discovery"),
  ("DTS"),
  ("Durango"),
  ("Duster"),
  ("Dynasty"),
  ("Eagle"),
  ("Echo"),
  ("Eclipse"),
  ("Econoline"),
  ("Edge"),
  ("Eight"),
  ("Eighty-Eight"),
  ("Elantra"),
  ("ElCamino"),
  ("Eldorado"),
  ("Electra"),
  ("Element"),
  ("Encore"),
  ("Envoy"),
  ("Equinox"),
  ("Escalade"),
  ("Escape"),
  ("Escort"),
  ("Esperante"),
  ("Esprit"),
  ("Estate"),
  ("Esteem"),
  ("Eurovan"),
  ("Excel"),
  ("Expedition"),
  ("Explorer"),
  ("Expo"),
  ("Express"),
  ("Fairmont"),
  ("Festiva"),
  ("Fiero"),
  ("Fifth Avenue"),
  ("Firebird"),
  ("Firenza"),
  ("Fleetwood"),
  ("Flex Crossover"),
  ("Focus"),
  ("Forester"),
  ("Fox"),
  ("Freelander"),
  ("Frontier"),
  ("Fuego"),
  ("FX Suzuki"),
  ("Galant"),
  ("Golf"),
  ("Graduate"),
  ("Gran Fury"),
  ("Grand Am"),
  ("Grand Prix"),
  ("Grand Voyager"),
  ("Gremlin"),
  ("Grenada"),
  ("GTO"),
  ("Highlander"),
  ("Hombre"),
  ("Horizon"),
  ("Hornet"),
  ("Hummer"),
  ("Impala"),
  ("Imperial"),
  ("Impreza"),
  ("Impulse"),
  ("Insight"),
  ("Integra"),
  ("Intrepid"),
  ("Intrigue"),
  ("Javelin"),
  ("Jetta"),
  ("Jimmy"),
  ("Jimny"),
  ("Justy"),
  ("Karmann Ghia"),
  ("Khyber - Suzuki"),
  ("Kodiak"),
  ("Lagonda"),
  ("Lancer"),
  ("Land Cruiser"),
  ("Lanos"),
  ("Laser"),
  ("LeBaron"),
  ("Legacy"),
  ("Leganza"),
  ("Legend"),
  ("LeMans"),
  ("LeSabre"),
  ("Liberte"),
  ("Liberty"),
  ("Loyale"),
  ("Lumina"),
  ("Luv"),
  ("Lynx"),
  ("Malibu"),
  ("Mangusta"),
  ("Marquis"),
  ("Matador"),
  ("Matrix"),
  ("Maxima"),
  ("Medallion"),
  ("Mehran"),
  ("Metro"),
  ("Miata"),
  ("Midget"),
  ("Milano"),
  ("Millenia"),
  ("Mirada"),
  ("Mirage"),
  ("Modena"),
  ("Monaco"),
  ("Mondial"),
  ("Montana"),
  ("Monte Carlo"),
  ("Montero"),
  ("Monza"),
  ("Morris"),
  ("Mountaineer"),
  ("Mulsanne"),
  ("Murano"),
  ("Murcielago"),
  ("Mustang"),
  ("Mystique"),
  ("Navajo"),
  ("Navigator"),
  ("Neon"),
  ("New Yorker"),
  ("Newport"),
  ("Ninety-Eight"),
  ("Nova"),
  ("NSX"),
  ("Nubira"),
  ("Oasis"),
  ("Odyssey"),
  ("Omega"),
  ("Omni"),
  ("Optima"),
  ("Outback"),
  ("Outlander"),
  ("Pacer"),
  ("Pacifica"),
  ("Pajero"),
  ("Parisienne"),
  ("Park Avenue"),
  ("Park Ward"),
  ("Paseo"),
  ("Passat"),
  ("Passport"),
  ("Pathfinder"),
  ("Phaeton"),
  ("Phantom"),
  ("Phoenix"),
  ("Pilot"),
  ("Pinto"),
  ("Pivo"),
  ("Pininfarina"),
  ("Precis"),
  ("Prelude"),
  ("Premier"),
  ("Previa"),
  ("Prizm"),
  ("Probe"),
  ("Protégé"),
  ("Prowler"),
  ("Pruis"),
  ("PT Cruiser"),
  ("Pulsar"),
  ("Puyo"),
  ("Quadrifoglio"),
  ("Quantum"),
  ("Quattro"),
  ("Quest"),
  ("R8"),
  ("Rabbit"),
  ("Raider"),
  ("Ram"),
  ("Ramcharger"),
  ("Rampage"),
  ("Range Rover"),
  ("Ranger"),
  ("Reatta"),
  ("Rebel"),
  ("Regal"),
  ("Regency"),
  ("Reliant"),
  ("Reventon"),
  ("Rendezvous"),
  ("Rio"),
  ("Riviera"),
  ("Roadmaster"),
  ("Roadster"),
  ("Rocky"),
  ("Rodeo"),
  ("Sable"),
  ("Safari"),
  ("Safari"),
  ("Samuri"),
  ("Santa Fe"),
  ("Sapporo"),
  ("Savana"),
  ("Scamp"),
  ("Scirocco"),
  ("Scorpio"),
  ("Scrambler"),
  ("Sebring"),
  ("Sedona"),
  ("Sentra"),
  ("Sephia"),
  ("Sequoia"),
  ("Seville"),
  ("Shadow"),
  ("Sidekick"),
  ("Sienna"),
  ("Sierra"),
  ("Sigma"),
  ("Silhouette"),
  ("Silver Dawn"),
  ("Silver Seraph"),
  ("Silver Shadow"),
  ("Silver Spirit"),
  ("Silver Spur"),
  ("Silver Wraith"),
  ("Silverado"),
  ("Skyhawk"),
  ("Skylark"),
  ("Solara"),
  ("Somerset"),
  ("Sonata"),
  ("Sonoma"),
  ("Sorento"),
  ("Spectra"),
  ("Spectrum"),
  ("Sportage"),
  ("Sportvan"),
  ("Sprint"),
  ("Spyder"),
  ("St. Regis"),
  ("Stanza"),
  ("Starion"),
  ("Starlet"),
  ("Stealth"),
  ("Storm"),
  ("Strada"),
  ("Stratus"),
  ("Stylus"),
  ("Suburban"),
  ("Suburban"),
  ("Summit"),
  ("Sunbird"),
  ("Sundance"),
  ("Sunfire"),
  ("Supra"),
  ("Swift"),
  ("Tacoma"),
  ("Tahoe"),
  ("Talon"),
  ("Taurus"),
  ("Tempo"),
  ("Tercel"),
  ("Testarossa"),
  ("Thunderbird"),
  ("Tiburon"),
  ("Titan"),
  ("Topaz"),
  ("Toronado"),
  ("Touareg"),
  ("Town & Country"),
  ("Town Car"),
  ("tracker"),
  ("TrailBlazer"),
  ("Trans Sport"),
  ("Tredia"),
  ("Tribute"),
  ("Trooper"),
  ("Tundra"),
  ("Turbo"),
  ("Turismo"),
  ("UNO"),
  ("Uplander"),
  ("Vanagon"),
  ("Vandura"),
  ("Vanquish"),
  ("Vantage"),
  ("VehiCROSS"),
  ("Venture"),
  ("Vibe"),
  ("Vigor"),
  ("Villager"),
  ("Viper"),
  ("Virage"),
  ("Vision"),
  ("Vitara"),
  ("Volare"),
  ("Voyager"),
  ("Wagoneer"),
  ("Windstar"),
  ("Wrangler"),
  ("Xantia"),
  ("Xterra"),
  ("Yaris"),
  ("Yukon"),
  ("Zephyr"),
  ("Alfa Romeo 159"),
  ("Aston Martin DB9 Lexus"),
  ("Audi A4"),
  ("Audi A6"),
  ("Audi A6 Jaguar"),
  ("Audi A8"),
  ("Audi TT"),
  ("Austin Mini"),
  ("BMW 3 Series"),
  ("BMW 5 Series"),
  ("BMW 6 Series"),
  ("BMW M5 Dodge"),
  ("BMW X3"),
  ("BMW X5 Chevrolet"),
  ("BMW X6 Mid-size"),
  ("Bugatti Veyron"),
  ("Cadillac Escalade EXT"),
  ("Chevrolet Colorado"),
  ("Chevrolet Corvette"),
  ("Chevrolet Malibu"),
  ("Chevrolet Montana"),
  ("Chevrolet Silverado"),
  ("Chevrolet Suburban"),
  ("Chrysler 300"),
  ("Chrysler 300C"),
  ("Chrysler Town and Country"),
  ("Citroen C1"),
  ("Citroën C1 Main"),
  ("Citroen C3 Picasso"),
  ("Citroen C5 Toyota"),
  ("CR-V"),
  ("Daewoo Matiz"),
  ("Daihatsu Charade"),
  ("Daihatsu Terios"),
  ("Dodge Ram"),
  ("Dodge SRT-4"),
  ("Dodge Viper"),
  ("Ferrari 612 Scaglietti"),
  ("Ferrari Enzo"),
  ("Fiat 500"),
  ("Fiat Strada"),
  ("Ford Crown Victoria"),
  ("Ford Escape"),
  ("Ford Explorer"),
  ("Ford F-150"),
  ("Ford Fiesta"),
  ("Ford Focus"),
  ("Ford Galaxy"),
  ("Ford Ka"),
  ("Ford Mondeo"),
  ("Ford Mustang"),
  ("Ford Ranger"),
  ("GMC Sierra"),
  ("GTI"),
  ("Holden Barina"),
  ("Holden Commodore"),
  ("Honda Odyssey"),
  ("Honda S2000"),
  ("Honda S2000 Volkswagen"),
  ("Jaguar XF"),
  ("Jaguar XK"),
  ("Jaguar XK8 Main"),
  ("Jeep Grand Cherokee"),
  ("Jeep Liberty"),
  ("Lexus GS"),
  ("Lexus IS"),
  ("Lincoln LS"),
  ("Lincoln Town Car"),
  ("Lotus Elise"),
  ("Maserati Quattroporte"),
  ("Mazda MX-5"),
  ("Mercedes S-Class"),
  ("MG T"),
  ("Mini 4x4"),
  ("Mitsubishi Pajero iO"),
  ("Mitsubishi Triton"),
  ("Nissan Titan"),
  ("Opel Astra"),
  ("Opel Corsa"),
  ("Opel Insignia"),
  ("Opel Zafira"),
  ("Peugeot 107"),
  ("Pony"),
  ("Porsche 911"),
  ("Porsche Boxster"),
  ("Samsung L200 Digital Camera"),
  ("Škoda Roomster"),
  ("Smart Fortwo"),
  ("Suzuki Jimny"),
  ("Toyota Auris"),
  ("Toyota Corolla"),
  ("Toyota Crown"),
  ("Toyota Land Cruiser"),
  ("Toyota RAV4"),
  ("Volkswagen Eos"),
  ("Volkswagen Golf"),
  ("Volkswagen Passat"),
  ("Volkswagen Polo"),
  ("Volkswagen Touareg"),
  ("Volkswagen Touran"),
  ("Volvo C70"),
  ("Volvo S60"),
  ("Volvo S80")
);
CreateDict(
    "name" => "Auto_Brands_Dict",
    "table" => "Auto_Brands_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Auto_Cars_Dict'
CreateTable(
  "Auto_Cars_Dict__TABLE",
  ("entry" => "Text"),
  ("Acura"),
  ("Audi"),
  ("BMW"),
  ("Buick"),
  ("Cadillac"),
  ("Chevrolet"),
  ("Chrysler"),
  ("Dodge"),
  ("Eagle"),
  ("Ferrari"),
  ("Ford"),
  ("General Motors"),
  ("GM"),
  ("Global Electric Motorcars"),
  ("GMC"),
  ("Honda"),
  ("Hummer"),
  ("Hyundai"),
  ("Infiniti"),
  ("Isuzu"),
  ("Jaguar"),
  ("Jeep"),
  ("Kia Motors \t"),
  ("Kia"),
  ("Lamborghini"),
  ("Land Rover"),
  ("Lexus"),
  ("Lincoln"),
  ("Lotus"),
  ("Mazda"),
  ("Mercedes-Benz"),
  ("Mercedes Benz"),
  ("Mercury"),
  ("Mitsubishi Motors"),
  ("Nissan"),
  ("Oldsmobile"),
  ("Peugeot"),
  ("Pontiac"),
  ("Porsche"),
  ("Regal"),
  ("Saab"),
  ("Saturn"),
  ("Subaru"),
  ("Suzuki"),
  ("Toyota"),
  ("Volkswagen"),
  ("Volvo")
);
CreateDict(
    "name" => "Auto_Cars_Dict",
    "table" => "Auto_Cars_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Auto_Domain_Dict'
CreateTable(
  "Auto_Domain_Dict__TABLE",
  ("entry" => "Text"),
  ("car"),
  ("auto"),
  ("drive"),
  ("wheels"),
  ("ride"),
  ("suv"),
  ("minivan"),
  ("coupe"),
  ("Hatchback"),
  ("Compact"),
  ("sedan"),
  ("sports car"),
  ("hybrid"),
  ("station wagon"),
  ("rv"),
  ("convertible"),
  ("electric"),
  ("sport utility vehicle"),
  ("pickup"),
  ("truck"),
  ("jeep"),
  ("Road transport"),
  ("Car classification"),
  ("City car"),
  ("Full-size car"),
  ("Executive car"),
  ("Supermini"),
  ("Minivan"),
  ("Mini MPV"),
  ("Hatchback"),
  ("Compact car"),
  ("Family car"),
  ("permit"),
  ("driver"),
  ("license"),
  ("fees"),
  ("nav"),
  ("brake"),
  ("pads"),
  ("electric"),
  ("hybrid"),
  ("car"),
  ("sedan"),
  ("coupe"),
  ("sports car"),
  ("SUV"),
  ("station wagon"),
  ("RV"),
  ("convertible"),
  ("mini-van"),
  ("mini van"),
  ("sport utility vehicle"),
  ("pickup"),
  ("truck"),
  ("jeep"),
  ("van"),
  ("vehicle"),
  ("car"),
  ("truck"),
  ("automobile"),
  ("motorcycle"),
  ("bicycle"),
  ("tractor"),
  ("bike"),
  ("motor vehicle"),
  ("bus"),
  ("wagon"),
  ("carriage"),
  ("jeep"),
  ("engine"),
  ("lorry"),
  ("van"),
  ("train"),
  ("Chassis"),
  ("cart"),
  ("passenger car"),
  ("ambulance"),
  ("cab"),
  ("trailer"),
  ("military vehicle"),
  ("auto"),
  ("driver"),
  ("fire truck"),
  ("CORVETTE"),
  ("dump truck"),
  ("car finance"),
  ("sales"),
  ("cheap"),
  ("crash"),
  ("certified"),
  ("tips "),
  ("buying a car"),
  ("car buying"),
  ("auto "),
  ("purchas"),
  ("fuel "),
  ("efficiency"),
  ("models"),
  ("car shopping"),
  ("car safety"),
  ("auto buying"),
  ("vehicle history report"),
  ("kbb"),
  ("kelley blue book"),
  ("hertz"),
  ("mechanic"),
  ("truck"),
  ("cars"),
  ("car quest"),
  ("finance options"),
  ("eloan"),
  ("odometer"),
  ("auto loan"),
  ("warranty"),
  ("warranties"),
  ("extended warranty"),
  ("pick up truck"),
  ("experian"),
  ("equifax"),
  ("heavy equipment"),
  ("sports car"),
  ("extended warranty"),
  ("manufacturer warranty"),
  ("hatchback"),
  ("convertible"),
  ("wagon"),
  ("van"),
  ("crossover"),
  ("hybrid"),
  ("minivan"),
  ("luxury"),
  ("pickup"),
  ("cabrio"),
  ("4wd"),
  ("roadster"),
  ("compact"),
  ("kabriolet"),
  ("liftback"),
  ("cabriolet"),
  ("kombi"),
  ("bus"),
  ("offroad"),
  ("limo"),
  ("hatch"),
  ("limousine"),
  ("minibus"),
  ("multi purpose vehicle"),
  ("mid size car"),
  ("camper rv"),
  ("grand tourer"),
  ("crossover suv"),
  ("van camper"),
  ("hot hatch"),
  ("pony car"),
  ("station wagons"),
  ("sport utility vehicle"),
  ("grand saloon"),
  ("cargo vehicle"),
  ("car entry"),
  ("vehicle"),
  ("luxury car"),
  ("sports car")
);
CreateDict(
    "name" => "Auto_Domain_Dict",
    "table" => "Auto_Domain_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Auto_Parts_Dict'
CreateTable(
  "Auto_Parts_Dict__TABLE",
  ("entry" => "Text"),
  ("Stereo"),
  ("accelerator"),
  ("air bags"),
  ("air conditioner"),
  ("air filter"),
  ("air vent"),
  ("car alarm"),
  ("antenna"),
  ("anti-lock brakes"),
  ("armrest"),
  ("auto"),
  ("automatic transmission"),
  ("automobile"),
  ("car baby seat"),
  ("car seat"),
  ("back-up lights"),
  ("battery"),
  ("brake light"),
  ("brakes"),
  ("bumper"),
  ("camshaft"),
  ("carburetor"),
  ("chassis"),
  ("chrome trim"),
  ("clutch"),
  ("cooling system"),
  ("crankshaft"),
  ("cruise control"),
  ("dashboard"),
  ("defroster"),
  ("diesel engine"),
  ("differential"),
  ("dimmer switch"),
  ("door"),
  ("door handle"),
  ("drive shaft"),
  ("emergency brake"),
  ("emergency lights"),
  ("emissions"),
  ("engine"),
  ("exhaust system"),
  ("fan belt"),
  ("fender"),
  ("floor mats"),
  ("frame"),
  ("fuel"),
  ("fuel gauge"),
  ("fuse"),
  ("gas"),
  ("gas cap"),
  ("gasket"),
  ("gasoline"),
  ("gasoline engine"),
  ("gear stick"),
  ("gearbox"),
  ("gearshift"),
  ("glove compartment"),
  ("gps"),
  ("grille"),
  ("hand brake"),
  ("headlight"),
  ("heater"),
  ("high-beam headlight"),
  ("hood"),
  ("horn"),
  ("hubcaps"),
  ("hybrid"),
  ("ignition"),
  ("interior light"),
  ("internal combustion engine"),
  ("jack"),
  ("key"),
  ("license plates"),
  ("lock"),
  ("low-beam headlight"),
  ("lugs"),
  ("manifold"),
  ("manual transmission"),
  ("mat"),
  ("mirror"),
  ("motor"),
  ("mud flap"),
  ("muffler"),
  ("odometer"),
  ("oil"),
  ("oil filter"),
  ("parking lights"),
  ("passenger seat"),
  ("piston"),
  ("power brakes"),
  ("power steering"),
  ("radiator"),
  ("radio"),
  ("rear window defroster"),
  ("rear-view mirror"),
  ("rims"),
  ("car roof"),
  ("rotary engine"),
  ("seat"),
  ("seat bags"),
  ("shock absorber"),
  ("side mirrors"),
  ("spare tire"),
  ("spark plug"),
  ("speedometer"),
  ("steering wheel"),
  ("suspension"),
  ("tachometer"),
  ("tailgate"),
  ("thermometer"),
  ("tire"),
  ("trailer hitch"),
  ("trip computer"),
  ("trunk"),
  ("turbocharger"),
  ("turn signal"),
  ("unleaded gas"),
  ("vents"),
  ("visor"),
  ("wheel"),
  ("wheel well"),
  ("windshield"),
  ("windshield wiper"),
  ("wiper")
);
CreateDict(
    "name" => "Auto_Parts_Dict",
    "table" => "Auto_Parts_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'BAD_Dict'
CreateTable(
  "BAD_Dict__TABLE",
  ("entry" => "Text"),
  ("abject"),
  ("abominable"),
  ("abysmal"),
  ("adverse"),
  ("aggravated"),
  ("amiss"),
  ("annoying"),
  ("annoyed"),
  ("appaling"),
  ("arrant"),
  ("atrocious"),
  ("awful"),
  ("bad"),
  ("bad news"),
  ("badly"),
  ("badness"),
  ("baleful"),
  ("baneful"),
  ("barren"),
  ("beastly"),
  ("bitter"),
  ("blameworthy"),
  ("blemished"),
  ("bottom out"),
  ("bullshit"),
  ("shitty"),
  ("full of shit"),
  ("bummer"),
  ("careless"),
  ("cheap"),
  ("cheesy"),
  ("contaminated"),
  ("contrite"),
  ("corked"),
  ("corky"),
  ("corrupt"),
  ("counterfeit"),
  ("crappy"),
  ("crap"),
  ("criminal"),
  ("cruddy"),
  ("crummy"),
  ("damnable"),
  ("dangerous"),
  ("defective"),
  ("deficient"),
  ("degrading"),
  ("deleterious"),
  ("delinquent"),
  ("delitescent"),
  ("demeritorious"),
  ("demoralized"),
  ("deplorable"),
  ("depraved"),
  ("depressing"),
  ("despicable"),
  ("detestable"),
  ("detrimental"),
  ("dilapidated"),
  ("dire"),
  ("disadvantageous"),
  ("disagreeable"),
  ("discreditable"),
  ("disfunctional"),
  ("disgusting"),
  ("displeasing"),
  ("disreputable"),
  ("dissatisfactory"),
  ("dissolute"),
  ("distressed"),
  ("distressing"),
  ("disturbing"),
  ("downer"),
  ("dreadful"),
  ("dumb"),
  ("egregious"),
  ("erroneous"),
  ("evil"),
  ("excruciating"),
  ("execrable"),
  ("fallacious"),
  ("faulty"),
  ("fearful"),
  ("feeble"),
  ("felonious"),
  ("flagitious"),
  ("flagrant"),
  ("forged"),
  ("foul"),
  ("frightful"),
  ("garbage"),
  ("ghastly"),
  ("gnarly"),
  ("god-awful"),
  ("grave"),
  ("grievous"),
  ("grim"),
  ("gross"),
  ("grungy"),
  ("harmful"),
  ("hazardous"),
  ("heavy"),
  ("heinous"),
  ("high risk"),
  ("hopeless"),
  ("horrible"),
  ("horrid"),
  ("hurtful"),
  ("icky"),
  ("ignominious"),
  ("ill"),
  ("imitative"),
  ("unoriginal"),
  ("immoral"),
  ("imperfect"),
  ("improper"),
  ("inadequate"),
  ("inappropriate"),
  ("inarable"),
  ("inauspicious"),
  ("incompetent"),
  ("incorrect"),
  ("incorrigible"),
  ("ineffective"),
  ("infamous"),
  ("infelicitous"),
  ("inferior"),
  ("iniquitous"),
  ("injurious"),
  ("insecure"),
  ("invalid"),
  ("irreparable"),
  ("junky"),
  ("knavish"),
  ("lame"),
  ("lamentable"),
  ("lewd"),
  ("licentious"),
  ("lousy"),
  ("malevolent"),
  ("malfunctioning"),
  ("malicious"),
  ("malign"),
  ("malignant"),
  ("mediocre"),
  ("misbehaving"),
  ("misbehaviour"),
  ("mischevious"),
  ("mischievous"),
  ("miscreant"),
  ("mortal"),
  ("nasty"),
  ("naughty"),
  ("negative"),
  ("no good"),
  ("no-good"),
  ("nonfunctional"),
  ("nonstandard"),
  ("not good"),
  ("noxious"),
  ("obnoxious"),
  ("obscene"),
  ("odious"),
  ("offensive"),
  ("painful"),
  ("pernicious"),
  ("perverted"),
  ("pitiful"),
  ("poor quality"),
  ("prejudicial"),
  ("profligate"),
  ("putrid"),
  ("rancid"),
  ("raunchy"),
  ("reprehensible"),
  ("reprobate"),
  ("repulsive"),
  ("risky"),
  ("rough"),
  ("rubbish"),
  ("scuzzy"),
  ("severe"),
  ("shady"),
  ("shitty"),
  ("sinister"),
  ("sleazeball"),
  ("sleazy"),
  ("slipshod"),
  ("sordid"),
  ("spoiled"),
  ("spoilt"),
  ("squalid"),
  ("stale"),
  ("stinking"),
  ("sucks"),
  ("sucked"),
  ("stinky"),
  ("strange"),
  ("stupid"),
  ("stupidest"),
  ("substandard"),
  ("swingeing"),
  ("synthetic"),
  ("tainted"),
  ("terrible"),
  ("thumbs down"),
  ("tragic"),
  ("trash"),
  ("trouble"),
  ("troublesome"),
  ("unacceptable"),
  ("uncollectible"),
  ("uncomfortable"),
  ("undesirable"),
  ("unfavorable"),
  ("unfit"),
  ("unfortunate"),
  ("unhappy"),
  ("unhealthy"),
  ("unlucky"),
  ("unpleasant"),
  ("unprincipled"),
  ("unproductive"),
  ("unpropitious"),
  ("unredeemable"),
  ("unrighteous"),
  ("unsatisfactory"),
  ("unsavory"),
  ("unscrupulous"),
  ("unskilled"),
  ("unsound"),
  ("unspeakable"),
  ("unsuitable"),
  ("untimely"),
  ("untoward"),
  ("unwelcome"),
  ("unwholesome"),
  ("useless"),
  ("vicious"),
  ("vile"),
  ("villainous"),
  ("viperous"),
  ("vulgur"),
  ("wanton"),
  ("weak"),
  ("wicked"),
  ("the worst"),
  ("worthless"),
  ("wack")
);
CreateDict(
    "name" => "BAD_Dict",
    "table" => "BAD_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'BEAUTIFUL_Dict'
CreateTable(
  "BEAUTIFUL_Dict__TABLE",
  ("entry" => "Text"),
  ("admirable"),
  ("adorable"),
  ("agreeable"),
  ("alluring"),
  ("ambrosial"),
  ("angelic"),
  ("appealing"),
  ("attractive"),
  ("a babe"),
  ("beauteous"),
  ("beautiful"),
  ("beckoning"),
  ("bewitching"),
  ("captivating"),
  ("charming"),
  ("classy"),
  ("comely"),
  ("cute"),
  ("darling"),
  ("dazzling"),
  ("dear"),
  ("delectable"),
  ("delicate"),
  ("delicious"),
  ("delightful"),
  ("dishy"),
  ("divine"),
  ("dreamy"),
  ("elegant"),
  ("enchanting"),
  ("engaging"),
  ("enthralling"),
  ("enticing"),
  ("excellent"),
  ("exquisite"),
  ("fair"),
  ("fascinating"),
  ("fetching"),
  ("fine"),
  ("foxy"),
  ("glamorous"),
  ("good-looking"),
  ("gorgeous"),
  ("graceful"),
  ("grand"),
  ("handsome"),
  ("heavenly"),
  ("hot"),
  ("hunky"),
  ("ideal"),
  ("interesting"),
  ("inviting"),
  ("looker"),
  ("lovely"),
  ("luring"),
  ("luscious"),
  ("magnetic"),
  ("magnificent"),
  ("marvelous"),
  ("mesmeric"),
  ("nice"),
  ("pleasant"),
  ("pleasing"),
  ("precious"),
  ("prepossessing"),
  ("provocative"),
  ("pulchritudinous"),
  ("radiant"),
  ("ravishing"),
  ("refined"),
  ("resplendent"),
  ("seductive"),
  ("sexy"),
  ("shapely"),
  ("sightly"),
  ("splendid"),
  ("statuesque"),
  ("stunning"),
  ("suave"),
  ("sublime"),
  ("superb"),
  ("symmetrical"),
  ("sweet"),
  ("tantalizing"),
  ("teasing"),
  ("tempting"),
  ("well-formed"),
  ("winning"),
  ("winsome"),
  ("wonderful"),
  ("tight")
);
CreateDict(
    "name" => "BEAUTIFUL_Dict",
    "table" => "BEAUTIFUL_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'BL_Accomodations_Dict'
CreateTable(
  "BL_Accomodations_Dict__TABLE",
  ("entry" => "Text"),
  ("inn"),
  ("hotel"),
  ("motel"),
  ("motels"),
  ("inns"),
  ("bed and breakfast"),
  ("cottage"),
  ("cabins"),
  ("lodge"),
  ("spa"),
  ("cottages"),
  ("resort"),
  ("resorts"),
  ("suites")
);
CreateDict(
    "name" => "BL_Accomodations_Dict",
    "table" => "BL_Accomodations_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'BL_Fitness_Dict'
CreateTable(
  "BL_Fitness_Dict__TABLE",
  ("entry" => "Text"),
  ("fit"),
  ("fitness"),
  ("gym"),
  ("sports club"),
  ("yoga studio"),
  ("dance studio")
);
CreateDict(
    "name" => "BL_Fitness_Dict",
    "table" => "BL_Fitness_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'BL_FoodNonTypical_Dict'
CreateTable(
  "BL_FoodNonTypical_Dict__TABLE",
  ("entry" => "Text"),
  ("mcdonald's"),
  ("p.f. chang's"),
  ("wendy's"),
  ("applebee's"),
  ("mark hix food"),
  ("red robin"),
  ("starbucks"),
  ("jamba juice"),
  ("famous dave's"),
  ("quiznos"),
  ("taco bell"),
  ("subway"),
  ("pinkberry"),
  ("yogurtland")
);
CreateDict(
    "name" => "BL_FoodNonTypical_Dict",
    "table" => "BL_FoodNonTypical_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'BL_Food_Dict'
CreateTable(
  "BL_Food_Dict__TABLE",
  ("entry" => "Text"),
  ("restaurant"),
  ("bar"),
  ("grill"),
  ("cafe"),
  ("coffee"),
  ("burger"),
  ("burgers"),
  ("cuisine"),
  ("icecream"),
  ("teahouse"),
  ("coffeehouse"),
  ("steakhouse"),
  ("waffle"),
  ("taco"),
  ("tacos"),
  ("pizzeria"),
  ("pizza"),
  ("bakery"),
  ("deli"),
  ("bagels"),
  ("bagel"),
  ("cupcake"),
  ("cupcakes")
);
CreateDict(
    "name" => "BL_Food_Dict",
    "table" => "BL_Food_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'BL_Ignore_Dict'
CreateTable(
  "BL_Ignore_Dict__TABLE",
  ("entry" => "Text"),
  ("daily"),
  ("news"),
  ("blog"),
  ("list"),
  ("magazine"),
  ("paper"),
  ("source"),
  ("consultant"),
  ("column"),
  ("columnist"),
  ("leader"),
  ("expert"),
  ("author"),
  ("lover"),
  ("fan"),
  ("group"),
  ("groupies"),
  ("mag"),
  ("media"),
  ("week"),
  ("weekly"),
  ("month"),
  ("monthly"),
  ("guide"),
  ("expo"),
  ("market"),
  ("summit"),
  ("conference"),
  ("workshop"),
  ("festival"),
  ("convention"),
  ("the"),
  ("book"),
  ("jobs"),
  ("men"),
  ("man"),
  ("women"),
  ("woman"),
  ("facts"),
  ("journal"),
  ("casting"),
  ("ideas"),
  ("tips"),
  ("equipment"),
  ("goods"),
  ("you"),
  ("instructor"),
  ("_"),
  ("-"),
  ("events"),
  ("tweet")
);
CreateDict(
    "name" => "BL_Ignore_Dict",
    "table" => "BL_Ignore_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'BL_SalonAndSpa_Dict'
CreateTable(
  "BL_SalonAndSpa_Dict__TABLE",
  ("entry" => "Text"),
  ("salon"),
  ("spa"),
  ("nail"),
  ("nails")
);
CreateDict(
    "name" => "BL_SalonAndSpa_Dict",
    "table" => "BL_SalonAndSpa_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'BORING_Dict'
CreateTable(
  "BORING_Dict__TABLE",
  ("entry" => "Text"),
  ("abused"),
  ("addled"),
  ("archaic"),
  ("arid"),
  ("backward"),
  ("besotted"),
  ("big yawn"),
  ("blah"),
  ("blunt"),
  ("blunted"),
  ("boring"),
  ("brainless"),
  ("bromidic"),
  ("bummer"),
  ("characterless"),
  ("cloying"),
  ("colorless"),
  ("common"),
  ("commonplace"),
  ("daffy"),
  ("daft"),
  ("dead"),
  ("dense"),
  ("dim"),
  ("dim-witted"),
  ("dismal"),
  ("doltish"),
  ("drab"),
  ("drag"),
  ("dreary"),
  ("driveling"),
  ("drudging"),
  ("dry"),
  ("dull"),
  ("dumb"),
  ("edentate"),
  ("edentulate"),
  ("edgeless"),
  ("familiar"),
  ("feeble-minded"),
  ("flat"),
  ("hackneyed"),
  ("half-baked"),
  ("heavy"),
  ("ho hum"),
  ("hoary"),
  ("humdrum"),
  ("ignorant"),
  ("imbecilic"),
  ("indolent"),
  ("insensate"),
  ("insipid"),
  ("interminable"),
  ("irksome"),
  ("jejune"),
  ("lifeless"),
  ("longwinded"),
  ("low"),
  ("monotonous"),
  ("moronic"),
  ("moth-eaten"),
  ("mundane"),
  ("not bright"),
  ("not keen"),
  ("nothing"),
  ("nowhere"),
  ("numskulled"),
  ("obtuse"),
  ("oft-repeated"),
  ("ordinary"),
  ("out-of-date"),
  ("plain"),
  ("platitudinous"),
  ("plebeian"),
  ("pointless"),
  ("prolix"),
  ("prosaic"),
  ("prosy"),
  ("repetitious"),
  ("repetitive"),
  ("run-of-the-mill"),
  ("scatterbrained"),
  ("shallow"),
  ("simple"),
  ("simple-minded"),
  ("slow"),
  ("sluggish"),
  ("soporific"),
  ("spiritless"),
  ("square"),
  ("stale"),
  ("stereotyped"),
  ("stock"),
  ("stodgy"),
  ("stolid"),
  ("stuffy"),
  ("stupid"),
  ("tame"),
  ("tedious"),
  ("thick"),
  ("threadbare"),
  ("tired"),
  ("tiresome"),
  ("tiring"),
  ("toothless"),
  ("trite"),
  ("unexciting"),
  ("unimaginative"),
  ("uninspiring"),
  ("unintellectual"),
  ("unintelligent"),
  ("uninteresting"),
  ("unpointed"),
  ("unsharpened"),
  ("unvaried"),
  ("usual"),
  ("usual thing"),
  ("vacuous"),
  ("vapid"),
  ("wearisome"),
  ("well-worn"),
  ("witless"),
  ("worn out"),
  ("yawn"),
  ("yawning"),
  ("zero")
);
CreateDict(
    "name" => "BORING_Dict",
    "table" => "BORING_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Bday_FilterWordsDict'
CreateTable(
  "Bday_FilterWordsDict__TABLE",
  ("entry" => "Text"),
  ("to him"),
  ("to her"),
  ("to your"),
  ("to ur"),
  ("to you @"),
  ("to u @"),
  ("2 him"),
  ("2 her"),
  ("2 your"),
  ("2 ur"),
  ("2 you @"),
  ("2 u @"),
  ("on the"),
  ("for")
);
CreateDict(
    "name" => "Bday_FilterWordsDict",
    "table" => "Bday_FilterWordsDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'BelatedWishesDict'
CreateTable(
  "BelatedWishesDict__TABLE",
  ("entry" => "Text"),
  ("belated"),
  ("#belated"),
  ("late"),
  ("advance"),
  ("t wish"),
  ("t say"),
  ("wished @"),
  ("not my"),
  ("forgot to"),
  ("always forget")
);
CreateDict(
    "name" => "BelatedWishesDict",
    "table" => "BelatedWishesDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'BuyingIntentDict'
CreateTable(
  "BuyingIntentDict__TABLE",
  ("entry" => "Text"),
  ("contract"),
  ("made an offer"),
  ("make an offer"),
  ("making an offer"),
  ("made offer"),
  ("make offer"),
  ("making offer"),
  ("submit offer"),
  ("submitting offer"),
  ("submitted offer"),
  ("closing"),
  ("buy"),
  ("buying"),
  ("purchasing"),
  ("purchase"),
  ("shopping for"),
  ("acquiring"),
  ("acquire"),
  ("shop for"),
  ("shopping for"),
  ("buyer"),
  ("auction")
);
CreateDict(
    "name" => "BuyingIntentDict",
    "table" => "BuyingIntentDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Camera_Photo_Dict'
CreateTable(
  "Camera_Photo_Dict__TABLE",
  ("entry" => "Text"),
  ("polaroid"),
  ("instant film"),
  ("tripod"),
  ("tripod support"),
  ("tripod head"),
  ("camera"),
  ("nikon"),
  ("kodak"),
  ("olympus"),
  ("sony camera"),
  ("hoya"),
  ("lenmar"),
  ("sigma"),
  ("powershot"),
  ("flip"),
  ("cyber shot"),
  ("cyber-shot"),
  ("monopod"),
  ("binocular"),
  ("binoculars"),
  ("telescope"),
  ("telescopes"),
  ("lenses"),
  ("slr"),
  ("dslr"),
  ("photo camera"),
  ("Olympus Tough"),
  ("camcorder")
);
CreateDict(
    "name" => "Camera_Photo_Dict",
    "table" => "Camera_Photo_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Candidate_StrongKeywordsForPat2_IsMarriedDict'
CreateTable(
  "Candidate_StrongKeywordsForPat2_IsMarriedDict__TABLE",
  ("entry" => "Text"),
  ("dinner with"),
  ("lunch with"),
  ("brunch with"),
  ("breakfast with"),
  ("thanks to"),
  ("with my husband"),
  ("with my hubby"),
  ("with my wife"),
  ("with my wifey")
);
CreateDict(
    "name" => "Candidate_StrongKeywordsForPat2_IsMarriedDict",
    "table" => "Candidate_StrongKeywordsForPat2_IsMarriedDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Candidate_StrongKeywords_HasChildrenDict'
CreateTable(
  "Candidate_StrongKeywords_HasChildrenDict__TABLE",
  ("entry" => "Text"),
  ("my kids"),
  ("my children"),
  ("my child"),
  ("my son"),
  ("my daughter")
);
CreateDict(
    "name" => "Candidate_StrongKeywords_HasChildrenDict",
    "table" => "Candidate_StrongKeywords_HasChildrenDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Candidate_StrongKeywords_IsMarriedDict'
CreateTable(
  "Candidate_StrongKeywords_IsMarriedDict__TABLE",
  ("entry" => "Text"),
  ("my husband"),
  ("my wife"),
  ("my hubby"),
  ("my wifey")
);
CreateDict(
    "name" => "Candidate_StrongKeywords_IsMarriedDict",
    "table" => "Candidate_StrongKeywords_IsMarriedDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Children_GenericDict'
CreateTable(
  "Children_GenericDict__TABLE",
  ("entry" => "Text"),
  ("kids"),
  ("children"),
  ("babies"),
  ("baby"),
  ("child"),
  ("son"),
  ("daughter"),
  ("twins"),
  ("triplets")
);
CreateDict(
    "name" => "Children_GenericDict",
    "table" => "Children_GenericDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Clothing_Accessories_Dict'
CreateTable(
  "Clothing_Accessories_Dict__TABLE",
  ("entry" => "Text"),
  ("Fashion Scarves"),
  ("scareves"),
  ("scarf"),
  ("Wraps"),
  ("Pashminas"),
  ("shawl"),
  ("shawls"),
  ("Handbags"),
  ("handbag"),
  ("purse"),
  ("wallet"),
  ("Belts"),
  ("belt"),
  ("Sunglasses"),
  ("sunglass"),
  ("Bridal Veils"),
  ("veils"),
  ("bridal veil"),
  ("Hats"),
  ("Caps"),
  ("ties"),
  ("Neckties"),
  ("Cufflinks"),
  ("Wallets"),
  ("Money Clips"),
  ("blanket"),
  ("throw"),
  ("Gloves"),
  ("Mittens"),
  ("Caps"),
  ("cap"),
  ("Bibs"),
  ("Burp Cloths"),
  ("Receiving Blankets")
);
CreateDict(
    "name" => "Clothing_Accessories_Dict",
    "table" => "Clothing_Accessories_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Clothing_Dict'
CreateTable(
  "Clothing_Dict__TABLE",
  ("entry" => "Text"),
  ("jeans"),
  ("pant"),
  ("pants"),
  ("denim"),
  ("jean"),
  ("cloth"),
  ("clothing"),
  ("Shirts"),
  ("T-shirts"),
  ("V-neck"),
  ("tee"),
  ("tees"),
  ("Tanks"),
  ("Scoop neck"),
  ("Long sleeve"),
  ("Med Sleeve"),
  ("Strapped Tanks"),
  ("Inched Tanks"),
  ("Turtle Necks"),
  ("Tube tops"),
  ("Tunics"),
  ("Bottoms"),
  ("Flare jeans"),
  ("Cotton flare pants"),
  ("Bootcut"),
  ("Straight-leg"),
  ("Skinny"),
  ("Leggings"),
  ("Jeggings"),
  ("Capris"),
  ("Bermuda Shorts"),
  ("Hotpants"),
  ("Shorts"),
  ("Cuffed shorts"),
  ("skirts"),
  ("skirt"),
  ("skort"),
  ("dress"),
  ("dresses"),
  ("Legging"),
  ("Tops"),
  ("Sweaters"),
  ("Hoodies"),
  ("Active wear"),
  ("Dresses"),
  ("Jumpsuits"),
  ("Rompers"),
  ("Jeans"),
  ("Pants"),
  ("Capris"),
  ("Leggings"),
  ("Shorts"),
  ("Skirts"),
  ("sport coat"),
  ("coat"),
  ("coats"),
  ("underwear"),
  ("panties"),
  ("bra"),
  ("bras"),
  ("panty hose"),
  ("overalls"),
  ("robe"),
  ("robes"),
  ("tights"),
  ("shirt"),
  ("shirts"),
  ("button-down"),
  ("briefs"),
  ("boxers"),
  ("undershirts"),
  ("hoodie"),
  ("hoodies"),
  ("clothing set"),
  ("clothing sets"),
  ("rainwear"),
  ("raincoat"),
  ("snowwear"),
  ("jacket"),
  ("bloomers"),
  ("diaper covers"),
  ("bodysuit"),
  ("bodysuits"),
  ("one piece"),
  ("layette set"),
  ("layette sets"),
  ("layette"),
  ("leg warmer"),
  ("leg warmers"),
  ("Blazers"),
  ("Jackets"),
  ("Suits"),
  ("Blazer"),
  ("Jacket"),
  ("Suit"),
  ("Outerwear"),
  ("Coats"),
  ("Coat"),
  ("Sock"),
  ("Hosiery"),
  ("Sleep wear"),
  ("Lounge wear"),
  ("pajama"),
  ("pajamas"),
  ("pjs"),
  ("Intimates"),
  ("Swim wear"),
  ("Maternity wear")
);
CreateDict(
    "name" => "Clothing_Dict",
    "table" => "Clothing_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Computer_Accessories_Dict'
CreateTable(
  "Computer_Accessories_Dict__TABLE",
  ("entry" => "Text"),
  ("magic mouse"),
  ("magic trackpad"),
  ("wireless keyboard"),
  ("apple battery charger"),
  ("battery charger"),
  ("mouse"),
  ("mousepad"),
  ("keyboard"),
  ("mice"),
  ("webcam"),
  ("laptop screen"),
  ("screen"),
  ("display"),
  ("cable")
);
CreateDict(
    "name" => "Computer_Accessories_Dict",
    "table" => "Computer_Accessories_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'CongratulatoryKeywords.dict'
CreateTable(
  "CongratulatoryKeywords.dict__TABLE",
  ("entry" => "Text"),
  ("Congratulations"),
  ("Congrats"),
  ("Congo"),
  ("kongratulations"),
  ("kongrats"),
  ("kongo"),
  ("best wishes"),
  ("good luck"),
  ("gud luck"),
  ("all the best"),
  ("al da best"),
  ("all da best"),
  ("best of luck")
);
CreateDict(
    "name" => "CongratulatoryKeywords.dict",
    "table" => "CongratulatoryKeywords.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ConsolatoryDict'
CreateTable(
  "ConsolatoryDict__TABLE",
  ("entry" => "Text"),
  ("sorry about"),
  ("sorry bout"),
  ("feel bad")
);
CreateDict(
    "name" => "ConsolatoryDict",
    "table" => "ConsolatoryDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ContextualLocations.dict'
CreateTable(
  "ContextualLocations.dict__TABLE",
  ("entry" => "Text"),
  ("Home"),
  ("My Home"),
  ("My Home Office"),
  ("My HomeOffice"),
  ("My Home sweet home"),
  ("My home :)"),
  ("My home :D"),
  ("My Homey"),
  ("home sweet home"),
  ("studio"),
  ("area"),
  ("mall"),
  ("movie"),
  ("game"),
  ("beach"),
  ("birthday"),
  ("party"),
  ("work"),
  ("college"),
  ("school"),
  ("university"),
  ("airport"),
  ("station"),
  ("bathroom"),
  ("hell"),
  ("heaven"),
  ("Bath"),
  ("Meeting"),
  ("Club"),
  ("The Meeting"),
  ("The Club"),
  ("the top"),
  ("the library")
);
CreateDict(
    "name" => "ContextualLocations.dict",
    "table" => "ContextualLocations.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'EXCITING_Dict'
CreateTable(
  "EXCITING_Dict__TABLE",
  ("entry" => "Text"),
  ("agitative"),
  ("amazing"),
  ("animating"),
  ("appealing"),
  ("arousing"),
  ("arresting"),
  ("astonishing"),
  ("astounding"),
  ("awe-inspiring"),
  ("bad-ass"),
  ("bad ass"),
  ("bracing"),
  ("breathtaking"),
  ("commoving"),
  ("cool"),
  ("dramatic"),
  ("electrifying"),
  ("epic"),
  ("exciting"),
  ("exhilarant"),
  ("exhilarating"),
  ("extraordinary"),
  ("eye-popping"),
  ("far out"),
  ("fine"),
  ("flashy"),
  ("fun"),
  ("funnest"),
  ("groovy"),
  ("hair raising"),
  ("hair-raising"),
  ("heady"),
  ("heart stirring"),
  ("heart stopping"),
  ("hectic"),
  ("impelling"),
  ("impressive"),
  ("inspiring"),
  ("intelligent"),
  ("interesting"),
  ("intense"),
  ("intoxicating"),
  ("intriguing"),
  ("lively"),
  ("magnificent"),
  ("melodramatic"),
  ("mind-blowing"),
  ("moving"),
  ("moving"),
  ("neat"),
  ("overpowering"),
  ("overwhelming"),
  ("provocative"),
  ("racy"),
  ("rip roaring"),
  ("rocks"),
  ("rousing"),
  ("sensational"),
  ("showy"),
  ("spine tingling"),
  ("spine-tingling"),
  ("stimulating"),
  ("stirring"),
  ("stunning"),
  ("thrilling"),
  ("thrilling"),
  ("titillating"),
  ("wild"),
  ("zestful"),
  ("wicked")
);
CreateDict(
    "name" => "EXCITING_Dict",
    "table" => "EXCITING_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'FalsePositiveDict'
CreateTable(
  "FalsePositiveDict__TABLE",
  ("entry" => "Text"),
  ("offer"),
  ("call"),
  ("interview"),
  ("hunt"),
  ("hunting"),
  ("search"),
  ("well done"),
  ("done")
);
CreateDict(
    "name" => "FalsePositiveDict",
    "table" => "FalsePositiveDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'FatherKeywordsGenericDict'
CreateTable(
  "FatherKeywordsGenericDict__TABLE",
  ("entry" => "Text"),
  ("dad"),
  ("daddy"),
  ("father"),
  ("daddie"),
  ("#Happyfathersday"),
  ("dads"),
  ("daddys"),
  ("fathers"),
  ("daddies")
);
CreateDict(
    "name" => "FatherKeywordsGenericDict",
    "table" => "FatherKeywordsGenericDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'FathersDayFilterDict'
CreateTable(
  "FathersDayFilterDict__TABLE",
  ("entry" => "Text"),
  ("not a Father"),
  ("tell"),
  ("said"),
  ("say"),
  ("dont deserve"),
  ("wish me"),
  ("wished me"),
  ("have you"),
  ("have u"),
  ("not get"),
  ("to your"),
  ("to ur"),
  ("wish them"),
  ("I expect"),
  ("retweeting"),
  ("R.I.P"),
  ("rip"),
  ("expecting"),
  ("pregnant"),
  ("soon to be"),
  ("free entry")
);
CreateDict(
    "name" => "FathersDayFilterDict",
    "table" => "FathersDayFilterDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'FromLocationKeywordsDict'
CreateTable(
  "FromLocationKeywordsDict__TABLE",
  ("entry" => "Text"),
  ("from"),
  ("lived in"),
  ("leaving"),
  ("stay in"),
  ("left")
);
CreateDict(
    "name" => "FromLocationKeywordsDict",
    "table" => "FromLocationKeywordsDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'GOOD_Dict'
CreateTable(
  "GOOD_Dict__TABLE",
  ("entry" => "Text"),
  ("able"),
  ("acceptable"),
  ("accomplished"),
  ("ace"),
  ("adept"),
  ("adept"),
  ("admirable"),
  ("awesome"),
  ("adroit"),
  ("agreeable"),
  ("best"),
  ("bestest"),
  ("badass"),
  ("bad ass"),
  ("capable"),
  ("capable"),
  ("capital"),
  ("cute"),
  ("choice"),
  ("clever"),
  ("commendable"),
  ("compelling"),
  ("congenial"),
  ("crack"),
  ("deluxe"),
  ("dope"),
  ("dexterous"),
  ("efficient"),
  ("epic"),
  ("excellent"),
  ("exceptional"),
  ("expert"),
  ("favorite"),
  ("favorable"),
  ("first-class"),
  ("first-rate"),
  ("first rate"),
  ("gnarly"),
  ("good"),
  ("gratifying"),
  ("great"),
  ("honorable"),
  ("kicks ass"),
  ("ass-kicker"),
  ("kick ass"),
  ("marvelous"),
  ("neat"),
  ("nice"),
  ("pleasing"),
  ("positive"),
  ("precious"),
  ("prime"),
  ("proficient"),
  ("proper"),
  ("qualified"),
  ("rad"),
  ("reliable"),
  ("reputable"),
  ("satisfactory"),
  ("satisfying"),
  ("select"),
  ("serviceable"),
  ("shipshape"),
  ("skillful"),
  ("skillful"),
  ("spanking"),
  ("splendid"),
  ("sterling"),
  ("stupendous"),
  ("suitable"),
  ("suited"),
  ("sick"),
  ("super eminent"),
  ("superb"),
  ("superior"),
  ("talented"),
  ("thorough"),
  ("tip-top"),
  ("trustworthy"),
  ("trustworthy"),
  ("up to snuff"),
  ("useful"),
  ("valuable"),
  ("welcome"),
  ("wonderful"),
  ("worthy"),
  ("the bomb")
);
CreateDict(
    "name" => "GOOD_Dict",
    "table" => "GOOD_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Accountancy_Dict'
CreateTable(
  "HI_Accountancy_Dict__TABLE",
  ("entry" => "Text"),
  ("Account Collector"),
  ("Accountant"),
  ("Accounting Clerk"),
  ("Accounting Specialist"),
  ("Accounts Assistant"),
  ("Auditor"),
  ("Budget Accountant"),
  ("Certified Public Accountant"),
  ("Cost Accountant"),
  ("CPA Accountant"),
  ("Financial Accountant"),
  ("Internal Auditor"),
  ("Management Accountant"),
  ("Property Accountant"),
  ("Senior Accountant"),
  ("Systems Accountant"),
  ("Tax Accountant"),
  ("Tax Auditor"),
  ("Tax Collector"),
  ("Tax Examiner"),
  ("Tax Manager"),
  ("Tax Preparer")
);
CreateDict(
    "name" => "HI_Accountancy_Dict",
    "table" => "HI_Accountancy_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Accountancy_Hooks_Dict'
CreateTable(
  "HI_Accountancy_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("Tax Collector"),
  ("Accountant"),
  ("Accounting"),
  ("Auditor"),
  ("Tax"),
  ("Claims"),
  ("treasury")
);
CreateDict(
    "name" => "HI_Accountancy_Hooks_Dict",
    "table" => "HI_Accountancy_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_AutoServices_Dict'
CreateTable(
  "HI_AutoServices_Dict__TABLE",
  ("entry" => "Text"),
  ("car dealer"),
  ("auto service"),
  ("auto detailing"),
  ("auto sales"),
  ("tires"),
  ("auto glass"),
  ("auto transmission"),
  ("auto detailing")
);
CreateDict(
    "name" => "HI_AutoServices_Dict",
    "table" => "HI_AutoServices_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_BlueCollar_Hooks_Dict'
CreateTable(
  "HI_BlueCollar_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("welder"),
  ("truck driver")
);
CreateDict(
    "name" => "HI_BlueCollar_Hooks_Dict",
    "table" => "HI_BlueCollar_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_BusinessOwner_Hooks_Dict'
CreateTable(
  "HI_BusinessOwner_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("entrepreneur"),
  ("founder"),
  ("owner"),
  ("businessman")
);
CreateDict(
    "name" => "HI_BusinessOwner_Hooks_Dict",
    "table" => "HI_BusinessOwner_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Business_Hooks_Dict'
CreateTable(
  "HI_Business_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("entrepreneur"),
  ("entrepreneurs"),
  ("capital"),
  ("fundraising"),
  ("nonprofit"),
  ("profit")
);
CreateDict(
    "name" => "HI_Business_Hooks_Dict",
    "table" => "HI_Business_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Education_Dict'
CreateTable(
  "HI_Education_Dict__TABLE",
  ("entry" => "Text"),
  ("Agricultural Sciences Professor"),
  ("Anthropology Professor"),
  ("Archeology Professor"),
  ("Architecture Professor"),
  ("Art Professor"),
  ("Art Teacher"),
  ("BIO Professor"),
  ("Biology Professor"),
  ("Business Professor"),
  ("Chem professor"),
  ("Chemistry Professor"),
  ("chemistry teacher"),
  ("College counselor"),
  ("Communications Professor"),
  ("Computer Science Professor"),
  ("computer teacher"),
  ("Criminal Justice Professor"),
  ("CS Professor"),
  ("Cultural Studies Professor"),
  ("Deaf Students Teacher"),
  ("Disabled Students Teacher"),
  ("Drama Professor"),
  ("Drama Teacher"),
  ("Economics Professor"),
  ("Education Professor"),
  ("Elementary School Teacher"),
  ("Engineering Professor"),
  ("English Language Professor"),
  ("English Teacher"),
  ("Fitness Teacher"),
  ("Foreign Language Teacher"),
  ("Education Administrator"),
  ("Training Administrator"),
  ("Educational Administrator"),
  ("Educational Psychologist"),
  ("Educational Resource Coordinator"),
  ("Educational Therapist"),
  ("Forestry and Conservation Professor"),
  ("Geography Professor"),
  ("Geography Teacher"),
  ("High School Guidance Counselor"),
  ("High School Teacher"),
  ("History Professor"),
  ("History Teacher"),
  ("Home Economics Teacher"),
  ("Industrial Arts Teacher"),
  ("Instructor"),
  ("Kindergarten Teacher"),
  ("Language Teacher"),
  ("Law Professor"),
  ("Learning Support Assistant"),
  ("Lecturer"),
  ("Library Science Professor"),
  ("Literacy Teacher"),
  ("Literature Professor"),
  ("Math Professor"),
  ("Math Teacher"),
  ("Mentally Retarded Students Teacher"),
  ("Middle School Guidance Counselor"),
  ("Middle School Teacher"),
  ("Music Professor"),
  ("Music Teacher"),
  ("Nursing Professor"),
  ("Outdoor Education Teacher"),
  ("Philosophy and Religion Professor"),
  ("Philosophy Professor"),
  ("Physics Professor"),
  ("Political Science Professor"),
  ("Postsecondary Teacher"),
  ("Preschool Teacher"),
  ("Primary School Teacher"),
  ("Professor"),
  ("Psychology Professor"),
  ("Remedial Education Teacher"),
  ("Resource Teacher"),
  ("School Principal"),
  ("Science Teacher"),
  ("Secondary School Teacher"),
  ("Self-Enrichment Education Teacher"),
  ("social studies professor"),
  ("social studies teacher"),
  ("Social Work Professor"),
  ("Sociology Professor"),
  ("Supply Teacher"),
  ("Teacher"),
  ("Teacher Assistant"),
  ("Teacher of the Blind"),
  ("Teachers Aide"),
  ("Teachers-Self-Enrichment Education"),
  ("Teachers-Special Education"),
  ("Tutor"),
  ("Vocational Education Teacher")
);
CreateDict(
    "name" => "HI_Education_Dict",
    "table" => "HI_Education_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Education_Hooks_Dict'
CreateTable(
  "HI_Education_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("Teacher"),
  ("trainer"),
  ("professor"),
  ("counselor"),
  ("tutor"),
  ("instructor"),
  ("lecturer"),
  ("training"),
  ("educational")
);
CreateDict(
    "name" => "HI_Education_Hooks_Dict",
    "table" => "HI_Education_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Engineering_Hooks_Dict'
CreateTable(
  "HI_Engineering_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("HVAC"),
  ("Engineer")
);
CreateDict(
    "name" => "HI_Engineering_Hooks_Dict",
    "table" => "HI_Engineering_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Finance_Hooks_Dict'
CreateTable(
  "HI_Finance_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("teller"),
  ("investment"),
  ("investors"),
  ("investing"),
  ("investor"),
  ("business"),
  ("stock"),
  ("broker"),
  ("trader"),
  ("trade"),
  ("trades"),
  ("funding"),
  ("market"),
  ("money"),
  ("business"),
  ("forex"),
  ("banking"),
  ("nasdaq"),
  ("financial"),
  ("bank"),
  ("bank manager"),
  ("controller"),
  ("payroll"),
  ("finance manager"),
  ("Insurance"),
  ("finance"),
  ("regulatory"),
  ("mortgage"),
  ("fund"),
  ("credit"),
  ("pricing"),
  ("compliance"),
  ("operational risk"),
  ("wealth"),
  ("capital"),
  ("pcs"),
  ("trust")
);
CreateDict(
    "name" => "HI_Finance_Hooks_Dict",
    "table" => "HI_Finance_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Food_Hooks_Dict'
CreateTable(
  "HI_Food_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("caterer"),
  ("baker"),
  ("restaurant"),
  ("chef"),
  ("waiter"),
  ("bartender"),
  ("steakhouse")
);
CreateDict(
    "name" => "HI_Food_Hooks_Dict",
    "table" => "HI_Food_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Health_Hooks_Dict'
CreateTable(
  "HI_Health_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("Cardiolog"),
  ("clinical"),
  ("Dentist"),
  ("dental"),
  ("dentistry"),
  ("Dermatologist"),
  ("Dietitian"),
  ("Doctor"),
  ("nurse"),
  ("Hematolog"),
  ("patient"),
  ("Ambulatory"),
  ("Emergency"),
  ("Gynecologist"),
  ("gynecology"),
  ("Health"),
  ("Health Care"),
  ("Hospital"),
  ("Medical"),
  ("Nutritionist"),
  ("Obstetrician"),
  ("Odontologist"),
  ("Oncologist"),
  ("oncology"),
  ("Ophthalmologist"),
  ("ophtalomology"),
  ("OBGYN"),
  ("Optometrist"),
  ("optomoetry"),
  ("Orthodontist"),
  ("Paramedic"),
  ("Pathologist"),
  ("Pediatric"),
  ("pediatry"),
  ("podriaty"),
  ("physical therapy"),
  ("physical therapist"),
  ("Personal Trainer"),
  ("Pharmacist"),
  ("Primary Care"),
  ("Plastic Surgeons"),
  ("Plastic Surgery"),
  ("Plastic Surgeon"),
  ("Physician"),
  ("Physiologist"),
  ("Physiotherapist"),
  ("Practitioner"),
  ("Psychiatrist"),
  ("Psychologist"),
  ("Radiologist"),
  ("Surgeon"),
  ("Therapist"),
  ("Veterinarian")
);
CreateDict(
    "name" => "HI_Health_Hooks_Dict",
    "table" => "HI_Health_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_HomeServices_Dict'
CreateTable(
  "HI_HomeServices_Dict__TABLE",
  ("entry" => "Text"),
  ("carpet cleaing"),
  ("handyman"),
  ("air conditioning"),
  ("housecleaning"),
  ("painting"),
  ("plumbing"),
  ("remodeling"),
  ("roofing"),
  ("fireplaces"),
  ("appliance"),
  ("cabinets"),
  ("chimney"),
  ("driveway"),
  ("windows"),
  ("home security systems"),
  ("insulation"),
  ("hardwood floor"),
  ("carpeting"),
  ("house cleaning"),
  ("home lighting"),
  ("plastering"),
  ("roof cleaning"),
  ("siding"),
  ("windows treatment")
);
CreateDict(
    "name" => "HI_HomeServices_Dict",
    "table" => "HI_HomeServices_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_ITInternet_Dict'
CreateTable(
  "HI_ITInternet_Dict__TABLE",
  ("entry" => "Text"),
  ("Action Script Programmer"),
  ("Adobe Photoshop Illustrator"),
  ("Ajax"),
  ("ASP Developer"),
  ("C# Developer"),
  ("codemonkey"),
  ("code monkey"),
  ("CAD Technician"),
  ("Cisco Engineer"),
  ("Computer Aided Design Technician"),
  ("Computer and Information Systems Manager"),
  ("Computer Applications Engineer"),
  ("Computer Artist"),
  ("Computer Control Programmer"),
  ("Computer Customer Support Specialist"),
  ("Computer Game Designer"),
  ("Computer Graphics Designer"),
  ("Computer Hardware Engineer"),
  ("Computer Hardware Technician"),
  ("Computer Information Manager"),
  ("Computer Information Technician"),
  ("Computer Manager"),
  ("Computer Operator"),
  ("Computer Programmer"),
  ("Computer Scientist"),
  ("Computer Security Specialist"),
  ("Computer Software Engineer"),
  ("Computer Software Technician"),
  ("Computer Systems Analyst"),
  ("Computer Systems Engineer"),
  ("Computer Systems Manager"),
  ("CSS Programmer"),
  ("c++ developer"),
  ("c++ programmer"),
  ("Data Analyst"),
  ("Data Communications Analyst"),
  ("Data Communications Technician"),
  ("Data Management Analyst"),
  ("Data Modeler"),
  ("Data Technician"),
  ("Database administrator"),
  ("Database Developer"),
  ("Database Programmer"),
  ("Desktop publisher"),
  ("Desktop Publishing Specialist"),
  ("Desktop Technician"),
  ("Developer"),
  ("Digital Artist"),
  ("Flash Developer"),
  ("Game Designer"),
  ("Game Technician"),
  ("Graphic Designer"),
  ("HTML Developer"),
  ("HTML Programmer"),
  ("HVAC Systems Technician"),
  ("Information Architect"),
  ("Information Scientist"),
  ("Information Technology Manager"),
  ("Internet Solutions Developer"),
  ("IT Analyst"),
  ("IT Consultant"),
  ("IT Coordinator"),
  ("IT Developer"),
  ("IT Engineer"),
  ("IT Manager"),
  ("IT Project Manager"),
  ("IT Technician"),
  ("Java Developer"),
  ("Java Developer"),
  ("Java programmer"),
  ("LAN Administrator"),
  ("Linux Programmer"),
  ("Mastercam Programmer"),
  ("Microsoft Access Database Specialist"),
  ("Microsoft Certified Database Administrator"),
  ("Microsoft Certified Professional"),
  ("Net Developer"),
  ("Network Engineering Technician"),
  ("Networking manager"),
  ("Networking technician"),
  ("NOC Technician"),
  ("Online Marketing Manager"),
  ("Oracle Database Administrator"),
  ("Oracle Database Specialist"),
  ("PC Network Administrator"),
  ("PeopleSoft Programmer"),
  ("Personal computer support technician"),
  ("PHP Developer"),
  ("Programmer"),
  ("Senior Developer"),
  ("Senior Oracle Developer"),
  ("Senior Web Developer"),
  ("SEO Consultant"),
  ("SEO Executive"),
  ("Server Technology Manager"),
  ("Software Developer"),
  ("Software Engineer"),
  ("SQL Developer"),
  ("SQL Programmer"),
  ("Sun Certified Java Programmer"),
  ("Support Analyst"),
  ("System Administrator"),
  ("System analyst"),
  ("Systems technician"),
  ("Technical Analyst"),
  ("Technical Assistant"),
  ("Technical Development Manager"),
  ("Technical manager"),
  ("Technical Service Support Manager"),
  ("Technical support manager"),
  ("Test Analyst"),
  ("Unix System Administrator"),
  ("Video game programmer"),
  ("Web Art Director"),
  ("Web designer"),
  ("Web Developer"),
  ("Web Specialist"),
  ("Webmaster"),
  ("Website Administrator"),
  ("Website Coder")
);
CreateDict(
    "name" => "HI_ITInternet_Dict",
    "table" => "HI_ITInternet_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_IT_Hooks_Dict'
CreateTable(
  "HI_IT_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("codemonkey"),
  ("code monkey"),
  ("technician"),
  ("programmer"),
  ("developer"),
  ("development"),
  ("coder"),
  ("testing"),
  ("test"),
  ("system"),
  ("webmaster"),
  ("web"),
  ("website"),
  ("software"),
  ("network"),
  ("database"),
  ("IT"),
  ("computer"),
  ("internet"),
  ("data"),
  ("hardware"),
  ("java"),
  ("c++"),
  ("oracle"),
  ("db2"),
  ("SQL"),
  ("SEO"),
  ("PHP"),
  ("HVAC"),
  ("desktop"),
  ("CAD")
);
CreateDict(
    "name" => "HI_IT_Hooks_Dict",
    "table" => "HI_IT_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Law_Hooks_Dict'
CreateTable(
  "HI_Law_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("Investigator"),
  ("Lawyer"),
  ("Patrol"),
  ("Officer"),
  ("Law"),
  ("Crime"),
  ("Sheriff"),
  ("Attorney"),
  ("Judicial"),
  ("Jurist"),
  ("Justice"),
  ("Parole"),
  ("Legal"),
  ("Legislative"),
  ("Magistrate"),
  ("Mediator"),
  ("Paralegal"),
  ("Detective"),
  ("Police"),
  ("Enforcement")
);
CreateDict(
    "name" => "HI_Law_Hooks_Dict",
    "table" => "HI_Law_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Legal_Dict'
CreateTable(
  "HI_Legal_Dict__TABLE",
  ("entry" => "Text"),
  ("lawyers"),
  ("Arson Investigator"),
  ("Bankruptcy Lawyer"),
  ("Business Lawyer"),
  ("California Highway Patrol Officer"),
  ("Casino Security Officer"),
  ("Claims Handler"),
  ("Commercial Real Estate Law"),
  ("Commercial Solicitor"),
  ("Constitutional Lawyer"),
  ("Contract Lawyer"),
  ("Copyright Lawyer"),
  ("Corporate Lawyer"),
  ("Corrections Worker"),
  ("County Corrections Officer"),
  ("County Juvenile Authority"),
  ("County Probations Officer"),
  ("Court Administration"),
  ("Court Bailiff"),
  ("Court Clerk"),
  ("Court Interpreter"),
  ("Court Recorder"),
  ("Court Reporter"),
  ("Court Stenographer"),
  ("Court Transcriptionist"),
  ("Crime Lab Assistant"),
  ("Crime Lab Technologist"),
  ("Crime Laboratory Analyst"),
  ("Crime Scene Investigation"),
  ("Criminal Lawyer"),
  ("Deputy Sheriff"),
  ("District Court Judge"),
  ("Divorce Lawyer"),
  ("Environmental Lawyer"),
  ("Evidence Technician"),
  ("Family Law Specialist Career Profile"),
  ("Family Lawyer"),
  ("Family Solicitor"),
  ("Federal Corrections Worker"),
  ("Fire Fighter"),
  ("Fire Inspector"),
  ("Foreclosure Lawyer"),
  ("Forensic Engineer"),
  ("Health Care Lawyer"),
  ("Healthcare Attorney"),
  ("Highway Patrol Officer"),
  ("Human Rights Lawyer"),
  ("Immigration Lawyer"),
  ("International Law Professional"),
  ("International Lawyer"),
  ("Judicial Worker"),
  ("Jurist"),
  ("Justice of the Peace"),
  ("Juvenile Parole Officer"),
  ("Law Enforcement Manager"),
  ("Lawyer"),
  ("Legal Administrative Professional"),
  ("Legal aid"),
  ("Legal Assistant"),
  ("Legal Executive Assistant"),
  ("Legal File Clerk"),
  ("Legal Secretary"),
  ("Legal Secretary"),
  ("Legal Transcriptionist"),
  ("Legislative Assistant"),
  ("Lemon Law Attorney"),
  ("Litigation Attorney"),
  ("Loss Prevention Security Officer"),
  ("Magistrate"),
  ("Mediator"),
  ("Medical Law Attorney"),
  ("Paralegal"),
  ("Patent Attorney"),
  ("Patent Lawyer"),
  ("Police Detective"),
  ("Police Dispatcher"),
  ("Policeman"),
  ("Probate Lawyer"),
  ("Public Security Administrator"),
  ("Publishing Law Attorney"),
  ("Real Estate Lawyer"),
  ("Scopist"),
  ("Senior Partner"),
  ("Sheriff"),
  ("Solicitor"),
  ("Tax Lawyer"),
  ("Transit Police Officer"),
  ("US Drug Enforcement Administrator"),
  ("Water Rights Lawyer"),
  ("Yo2uth Correction Officer")
);
CreateDict(
    "name" => "HI_Legal_Dict",
    "table" => "HI_Legal_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Management_Hooks_Dict'
CreateTable(
  "HI_Management_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("Administrative"),
  ("Manager"),
  ("Appraiser"),
  ("Retail"),
  ("Executive")
);
CreateDict(
    "name" => "HI_Management_Hooks_Dict",
    "table" => "HI_Management_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Marketing_Dict'
CreateTable(
  "HI_Marketing_Dict__TABLE",
  ("entry" => "Text"),
  ("Advertising"),
  ("Advertising Manager"),
  ("Brand Manager"),
  ("Communications Manager"),
  ("Copywriter"),
  ("Field Sales"),
  ("Financial Services Sales Agent"),
  ("Insurance Sales Agent"),
  ("Market Research"),
  ("Market Research Analyst"),
  ("Market Researcher"),
  ("Marketing Assistant"),
  ("Marketing Manager"),
  ("Media Sales"),
  ("Online Marketing"),
  ("PR Manager"),
  ("Public Relations Manager"),
  ("Public Relations Officer"),
  ("Public Relations Specialist"),
  ("Sales Account Manager"),
  ("Sales Consultant"),
  ("Sales Director"),
  ("Sales Executive"),
  ("Sales Manager"),
  ("Sales Promoter"),
  ("Sales Representative"),
  ("Sales Team Manager"),
  ("Salesman"),
  ("Salesperson"),
  ("Technical Sales"),
  ("Telesales")
);
CreateDict(
    "name" => "HI_Marketing_Dict",
    "table" => "HI_Marketing_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Marketing_Hooks_Dict'
CreateTable(
  "HI_Marketing_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("Advertising"),
  ("Brand Manager"),
  ("Copywriter"),
  ("Sales"),
  ("Sales Agent"),
  ("Market Research"),
  ("Market Researcher"),
  ("Marketing"),
  ("PR"),
  ("Public Relations"),
  ("Salesman"),
  ("Salesperson")
);
CreateDict(
    "name" => "HI_Marketing_Hooks_Dict",
    "table" => "HI_Marketing_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Media_Hooks_Dict'
CreateTable(
  "HI_Media_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("Actor"),
  ("Artist"),
  ("choreographer"),
  ("Lyricist"),
  ("composer"),
  ("entertainer"),
  ("Singer"),
  ("Architect"),
  ("Blogger"),
  ("Broadcaster"),
  ("Dancer"),
  ("Designer"),
  ("director"),
  ("Editor"),
  ("Journalist"),
  ("Model"),
  ("Painter"),
  ("Photographer"),
  ("Producer"),
  ("Production"),
  ("Reporter"),
  ("Writer"),
  ("performer"),
  ("art"),
  ("media"),
  ("DJ"),
  ("author"),
  ("columnist"),
  ("curator"),
  ("Disc Jockey"),
  ("I make films"),
  ("I make movies")
);
CreateDict(
    "name" => "HI_Media_Hooks_Dict",
    "table" => "HI_Media_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Military_Hooks_Dict'
CreateTable(
  "HI_Military_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("Army"),
  ("Navy"),
  ("Air Force"),
  ("Marine"),
  ("Soldier")
);
CreateDict(
    "name" => "HI_Military_Hooks_Dict",
    "table" => "HI_Military_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_NonIT_Engineer_Dict'
CreateTable(
  "HI_NonIT_Engineer_Dict__TABLE",
  ("entry" => "Text"),
  ("HVAC"),
  ("Mechanical"),
  ("Nuclear"),
  ("Civil"),
  ("Naval")
);
CreateDict(
    "name" => "HI_NonIT_Engineer_Dict",
    "table" => "HI_NonIT_Engineer_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_RealEstate_Dict'
CreateTable(
  "HI_RealEstate_Dict__TABLE",
  ("entry" => "Text"),
  ("Realty"),
  ("realtor"),
  ("realtors"),
  ("rental listing"),
  ("rental listings"),
  ("home listing"),
  ("home listings"),
  ("estate"),
  ("housing"),
  ("home owners"),
  ("home buyers"),
  ("sell your home"),
  ("home sales"),
  ("residential"),
  ("commercial properties"),
  ("commercial property")
);
CreateDict(
    "name" => "HI_RealEstate_Dict",
    "table" => "HI_RealEstate_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Recruit_Hooks_Dict'
CreateTable(
  "HI_Recruit_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("Headhunter"),
  ("Recruitment"),
  ("HR"),
  ("Human Resource"),
  ("Recruit"),
  ("Business Develop")
);
CreateDict(
    "name" => "HI_Recruit_Hooks_Dict",
    "table" => "HI_Recruit_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Retired_Dict'
CreateTable(
  "HI_Retired_Dict__TABLE",
  ("entry" => "Text"),
  ("retired")
);
CreateDict(
    "name" => "HI_Retired_Dict",
    "table" => "HI_Retired_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HI_Sports_Hooks_Dict'
CreateTable(
  "HI_Sports_Hooks_Dict__TABLE",
  ("entry" => "Text"),
  ("athlete"),
  ("coach"),
  ("olympic"),
  ("fitness")
);
CreateDict(
    "name" => "HI_Sports_Hooks_Dict",
    "table" => "HI_Sports_Hooks_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_Baseball_Alias_Dict'
CreateTable(
  "H_Baseball_Alias_Dict__TABLE",
  ("entry" => "Text"),
  ("Orioles"),
  ("Red Sox"),
  ("Yankees"),
  ("White Sox"),
  ("Rangers"),
  ("Marlins"),
  ("Mets"),
  ("Cardinals"),
  ("Diamondbacks"),
  ("Dodgers"),
  ("Giants")
);
CreateDict(
    "name" => "H_Baseball_Alias_Dict",
    "table" => "H_Baseball_Alias_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_Baseball_Ambig_Alias_Dict'
CreateTable(
  "H_Baseball_Ambig_Alias_Dict__TABLE",
  ("entry" => "Text"),
  ("Rays"),
  ("Mariners"),
  ("Braves"),
  ("Phillies"),
  ("Astros"),
  ("Rockies"),
  ("Dodgers"),
  ("Padres")
);
CreateDict(
    "name" => "H_Baseball_Ambig_Alias_Dict",
    "table" => "H_Baseball_Ambig_Alias_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_Baseball_Dict'
CreateTable(
  "H_Baseball_Dict__TABLE",
  ("entry" => "Text"),
  ("Baltimore Orioles"),
  ("Boston Red Sox"),
  ("New York Yankees"),
  ("NY Yankees"),
  ("N.Y. Yankees"),
  ("Tampa Bay Rays"),
  ("Toronto Blue Jays"),
  ("Chicago White Sox"),
  ("Cleveland Indians"),
  ("Detroit Tigers"),
  ("Kansas City Royals"),
  ("Minnesota Twins"),
  ("Los Angeles Angels"),
  ("L.A. Angels"),
  ("Oakland Athletics"),
  ("Seattle Mariners"),
  ("Texas Rangers"),
  ("Atlanta Braves"),
  ("Florida Marlins"),
  ("New York Mets"),
  ("NY Mets"),
  ("N.Y. Mets"),
  ("Philadelphia Phillies"),
  ("Washington Nationals"),
  ("Chicago Cubs"),
  ("Cincinnati Reds"),
  ("Houston Astros"),
  ("Milwaukee Brewers"),
  ("Pittsburgh Pirates"),
  ("Louis Cardinals"),
  ("Arizona Diamondbacks"),
  ("Colorado Rockies"),
  ("Los Angeles Dodgers"),
  ("L.A. Dodgers"),
  ("San Diego Padres"),
  ("San Francisco Giants"),
  ("SF Giants"),
  ("S.F. Giants")
);
CreateDict(
    "name" => "H_Baseball_Dict",
    "table" => "H_Baseball_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_Baseball_Hashes_Dict'
CreateTable(
  "H_Baseball_Hashes_Dict__TABLE",
  ("entry" => "Text"),
  ("#orioles"),
  ("#yankees"),
  ("#tampabayrays"),
  ("#bluejays"),
  ("#clevelandindians"),
  ("#cleveland#indians"),
  ("#dbacks"),
  ("#giants"),
  ("#sfgiants"),
  ("#seattlemariners"),
  ("#cardinals"),
  ("#dodgers")
);
CreateDict(
    "name" => "H_Baseball_Hashes_Dict",
    "table" => "H_Baseball_Hashes_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_Baseball_Unique_Dict'
CreateTable(
  "H_Baseball_Unique_Dict__TABLE",
  ("entry" => "Text"),
  ("Baltimore Orioles"),
  ("Boston Red Sox"),
  ("Yankees"),
  ("Tampa Bay Rays"),
  ("Toronto Blue Jays"),
  ("Chicago White Sox"),
  ("Cleveland Indians"),
  ("Detroit Tigers"),
  ("Kansas City Royals"),
  ("Minnesota Twins"),
  ("Los Angeles Angels"),
  ("Oakland Athletics"),
  ("Seattle Mariners"),
  ("Texas Rangers"),
  ("Atlanta Braves"),
  ("Florida Marlins"),
  ("Mets"),
  ("Philadelphia Phillies"),
  ("Washington Nationals"),
  ("Chicago Cubs"),
  ("Cincinnati Reds"),
  ("Houston Astros"),
  ("Milwaukee Brewers"),
  ("Pittsburgh Pirates"),
  ("Louis Cardinals"),
  ("Arizona Diamondbacks"),
  ("Colorado Rockies"),
  ("Dodgers"),
  ("San Diego Padres"),
  ("Giants")
);
CreateDict(
    "name" => "H_Baseball_Unique_Dict",
    "table" => "H_Baseball_Unique_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_Cars_Dict'
CreateTable(
  "H_Cars_Dict__TABLE",
  ("entry" => "Text"),
  ("car"),
  ("cars"),
  ("drive"),
  ("driving")
);
CreateDict(
    "name" => "H_Cars_Dict",
    "table" => "H_Cars_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_Dance_Dict'
CreateTable(
  "H_Dance_Dict__TABLE",
  ("entry" => "Text"),
  ("Boogie-woogie"),
  ("Chicago stepping"),
  ("Detroit Ballroom"),
  ("Jitterbug"),
  ("Lindy hop"),
  ("Swing"),
  ("Tap dance"),
  ("Texas Swingout"),
  ("Texas Tommy"),
  ("Calypso"),
  ("Reggaeton"),
  ("Salsa"),
  ("Salsaton"),
  ("Soca"),
  ("Bernie dance"),
  ("South African Sokkie"),
  ("Waltz"),
  ("Tango"),
  ("Foxtrot"),
  ("Quickstep"),
  ("Mambo"),
  ("Rumba"),
  ("Bolero"),
  ("East Coast Swing"),
  ("Samba"),
  ("Jive"),
  ("Bachata"),
  ("Cumbia"),
  ("Merengue"),
  ("Capoeira"),
  ("Quebradita"),
  ("Duranguense"),
  ("dance"),
  ("dancing"),
  ("ballroom"),
  ("bollywood"),
  ("ballet"),
  ("flamenco"),
  ("belly dance"),
  ("line dance"),
  ("dancer")
);
CreateDict(
    "name" => "H_Dance_Dict",
    "table" => "H_Dance_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_Foodies_Dict'
CreateTable(
  "H_Foodies_Dict__TABLE",
  ("entry" => "Text"),
  ("foodie"),
  ("wine"),
  ("wines"),
  ("beer"),
  ("beers"),
  ("drink"),
  ("drinking"),
  ("wisky"),
  ("champagne"),
  ("mojito"),
  ("tequila"),
  ("food"),
  ("cook"),
  ("cooking"),
  ("ice-cream"),
  ("icecream"),
  ("ice cream"),
  ("cake"),
  ("kitchen"),
  ("dine"),
  ("restaurant"),
  ("eat"),
  ("tasting"),
  ("bbq"),
  ("barbeque"),
  ("barbecue")
);
CreateDict(
    "name" => "H_Foodies_Dict",
    "table" => "H_Foodies_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_NBATeams_Alias_Dict'
CreateTable(
  "H_NBATeams_Alias_Dict__TABLE",
  ("entry" => "Text"),
  ("Celtics"),
  ("Nets"),
  ("Knicks"),
  ("76ers"),
  ("Bulls"),
  ("Pistons"),
  ("Timberwolves"),
  ("Warriors"),
  ("Lakers"),
  ("Suns"),
  ("Mavericks")
);
CreateDict(
    "name" => "H_NBATeams_Alias_Dict",
    "table" => "H_NBATeams_Alias_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_NBATeams_Ambig_Alias_Dict'
CreateTable(
  "H_NBATeams_Ambig_Alias_Dict__TABLE",
  ("entry" => "Text"),
  ("Pacers"),
  ("Bucks"),
  ("Hawks"),
  ("Bobcats"),
  ("Nuggets"),
  ("Rockets"),
  ("Grizzlies"),
  ("Hornets")
);
CreateDict(
    "name" => "H_NBATeams_Ambig_Alias_Dict",
    "table" => "H_NBATeams_Ambig_Alias_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_NBATeams_Dict'
CreateTable(
  "H_NBATeams_Dict__TABLE",
  ("entry" => "Text"),
  ("Boston Celtics"),
  ("New Jersey Nets"),
  ("New York Knicks"),
  ("NY Knicks"),
  ("N.Y. Knicks"),
  ("Philadelphia 76ers"),
  ("Toronto Raptors"),
  ("Chicago Bulls"),
  ("Cleveland Cavaliers"),
  ("Detroit Pistons"),
  ("Indiana Pacers"),
  ("Milwaukee Bucks"),
  ("Atlanta Hawks"),
  ("Charlotte Bobcats"),
  ("Miami Heat"),
  ("Orlando Magic"),
  ("Washington Wizards"),
  ("Denver Nuggets"),
  ("Minnesota Timberwolves"),
  ("Oklahoma City Thunder"),
  ("Portland Trail Blazers"),
  ("Utah Jazz"),
  ("Golden State Warriors"),
  ("Los Angeles Clippers"),
  ("L.A. Clippers"),
  ("L.A. Lakers"),
  ("Los Angeles Lakers"),
  ("Phoenix Suns"),
  ("Sacramento Kings"),
  ("Dallas Mavericks"),
  ("Houston Rockets"),
  ("Memphis Grizzlies"),
  ("New Orleans Hornets"),
  ("San Antonio Spurs")
);
CreateDict(
    "name" => "H_NBATeams_Dict",
    "table" => "H_NBATeams_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_NBATeams_Hashes_Dict'
CreateTable(
  "H_NBATeams_Hashes_Dict__TABLE",
  ("entry" => "Text"),
  ("#celtics"),
  ("#nets"),
  ("#knicks"),
  ("#76ers"),
  ("#raptors"),
  ("#bulls"),
  ("#chicagobulls"),
  ("#cavaliers"),
  ("#pistons"),
  ("#pacers"),
  ("#bucks"),
  ("#hawks"),
  ("#bobcats"),
  ("#miamiheat"),
  ("#orlandomagic"),
  ("#washingtonwizards"),
  ("#denvernuggets"),
  ("#timberwolves"),
  ("#utahjazz")
);
CreateDict(
    "name" => "H_NBATeams_Hashes_Dict",
    "table" => "H_NBATeams_Hashes_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_NBATeams_Unique_Dict'
CreateTable(
  "H_NBATeams_Unique_Dict__TABLE",
  ("entry" => "Text"),
  ("Celtics"),
  ("Nets"),
  ("Knicks"),
  ("76ers"),
  ("Toronto Raptors"),
  ("Bulls"),
  ("Cleveland Cavaliers"),
  ("Pistons"),
  ("Indiana Pacers"),
  ("Milwaukee Bucks"),
  ("Atlanta Hawks"),
  ("Charlotte Bobcats"),
  ("Miami Heat"),
  ("Orlando Magic"),
  ("Washington Wizards"),
  ("Denver Nuggets"),
  ("Timberwolves"),
  ("Oklahoma City Thunder"),
  ("Portland Trail Blazers"),
  ("Utah Jazz"),
  ("Warriors"),
  ("Clippers"),
  ("Lakers"),
  ("Phoenix Suns"),
  ("Sacramento Kings"),
  ("Mavericks"),
  ("Houston Rockets"),
  ("Memphis Grizzlies"),
  ("New Orleans Hornets"),
  ("San Antonio Spurs")
);
CreateDict(
    "name" => "H_NBATeams_Unique_Dict",
    "table" => "H_NBATeams_Unique_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_NFLTeams_Alias_Dict'
CreateTable(
  "H_NFLTeams_Alias_Dict__TABLE",
  ("entry" => "Text"),
  ("Patriots"),
  ("Jets"),
  ("Ravens"),
  ("Colts"),
  ("Bengals"),
  ("Steelers"),
  ("Broncos"),
  ("Raiders"),
  ("Chargers"),
  ("Giants"),
  ("Redskins"),
  ("Packers"),
  ("Vikings"),
  ("Cardinals"),
  (" Rams"),
  ("49ers")
);
CreateDict(
    "name" => "H_NFLTeams_Alias_Dict",
    "table" => "H_NFLTeams_Alias_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_NFLTeams_Ambig_Alias'
CreateTable(
  "H_NFLTeams_Ambig_Alias__TABLE",
  ("entry" => "Text"),
  ("Bills"),
  ("Dolphins"),
  ("Browns"),
  ("Jaguars"),
  ("Titans"),
  ("Cowboys"),
  ("Bears"),
  ("Lions"),
  ("Eagles"),
  ("Falcons"),
  ("Panthers"),
  ("Saints"),
  ("Buccaneers"),
  ("Seahawks")
);
CreateDict(
    "name" => "H_NFLTeams_Ambig_Alias",
    "table" => "H_NFLTeams_Ambig_Alias__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_NFLTeams_Dict'
CreateTable(
  "H_NFLTeams_Dict__TABLE",
  ("entry" => "Text"),
  ("Buffalo Bills"),
  ("Miami Dolphins"),
  ("New England Patriots"),
  ("N.Y. Jets"),
  ("NY Jets"),
  ("New York Jets"),
  ("Baltimore Ravens"),
  ("Cincinnati Bengals"),
  (" Cleveland Browns"),
  ("Pittsburgh Steelers"),
  ("Houston Texans"),
  ("Indianapolis Colts"),
  ("Jacksonville Jaguars"),
  ("Tennessee Titans"),
  ("the Titans"),
  ("Denver Broncos"),
  ("Kansas City Chiefs"),
  ("Oakland Raiders"),
  ("San Diego Chargers"),
  ("Dallas Cowboys"),
  ("New York Giants"),
  ("NY Giants"),
  ("N.Y. Giants"),
  ("Philadelphia Eagles"),
  ("Washington Redskins"),
  ("Chicago Bears"),
  ("Detroit Lions"),
  ("Green Bay Packers"),
  ("Minnesota Vikings"),
  ("Atlanta Falcons"),
  ("Carolina Panthers"),
  ("New Orleans Saints"),
  ("Tampa Bay Buccaneers"),
  ("Arizona Cardinals"),
  ("St. Louis Rams"),
  ("San Francisco 49ers"),
  ("SF 49ers"),
  ("S.F. 49ers"),
  ("Seattle Seahawks")
);
CreateDict(
    "name" => "H_NFLTeams_Dict",
    "table" => "H_NFLTeams_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_NFLTeams_Unique_Dict'
CreateTable(
  "H_NFLTeams_Unique_Dict__TABLE",
  ("entry" => "Text"),
  ("Buffalo Bills"),
  ("Miami Dolphins"),
  ("Patriots"),
  ("Jets"),
  ("Ravens"),
  ("Cincinnati Bengals"),
  (" Cleveland Browns"),
  ("Steelers"),
  ("Houston Texans"),
  ("Colts"),
  ("Jacksonville Jaguars"),
  ("Tennessee Titans"),
  ("Broncos"),
  ("Kansas City Chiefs"),
  ("Raiders"),
  ("Chargers"),
  ("Dallas Cowboys"),
  ("Giants"),
  ("Philadelphia Eagles"),
  ("Redskins"),
  ("Chicago Bears"),
  ("Detroit Lions"),
  ("Packers"),
  ("Vikings"),
  ("Atlanta Falcons"),
  ("Carolina Panthers"),
  ("New Orleans Saints"),
  ("Tampa Bay Buccaneers"),
  ("Tampa Buccaneers"),
  ("Arizona Cardinals"),
  ("St. Louis Rams"),
  ("49ers"),
  ("Seattle Seahawks")
);
CreateDict(
    "name" => "H_NFLTeams_Unique_Dict",
    "table" => "H_NFLTeams_Unique_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_NLFTeams_Hashes_Dict'
CreateTable(
  "H_NLFTeams_Hashes_Dict__TABLE",
  ("entry" => "Text"),
  ("#Bills"),
  ("#Lions"),
  ("#Bengals"),
  ("#dolphins"),
  ("#jaguars"),
  ("#titans"),
  ("#chiefs"),
  ("#cowboys"),
  ("#eagles"),
  ("#bears"),
  ("#falcons"),
  ("#arizonacardinals"),
  ("#saints"),
  ("#rams"),
  ("#seahawks"),
  ("#panthers")
);
CreateDict(
    "name" => "H_NLFTeams_Hashes_Dict",
    "table" => "H_NLFTeams_Hashes_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_Pets_Dict'
CreateTable(
  "H_Pets_Dict__TABLE",
  ("entry" => "Text"),
  ("dog lover"),
  ("my cat"),
  ("loves cats"),
  ("love cats"),
  ("my dog"),
  ("dog person"),
  ("loves dogs"),
  ("love dogs"),
  ("dogs"),
  ("cat lover"),
  ("cat person"),
  ("cats"),
  ("horse"),
  ("horses"),
  ("Hamster"),
  ("hamsters"),
  ("rabbit"),
  ("rabbits"),
  ("gerbil"),
  ("mouse"),
  ("Guinea pig"),
  ("ferret"),
  ("turtle"),
  ("turtles"),
  ("snake"),
  ("snakes"),
  ("lizard"),
  ("fish"),
  ("bird"),
  ("birds"),
  ("parrot"),
  ("frogs"),
  ("tortoise")
);
CreateDict(
    "name" => "H_Pets_Dict",
    "table" => "H_Pets_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_Retired_Dict'
CreateTable(
  "H_Retired_Dict__TABLE",
  ("entry" => "Text"),
  ("retired")
);
CreateDict(
    "name" => "H_Retired_Dict",
    "table" => "H_Retired_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_Shop_Dict'
CreateTable(
  "H_Shop_Dict__TABLE",
  ("entry" => "Text"),
  ("shopping"),
  ("buy"),
  ("buying")
);
CreateDict(
    "name" => "H_Shop_Dict",
    "table" => "H_Shop_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'H_Sports_Dict'
CreateTable(
  "H_Sports_Dict__TABLE",
  ("entry" => "Text"),
  ("aerobics"),
  ("athlete"),
  ("athletics"),
  ("bike"),
  ("biking"),
  ("racing"),
  ("backpacking"),
  ("boxing"),
  ("boating"),
  ("badminton"),
  ("ball"),
  ("basketball"),
  ("bowling"),
  ("baseball"),
  ("climb"),
  ("climbing"),
  ("canoeing"),
  ("canoe"),
  ("camping"),
  ("cycling"),
  ("cricket"),
  ("exercise"),
  ("gym"),
  ("frisbee"),
  ("football"),
  ("fishing"),
  ("golf"),
  ("hike"),
  ("hiking"),
  ("jogging"),
  ("kayaking"),
  ("pilates"),
  ("running"),
  ("rollerskating"),
  ("skate"),
  ("skating"),
  ("skateboard"),
  ("skateboarding"),
  ("snowboard"),
  ("snowboarding"),
  ("ski"),
  ("skiing"),
  ("swim"),
  ("swimming"),
  ("soccer"),
  ("softball"),
  ("sports"),
  ("sport"),
  ("surfing"),
  ("tennis"),
  ("volleyball"),
  ("yoga"),
  ("windsurf"),
  ("windsurfing"),
  ("nfl"),
  ("nba")
);
CreateDict(
    "name" => "H_Sports_Dict",
    "table" => "H_Sports_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'HouseDict'
CreateTable(
  "HouseDict__TABLE",
  ("entry" => "Text"),
  ("home"),
  ("house"),
  ("homes"),
  ("houses"),
  ("condo"),
  ("condos"),
  ("place"),
  ("places"),
  ("listing"),
  ("realtor"),
  ("mortgage"),
  ("house hunting"),
  ("househunting"),
  ("house-hunting"),
  ("properties")
);
CreateDict(
    "name" => "HouseDict",
    "table" => "HouseDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'INTERESTING_Dict'
CreateTable(
  "INTERESTING_Dict__TABLE",
  ("entry" => "Text"),
  ("absorbing"),
  ("affecting"),
  ("alluring"),
  ("amusing"),
  ("arresting"),
  ("attractive"),
  ("beautiful"),
  ("captivating"),
  ("charismatic"),
  ("compelling"),
  ("curious"),
  ("delightful"),
  ("elegant"),
  ("enchanting"),
  ("engaging"),
  ("engrossing"),
  ("enthralling"),
  ("entrancing"),
  ("exceptional"),
  ("exotic"),
  ("fascinating"),
  ("fine"),
  ("gracious"),
  ("gripping"),
  ("impressive"),
  ("interesting"),
  ("intriguing"),
  ("inviting"),
  ("lovely"),
  ("magnetic"),
  ("pleasing"),
  ("pleasurable"),
  ("prepossessing"),
  ("provocative"),
  ("readable"),
  ("refreshing"),
  ("riveting"),
  ("stimulating"),
  ("stirring"),
  ("striking"),
  ("suspicious"),
  ("thought provoking"),
  ("unusual"),
  ("winning")
);
CreateDict(
    "name" => "INTERESTING_Dict",
    "table" => "INTERESTING_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'IndirectWishesDict'
CreateTable(
  "IndirectWishesDict__TABLE",
  ("entry" => "Text"),
  ("Tell me"),
  ("tell him"),
  ("tell her"),
  ("tell his"),
  ("wish me"),
  ("wish her"),
  ("wish him"),
  ("So say"),
  ("& say"),
  ("please wish"),
  ("can you say"),
  ("can you wish"),
  ("can you send"),
  ("can u say"),
  ("can u wish"),
  ("can u send"),
  ("pls say"),
  ("please say"),
  ("plz tweet"),
  ("plz say"),
  ("song:")
);
CreateDict(
    "name" => "IndirectWishesDict",
    "table" => "IndirectWishesDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'JO_Job_Word_Dict'
CreateTable(
  "JO_Job_Word_Dict__TABLE",
  ("entry" => "Text"),
  ("job"),
  ("work"),
  ("gig"),
  ("jobs"),
  ("career")
);
CreateDict(
    "name" => "JO_Job_Word_Dict",
    "table" => "JO_Job_Word_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'JO_Mom_Dict'
CreateTable(
  "JO_Mom_Dict__TABLE",
  ("entry" => "Text"),
  ("Mom"),
  ("mother"),
  ("mommy")
);
CreateDict(
    "name" => "JO_Mom_Dict",
    "table" => "JO_Mom_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'JO_NotStudent_Dict'
CreateTable(
  "JO_NotStudent_Dict__TABLE",
  ("entry" => "Text"),
  ("major league"),
  ("minor league"),
  ("senior citizen")
);
CreateDict(
    "name" => "JO_NotStudent_Dict",
    "table" => "JO_NotStudent_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'JO_Pet_Dict'
CreateTable(
  "JO_Pet_Dict__TABLE",
  ("entry" => "Text"),
  ("dog"),
  ("cat"),
  ("mouse"),
  ("rat"),
  ("bird"),
  ("fish")
);
CreateDict(
    "name" => "JO_Pet_Dict",
    "table" => "JO_Pet_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'JO_Search_Word_Dict'
CreateTable(
  "JO_Search_Word_Dict__TABLE",
  ("entry" => "Text"),
  ("in need"),
  ("looking"),
  ("look"),
  ("search"),
  ("find"),
  ("finding"),
  ("searching"),
  ("applying")
);
CreateDict(
    "name" => "JO_Search_Word_Dict",
    "table" => "JO_Search_Word_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'JO_Student_Dict'
CreateTable(
  "JO_Student_Dict__TABLE",
  ("entry" => "Text"),
  ("major"),
  ("Student"),
  ("studying"),
  ("1st year"),
  ("2nd year"),
  ("3rd year"),
  ("th year"),
  ("1st years"),
  ("2nd years"),
  ("3rd years"),
  ("4th years"),
  ("freshman"),
  ("sophomore"),
  ("junior"),
  ("senior")
);
CreateDict(
    "name" => "JO_Student_Dict",
    "table" => "JO_Student_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'JO_Wife_Dict'
CreateTable(
  "JO_Wife_Dict__TABLE",
  ("entry" => "Text"),
  ("Wife"),
  ("wifey")
);
CreateDict(
    "name" => "JO_Wife_Dict",
    "table" => "JO_Wife_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'JO_homemaker_Dict'
CreateTable(
  "JO_homemaker_Dict__TABLE",
  ("entry" => "Text"),
  ("homemaker"),
  ("homeschooler"),
  ("homeschooling"),
  ("home school"),
  ("home schooling"),
  ("home maker"),
  ("stay-at-home mom"),
  ("stay at home mom"),
  ("stay at home dad"),
  ("stay-at-home dad")
);
CreateDict(
    "name" => "JO_homemaker_Dict",
    "table" => "JO_homemaker_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Jewelry_Watches_Dict'
CreateTable(
  "Jewelry_Watches_Dict__TABLE",
  ("entry" => "Text"),
  ("jewelry"),
  ("Rings"),
  ("Necklace"),
  ("Pendant"),
  ("Earring"),
  ("Bracelet"),
  ("Bangle"),
  ("Jewelry Set"),
  ("Charms"),
  ("Watch"),
  ("diamond"),
  ("pearl"),
  ("gemstone"),
  ("gemstones"),
  ("silver"),
  ("gold"),
  ("Ring"),
  ("Necklaces"),
  ("Pendants"),
  ("Earrings"),
  ("Bracelets"),
  ("Bangles"),
  ("Jewelry Sets"),
  ("Watches")
);
CreateDict(
    "name" => "Jewelry_Watches_Dict",
    "table" => "Jewelry_Watches_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'JobRelatedPhrases.dict'
CreateTable(
  "JobRelatedPhrases.dict__TABLE",
  ("entry" => "Text"),
  ("@siddharth"),
  ("1st day @"),
  ("1st day @ dis"),
  ("1st day @ ma new"),
  ("1st day @ his new"),
  ("1st day @ her new"),
  ("1st day @ my new"),
  ("1st day @ new"),
  ("1st day @ this"),
  ("1st day at"),
  ("1st day at dis"),
  ("1st day at ma new"),
  ("1st day at his new"),
  ("1st day at her new"),
  ("1st day at my new"),
  ("1st day at new"),
  ("1st day at this"),
  ("1st day of ma new"),
  ("1st day of his new"),
  ("1st day of her new"),
  ("1st day of my new"),
  ("1st day on"),
  ("1st day on d"),
  ("1st day on d new"),
  ("1st day on da"),
  ("1st day on da new"),
  ("1st day on new"),
  ("1st day on the"),
  ("1st day on the new"),
  ("First day @"),
  ("First day @ dis"),
  ("First day @ ma new"),
  ("First day @ his new"),
  ("First day @ her new"),
  ("First day @ my new"),
  ("First day @ new"),
  ("First day @ this"),
  ("First day at"),
  ("First day at dis"),
  ("First day at ma new"),
  ("First day at his new"),
  ("First day at her new"),
  ("First day at my new"),
  ("First day at new"),
  ("First day at this"),
  ("First day of ma new"),
  ("First day of her new"),
  ("First day of her new"),
  ("First day of my new"),
  ("First day on"),
  ("First day on d"),
  ("First day on d new"),
  ("First day on da"),
  ("First day on da new"),
  ("First day on new"),
  ("First day on the"),
  ("First day on the new"),
  ("gave in ma resignation"),
  ("gave in his resignation"),
  ("gave in her resignation"),
  ("gave in my resignation"),
  ("gave ma resignation"),
  ("gave his resignation"),
  ("gave her resignation"),
  ("gave my resignation"),
  ("Got hired"),
  ("Got fired"),
  ("Got layed off"),
  ("Got a new"),
  ("Got the"),
  ("I got dis new"),
  ("I got this new"),
  ("I resigned"),
  ("Just got a new"),
  ("Just got fired"),
  ("just got hired"),
  ("just got layed off"),
  ("Just lost ma"),
  ("Just lost his"),
  ("Just lost her"),
  ("Just lost his"),
  ("Just lost her"),
  ("Just lost my"),
  ("Just quit ma"),
  ("Just quit his"),
  ("Just quit her"),
  ("Just quit my"),
  ("Last day  in"),
  ("Last day @"),
  ("Last day @ ma"),
  ("Last day @ his"),
  ("Last day @ her"),
  ("Last day @ my"),
  ("Last day @ this"),
  ("Last day at"),
  ("Last day at ma"),
  ("Last day at his"),
  ("Last day at her"),
  ("Last day at my"),
  ("Last day at this"),
  ("lost ma"),
  ("lost my"),
  ("Lst day  in"),
  ("Lst day @"),
  ("Lst day @ ma"),
  ("Lst day @ his"),
  ("Lst day @ her"),
  ("Lst day @ my"),
  ("Lst day @ this"),
  ("Lst day at"),
  ("Lst day at ma"),
  ("Lst day at his"),
  ("Lst day at her"),
  ("Lst day at my"),
  ("Lst day at this"),
  ("my new"),
  ("ma new"),
  ("his new"),
  ("her new"),
  ("ma resignation"),
  ("his resignation"),
  ("her resignation"),
  ("my resignation"),
  ("quit the"),
  ("quit his"),
  ("quit her"),
  ("quit ma"),
  ("quit ma last"),
  ("quit his last"),
  ("quit her last"),
  ("quit ma old"),
  ("quit his old"),
  ("quit her old"),
  ("quit my"),
  ("quit my last"),
  ("quit my lst"),
  ("quit my old"),
  ("resigned 4m"),
  ("resigned 4m the"),
  ("resigned from"),
  ("resigned from d"),
  ("resigned from the"),
  ("start a new"),
  ("start dis new"),
  ("Start my new"),
  ("Start her new"),
  ("Starts his new"),
  ("Start's her new"),
  ("Start's his new"),
  ("start this new"),
  ("Accepted a new"),
  ("Accepted the"),
  ("Accepted my"),
  ("this new")
);
CreateDict(
    "name" => "JobRelatedPhrases.dict",
    "table" => "JobRelatedPhrases.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'JobShiftTypes.dict'
CreateTable(
  "JobShiftTypes.dict__TABLE",
  ("entry" => "Text"),
  ("1st"),
  ("2nd"),
  ("3rd"),
  ("AM"),
  ("another"),
  ("best"),
  ("closing"),
  ("day"),
  ("double"),
  ("earlier"),
  ("end"),
  ("evenin"),
  ("evening"),
  ("evnin"),
  ("evning"),
  ("First"),
  ("grave"),
  ("graveyard"),
  ("hour"),
  ("hr"),
  ("Last"),
  ("long"),
  ("longest"),
  ("mid"),
  ("mid-day"),
  ("morn"),
  ("morning"),
  ("my"),
  ("next"),
  ("night"),
  ("nite"),
  ("PM"),
  ("regular"),
  ("scheduled"),
  ("short"),
  ("weekend"),
  ("working"),
  ("worst")
);
CreateDict(
    "name" => "JobShiftTypes.dict",
    "table" => "JobShiftTypes.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'JobStatus_PrasieDict'
CreateTable(
  "JobStatus_PrasieDict__TABLE",
  ("entry" => "Text"),
  ("good"),
  ("gud"),
  ("great"),
  ("gr8"),
  ("nice")
);
CreateDict(
    "name" => "JobStatus_PrasieDict",
    "table" => "JobStatus_PrasieDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'JobStatus_SlangDict'
CreateTable(
  "JobStatus_SlangDict__TABLE",
  ("entry" => "Text"),
  ("blow"),
  ("boob"),
  ("hand"),
  ("nose")
);
CreateDict(
    "name" => "JobStatus_SlangDict",
    "table" => "JobStatus_SlangDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'JobStatus_havingDict'
CreateTable(
  "JobStatus_havingDict__TABLE",
  ("entry" => "Text"),
  ("side"),
  ("new"),
  ("other"),
  ("another"),
  ("love"),
  ("hate"),
  ("second"),
  ("better")
);
CreateDict(
    "name" => "JobStatus_havingDict",
    "table" => "JobStatus_havingDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Jobs/Before_Locations.dict'
CreateTable(
  "Jobs/Before_Locations.dict__TABLE",
  ("entry" => "Text"),
  ("in"),
  ("at"),
  ("-"),
  ("(")
);
CreateDict(
    "name" => "Jobs/Before_Locations.dict",
    "table" => "Jobs/Before_Locations.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Jobs/HiringTerms.dict'
CreateTable(
  "Jobs/HiringTerms.dict__TABLE",
  ("entry" => "Text"),
  ("Looking for"),
  ("Seeking"),
  ("Job"),
  ("position"),
  ("Hiring"),
  ("recruiting"),
  ("Seek"),
  ("career")
);
CreateDict(
    "name" => "Jobs/HiringTerms.dict",
    "table" => "Jobs/HiringTerms.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Jobs/notReallyJobs.dict'
CreateTable(
  "Jobs/notReallyJobs.dict__TABLE",
  ("entry" => "Text"),
  ("wannabe"),
  ("wantobe"),
  ("want"),
  ("wanna be"),
  ("become"),
  ("fail"),
  ("love"),
  ("loves"),
  ("like"),
  ("likes"),
  ("dream"),
  ("future"),
  ("create"),
  ("creates"),
  ("offer"),
  ("offers"),
  ("Verified"),
  ("Unverified"),
  ("lover"),
  ("lovers"),
  ("let"),
  ("wanted"),
  ("progress"),
  ("posts"),
  ("news"),
  ("stories"),
  ("enthusiast"),
  ("follow"),
  ("dont"),
  ("don'"),
  ("Occasional"),
  ("can"),
  ("do"),
  ("please"),
  ("will")
);
CreateDict(
    "name" => "Jobs/notReallyJobs.dict",
    "table" => "Jobs/notReallyJobs.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Jobs/urlParts.dict'
CreateTable(
  "Jobs/urlParts.dict__TABLE",
  ("entry" => "Text"),
  ("post"),
  ("POST"),
  ("http://"),
  ("www")
);
CreateDict(
    "name" => "Jobs/urlParts.dict",
    "table" => "Jobs/urlParts.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'KeywordsForLocAsUserDict'
CreateTable(
  "KeywordsForLocAsUserDict__TABLE",
  ("entry" => "Text"),
  ("going to the"),
  ("to go to the"),
  ("goin to the"),
  ("dinner"),
  ("lunch"),
  ("brunch"),
  ("breakfast")
);
CreateDict(
    "name" => "KeywordsForLocAsUserDict",
    "table" => "KeywordsForLocAsUserDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/I.dict'
CreateTable(
  "LIWC/I.dict__TABLE",
  ("entry" => "Text"),
  ("I"),
  ("I'D"),
  ("I'LL"),
  ("I'M"),
  ("I'VE"),
  ("ME"),
  ("MINE"),
  ("MY"),
  ("MYSELF"),
  ("I am")
);
CreateDict(
    "name" => "LIWC/I.dict",
    "table" => "LIWC/I.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/dreamers.dict'
CreateTable(
  "LIWC/dreamers.dict__TABLE",
  ("entry" => "Text"),
  ("wannabe"),
  ("wantobe"),
  ("want to be"),
  ("wanna be"),
  ("become"),
  ("failed"),
  ("love"),
  ("like"),
  ("aspiring"),
  ("dream"),
  ("enthusiast"),
  ("future")
);
CreateDict(
    "name" => "LIWC/dreamers.dict",
    "table" => "LIWC/dreamers.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/female_roles.dict'
CreateTable(
  "LIWC/female_roles.dict__TABLE",
  ("entry" => "Text"),
  ("seamstress"),
  ("damsel"),
  ("lady"),
  ("AUNT"),
  ("DAUGHTER"),
  ("GRANDDAU"),
  ("GRANDM"),
  ("MOM"),
  ("MOMMA"),
  ("MOMMY"),
  ("MOM"),
  ("MOTHER"),
  ("MUM"),
  ("MUMMY"),
  ("NIECE"),
  ("SISTER"),
  ("STEPMOM"),
  ("WIFE"),
  ("WIVE"),
  ("Ms."),
  ("Mrs."),
  ("aunty"),
  ("auntie"),
  ("gentlewoman"),
  ("girl"),
  ("gal"),
  ("gf"),
  ("girlfriend"),
  ("grandmother"),
  ("matron"),
  ("bride"),
  ("woman"),
  ("women"),
  ("diva")
);
CreateDict(
    "name" => "LIWC/female_roles.dict",
    "table" => "LIWC/female_roles.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/job_work.dict'
CreateTable(
  "LIWC/job_work.dict__TABLE",
  ("entry" => "Text"),
  ("entrepreneur"),
  ("mentor"),
  ("career advisor"),
  ("life coach"),
  ("ADMINISTRATI"),
  ("APPLICAT"),
  ("ASSOCIATIO"),
  ("COMMERCIAL"),
  ("stock MARKET"),
  ("MARKETING"),
  ("NEGOTIAT"),
  ("PRESIDENT"),
  ("PROFESSION"),
  ("professor"),
  ("SECRETAR"),
  ("SUPERVIS"),
  ("TRADER"),
  ("TRANSFER"),
  ("dancer"),
  ("singer"),
  ("vocalist"),
  ("accountant"),
  ("actor"),
  ("air steward"),
  ("architect"),
  ("assistant"),
  ("personal assistant"),
  ("shop assistant"),
  ("author"),
  ("baker"),
  ("barman"),
  ("barmaid"),
  ("bar person"),
  ("builder"),
  ("businessman"),
  ("businesswoman"),
  ("executive"),
  ("butcher"),
  ("caretaker"),
  ("chef"),
  ("civil servant"),
  ("clerk"),
  ("computer"),
  ("operator"),
  ("programmer"),
  ("cook"),
  ("decorator"),
  ("dentist"),
  ("designer"),
  ("director"),
  ("company director"),
  ("filmmaker"),
  ("film maker"),
  ("director"),
  ("doctor"),
  ("driver bus"),
  ("taxi"),
  ("train driver"),
  ("garbageman"),
  ("refuse collector"),
  ("economist"),
  ("editor"),
  ("electrician"),
  ("engineer"),
  ("software"),
  ("hardware"),
  ("Engineer"),
  ("farmer"),
  ("fisherman"),
  ("fishmonger"),
  ("flight attendant"),
  ("hairdresser"),
  ("teacher"),
  ("jeweler"),
  ("journalist"),
  ("judge"),
  ("lawyer"),
  ("lecturer"),
  ("manager"),
  ("miner"),
  ("palm reader"),
  ("presenter"),
  ("nurse"),
  ("forensic"),
  ("marine"),
  ("optician"),
  ("painter"),
  ("photographer"),
  ("pilot"),
  ("plumber"),
  ("police officer"),
  ("politician"),
  ("porter"),
  ("printer"),
  ("prison officer"),
  ("warder"),
  ("receptionist"),
  ("sailor"),
  ("salesman"),
  ("saleswoman"),
  ("salesperson"),
  ("scientist"),
  ("secretary"),
  ("soldier"),
  ("solicitor"),
  ("surgeon"),
  ("tailor"),
  ("teacher"),
  ("telephonist"),
  ("telephone operator"),
  ("travel agent"),
  ("TV cameraman"),
  ("TV presenter"),
  ("vet"),
  ("waiter"),
  ("writer"),
  ("Accountant"),
  ("Actor"),
  ("Actuary"),
  ("Scientist"),
  ("Architect"),
  ("Artist"),
  ("mechanic"),
  ("Bookkeeping clerk"),
  ("Carpenter"),
  ("Chemist"),
  ("Childcare"),
  ("Civil engineer"),
  ("Coach"),
  ("engineer"),
  ("specialist"),
  ("estimator"),
  ("reporter"),
  ("Dancer"),
  ("administrator"),
  ("Designer"),
  ("publisher"),
  ("Disc jockey"),
  ("Doctor"),
  ("Drafter"),
  ("Economist"),
  ("engineer"),
  ("Electrician"),
  ("technician"),
  ("Farmer"),
  ("analyst"),
  ("Firefighter"),
  ("Human resources"),
  ("assistant"),
  ("Judge"),
  ("architect"),
  ("Lawyer"),
  ("Librarian"),
  ("Loan officer"),
  ("Musician"),
  ("Nurse"),
  ("Paralegal"),
  ("Pharmacist"),
  ("Photographer"),
  ("Physicist"),
  ("Pilot"),
  ("cop"),
  ("Police officer"),
  ("Politician"),
  ("athlete"),
  ("Psychologist"),
  ("Real estate agent"),
  ("fitness worker"),
  ("therapist"),
  ("Reporter"),
  ("Secretary"),
  ("Social worker"),
  ("Statistician"),
  ("Surveyor"),
  ("Systems analyst"),
  ("Teacher"),
  ("Urban planner"),
  ("Veterinarian"),
  ("Webmaster"),
  ("Writer"),
  ("Zookeeper"),
  ("student"),
  ("producer"),
  ("songwriter"),
  ("lyricist"),
  ("DJ"),
  ("RJ"),
  ("Occupational Health"),
  ("safety Professional"),
  ("Professional"),
  ("reviewer"),
  ("PR"),
  ("brand development"),
  ("entertainer"),
  ("artist"),
  ("codesmith"),
  ("freelance"),
  ("graphic"),
  ("illustrator"),
  ("rapper"),
  ("actress"),
  ("trainer"),
  ("sales"),
  ("Activist"),
  ("player"),
  ("historian"),
  ("branding"),
  ("public speaking"),
  ("fashion designer"),
  ("textile"),
  ("officer"),
  ("educator"),
  ("investor"),
  ("stock broker"),
  ("banker"),
  ("researcher"),
  ("anthropology"),
  ("law"),
  ("founder"),
  ("scholar"),
  ("realtor"),
  ("realty"),
  ("partner"),
  ("co-founder"),
  ("international business"),
  ("business owner"),
  ("world business"),
  ("finance"),
  ("IT specialist"),
  ("tech enthusiast"),
  ("co-editor"),
  ("ceo"),
  ("cfo"),
  ("coo"),
  ("Search Engine Optimizer"),
  ("Internet Marketing"),
  ("attorney"),
  ("columnist"),
  ("owner"),
  ("co-owner"),
  ("web editor"),
  ("photog"),
  ("pianist"),
  ("medical"),
  ("guitarist"),
  ("makeup artist"),
  ("astrophysicist"),
  ("mathematician"),
  ("pro wrestler"),
  ("poet"),
  ("philanthropist"),
  ("collector"),
  ("voice train"),
  ("voice therap"),
  ("MBA"),
  ("booker"),
  ("music programmer"),
  ("district manager"),
  ("Choreographer"),
  ("criminal justice"),
  ("publicist"),
  ("anchor"),
  ("sports player"),
  ("playwright"),
  ("junior high"),
  ("college"),
  ("post graduate"),
  ("postgrad"),
  ("phd"),
  ("Real Estate"),
  ("Broker"),
  ("technology"),
  ("collegestudent"),
  ("songwriter")
);
CreateDict(
    "name" => "LIWC/job_work.dict",
    "table" => "LIWC/job_work.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/male_roles.dict'
CreateTable(
  "LIWC/male_roles.dict__TABLE",
  ("entry" => "Text"),
  ("daddy"),
  ("lad"),
  ("bf"),
  ("BOY"),
  ("BROTHER"),
  ("DAD"),
  ("DUDE"),
  ("FATHER"),
  ("GRANDDAD"),
  ("GRANDPA"),
  ("GRANDSON"),
  ("HUSBAND"),
  ("man"),
  ("NEPHEW"),
  ("SON"),
  ("STEPFAT"),
  ("UNCLE"),
  ("gentleman"),
  ("bloke"),
  ("chap"),
  ("male"),
  ("gent"),
  ("fella"),
  ("dude"),
  ("Mr."),
  ("beau"),
  ("boyfriend"),
  ("papa"),
  ("sir"),
  ("bridegroom"),
  ("groom"),
  ("hubby"),
  ("fraternity"),
  ("prince")
);
CreateDict(
    "name" => "LIWC/male_roles.dict",
    "table" => "LIWC/male_roles.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/month.dict'
CreateTable(
  "LIWC/month.dict__TABLE",
  ("entry" => "Text"),
  ("january"),
  ("jan"),
  ("february"),
  ("feb"),
  ("march"),
  ("mar"),
  ("april"),
  ("apr"),
  ("may"),
  ("june"),
  ("jun"),
  ("july"),
  ("jul"),
  ("august"),
  ("aug"),
  ("september"),
  ("sept"),
  ("sep"),
  ("october"),
  ("oct"),
  ("november"),
  ("nov"),
  ("december"),
  ("dec")
);
CreateDict(
    "name" => "LIWC/month.dict",
    "table" => "LIWC/month.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/non_consumer_cues.dict'
CreateTable(
  "LIWC/non_consumer_cues.dict__TABLE",
  ("entry" => "Text"),
  ("fanpage"),
  ("official page"),
  ("dedicated to"),
  ("official updates"),
  ("official aggregator"),
  ("twitter page")
);
CreateDict(
    "name" => "LIWC/non_consumer_cues.dict",
    "table" => "LIWC/non_consumer_cues.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/notaplace.dict'
CreateTable(
  "LIWC/notaplace.dict__TABLE",
  ("entry" => "Text"),
  ("god"),
  ("heaven"),
  ("earth"),
  ("paradise"),
  ("dad"),
  ("mom")
);
CreateDict(
    "name" => "LIWC/notaplace.dict",
    "table" => "LIWC/notaplace.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/other.dict'
CreateTable(
  "LIWC/other.dict__TABLE",
  ("entry" => "Text"),
  ("HE"),
  ("HE'D"),
  ("HE'LL"),
  ("HE'S"),
  ("HER"),
  ("HERS"),
  ("HERSELF"),
  ("HIM"),
  ("HIMSELF"),
  ("HIS"),
  ("SHE"),
  ("SHE'D"),
  ("SHE'LL"),
  ("SHE'S"),
  ("THEIR"),
  ("THEM"),
  ("THEMSELVES"),
  ("THEY"),
  ("THEY'D"),
  ("THEY'LL"),
  ("THEY'RE"),
  ("THEY'VE")
);
CreateDict(
    "name" => "LIWC/other.dict",
    "table" => "LIWC/other.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/parent_roles.dict'
CreateTable(
  "LIWC/parent_roles.dict__TABLE",
  ("entry" => "Text"),
  ("parent"),
  ("mom"),
  ("dad"),
  ("mother"),
  ("father"),
  ("mumma"),
  ("mummy"),
  ("mum"),
  ("daddy"),
  ("papa"),
  ("my kid"),
  ("my child"),
  ("my son"),
  ("my daughter"),
  ("my bab"),
  ("my dot")
);
CreateDict(
    "name" => "LIWC/parent_roles.dict",
    "table" => "LIWC/parent_roles.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/positive_feeling.dict'
CreateTable(
  "LIWC/positive_feeling.dict__TABLE",
  ("entry" => "Text"),
  ("ADMIR"),
  ("ADOR"),
  ("AFFECTION"),
  ("AGREE"),
  ("ATTACHMENT"),
  ("CARE"),
  ("CARED"),
  ("CARES"),
  ("CHEER"),
  ("CHEERED"),
  ("CHERISH"),
  ("CHUCKL"),
  ("DEAR"),
  ("DEVOT"),
  ("ECSTA"),
  ("ENCOURAG"),
  ("ENJOY"),
  ("FOND"),
  ("FORGIV"),
  ("GIGGL"),
  ("GLAD"),
  ("GRATEF"),
  ("GRIN"),
  ("GRINS"),
  ("HAPPI"),
  ("HAPPY"),
  ("JOY"),
  ("LAUGH"),
  ("LIKED"),
  ("LIKES"),
  ("LIKING"),
  ("LOVE"),
  ("LOVED"),
  ("LOVES"),
  ("MERR"),
  ("PASSION"),
  ("ROMANC"),
  ("ROMANTIC"),
  ("SENTIMENTAL"),
  ("SMIL"),
  ("THANKF"),
  ("WORSHIP")
);
CreateDict(
    "name" => "LIWC/positive_feeling.dict",
    "table" => "LIWC/positive_feeling.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/prepositions.dict'
CreateTable(
  "LIWC/prepositions.dict__TABLE",
  ("entry" => "Text"),
  ("ABOUT"),
  ("ABOVE"),
  ("ACROSS"),
  ("AFTER"),
  ("AGAINST"),
  ("AHEAD"),
  ("ALONG"),
  ("AMONG"),
  ("AROUND"),
  ("AS"),
  ("AT"),
  ("ATOP"),
  ("AWAY"),
  ("BEFORE"),
  ("BELOW"),
  ("BENEATH"),
  ("BESIDE"),
  ("BETWEEN"),
  ("BY"),
  ("DOWN"),
  ("FOR"),
  ("FROM"),
  ("IF"),
  ("IN"),
  ("INSIDE"),
  ("INTO"),
  ("NEAR"),
  ("OF"),
  ("OFF"),
  ("ON"),
  ("ONTO"),
  ("OUT"),
  ("OUTSIDE"),
  ("OVER"),
  ("SINCE"),
  ("TO"),
  ("UNDER"),
  ("UNTIL"),
  ("UP"),
  ("UPON"),
  ("WITH"),
  ("WITHIN"),
  ("WITHOUT")
);
CreateDict(
    "name" => "LIWC/prepositions.dict",
    "table" => "LIWC/prepositions.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/reference_people.dict'
CreateTable(
  "LIWC/reference_people.dict__TABLE",
  ("entry" => "Text"),
  ("ANYBOD"),
  ("ANYONE"),
  ("EVERYBOD"),
  ("EVERYONE"),
  ("EVERYTHING"),
  ("HE"),
  ("HE'D"),
  ("HE'LL"),
  ("HE'S"),
  ("HER"),
  ("HERS"),
  ("HERSELF"),
  ("HIM"),
  ("HIMSELF"),
  ("HIS"),
  ("LET'S"),
  ("LETS"),
  ("OUR"),
  ("OURS"),
  ("OURSELVES"),
  ("SHE"),
  ("SHE'D"),
  ("SHE'LL"),
  ("SHE'S"),
  ("SOMEBOD"),
  ("SOMEONE"),
  ("THEE"),
  ("THEIR"),
  ("THEM"),
  ("THEMSELVES"),
  ("THEY"),
  ("THEY'D"),
  ("THEY'LL"),
  ("THEY'RE"),
  ("THEY'VE"),
  ("THINE"),
  ("THOU"),
  ("THOUST"),
  ("THY"),
  ("US"),
  ("WE"),
  ("WE'D"),
  ("WE'LL"),
  ("WE'RE"),
  ("WE'VE"),
  ("Y'ALL"),
  ("YA"),
  ("YE"),
  ("YOU"),
  ("YOU'D"),
  ("YOU'LL"),
  ("YOU'RE"),
  ("YOU'VE"),
  ("YOUR")
);
CreateDict(
    "name" => "LIWC/reference_people.dict",
    "table" => "LIWC/reference_people.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/reln_status.dict'
CreateTable(
  "LIWC/reln_status.dict__TABLE",
  ("entry" => "Text"),
  ("married"),
  ("single"),
  ("--separated was noisy, separated from others"),
  ("divorced"),
  ("open relation"),
  ("open relationship")
);
CreateDict(
    "name" => "LIWC/reln_status.dict",
    "table" => "LIWC/reln_status.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/sexuality.dict'
CreateTable(
  "LIWC/sexuality.dict__TABLE",
  ("entry" => "Text"),
  ("ABORT"),
  ("AIDS"),
  ("BI"),
  ("BOOBS"),
  ("BREAST"),
  ("BUTT"),
  ("COCK"),
  ("CONDOM"),
  ("DICK"),
  ("ERECTION"),
  ("FAIRY"),
  ("FUCK"),
  ("GAY"),
  ("GAYS"),
  ("GENITAL"),
  ("HOMOSEXUAL"),
  ("HORNY"),
  ("HUG"),
  ("INCEST"),
  ("KISS"),
  ("LESBIAN"),
  ("LIBID"),
  ("LUST"),
  ("NAKED"),
  ("NIPPLE"),
  ("NUDE"),
  ("ORGASM"),
  ("OVAR"),
  ("PENIS"),
  ("PERVERT"),
  ("PORN"),
  ("PREGNAN"),
  ("PRICK"),
  ("PROSTAT"),
  ("PROSTITU"),
  ("PUSSY"),
  ("QUEER"),
  ("RAPE"),
  ("SCREW"),
  ("SEX"),
  ("STUD"),
  ("VAGINA"),
  ("VIRGIN"),
  ("WOMB")
);
CreateDict(
    "name" => "LIWC/sexuality.dict",
    "table" => "LIWC/sexuality.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/swearwords.dict'
CreateTable(
  "LIWC/swearwords.dict__TABLE",
  ("entry" => "Text"),
  ("ARSE"),
  ("ARSES"),
  ("ARSEHOLE"),
  ("ASS"),
  ("ASSES"),
  ("ASSHOLE"),
  ("BASTARD"),
  ("BITCH"),
  ("BOOBS"),
  ("BUTT"),
  ("COCK"),
  ("CRAP"),
  ("DAMN"),
  ("DICK"),
  ("DUMB"),
  ("DYKE"),
  ("FUCK"),
  ("GODDAM"),
  ("HELL"),
  ("HOMO"),
  ("NIGGER"),
  ("PISS"),
  ("PRICK"),
  ("PUSSY"),
  ("QUEER"),
  ("SCREW"),
  ("SHIT"),
  ("SOB"),
  ("SONOFA"),
  ("SUCK"),
  ("SUCKED"),
  ("SUCKS"),
  ("HOE"),
  ("HOES"),
  ("WHORE")
);
CreateDict(
    "name" => "LIWC/swearwords.dict",
    "table" => "LIWC/swearwords.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/teen_hearthrobs.dict'
CreateTable(
  "LIWC/teen_hearthrobs.dict__TABLE",
  ("entry" => "Text"),
  ("kardashian"),
  ("alex pettyfer"),
  ("belieber"),
  ("justin beiber"),
  ("selena gomez"),
  ("britney"),
  ("spears"),
  ("vampire"),
  ("gaga"),
  ("taylor"),
  ("swift"),
  ("robert pattinson"),
  ("katy perry"),
  ("ashton"),
  ("kutcher"),
  ("miley"),
  ("cyrus"),
  ("beyonce"),
  ("jonas brothers"),
  ("mcfly"),
  ("lovato"),
  ("glee"),
  ("DON"),
  ("CHORDNELIOUS"),
  ("LIL WAYNE"),
  ("RICK ROSS"),
  ("YUNG BERG"),
  ("P DIDDY"),
  ("KEVIN COSSOM"),
  ("SOULJA BOY"),
  ("DIRTY MONEY"),
  ("ROSCOE DASH"),
  ("DRAKE")
);
CreateDict(
    "name" => "LIWC/teen_hearthrobs.dict",
    "table" => "LIWC/teen_hearthrobs.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/teen_signals.dict'
CreateTable(
  "LIWC/teen_signals.dict__TABLE",
  ("entry" => "Text"),
  ("junior high"),
  ("senior"),
  ("college"),
  ("prom")
);
CreateDict(
    "name" => "LIWC/teen_signals.dict",
    "table" => "LIWC/teen_signals.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/teenslang.dict'
CreateTable(
  "LIWC/teenslang.dict__TABLE",
  ("entry" => "Text"),
  ("AFAIK"),
  ("AFK"),
  ("ASAP"),
  ("ATK"),
  ("ATM"),
  ("A3"),
  ("BAK"),
  ("BBL"),
  ("BBS"),
  ("BFN/B4N"),
  ("BRB"),
  ("BRT"),
  ("BTW"),
  ("B4N"),
  ("CU"),
  ("CUL8R"),
  ("CYA"),
  ("FAQ"),
  ("FC"),
  ("FWIW"),
  ("FYI"),
  ("GAL"),
  ("GG"),
  ("GMTA"),
  ("GR8"),
  ("G9"),
  ("IC"),
  ("ICQ"),
  ("ILU"),
  ("IMHO"),
  ("IMO"),
  ("IOW"),
  ("IRL"),
  ("KISS"),
  ("LDR"),
  ("LMAO"),
  ("LTNS"),
  ("L8R"),
  ("MTE"),
  ("M8"),
  ("NRN"),
  ("OIC"),
  ("PITA"),
  ("PRT"),
  ("PRW"),
  ("QPSA?"),
  ("ROFL"),
  ("ROFLOL"),
  ("ROTFLMAO"),
  ("SK8"),
  ("STATS"),
  ("ASL"),
  ("THX"),
  ("TTFN"),
  ("TTYL"),
  ("U2"),
  ("U4E"),
  ("WB"),
  ("WTF"),
  ("WTG"),
  ("WUF"),
  ("W8"),
  ("7K"),
  ("rebel")
);
CreateDict(
    "name" => "LIWC/teenslang.dict",
    "table" => "LIWC/teenslang.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/time.dict'
CreateTable(
  "LIWC/time.dict__TABLE",
  ("entry" => "Text"),
  ("ABRUPT"),
  ("AFTER"),
  ("AGAIN"),
  ("AGE"),
  ("AGO"),
  ("ALREADY"),
  ("ALWAYS"),
  ("ANNUAL"),
  ("ANYTIME"),
  ("APRIL"),
  ("AUGUST"),
  ("AUTUMN"),
  ("BEFORE"),
  ("BEGAN"),
  ("BEGIN"),
  ("BEGINN"),
  ("BEGINS"),
  ("BRIEF"),
  ("CLOCK"),
  ("CONTINU"),
  ("DAY"),
  ("DECADE"),
  ("DECEMBER"),
  ("DURING"),
  ("EARL"),
  ("END"),
  ("ERA"),
  ("ETERN"),
  ("EVENING"),
  ("FEBRUARY"),
  ("FINISH"),
  ("FINISHED"),
  ("FINISHES"),
  ("FINISHING"),
  ("FOREVER"),
  ("FRIDAY"),
  ("FUTUR"),
  ("GENERATION"),
  ("HISTOR"),
  ("HOUR"),
  ("IMMEDIAT"),
  ("IMMORTAL"),
  ("INFINIT"),
  ("INSTAN"),
  ("INTERVAL"),
  ("JANUARY"),
  ("JULY"),
  ("JUNE"),
  ("LAST"),
  ("LATE"),
  ("MARCH"),
  ("MEANTIME"),
  ("MEANWHILE"),
  ("MINUTE"),
  ("MOMENT"),
  ("MONDAY"),
  ("MONTH"),
  ("MORNING"),
  ("NETWORK"),
  ("NEVER"),
  ("NEW"),
  ("NEXT"),
  ("NIGHT"),
  ("NIGHTS"),
  ("NOON"),
  ("NOVEMBER"),
  ("NOW"),
  ("O'CLOCK"),
  ("OCCASIONAL"),
  ("OCTOBER"),
  ("OLD"),
  ("ONCE"),
  ("ORIGIN"),
  ("PAST"),
  ("PERIOD"),
  ("PRESENT"),
  ("PRESENTLY"),
  ("SATURDAY"),
  ("SEMESTER"),
  ("SEPTEMBER"),
  ("SOMETIME"),
  ("SOON"),
  ("SPRING"),
  ("START"),
  ("STARTED"),
  ("STARTING"),
  ("STARTS"),
  ("STOP"),
  ("STOPPED"),
  ("STOPPING"),
  ("STOPS"),
  ("SUDDEN"),
  ("SUMMER"),
  ("SUNDAY"),
  ("TEMPORAR"),
  ("THEN"),
  ("THURSDAY"),
  ("TILL"),
  ("TIME"),
  ("TODAY"),
  ("TOMORROW"),
  ("TONIGHT"),
  ("TUESDAY"),
  ("UNTIL"),
  ("WEDNESDAY"),
  ("WEEK"),
  ("WHEN"),
  ("WHENEVER"),
  ("WHILE"),
  ("WINTER"),
  ("YEAR"),
  ("YESTERDAY"),
  ("YOUNG")
);
CreateDict(
    "name" => "LIWC/time.dict",
    "table" => "LIWC/time.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/wishfulthinking.dict'
CreateTable(
  "LIWC/wishfulthinking.dict__TABLE",
  ("entry" => "Text"),
  ("wish"),
  ("like")
);
CreateDict(
    "name" => "LIWC/wishfulthinking.dict",
    "table" => "LIWC/wishfulthinking.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LIWC/you.dict'
CreateTable(
  "LIWC/you.dict__TABLE",
  ("entry" => "Text"),
  ("THEE"),
  ("THINE"),
  ("THOU"),
  ("THOUST"),
  ("THY"),
  ("Y'ALL"),
  ("YA"),
  ("YE"),
  ("YOU"),
  ("YOU'D"),
  ("YOU'LL"),
  ("YOU'RE"),
  ("YOU'VE"),
  ("YOUR")
);
CreateDict(
    "name" => "LIWC/you.dict",
    "table" => "LIWC/you.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_Baby_Generic'
CreateTable(
  "LifeChangingEventsDict_Baby_Generic__TABLE",
  ("entry" => "Text"),
  ("kids"),
  ("children"),
  ("baby"),
  ("twins"),
  ("child"),
  ("triplets"),
  ("babies"),
  ("son"),
  ("daughter"),
  ("father"),
  ("mother"),
  ("fatherhood"),
  ("motherhood"),
  ("mom"),
  ("dad")
);
CreateDict(
    "name" => "LifeChangingEventsDict_Baby_Generic",
    "table" => "LifeChangingEventsDict_Baby_Generic__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_Bday_Weak'
CreateTable(
  "LifeChangingEventsDict_Bday_Weak__TABLE",
  ("entry" => "Text"),
  ("birthday"),
  ("bday"),
  ("B-day"),
  ("b-dae"),
  ("bdae"),
  ("budday"),
  ("buddae"),
  ("happybirthday"),
  ("happybday"),
  ("happybudday"),
  ("happybdae"),
  ("#happybirthday"),
  ("#happybday"),
  ("#happybdae"),
  ("#happybudday"),
  ("#happybuddae"),
  ("many happy returns")
);
CreateDict(
    "name" => "LifeChangingEventsDict_Bday_Weak",
    "table" => "LifeChangingEventsDict_Bday_Weak__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_ChangingJob'
CreateTable(
  "LifeChangingEventsDict_ChangingJob__TABLE",
  ("entry" => "Text"),
  ("finish school"),
  ("finish college"),
  ("new job")
);
CreateDict(
    "name" => "LifeChangingEventsDict_ChangingJob",
    "table" => "LifeChangingEventsDict_ChangingJob__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_Consolatory'
CreateTable(
  "LifeChangingEventsDict_Consolatory__TABLE",
  ("entry" => "Text"),
  ("sorry about the"),
  ("sorry to hear about the"),
  ("sorry bout the"),
  ("sorry to hear bout the"),
  ("sorry about your"),
  ("sorry to hear about your"),
  ("sorry bout your"),
  ("sorry to hear bout your"),
  ("feel bad to hear about the"),
  ("feel bad for the"),
  ("feel bad to hear about your"),
  ("feel bad for your"),
  ("feel sorry for your"),
  ("feel soo sorry for your"),
  ("feel so sorry for your")
);
CreateDict(
    "name" => "LifeChangingEventsDict_Consolatory",
    "table" => "LifeChangingEventsDict_Consolatory__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_Divorce_Events_Weak'
CreateTable(
  "LifeChangingEventsDict_Divorce_Events_Weak__TABLE",
  ("entry" => "Text"),
  ("alimony"),
  ("annul"),
  ("anul"),
  ("annuled"),
  ("anuled"),
  ("annulment"),
  ("anulment"),
  ("divorce"),
  ("divorced"),
  ("#divorce"),
  ("divorcement"),
  ("estrangement"),
  ("nullify"),
  ("separated"),
  ("separation"),
  ("separation"),
  ("separation"),
  ("STBXH"),
  ("STBXW"),
  ("wasband")
);
CreateDict(
    "name" => "LifeChangingEventsDict_Divorce_Events_Weak",
    "table" => "LifeChangingEventsDict_Divorce_Events_Weak__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_Divorce_Status_Weak'
CreateTable(
  "LifeChangingEventsDict_Divorce_Status_Weak__TABLE",
  ("entry" => "Text"),
  ("alimony"),
  ("divorce"),
  ("divorcee"),
  ("#divorce"),
  ("divorcement"),
  ("grass widow"),
  ("divorced"),
  ("annulment")
);
CreateDict(
    "name" => "LifeChangingEventsDict_Divorce_Status_Weak",
    "table" => "LifeChangingEventsDict_Divorce_Status_Weak__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_HavingKids'
CreateTable(
  "LifeChangingEventsDict_HavingKids__TABLE",
  ("entry" => "Text"),
  ("sonogram"),
  ("pregnant"),
  ("gave birth"),
  ("having kids"),
  ("having babies"),
  ("became a mom"),
  ("became a dad")
);
CreateDict(
    "name" => "LifeChangingEventsDict_HavingKids",
    "table" => "LifeChangingEventsDict_HavingKids__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_JobRelated_Events_AmbiguousPhrasesDict'
CreateTable(
  "LifeChangingEventsDict_JobRelated_Events_AmbiguousPhrasesDict__TABLE",
  ("entry" => "Text"),
  ("#WishIWould"),
  ("about 2"),
  ("about to"),
  ("bout 2"),
  ("bout to"),
  ("can b"),
  ("can be"),
  ("decided 2"),
  ("goin 2"),
  ("goin to"),
  ("going 2"),
  ("going to"),
  ("gonna"),
  ("gotta"),
  ("think"),
  ("thibk"),
  ("have 2"),
  ("have to"),
  ("I ma"),
  ("might"),
  ("need 2"),
  ("need to"),
  ("plan to"),
  ("plannin 2"),
  ("plannin to"),
  ("planning 2"),
  ("planning to"),
  ("should"),
  ("think imma"),
  ("woulda"),
  ("whether"),
  ("if")
);
CreateDict(
    "name" => "LifeChangingEventsDict_JobRelated_Events_AmbiguousPhrasesDict",
    "table" => "LifeChangingEventsDict_JobRelated_Events_AmbiguousPhrasesDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_JobRelated_Events_CoworkersDict'
CreateTable(
  "LifeChangingEventsDict_JobRelated_Events_CoworkersDict__TABLE",
  ("entry" => "Text"),
  ("colleague"),
  ("coworker"),
  ("co-worker"),
  ("manager"),
  ("peer"),
  ("subordinate"),
  ("boss")
);
CreateDict(
    "name" => "LifeChangingEventsDict_JobRelated_Events_CoworkersDict",
    "table" => "LifeChangingEventsDict_JobRelated_Events_CoworkersDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_JobRelated_Events_RelationsDict'
CreateTable(
  "LifeChangingEventsDict_JobRelated_Events_RelationsDict__TABLE",
  ("entry" => "Text"),
  ("my husband"),
  ("my hubby"),
  ("my wife"),
  ("my wifey"),
  ("husband"),
  ("wife")
);
CreateDict(
    "name" => "LifeChangingEventsDict_JobRelated_Events_RelationsDict",
    "table" => "LifeChangingEventsDict_JobRelated_Events_RelationsDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_JobRelated_Events_Weak'
CreateTable(
  "LifeChangingEventsDict_JobRelated_Events_Weak__TABLE",
  ("entry" => "Text"),
  ("job"),
  ("jobless"),
  ("vacancy"),
  ("#job"),
  ("part-time"),
  ("part time"),
  ("parttime"),
  ("full time"),
  ("fulltime"),
  ("resignation"),
  ("hired"),
  ("fired"),
  ("layed off"),
  ("resigned")
);
CreateDict(
    "name" => "LifeChangingEventsDict_JobRelated_Events_Weak",
    "table" => "LifeChangingEventsDict_JobRelated_Events_Weak__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_JobRelated_Status_Weak'
CreateTable(
  "LifeChangingEventsDict_JobRelated_Status_Weak__TABLE",
  ("entry" => "Text"),
  ("job"),
  ("jobless"),
  ("vacancy"),
  ("#job"),
  ("work")
);
CreateDict(
    "name" => "LifeChangingEventsDict_JobRelated_Status_Weak",
    "table" => "LifeChangingEventsDict_JobRelated_Status_Weak__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_Marriage_Generic'
CreateTable(
  "LifeChangingEventsDict_Marriage_Generic__TABLE",
  ("entry" => "Text"),
  ("married"),
  ("marriage"),
  ("hitched"),
  ("aisle"),
  ("husband"),
  ("wife"),
  ("kids"),
  ("children"),
  ("wifey"),
  ("hubby")
);
CreateDict(
    "name" => "LifeChangingEventsDict_Marriage_Generic",
    "table" => "LifeChangingEventsDict_Marriage_Generic__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_Marriage_Weak'
CreateTable(
  "LifeChangingEventsDict_Marriage_Weak__TABLE",
  ("entry" => "Text"),
  ("married"),
  ("marriage"),
  ("wedding"),
  ("weddin"),
  ("hitched"),
  ("aisle")
);
CreateDict(
    "name" => "LifeChangingEventsDict_Marriage_Weak",
    "table" => "LifeChangingEventsDict_Marriage_Weak__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_Relocation'
CreateTable(
  "LifeChangingEventsDict_Relocation__TABLE",
  ("entry" => "Text"),
  ("moving to"),
  ("moving 2"),
  ("movin 2"),
  ("movin to"),
  ("moved to"),
  ("moved 2"),
  ("move outta"),
  ("move out of"),
  ("relocate"),
  ("relocating"),
  ("relocated"),
  ("shifted to"),
  ("shifting to"),
  ("shift to"),
  ("moving back to"),
  ("movin back to"),
  ("movin back 2"),
  ("moving back 2")
);
CreateDict(
    "name" => "LifeChangingEventsDict_Relocation",
    "table" => "LifeChangingEventsDict_Relocation__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeChangingEventsDict_divorceRelated_Events_AmbiguousPhrasesDict'
CreateTable(
  "LifeChangingEventsDict_divorceRelated_Events_AmbiguousPhrasesDict__TABLE",
  ("entry" => "Text"),
  ("#WishIWould"),
  ("about 2"),
  ("about to"),
  ("bout 2"),
  ("bout to"),
  ("can b"),
  ("can be"),
  ("decided 2"),
  ("goin 2"),
  ("goin to"),
  ("going 2"),
  ("going to"),
  ("gonna"),
  ("gotta"),
  ("think"),
  ("thibk"),
  ("have 2"),
  ("have to"),
  ("I ma"),
  ("might"),
  ("need 2"),
  ("need to"),
  ("plan to"),
  ("plannin 2"),
  ("plannin to"),
  ("planning 2"),
  ("planning to"),
  ("should"),
  ("think imma"),
  ("woulda"),
  ("whether"),
  ("if"),
  ("pretend")
);
CreateDict(
    "name" => "LifeChangingEventsDict_divorceRelated_Events_AmbiguousPhrasesDict",
    "table" => "LifeChangingEventsDict_divorceRelated_Events_AmbiguousPhrasesDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LifeEvents.dict'
CreateTable(
  "LifeEvents.dict__TABLE",
  ("entry" => "Text"),
  ("married"),
  ("marriage"),
  ("engaged"),
  ("engagement"),
  ("wedding"),
  ("weddin"),
  ("hitched"),
  ("aisle"),
  ("sonogram"),
  ("pregnant"),
  ("gave birth"),
  ("having kids"),
  ("having babies"),
  ("became a mom"),
  ("became a dad"),
  ("finish school"),
  ("finish college"),
  ("new job"),
  ("move"),
  ("moving to"),
  ("moving 2"),
  ("movin 2"),
  ("movin to"),
  ("moved to"),
  ("moved 2"),
  ("move outta"),
  ("move out of"),
  ("moving back"),
  ("movin back"),
  ("relocate"),
  ("relocating"),
  ("relocated"),
  ("shifted to"),
  ("shifting to"),
  ("shift to"),
  ("birthday"),
  ("bday"),
  ("b'day"),
  ("b'dae"),
  ("B-day"),
  ("b-dae"),
  ("bdae"),
  ("budday"),
  ("buddae"),
  ("happybirthday"),
  ("happybday"),
  ("happybudday"),
  ("happybdae"),
  ("many happy returns"),
  ("graduation"),
  ("graduated")
);
CreateDict(
    "name" => "LifeEvents.dict",
    "table" => "LifeEvents.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'LookingIntentDict'
CreateTable(
  "LookingIntentDict__TABLE",
  ("entry" => "Text"),
  ("looking at"),
  ("looked at"),
  ("looking for"),
  ("found"),
  ("trying to find")
);
CreateDict(
    "name" => "LookingIntentDict",
    "table" => "LookingIntentDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Luggage_Dict'
CreateTable(
  "Luggage_Dict__TABLE",
  ("entry" => "Text"),
  ("Backpacks"),
  ("backpack"),
  ("Briefcases"),
  ("Briefcase"),
  ("Diaper Bag"),
  ("Waist Pack"),
  ("Gym Bag"),
  ("Laptop Bag"),
  ("laptop Case"),
  ("Luggage"),
  ("Messenger Bag"),
  ("Umbrella"),
  ("Luggage Cart"),
  ("Luggage Lock"),
  ("Luggage Scale"),
  ("Luggage Strap"),
  ("Luggage Tag"),
  ("Luggage Tags"),
  ("Packing Organizers"),
  ("Passport Cover"),
  ("Passport Wallet"),
  ("Shoe Bag"),
  ("Travel Wallets")
);
CreateDict(
    "name" => "Luggage_Dict",
    "table" => "Luggage_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_Adversary_ConjunctionsPreps_Dict'
CreateTable(
  "MET_Adversary_ConjunctionsPreps_Dict__TABLE",
  ("entry" => "Text"),
  ("even though"),
  ("although"),
  ("though"),
  ("in spite of"),
  ("while"),
  ("whereas"),
  ("despite"),
  ("however"),
  ("nonetheless"),
  ("nevertheless"),
  ("on the other hand"),
  ("in contrast"),
  ("on the contrary"),
  ("but"),
  ("yet")
);
CreateDict(
    "name" => "MET_Adversary_ConjunctionsPreps_Dict",
    "table" => "MET_Adversary_ConjunctionsPreps_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_Conditional_ConjunctionsPreps_Dict'
CreateTable(
  "MET_Conditional_ConjunctionsPreps_Dict__TABLE",
  ("entry" => "Text"),
  ("if"),
  ("unless"),
  ("even if"),
  ("providing that"),
  ("provided that"),
  ("in case"),
  ("whether or not"),
  ("only if"),
  ("otherwise"),
  ("or else")
);
CreateDict(
    "name" => "MET_Conditional_ConjunctionsPreps_Dict",
    "table" => "MET_Conditional_ConjunctionsPreps_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_Confused'
CreateTable(
  "MET_Confused__TABLE",
  ("entry" => "Text"),
  ("wtf"),
  ("why would"),
  ("why do"),
  ("why does"),
  ("why they"),
  ("why not"),
  ("why did"),
  ("why the"),
  ("why even"),
  ("why everyone"),
  ("why everybody"),
  ("why was"),
  ("why wasn't"),
  ("why wasnt"),
  ("why even"),
  ("why is"),
  ("why on earth"),
  ("why tho"),
  ("what happened"),
  ("who the fuck is"),
  ("confused"),
  ("piece of shit"),
  ("should name"),
  ("understand why"),
  ("they should"),
  ("not get it"),
  ("don't get it"),
  ("dont get it"),
  ("not getting it"),
  ("get why"),
  ("figure out why"),
  ("should be named"),
  ("should be called"),
  ("about what"),
  ("who is John Carter"),
  ("who the fuck is John Carter")
);
CreateDict(
    "name" => "MET_Confused",
    "table" => "MET_Confused__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_ConjunctionsPreps_Dict'
CreateTable(
  "MET_ConjunctionsPreps_Dict__TABLE",
  ("entry" => "Text"),
  ("until"),
  ("after"),
  ("before"),
  ("when"),
  ("while"),
  ("since"),
  ("once"),
  ("whenever"),
  ("as soon as"),
  ("as long as"),
  ("by the time"),
  ("because"),
  ("as"),
  ("since"),
  ("inasmuch as"),
  ("now that"),
  ("as long as"),
  ("such that"),
  ("that"),
  ("so that"),
  ("in order that"),
  ("then"),
  ("next"),
  ("after that"),
  ("following that"),
  ("before that"),
  ("afterwards"),
  ("meanwhile"),
  ("beforehand"),
  ("therefore"),
  ("consequently"),
  ("during"),
  ("after"),
  ("before"),
  ("since"),
  ("until"),
  ("upon"),
  ("because of"),
  ("due to"),
  ("where")
);
CreateDict(
    "name" => "MET_ConjunctionsPreps_Dict",
    "table" => "MET_ConjunctionsPreps_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_ConjunctivePunct_Dict'
CreateTable(
  "MET_ConjunctivePunct_Dict__TABLE",
  ("entry" => "Text"),
  (". "),
  (";"),
  (",")
);
CreateDict(
    "name" => "MET_ConjunctivePunct_Dict",
    "table" => "MET_ConjunctivePunct_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_EnglishClues_Dict'
CreateTable(
  "MET_EnglishClues_Dict__TABLE",
  ("entry" => "Text"),
  ("and"),
  ("a"),
  ("an"),
  ("about"),
  ("am"),
  ("are"),
  ("as"),
  ("at"),
  ("be"),
  ("by"),
  ("for"),
  ("from"),
  ("how"),
  ("in"),
  ("is"),
  ("it"),
  ("of"),
  ("on"),
  ("or"),
  ("that"),
  ("the"),
  ("this"),
  ("to"),
  ("was"),
  ("what"),
  ("when"),
  ("where"),
  ("who"),
  ("how"),
  ("will"),
  ("with"),
  ("the"),
  ("he"),
  ("she"),
  ("we"),
  ("they"),
  ("you"),
  ("new"),
  ("day"),
  ("looks"),
  ("seems"),
  ("is"),
  ("good"),
  ("bad"),
  ("yet"),
  ("and"),
  ("off"),
  ("see"),
  ("wtf"),
  ("movie"),
  ("lol")
);
CreateDict(
    "name" => "MET_EnglishClues_Dict",
    "table" => "MET_EnglishClues_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_ExcludeClues'
CreateTable(
  "MET_ExcludeClues__TABLE",
  ("entry" => "Text"),
  ("rotten tomatoes")
);
CreateDict(
    "name" => "MET_ExcludeClues",
    "table" => "MET_ExcludeClues__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_Negation_Dict'
CreateTable(
  "MET_Negation_Dict__TABLE",
  ("entry" => "Text"),
  ("don\\t"),
  ("dont"),
  ("won't"),
  ("wont"),
  ("not"),
  ("nothing"),
  ("never"),
  ("isn\\t"),
  ("isnt")
);
CreateDict(
    "name" => "MET_Negation_Dict",
    "table" => "MET_Negation_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_NegativeTags_Cast_Dict'
CreateTable(
  "MET_NegativeTags_Cast_Dict__TABLE",
  ("entry" => "Text"),
  ("#worstactorever")
);
CreateDict(
    "name" => "MET_NegativeTags_Cast_Dict",
    "table" => "MET_NegativeTags_Cast_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_NegativeTags_Movie_Dict'
CreateTable(
  "MET_NegativeTags_Movie_Dict__TABLE",
  ("entry" => "Text"),
  ("#worstmovieever"),
  ("#WorstComicBookMovieEver"),
  ("#WorstMovies"),
  ("#noonewantstoseeit"),
  ("#worstactorever"),
  ("#terriblemovies"),
  ("#shitfilm"),
  (" #worldsworstmovie"),
  ("#badmoviedecisions"),
  ("#dumbmovie"),
  ("#dumbmovietitles"),
  ("#worstmovieever"),
  ("#dumbassmovie"),
  ("#worstmovie"),
  ("#fuckthismovie"),
  ("#awfulmovie"),
  ("#badfilms"),
  ("#badmovie"),
  ("#badmovies"),
  ("#badfilm"),
  ("#moviesruined"),
  ("#horriblemovie"),
  ("#filmsihavenointerestinseeing"),
  ("#bored"),
  ("#thismoviesucks"),
  ("#badmoviesequal"),
  ("#horrific"),
  ("#wtf"),
  ("#DontWasteYourMoney"),
  ("#ThingsThatMakeMeSMH"),
  ("#lackingcreativity"),
  ("#stupid"),
  ("#countmeout")
);
CreateDict(
    "name" => "MET_NegativeTags_Movie_Dict",
    "table" => "MET_NegativeTags_Movie_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_OtherNegative_Dict'
CreateTable(
  "MET_OtherNegative_Dict__TABLE",
  ("entry" => "Text"),
  ("zero interest"),
  ("thumbs down"),
  ("the hell"),
  ("annoying"),
  ("fucked up"),
  ("stupid"),
  ("dumb"),
  ("sucks"),
  ("lame"),
  ("hated"),
  ("hate"),
  ("stupid"),
  ("stupidest"),
  ("hell"),
  ("wtf"),
  ("wth"),
  ("no interest")
);
CreateDict(
    "name" => "MET_OtherNegative_Dict",
    "table" => "MET_OtherNegative_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_OtherPositive_Dict'
CreateTable(
  "MET_OtherPositive_Dict__TABLE",
  ("entry" => "Text"),
  ("must see"),
  ("must watch"),
  ("thumbs up"),
  ("can't wait"),
  ("cant wait"),
  ("the best movie"),
  ("the movie to see")
);
CreateDict(
    "name" => "MET_OtherPositive_Dict",
    "table" => "MET_OtherPositive_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_PositiveTags_Cast_Dict'
CreateTable(
  "MET_PositiveTags_Cast_Dict__TABLE",
  ("entry" => "Text"),
  ("#moviestar")
);
CreateDict(
    "name" => "MET_PositiveTags_Cast_Dict",
    "table" => "MET_PositiveTags_Cast_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_PositiveTags_Dict'
CreateTable(
  "MET_PositiveTags_Dict__TABLE",
  ("entry" => "Text"),
  ("#goseeit"),
  ("#goseethismovie"),
  ("#goseenow"),
  ("#cantwait"),
  ("#cantwaittoseeit"),
  ("#cantwaittoseeitwithyou"),
  ("#bestmovieever"),
  ("#bestmovieofalltime"),
  ("#bestmovie"),
  ("#bestfilm"),
  ("#bestmovieIveseeninawhile"),
  ("#best"),
  ("#lovemovies"),
  ("#favefilm"),
  ("#myfavoritemovie"),
  ("#newfavoritemovie"),
  ("#awesome"),
  ("#superfilm"),
  ("#powerfulmovie"),
  (" #goodmovie"),
  ("#cutestmovie"),
  ("#cutestmovieever"),
  ("#americasfuturefavoritemovie"),
  ("#newfavoritemovie"),
  ("#lovescarymovies"),
  ("#favoritemovie"),
  ("#lovethismovie"),
  ("#greatfilm"),
  ("greatfilms"),
  ("greatmovie"),
  ("greatmovies"),
  ("#mustseemovie"),
  ("#intensemovie"),
  ("#mustseemoviesof2012"),
  ("#mustwatchmovie"),
  ("#somanygoodmovies"),
  ("#decentfilm"),
  ("#amazingmovie"),
  ("#damngoodmovie"),
  ("#moviestowatch"),
  ("#suchagoodmovie"),
  ("#cutestmovieoftheyear"),
  ("#dope"),
  ("#movieoftheyear"),
  ("#perfectmovie"),
  ("#butsogood"),
  ("#lovedit"),
  ("#bigfan"),
  ("#highlyrecommended"),
  ("#bestmoviemade"),
  ("#bestmoviesequal"),
  ("#goodassmovie"),
  ("#badassmovie"),
  ("#fantastic"),
  ("#amazing"),
  ("#fantasticmovie"),
  ("#countmein")
);
CreateDict(
    "name" => "MET_PositiveTags_Dict",
    "table" => "MET_PositiveTags_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_VeryNegative'
CreateTable(
  "MET_VeryNegative__TABLE",
  ("entry" => "Text"),
  ("shittiest"),
  ("give me a reason"),
  ("piece of shit"),
  ("pile of wank"),
  ("who gives a"),
  ("wasted"),
  ("a waste"),
  ("tired of"),
  ("so dumb"),
  ("a dumb"),
  ("is dumb"),
  ("trash"),
  ("zero interest"),
  ("thumbs down"),
  ("to hell"),
  ("annoying"),
  ("fucked"),
  ("is crap"),
  ("of crap"),
  ("steaming shit"),
  ("a joke"),
  ("stupid"),
  ("dumb"),
  ("sucks"),
  ("lame"),
  ("hated"),
  ("hate"),
  ("stupid"),
  ("stupidest"),
  ("wtf"),
  ("wth"),
  ("no interest"),
  ("worst"),
  ("throw up"),
  ("threw up"),
  ("ruined it"),
  ("ruined the")
);
CreateDict(
    "name" => "MET_VeryNegative",
    "table" => "MET_VeryNegative__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MET_VeryPositiveDict'
CreateTable(
  "MET_VeryPositiveDict__TABLE",
  ("entry" => "Text"),
  ("must see"),
  ("must watch"),
  ("thumbs up"),
  ("can't wait"),
  ("cant wait"),
  ("the best movie"),
  ("the movie to see"),
  ("best movie"),
  ("best movies"),
  ("best film"),
  ("the best"),
  ("loved it"),
  ("loved this movie"),
  ("loved this film"),
  ("loved the movie"),
  ("enjoyed it"),
  ("excellent"),
  ("beautiful"),
  ("not too bad"),
  ("wasn\\t too bad"),
  ("wasnt too bad"),
  ("isnt too bad"),
  ("isn't too bad"),
  ("good movie"),
  ("good movies"),
  ("good film"),
  ("awsome movie"),
  ("awesome film"),
  ("dinner and a movie"),
  ("the shit"),
  ("brilliant"),
  ("good ass movie"),
  ("bad ass movie"),
  ("must go see"),
  ("excited that"),
  ("excited to"),
  ("so excited"),
  ("so happy"),
  ("looks great"),
  ("looks good"),
  ("goona rule")
);
CreateDict(
    "name" => "MET_VeryPositiveDict",
    "table" => "MET_VeryPositiveDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_ActionVerb_Dict'
CreateTable(
  "ME_ActionVerb_Dict__TABLE",
  ("entry" => "Text"),
  ("go to"),
  ("see"),
  ("watch"),
  ("seeing"),
  ("watching")
);
CreateDict(
    "name" => "ME_ActionVerb_Dict",
    "table" => "ME_ActionVerb_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_AfterHighlyAmbigTitleOnly_Dict'
CreateTable(
  "ME_AfterHighlyAmbigTitleOnly_Dict__TABLE",
  ("entry" => "Text"),
  ("movie"),
  ("trailer"),
  ("TV"),
  ("ad"),
  ("teaser"),
  ("film"),
  ("2012"),
  ("commercial"),
  ("looks"),
  ("spot"),
  ("clip")
);
CreateDict(
    "name" => "ME_AfterHighlyAmbigTitleOnly_Dict",
    "table" => "ME_AfterHighlyAmbigTitleOnly_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_AfterHighlyAmbigTitle_Dict'
CreateTable(
  "ME_AfterHighlyAmbigTitle_Dict__TABLE",
  ("entry" => "Text"),
  ("badly"),
  ("so"),
  ("now"),
  ("tomorrow"),
  ("soon"),
  ("too"),
  ("yet"),
  ("and"),
  ("but"),
  ("though"),
  ("although"),
  ("at"),
  (","),
  (";"),
  ("."),
  ("!"),
  ("-"),
  ("?")
);
CreateDict(
    "name" => "ME_AfterHighlyAmbigTitle_Dict",
    "table" => "ME_AfterHighlyAmbigTitle_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_Ambiguous_Movies_Dict'
CreateTable(
  "ME_Ambiguous_Movies_Dict__TABLE",
  ("entry" => "Text"),
  ("A Warrior's Heart"),
  ("Warrior's Heart"),
  ("Warriors Heart"),
  ("Answers to Nothing"),
  ("Redline"),
  ("Sleeping Beauty"),
  ("We Need To Talk About Kevin"),
  ("Cook County"),
  ("Don 2"),
  ("Pina"),
  ("The Iron Lady"),
  ("Iron Lady"),
  ("the iron lady"),
  ("ironlady"),
  ("Loosies"),
  ("The Devil Inside"),
  ("Devil Inside"),
  ("devilinside"),
  ("thedevilinside"),
  ("Roadie"),
  ("Beauty and the Beast 3D"),
  ("Red Tails"),
  ("The Grey"),
  ("thegrey"),
  ("The Woman in Black"),
  ("thewomaninblack"),
  ("womaninblack"),
  ("The Innkeepers"),
  ("Big Miracle"),
  ("The Vow"),
  ("thevow"),
  ("Hansel and Gretel:  Witch Hunters"),
  ("Witch Hunters"),
  ("Hansel and Gretel"),
  ("Project X"),
  ("ProjectX"),
  ("Dr. Seuss' The Lorax"),
  ("The Lorax"),
  ("Casa de Mi Padre"),
  ("The Deep Blue Sea"),
  ("Iron Sky"),
  ("Scary Movie 5"),
  ("Scary Movie5"),
  ("Scary MovieV"),
  ("Scary Movie V"),
  ("Darling Companion"),
  ("The Five-Year Engagement"),
  ("The five year engagement"),
  ("Dark Shadows"),
  ("What to Expect When You're Expecting"),
  ("Titanic in 3D"),
  ("Titanic"),
  ("The Dictator")
);
CreateDict(
    "name" => "ME_Ambiguous_Movies_Dict",
    "table" => "ME_Ambiguous_Movies_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_BeforeHighlyAmbigTitleOnly_Dict'
CreateTable(
  "ME_BeforeHighlyAmbigTitleOnly_Dict__TABLE",
  ("entry" => "Text"),
  ("Pixar's"),
  ("Disney's"),
  ("DisneyPixar's"),
  ("scene in"),
  ("spot for"),
  ("scene from"),
  ("trailer for"),
  ("preview of"),
  ("preview for"),
  ("trailer of"),
  ("commercial of"),
  ("commercial for"),
  ("the movie"),
  ("the film"),
  ("add for"),
  ("cast of"),
  ("movie :"),
  ("movies :"),
  ("film :"),
  ("films :")
);
CreateDict(
    "name" => "ME_BeforeHighlyAmbigTitleOnly_Dict",
    "table" => "ME_BeforeHighlyAmbigTitleOnly_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_ConditionalCluesDict'
CreateTable(
  "ME_ConditionalCluesDict__TABLE",
  ("entry" => "Text"),
  ("wonder if"),
  ("know if")
);
CreateDict(
    "name" => "ME_ConditionalCluesDict",
    "table" => "ME_ConditionalCluesDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_Director_Dict'
CreateTable(
  "ME_Director_Dict__TABLE",
  ("entry" => "Text"),
  ("Christopher Nolan"),
  ("Marc Webb"),
  ("Asger Leth"),
  ("Michael F. Sears"),
  ("Matther Leutwyler"),
  ("Takeshi Kitano"),
  ("Emilio Portes"),
  ("Takeshi Koike"),
  ("Julia Leigh"),
  ("Garry Marshall"),
  ("David Gordon Green"),
  ("Aaron Harvey"),
  ("Mark Pellington"),
  ("Agnieszka Holland "),
  ("Maneesh Sharma"),
  ("Tomas Alfredson"),
  ("Lynne Ramsay"),
  ("Jason Reitman"),
  ("Charles Evans"),
  ("Mike Mitchell"),
  ("Guy Ritchie"),
  ("Roman Polanski"),
  ("David Pomes"),
  ("Alex Stapleton"),
  ("Brad Bird"),
  ("David Fincher"),
  ("Steven Spielberg"),
  ("Rodrigo Garcia"),
  ("Cameron Crowe"),
  ("Farhan Akhtar"),
  ("Angelina Jolie"),
  ("Wim Wenders"),
  ("Chris Gorak"),
  ("Steven Spielberg"),
  ("Stephen Daldry"),
  ("Edward Burns"),
  ("Dee Rees"),
  ("Asghar Farhadi"),
  ("Gaby Dellal"),
  ("Phyllida Lloyd"),
  ("Michael Corrente"),
  ("William Brent Bell"),
  ("Martin Guigui"),
  ("Michael Cuesta"),
  ("Baltasar Kormakur"),
  ("Xavier Gens"),
  ("Todd Graff"),
  ("M�ns M�rlind"),
  ("Bj�rn Stein"),
  ("Anthony Hemingway"),
  ("Ralph Fiennes"),
  ("Steven Soderbergh"),
  ("Adam Lipsius"),
  ("Julie Ann Robinson"),
  ("Joe Carnahan"),
  ("David Murray"),
  ("Eric Roth"),
  ("Ron Semiao"),
  ("Jerry Kramer"),
  ("Dick Schaap"),
  ("Don Handfield"),
  ("Josh Trank"),
  ("James Watkins"),
  ("Ti West"),
  ("Ken Kwapis"),
  ("Brad Peyton"),
  ("Daniel Espinosa"),
  ("Michael Sucsy"),
  ("David Mackenzie"),
  ("Mark Neveldine"),
  ("Brian Taylor"),
  ("McG"),
  ("Hiromasa Yonebayashi"),
  ("Gary Rydstrom"),
  ("Rebecca Frayn"),
  ("Mike McCoy"),
  ("Scott Waugh"),
  ("David Wain"),
  ("Tyler Perry"),
  ("Michael A. Nickles"),
  ("Tommy Wirkola"),
  ("Nima Nourizadeh"),
  ("Chris Reynaud"),
  ("Kyle Balda"),
  ("Jay Duplass"),
  ("Mark Duplass"),
  ("Paul Weitz"),
  ("Andrew Stanton"),
  ("James McTeigue"),
  ("Chris Kentis"),
  ("Laura Lau"),
  ("Tim Story"),
  ("Cynthia Lowen"),
  ("Gabriele Muccino"),
  ("Lasse Hallstr�m"),
  ("Joseph Cedar"),
  ("David Gelb"),
  ("Phil Lord"),
  ("Chris Miller"),
  ("Tarsem Singh"),
  ("Roger Donaldson"),
  ("Jim Field Smith"),
  ("Matt Piedmont"),
  ("Gary Ross"),
  ("Brian Robbins"),
  ("Jonathan Liebesman"),
  ("Terence Davies"),
  ("Michael Dowse"),
  ("Justin Kurzel"),
  ("Will Finn"),
  ("Dan St. Pierre"),
  ("Juan Carlos Fresnadillo"),
  ("Timo Vuorensola"),
  ("Jon Hurwitz"),
  ("Hayden Schlossberg"),
  ("Whit Stillman"),
  ("Mabroul El Mechri"),
  ("Bobby Farrelly"),
  ("Peter Farrelly"),
  ("Drew Goddard"),
  ("Walter Hill"),
  ("David Zucker"),
  ("Mark Tonderai"),
  ("Lorene Scafaria"),
  ("Scott Hicks"),
  ("Alastair Fothergill"),
  ("Mark Linfield"),
  ("Lawrence Kasdan"),
  ("Nicholas Stoller"),
  ("Boaz Yakin"),
  ("Joss Whedon"),
  ("John Madden"),
  ("Tim Burton"),
  ("Larry Charles"),
  ("Kirk Jones"),
  ("Peter Berg"),
  ("Barry Sonnenfeld"),
  ("Wes Anderson"),
  ("Mark Andrews"),
  ("Brenda Chapman"),
  ("Jon M. Chu"),
  ("Rupert Sanders"),
  ("James Cameron")
);
CreateDict(
    "name" => "ME_Director_Dict",
    "table" => "ME_Director_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_HighlyAmbiguous_Movies_Dict'
CreateTable(
  "ME_HighlyAmbiguous_Movies_Dict__TABLE",
  ("entry" => "Text"),
  ("Outrage"),
  ("New Year's Eve"),
  ("The Sitter"),
  ("In Darkness"),
  ("Young Adult"),
  ("Carnage"),
  ("The Darkest Hour"),
  ("War Horse"),
  ("Pariah"),
  ("A Separation"),
  ("The Divide"),
  ("Underworld:  Awakening"),
  ("Haywire"),
  ("16-Love"),
  ("16 Love"),
  ("16Love"),
  ("One For the Money"),
  ("Touchback"),
  ("Chronicle"),
  ("Safe House"),
  ("Perfect Sense"),
  ("This Means War"),
  ("Lookout"),
  ("Wanderlust"),
  ("Good Deeds"),
  ("Playback"),
  ("The Raven"),
  ("Silent House"),
  ("silenthouse"),
  ("Think Like a Man"),
  ("Mirror Mirror"),
  ("Butter"),
  ("Intruders"),
  ("Intent"),
  ("Damsels in Distress"),
  ("The Three Stooges"),
  ("The Cabin In The Woods"),
  ("Bullet To The Head"),
  ("House at the End of the Street"),
  ("The Lucky One"),
  ("Chimpanzee"),
  ("Safe"),
  ("Battleship"),
  ("G.I. Joe:  Retaliation"),
  ("G.I. Joe 2"),
  ("GI Joe"),
  ("G.I. Joe Retaliation"),
  ("GI Joe Retaliation"),
  ("Brave"),
  ("#Brave")
);
CreateDict(
    "name" => "ME_HighlyAmbiguous_Movies_Dict",
    "table" => "ME_HighlyAmbiguous_Movies_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_IntentTags_Dict'
CreateTable(
  "ME_IntentTags_Dict__TABLE",
  ("entry" => "Text"),
  ("#movieiwannasee"),
  ("#wannawatchthatmovie"),
  ("#imgoingtoseethatmovie"),
  ("#needtoseethismovie"),
  ("#movieiwannasee"),
  ("#havetoseeit"),
  ("#moviesicantwaittowatch")
);
CreateDict(
    "name" => "ME_IntentTags_Dict",
    "table" => "ME_IntentTags_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_IntentVerb_Dict'
CreateTable(
  "ME_IntentVerb_Dict__TABLE",
  ("entry" => "Text"),
  ("wanna"),
  ("want to"),
  ("gonna"),
  ("gotta"),
  ("gunna"),
  ("going to"),
  ("will"),
  ("I'll"),
  ("dying to"),
  ("can't wait"),
  ("cant wait"),
  ("cannot wait"),
  ("got to"),
  ("gotta"),
  ("love to"),
  ("planning to"),
  ("plan to"),
  ("plan on"),
  ("head to"),
  ("about to"),
  ("heading to"),
  ("who wants"),
  ("need to"),
  ("off to"),
  ("go"),
  ("take me to"),
  ("taking me to"),
  ("want to go"),
  ("can"),
  ("going with me"),
  ("agree"),
  ("come"),
  ("have to"),
  ("I'm"),
  ("am"),
  ("ready to"),
  ("someone to")
);
CreateDict(
    "name" => "ME_IntentVerb_Dict",
    "table" => "ME_IntentVerb_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_InterrogativeCluesDict'
CreateTable(
  "ME_InterrogativeCluesDict__TABLE",
  ("entry" => "Text"),
  ("?"),
  ("should I"),
  ("do you"),
  ("does anyone")
);
CreateDict(
    "name" => "ME_InterrogativeCluesDict",
    "table" => "ME_InterrogativeCluesDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

CreateDict(
    "name" => "ME_LA_Alias_Countries_Dict",
    "table" => "ME_LA_AliasToNormalized_Countries",
    "column" => "alias",
    "case" => "insensitive"
);
CreateDict(
    "name" => "ME_LA_Alias_NonUSCities_Dict",
    "table" => "ME_LA_AliasToNormalized_NonUSCities",
    "column" => "alias",
    "case" => "insensitive"
);
CreateDict(
    "name" => "ME_LA_Alias_USCities_Dict",
    "table" => "ME_LA_AliasToNormalized_Cities",
    "column" => "alias",
    "case" => "insensitive"
);
CreateDict(
    "name" => "ME_LA_Alias_USStates_Dict",
    "table" => "ME_LA_AliasToNormalized_States",
    "column" => "alias",
    "case" => "insensitive"
);
# Generated table for entries of inline dict 'ME_LA_AmbiguousCitiesDict'
CreateTable(
  "ME_LA_AmbiguousCitiesDict__TABLE",
  ("entry" => "Text"),
  ("SUCCESS"),
  ("HOUSE"),
  ("HOME"),
  ("MARS"),
  ("CASH"),
  ("NORTH"),
  ("WEST"),
  ("EAST"),
  ("MAN"),
  ("VAN"),
  ("EARTH"),
  ("CASA"),
  ("BAY"),
  ("BEACH"),
  ("BELL"),
  ("BELT"),
  ("BIEBER"),
  ("BETWEEN"),
  ("BLUE"),
  ("BOX"),
  ("BUSH"),
  ("CENTER"),
  ("CIRCLE"),
  ("COSMOS"),
  ("CROUCH"),
  ("DAY"),
  ("DISH"),
  ("EMPIRE"),
  ("GARDEN"),
  ("GAS"),
  ("GAY"),
  ("GLOBE"),
  ("GUY"),
  ("HOOD"),
  ("ISLAND"),
  ("JUPITER"),
  ("JUSTIN"),
  ("LANE"),
  ("KING"),
  ("ORION"),
  ("PARADISE"),
  ("PARK"),
  ("PINK"),
  ("RAINBOW"),
  ("TIME"),
  ("VENUS"),
  ("VAN"),
  ("WELCOME"),
  ("WHITE"),
  ("WHY"),
  ("WISE"),
  ("BLACK"),
  ("BLISS"),
  ("BLUE SKY"),
  ("CASTLE"),
  ("EVA"),
  ("FAITH"),
  ("GREEN"),
  ("GOLF"),
  ("LAKE"),
  ("MAY"),
  ("MOBILE"),
  ("UNIVERSITY"),
  ("WESTERN"),
  ("WEED"),
  ("WAR"),
  ("WING"),
  ("SWEET HOME"),
  ("STAR"),
  ("SUN"),
  ("ABERCROMBIE"),
  ("BOULEVARD"),
  ("HILLS"),
  ("HOPE"),
  ("HUNT"),
  ("INA"),
  ("LEE"),
  ("MANOR"),
  ("MILES"),
  ("MOUNTAIN"),
  ("ORANGE"),
  ("PETER"),
  ("PEARL"),
  ("POLO"),
  ("ROSE"),
  ("SECTION"),
  ("TOWER"),
  ("TIGER"),
  ("VALLEY"),
  ("AIRPORT"),
  ("ALEXANDER"),
  ("ALEX"),
  ("ALPHA"),
  ("AMO"),
  ("ADA"),
  ("ANGELS"),
  ("ANNA"),
  ("ARAB"),
  ("ARENA"),
  ("AVA"),
  ("BALL"),
  ("BATH"),
  ("BEAR"),
  ("BEE"),
  ("BLUNT"),
  ("CAVE"),
  ("CENTURY"),
  ("CHANCE"),
  ("CHASE"),
  ("CHRISTMAS"),
  ("COLLEGE"),
  ("COOL"),
  ("CORN"),
  ("DEAN"),
  ("FOREST"),
  ("FORKS"),
  ("FORD"),
  ("FRIEND"),
  ("FRIENDLY"),
  ("FRIENDSHIP"),
  ("GAP"),
  ("GOLDEN"),
  ("GRACE"),
  ("HAPPY"),
  ("HALL"),
  ("GUYS"),
  ("HAVEN"),
  ("ISLE"),
  ("INLAND"),
  ("JET"),
  ("JOY"),
  ("JUNIOR"),
  ("LIBERTY"),
  ("LONG"),
  ("LOVING"),
  ("LUNA"),
  ("MISSION"),
  ("OCEAN"),
  ("RIO"),
  ("RAY"),
  ("ROYAL"),
  ("TAYLOR"),
  ("TREASURE ISLAND"),
  ("THE HILLS"),
  ("THE VILLAGE"),
  ("UNIVERSAL"),
  ("TWIN"),
  ("WALL"),
  ("WALDO"),
  ("WAYNE"),
  ("WOOD"),
  ("WINTER"),
  ("YOUNG"),
  ("ACRE"),
  ("AIN"),
  ("ALICE"),
  ("ALLIGATOR"),
  ("ALMA"),
  ("ALOHA"),
  ("ALTO"),
  ("AMBER"),
  ("ALAMO"),
  ("ALTO"),
  ("AMA"),
  ("AMBER"),
  ("BATTLEFIELD"),
  ("BENT"),
  ("BLANKET"),
  ("BLUFF"),
  ("BRAVE"),
  ("BRIGHT"),
  ("BRUNO"),
  ("BROOK"),
  ("BUNKER"),
  ("CAMPUS"),
  ("CANYON"),
  ("CARLOS"),
  ("CARMEN"),
  ("CHERRY"),
  ("CHICO"),
  ("CLIFF"),
  ("CODY"),
  ("COLE"),
  ("COMFORT"),
  ("CROWN"),
  ("DRAKE"),
  ("FRANK"),
  ("FREEDOM"),
  ("GATE"),
  ("GOTHAM"),
  ("GROVE"),
  ("GYPSY"),
  ("HART"),
  ("HOMETOWN"),
  ("INTERIOR"),
  ("JAY"),
  ("KATY"),
  ("MANY"),
  ("MART"),
  ("MYSTIC"),
  ("FRONTIER"),
  ("GEM"),
  ("NORCO"),
  ("OAK"),
  ("PACIFIC"),
  ("PAGE"),
  ("PANDORA"),
  ("PENN"),
  ("PLAZA"),
  ("PLAIN"),
  ("POINT"),
  ("POWER"),
  ("PRAY"),
  ("PONY"),
  ("PRINCE"),
  ("REPUBLIC"),
  ("ROCKY"),
  ("ROMA"),
  ("SEASIDE"),
  ("SISTERS"),
  ("STRONG"),
  ("STRAWBERRY"),
  ("SUNSHINE"),
  ("TEMPLE"),
  ("TWILIGHT"),
  ("UNION"),
  ("UTOPIA"),
  ("WALLS"),
  ("WARD"),
  ("WARE"),
  ("WAVES"),
  ("WINK"),
  ("WINNER"),
  ("ZION"),
  ("FINGER"),
  ("FOX"),
  ("GATES"),
  ("GARY"),
  ("HULL"),
  ("HUMBLE"),
  ("IVY"),
  ("JAVA"),
  ("JEFF"),
  ("JESSIE"),
  ("KELLY"),
  ("KEVIN"),
  ("KEYS"),
  ("KIM"),
  ("MARVIN"),
  ("PAUL"),
  ("PERRY"),
  ("ROSS"),
  ("RUGBY"),
  ("SANDWICH"),
  ("SANDY"),
  ("SHELL"),
  ("SIMPSON"),
  ("SPRING"),
  ("SUNSET"),
  ("TEA"),
  ("VALE"),
  ("WELLS"),
  ("SCOTT"),
  ("LAKES"),
  ("ENTERPRISE")
);
CreateDict(
    "name" => "ME_LA_AmbiguousCitiesDict",
    "table" => "ME_LA_AmbiguousCitiesDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

CreateDict(
    "name" => "ME_LA_CitiesDict",
    "table" => "ME_LA_CityToState",
    "column" => "city",
    "case" => "insensitive"
);
CreateDict(
    "name" => "ME_LA_CountryDict",
    "table" => "ME_LA_PopulousNonUSCitiesToCountry",
    "column" => "country",
    "case" => "insensitive"
);
CreateDict(
    "name" => "ME_LA_CountryDict_Alias",
    "table" => "ME_LA_AliasToNormalized_Countries",
    "column" => "alias",
    "case" => "insensitive"
);
CreateDict(
    "name" => "ME_LA_PopulousNonUSCitiesDict",
    "table" => "ME_LA_PopulousNonUSCitiesToCountry",
    "column" => "city",
    "case" => "insensitive"
);
CreateDict(
    "name" => "ME_LA_StateAbbrvsDict",
    "table" => "ME_LA_StateToAbbrv",
    "column" => "abbrv",
    "case" => "insensitive"
);
CreateDict(
    "name" => "ME_LA_StatesDict",
    "table" => "ME_LA_StateToAbbrv",
    "column" => "state",
    "case" => "insensitive"
);
# Generated table for entries of inline dict 'ME_LA_USAbbrvDict'
CreateTable(
  "ME_LA_USAbbrvDict__TABLE",
  ("entry" => "Text"),
  ("United States"),
  ("US"),
  ("America"),
  ("U.S"),
  ("USA")
);
CreateDict(
    "name" => "ME_LA_USAbbrvDict",
    "table" => "ME_LA_USAbbrvDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_LikelyForeign_Dict'
CreateTable(
  "ME_LikelyForeign_Dict__TABLE",
  ("entry" => "Text"),
  ("la"),
  ("de"),
  ("il"),
  ("e"),
  ("si"),
  ("de"),
  ("del")
);
CreateDict(
    "name" => "ME_LikelyForeign_Dict",
    "table" => "ME_LikelyForeign_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_atDict'
CreateTable(
  "ME_MG_atDict__TABLE",
  ("entry" => "Text"),
  ("at"),
  ("in"),
  ("@")
);
CreateDict(
    "name" => "ME_MG_atDict",
    "table" => "ME_MG_atDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_genericTheater'
CreateTable(
  "ME_MG_genericTheater__TABLE",
  ("entry" => "Text"),
  ("theater"),
  ("theatre"),
  ("Regal")
);
CreateDict(
    "name" => "ME_MG_genericTheater",
    "table" => "ME_MG_genericTheater__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_gotoseePhrase'
CreateTable(
  "ME_MG_gotoseePhrase__TABLE",
  ("entry" => "Text"),
  ("going out 2 see"),
  ("going out to see"),
  ("going out 2 c"),
  ("going out to c"),
  ("go to see"),
  ("go and see"),
  ("go out and see"),
  ("to go see"),
  ("hit"),
  ("gooo see"),
  ("gooo c"),
  ("go see"),
  ("go c"),
  ("go 2"),
  ("go 2 see"),
  ("go out 2 see"),
  ("go out to see"),
  ("go catch"),
  ("went to see"),
  ("went to"),
  ("went to see"),
  ("heading out"),
  ("going out"),
  ("go to"),
  ("goin to see")
);
CreateDict(
    "name" => "ME_MG_gotoseePhrase",
    "table" => "ME_MG_gotoseePhrase__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_movieIfInTheater'
CreateTable(
  "ME_MG_movieIfInTheater__TABLE",
  ("entry" => "Text"),
  ("preview"),
  ("movie"),
  ("film"),
  ("flick"),
  ("is playing"),
  ("movies"),
  ("films"),
  ("cinema")
);
CreateDict(
    "name" => "ME_MG_movieIfInTheater",
    "table" => "ME_MG_movieIfInTheater__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_movieTheater'
CreateTable(
  "ME_MG_movieTheater__TABLE",
  ("entry" => "Text"),
  ("AMC"),
  ("Cinaplex")
);
CreateDict(
    "name" => "ME_MG_movieTheater",
    "table" => "ME_MG_movieTheater__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_movieWords'
CreateTable(
  "ME_MG_movieWords__TABLE",
  ("entry" => "Text"),
  ("movie"),
  ("flick"),
  ("film"),
  ("movies")
);
CreateDict(
    "name" => "ME_MG_movieWords",
    "table" => "ME_MG_movieWords__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_notAMC'
CreateTable(
  "ME_MG_notAMC__TABLE",
  ("entry" => "Text"),
  ("WalkingDead_AMC"),
  ("BreakingBad_AMC"),
  ("amc_x323")
);
CreateDict(
    "name" => "ME_MG_notAMC",
    "table" => "ME_MG_notAMC__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_otherTicketWords'
CreateTable(
  "ME_MG_otherTicketWords__TABLE",
  ("entry" => "Text"),
  ("sold out")
);
CreateDict(
    "name" => "ME_MG_otherTicketWords",
    "table" => "ME_MG_otherTicketWords__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_purchaseWords'
CreateTable(
  "ME_MG_purchaseWords__TABLE",
  ("entry" => "Text"),
  ("bought"),
  ("buy"),
  ("got"),
  ("purchase"),
  ("purchased")
);
CreateDict(
    "name" => "ME_MG_purchaseWords",
    "table" => "ME_MG_purchaseWords__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_ticketSyn'
CreateTable(
  "ME_MG_ticketSyn__TABLE",
  ("entry" => "Text"),
  ("ticket"),
  ("tickets"),
  ("tix")
);
CreateDict(
    "name" => "ME_MG_ticketSyn",
    "table" => "ME_MG_ticketSyn__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_twitterSpeakDefArticle'
CreateTable(
  "ME_MG_twitterSpeakDefArticle__TABLE",
  ("entry" => "Text"),
  ("dat"),
  ("that"),
  ("the"),
  ("this")
);
CreateDict(
    "name" => "ME_MG_twitterSpeakDefArticle",
    "table" => "ME_MG_twitterSpeakDefArticle__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_twitterSpeakGoing'
CreateTable(
  "ME_MG_twitterSpeakGoing__TABLE",
  ("entry" => "Text"),
  ("goin"),
  ("going")
);
CreateDict(
    "name" => "ME_MG_twitterSpeakGoing",
    "table" => "ME_MG_twitterSpeakGoing__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_twitterSpeakSee'
CreateTable(
  "ME_MG_twitterSpeakSee__TABLE",
  ("entry" => "Text"),
  ("see"),
  ("c"),
  ("saw"),
  ("watch")
);
CreateDict(
    "name" => "ME_MG_twitterSpeakSee",
    "table" => "ME_MG_twitterSpeakSee__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_twitterSpeakTake'
CreateTable(
  "ME_MG_twitterSpeakTake__TABLE",
  ("entry" => "Text"),
  ("take"),
  ("took"),
  ("taking")
);
CreateDict(
    "name" => "ME_MG_twitterSpeakTake",
    "table" => "ME_MG_twitterSpeakTake__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_twitterSpeakTo'
CreateTable(
  "ME_MG_twitterSpeakTo__TABLE",
  ("entry" => "Text"),
  ("2"),
  ("to")
);
CreateDict(
    "name" => "ME_MG_twitterSpeakTo",
    "table" => "ME_MG_twitterSpeakTo__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MG_you'
CreateTable(
  "ME_MG_you__TABLE",
  ("entry" => "Text"),
  ("you"),
  ("your")
);
CreateDict(
    "name" => "ME_MG_you",
    "table" => "ME_MG_you__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MovieCategClue_Dict'
CreateTable(
  "ME_MovieCategClue_Dict__TABLE",
  ("entry" => "Text"),
  ("storyline"),
  ("lines"),
  ("plot"),
  ("scene"),
  ("scenes"),
  ("situations"),
  ("scenario"),
  ("scenarios"),
  ("story"),
  ("pacing"),
  ("slow"),
  ("gimmick"),
  ("direction"),
  ("pace"),
  ("is about"),
  ("boring"),
  ("violent"),
  ("violence"),
  ("the part where"),
  ("the part when"),
  ("ending"),
  ("cast"),
  ("producer"),
  ("directed by"),
  ("starring"),
  ("stars"),
  ("plays"),
  ("perform"),
  ("pefroms"),
  ("performance"),
  ("acting"),
  ("female lead"),
  ("male lead"),
  ("male romantic lead"),
  ("reviewers"),
  ("performer"),
  ("actor"),
  ("actress"),
  ("actors"),
  ("crew"),
  ("filmmaker"),
  ("casting"),
  ("director"),
  ("character"),
  ("figure"),
  ("role"),
  ("trailer"),
  ("trailers"),
  ("footage"),
  ("preview"),
  ("commercial"),
  ("commercials"),
  ("previews"),
  ("tv spot"),
  ("tv add"),
  ("adds"),
  ("stunts"),
  ("stunning"),
  ("special effects"),
  ("visual effects"),
  ("explosions"),
  ("effects"),
  ("animation"),
  ("visually"),
  ("music"),
  ("sound track"),
  ("song"),
  ("soundtrack"),
  ("nomination"),
  ("nominate"),
  ("award"),
  ("front runner"),
  ("Oscar"),
  ("awards"),
  ("Golden Globes"),
  ("goldenglobes"),
  ("nominee"),
  ("winner"),
  ("nominating ballots"),
  ("voter"),
  ("rated"),
  ("rating"),
  ("poster"),
  ("stills"),
  ("release"),
  ("premiere")
);
CreateDict(
    "name" => "ME_MovieCategClue_Dict",
    "table" => "ME_MovieCategClue_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_MovieStudios_Dict'
CreateTable(
  "ME_MovieStudios_Dict__TABLE",
  ("entry" => "Text"),
  ("Warner Brothers"),
  ("Warner Bros."),
  ("Paramount"),
  ("20th Century Fox"),
  ("Disney"),
  ("Touchstone"),
  ("Columbia Pictures"),
  ("TriStar"),
  ("Universal")
);
CreateDict(
    "name" => "ME_MovieStudios_Dict",
    "table" => "ME_MovieStudios_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_Movie_Goers_Ambiguous_Dict'
CreateTable(
  "ME_Movie_Goers_Ambiguous_Dict__TABLE",
  ("entry" => "Text"),
  ("out to see"),
  ("heading out"),
  ("going out"),
  ("went to see")
);
CreateDict(
    "name" => "ME_Movie_Goers_Ambiguous_Dict",
    "table" => "ME_Movie_Goers_Ambiguous_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_Movie_Goers_ContextWords_Dict'
CreateTable(
  "ME_Movie_Goers_ContextWords_Dict__TABLE",
  ("entry" => "Text"),
  ("movie"),
  ("film")
);
CreateDict(
    "name" => "ME_Movie_Goers_ContextWords_Dict",
    "table" => "ME_Movie_Goers_ContextWords_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_Movie_Goers_Dict'
CreateTable(
  "ME_Movie_Goers_Dict__TABLE",
  ("entry" => "Text"),
  ("new movie"),
  ("new film"),
  ("to a movie"),
  ("to a film")
);
CreateDict(
    "name" => "ME_Movie_Goers_Dict",
    "table" => "ME_Movie_Goers_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_Movies_ContextTags_Dict'
CreateTable(
  "ME_Movies_ContextTags_Dict__TABLE",
  ("entry" => "Text"),
  ("AnswersToNothing"),
  ("nowwatching"),
  ("AWarriorsHeart"),
  ("pastorela"),
  ("JohnCarter"),
  ("missionimpossible")
);
CreateDict(
    "name" => "ME_Movies_ContextTags_Dict",
    "table" => "ME_Movies_ContextTags_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_Movies_ContextWords_Dict'
CreateTable(
  "ME_Movies_ContextWords_Dict__TABLE",
  ("entry" => "Text"),
  ("starring"),
  ("performance"),
  ("box office"),
  ("movie"),
  ("film"),
  ("clip"),
  ("trailer"),
  ("preview"),
  ("commercial"),
  ("watching"),
  ("watch"),
  ("watched"),
  ("see"),
  ("saw"),
  ("seen"),
  ("screening"),
  ("cast"),
  ("actor"),
  ("director"),
  ("actress"),
  ("actors"),
  ("preview"),
  ("viral"),
  ("ticket"),
  ("rating"),
  ("cinema"),
  ("theatre")
);
CreateDict(
    "name" => "ME_Movies_ContextWords_Dict",
    "table" => "ME_Movies_ContextWords_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_Movies_Nicknames_Dict'
CreateTable(
  "ME_Movies_Nicknames_Dict__TABLE",
  ("entry" => "Text"),
  ("The Hunger Games"),
  ("Hunger Games"),
  ("#hungergames"),
  ("#thehungergames"),
  ("The Dark Knight Rises"),
  ("Dark Knight Rises"),
  ("The Amazing Spider-man"),
  ("Amazing Spider-man"),
  ("amazing spiderman"),
  ("Man on a Ledge"),
  ("Pastorela"),
  ("I Melt With You"),
  ("Ladies Vs. Ricky Bahl"),
  ("Ladies Vs Ricky Bahl"),
  ("Tinker, Tailor, Soldier, Spy"),
  ("Tinker, Tailor"),
  ("Tinker Tailor"),
  ("Addiction Incorporated"),
  ("Alvin and the Chipmunks:  Chipwrecked"),
  ("Alvin and the Chipmunks"),
  ("Chipwrecked"),
  ("Alvin & the Chipmunks"),
  ("Alvin and the Chipmunks - Chipwrecked"),
  ("Sherlock Holmes: A Game of Shadows"),
  ("A Game of Shadows"),
  ("Sherlock Holmes 2"),
  ("Sherlock Holmes 2: A Game of Shadows"),
  ("Sherlock Holmes: A Game and Shadows"),
  ("Corman's World: Exploits of a Hollywood Rebel�"),
  ("Corman's World"),
  ("Mission:  Impossible - Ghost Protocol"),
  ("Mission Impossible"),
  ("Ghost Protocol"),
  ("MI4"),
  ("MI 4"),
  ("Mission Impossible Ghost Protocol"),
  ("MI4GP"),
  ("Mission Impossible: Ghost Protocol"),
  ("Mission Impossible - Ghost Protocol"),
  ("The Girl With The Dragon Tattoo"),
  ("Dragon Tattoo"),
  ("The Adventures of Tintin"),
  ("Tintin"),
  ("Tin Tin"),
  ("Albert Nobbs"),
  ("We Bought A Zoo"),
  ("In The Land of Blood and Honey"),
  ("Blood and Honey"),
  ("Extremely Loud and Incredibly Close"),
  ("Angels Crest"),
  ("Beneath the Darkness"),
  ("Joyful Noise"),
  ("Coriolanus"),
  ("Journey 2:  The Mysterious Island"),
  ("Journey 2"),
  ("Journey2"),
  ("Ghost Rider:  Spirit of Vengeance"),
  ("Ghost Rider"),
  ("ghostrider"),
  ("The Secret World of Arrietty"),
  ("Arrietty"),
  ("Ariety"),
  ("Arriety"),
  ("Arietty"),
  ("Act of Valor"),
  ("actofvalor"),
  ("Jeff Who Lives at Home"),
  ("Being Flynn"),
  ("John Carter"),
  ("johncarter"),
  ("John Carter of Mars"),
  ("JC Movie"),
  ("JCoM"),
  ("johncarterofmars"),
  ("Salmon Fishing in the Yemen"),
  ("Jiro Dreams of Sushi"),
  ("21 Jump Street"),
  ("21Jump St"),
  ("21 Jump St"),
  ("21 JumpStreet"),
  ("Wrath of the Titans"),
  ("WrathOfTheTitans"),
  ("Snowtown"),
  ("Dorothy of Oz"),
  ("American Reunion"),
  ("The Cold Light of Day"),
  ("Seeking a Friend for the End of the World"),
  ("The Avengers"),
  ("theavengers"),
  ("The Best Exotic Marigold Hotel"),
  ("Marigold Hotel"),
  ("Men In Black III"),
  ("MIB III"),
  ("MIB 3"),
  ("MIB3"),
  ("MIBIII"),
  ("Snow White and the Huntsman")
);
CreateDict(
    "name" => "ME_Movies_Nicknames_Dict",
    "table" => "ME_Movies_Nicknames_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_NegativeHint_Dict'
CreateTable(
  "ME_NegativeHint_Dict__TABLE",
  ("entry" => "Text"),
  ("doesnt"),
  ("dont"),
  ("wont"),
  ("don't"),
  ("wont"),
  ("won't"),
  ("dont think"),
  ("don't think"),
  ("not")
);
CreateDict(
    "name" => "ME_NegativeHint_Dict",
    "table" => "ME_NegativeHint_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_NotBeforeTitle'
CreateTable(
  "ME_NotBeforeTitle__TABLE",
  ("entry" => "Text"),
  ("a"),
  ("an"),
  ("rin"),
  ("not"),
  ("first")
);
CreateDict(
    "name" => "ME_NotBeforeTitle",
    "table" => "ME_NotBeforeTitle__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_NotBeforeTitleAdj'
CreateTable(
  "ME_NotBeforeTitleAdj__TABLE",
  ("entry" => "Text"),
  ("is"),
  ("are"),
  ("am"),
  ("b"),
  ("too"),
  ("so"),
  ("a"),
  ("not"),
  ("this"),
  ("these"),
  ("be")
);
CreateDict(
    "name" => "ME_NotBeforeTitleAdj",
    "table" => "ME_NotBeforeTitleAdj__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_OtherMediaMentions_Dict'
CreateTable(
  "ME_OtherMediaMentions_Dict__TABLE",
  ("entry" => "Text"),
  ("book"),
  ("novel"),
  ("toy"),
  ("action figure"),
  ("books"),
  ("game"),
  ("xbox"),
  ("playstation"),
  ("play station"),
  ("new games"),
  ("the games"),
  ("video games"),
  ("comics"),
  ("play"),
  ("read"),
  ("reading"),
  ("exhibition"),
  ("library"),
  ("bookstore"),
  ("issue"),
  ("reread"),
  ("leer"),
  ("volume"),
  ("programme"),
  ("cover"),
  ("gop"),
  ("rep"),
  ("republican"),
  ("representative"),
  ("ER"),
  ("E.R."),
  ("Brave Heart")
);
CreateDict(
    "name" => "ME_OtherMediaMentions_Dict",
    "table" => "ME_OtherMediaMentions_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_PostTitle_Dict'
CreateTable(
  "ME_PostTitle_Dict__TABLE",
  ("entry" => "Text"),
  ("see"),
  ("saw"),
  ("seen"),
  ("watch"),
  ("watched"),
  ("watching")
);
CreateDict(
    "name" => "ME_PostTitle_Dict",
    "table" => "ME_PostTitle_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_PrecedeTitle_Dict'
CreateTable(
  "ME_PrecedeTitle_Dict__TABLE",
  ("entry" => "Text"),
  ("see"),
  ("saw"),
  ("seen"),
  ("seeing"),
  ("watch"),
  ("watched"),
  ("watching"),
  ("movie"),
  ("film")
);
CreateDict(
    "name" => "ME_PrecedeTitle_Dict",
    "table" => "ME_PrecedeTitle_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_Role_Dict'
CreateTable(
  "ME_Role_Dict__TABLE",
  ("entry" => "Text"),
  ("Bane"),
  ("Ghul"),
  ("John Blake"),
  ("Jim Gordon"),
  ("Bruce Wayne"),
  ("Batman"),
  ("Selina Kyle"),
  ("Catwoman"),
  ("Gwen Stacy"),
  ("Peter Parker"),
  ("Spider-Man"),
  ("Curt Connors"),
  ("The Lizard"),
  ("Ben Parker"),
  ("Lydia"),
  ("Nick"),
  ("Joey"),
  ("Jack Dougherty"),
  ("David Englander"),
  ("Brooklyn"),
  ("Conor Sullivan"),
  ("Claire Sullivan"),
  ("Ryan"),
  ("Kate"),
  ("Frankie"),
  ("Marilyn"),
  ("Otomo as Beat Takeshi"),
  ("Mizuno"),
  ("Ishihara"),
  ("Padre Mundo"),
  ("Compadre Bulmaro"),
  ("Monja"),
  ("JP"),
  ("Sonoshee"),
  ("Frisbee"),
  ("Lucy"),
  ("Paul"),
  ("Stan Harris"),
  ("Laura"),
  ("Kim"),
  ("Tess Byrne"),
  ("Noah Griffith"),
  ("Slater"),
  ("Marisa Lewis"),
  ("Richard"),
  ("Ron"),
  ("Jonathan"),
  ("Leopold Socha"),
  ("Mundek Margulies"),
  ("Klara Keller"),
  ("Ricky Bahl"),
  ("Dimple Chaddha"),
  ("Raina Parulekar"),
  ("George Smiley"),
  ("Bill Haydon"),
  ("Ricki Tarr"),
  ("Eva Khatchadourian"),
  ("Franklin"),
  ("Kevin"),
  ("Mavis Gary"),
  ("Matt Freehauf"),
  ("Buddy Slade"),
  ("Himself"),
  ("Himself"),
  ("Dave"),
  ("Alvin"),
  ("Simon"),
  ("Theodore"),
  ("Eleanor"),
  ("Jeanette"),
  ("Brittany"),
  ("Simone "),
  ("Sherlock Holmes"),
  ("Dr. John Watson"),
  ("Madam Simza Heron"),
  ("Irene Adler"),
  ("Penelope Longstreet"),
  ("Nancy Cowan"),
  ("Alan Cowan"),
  ("Michael Longstreet "),
  ("Bump"),
  ("Sonny"),
  ("Abe"),
  ("Himself"),
  ("Himself"),
  ("Himself"),
  ("Himself"),
  ("Himself"),
  ("Himself"),
  ("Ethan Hunt"),
  ("William Brandt"),
  ("Benji Dunn"),
  ("Jane Carter"),
  ("Mikael Blomkvist"),
  ("Lisbeth Salander"),
  ("Henrik Vanger"),
  ("Martin Vanger  "),
  ("Tintin"),
  ("Captain Haddock"),
  ("Sir Francis Haddock"),
  ("Rackham"),
  ("Sakharine "),
  ("Viscount Yarrell"),
  ("Helen Dawes"),
  ("Joe Macken"),
  ("Dr. Holloran"),
  ("Albert Nobbs"),
  ("Benjamin Mee"),
  ("Kelly Foster"),
  ("Duncan Mee"),
  ("Devdas"),
  ("Don"),
  ("Nebojsa"),
  ("Ajla"),
  ("Danijel "),
  ("Herself"),
  ("Sean"),
  ("Natalie"),
  ("Ben"),
  ("Albert Narracott"),
  ("Ted Narracott"),
  ("Rose Narracott "),
  ("Thomas Schell"),
  ("Oskar Schell"),
  ("Linda Schell"),
  ("The Renter"),
  ("Alike"),
  ("Laura"),
  ("Bina"),
  ("Nader"),
  ("Simin"),
  ("Razieh"),
  ("Nate"),
  ("Ethan"),
  ("Angie"),
  ("Margaret Thatcher"),
  ("Denis Thatcher"),
  ("Bobby"),
  ("Lucy"),
  ("Sully"),
  ("Isabella Rossi"),
  ("Ben"),
  ("David"),
  ("Ely"),
  ("Travis"),
  ("Abby"),
  ("Jimmy"),
  ("Nikki"),
  ("Randy Stevens"),
  ("Eva"),
  ("Mickey"),
  ("Josh"),
  ("G.G. Sparrow"),
  ("Vi Rose Hill"),
  ("Olivia Hill"),
  ("Selene"),
  ("Eve"),
  ("Thomas"),
  ("Maj. William Mortamus"),
  ("Ryan"),
  ("Major Emanuelle Stance"),
  ("Virgilia"),
  ("Caius Martius Coriolanus"),
  ("Tullus Aufidius"),
  ("Aaron"),
  ("Paul"),
  ("Kenneth"),
  ("Coblenz"),
  ("Ally Mash"),
  ("Farrell Gambles"),
  ("Dave Mash"),
  ("Stephanie Plum"),
  ("Joe Morelli"),
  ("Jimmy Alpha"),
  ("Ranger"),
  ("Grandma Mazur"),
  ("Ottway"),
  ("Talget"),
  ("Diaz"),
  ("Scott Murphy"),
  ("Coach Hand"),
  ("Macy"),
  ("Arthur Kipps"),
  ("Mr. Daily"),
  ("Fisher"),
  ("Claire"),
  ("Luke"),
  ("Leane Rease-Jones"),
  ("Old Man"),
  ("Rachel Kramer"),
  ("Sean Anderson"),
  ("Hank Parsons"),
  ("Kailani"),
  ("Grandfather"),
  ("Mark Weston"),
  ("Tobin Frost"),
  ("Paige"),
  ("Leo"),
  ("Michael"),
  ("Susan"),
  ("Johnny Blaze"),
  ("Ghost Rider"),
  ("Moreau"),
  ("The Devil"),
  ("Lauren"),
  ("Arrietty"),
  ("Sho"),
  ("Homily"),
  ("J.C. Palmer"),
  ("Linda"),
  ("Eva"),
  ("George"),
  ("Lindsey"),
  ("Heidi"),
  ("Wesley Deeds"),
  ("Natalie"),
  ("Frank Lyons"),
  ("Brianna"),
  ("Julian"),
  ("Hansel"),
  ("Gretel"),
  ("Muriel"),
  ("Thomas"),
  ("J.B."),
  ("Costa"),
  ("Ted"),
  ("Audrey"),
  ("Norma"),
  ("Once-ler"),
  ("The Lorax"),
  ("Jeff"),
  ("Linda"),
  ("Pat"),
  ("Sharon"),
  ("Jonathan"),
  ("Jodie Flynn"),
  ("Denise"),
  ("Nick Flynn"),
  ("Powell"),
  ("Matai"),
  ("John Carter"),
  ("Tardos"),
  ("Emily"),
  ("Edgar Allen Poe"),
  ("Sarah"),
  ("John"),
  ("Peter"),
  ("Alex"),
  ("Stacie"),
  ("George"),
  ("Fred Jones"),
  ("Harriet Chetwode-Talbot"),
  ("Bridget Maxwell"),
  ("Uriel Shkolnik"),
  ("Eliezer Shkolnik"),
  ("Noa the Reporter"),
  ("Himself"),
  ("Himself"),
  ("Tom Hanson"),
  ("Jenko"),
  ("Schmidt"),
  ("Evil Queen"),
  ("Snow White"),
  ("Prince Andrew Alcott"),
  ("Will Gerard"),
  ("Laura Gerard"),
  ("Simon"),
  ("Brooke Swinkowski"),
  ("Boyd Bolton"),
  ("Kaitlen Pickler"),
  ("Laura Pickler"),
  ("Julie Emmet"),
  ("Armando Alvarez"),
  ("Onza"),
  ("Raul"),
  ("Katniss Everdeen"),
  ("Peeta Mellark"),
  ("Jack McCall"),
  ("Zeus"),
  ("Perseus"),
  ("Hades"),
  ("Hester Collyer"),
  ("Freddie Page"),
  ("Doug Glatt"),
  ("Eva"),
  ("Ross Rhea"),
  ("Jamie Vlassakis"),
  ("John Bunting"),
  ("Dorothy"),
  ("Tugg"),
  ("Marshall Mallow"),
  ("Scarecrow"),
  ("Tin Man"),
  ("Lion"),
  ("John Farrow"),
  ("Susanna"),
  ("Father Antonio"),
  ("Renate Richter"),
  ("James Washington"),
  ("Michelle Flaherty-Levenstein"),
  ("Steve Stifler"),
  ("Mia"),
  ("Violet"),
  ("Charlie"),
  ("Lily"),
  ("Martin"),
  ("Will Shaw"),
  ("Lydia"),
  ("Mother Superior"),
  ("Larry"),
  ("Moe"),
  ("Curly"),
  ("Steve Hadley"),
  ("Richard Sitterson"),
  ("Jimmy Bobo"),
  ("Keegan"),
  ("Marcus Baptiste"),
  ("Cindy Campbell"),
  ("Mahalik"),
  ("Brenda Meeks"),
  ("Elissa"),
  ("Sarah"),
  ("Penny"),
  ("Dodge"),
  ("Diane"),
  ("Logan Thibault"),
  ("Beth Clayton"),
  ("Nana"),
  ("Beth Winter"),
  ("Joseph Winter"),
  ("Penny Alexander"),
  ("Russell"),
  ("Tom Solomon"),
  ("Violet Barnes"),
  ("Luke Wright"),
  ("Alex Rosen"),
  ("Mei"),
  ("Clint"),
  ("Hawkeye"),
  ("Tony Stark"),
  ("Ironman"),
  ("Natasha"),
  ("Black Widow"),
  ("Captain America"),
  ("Thor"),
  ("Bruce Banner"),
  ("Hulk"),
  ("Phil Coulson"),
  ("Nick Fury"),
  ("Maria Hill"),
  ("Loki"),
  ("Muriel"),
  ("Douglas"),
  ("Evelyn"),
  ("Barnabas Collins"),
  ("Angelique Bouchard"),
  ("Elizabeth Collins Stoddard"),
  ("Herself"),
  ("General Aladeen"),
  ("Wendy"),
  ("Rosie"),
  ("Jules"),
  ("Ramsey"),
  ("Admiral Shane"),
  ("Stone Hopper"),
  ("Alex Hopper"),
  ("Samantha"),
  ("Agent J"),
  ("Agent K"),
  ("Young Agent K"),
  ("Young Agent Oh"),
  ("Oh"),
  ("Zed"),
  ("Princess"),
  ("Queen"),
  ("Lord MacGuffin"),
  ("Captain Duke Hauser"),
  ("Joe Colton"),
  ("Roadblock"),
  ("Snow White"),
  ("The Hunstman"),
  ("Queen"),
  ("Jack Dawson"),
  ("Rose"),
  ("Caledon")
);
CreateDict(
    "name" => "ME_Role_Dict",
    "table" => "ME_Role_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_SingleActionHint_Dict'
CreateTable(
  "ME_SingleActionHint_Dict__TABLE",
  ("entry" => "Text"),
  ("heading to"),
  ("head to"),
  ("going to"),
  ("out to")
);
CreateDict(
    "name" => "ME_SingleActionHint_Dict",
    "table" => "ME_SingleActionHint_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_SpamCluesDict'
CreateTable(
  "ME_SpamCluesDict__TABLE",
  ("entry" => "Text"),
  ("sexy"),
  ("nude"),
  ("porn"),
  ("must be 18"),
  ("must be eighteen"),
  ("order"),
  ("DVDscr"),
  ("free"),
  ("give-away"),
  ("giveaway"),
  ("give away"),
  ("download"),
  ("full movie"),
  ("prize"),
  ("win")
);
CreateDict(
    "name" => "ME_SpamCluesDict",
    "table" => "ME_SpamCluesDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_Star_Dict'
CreateTable(
  "ME_Star_Dict__TABLE",
  ("entry" => "Text"),
  ("Tom Hardy"),
  ("Liam Neeson"),
  ("Joseph Gordon"),
  ("Gary Oldman"),
  ("Chrtian Bale"),
  ("Christian Bale"),
  ("Anne Hathaway"),
  ("Anne Hathaway"),
  ("Emma Stone"),
  ("Andrew Garfield"),
  ("Andrew Garfield"),
  ("Rhys Ifans"),
  ("Rhys Ifans"),
  ("Martin Sheen"),
  ("Elizabeth Banks"),
  ("Sam Worthington"),
  ("Jamie Bell"),
  ("Edward Burns"),
  ("Ed Harris"),
  ("Ashley Green"),
  ("Kellan Lutz"),
  ("Gabrielle Anwar"),
  ("Dane Cook"),
  ("Elizabeth Cook"),
  ("Julie Benz"),
  ("Barbara Hershey"),
  ("Takeshi Kitano"),
  ("Kippei Shiina"),
  ("Ryo Kase"),
  ("Carolos Cobos"),
  ("Eduardo Espana"),
  ("Ana Serradilla"),
  ("Takuya Kimura"),
  ("Yu Aoi"),
  ("Tadanobu Asano"),
  ("Emily Browning"),
  ("Zac Efron"),
  ("Robert De Niro"),
  ("Katherine Heigl"),
  ("Sarah Jessica Parker"),
  ("Jessica Biel"),
  ("Jonah Hill"),
  ("Max Records"),
  ("Ari Graynor"),
  ("Thomas Jane"),
  ("Jeremy Piven"),
  ("Rob Lowe"),
  ("Robert Wieckiewicz"),
  ("Benno F�rmann"),
  ("Agnieszka Grochowska"),
  ("Ranveer Singh"),
  ("Parineeta Chopra"),
  ("Dippanita Sharma"),
  ("Gary Oldman"),
  ("Colin Firth"),
  ("Tom Hardy"),
  ("Tilda Swinton"),
  ("John C. Reilly"),
  ("Ezra Miller"),
  ("Charlize Theron"),
  ("Patton Oswalt"),
  ("Patrick Wilson"),
  ("Danny Abel"),
  ("Phil Barnett"),
  ("Jason Lee"),
  ("Justin Long"),
  ("Matthew Gray Gubler"),
  ("Jesse McCartney"),
  ("Amy Poehler"),
  ("Anna Faris"),
  ("Christina Applegate"),
  ("Alan Tudyk"),
  ("Robert Downey"),
  ("Jude Law"),
  ("Noomi Rapace"),
  ("Rachel McAdams"),
  ("Jodie Foster"),
  ("Kate Winslet"),
  ("Christoph Waltz"),
  ("John C. Reilly"),
  ("Anson Mount"),
  ("Xander Berkeley"),
  ("Ryan Donowho"),
  ("Robert De Niro"),
  ("Quentin Tarantino"),
  ("Martin Scorsese"),
  ("Jack Nicholson"),
  ("Ron Howard"),
  ("Roger Corman"),
  ("Tom Cruise"),
  ("Jeremy Renner"),
  ("Simon Pegg"),
  ("Paula Patton"),
  ("Daniel Craig"),
  ("Rooney Mara"),
  ("Chirstopher Plummer"),
  ("Stellan Skarsgard"),
  ("Jamie Bell"),
  ("Andy Serkis"),
  ("Andy Serkis"),
  ("Daniel Craig"),
  ("Daniel Craig"),
  ("Jonathan Rhys Meyers"),
  ("Mia Wasikowska"),
  ("Aaron Johnson"),
  ("Brendan Gleeson"),
  ("Glenn Close"),
  ("Matt Damon"),
  ("Scarlet Johansson"),
  ("Thomas Haden Church"),
  ("Shah Rukh Khan"),
  ("Priyanka Chopra"),
  ("Rade Serbedzija"),
  ("Zana Marjanovic"),
  ("Goran Kostic"),
  ("Pina Bausch"),
  ("Emile Hirsch"),
  ("Olivia Thirlby"),
  ("Max Minghella"),
  ("Jeremy Irvine"),
  ("Peter Mullan"),
  ("Emily Watson"),
  ("Tom Hanks"),
  ("Thomas Horn"),
  ("Sandra Bullock"),
  ("Max von Sydow"),
  ("Adepero Oduye"),
  ("Pernell Walker"),
  ("Aasha Davis"),
  ("Peyman Maadi"),
  ("Leila Hatami"),
  ("Sareh Bayat"),
  ("Ameko Eks Mass Carroll"),
  ("Thomas Dekker"),
  ("Mira Sorvino"),
  ("Meryl Streep"),
  ("Jim Boradbent"),
  ("Peter Facinelli"),
  ("Jaimie Alexander"),
  ("Michael Madsen"),
  ("Fernanda Andrade"),
  ("Simon Quarterman"),
  ("Evan Helmuth"),
  ("Dennis Quaid"),
  ("Tony Oller"),
  ("Aimee Teagarden"),
  ("Ron Eldard"),
  ("Jill Hennessey"),
  ("Bobby Cannavale"),
  ("Lauren German"),
  ("Michael Biehn"),
  ("Milo Ventimiglia"),
  ("Dolly Parton"),
  ("Queen Latifah"),
  ("Keke Palmer"),
  ("Kate Beckinsale"),
  ("India Eisley"),
  ("Charles Dance"),
  ("Bryan Cranston"),
  ("Joshua David"),
  ("Cuba Gooding Jr."),
  ("Jessica Chastain"),
  ("Ralph Fiennes"),
  ("Gerard Butler"),
  ("Channing Tatum"),
  ("Michael Fassbender"),
  ("Ewan McGregor"),
  ("Michael Douglas"),
  ("lindsey Shaw"),
  ("Chandler Massey"),
  ("Keith Coulouris"),
  ("Katherine Heigl"),
  ("Jason O'Mara"),
  ("John Leguizamo"),
  ("Daniel Sunjata"),
  ("Debbie Reynolds"),
  ("Liam Neeson"),
  ("Dermot Mulroney"),
  ("Frank Grillo"),
  ("Brian Presley"),
  ("Kurt Russell"),
  ("Melanie Lynsky"),
  ("Michael B. Jorda"),
  ("Michael Kelly"),
  ("Daniel Radcliffe"),
  ("Ciaran Hinds"),
  ("Shaun Dooley"),
  ("Sara Paxton"),
  ("Pat Healy"),
  ("Kelly McGillis"),
  ("George Riddle"),
  ("Kristen Bell"),
  ("Drew Barrymore"),
  ("Ted Danson"),
  ("Josh Hutcherson"),
  ("Dwayne Johnson"),
  ("Vanessa Hudgens"),
  ("Michael Caine"),
  ("Ryan Reynolds"),
  ("Denzel Washington"),
  ("Rachel McAdams"),
  ("Channing Tatum"),
  ("Jessica Lange"),
  ("Ewan McGregor"),
  ("Eva Green"),
  ("Connie Nielsen"),
  ("Nicholas Cage"),
  ("Nicholas Cage"),
  ("Idris Elba"),
  ("Ciaran Hinds"),
  ("Tom Hardy"),
  ("Reese Witherspoon"),
  ("Chris Pine"),
  ("Abigail Spencer"),
  ("Mirai Shida"),
  ("Ry�nosuke Kamiki"),
  ("hinobu Ohtake"),
  ("Roselyn Sanchez"),
  ("Emilio Rivera"),
  ("Timothy Gibbs"),
  ("Jennifer Aniston"),
  ("Malin Akerman"),
  ("Paul Rudd"),
  ("Thandie Newton"),
  ("Rebecca Romijn"),
  ("Tyler Perry"),
  ("Gabrielle Union"),
  ("Christian Slater"),
  ("Alessandra Torresani"),
  ("Johnny Pacar"),
  ("Jeremy Renner"),
  ("Gemma Arterton"),
  ("Famke Janssen"),
  ("Thomas Mann"),
  ("Jonathan Daniel Brown"),
  ("Oliver Cooper"),
  ("Zac Efron"),
  ("Taylor Swift"),
  ("Betty White"),
  ("Ed Helms"),
  ("Danny DeVito"),
  ("Jason Segel"),
  ("Judy Greer"),
  ("Ed Helms"),
  ("Susan Sarandon"),
  ("Robert De Niro"),
  ("Julianne Moore"),
  ("Olivia Thirlby"),
  ("Paul Dano"),
  ("Bryan Cranston"),
  ("Mark Strong"),
  ("Taylor Kitsch"),
  ("Ciaran Hinds"),
  ("Alice Eve"),
  ("John Cusack"),
  ("Elizabeth Olsen"),
  ("Adam Trese"),
  ("Eric Sheffer Stevens"),
  ("Chris Brown"),
  ("Gabrielle Union"),
  ("Jessica Biel"),
  ("Gerard Butler"),
  ("Ewan McGregor"),
  ("Emily Blunt"),
  ("Kristin Scott Thomas"),
  ("Lior Ashkenazi"),
  ("Shlomo Bar-Aba"),
  ("Yuval Scharf"),
  ("Jiro Ono"),
  ("Sukiyabashi Ono"),
  ("Johnny Depp"),
  ("Channing Tatum"),
  ("Jonah Hill"),
  ("Julia Roberts"),
  ("Lily Collins"),
  ("Armie Hammer"),
  ("Nicolas Cage"),
  ("January Jones"),
  ("Guy Pearce"),
  ("Olivia Wilde"),
  ("Hugh Jackman"),
  ("Ashley Greene"),
  ("Jennifer Garner"),
  ("Alicia Silverstone"),
  ("Will Ferrell"),
  ("Gael Garc�a Bernal"),
  ("Diego Luna"),
  ("Jennifer Lawrence"),
  ("Josh Hutcherson"),
  ("Eddie Murphy"),
  ("Allison Janney"),
  ("Liam Neeson"),
  ("Sam Worthington"),
  ("Ralph Fiennes"),
  ("Rachel Weisz"),
  ("Tom Hiddleston"),
  ("Seann William Scott"),
  ("Jay Baruchel"),
  ("Alisonn Pill"),
  ("Liev Schreiber"),
  ("Lucas Pittaway"),
  ("Daniel Henshall"),
  ("Lea Michele"),
  ("Patrick Stewart"),
  ("Hugh Dancy"),
  ("Dan Ackroyd"),
  ("Kelsey Grammer"),
  ("James Belushi"),
  ("Clive Owen"),
  ("Carice von Houten"),
  ("Daniel Bruhl"),
  ("Julia Dietze"),
  ("Christopher Kirby"),
  ("Alyson Hannigan"),
  ("Seann William Scott"),
  ("Katrina Bowden"),
  ("Greta Gerwig"),
  ("Adam Brody"),
  ("Analeigh Tipton"),
  ("Bruce Willis"),
  ("Henry Cavill"),
  ("Sigourney Weaver"),
  ("Sophia Vergara"),
  ("Jane Lynch"),
  ("Sean Hayes"),
  ("Chris Diamontopoulos"),
  ("Will Sasso"),
  ("Richard Jenkins"),
  ("Bradley Whitford"),
  ("Sylvester Stallone"),
  ("Jason Momoa"),
  ("Christian Slater"),
  ("Anna Faris"),
  ("Anthony Anderson"),
  ("Regina Hall"),
  ("Jennifer Lawrence"),
  ("Elisabeth Shue"),
  ("Keira Knightley"),
  ("Steve Carell"),
  ("Connie Britton"),
  ("Zac Efron"),
  ("Taylor Schilling"),
  ("Blythe Danner"),
  ("Diane Keaton"),
  ("Kevin Kline"),
  ("Dianne Wiest"),
  ("Richard Jenkins"),
  ("Jason Segel"),
  ("Emily Blunt"),
  ("Jason Statham"),
  ("Anson Mount"),
  ("Catherine Chan"),
  ("Jeremy Renner"),
  ("Jeremy Renner"),
  ("Robert Downey"),
  ("Robert Downey"),
  ("Scarlett Johansson"),
  ("Scarlett Johansson"),
  ("Chris Evans"),
  ("Chris Hemsworth"),
  ("Mark Ruffalo"),
  ("Mark Ruffalo"),
  ("Clark Gregg"),
  ("Samuel L. Jackson"),
  ("Cobie Smulders"),
  ("Tom Hiddleston"),
  ("Maggie Smith"),
  ("Bill Nighy"),
  ("Judi Dench"),
  ("Johnny Depp"),
  ("Eva Green"),
  ("Michelle Pfeiffer"),
  ("Megan Fox"),
  ("Sacha Baron Cohen"),
  ("Anna Faris"),
  ("Elizabeth Banks"),
  ("Anna Kendrick"),
  ("Cameron Diaz"),
  ("Dennis Quaid"),
  ("Liam Neeson"),
  ("Alexander Skarsgard"),
  ("Taylor Kitsch"),
  ("Brooklyn Decker"),
  ("Will Smith"),
  ("Tommy Lee Jones"),
  ("Josh Brolin"),
  ("Alice Eve"),
  ("Emma Thompson"),
  ("Rip Torn"),
  ("Bruce Willis"),
  ("Edward Norton"),
  ("Tilda Swinton"),
  ("Bill Murray"),
  ("Kelly Macdonald"),
  ("Emma Thompson"),
  ("Kevin McKidd"),
  ("Channing Tatum"),
  ("Bruce Willis"),
  ("Dwayne Johnson"),
  ("Kristen Stewart"),
  ("Chris Hemsworth"),
  ("Charlize Theron"),
  ("Leonardo DiCaprio"),
  ("Kate Winslet"),
  ("Billy Zane")
);
CreateDict(
    "name" => "ME_Star_Dict",
    "table" => "ME_Star_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_Studios_Dict'
CreateTable(
  "ME_Studios_Dict__TABLE",
  ("entry" => "Text"),
  ("Anchor Bay Films"),
  ("CBS Films"),
  ("Cohen Media"),
  ("Columbia Pictures"),
  ("Disneynature"),
  ("ESPN Films"),
  ("FilmDistrict"),
  ("Focus Features"),
  ("Fox Searchlight"),
  ("Golden Village Pictures"),
  ("Gravitas Ventures"),
  ("Hannover House"),
  ("IFC Films"),
  ("IFC Midnight"),
  ("Image Entertainment"),
  ("Insurge Pictures"),
  ("Liddell Entertainment"),
  ("Lionsgate"),
  ("Magnet Releasing"),
  ("Magnolia Pictures"),
  ("Millenium Entertainment"),
  ("Music Box Films"),
  ("New Line Cinema"),
  ("Open Road Films"),
  ("Oscilloscope Pictures"),
  ("Pantelion Films"),
  ("Paramount Pictures"),
  ("Paramount Vantage"),
  ("Relativity Media"),
  ("Roadside Attractions"),
  ("Rogue Pictures"),
  ("Screen Gems"),
  ("Sony Pictures"),
  ("Summit Entertainment"),
  ("Sundance Selects"),
  ("Weinstein Company"),
  ("Touchstone Pictures"),
  ("Tribeca Film"),
  ("Twentieth Century Fox"),
  ("20th Century Fox"),
  ("Universal Pictures"),
  ("Variance Films"),
  ("Disney"),
  ("Warner Bros"),
  ("Xenon Pictures")
);
CreateDict(
    "name" => "ME_Studios_Dict",
    "table" => "ME_Studios_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ME_Writer_Dict'
CreateTable(
  "ME_Writer_Dict__TABLE",
  ("entry" => "Text"),
  ("Christopher Nolan"),
  ("Jonathan Nolan"),
  ("Christopher Nolan"),
  ("David S. Goyer"),
  ("Bob Kane"),
  ("Alvin Sargent"),
  ("Steve Kloves"),
  ("James Vanderbilt"),
  ("Steve Ditko"),
  ("Stan Lee"),
  ("Fenjves"),
  ("Martin Dugard"),
  ("Matther Leutwyler"),
  ("Gillian Vigman"),
  ("Takeshi Kitano"),
  ("Emilio Portes"),
  ("Katsuhito Ishii"),
  ("Yoji Enokido"),
  ("Yoshiki Sakurai"),
  ("Julia Leigh"),
  ("Katherine Fugate"),
  ("Brian Gatewood"),
  ("Alessandro Tanaka"),
  ("Malin Akerman / Tes"),
  ("Nikki Reed / Kara"),
  ("Deborah Ann Woll / Dawn"),
  ("Mark Porter"),
  ("Robert Marshall"),
  ("David F. Shamoon"),
  ("Aditya Chopra"),
  ("Devika Bhagat"),
  ("John le Carre"),
  ("Bridget O'Connor"),
  ("Peter Straughan"),
  ("Lynne Ramsay"),
  ("Rory Kinnear"),
  ("Lionel Shriver"),
  ("Diablo Cody"),
  ("Jonathan Aibel"),
  ("Glenn Berger"),
  ("Michele Mulroney"),
  ("Kieran Mulroney"),
  ("Arthus Conan Doyle"),
  ("Roman Polanski"),
  ("Yasmina Reza"),
  ("David Pomes"),
  ("Alex Stapleton"),
  ("Gregory Locklear"),
  ("Josh Appelbaum"),
  ("Andre Nemec"),
  ("Steven Zaillian"),
  ("Steven Moffat"),
  ("Glenn Close"),
  ("John Banville"),
  ("George Moore"),
  ("Cameron Crowe"),
  ("Aline Brosh McKenna"),
  ("Farhan Akhtar"),
  ("Javed Akhtar"),
  ("Salim Khan"),
  ("Angelina Jolie"),
  ("Wim Wenders"),
  ("Jon Spaihts"),
  ("Leslie Bohem"),
  ("Lee Hall"),
  ("Eric Roth"),
  ("Jonathan Safran Foer"),
  ("Edward Burns / Fuzzy"),
  ("Kerry Bishe / Linda"),
  ("Caitlin Fitzgerald / Katie"),
  ("Dee Rees"),
  ("Asghar Farhadi"),
  ("Catherine Trieschmann"),
  ("Leslie Schwartz"),
  ("Abi Morgan "),
  ("Peter Facinelli"),
  ("William Brent Bell"),
  ("Matthew Peterman"),
  ("Bruce Wilkinson"),
  ("Gerald Cuesta"),
  ("Michael Cuesta"),
  ("Aaron Guzikowski"),
  ("Arnaldur Indri�ason"),
  ("Karl Mueller"),
  ("Eron Sheean"),
  ("Todd Graff"),
  ("Len Wiseman"),
  ("John Hlavin"),
  ("J. Michael Straczynski"),
  ("Allison Burnett"),
  ("Len Wiseman"),
  ("John Ridley"),
  ("Aaron McGuder"),
  ("John Ridley"),
  ("Goerge Lucas"),
  ("John Logan"),
  ("William Shakespeare"),
  ("Lem Dobbs"),
  ("Leigh Dunlap"),
  ("Stacey Sherman"),
  ("Karen Ray"),
  ("Liz Brixius"),
  ("Janet Evanovich"),
  ("Joe Carnahan"),
  ("Ian Mackenzie Jeffers"),
  ("Don Handfield"),
  ("Max Landis"),
  ("Josh Track"),
  ("Max Landis"),
  ("Jane Goldman"),
  ("Susan Hil"),
  ("Ti West"),
  ("Jack Amiel"),
  ("Michael Begler"),
  ("Thomas Rose"),
  ("Brian Gunn"),
  ("Mark Gunn"),
  ("Richard Outten"),
  ("Brian Gunn"),
  ("Mark Gunn"),
  ("Jules Verne"),
  ("David Guggenheim"),
  ("Jason Katims"),
  ("Abby Kohn"),
  ("Marc Silverstein"),
  ("Michael Sucsy"),
  ("Kim Fupz Aakeson"),
  ("Scott M. Gimple"),
  ("Seth Hoffman"),
  ("David S. Goyer"),
  ("David S. Goyer"),
  ("Timothy Dowling"),
  ("Simon Kinberg"),
  ("Timothy Dowling"),
  ("Marcus Gautesen"),
  ("Hayao Miyazaki"),
  ("Keiko Niwa"),
  ("Karey Kirkpatrick"),
  ("Mary Norton"),
  ("Michelle Yeoh / Aung San Suu Kyi"),
  ("David Thewlis / Michael Aris"),
  ("Jonathan Raggett / Kim Aris"),
  ("Kurt Johnstad"),
  ("David Wain"),
  ("Ken Marino"),
  ("Tyler Perry"),
  ("Erik Lee"),
  ("David Neiden"),
  ("Michael A. Nickles"),
  ("Kevyn Settle"),
  ("Kevyn Settle"),
  ("Dante Harper"),
  ("Tommy Wirkola"),
  ("Matt Drake"),
  ("Michael Bacall"),
  ("Michael Bacall"),
  ("Ken Daurio"),
  ("Cinco Paul"),
  ("Dr. Seuss"),
  ("Jay Duplass"),
  ("Mark Duplass"),
  ("Paul Weitz"),
  ("Nick Flynn"),
  ("Andrew Stanton"),
  ("Mark Andrews"),
  ("Michael Chabon"),
  ("Edgar Rice Burroughs"),
  ("Ben Livingston"),
  ("Hannah Shakespeare"),
  ("Laura Lau"),
  ("Gustavo Hernandez"),
  ("Keith Merryman"),
  ("David A. Newman"),
  ("Steve Harvey"),
  ("Robbie Fox"),
  ("Simon Beaufoy"),
  ("Paul Torday"),
  ("Joseph Cedar"),
  ("Michael Bacall"),
  ("Jonah Hill"),
  ("Melissa Wallack"),
  ("Jason Keller"),
  ("Jacob Grimm"),
  ("Wilhelm Grimm"),
  ("Robert Tannen"),
  ("Robert Tannen"),
  ("Todd Hickey"),
  ("Jason A. Micallef"),
  ("Andrew Steele"),
  ("Gary Ross"),
  ("Billy Ray"),
  ("Suzanne Collins"),
  ("Steve Koren"),
  ("Dan Mazeau"),
  ("David Johnson"),
  ("Greg Berlanti"),
  ("Dan Mazeau"),
  ("David Johnson"),
  ("Terence Davies"),
  ("Terence Rattigan"),
  ("Jay Baruchel"),
  ("Evan Goldberg"),
  ("Adam Frattasio"),
  ("Doug Smith"),
  ("Shaun Grant"),
  ("Shaun Grant"),
  ("Justin Kurzel"),
  ("Debi Marshall"),
  ("Andrew McGarry"),
  ("Adam Balsam"),
  ("Barry Glasser"),
  ("Randi Barnes"),
  ("Roger S. Baum"),
  ("Nicolas Casariego"),
  ("Jaime Marques"),
  ("Johanna Sinisalo"),
  ("Michael Kalesniko"),
  ("Jarmo Puskala"),
  ("Jon Hurwitz"),
  ("Adam Schlossberg"),
  ("Adam Herz"),
  ("Whit Stillman"),
  ("Scott Wiper"),
  ("John Petro"),
  ("Bobby Farrelly"),
  ("Peter Farrelly"),
  ("Mike Cerrone"),
  ("Joss Whedon"),
  ("Drew Goddard"),
  ("Walter Hill"),
  ("Alessandro Camon"),
  ("Alexis Nolent"),
  ("John Aboud"),
  ("Michael Colton"),
  ("Stephen Leff"),
  ("David Loucka"),
  ("Jonathan Mostow"),
  ("Lorene Scafaria"),
  ("Will Fetters"),
  ("Nicholas Sparks"),
  ("Lawrence Kasdan"),
  ("Meg Kasdan"),
  ("Nicholas Stoller"),
  ("Jason Segel"),
  ("Boaz Yakin"),
  ("Zak Penn"),
  ("Joss Whedon"),
  ("Ol Parker"),
  ("Deborah Moggach"),
  ("Seth Grahame-Smith"),
  ("Dan Curtis"),
  ("Sacha Baron Cohen"),
  ("Alec Berg"),
  ("David mandel"),
  ("Jeff Schaffer"),
  ("Shauna Cross"),
  ("Heather Hach"),
  ("Heidi Murkoff"),
  ("Erich Hoeber"),
  ("Jon Hoeber"),
  ("Etan Cohen"),
  ("David Koepp"),
  ("Jeff Nathanson"),
  ("Michael Soccio"),
  ("Lowell Cunningham"),
  ("Wes Anderson"),
  ("Roman Coppola"),
  ("Brenda Chapman"),
  ("Irene Mecchi"),
  ("Rhett Reese"),
  ("Paul Wernick"),
  ("Hossein Amini"),
  ("Evan Daugherty"),
  ("Evan Spilotopolous"),
  ("James Cameron")
);
CreateDict(
    "name" => "ME_Writer_Dict",
    "table" => "ME_Writer_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MP3_Audio_Dict'
CreateTable(
  "MP3_Audio_Dict__TABLE",
  ("entry" => "Text"),
  ("mp3 player"),
  ("cd player"),
  ("radio"),
  ("cassette"),
  ("recorder"),
  ("tape"),
  ("sound card"),
  ("speakers"),
  ("soundtrack"),
  ("speakers"),
  ("speaker"),
  ("subwoofer"),
  ("surround speakers"),
  ("synthesizer"),
  ("Digital audio players"),
  ("Digital audio"),
  ("Portable media players"),
  ("IPod"),
  ("Free Lossless Audio Codec"),
  ("Internet radio device"),
  ("MP3"),
  ("Philips GoGear"),
  ("Zune"),
  ("Archos"),
  ("Audio engineering"),
  ("audio player"),
  ("Apple iPod"),
  ("Apple iPod Touch Portable Audio Device"),
  ("Archos 5 Portable Video Player"),
  ("Creative Zen Vision"),
  ("Portable Audio Device"),
  ("iPod Shuffle"),
  ("Microsoft Zune HD Portable Audio Device"),
  ("Microsoft Zune Portable Audio Device"),
  ("SanDisk"),
  ("Sansa Clip"),
  ("Zune"),
  ("ipod"),
  ("ASIC"),
  ("sandisk"),
  ("mp3"),
  ("zune"),
  ("ipod nano"),
  ("ipod shuffle"),
  ("ipod touch"),
  ("audio"),
  ("iphone"),
  ("ipod classic"),
  ("nano"),
  ("itunes"),
  ("apparecchi usb"),
  ("speakers"),
  ("ipad"),
  ("lettori mp3"),
  ("mp3 player"),
  ("usb"),
  ("apple"),
  ("itunes"),
  ("speaker"),
  ("speakers")
);
CreateDict(
    "name" => "MP3_Audio_Dict",
    "table" => "MP3_Audio_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Marriage_GenericFilterDict'
CreateTable(
  "Marriage_GenericFilterDict__TABLE",
  ("entry" => "Text"),
  ("cheated on me"),
  ("affair"),
  ("divorce"),
  ("divorced"),
  ("split"),
  ("died"),
  ("future husband"),
  ("future wife"),
  ("future hubby"),
  ("future wifey"),
  ("ex-husband"),
  ("ex husband"),
  ("ex-wife"),
  ("ex wife"),
  ("husband to be"),
  ("wife to be"),
  ("would be husband"),
  ("would be wife"),
  ("i think i love"),
  ("get married"),
  ("getting married"),
  ("my wife and kids"),
  ("my wife & kids"),
  ("were my husband"),
  ("were my hubby"),
  ("were my wife"),
  ("were my wifey"),
  ("was my husband"),
  ("was my hubby"),
  ("was my wife"),
  ("was my wifey"),
  ("wish i was"),
  ("wish i would"),
  ("wish i could")
);
CreateDict(
    "name" => "Marriage_GenericFilterDict",
    "table" => "Marriage_GenericFilterDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MortgageIntentDict'
CreateTable(
  "MortgageIntentDict__TABLE",
  ("entry" => "Text"),
  ("purchase offer"),
  ("purchase agreement"),
  ("good faith money"),
  ("earnest money"),
  ("downpayment"),
  ("down payment"),
  ("deposit"),
  ("pre-qualified"),
  ("listing agent"),
  ("buyers agent"),
  ("sellers agent"),
  ("real estate agent")
);
CreateDict(
    "name" => "MortgageIntentDict",
    "table" => "MortgageIntentDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MotherKeywordsGenericDict'
CreateTable(
  "MotherKeywordsGenericDict__TABLE",
  ("entry" => "Text"),
  ("mom"),
  ("mum"),
  ("mummy"),
  ("mommy"),
  ("mother"),
  ("mommie"),
  ("momma"),
  ("#Happymothersday"),
  ("moms"),
  ("mothers"),
  ("mums"),
  ("mommys"),
  ("mommies"),
  ("mommas")
);
CreateDict(
    "name" => "MotherKeywordsGenericDict",
    "table" => "MotherKeywordsGenericDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MothersDayFilterDict'
CreateTable(
  "MothersDayFilterDict__TABLE",
  ("entry" => "Text"),
  ("not a mother"),
  ("birth mother"),
  ("tell"),
  ("said"),
  ("say"),
  ("dont deserve"),
  ("wish me"),
  ("wished me"),
  ("have you"),
  ("have u"),
  ("not get"),
  ("to your"),
  ("to ur"),
  ("wish them"),
  ("I expect"),
  ("retweeting"),
  ("R.I.P"),
  ("rip"),
  ("expecting"),
  ("pregnant"),
  ("soon to be"),
  ("free entry")
);
CreateDict(
    "name" => "MothersDayFilterDict",
    "table" => "MothersDayFilterDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'MovieTopic.dict'
CreateTable(
  "MovieTopic.dict__TABLE",
  ("entry" => "Text"),
  ("movie"),
  ("movies"),
  ("film"),
  ("films"),
  ("cinema"),
  ("cinemas"),
  ("theatres"),
  ("theatre"),
  ("theater"),
  ("cinematography"),
  ("directed by"),
  ("produced by"),
  ("starring"),
  ("box office"),
  ("flicks"),
  ("screenplay"),
  ("trailer"),
  ("trailers"),
  ("footage"),
  ("blockbusters"),
  ("blockbuster"),
  ("thriller"),
  ("comedy"),
  ("spoiler"),
  ("spoilers"),
  ("IMAX"),
  ("theatrical run"),
  ("stunts"),
  ("scenario"),
  ("scenarios"),
  ("female lead"),
  ("male lead"),
  ("actor"),
  ("actress"),
  ("actors"),
  ("filmmaker"),
  ("cast"),
  ("Hollywood"),
  ("screenplay")
);
CreateDict(
    "name" => "MovieTopic.dict",
    "table" => "MovieTopic.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Networking_Storage_Dict'
CreateTable(
  "Networking_Storage_Dict__TABLE",
  ("entry" => "Text"),
  ("router"),
  ("modem"),
  ("wireless"),
  ("network"),
  ("micro sd card"),
  ("micro usb"),
  ("usb"),
  ("hubs"),
  ("netgear"),
  ("hard drive"),
  ("storage"),
  ("memory card")
);
CreateDict(
    "name" => "Networking_Storage_Dict",
    "table" => "Networking_Storage_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'OffTopicDict'
CreateTable(
  "OffTopicDict__TABLE",
  ("entry" => "Text"),
  ("housing crisis"),
  ("mortgage crisis"),
  ("liberals"),
  ("democrat"),
  ("congress"),
  ("obama"),
  ("looking for a church home"),
  ("looking for a dog"),
  ("looking for a cat"),
  ("looking for a pet"),
  ("prescription"),
  ("to rent"),
  ("for rent"),
  (" for a rental"),
  ("housemate"),
  ("house mate"),
  ("looking for a job"),
  ("job hunting"),
  ("wanna rent"),
  ("place for rent"),
  ("call me"),
  ("call today"),
  ("call us"),
  ("contact me"),
  ("contact us"),
  ("tip of the day"),
  ("anyone want to buy a house"),
  ("anyone want to buy our house"),
  ("anyone want to buy my house"),
  ("give me a call"),
  ("give us a call"),
  ("home owners tip"),
  ("Interest Rate Update"),
  ("buy our house"),
  ("refinancing to consolidate debt"),
  ("refinancing your debts"),
  ("GSE")
);
CreateDict(
    "name" => "OffTopicDict",
    "table" => "OffTopicDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'OtherRef_FilterWordsDict'
CreateTable(
  "OtherRef_FilterWordsDict__TABLE",
  ("entry" => "Text"),
  ("to him"),
  ("to her"),
  ("to your"),
  ("to ur"),
  ("to you @"),
  ("to u @"),
  ("to all the"),
  ("2 him"),
  ("2 her"),
  ("2 your"),
  ("2 ur"),
  ("2 you @"),
  ("2 u @"),
  ("2 all the"),
  ("on the"),
  ("for"),
  ("to me"),
  ("2 me"),
  ("to my"),
  ("2 my"),
  ("to myself"),
  ("2 myself")
);
CreateDict(
    "name" => "OtherRef_FilterWordsDict",
    "table" => "OtherRef_FilterWordsDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'OtherReferencesDict'
CreateTable(
  "OtherReferencesDict__TABLE",
  ("entry" => "Text"),
  ("he"),
  ("she"),
  ("you"),
  ("u"),
  ("your"),
  ("who"),
  ("they"),
  ("that is")
);
CreateDict(
    "name" => "OtherReferencesDict",
    "table" => "OtherReferencesDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'OtherRelations'
CreateTable(
  "OtherRelations__TABLE",
  ("entry" => "Text"),
  ("Trainer"),
  ("Professor"),
  ("Instructor"),
  ("Tutor"),
  ("sir"),
  ("Fiance"),
  ("girl"),
  ("boy"),
  ("man"),
  ("mgr"),
  ("lady"),
  ("woman"),
  ("roommate"),
  ("roomie"),
  ("classmate")
);
CreateDict(
    "name" => "OtherRelations",
    "table" => "OtherRelations__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'PC_Laptop_Dict'
CreateTable(
  "PC_Laptop_Dict__TABLE",
  ("entry" => "Text"),
  ("pc"),
  ("computer"),
  ("laptop"),
  ("tablet"),
  ("netbook"),
  ("pda"),
  ("server"),
  ("ipad"),
  ("iOS"),
  ("App Store"),
  ("iBooks"),
  ("ipod"),
  ("apple tv"),
  ("macintosh"),
  ("Eee Pad Transformer"),
  ("Eee Pad"),
  ("TouchPad"),
  ("Velocity"),
  ("ViewSonic"),
  ("Viewpad"),
  ("HTC Flyer"),
  ("BeBook"),
  ("Nook"),
  ("Sony Reader"),
  ("Alex ereader"),
  ("Pandigital novel"),
  ("kobo ereader"),
  ("ereader"),
  ("apple mini"),
  ("tabletpc"),
  ("tablet pc"),
  ("slate pc"),
  ("slatepc"),
  ("windowsXP"),
  ("windowspc"),
  ("windows"),
  ("pc"),
  ("xp"),
  ("macbook"),
  ("mac mini"),
  ("imac"),
  ("mac pro"),
  ("macbook pro"),
  ("macbook air"),
  ("kindle"),
  ("kindle3"),
  ("nook"),
  ("nook color"),
  ("beebook neo"),
  ("kobo"),
  ("pandigital"),
  ("novel"),
  ("computer Tablet")
);
CreateDict(
    "name" => "PC_Laptop_Dict",
    "table" => "PC_Laptop_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'PP_Ignore_Dict'
CreateTable(
  "PP_Ignore_Dict__TABLE",
  ("entry" => "Text"),
  ("pot"),
  ("monster"),
  ("book"),
  ("UNO"),
  ("breakfast"),
  ("lunch"),
  ("dinner"),
  ("bowl"),
  ("celebrity"),
  ("hood"),
  ("tool"),
  ("break"),
  ("box"),
  ("ticket"),
  ("soundtrack"),
  ("song"),
  ("bag"),
  ("gap"),
  ("cup"),
  ("symbol"),
  ("design"),
  ("case"),
  ("filter"),
  ("button"),
  ("seat"),
  ("equipment"),
  ("photo"),
  ("chest"),
  ("accent"),
  ("passport"),
  ("film"),
  ("social"),
  ("life"),
  ("battery"),
  ("focus"),
  ("topic"),
  ("list"),
  ("home"),
  ("light"),
  ("radio"),
  ("underpants"),
  ("housing"),
  ("buffet"),
  ("plate")
);
CreateDict(
    "name" => "PP_Ignore_Dict",
    "table" => "PP_Ignore_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'PP_PreProduct_Dict'
CreateTable(
  "PP_PreProduct_Dict__TABLE",
  ("entry" => "Text"),
  (","),
  ("("),
  ("."),
  ("a"),
  ("an"),
  ("new"),
  ("nice"),
  ("cool"),
  ("another"),
  ("some"),
  ("good"),
  ("delicious"),
  ("better"),
  ("small"),
  ("little"),
  ("medium"),
  ("large"),
  ("great"),
  ("black"),
  ("white"),
  ("red"),
  ("blue"),
  ("green"),
  ("gray"),
  ("few"),
  ("more"),
  ("the")
);
CreateDict(
    "name" => "PP_PreProduct_Dict",
    "table" => "PP_PreProduct_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Phones_Accessories_Dict'
CreateTable(
  "Phones_Accessories_Dict__TABLE",
  ("entry" => "Text"),
  ("cell phone case"),
  ("carrying case"),
  ("microphone"),
  ("headset"),
  ("Bluetooth"),
  ("ear phone"),
  ("earphone"),
  ("phone case"),
  ("phone pouch")
);
CreateDict(
    "name" => "Phones_Accessories_Dict",
    "table" => "Phones_Accessories_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Phones_Dict'
CreateTable(
  "Phones_Dict__TABLE",
  ("entry" => "Text"),
  ("cell phone"),
  ("cellfone"),
  ("cellphone"),
  ("phone"),
  ("iphone"),
  ("smart phone"),
  ("telephone"),
  ("voip"),
  ("cellular telephone"),
  ("nokia"),
  ("htc evo"),
  ("4G"),
  ("samsung galaxy"),
  ("Sony Ericsson Xperia"),
  ("Sony Ericsson"),
  ("LG Optimus One"),
  ("LG Optimus"),
  ("HTC"),
  ("htc desire"),
  ("google nexus one"),
  ("google nexus"),
  ("Nexus one"),
  ("Motorola Droid"),
  ("droid"),
  ("motorola"),
  ("htc hero"),
  ("MicroMax Andro A60"),
  ("MicroMax Andro"),
  ("Motorola Droid Bionic"),
  ("Verizon"),
  ("T-Mobile LG"),
  ("T-Mobile"),
  ("apple iphone"),
  ("HTC EVO 3D"),
  ("HTC ThunderBolt"),
  ("sprint"),
  ("Sony Ericsson Xperia"),
  ("Google Nexus S"),
  ("HP Pre 3"),
  ("Dell Venue Pro"),
  ("At&t"),
  ("HTC Desire"),
  ("HTC Incredible"),
  ("LG Optimus"),
  ("LG Revolution"),
  ("Motorola Atrix"),
  ("Samsung Infuse"),
  ("LG G2X"),
  ("T-Mobile"),
  ("Sidekick"),
  ("Mobile Phone"),
  ("AUDIOVOX"),
  ("UTStarcom"),
  ("BENQ-SIEMENS"),
  ("BLACKBERRY"),
  ("BB"),
  ("HTC"),
  ("LG ELECTRONICS"),
  ("KYOCERA"),
  ("MITSUBISHI"),
  ("MOTOROLA"),
  ("NOKIA"),
  ("PALM"),
  ("QUALCOMM"),
  ("SAMSUNG"),
  ("SANYO"),
  ("SAGEM"),
  ("SONY ERICSSON"),
  ("nokia"),
  ("Windows Mobile"),
  ("HTC HD2"),
  ("iPhone"),
  ("GoogleNexusOne"),
  ("android"),
  ("4g phone"),
  ("motorola xprt"),
  ("Droid Incredible"),
  ("nokia C3")
);
CreateDict(
    "name" => "Phones_Dict",
    "table" => "Phones_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'PostProductFilter_Dict'
CreateTable(
  "PostProductFilter_Dict__TABLE",
  ("entry" => "Text"),
  ("on")
);
CreateDict(
    "name" => "PostProductFilter_Dict",
    "table" => "PostProductFilter_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'PreProductFilter_Dict'
CreateTable(
  "PreProductFilter_Dict__TABLE",
  ("entry" => "Text"),
  ("watch"),
  ("fix"),
  ("to have to"),
  ("Drake"),
  ("bring a"),
  ("bring an")
);
CreateDict(
    "name" => "PreProductFilter_Dict",
    "table" => "PreProductFilter_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Printers_Ink_Dict'
CreateTable(
  "Printers_Ink_Dict__TABLE",
  ("entry" => "Text"),
  ("printer"),
  ("catridge"),
  ("Canon ink cartridges"),
  ("Canon ink cartridge"),
  ("Canon"),
  ("printer cable"),
  ("feeder tray"),
  ("switch box"),
  ("printer case"),
  ("sprinter"),
  ("lexmark"),
  ("epson")
);
CreateDict(
    "name" => "Printers_Ink_Dict",
    "table" => "Printers_Ink_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'QuestionsDict'
CreateTable(
  "QuestionsDict__TABLE",
  ("entry" => "Text"),
  ("should I"),
  ("should we"),
  ("what were we"),
  ("what was I"),
  ("do you think"),
  ("when I graduate"),
  ("when I am of age"),
  ("after college"),
  ("after graduation"),
  ("doubt it"),
  ("t for sure"),
  ("If all works out")
);
CreateDict(
    "name" => "QuestionsDict",
    "table" => "QuestionsDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ReferenceWordsDict'
CreateTable(
  "ReferenceWordsDict__TABLE",
  ("entry" => "Text"),
  ("I"),
  ("we"),
  ("all of us"),
  ("me")
);
CreateDict(
    "name" => "ReferenceWordsDict",
    "table" => "ReferenceWordsDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'SEXY_Dict'
CreateTable(
  "SEXY_Dict__TABLE",
  ("entry" => "Text"),
  ("adorable"),
  ("adult"),
  ("alluring"),
  ("amative"),
  ("amatory"),
  ("amorous"),
  ("aphrodisiac"),
  ("ardent"),
  ("aroused"),
  ("arousing"),
  ("attached"),
  ("beautiful"),
  ("boy crazy"),
  ("charming"),
  ("cute"),
  ("come-hither"),
  ("concupiscent"),
  ("covetable"),
  ("cuddly"),
  ("desirous"),
  ("doting"),
  ("enamored"),
  ("enticing"),
  ("erotic"),
  ("fascinating"),
  ("fetching"),
  ("flirtatious"),
  ("fond"),
  ("girl crazy"),
  ("have a crush on"),
  ("heavy"),
  ("horny"),
  ("hot"),
  ("hot and heavy"),
  ("immoral"),
  ("impassioned"),
  ("in love"),
  ("indecent"),
  ("infatuated"),
  ("inviting"),
  ("kissable"),
  ("lascivious"),
  ("lewd"),
  ("libidinous"),
  ("lovesick"),
  ("lovey dovey"),
  ("loving"),
  ("lustful"),
  ("mature"),
  ("off-color"),
  ("offensive"),
  ("passionate"),
  ("porn"),
  ("porno"),
  ("provocative"),
  ("provoking"),
  ("prurient"),
  ("purple"),
  ("racy"),
  ("raunchy"),
  ("risqu�"),
  ("romantic"),
  ("rough"),
  ("salacious"),
  ("seductive"),
  ("sensual"),
  ("sensuous"),
  ("sexy"),
  ("slinky"),
  ("smutty"),
  ("spicy"),
  ("steamy"),
  ("stimulated"),
  ("suggestive"),
  ("sultry"),
  ("sweet for"),
  ("sweet on"),
  ("tender"),
  ("titillating"),
  ("turned on"),
  ("turned-on"),
  ("voluptuous"),
  ("wanton"),
  ("wistful"),
  ("x-rated"),
  ("x rated")
);
CreateDict(
    "name" => "SEXY_Dict",
    "table" => "SEXY_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Shoes_Dict'
CreateTable(
  "Shoes_Dict__TABLE",
  ("entry" => "Text"),
  ("shoe"),
  ("shoes"),
  ("Athletic shoe"),
  ("Boat Shoes"),
  ("Boots"),
  ("Espadrilles"),
  ("Sneakers"),
  ("sneaker"),
  ("Flats"),
  ("Lace-Ups"),
  ("Loafers"),
  ("Slip-On"),
  ("Slip-Ons"),
  ("slipon"),
  ("slipons"),
  ("Mules"),
  ("Clogs"),
  ("Outdoor shoes"),
  ("Outdoor shoe"),
  ("Pumps"),
  ("Sandals"),
  ("sandal"),
  ("Slippers"),
  ("slipper"),
  ("boots"),
  ("formal shoe"),
  ("formal shoes"),
  ("loafers"),
  ("skate shoes"),
  ("snow shoe"),
  ("snow shoes"),
  ("crib shoe"),
  ("crib shoes"),
  ("uniform shoes"),
  ("school shoes"),
  ("inserts"),
  ("insoles"),
  ("arch support"),
  ("feet cushion"),
  ("foot cushions"),
  ("sock"),
  ("socks")
);
CreateDict(
    "name" => "Shoes_Dict",
    "table" => "Shoes_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Software_Dict'
CreateTable(
  "Software_Dict__TABLE",
  ("entry" => "Text"),
  ("software"),
  ("workbench")
);
CreateDict(
    "name" => "Software_Dict",
    "table" => "Software_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'StrongIntentDict'
CreateTable(
  "StrongIntentDict__TABLE",
  ("entry" => "Text"),
  ("house hunting"),
  ("househunting"),
  ("house-hunting")
);
CreateDict(
    "name" => "StrongIntentDict",
    "table" => "StrongIntentDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'TV_Video_Dict'
CreateTable(
  "TV_Video_Dict__TABLE",
  ("entry" => "Text"),
  ("video"),
  ("tv"),
  ("dvd player"),
  ("mediaplayer"),
  ("media player"),
  ("portable tv"),
  ("plasma"),
  ("projection screen"),
  ("tv screen"),
  ("projection tv"),
  ("projector"),
  ("projector av"),
  ("blu-ray player"),
  ("tube tv"),
  ("video cable"),
  ("video capture"),
  ("video card"),
  ("video equipment"),
  ("video game"),
  ("video media"),
  ("hdtv"),
  ("disc player"),
  ("recorder"),
  ("home theater"),
  ("antenna"),
  ("monitor"),
  ("led"),
  ("lcd"),
  ("plasma")
);
CreateDict(
    "name" => "TV_Video_Dict",
    "table" => "TV_Video_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Travel_Dict'
CreateTable(
  "Travel_Dict__TABLE",
  ("entry" => "Text"),
  ("Flights"),
  ("car rental"),
  ("greyhound"),
  ("amrtak"),
  ("train"),
  ("flight"),
  ("station"),
  ("vacation"),
  ("airplane"),
  ("lodge"),
  ("lodges"),
  ("airline"),
  ("airfare"),
  ("airfares"),
  ("rental cars"),
  ("rental car"),
  ("travel guide"),
  ("motel"),
  ("hotel"),
  ("room"),
  ("rooms"),
  ("reservation"),
  ("reservations"),
  ("resort"),
  ("air tickets"),
  ("flight tickets"),
  ("flight ticket"),
  ("travel packages"),
  ("cruise"),
  ("cruises"),
  ("trip"),
  ("roadtrip"),
  ("road trip"),
  ("tour"),
  ("tours"),
  ("bus"),
  ("plane ticket"),
  ("plane tickets"),
  ("fares")
);
CreateDict(
    "name" => "Travel_Dict",
    "table" => "Travel_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'UGLY_Dict'
CreateTable(
  "UGLY_Dict__TABLE",
  ("entry" => "Text"),
  ("abhorrent"),
  ("abominable"),
  ("animal"),
  ("appalling"),
  ("atrocious"),
  ("awful"),
  ("bad"),
  ("bad looking"),
  ("bad-looking"),
  ("base"),
  ("beastly"),
  ("contemptible"),
  ("cursed"),
  ("creepy"),
  ("deformed"),
  ("despicable"),
  ("disfigured"),
  ("disgusting"),
  ("foul"),
  ("frightful"),
  ("grim"),
  ("grisly"),
  ("grody"),
  ("gross"),
  ("grotesque"),
  ("hairy"),
  ("hard-featured"),
  ("hateful"),
  ("heinous"),
  ("hellish"),
  ("hideous"),
  ("homely"),
  ("horrible"),
  ("horrid"),
  ("ill-favored"),
  ("loathsome"),
  ("lousy"),
  ("misshapen"),
  ("monstrous"),
  ("nauseating"),
  ("not much to look at"),
  ("obnoxious"),
  ("odious"),
  ("offensive"),
  ("plain"),
  ("repellent"),
  ("repelling"),
  ("reprehensible"),
  ("repugnant"),
  ("repulsive"),
  ("revolting"),
  ("rotten"),
  ("sleazy"),
  ("stinking"),
  ("terrible"),
  ("ugly"),
  ("unalluring"),
  ("unappealing"),
  ("unattractive"),
  ("unbeautiful"),
  ("uncomely"),
  ("uninviting"),
  ("unlovely"),
  ("unprepossessing"),
  ("ugly"),
  ("unseemly"),
  ("unsightly"),
  ("vile"),
  ("wretched")
);
CreateDict(
    "name" => "UGLY_Dict",
    "table" => "UGLY_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'VB_DISLIKE_Dict'
CreateTable(
  "VB_DISLIKE_Dict__TABLE",
  ("entry" => "Text"),
  ("abhor"),
  ("abominate"),
  ("allergic to"),
  ("anathematize"),
  ("animosity"),
  ("animus"),
  ("antipathy"),
  ("aversion"),
  ("disgusted with"),
  ("hostile to"),
  ("loath"),
  ("reluctant"),
  ("repelled by"),
  ("sick of"),
  ("sorry"),
  ("blame"),
  ("can't stand"),
  ("couldn't stand"),
  ("censure"),
  ("chastise"),
  ("contemn"),
  ("criticize"),
  ("curse"),
  ("decry"),
  ("denounce"),
  ("deplore"),
  ("deprecate"),
  ("deprecation"),
  ("deride"),
  ("despise"),
  ("detest"),
  ("detestation"),
  ("detract"),
  ("disallow"),
  ("disapprobation"),
  ("disapproval"),
  ("disapprove"),
  ("discommend"),
  ("discountenance"),
  ("disdain"),
  ("disesteem"),
  ("disfavor"),
  ("disgust"),
  ("disinclination"),
  ("dislike"),
  ("dislike intensely"),
  ("dismiss"),
  ("disparage"),
  ("displeasure"),
  ("dispraise"),
  ("disregard"),
  ("dissatisfaction"),
  ("distaste"),
  ("down on"),
  ("enmity"),
  ("eschew"),
  ("execrate"),
  ("expostulate"),
  ("feel aversion toward"),
  ("feel contempt for"),
  ("feel hostility toward"),
  ("feel malice to"),
  ("feel repugnance toward"),
  ("find fault with"),
  ("find unacceptable"),
  ("flout"),
  ("frown on"),
  ("hate"),
  ("hated"),
  ("have an aversion to"),
  ("have enough of"),
  ("have no use for"),
  ("hostility"),
  ("indisposition"),
  ("loathe"),
  ("loathing"),
  ("look askance at"),
  ("look down at"),
  ("look down on"),
  ("misprize"),
  ("nauseate"),
  ("neglect"),
  ("nix"),
  ("not care for"),
  ("object to"),
  ("objection"),
  ("offense"),
  ("oppose"),
  ("opposition"),
  ("pass on"),
  ("prejudice"),
  ("put down"),
  ("recoil from"),
  ("refuse"),
  ("reject"),
  ("remonstrate"),
  ("renounce"),
  ("reprehend"),
  ("reprobate"),
  ("reprove"),
  ("repudiate"),
  ("repugnance"),
  ("revile"),
  ("scorn"),
  ("set aside"),
  ("shudder at"),
  ("shun"),
  ("slam"),
  ("slight"),
  ("snub"),
  ("spit upon"),
  ("spurn"),
  ("take dim view of"),
  ("take exception to"),
  ("turn down"),
  ("undervalue"),
  ("wipe out")
);
CreateDict(
    "name" => "VB_DISLIKE_Dict",
    "table" => "VB_DISLIKE_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'VB_LIKE_Dict'
CreateTable(
  "VB_LIKE_Dict__TABLE",
  ("entry" => "Text"),
  ("acclaim"),
  ("admire"),
  ("admired"),
  ("adore"),
  ("adored"),
  ("adulate"),
  ("applaud"),
  ("applauded"),
  ("appreciate"),
  ("appreciated"),
  ("approbate"),
  ("approve"),
  ("approved"),
  ("am attached to"),
  ("captivated by"),
  ("crazy about"),
  ("enamored of"),
  ("enchanted by"),
  ("fascinated with"),
  ("fond of"),
  ("gratified by"),
  ("in love with"),
  ("keen on"),
  ("mad for"),
  ("nuts about"),
  ("partial to"),
  ("pleased by"),
  ("pleased with"),
  ("serious about"),
  ("smitten with"),
  ("stuck on"),
  ("wild about"),
  ("care to"),
  ("cherish"),
  ("delight in"),
  ("delighted in"),
  ("delighed about"),
  ("pleasure from"),
  ("fell for"),
  ("fancy"),
  ("feast on"),
  ("find appealing"),
  ("flip over"),
  ("get a kick out of"),
  ("go for"),
  ("have it bad for"),
  ("hold dear"),
  ("hold high"),
  ("honor"),
  ("idolize"),
  ("indulge in"),
  ("I like"),
  ("liking"),
  ("did like"),
  ("liked"),
  ("long for"),
  ("love"),
  ("loved"),
  ("praise"),
  ("prefer"),
  ("prized"),
  ("put on pedestal"),
  ("regard highly"),
  ("rejoice in"),
  ("relish"),
  ("respect"),
  ("revel in"),
  ("revere"),
  ("reverence"),
  ("savor"),
  ("savored"),
  ("string along with"),
  ("stuck on"),
  ("take an interest in"),
  ("take delight in"),
  ("take satisfaction in"),
  ("think highly of"),
  ("think the world of"),
  ("thrive with"),
  ("treasure"),
  ("venerate"),
  ("wild for"),
  ("worship")
);
CreateDict(
    "name" => "VB_LIKE_Dict",
    "table" => "VB_LIKE_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'VerbsForLocationDict'
CreateTable(
  "VerbsForLocationDict__TABLE",
  ("entry" => "Text"),
  ("am at"),
  ("am @"),
  ("m at"),
  ("m in"),
  ("am in"),
  ("am with"),
  ("m with"),
  ("m w/"),
  ("am w/"),
  ("going to"),
  ("go to"),
  ("to attend"),
  ("will attend"),
  ("will be attending"),
  ("to visit"),
  ("will visit"),
  ("will be visiting"),
  ("will reach"),
  ("will be reaching"),
  ("will be @"),
  ("will be at"),
  ("we are at"),
  ("we are @"),
  ("visit"),
  ("visited"),
  ("i was in"),
  ("i was at"),
  ("we were at"),
  ("we were in"),
  ("i was @"),
  ("we were @"),
  ("i had gone to"),
  ("we had gone to"),
  ("i was with"),
  ("i was w/"),
  ("me in"),
  ("me at"),
  ("goin 2"),
  ("go 2"),
  ("goin to"),
  ("will b attendin"),
  ("2 visit"),
  ("will b visitin"),
  ("will b reachin"),
  ("will b @"),
  ("will b at"),
  ("we r at"),
  ("we r @"),
  ("v were at"),
  ("v were @"),
  ("v were in"),
  ("Enroute"),
  ("visiting"),
  ("visitin"),
  ("going to the"),
  ("goin to the"),
  ("goin 2 the"),
  ("goin to da"),
  ("goin 2 da"),
  ("go to the"),
  ("go 2 the"),
  ("go to da"),
  ("go 2 da"),
  ("m at"),
  ("m @"),
  ("we are @"),
  ("/4sq.com"),
  ("attend"),
  ("attending"),
  ("attended"),
  ("attendin"),
  ("reaching"),
  ("reach"),
  ("reached"),
  ("reachin")
);
CreateDict(
    "name" => "VerbsForLocationDict",
    "table" => "VerbsForLocationDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'VerbsForLocationStrongDict'
CreateTable(
  "VerbsForLocationStrongDict__TABLE",
  ("entry" => "Text"),
  ("Enroute"),
  ("visiting"),
  ("visited"),
  ("visitin"),
  ("going to the"),
  ("goin to the"),
  ("goin 2 the"),
  ("goin to da"),
  ("goin 2 da"),
  ("go to the"),
  ("go 2 the"),
  ("go to da"),
  ("go 2 da"),
  ("m at"),
  ("m @"),
  ("we are @"),
  ("we are at"),
  ("/4sq.com"),
  ("attend the"),
  ("attending the"),
  ("attended the"),
  ("attendin the"),
  ("attendin da"),
  ("attend da"),
  ("attended da"),
  ("attending da"),
  ("wanna go to"),
  ("m in"),
  ("will be reaching"),
  ("reached"),
  ("going to watch"),
  ("s go to"),
  ("m going to"),
  ("me in"),
  ("will go to"),
  ("im going to"),
  ("want to go to"),
  ("all go to"),
  ("my visit to"),
  ("wanna visit"),
  ("want to visit"),
  ("i was in"),
  ("i was at"),
  ("i was @"),
  ("we were at"),
  ("we were in"),
  ("we were @"),
  ("v were at"),
  ("v were @"),
  ("v were in"),
  ("i had gone to"),
  ("we had gone to")
);
CreateDict(
    "name" => "VerbsForLocationStrongDict",
    "table" => "VerbsForLocationStrongDict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'Video_Games_Dict'
CreateTable(
  "Video_Games_Dict__TABLE",
  ("entry" => "Text"),
  ("computer game"),
  ("video game"),
  ("ps2"),
  ("PS3"),
  ("playstation"),
  ("playstation 2"),
  ("sony psp"),
  ("wii"),
  ("playstation 3"),
  ("SlideHD"),
  ("kinect"),
  ("nintendo"),
  ("origin genesis"),
  ("wii"),
  ("sony playstation"),
  ("xbox 360"),
  ("Nintendo DSi XL"),
  ("sony psp"),
  ("atari flashback"),
  ("atari"),
  ("game boy micro"),
  ("Vtech"),
  ("Vsmile"),
  ("leapfrog"),
  ("leapster"),
  ("fisher-price"),
  ("gaming console"),
  ("game console"),
  ("nokia n-gage"),
  ("lasr gamepak"),
  ("e-reader"),
  ("nyko playcube"),
  ("xbox controller s"),
  ("gamecube"),
  ("3D displays"),
  ("3D display"),
  ("Wii fit"),
  ("Wii fit plus")
);
CreateDict(
    "name" => "Video_Games_Dict",
    "table" => "Video_Games_Dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict '_ME_MG_goToSee_3d_TmpDict__1'
CreateTable(
  "_ME_MG_goToSee_3d_TmpDict__1__TABLE",
  ("entry" => "Text"),
  ("3d")
);
CreateDict(
    "name" => "_ME_MG_goToSee_3d_TmpDict__1",
    "table" => "_ME_MG_goToSee_3d_TmpDict__1__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict '_ME_MG_goToSee_3d_TmpDict__2'
CreateTable(
  "_ME_MG_goToSee_3d_TmpDict__2__TABLE",
  ("entry" => "Text"),
  ("3d")
);
CreateDict(
    "name" => "_ME_MG_goToSee_3d_TmpDict__2",
    "table" => "_ME_MG_goToSee_3d_TmpDict__2__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict '_ME_MG_goToSee_basic_TmpDict__3'
CreateTable(
  "_ME_MG_goToSee_basic_TmpDict__3__TABLE",
  ("entry" => "Text"),
  ("a")
);
CreateDict(
    "name" => "_ME_MG_goToSee_basic_TmpDict__3",
    "table" => "_ME_MG_goToSee_basic_TmpDict__3__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict '_ME_MG_goToSee_going_TmpDict__4'
CreateTable(
  "_ME_MG_goToSee_going_TmpDict__4__TABLE",
  ("entry" => "Text"),
  ("a")
);
CreateDict(
    "name" => "_ME_MG_goToSee_going_TmpDict__4",
    "table" => "_ME_MG_goToSee_going_TmpDict__4__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict '_ME_MG_goToSee_new_TmpDict__5'
CreateTable(
  "_ME_MG_goToSee_new_TmpDict__5__TABLE",
  ("entry" => "Text"),
  ("new")
);
CreateDict(
    "name" => "_ME_MG_goToSee_new_TmpDict__5",
    "table" => "_ME_MG_goToSee_new_TmpDict__5__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict '_ME_MG_goToSee_take_TmpDict__6'
CreateTable(
  "_ME_MG_goToSee_take_TmpDict__6__TABLE",
  ("entry" => "Text"),
  ("to")
);
CreateDict(
    "name" => "_ME_MG_goToSee_take_TmpDict__6",
    "table" => "_ME_MG_goToSee_take_TmpDict__6__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'adjectives.dict'
CreateTable(
  "adjectives.dict__TABLE",
  ("entry" => "Text"),
  ("adorable"),
  ("amazing"),
  ("amazin"),
  ("beautiful"),
  ("darlin"),
  ("darling"),
  ("dahlin"),
  ("dahhling"),
  ("dahling"),
  ("hottie"),
  ("hotty"),
  ("fab"),
  ("fabulous"),
  ("gorgeous"),
  ("lil"),
  ("little"),
  ("lovely"),
  ("precious"),
  ("pretty"),
  ("ravishing"),
  ("sweetheart"),
  ("sweethrt"),
  ("swthrt"),
  ("sweets"),
  ("sweetie"),
  ("sweety"),
  ("super")
);
CreateDict(
    "name" => "adjectives.dict",
    "table" => "adjectives.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'ambiguousPhrases.dict'
CreateTable(
  "ambiguousPhrases.dict__TABLE",
  ("entry" => "Text"),
  ("after college"),
  ("after graduation"),
  ("doubt it"),
  ("If all works out"),
  ("do you think"),
  ("do ya think"),
  ("should I"),
  ("should we"),
  ("t for sure"),
  ("what were we"),
  ("what was I"),
  ("when I graduate"),
  ("when I am of age"),
  ("when I marry"),
  ("when I get engaged"),
  ("when I have kids"),
  ("when I grow up")
);
CreateDict(
    "name" => "ambiguousPhrases.dict",
    "table" => "ambiguousPhrases.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'babyWishes.dict'
CreateTable(
  "babyWishes.dict__TABLE",
  ("entry" => "Text"),
  ("congrats on your baby"),
  ("congrats on ur baby"),
  ("congratulations on your baby"),
  ("congratulations on ur baby"),
  ("congrats on your new baby"),
  ("congrats on ur new baby"),
  ("congratulations on your new baby"),
  ("congratulations on ur new baby"),
  ("congrats on yr baby"),
  ("congrats on yr baby"),
  ("congratulations on yr baby"),
  ("congratulations on yr baby"),
  ("congrats on yr new baby"),
  ("congrats on yr new baby"),
  ("congratulations on yr new baby"),
  ("congratulations on yr new baby"),
  ("congrats on the baby"),
  ("congrats on da baby"),
  ("congratulations on the baby"),
  ("congratulations on da baby"),
  ("congrats on the new baby"),
  ("congrats on da new baby"),
  ("congratulations on the new baby"),
  ("congratulations on da new baby"),
  ("congrats on baby"),
  ("congratulations on baby"),
  ("congrats on new baby"),
  ("congratulations on new baby"),
  ("welcome to parenthood"),
  ("welcome to motherhood"),
  ("welcome to fatherhood"),
  ("welcome 2 parenthood"),
  ("welcome 2 motherhood"),
  ("welcome 2 fatherhood"),
  ("on the birth of"),
  ("on birth of"),
  ("new son"),
  ("new daughter"),
  ("new baby"),
  ("had your baby"),
  ("had ur baby"),
  ("had her baby"),
  ("had their baby"),
  ("on your twins"),
  ("on yr twins"),
  ("on ur twins"),
  ("on the twins"),
  ("on your triplets"),
  ("on yr triplets"),
  ("on ur triplets"),
  ("on the triplets"),
  ("into the world"),
  ("your new addition"),
  ("yr new addition"),
  ("ur new addition"),
  ("baby are doing well"),
  ("baby are doin well"),
  ("baby are doing fine"),
  ("baby are doin fine"),
  ("with the birth of"),
  ("birth of their"),
  ("on the baby"),
  ("on his baby"),
  ("on her baby"),
  ("your baby boy"),
  ("your baby girl"),
  ("a baby girl"),
  ("a baby boy"),
  ("congrats on the child")
);
CreateDict(
    "name" => "babyWishes.dict",
    "table" => "babyWishes.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'birthday.dict'
CreateTable(
  "birthday.dict__TABLE",
  ("entry" => "Text"),
  ("happy birthday"),
  ("happy bday"),
  ("happy b-day"),
  ("happy b-dae"),
  ("happy bdae"),
  ("happy budday"),
  ("happy buddae"),
  ("happy b'day"),
  ("happy b'dae"),
  ("hapy birthday"),
  ("hapy bday"),
  ("hapy b-day"),
  ("hapy b-dae"),
  ("hapy bdae"),
  ("hapy budday"),
  ("hapy buddae"),
  ("hapy b'day"),
  ("hapy b'dae"),
  ("appie birthday"),
  ("appie bday"),
  ("appie b-day"),
  ("appie b-dae"),
  ("appie bdae"),
  ("appie budday"),
  ("appie buddae"),
  ("appie b'day"),
  ("appie b'dae"),
  ("hpy birthday"),
  ("hpy bday"),
  ("hpy b-day"),
  ("hpy b-dae"),
  ("hpy bdae"),
  ("hpy budday"),
  ("hpy buddae"),
  ("hpy b'day"),
  ("hpy b'dae"),
  ("hppy birthday"),
  ("hppy bday"),
  ("hppy b-day"),
  ("hppy b-dae"),
  ("hppy bdae"),
  ("hppy budday"),
  ("hppy buddae"),
  ("hppy b'day"),
  ("hppy b'dae"),
  ("hapi birthday"),
  ("hapi bday"),
  ("hapi b-day"),
  ("hapi b-dae"),
  ("hapi bdae"),
  ("hapi budday"),
  ("hapi buddae"),
  ("hapi b'day"),
  ("hapi b'dae"),
  ("happi birthday"),
  ("happi bday"),
  ("happi b-day"),
  ("happi b-dae"),
  ("happi bdae"),
  ("happi budday"),
  ("happi buddae"),
  ("happi b'day"),
  ("happi b'dae"),
  ("many happy returns")
);
CreateDict(
    "name" => "birthday.dict",
    "table" => "birthday.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'city.dict'
CreateTable(
  "city.dict__TABLE",
  ("entry" => "Text"),
  ("Abbeville"),
  ("Aberdeen"),
  ("Aberdeen Proving Ground"),
  ("Abernathy"),
  ("Abilene"),
  ("Abingdon"),
  ("Abram-Perezville"),
  ("Absecon"),
  ("Accokeek"),
  ("Acres Green"),
  ("Acushnet Center"),
  ("Acworth"),
  ("Ada"),
  ("Adairsville"),
  ("Adams"),
  ("Adamsville"),
  ("Addison"),
  ("Adel"),
  ("Adelanto"),
  ("Adelphi"),
  ("Adrian"),
  ("Affton"),
  ("Afton"),
  ("Agawam"),
  ("Agoura Hills"),
  ("Ahoskie"),
  ("Ahtanum"),
  ("Ahuimanu"),
  ("Aiea"),
  ("Aiken"),
  ("Air Force Academy"),
  ("Airmont"),
  ("Airway Heights"),
  ("Ajo"),
  ("Akron"),
  ("Akron borough"),
  ("Alabaster"),
  ("Alachua"),
  ("Alameda"),
  ("Alamo"),
  ("Alamo Heights"),
  ("Alamogordo"),
  ("Alamogordo"),
  ("Alamosa"),
  ("Albany"),
  ("Albemarle"),
  ("Albert Lea"),
  ("Albertson"),
  ("Albertville"),
  ("Albia"),
  ("Albion"),
  ("Albuquerque"),
  ("Alcoa"),
  ("Aldan borough"),
  ("Alden"),
  ("Alderwood Manor"),
  ("Aldine"),
  ("Aledo"),
  ("Alexander City"),
  ("Alexandria"),
  ("Alfred"),
  ("Algoma"),
  ("Algona"),
  ("Algonac"),
  ("Algonquin"),
  ("Algood"),
  ("Alhambra"),
  ("Alice"),
  ("Aliceville"),
  ("Aliquippa"),
  ("Aliso Viejo"),
  ("Allamuchy-Panther Valley"),
  ("Allegan"),
  ("Allen"),
  ("Allen Park"),
  ("Allendale"),
  ("Allendale borough"),
  ("Allentown"),
  ("Alliance"),
  ("Allouez"),
  ("Alma"),
  ("Almelund"),
  ("Almont"),
  ("Aloha"),
  ("Alondra Park"),
  ("Alorton"),
  ("Alpena"),
  ("Alpharetta"),
  ("Alpine"),
  ("Alpine Meadows"),
  ("Alsip"),
  ("Alta Sierra"),
  ("Altadena"),
  ("Altamont"),
  ("Altamonte Springs"),
  ("Altavista"),
  ("Alto"),
  ("Alton"),
  ("Alton North"),
  ("Altoona"),
  ("Altoona"),
  ("Alturas"),
  ("Altus"),
  ("Alum Rock"),
  ("Alva"),
  ("Alvarado"),
  ("Alvin"),
  ("Amagansett"),
  ("Amarillo"),
  ("Amberley"),
  ("Ambler borough"),
  ("Amboy"),
  ("Ambridge borough"),
  ("Amelia"),
  ("American Canyon"),
  ("American Falls"),
  ("American Fork"),
  ("Americus"),
  ("Amery"),
  ("Ames"),
  ("Amesbury"),
  ("Amherst"),
  ("Amherst Center"),
  ("Amite City"),
  ("Amity Gardens"),
  ("Amityville"),
  ("Ammon"),
  ("Amory"),
  ("Amsterdam"),
  ("Anaconda-Deer Lodge"),
  ("Anacortes"),
  ("Anadarko"),
  ("Anaheim"),
  ("Anaheim"),
  ("Anamosa"),
  ("Anatone"),
  ("Anchorage"),
  ("Anchorage municipality"),
  ("Ancient Oaks"),
  ("Andalusia"),
  ("Anderson"),
  ("Anderson Mill"),
  ("Andover"),
  ("Andover"),
  ("Andrews"),
  ("Andrews AFB"),
  ("Angel Fire"),
  ("Angels Camp"),
  ("Angels City"),
  ("Angier"),
  ("Angleton"),
  ("Angola"),
  ("Angwin"),
  ("Ankeny"),
  ("Ann Arbor"),
  ("Anna"),
  ("Annandale"),
  ("Annapolis"),
  ("Anniston"),
  ("Annville"),
  ("Anoka"),
  ("Anson"),
  ("Ansonia"),
  ("Anthony"),
  ("Antigo"),
  ("Antioch"),
  ("Antlers"),
  ("Apache Junction"),
  ("Apex"),
  ("Apollo Beach"),
  ("Apopka"),
  ("Apple Valley"),
  ("Appleton"),
  ("Applewood"),
  ("Aptos"),
  ("Aquia Harbour"),
  ("Arab"),
  ("Arabi"),
  ("Aransas Pass"),
  ("Arapahoe"),
  ("Arbutus"),
  ("Arcadia"),
  ("Arcata"),
  ("Archbald borough"),
  ("Archbold"),
  ("Archdale"),
  ("Arcola"),
  ("Arden Hills"),
  ("Arden-Arcade"),
  ("Ardmore"),
  ("Ardsley"),
  ("Arial"),
  ("Arizona City"),
  ("Arkadelphia"),
  ("ARKANSAS"),
  ("Arkansas City"),
  ("Arlington"),
  ("Arlington Heights"),
  ("Armona"),
  ("Armonk"),
  ("Arnold"),
  ("Aromas"),
  ("Arroyo Grande"),
  ("Artesia"),
  ("Artondale"),
  ("Arvada"),
  ("Arvin"),
  ("Asbury Park"),
  ("Ascutney"),
  ("Ashburn"),
  ("Ashdown"),
  ("Asheboro"),
  ("Asheville"),
  ("Ashland"),
  ("Ashland borough"),
  ("Ashland City"),
  ("Ashley borough"),
  ("Ashtabula"),
  ("Ashton-Sandy Springs"),
  ("Ashville"),
  ("Ashwaubenon"),
  ("Aspen"),
  ("Aspen Hill"),
  ("Aspinwall borough"),
  ("Astoria"),
  ("Atascadero"),
  ("Atascocita"),
  ("Atchison"),
  ("Athens"),
  ("Athens borough"),
  ("Athens-Clarke County"),
  ("Atherton"),
  ("Athol"),
  ("Atkins"),
  ("Atlanta"),
  ("Atlantic"),
  ("Atlantic Beach"),
  ("Atlantic City"),
  ("Atlantic Highlands"),
  ("Atmore"),
  ("Atoka"),
  ("Attalla"),
  ("Attica"),
  ("Attleboro"),
  ("Atwater"),
  ("Au Sable Forks"),
  ("Auburn"),
  ("Auburn Hills"),
  ("Auburndale"),
  ("Audubon"),
  ("Audubon borough"),
  ("Augusta"),
  ("Augusta-Richmond"),
  ("Aumsville"),
  ("Aurora"),
  ("Austell"),
  ("Austin"),
  ("Ava"),
  ("Avalon"),
  ("Avalon borough"),
  ("Avenal"),
  ("Avenel"),
  ("Aventura"),
  ("Avoca borough"),
  ("Avocado Heights"),
  ("Avon"),
  ("Avon Lake"),
  ("Avon Park"),
  ("Avondale"),
  ("Avondale Estates"),
  ("Avra Valley"),
  ("Ayden"),
  ("Ayer"),
  ("Azalea Park"),
  ("Azle"),
  ("Aztec"),
  ("Azusa"),
  ("Babylon"),
  ("Back Mountain"),
  ("Bacliff"),
  ("Bad Axe"),
  ("Baden borough"),
  ("Baggs"),
  ("Bailey's Crossroads"),
  ("Bainbridge"),
  ("Bainbridge Island"),
  ("Baker"),
  ("Baker City"),
  ("Bakersfield"),
  ("Bal Harbour"),
  ("Balch Springs"),
  ("Balcones Heights"),
  ("Bald Knob"),
  ("Baldwin"),
  ("Baldwin borough"),
  ("Baldwin City"),
  ("Baldwin Harbor"),
  ("Baldwin Park"),
  ("Baldwinsville"),
  ("Baldwyn"),
  ("Ball"),
  ("Ballenger Creek"),
  ("Ballinger"),
  ("Ballston Spa"),
  ("Ballville"),
  ("Ballwin"),
  ("Balmville"),
  ("Baltimore"),
  ("Baltimore"),
  ("Bamberg"),
  ("Bandon"),
  ("Bandon"),
  ("Bangor"),
  ("Bangor"),
  ("Bangor borough"),
  ("Bangor Trident Base"),
  ("Banner Elk"),
  ("Banning"),
  ("Bar Harbor"),
  ("Baraboo"),
  ("Barberton"),
  ("Barboursville"),
  ("Barbourville"),
  ("Barclay-Kingston"),
  ("Bardonia"),
  ("Bards"),
  ("Barling"),
  ("Barnesville"),
  ("Barnhart"),
  ("Barnstable Town"),
  ("Barnwell"),
  ("Barre"),
  ("Barre"),
  ("Barrett"),
  ("Barrington"),
  ("Barrington borough"),
  ("Barrington Hills"),
  ("Barron"),
  ("Barrow"),
  ("Barstow"),
  ("Bartlesville"),
  ("Bartlett"),
  ("Bartonville"),
  ("Bartow"),
  ("Basalt"),
  ("Bastrop"),
  ("Batavia"),
  ("Batesburg-Leesville"),
  ("Batesville"),
  ("Bath"),
  ("Bath borough"),
  ("Baton Rouge"),
  ("Battle Creek"),
  ("Battle Ground"),
  ("Battle Mountain"),
  ("Battlement Mesa"),
  ("Baxley"),
  ("Baxter"),
  ("Baxter Springs"),
  ("Bay"),
  ("Bay City"),
  ("Bay Harbor Islands"),
  ("Bay Hill"),
  ("Bay Minette"),
  ("Bay Pines"),
  ("Bay Point"),
  ("Bay Shore"),
  ("Bay St"),
  ("Bay St. Paul"),
  ("Bay Village"),
  ("Bayard"),
  ("Bayfield"),
  ("Bayonet Point"),
  ("Bayonne"),
  ("Bayou Cane"),
  ("Bayou Vista"),
  ("Bayport"),
  ("Bayshore"),
  ("Bayshore Gardens"),
  ("Bayside"),
  ("Baytown"),
  ("Bayview-Montalvin"),
  ("Bayville"),
  ("Baywood"),
  ("Baywood-Los Osos"),
  ("Beach Haven"),
  ("Beach Haven West"),
  ("Beach Park"),
  ("Beachwood"),
  ("Beachwood borough"),
  ("Beacon"),
  ("Beacon Square"),
  ("Beale AFB"),
  ("Bear"),
  ("Bear Valley Springs"),
  ("Beards"),
  ("Beatrice"),
  ("Beatyes"),
  ("Beaufort"),
  ("Beaumont"),
  ("Beaver borough"),
  ("Beaver Dam"),
  ("Beaver Falls"),
  ("Beavercreek"),
  ("Beaverdam"),
  ("Beaverton"),
  ("Becker"),
  ("Beckett"),
  ("Beckett Ridge"),
  ("Beckley"),
  ("Bedford"),
  ("Bedford borough"),
  ("Bedford Heights"),
  ("Bee Ridge"),
  ("Beebe"),
  ("Beech Grove"),
  ("Beecher"),
  ("Beechwood"),
  ("Beeville"),
  ("Bel Air"),
  ("Bel Air North"),
  ("Bel Air South"),
  ("Bel Aire"),
  ("Belcher"),
  ("Belding"),
  ("Belen"),
  ("Belfast"),
  ("Belgrade"),
  ("Bell"),
  ("Bell Gardens"),
  ("Bella Vista"),
  ("Bellaire"),
  ("Bellaire"),
  ("Bellair-Meadowbrook"),
  ("Bellbrook"),
  ("Belle Chasse"),
  ("Belle Fourche"),
  ("Belle Glade"),
  ("Belle Haven"),
  ("Belle Isle"),
  ("Belle Meade"),
  ("Belle Plaine"),
  ("Belleair"),
  ("Bellefontaine"),
  ("Bellefontaine Neighbors"),
  ("Bellefonte borough"),
  ("Belleview"),
  ("Belleville"),
  ("Bellevue"),
  ("Bellevue borough"),
  ("Bellevue Town"),
  ("Bellflower"),
  ("Bellingham"),
  ("Bellmawr borough"),
  ("Bellmead"),
  ("Bellmore"),
  ("Bellows Falls"),
  ("Bellview"),
  ("Bellville"),
  ("Bellwood"),
  ("Belmar borough"),
  ("Belmond"),
  ("Belmont"),
  ("Beloit"),
  ("Beloit"),
  ("Belpre"),
  ("Bel-Ridge"),
  ("Belton"),
  ("Beltsville"),
  ("Belvedere"),
  ("Belvedere Park"),
  ("Belvidere"),
  ("Belzoni"),
  ("Bemidji"),
  ("Benbrook"),
  ("Bend"),
  ("Benicia"),
  ("Bennettsville"),
  ("Bennington"),
  ("Bennsville"),
  ("Bensenville"),
  ("Bensley"),
  ("Benson"),
  ("Bentleyville borough"),
  ("Benton"),
  ("Benton City"),
  ("Benton Harbor"),
  ("Benton Heights"),
  ("Bentonville"),
  ("Berea"),
  ("Bergenfield borough"),
  ("Berkeley"),
  ("Berkeley Heights"),
  ("Berkley"),
  ("Berlin"),
  ("Berlin borough"),
  ("Bermuda Dunes"),
  ("Bernalillo"),
  ("Bernardsville borough"),
  ("Berne"),
  ("Bernville"),
  ("Berryville"),
  ("Berthoud"),
  ("Berwick"),
  ("Berwick borough"),
  ("Berwyn"),
  ("Berwyn Heights"),
  ("Bessemer"),
  ("Bessemer City"),
  ("Bethalto"),
  ("Bethany"),
  ("Bethel"),
  ("Bethel Acres"),
  ("Bethel Park borough"),
  ("Bethesda"),
  ("Bethlehem"),
  ("Bethpage"),
  ("Bettendorf"),
  ("Beulah"),
  ("Beverly"),
  ("Beverly Hills"),
  ("Bexley"),
  ("Bicknell"),
  ("Biddeford"),
  ("Big Bear City"),
  ("Big Bear Lake"),
  ("Big Coppitt Key"),
  ("Big Horn"),
  ("Big Lake"),
  ("Big Park"),
  ("Big Pine Key"),
  ("Big Rapids"),
  ("Big Sky"),
  ("Big Spring"),
  ("Big Stone Gap"),
  ("Big Sur"),
  ("Billings"),
  ("Biloxi"),
  ("Binghamton"),
  ("Birch Bay"),
  ("Birdsboro borough"),
  ("Birmingham"),
  ("Bisbee"),
  ("Biscayne Park"),
  ("Bishop"),
  ("Bishopville"),
  ("Bismarck"),
  ("Bithlo"),
  ("Biwabik"),
  ("Bixby"),
  ("Black Canyon City"),
  ("Black Diamond"),
  ("Black Forest"),
  ("Black Jack"),
  ("Black Mountain"),
  ("Black River Falls"),
  ("Blackfoot"),
  ("Blackhawk-Camino"),
  ("Blacklick Estates"),
  ("Blacksburg"),
  ("Blackshear"),
  ("Blackstone"),
  ("Blackville"),
  ("Blackwell"),
  ("Blackwood"),
  ("Bladensburg"),
  ("Blaine"),
  ("Blair"),
  ("Blairsville borough"),
  ("Blakely"),
  ("Blakely borough"),
  ("Blakeslee"),
  ("Blanchard"),
  ("Blanchester"),
  ("Blandford"),
  ("Blanding"),
  ("Blasdell"),
  ("Blauvelt"),
  ("Blennerhassett"),
  ("Bliss Corner"),
  ("Blissfield"),
  ("Bloomer"),
  ("Bloomfield"),
  ("Bloomfield Hills"),
  ("Bloomfield Township"),
  ("Bloomingdale"),
  ("Bloomingdale borough"),
  ("Bloomington"),
  ("Bloomsburg"),
  ("Blountville"),
  ("Blue Ash"),
  ("Blue Bell"),
  ("Blue Canyon"),
  ("Blue Earth"),
  ("Blue Hills"),
  ("Blue Island"),
  ("Blue Mounds"),
  ("Blue Point"),
  ("Blue Ridge"),
  ("Blue Springs"),
  ("Bluefield"),
  ("Bluffdale"),
  ("Bluffton"),
  ("Blythe"),
  ("Blytheville"),
  ("Boalsburg"),
  ("Boardman"),
  ("Boaz"),
  ("Boca Del Mar"),
  ("Boca Pointe"),
  ("Boca Raton"),
  ("Bodega Bay"),
  ("Bodines"),
  ("Boerne"),
  ("Bogalusa"),
  ("Bogota borough"),
  ("Bohemia"),
  ("Boiling Spring Lakes"),
  ("Boiling Springs"),
  ("Boise"),
  ("Boise City"),
  ("Bolingbrook"),
  ("Bolivar"),
  ("Bolivar Peninsula"),
  ("Bolton Valley"),
  ("Bon Air"),
  ("Bonadelle Ranchos-"),
  ("Bonanza"),
  ("Bondville"),
  ("Bonham"),
  ("Bonifay"),
  ("Bonita"),
  ("Bonita Springs"),
  ("Bonne Terre"),
  ("Bonner Springs"),
  ("Bonners Ferry"),
  ("Bonney Lake"),
  ("Bonnie Lock-Woodsetter"),
  ("Bonsall"),
  ("Boone"),
  ("Booneville"),
  ("Boonsboro"),
  ("Boonton"),
  ("Boonville"),
  ("Boothwyn"),
  ("Borden"),
  ("Borger"),
  ("Borrego Springs"),
  ("Boscobel"),
  ("Bosque Farms"),
  ("Bossier City"),
  ("Boston"),
  ("Bostonia"),
  ("Bothell"),
  ("Boulder"),
  ("Boulder City"),
  ("Boulder Creek"),
  ("Boulder Hill"),
  ("Bound Brook borough"),
  ("Bountiful"),
  ("Bourbonnais"),
  ("Bowie"),
  ("Bowleys Quarters"),
  ("Bowling Green"),
  ("Box Elder"),
  ("Boyer borough"),
  ("Boyes Hot Springs"),
  ("Boyette"),
  ("Boyne City"),
  ("Boyne Falls"),
  ("Boynton Beach"),
  ("Bozeman"),
  ("Brackenridge borough"),
  ("Braddock borough"),
  ("Braddock Heights"),
  ("Bradenton"),
  ("Bradford"),
  ("Bradley"),
  ("Bradley Beach borough"),
  ("Brady"),
  ("Braidwood"),
  ("Brainerd"),
  ("Brainerd"),
  ("Braintree"),
  ("Brandon"),
  ("Branford Center"),
  ("Branson"),
  ("Brattleboro"),
  ("Brawley"),
  ("Brazil"),
  ("Brazoria"),
  ("Brea"),
  ("Breaux Bridge"),
  ("Breckenridge"),
  ("Breckenridge Hills"),
  ("Brecksville"),
  ("Breese"),
  ("Bremen"),
  ("Bremerton"),
  ("Brenham"),
  ("Brent"),
  ("Brentwood"),
  ("Brentwood borough"),
  ("Bressler-Enhaut-Oberlin"),
  ("Bret Harte"),
  ("Bretton Woods"),
  ("Brevard"),
  ("Brewer"),
  ("Brewerton"),
  ("Brewton"),
  ("Briar"),
  ("Briarcliff Manor"),
  ("Bridge City"),
  ("Bridge North"),
  ("Bridgehampton"),
  ("Bridgeport"),
  ("Bridgeport borough"),
  ("Bridgeton"),
  ("Bridgeview"),
  ("Bridgeville borough"),
  ("Bridgewater"),
  ("Bridgton"),
  ("Brielle borough"),
  ("Brier"),
  ("Brigantine"),
  ("Brigham City"),
  ("Bright"),
  ("Brighton"),
  ("Brightwaters"),
  ("Brillion"),
  ("Brimfield"),
  ("Brinckerhoff"),
  ("Brinkley"),
  ("Brinnon"),
  ("Brisbane"),
  ("Bristol"),
  ("Bristol borough"),
  ("Bristow"),
  ("Brittany Farms-Highlands"),
  ("Broad Brook"),
  ("Broadmoor"),
  ("Broadview"),
  ("Broadview Heights"),
  ("Broadview Park"),
  ("Broadview-Pompano Park"),
  ("Brockport"),
  ("Brockton"),
  ("Brodhead"),
  ("Brogden"),
  ("Broken Arrow"),
  ("Broken Bow"),
  ("Bronxville"),
  ("Brook Park"),
  ("Brookdale"),
  ("Brookfield"),
  ("Brookhaven"),
  ("Brookhaven borough"),
  ("Brookings"),
  ("Brookline"),
  ("Brooklyn"),
  ("Brooklyn Center"),
  ("Brooklyn Park"),
  ("Brookmont"),
  ("Brookridge"),
  ("Brooks"),
  ("Brookshire"),
  ("Brookside"),
  ("Brooksville"),
  ("Brookville"),
  ("Brookville borough"),
  ("Broomall"),
  ("Broomfield"),
  ("Broussard"),
  ("Broward Estates"),
  ("Brown Deer"),
  ("Brownfield"),
  ("Brownfields"),
  ("Brownlee Park"),
  ("Browns"),
  ("Browns Mills"),
  ("Brownsburg"),
  ("Brownsville"),
  ("Brownsville borough"),
  ("Brownsville-Bawcomville"),
  ("Brownville"),
  ("Brownwood"),
  ("Brunswick"),
  ("Brush"),
  ("Brushy Creek"),
  ("Brutus"),
  ("Bryan"),
  ("Bryans Road"),
  ("Bryant"),
  ("Bryn Mawr"),
  ("Bryn Mawr-Skyway"),
  ("Buchanan"),
  ("Buckeye"),
  ("Buckeye Lake"),
  ("Buckhannon"),
  ("Buckingham"),
  ("Buckley"),
  ("Buckner"),
  ("Bucksport"),
  ("Bucyrus"),
  ("Budd Lake"),
  ("Buechel"),
  ("Buellton"),
  ("Buena borough"),
  ("Buena Park"),
  ("Buena Vista"),
  ("Buffalo"),
  ("Buffalo Grove"),
  ("Buford"),
  ("Buhl"),
  ("Bull Run"),
  ("Bullhead City"),
  ("Bullhead City"),
  ("Bulverde"),
  ("Bunche Park"),
  ("Bunker Hill Village"),
  ("Bunkie"),
  ("Buras-Triumph"),
  ("Burbank"),
  ("Burgaw"),
  ("Burien"),
  ("Burkburnett"),
  ("Burke"),
  ("Burleson"),
  ("Burley"),
  ("Burlingame"),
  ("Burlington"),
  ("Burnet"),
  ("Burney"),
  ("Burnham"),
  ("Burns"),
  ("Burnsville"),
  ("Burr Ridge"),
  ("Burton"),
  ("Burtonsville"),
  ("Bushnell"),
  ("Butler"),
  ("Butler Beach"),
  ("Butler borough"),
  ("Butner"),
  ("Butte"),
  ("Butternut Basin"),
  ("Butte-Silver Bow"),
  ("Buzzards Bay"),
  ("Byesville"),
  ("Byram"),
  ("Byron"),
  ("Byron Center"),
  ("Bystrom"),
  ("Cabot"),
  ("Cactus"),
  ("Cadillac"),
  ("Cadiz"),
  ("Cahaba Heights"),
  ("Cahokia"),
  ("Cairo"),
  ("Cajah's Mountain"),
  ("Calabasas"),
  ("Calais"),
  ("Calcium"),
  ("Calcutta"),
  ("Caldwell"),
  ("Caldwell borough"),
  ("Caledonia"),
  ("Calera"),
  ("Calexico"),
  ("Calhoun"),
  ("California"),
  ("California borough"),
  ("California City"),
  ("Calimesa"),
  ("Calipatria"),
  ("Calistoga"),
  ("Callaway"),
  ("Calpella"),
  ("Calumet City"),
  ("Calumet Park"),
  ("Calvert City"),
  ("Calverton"),
  ("Camanche"),
  ("Camano"),
  ("Camarillo"),
  ("Camas"),
  ("Cambria"),
  ("Cambrian Park"),
  ("Cambridge"),
  ("Cambridge"),
  ("Camden"),
  ("Camdenton"),
  ("Cameron"),
  ("Cameron Park"),
  ("Camilla"),
  ("Camp Hill borough"),
  ("Camp Lake"),
  ("Camp Pendleton North"),
  ("Camp Pendleton South"),
  ("Camp Springs"),
  ("Camp Swift"),
  ("Camp Verde"),
  ("Campbell"),
  ("Campbellsville"),
  ("Canal Fulton"),
  ("Canal Winchester"),
  ("Canandaigua"),
  ("Canastota"),
  ("Canby"),
  ("Candler-McAfee"),
  ("Canfield"),
  ("Cannon AFB"),
  ("Cannon Beach"),
  ("Cannon Falls"),
  ("Cannonsburg"),
  ("Canon City"),
  ("Canonsburg borough"),
  ("Canton"),
  ("Canutillo"),
  ("Canyon"),
  ("Canyon Lake"),
  ("Canyon Rim"),
  ("Cape Canaveral"),
  ("Cape Cod"),
  ("Cape Coral"),
  ("Cape Girardeau"),
  ("Cape May"),
  ("Cape May Court House"),
  ("Cape Neddick"),
  ("Cape St"),
  ("Cape St. Claire"),
  ("Capitol Heights"),
  ("Capitola"),
  ("Captain Cook"),
  ("Carbondale"),
  ("Carefree"),
  ("Carencro"),
  ("Carey"),
  ("Caribou"),
  ("Carl Junction"),
  ("Carle Place"),
  ("Carleton"),
  ("Carlinville"),
  ("Carlisle"),
  ("Carlisle borough"),
  ("Carlsbad"),
  ("Carlstadt borough"),
  ("Carlyle"),
  ("Carlyss"),
  ("Carmel"),
  ("Carmel Hamlet"),
  ("Carmel Valley Village"),
  ("Carmel-by-the-Sea"),
  ("Carmi"),
  ("Carmichael"),
  ("Carmody Hills-Pepper Mill"),
  ("Carnegie borough"),
  ("Carney"),
  ("Carneys Point"),
  ("Carnot-Moon"),
  ("Caro"),
  ("Caroga Lake"),
  ("Carol City"),
  ("Carol Stream"),
  ("Carolina Beach"),
  ("Carpentersville"),
  ("Carpinteria"),
  ("Carrboro"),
  ("Carrizo Springs"),
  ("Carroll"),
  ("Carroll Valley borough"),
  ("Carrollton"),
  ("Carson"),
  ("Carson City"),
  ("Carter Lake"),
  ("Carteret borough"),
  ("Cartersville"),
  ("Carterville"),
  ("Carthage"),
  ("Caruthersville"),
  ("Carver Ranches"),
  ("Cary"),
  ("Casa Conejo"),
  ("Casa de Oro-Mount Helix"),
  ("Casa Grande"),
  ("Casa Grande"),
  ("Casas Adobes"),
  ("Cascade-Fairwood"),
  ("Casey"),
  ("Caseyville"),
  ("Cashmere"),
  ("Casper"),
  ("Caspian"),
  ("Cass City"),
  ("Casselberry"),
  ("Cassville"),
  ("Castle Hills"),
  ("Castle Pines"),
  ("Castle Point"),
  ("Castle Rock"),
  ("Castle Shannon borough"),
  ("Castleton"),
  ("Castlewood"),
  ("Castro Valley"),
  ("Castroville"),
  ("Catalina"),
  ("Catalina Foothills"),
  ("Catasauqua borough"),
  ("Cathcart"),
  ("Cathedral City"),
  ("Catonsville"),
  ("Catoosa"),
  ("Catskill"),
  ("Cave Creek"),
  ("Cave Spring"),
  ("Cayce"),
  ("Cayucos"),
  ("Cayuga Heights"),
  ("Cazenovia"),
  ("Cecil-Bishop"),
  ("Cedar"),
  ("Cedar City"),
  ("Cedar Falls"),
  ("Cedar Grove"),
  ("Cedar Hill"),
  ("Cedar Hills"),
  ("Cedar Lake"),
  ("Cedar Mill"),
  ("Cedar Park"),
  ("Cedar Rapids"),
  ("Cedar Springs"),
  ("Cedarburg"),
  ("Cedarhurst"),
  ("Cedarville"),
  ("Celebration"),
  ("Celina"),
  ("Centennial"),
  ("Center"),
  ("Center Line"),
  ("Center Moriches"),
  ("Center Point"),
  ("Centereach"),
  ("Centerport"),
  ("Centerville"),
  ("Centerville borough"),
  ("Central"),
  ("Central City"),
  ("Central Falls"),
  ("Central Gardens"),
  ("Central Heights-Midland"),
  ("Central Islip"),
  ("Central Manchester"),
  ("Central Park"),
  ("Central Point"),
  ("Central Waterford"),
  ("Centralia"),
  ("Centre"),
  ("Centreville"),
  ("Century Village"),
  ("Ceres"),
  ("Cerritos"),
  ("Chackbay"),
  ("Chadron"),
  ("Chaffee"),
  ("Chagrin Falls"),
  ("Chalco"),
  ("Chalfont borough"),
  ("Chalkville"),
  ("Chalmette"),
  ("Chamberlayne"),
  ("Chambers Estates"),
  ("Chambersburg borough"),
  ("Chamblee"),
  ("Champaign"),
  ("Champion Heights"),
  ("Champlin"),
  ("Chandler"),
  ("Chanhassen"),
  ("Channahon"),
  ("Channel Islands Beach"),
  ("Channelview"),
  ("Chantilly"),
  ("Chanute"),
  ("Chaparral"),
  ("Chapel Hill"),
  ("Chappaqua"),
  ("Chardon"),
  ("Chariton"),
  ("Charleroi borough"),
  ("Charles"),
  ("Charles City"),
  ("Charles Town"),
  ("Charleston"),
  ("Charleston"),
  ("Charlevoix"),
  ("Charlotte"),
  ("Charlotte Harbor"),
  ("Charlottesville"),
  ("Charter Oak"),
  ("Chaska"),
  ("Chatham"),
  ("Chatham borough"),
  ("Chatsworth"),
  ("Chattahoochee"),
  ("Chattanooga"),
  ("Chattanooga Valley"),
  ("Chauvin"),
  ("Cheat Lake"),
  ("Cheboygan"),
  ("Checotah"),
  ("Cheektowaga"),
  ("Chehalis"),
  ("Chelan"),
  ("Chelsea"),
  ("Cheney"),
  ("Chenoweth"),
  ("Cheraw"),
  ("Cherokee"),
  ("Cherokee Village"),
  ("Cherry Creek"),
  ("Cherry Grove"),
  ("Cherry Hill Mall"),
  ("Cherry Hills Village"),
  ("Cherry Valley"),
  ("Cherryland"),
  ("Cherryville"),
  ("Chesaning"),
  ("Chesapeake"),
  ("Chesapeake Beach"),
  ("Chesapeake Ranch"),
  ("Cheshire Village"),
  ("Chester"),
  ("Chester Township"),
  ("Chesterbrook"),
  ("Chesterfield"),
  ("Chesterfield Court House"),
  ("Chesterland"),
  ("Chesterton"),
  ("Chestnut Ridge"),
  ("Cheval"),
  ("Cheverly"),
  ("Cheviot"),
  ("Chevy Chase"),
  ("Cheyenne"),
  ("Chicago"),
  ("Chicago Heights"),
  ("Chicago Ridge"),
  ("Chickasaw"),
  ("Chickasha"),
  ("Chico"),
  ("Chicopee"),
  ("Childersburg"),
  ("Childress"),
  ("Chillicothe"),
  ("Chillum"),
  ("Chilton"),
  ("Chimayo"),
  ("China Grove"),
  ("China Lake"),
  ("Chincoteague"),
  ("Chinle"),
  ("Chino"),
  ("Chino Hills"),
  ("Chino Valley"),
  ("Chipley"),
  ("Chippewa Falls"),
  ("Chisago City"),
  ("Chisholm"),
  ("Chittenango"),
  ("Choctaw"),
  ("Choteau"),
  ("Chowchilla"),
  ("Christiansburg"),
  ("Christopher"),
  ("Chubbuck"),
  ("Chula Vista"),
  ("Church Hill"),
  ("Church Point"),
  ("Churchill"),
  ("Churchill borough"),
  ("Churchville"),
  ("Cibolo"),
  ("Cicero"),
  ("Cienegas Terrace"),
  ("Cimarron Hills"),
  ("Cincinnati"),
  ("Cinco Ranch"),
  ("Circle Pines"),
  ("Circleville"),
  ("Cisco"),
  ("Citronelle"),
  ("Citrus"),
  ("Citrus Heights"),
  ("Citrus Heights"),
  ("Citrus Hills"),
  ("Citrus Park"),
  ("Citrus Ridge"),
  ("Citrus Springs"),
  ("City of The Dalles"),
  ("Clackamas"),
  ("Claiborne"),
  ("Clairton"),
  ("Clanton"),
  ("Clare"),
  ("Claremont"),
  ("Claremore"),
  ("Clarendon Hills"),
  ("Clarinda"),
  ("Clarion"),
  ("Clarion borough"),
  ("Clark"),
  ("Clarkdale"),
  ("Clarks Summit borough"),
  ("Clarksburg"),
  ("Clarksdale"),
  ("Clarkson Valley"),
  ("Clarkston"),
  ("Clarksville"),
  ("Claryville"),
  ("Clawson"),
  ("Clay"),
  ("Clay Center"),
  ("Claymont"),
  ("Clayton"),
  ("Clayton borough"),
  ("Clear Lake"),
  ("Clearbrook Park"),
  ("Clearfield"),
  ("Clearfield borough"),
  ("Clearlake"),
  ("Clearwater"),
  ("Cleburne"),
  ("Clementon borough"),
  ("Clemmons"),
  ("Clemson"),
  ("Clermont"),
  ("Cleveland"),
  ("Cleveland Heights"),
  ("Cleves"),
  ("Clewiston"),
  ("Cliffside Park borough"),
  ("Cliffwood Beach"),
  ("Clifton"),
  ("Clifton Forge"),
  ("Clifton Heights borough"),
  ("Clinton"),
  ("Clintonville"),
  ("Clive"),
  ("Cloquet"),
  ("Closter borough"),
  ("Clover"),
  ("Clover Hill"),
  ("Cloverdale"),
  ("Cloverleaf"),
  ("Cloverly"),
  ("Clovis"),
  ("Clute"),
  ("Clyde"),
  ("Clyde Hill"),
  ("Clymer"),
  ("Coachella"),
  ("Coal City"),
  ("Coal Valley"),
  ("Coalinga"),
  ("Coatesville"),
  ("Cobalt"),
  ("Cobleskill"),
  ("Cochituate"),
  ("Cochran"),
  ("Cockeysville"),
  ("Cockrell Hill"),
  ("Cocoa"),
  ("Cocoa Beach"),
  ("Cocoa West"),
  ("Coconut Creek"),
  ("Cody"),
  ("Coeurd' Alene"),
  ("Coeurd'Alene"),
  ("Coffeyville"),
  ("Cohoes"),
  ("Cokato"),
  ("Colby"),
  ("Cold Spring"),
  ("Cold Spring Harbor"),
  ("Cold Springs"),
  ("Coldwater"),
  ("Colebrook"),
  ("Coleman"),
  ("Colesville"),
  ("Colfax"),
  ("College"),
  ("College Park"),
  ("College Place"),
  ("College Station"),
  ("Collegedale"),
  ("Collegeville borough"),
  ("Colleyville"),
  ("Collier Manor-Cresthaven"),
  ("Collierville"),
  ("Collingdale borough"),
  ("Collingswood borough"),
  ("Collins"),
  ("Collinsville"),
  ("Colona"),
  ("Colonia"),
  ("Colonial Beach"),
  ("Colonial Heights"),
  ("Colonial Park"),
  ("Colonial Pine Hills"),
  ("Colonie"),
  ("Colorado City"),
  ("Colorado Springs"),
  ("Colorado Springs"),
  ("Colton"),
  ("Columbia"),
  ("Columbia borough"),
  ("Columbia City"),
  ("Columbia Falls"),
  ("Columbia Heights"),
  ("Columbiana"),
  ("Columbine"),
  ("Columbus"),
  ("Colusa"),
  ("Colville"),
  ("Comanche"),
  ("Combee Settlement"),
  ("Combes"),
  ("Commack"),
  ("Commerce"),
  ("Commerce City"),
  ("Compton"),
  ("Comstock Northwest"),
  ("Comstock Park"),
  ("Concord"),
  ("Concordia"),
  ("Congers"),
  ("Conley"),
  ("Conneaut"),
  ("Conneaut Lakeshore"),
  ("Connell"),
  ("Connellsville"),
  ("Connersville"),
  ("Conning Towers-Nautilus"),
  ("Conover"),
  ("Conrad"),
  ("Conroe"),
  ("Conshohocken borough"),
  ("Converse"),
  ("Conway"),
  ("Conyers"),
  ("Cookeville"),
  ("Coolidge"),
  ("Coon Rapids"),
  ("Cooper"),
  ("Cooper City"),
  ("Coopersburg borough"),
  ("Cooperstown"),
  ("Coopersville"),
  ("Coos Bay"),
  ("Copiague"),
  ("Coplay borough"),
  ("Coppell"),
  ("Copperas Cove"),
  ("Coquille"),
  ("Coral Gables"),
  ("Coral Hills"),
  ("Coral Springs"),
  ("Coral Terrace"),
  ("Coralville"),
  ("Coram"),
  ("Coraopolis borough"),
  ("Corbin"),
  ("Corcoran"),
  ("Cordaville"),
  ("Cordele"),
  ("Cordova"),
  ("Corinth"),
  ("Corinth"),
  ("Cornelia"),
  ("Cornelius"),
  ("Corning"),
  ("Cornville"),
  ("Cornwall borough"),
  ("Cornwall on Hudson"),
  ("Cornwells"),
  ("Corona"),
  ("Coronado"),
  ("Corpus Christi"),
  ("Corrales"),
  ("Corry"),
  ("Corsicana"),
  ("Corte Madera"),
  ("Cortez"),
  ("Cortland"),
  ("Corunna"),
  ("Corvallis"),
  ("Corydon"),
  ("Coshocton"),
  ("Costa Mesa"),
  ("Cotati"),
  ("Coto de Caza"),
  ("Cottage Grove"),
  ("Cottage Lake"),
  ("Cottonwood"),
  ("Cottonwood Heights"),
  ("Cottonwood West"),
  ("Cottonwood-Verde Village"),
  ("Cotulla"),
  ("Coudersport"),
  ("Coudersport borough"),
  ("Council Bluffs"),
  ("Country Club"),
  ("Country Club Estates"),
  ("Country Club Hills"),
  ("Country Homes"),
  ("Country Lake Estates"),
  ("Country Walk"),
  ("Countryside"),
  ("Covedale"),
  ("Coventry Lake"),
  ("Covina"),
  ("Covington"),
  ("Coweta"),
  ("Coxsackie"),
  ("Cozad"),
  ("Crab Orchard"),
  ("Crafton borough"),
  ("Craig"),
  ("Cramerton"),
  ("Crandall"),
  ("Crane"),
  ("Cranford"),
  ("Cranston"),
  ("Crawfordsville"),
  ("Creede"),
  ("Cresap-Bel Air"),
  ("Crescent"),
  ("Crescent City"),
  ("Crescent City North"),
  ("Crescent Lake"),
  ("Crescent Springs"),
  ("Cresco"),
  ("Cresskill borough"),
  ("Crest"),
  ("Crest Hill"),
  ("Crested Butte"),
  ("Crestline"),
  ("Creston"),
  ("Crestview"),
  ("Crestview Hills"),
  ("Crestwood"),
  ("Crestwood Village"),
  ("Creswell"),
  ("Crete"),
  ("Creve Coeur"),
  ("Crisfield"),
  ("Crockett"),
  ("Crofton"),
  ("Crookston"),
  ("Cross Lanes"),
  ("Cross Plains"),
  ("Crossett"),
  ("Crossville"),
  ("Croton-on-Hudson"),
  ("Crowley"),
  ("Crown Heights"),
  ("Crown Point"),
  ("Crownpoint"),
  ("Croydon"),
  ("Crozet"),
  ("Crystal"),
  ("Crystal City"),
  ("Crystal Lake"),
  ("Crystal Lawns"),
  ("Crystal River"),
  ("Crystal Springs"),
  ("Cuba"),
  ("Cudahy"),
  ("Cuero"),
  ("Cullman"),
  ("Culloden"),
  ("Cullowhee"),
  ("Culpeper"),
  ("Culver City"),
  ("Cumberland"),
  ("Cumberland"),
  ("Cumberland Center"),
  ("Cumberland Hill"),
  ("Cumming"),
  ("Cupertino"),
  ("Curlew"),
  ("Curwensville borough"),
  ("Cushing"),
  ("Cut Bank"),
  ("Cut Off"),
  ("Cutchogue"),
  ("Cuthbert"),
  ("Cutler"),
  ("Cutler Ridge"),
  ("Cutlerville"),
  ("Cutten"),
  ("Cuyahoga Falls"),
  ("Cynthiana"),
  ("Cypress"),
  ("Cypress Gardens"),
  ("Cypress Lake"),
  ("D' Iberville"),
  ("Dacono"),
  ("Dacula"),
  ("Dade City"),
  ("Dade City North"),
  ("Dadeville"),
  ("Dahlonega"),
  ("Daingerfield"),
  ("Dale City"),
  ("Daleville"),
  ("Dalhart"),
  ("Dallas"),
  ("Dallas borough"),
  ("Dalton"),
  ("Daly City"),
  ("Damascus"),
  ("Dana Point"),
  ("Danbury"),
  ("Dania Beach"),
  ("Danielson borough"),
  ("Dannemora"),
  ("Dansville"),
  ("Danvers"),
  ("Danville"),
  ("Danville borough"),
  ("Daphne"),
  ("Darby borough"),
  ("Darby Township"),
  ("Dardanelle"),
  ("Dardenne Prairie"),
  ("Darien"),
  ("Darlington"),
  ("Darnes"),
  ("Davenport"),
  ("David City"),
  ("Davidson"),
  ("Davie"),
  ("Davis"),
  ("Davis City"),
  ("Davison"),
  ("Dawson"),
  ("Dawson Springs"),
  ("Day Heights"),
  ("Day Valley"),
  ("Dayton"),
  ("Daytona Beach"),
  ("Daytona Beach Shores"),
  ("De Bary"),
  ("De Funiak Springs"),
  ("De Lancey"),
  ("De Land"),
  ("De Motte"),
  ("De Pere"),
  ("De Queen"),
  ("De Ridder"),
  ("De Soto"),
  ("De Witt"),
  ("Deale"),
  ("Dearborn"),
  ("Dearborn Heights"),
  ("Decatur"),
  ("Decorah"),
  ("Dedham"),
  ("Deephaven"),
  ("Deer Lodge"),
  ("Deer Park"),
  ("Deerfield"),
  ("Deerfield Beach"),
  ("Defiance"),
  ("Deford"),
  ("DeForest"),
  ("DeKalb"),
  ("Del Aire"),
  ("Del City"),
  ("Del Mar"),
  ("Del Monte Forest"),
  ("Del Rio"),
  ("Delafield"),
  ("Delano"),
  ("Delavan"),
  ("Delaware"),
  ("Delhi"),
  ("Dell Rapids"),
  ("Dellwood"),
  ("Delmar"),
  ("Delphi"),
  ("Delphos"),
  ("Delray Beach"),
  ("Delta"),
  ("Deltona"),
  ("Demarest borough"),
  ("Deming"),
  ("Demopolis"),
  ("Denham Springs"),
  ("Denison"),
  ("Denmark"),
  ("Dennis"),
  ("Dennis Port"),
  ("Dennison"),
  ("Dent"),
  ("Denton"),
  ("Dentsville"),
  ("Denver"),
  ("Denver borough"),
  ("Denver City"),
  ("Depew"),
  ("DeQuincy"),
  ("Derby"),
  ("Dermott"),
  ("Derry"),
  ("Derry borough"),
  ("Des Allemands"),
  ("Des Moines"),
  ("Des Peres"),
  ("Des Plaines"),
  ("Deschutes River Woods"),
  ("Desert Hot Springs"),
  ("Desloge"),
  ("DeSoto"),
  ("Desoto Lakes"),
  ("Destin"),
  ("Destrehan"),
  ("Detroit"),
  ("Detroit Lakes"),
  ("Devault"),
  ("Devil's Lake"),
  ("Devils Lake"),
  ("Devine"),
  ("Devola"),
  ("Devon-Berwyn"),
  ("Dewey"),
  ("Dewey-Humboldt"),
  ("DeWitt"),
  ("Dexter"),
  ("Diamond Bar"),
  ("Diamond Springs"),
  ("Diamondhead"),
  ("Diboll"),
  ("Dickinson"),
  ("Dickson"),
  ("Dickson City borough"),
  ("Dilley"),
  ("Dillon"),
  ("Dillonvale"),
  ("Dilworth"),
  ("Dimmitt"),
  ("Dinuba"),
  ("Discovery Bay"),
  ("Dishman"),
  ("District Heights"),
  ("DISTRICT OF"),
  ("Dix Hills"),
  ("Dixmoor"),
  ("Dixon"),
  ("Dixon Lane-Meadow"),
  ("Dobbs Ferry"),
  ("Dock Junction"),
  ("Doctor Phillips"),
  ("Dodge City"),
  ("Dodgeville"),
  ("Doffing"),
  ("Dolton"),
  ("Donaldsonville"),
  ("Donalsonville"),
  ("Donna"),
  ("Donora borough"),
  ("Doral"),
  ("Doraville"),
  ("Dorena"),
  ("Dormont borough"),
  ("Dos Palos"),
  ("Dothan"),
  ("Douglas"),
  ("Douglass Hills"),
  ("Douglasville"),
  ("Dover"),
  ("Dover"),
  ("Dover Base Housing"),
  ("Dover-Foxcroft"),
  ("Dowagiac"),
  ("Downers Grove"),
  ("Downey"),
  ("Downing borough"),
  ("Doyles"),
  ("Doyles borough"),
  ("DP"),
  ("Draper"),
  ("Dresden"),
  ("Dresser"),
  ("Drexel Heights"),
  ("Drexel Hill"),
  ("Drexel-Alvernon"),
  ("Driggs"),
  ("Druid Hills"),
  ("Drum Point"),
  ("Drumright"),
  ("Dry Run"),
  ("Du Bois"),
  ("Du Quoin"),
  ("Duarte"),
  ("Dublin"),
  ("DuBois"),
  ("Dubuque"),
  ("Dulce"),
  ("Duluth"),
  ("Dumas"),
  ("Dumbarton"),
  ("Dumfries"),
  ("Dumont borough"),
  ("Dunbar"),
  ("Duncan"),
  ("Duncanville"),
  ("Dundalk"),
  ("Dundee"),
  ("Dunean"),
  ("Dunedin"),
  ("Dunellen borough"),
  ("Dunkirk"),
  ("Dunlap"),
  ("Dunmore borough"),
  ("Dunn"),
  ("Dunn Loring"),
  ("Dunwoody"),
  ("Dupo"),
  ("Dupont borough"),
  ("Duquesne"),
  ("Durand"),
  ("Durango"),
  ("Durant"),
  ("Durham"),
  ("Duryea borough"),
  ("Duvall"),
  ("Dwight"),
  ("Dyer"),
  ("Dyersburg"),
  ("Dyersville"),
  ("Eagan"),
  ("Eagar"),
  ("Eagle"),
  ("Eagle Grove"),
  ("Eagle Lake"),
  ("Eagle Mountain"),
  ("Eagle Pass"),
  ("Eagle Point"),
  ("Eagleton Village"),
  ("Eagle-Vail"),
  ("Eagleville"),
  ("Earle"),
  ("Earlimart"),
  ("Early"),
  ("Easley"),
  ("East Alton"),
  ("East Aurora"),
  ("East Bethel"),
  ("East Brainerd"),
  ("East Brunswick"),
  ("East Burke"),
  ("East Chicago"),
  ("East Cleveland"),
  ("East Compton"),
  ("East Dennis"),
  ("East Dundee"),
  ("East End"),
  ("East Falmouth"),
  ("East Farmingdale"),
  ("East Flat Rock"),
  ("East Foothills"),
  ("East Freehold"),
  ("East Gaffney"),
  ("East Glenville"),
  ("East Grand Forks"),
  ("East Grand Rapids"),
  ("East Greenbush"),
  ("East Greenville borough"),
  ("East Hampton"),
  ("East Hampton North"),
  ("East Hartford"),
  ("East Harwich"),
  ("East Haven"),
  ("East Hemet"),
  ("East Highland Park"),
  ("East Hill-Meridian"),
  ("East Hills"),
  ("East Islip"),
  ("East Jordan"),
  ("East La Mirada"),
  ("East Lake"),
  ("East Lake-Orient Park"),
  ("East Lansdowne borough"),
  ("East Lansing"),
  ("East Liverpool"),
  ("East Los Angeles"),
  ("East Massapequa"),
  ("East Meadow"),
  ("East Merrimack"),
  ("East Millcreek"),
  ("East Moline"),
  ("East Moriches"),
  ("East Norriton"),
  ("East Northport"),
  ("East Norwich"),
  ("East Oakdale"),
  ("East Orange"),
  ("East Palestine"),
  ("East Palo Alto"),
  ("East Pasadena"),
  ("East Patchogue"),
  ("East Peoria"),
  ("East Perrine"),
  ("East Petersburg borough"),
  ("East Point"),
  ("East Port Orchard"),
  ("East Porterville"),
  ("East Prairie"),
  ("East Providence"),
  ("East Quogue"),
  ("East Renton Highlands"),
  ("East Richmond Heights"),
  ("East Ridge"),
  ("East Riverdale"),
  ("East Rochester"),
  ("East Rockaway"),
  ("East Rockingham"),
  ("East Rutherford borough"),
  ("East Saint Louis"),
  ("East San Gabriel"),
  ("East Sandwich"),
  ("East Shoreham"),
  ("East St"),
  ("East St. Louis city"),
  ("East Stroudsburg"),
  ("East Syracuse"),
  ("East Tawas"),
  ("East Troy"),
  ("East Union"),
  ("East Wenatchee"),
  ("East Wenatchee Bench"),
  ("East Williston"),
  ("East York"),
  ("Eastchester"),
  ("Eastgate"),
  ("Easthampton"),
  ("Eastlake"),
  ("Eastland"),
  ("Eastlawn Gardens"),
  ("Eastman"),
  ("Easton"),
  ("Eastpointe"),
  ("Eastwood"),
  ("Eaton"),
  ("Eaton borough"),
  ("Eaton Rapids"),
  ("Eatonton"),
  ("Eau Claire"),
  ("Ebensburg borough"),
  ("Echelon"),
  ("Economy borough"),
  ("Ecorse"),
  ("Edcouch"),
  ("Eddington"),
  ("Eden"),
  ("Eden Isle"),
  ("Eden Prairie"),
  ("Edenton"),
  ("Edgard"),
  ("Edgecliff Village"),
  ("Edgefield"),
  ("Edgemere"),
  ("Edgemoor"),
  ("Edgerton"),
  ("Edgewater"),
  ("Edgewater borough"),
  ("Edgewood"),
  ("Edgewood borough"),
  ("Edina"),
  ("Edinboro borough"),
  ("Edinburg"),
  ("Edinburgh"),
  ("Edison"),
  ("Edisto"),
  ("Edmond"),
  ("Edmonds"),
  ("Edna"),
  ("Edwards"),
  ("Edwards AFB"),
  ("Edwardsville"),
  ("Edwardsville borough"),
  ("Effingham"),
  ("Egg Harbor City"),
  ("Eglin AFB"),
  ("Egnar"),
  ("Egypt Lake-Leto"),
  ("Eidson Road"),
  ("Eielson AFB"),
  ("El Cajon"),
  ("El Campo"),
  ("El Cenizo"),
  ("El Centro"),
  ("El Cerrito"),
  ("El Cerro-Monterey Park"),
  ("El Dorado"),
  ("El Dorado Hills"),
  ("El Dorado Springs"),
  ("El Granada"),
  ("El Jebel"),
  ("El Lago"),
  ("El Mirage"),
  ("El Monte"),
  ("El Paso"),
  ("El Paso de Robles (Paso"),
  ("El Portal"),
  ("El Reno"),
  ("El Rio"),
  ("El Segundo"),
  ("El Sobrante"),
  ("El Verano"),
  ("Elba"),
  ("Elberton"),
  ("Elburn"),
  ("Eldersburg"),
  ("Eldon"),
  ("Eldora"),
  ("Eldorado"),
  ("Eldorado at Santa Fe"),
  ("Eldridge"),
  ("Electra"),
  ("Elfers"),
  ("Elgin"),
  ("Elim"),
  ("Elizabeth"),
  ("Elizabeth borough"),
  ("Elizabeth City"),
  ("Elizabethton"),
  ("Elk City"),
  ("Elk Grove"),
  ("Elk Grove Village"),
  ("Elk Plain"),
  ("Elk River"),
  ("Elkhart"),
  ("Elkhorn"),
  ("Elkin"),
  ("Elkins"),
  ("Elko"),
  ("Elkridge"),
  ("Elkton"),
  ("Ellensburg"),
  ("Ellenton"),
  ("Ellenville"),
  ("Ellettsville"),
  ("Ellicott City"),
  ("Ellicottville"),
  ("Ellisville"),
  ("Ellsworth"),
  ("Ellsworth AFB"),
  ("Ellwood City borough"),
  ("Elm Grove"),
  ("Elma"),
  ("Elmhurst"),
  ("Elmira"),
  ("Elmira Heights"),
  ("Elmont"),
  ("Elmsford"),
  ("Elmwood"),
  ("Elmwood Park"),
  ("Elmwood Park borough"),
  ("Elmwood Place"),
  ("Elon College"),
  ("Eloy"),
  ("Elroy"),
  ("Elsa"),
  ("Elsmere"),
  ("Elwood"),
  ("Ely"),
  ("Ely"),
  ("Elyria"),
  ("Emerald Isle"),
  ("Emerald Lake Hills"),
  ("Emerson borough"),
  ("Emeryville"),
  ("Emmaus borough"),
  ("Emmetsburg"),
  ("Emmett"),
  ("Empire"),
  ("Emporia"),
  ("Emporia"),
  ("Emporium borough"),
  ("Emsworth borough"),
  ("Encinitas"),
  ("Endicott"),
  ("Endwell"),
  ("England"),
  ("Englewood"),
  ("Englewood Cliffs borough"),
  ("Enid"),
  ("Ennis"),
  ("Enoch"),
  ("Enochville"),
  ("Enola"),
  ("Enon"),
  ("Enon"),
  ("Ensley"),
  ("Enterprise"),
  ("Enumclaw"),
  ("Ephraim"),
  ("Ephrata"),
  ("Ephrata borough"),
  ("Erie"),
  ("Erlands Point-Kitsap Lake"),
  ("Erlanger"),
  ("Erlton-Ellisburg"),
  ("Erwin"),
  ("Escalon"),
  ("Escanaba"),
  ("Escatawpa"),
  ("Escondido"),
  ("Espanola"),
  ("Esperance"),
  ("Essex"),
  ("Essex Junction"),
  ("Essex Village"),
  ("Essexville"),
  ("Estelle"),
  ("Estero"),
  ("Estes Park"),
  ("Estherville"),
  ("Etna borough"),
  ("Etowah"),
  ("Etters"),
  ("Ettrick"),
  ("Euclid"),
  ("Eudora"),
  ("Eufaula"),
  ("Eugene"),
  ("Euharlee"),
  ("Euless"),
  ("Eunice"),
  ("Eureka"),
  ("Eureka"),
  ("Eustis"),
  ("Evans"),
  ("Evansdale"),
  ("Evanston"),
  ("Evanston"),
  ("Evansville"),
  ("Eveleth"),
  ("Evendale"),
  ("Everett"),
  ("Evergreen"),
  ("Evergreen Park"),
  ("Everman"),
  ("Ewa Beach"),
  ("Ewa Gentry"),
  ("Ewa Villages"),
  ("Ewing"),
  ("Excelsior Springs"),
  ("Exeter"),
  ("Exeter borough"),
  ("Experiment"),
  ("Exton"),
  ("Fabens"),
  ("Fabius"),
  ("Fair Haven borough"),
  ("Fair Lawn borough"),
  ("Fair Oaks"),
  ("Fair Oaks Ranch"),
  ("Fair Plain"),
  ("Fairbanks"),
  ("Fairborn"),
  ("Fairburn"),
  ("Fairbury"),
  ("Fairchild AFB"),
  ("Fairdale"),
  ("Fairfax"),
  ("Fairfield"),
  ("Fairfield Glade"),
  ("Fairhope"),
  ("Fairland"),
  ("Fairlawn"),
  ("Fairless Hills"),
  ("Fairmont"),
  ("Fairmount"),
  ("Fairport"),
  ("Fairport Harbor"),
  ("Fairview"),
  ("Fairview borough"),
  ("Fairview Heights"),
  ("Fairview Park"),
  ("Fairview Shores"),
  ("Fairway"),
  ("Fairwood"),
  ("Falcon Heights"),
  ("Falconer"),
  ("Falfurrias"),
  ("Fall River"),
  ("Fallbrook"),
  ("Fallon"),
  ("Falls Church"),
  ("Falls City"),
  ("Fallston"),
  ("Falmouth"),
  ("Fanwood borough"),
  ("Fargo"),
  ("Faribault"),
  ("Farmers Branch"),
  ("Farmersville"),
  ("Farmerville"),
  ("Farmingdale"),
  ("Farmington"),
  ("Farmington Hills"),
  ("Farmingville"),
  ("Farmville"),
  ("Farr West"),
  ("Farragut"),
  ("Farrell"),
  ("Fayette"),
  ("Fayetteville"),
  ("Fayetteville"),
  ("Feasterville-Trevose"),
  ("Feather Sound"),
  ("Federal Heights"),
  ("Federal Way"),
  ("Federalsburg"),
  ("Felida"),
  ("Fellsmere"),
  ("Fenton"),
  ("Fergus Falls"),
  ("Ferguson"),
  ("Fern Creek"),
  ("Fern Park"),
  ("Fernandina Beach"),
  ("Ferndale"),
  ("Fernley"),
  ("Fernway"),
  ("Ferriday"),
  ("Ferry Pass"),
  ("Ferrysburg"),
  ("Festus"),
  ("Fetters Hot Springs-Agua"),
  ("Fife"),
  ("Fillmore"),
  ("Findlay"),
  ("Finley"),
  ("Finney"),
  ("Fircrest"),
  ("Firebaugh"),
  ("Firthcliffe"),
  ("Fishers"),
  ("Fishersville"),
  ("Fitchburg"),
  ("Fitzgerald"),
  ("Five Corners"),
  ("Five Forks"),
  ("Flagler Beach"),
  ("Flagstaff"),
  ("Flagstaff"),
  ("Flanders"),
  ("Flat Rock"),
  ("Flat Top"),
  ("Flatwoods"),
  ("Fleetwood borough"),
  ("Flemingsburg"),
  ("Flemington borough"),
  ("Fletcher"),
  ("Flint"),
  ("Flora"),
  ("Floral City"),
  ("Floral Park"),
  ("Florence"),
  ("Florence-Graham"),
  ("Florence-Roebling"),
  ("Floresville"),
  ("Florham Park borough"),
  ("Florida"),
  ("Florida City"),
  ("Florida Ridge"),
  ("Florin"),
  ("Florissant"),
  ("Flossmoor"),
  ("Flour"),
  ("Flower Hill"),
  ("Flower Mound"),
  ("Flowing Wells"),
  ("Flowood"),
  ("Floydada"),
  ("Flushing"),
  ("Folcroft borough"),
  ("Foley"),
  ("Follansbee"),
  ("Folsom"),
  ("Fond du Lac"),
  ("Fond du Lac"),
  ("Fontana"),
  ("Foothill Farms"),
  ("Foothill Ranch"),
  ("Ford City"),
  ("Ford City borough"),
  ("Ford Heights"),
  ("Fords"),
  ("Fordyce"),
  ("Forest"),
  ("Forest Acres"),
  ("Forest City"),
  ("Forest Glen"),
  ("Forest Grove"),
  ("Forest Heights"),
  ("Forest Hill"),
  ("Forest Hills"),
  ("Forest Hills borough"),
  ("Forest Lake"),
  ("Forest Oaks"),
  ("Forest Park"),
  ("Forestbrook"),
  ("Forestdale"),
  ("Forestville"),
  ("Forked River"),
  ("Forks"),
  ("Forney"),
  ("Forrest City"),
  ("Forsyth"),
  ("Fort Atkinson"),
  ("Fort Belvoir"),
  ("Fort Benning South"),
  ("Fort Bliss"),
  ("Fort Bragg"),
  ("Fort Campbell North"),
  ("Fort Carson"),
  ("Fort Collins"),
  ("Fort Defiance"),
  ("Fort Dix"),
  ("Fort Dodge"),
  ("Fort Drum"),
  ("Fort Edward"),
  ("Fort Garland"),
  ("Fort Gibson"),
  ("Fort Hall"),
  ("Fort Hood"),
  ("Fort Hunt"),
  ("Fort Knox"),
  ("Fort Lauderdale"),
  ("Fort Lee"),
  ("Fort Lee borough"),
  ("Fort Leonard Wood"),
  ("Fort Lewis"),
  ("Fort Lupton"),
  ("Fort Madison"),
  ("Fort McKinley"),
  ("Fort Meade"),
  ("Fort Mill"),
  ("Fort Mitchell"),
  ("Fort Morgan"),
  ("Fort Myers"),
  ("Fort Myers Beach"),
  ("Fort Myers Shores"),
  ("Fort Oglethorpe"),
  ("Fort Payne"),
  ("Fort Pierce"),
  ("Fort Pierce North"),
  ("Fort Pierce South"),
  ("Fort Polk North"),
  ("Fort Polk South"),
  ("Fort Riley North"),
  ("Fort Rucker"),
  ("Fort Salonga"),
  ("Fort Scott"),
  ("Fort Shawnee"),
  ("Fort Smith"),
  ("Fort Smith"),
  ("Fort Stewart"),
  ("Fort Stockton"),
  ("Fort Thomas"),
  ("Fort Valley"),
  ("Fort Walton Beach"),
  ("Fort Washington"),
  ("Fort Wayne"),
  ("Fort Worth"),
  ("Fort Wright"),
  ("Fortuna"),
  ("Fortuna Foothills"),
  ("Fortville"),
  ("Forty Fort borough"),
  ("Foster City"),
  ("Fostoria"),
  ("Fountain"),
  ("Fountain Hill borough"),
  ("Fountain Hills"),
  ("Fountain Inn"),
  ("Fountain Valley"),
  ("Fountainbleau"),
  ("Fountainhead-Orchard"),
  ("Four Corners"),
  ("Fowler"),
  ("Fowlerville"),
  ("Fox Chapel borough"),
  ("Fox Farm-College"),
  ("Fox Island"),
  ("Fox Lake"),
  ("Fox Lake Hills"),
  ("Fox Point"),
  ("Fox River Grove"),
  ("Fox Run"),
  ("Foxborough"),
  ("Frackville borough"),
  ("Framingham"),
  ("Franconia"),
  ("Franconia"),
  ("Frankenmuth"),
  ("Frankfort"),
  ("Frankfort Square"),
  ("Franklin"),
  ("Franklin borough"),
  ("Franklin Lakes borough"),
  ("Franklin Park"),
  ("Franklin Park borough"),
  ("Franklin Square"),
  ("Franklinton"),
  ("Fraser"),
  ("Frederick"),
  ("Fredericksburg"),
  ("Frederickson"),
  ("Fredonia"),
  ("Freeburg"),
  ("Freedom"),
  ("Freehold borough"),
  ("Freeland"),
  ("Freeland borough"),
  ("Freeport"),
  ("Freer"),
  ("Fremont"),
  ("French Camp"),
  ("French Island"),
  ("Fresno"),
  ("Fridley"),
  ("Friendly"),
  ("Friendship Village"),
  ("Friendswood"),
  ("Friona"),
  ("Frisco"),
  ("Front Royal"),
  ("Frontenac"),
  ("Frostburg"),
  ("Frostproof"),
  ("Fruit Cove"),
  ("Fruit Heights"),
  ("Fruit Hill"),
  ("Fruita"),
  ("Fruitland"),
  ("Fruitland Park"),
  ("Fruitvale"),
  ("Fruitville"),
  ("Fullerton"),
  ("Fulton"),
  ("Fultondale"),
  ("Fuquay-Varina"),
  ("Fussels Corner"),
  ("Gadsden"),
  ("Gaffney"),
  ("Gages Lake"),
  ("Gahanna"),
  ("Gainesville"),
  ("Gaithersburg"),
  ("Galax"),
  ("Galena"),
  ("Galena Park"),
  ("Galesburg"),
  ("Galeville"),
  ("Galion"),
  ("Gallatin"),
  ("Galliano"),
  ("Gallipolis"),
  ("Gallup"),
  ("Galt"),
  ("Galva"),
  ("Galveston"),
  ("Gamewell"),
  ("Gang Mills"),
  ("Gantt"),
  ("Garberville"),
  ("Garden Acres"),
  ("Garden City"),
  ("Garden City Park"),
  ("Garden City South"),
  ("Garden Grove"),
  ("Garden Home-Whitford"),
  ("Garden View"),
  ("Gardena"),
  ("Gardendale"),
  ("Gardere"),
  ("Gardiner"),
  ("Gardner"),
  ("Gardnerville"),
  ("Gardnerville Ranchos"),
  ("Garfield"),
  ("Garfield Heights"),
  ("Garland"),
  ("Garner"),
  ("Garrett"),
  ("Garrison"),
  ("Garwood borough"),
  ("Gary"),
  ("Garyville"),
  ("Gas City"),
  ("Gastonia"),
  ("Gastonville"),
  ("Gates-North Gates"),
  ("Gatesville"),
  ("Gateway"),
  ("Gatlinburg"),
  ("Gautier"),
  ("Gaylord"),
  ("Geis borough"),
  ("Genesee"),
  ("Geneseo"),
  ("Geneva"),
  ("Genoa"),
  ("George"),
  ("George West"),
  ("Georgetown"),
  ("Gering"),
  ("German"),
  ("Gettysburg"),
  ("Gettysburg borough"),
  ("Gibbs"),
  ("Gibraltar"),
  ("Gibson"),
  ("Gibsonburg"),
  ("Gibsonia"),
  ("Gibsonton"),
  ("Gibsonville"),
  ("Giddings"),
  ("Gifford"),
  ("Gig Harbor"),
  ("Gilbert"),
  ("Gilbertsville"),
  ("Gillespie"),
  ("Gillette"),
  ("Gilmer"),
  ("Gilroy"),
  ("Girard"),
  ("Girard borough"),
  ("Girdwood"),
  ("Gladeview"),
  ("Gladewater"),
  ("Gladstone"),
  ("Gladwin"),
  ("Glasgow"),
  ("Glasgow Village"),
  ("Glassboro borough"),
  ("Glassport borough"),
  ("Glastonbury Center"),
  ("Gleed"),
  ("Glen Allen"),
  ("Glen Avon"),
  ("Glen Burnie"),
  ("Glen Carbon"),
  ("Glen Cove"),
  ("Glen Ellyn"),
  ("Glen Head"),
  ("Glen Raven"),
  ("Glen Ridge borough"),
  ("Glen Rock borough"),
  ("Glenarden"),
  ("Glencoe"),
  ("Glendale"),
  ("Glendale Heights"),
  ("Glendive"),
  ("Glendora"),
  ("Gleneagle"),
  ("Glenn Dale"),
  ("Glenn Heights"),
  ("Glennville"),
  ("Glenolden borough"),
  ("Glenpool"),
  ("Glens Falls"),
  ("Glens Falls North"),
  ("Glenside"),
  ("Glenvar Heights"),
  ("Glenview"),
  ("Glenwood"),
  ("Glenwood Landing"),
  ("Glenwood Springs"),
  ("Globe"),
  ("Gloucester"),
  ("Gloucester City"),
  ("Gloucester Point"),
  ("Gloversville"),
  ("Gloverville"),
  ("Goddard"),
  ("Godfrey"),
  ("Gold Beach"),
  ("Gold Camp"),
  ("Gold River"),
  ("Golden"),
  ("Golden Beach"),
  ("Golden Gate"),
  ("Golden Glades"),
  ("Golden Hills"),
  ("Golden Lakes"),
  ("Golden Triangle"),
  ("Golden Valley"),
  ("Goldendale"),
  ("Goldenrod"),
  ("Goldsboro"),
  ("Goleta"),
  ("Golf Manor"),
  ("Gonzales"),
  ("Gonzalez"),
  ("Gooding"),
  ("Goodings Grove"),
  ("Goodland"),
  ("Goodlettsville"),
  ("Goodview"),
  ("Goodyear"),
  ("Goose Creek"),
  ("Goose Prairie"),
  ("Gordon Heights"),
  ("Gorham"),
  ("Goshen"),
  ("Gosnell"),
  ("Gothenburg"),
  ("Goulding"),
  ("Goulds"),
  ("Gouverneur"),
  ("Gowanda"),
  ("Grafton"),
  ("Graham"),
  ("Grahamsville"),
  ("Grain Valley"),
  ("Grambling"),
  ("Gramercy"),
  ("Granbury"),
  ("Grand Bay"),
  ("Grand Blanc"),
  ("Grand Forks"),
  ("Grand Forks AFB"),
  ("Grand Haven"),
  ("Grand Island"),
  ("Grand Junction"),
  ("Grand Ledge"),
  ("Grand Portage"),
  ("Grand Prairie"),
  ("Grand Rapids"),
  ("Grand Saline"),
  ("Grand Terrace"),
  ("Grandview"),
  ("Grandview Heights"),
  ("Grandville"),
  ("Grandwood Park"),
  ("Granger"),
  ("Grangeville"),
  ("Granite Bay"),
  ("Granite City"),
  ("Granite Falls"),
  ("Granite Hills"),
  ("Grant"),
  ("Grantley"),
  ("Grants"),
  ("Grants Pass"),
  ("Grantsville"),
  ("Granville"),
  ("Grape Creek"),
  ("Grapevine"),
  ("Grass Valley"),
  ("Gravel Ridge"),
  ("Gray"),
  ("Gray Summit"),
  ("Grayling"),
  ("Graymoor-Devondale"),
  ("Grayslake"),
  ("Grayson"),
  ("Grayson Valley"),
  ("Great Bend"),
  ("Great Falls"),
  ("Great Neck"),
  ("Great Neck Estates"),
  ("Great Neck Plaza"),
  ("Greater Carrollwood"),
  ("Greater Landover"),
  ("Greater Northdale"),
  ("Greater Sun Center"),
  ("Greater Upper Marlboro"),
  ("Greatwood"),
  ("Greece"),
  ("Greeley"),
  ("Green"),
  ("Green Acres"),
  ("Green Bay"),
  ("Green Cove Springs"),
  ("Green Forest"),
  ("Green Haven"),
  ("Green Hill"),
  ("Green Oaks"),
  ("Green Park"),
  ("Green River"),
  ("Green Tree borough"),
  ("Green Valley"),
  ("Greenacres"),
  ("Greenbelt"),
  ("Greenbrier"),
  ("Greencastle"),
  ("Greencastle borough"),
  ("Greendale"),
  ("Greeneville"),
  ("Greenfield"),
  ("Greenhills"),
  ("Greenlawn"),
  ("Greensboro"),
  ("Greensburg"),
  ("Greentree"),
  ("Greenville"),
  ("Greenville borough"),
  ("Greenwood"),
  ("Greenwood Lake"),
  ("Greenwood Village"),
  ("Greer"),
  ("Grenada"),
  ("Gresham"),
  ("Gresham Park"),
  ("Gretna"),
  ("Gridley"),
  ("Griffin"),
  ("Griffith"),
  ("Grimes"),
  ("Grinnell"),
  ("Groesbeck"),
  ("Grosse Ile"),
  ("Grosse Pointe"),
  ("Grosse Pointe Farms"),
  ("Grosse Pointe Park"),
  ("Grosse Pointe Shores"),
  ("Grosse Pointe Woods"),
  ("Groton"),
  ("Grove"),
  ("Grove City"),
  ("Grove City borough"),
  ("Groveland-Big Oak Flat"),
  ("Groveport"),
  ("Grover Beach"),
  ("Groves"),
  ("Groveton"),
  ("Grundy Center"),
  ("Guadalupe"),
  ("Guilford Center"),
  ("Gulf Breeze"),
  ("Gulf Gate Estates"),
  ("Gulf Hills"),
  ("Gulf Park Estates"),
  ("Gulf Shores"),
  ("Gulfport"),
  ("Gulivoire Park"),
  ("Gun Barrel City"),
  ("Gunbarrel"),
  ("Gunnison"),
  ("Guntersville"),
  ("Gurnee"),
  ("Gustine"),
  ("Guthrie"),
  ("Guttenberg"),
  ("Guymon"),
  ("Gypsum"),
  ("Hacienda Heights"),
  ("Hackensack"),
  ("Hacketts"),
  ("Haddon Heights borough"),
  ("Haddonfield borough"),
  ("Hagers"),
  ("Hagerstown"),
  ("Hahnville"),
  ("Haiku-Pauwela"),
  ("Hailey"),
  ("Haines City"),
  ("Halawa"),
  ("Haledon borough"),
  ("Hales Corners"),
  ("Halesite"),
  ("Haleyville"),
  ("Half Moon"),
  ("Half Moon Bay"),
  ("Halfway"),
  ("Hallandale"),
  ("Hallsville"),
  ("Haltom City"),
  ("Ham Lake"),
  ("Hamburg"),
  ("Hamburg borough"),
  ("Hamilton"),
  ("Hamlet"),
  ("Hammond"),
  ("Hammonton"),
  ("Hampden"),
  ("Hampshire"),
  ("Hampstead"),
  ("Hampton"),
  ("Hampton Bays"),
  ("Hampton Bays"),
  ("Hampton Manor"),
  ("Hampton Township"),
  ("Hamptons at Boca Raton"),
  ("Hamtramck"),
  ("Hanahan"),
  ("Hanamaulu"),
  ("Hanceville"),
  ("Hancock"),
  ("Hanford"),
  ("Hannahs Mill"),
  ("Hannibal"),
  ("Hanover"),
  ("Hanover borough"),
  ("Hanover Park"),
  ("Hapeville"),
  ("Happy Valley"),
  ("Harahan"),
  ("Harbeck-Fruitdale"),
  ("Harbison Canyon"),
  ("Harbor"),
  ("Harbor Bluffs"),
  ("Harbour Heights"),
  ("Hardin"),
  ("Harker Heights"),
  ("Harlan"),
  ("Harlem"),
  ("Harleysville"),
  ("Harlingen"),
  ("Harmony Township"),
  ("Harper Woods"),
  ("Harpers Ferry"),
  ("Harrah"),
  ("Harriman"),
  ("Harrington"),
  ("Harrington Park borough"),
  ("Harris Hill"),
  ("Harrisburg"),
  ("Harrison"),
  ("Harrison Township"),
  ("Harrisonburg"),
  ("Harrisonville"),
  ("Harrisville"),
  ("Harrodsburg"),
  ("Harrogate-Shawanee"),
  ("Hartford"),
  ("Hartford City"),
  ("Hartland"),
  ("Hartsdale"),
  ("Hartselle"),
  ("Hartsville"),
  ("Hartwell"),
  ("Harvard"),
  ("Harvest"),
  ("Harvey"),
  ("Harveys Lake borough"),
  ("Harwood Heights"),
  ("Hasbrouck Heights"),
  ("Haskell"),
  ("Haslett"),
  ("Hastings"),
  ("Hastings-on-Hudson"),
  ("Hatboro borough"),
  ("Hatfield borough"),
  ("Hattiesburg"),
  ("Haughton"),
  ("Hauppauge"),
  ("Hauula"),
  ("Havana"),
  ("Havelock"),
  ("Haverhill"),
  ("Haverstraw"),
  ("Haviland"),
  ("Havre"),
  ("Havre de Grace"),
  ("Hawaiian Beaches"),
  ("Hawaiian Gardens"),
  ("Hawaiian Paradise Park"),
  ("Hawkinsville"),
  ("Haworth borough"),
  ("Hawthorn Woods"),
  ("Hawthorne"),
  ("Hawthorne borough"),
  ("Hayden"),
  ("Hayesville"),
  ("Haynesville"),
  ("Hays"),
  ("Haysville"),
  ("Hayti"),
  ("Hayward"),
  ("Hazard"),
  ("Hazardville"),
  ("Hazel Crest"),
  ("Hazel Dell North"),
  ("Hazel Dell South"),
  ("Hazel Green"),
  ("Hazel Park"),
  ("Hazelwood"),
  ("Hazlehurst"),
  ("Hazleton"),
  ("Headland"),
  ("Healdsburg"),
  ("Healdton"),
  ("Hearne"),
  ("Heath"),
  ("Heathcote"),
  ("Heathrow"),
  ("Heavener"),
  ("Hebbronville"),
  ("Heber"),
  ("Heber Springs"),
  ("Heber-Overgaard"),
  ("Hebo"),
  ("Hebron"),
  ("Heeia"),
  ("Heflin"),
  ("Helena"),
  ("Helena Valley Southeast"),
  ("Helena Valley West"),
  ("Heller borough"),
  ("Helotes"),
  ("Hemet"),
  ("Hempstead"),
  ("Henderson"),
  ("Hendersonville"),
  ("Hendron"),
  ("Henniker"),
  ("Henrietta"),
  ("Henry"),
  ("Henryetta"),
  ("Hephzibah"),
  ("Herculaneum"),
  ("Hercules"),
  ("Hereford"),
  ("Herington"),
  ("Heritage Hills"),
  ("Heritage Village"),
  ("Herkimer"),
  ("Herman"),
  ("Hermann"),
  ("Hermiston"),
  ("Hermitage"),
  ("Hermosa Beach"),
  ("Hernando"),
  ("Herndon"),
  ("Herricks"),
  ("Herrin"),
  ("Hershey"),
  ("Hesperia"),
  ("Hesperia"),
  ("Hesperus"),
  ("Hesston"),
  ("Hewitt"),
  ("Hewlett"),
  ("Heyburn"),
  ("Hialeah"),
  ("Hialeah Gardens"),
  ("Hiawatha"),
  ("Hibbing"),
  ("Hickam Housing"),
  ("Hickman"),
  ("Hickory"),
  ("Hickory Hills"),
  ("Hickory Withe"),
  ("Hicksville"),
  ("Hidalgo"),
  ("Hidden Meadows"),
  ("Hidden Valley"),
  ("Hidden Valley Lake"),
  ("Higginsville"),
  ("High Bridge borough"),
  ("High Point"),
  ("High Ridge"),
  ("High Springs"),
  ("Highgrove"),
  ("Highland"),
  ("Highland Acres"),
  ("Highland Beach"),
  ("Highland Falls"),
  ("Highland Heights"),
  ("Highland Lake"),
  ("Highland Mills"),
  ("Highland Park"),
  ("Highland Park borough"),
  ("Highland Springs"),
  ("Highland Village"),
  ("Highlands"),
  ("Highlands borough"),
  ("Highlands Ranch"),
  ("Highlands-Baywood Park"),
  ("Highmount"),
  ("Highspire borough"),
  ("Hights borough"),
  ("Highview"),
  ("Highwood"),
  ("Hill City"),
  ("Hillandale"),
  ("Hillcrest"),
  ("Hillcrest Heights"),
  ("Hilliard"),
  ("Hillsboro"),
  ("Hillsborough"),
  ("Hillsdale"),
  ("Hillsdale borough"),
  ("Hillside"),
  ("Hillsmere Shores"),
  ("Hillsville"),
  ("Hillview"),
  ("Hilmar-Irwin"),
  ("Hilo"),
  ("Hilton"),
  ("Hilton Head Island"),
  ("Hinesville"),
  ("Hingham"),
  ("Hinsdale"),
  ("Hinton"),
  ("Hitchcock"),
  ("Hobart"),
  ("Hobbs"),
  ("Hobe Sound"),
  ("Hoboken"),
  ("Hockessin"),
  ("Hockinson"),
  ("Hodgenville"),
  ("Hoffman Estates"),
  ("Hogansville"),
  ("Hohenwald"),
  ("Ho-Ho-Kus borough"),
  ("Hoisington"),
  ("Hokendauqua"),
  ("Hokes Bluff"),
  ("Holbrook"),
  ("Holden"),
  ("Holden Heights"),
  ("Holdenville"),
  ("Holdrege"),
  ("Holiday"),
  ("Holiday City South"),
  ("Holiday City-Berkeley"),
  ("Holladay"),
  ("Holland"),
  ("Hollandale"),
  ("Hollidaysburg borough"),
  ("Hollins"),
  ("Hollister"),
  ("Holly"),
  ("Holly Hill"),
  ("Holly Springs"),
  ("Hollywood"),
  ("Hollywood Park"),
  ("Holmen"),
  ("Holmes Beach"),
  ("Holmes City"),
  ("Holt"),
  ("Holton"),
  ("Holts Summit"),
  ("Holtsville"),
  ("Holtville"),
  ("Holualoa"),
  ("Holyoke"),
  ("Holyoke"),
  ("Home"),
  ("Home Gardens"),
  ("Homeacre-Lyndora"),
  ("Homedale"),
  ("Homeland"),
  ("Homeland Park"),
  ("Homer"),
  ("Homerville"),
  ("Homestead"),
  ("Homestead borough"),
  ("Homestead Meadows"),
  ("Homewood"),
  ("Hominy"),
  ("Homosassa Springs"),
  ("Hondo"),
  ("Honea Path"),
  ("Honeoye Falls"),
  ("Honesdale borough"),
  ("Honolulu"),
  ("Hood River"),
  ("Hooks"),
  ("Hooksett"),
  ("Hooper"),
  ("Hoopeston"),
  ("Hoosick Falls"),
  ("Hoover"),
  ("Hooverson Heights"),
  ("Hopatcong borough"),
  ("Hope"),
  ("Hope Mills"),
  ("Hopedale"),
  ("Hopewell"),
  ("Hopewell Junction"),
  ("Hopkins"),
  ("Hopkinsville"),
  ("Hopkinton"),
  ("Hopland"),
  ("Hoquiam"),
  ("Horicon"),
  ("Horizon City"),
  ("Horn Lake"),
  ("Hornell"),
  ("Horseheads"),
  ("Horseheads North"),
  ("Horseshoe Bay"),
  ("Horseshoe Bend"),
  ("Horsham"),
  ("Hot Springs"),
  ("Hot Springs Village"),
  ("Houghton"),
  ("Houghton Lake"),
  ("Houlton"),
  ("Houma"),
  ("Houston"),
  ("Howard"),
  ("Howards Grove"),
  ("Howell"),
  ("Howland Center"),
  ("Hoxie"),
  ("Hubbard"),
  ("Huber Heights"),
  ("Huber Ridge"),
  ("Hudson"),
  ("Hudson Falls"),
  ("Hudsonville"),
  ("Huey"),
  ("Hughesville"),
  ("Hughson"),
  ("Hugo"),
  ("Hugoton"),
  ("Huguley"),
  ("Hull"),
  ("Humble"),
  ("Humboldt"),
  ("Humboldt Hill"),
  ("Hummels borough"),
  ("Humptulips"),
  ("Hunters Creek"),
  ("Hunters Creek Village"),
  ("Huntersville"),
  ("Huntingburg"),
  ("Huntingdon"),
  ("Huntingdon borough"),
  ("Huntington"),
  ("Huntington Beach"),
  ("Huntington Beach"),
  ("Huntington Park"),
  ("Huntington Station"),
  ("Huntington Woods"),
  ("Huntley"),
  ("Huntsville"),
  ("Hurley"),
  ("Huron"),
  ("Hurricane"),
  ("Hurst"),
  ("Hurstbourne"),
  ("Hutchins"),
  ("Hutchinson"),
  ("Hutchinson Island South"),
  ("Hyattsville"),
  ("Hybla Valley"),
  ("Hyde Park"),
  ("Hyrum"),
  ("Icard"),
  ("Idabel"),
  ("Idaho Falls"),
  ("Idyllwild-Pine Cove"),
  ("Idylwood"),
  ("Ilwaco"),
  ("Imlay City"),
  ("Immokalee"),
  ("Imperial"),
  ("Imperial Beach"),
  ("Imperial-Enlow"),
  ("Incline Village"),
  ("Incline Village-Crystal Bay"),
  ("Independence"),
  ("Indialantic"),
  ("Indian"),
  ("Indian Harbour Beach"),
  ("Indian Head"),
  ("Indian Head Park"),
  ("Indian Heights"),
  ("Indian Hills"),
  ("Indian River Estates"),
  ("Indian River Shores"),
  ("Indian Rocks Beach"),
  ("Indian Trail"),
  ("Indian Wells"),
  ("Indiana borough"),
  ("Indianapolis"),
  ("Indianapolis  (balance)"),
  ("Indianola"),
  ("Indio"),
  ("Ingalls Park"),
  ("Ingleside"),
  ("Inglewood"),
  ("Inglewood-Finn Hill"),
  ("Ingram borough"),
  ("Inkster"),
  ("Inniswold"),
  ("Interlaken"),
  ("International Falls"),
  ("International Falls"),
  ("Inver Grove Heights"),
  ("Inverness"),
  ("Inverness Highlands"),
  ("Inwood"),
  ("Iola"),
  ("Iona"),
  ("Ione"),
  ("Ionia"),
  ("Iowa"),
  ("Iowa City"),
  ("Iowa City"),
  ("Iowa Falls"),
  ("Iowa Park"),
  ("Ipswich"),
  ("Irmo"),
  ("Iron Mountain"),
  ("Irondale"),
  ("Irondequoit"),
  ("Ironton"),
  ("Ironwood"),
  ("Irvine"),
  ("Irving"),
  ("Irvington"),
  ("Irwin borough"),
  ("isbury Mills"),
  ("Iselin"),
  ("Ishpeming"),
  ("Isla Vista"),
  ("Islamorada"),
  ("\"Islamorada, Village of Islands\""),
  ("Island Lake"),
  ("Island Park"),
  ("Island Pond"),
  ("Islandia"),
  ("Isle of Hope"),
  ("Isle of Palms"),
  ("Islip"),
  ("Islip Terrace"),
  ("Issaquah"),
  ("Issaquah"),
  ("Itasca"),
  ("Ithaca"),
  ("Iuka"),
  ("Ivanhoe"),
  ("Ives Estates"),
  ("Ivins"),
  ("Jacinto City"),
  ("Jacksboro"),
  ("Jacksonville"),
  ("Jacksonville Beach"),
  ("Jaffrey"),
  ("James City"),
  ("James West"),
  ("Jamesburg borough"),
  ("Jamestown"),
  ("Jamul"),
  ("Jan Phyl Village"),
  ("Janesville"),
  ("Janesville"),
  ("Jarrettsville"),
  ("Jasmine Estates"),
  ("Jasper"),
  ("Jay Peak"),
  ("Jeanerette"),
  ("Jeannette"),
  ("Jefferson"),
  ("Jefferson City"),
  ("Jefferson City"),
  ("Jefferson Hills borough"),
  ("Jefferson Valley-York"),
  ("Jeffersonville"),
  ("Jena"),
  ("Jenison"),
  ("Jenkin borough"),
  ("Jenks"),
  ("Jennings"),
  ("Jennings Lodge"),
  ("Jensen Beach"),
  ("Jericho"),
  ("Jerome"),
  ("Jersey City"),
  ("Jersey Shore borough"),
  ("Jersey Village"),
  ("Jerseyville"),
  ("Jessup"),
  ("Jessup borough"),
  ("Jesup"),
  ("Jewett City borough"),
  ("Jim Thorpe borough"),
  ("Johns"),
  ("Johnsburg"),
  ("Johnson City"),
  ("Johnson Lane"),
  ("Johnsonburg borough"),
  ("Johnston"),
  ("Johnston City"),
  ("Joliet"),
  ("Jollyville"),
  ("Jones"),
  ("Jonesboro"),
  ("Jonesborough"),
  ("Joplin"),
  ("Joppae"),
  ("Joshua"),
  ("Joshua Tree"),
  ("Jourdanton"),
  ("Junction"),
  ("Junction City"),
  ("June Lake"),
  ("June Park"),
  ("Juneau"),
  ("Juneau  and borough"),
  ("Juno Beach"),
  ("Jupiter"),
  ("Justice"),
  ("Kachina Village"),
  ("Kahaluu"),
  ("Kahului"),
  ("Kailua"),
  ("Kailua-Kona"),
  ("Kalaheo"),
  ("Kalamazoo"),
  ("Kalaoa"),
  ("Kalifornsky"),
  ("Kalispell"),
  ("Kanab"),
  ("Kane borough"),
  ("Kaneohe"),
  ("Kaneohe Station"),
  ("Kankakee"),
  ("Kannapolis"),
  ("Kansas City"),
  ("Kapaa"),
  ("Kaplan"),
  ("Karnes City"),
  ("Kaser"),
  ("Kasson"),
  ("Kathleen"),
  ("Katy"),
  ("Kaufman"),
  ("Kaukauna"),
  ("Kaunakakai"),
  ("Kayenta"),
  ("Kaysville"),
  ("Keansburg borough"),
  ("Kearney"),
  ("Kearns"),
  ("Kearny"),
  ("Kearsarge"),
  ("Keego Harbor"),
  ("Keene"),
  ("Keizer"),
  ("Kekaha"),
  ("Keller"),
  ("Kelseyville"),
  ("Kelso"),
  ("Kemmerer"),
  ("Kemp Mill"),
  ("Ken Caryl"),
  ("Kenai"),
  ("Kendale Lakes"),
  ("Kendall"),
  ("Kendall Green"),
  ("Kendall Park"),
  ("Kendall West"),
  ("Kendallville"),
  ("Kenedy"),
  ("Kenhorst borough"),
  ("Kenilworth"),
  ("Kenilworth borough"),
  ("Kenmore"),
  ("Kennebunk"),
  ("Kennebunkport"),
  ("Kennedale"),
  ("Kennedy"),
  ("Kennedy Township"),
  ("Kenner"),
  ("Kennesaw"),
  ("Kenneth City"),
  ("Kennett"),
  ("Kennett Square borough"),
  ("Kennewick"),
  ("Kenosha"),
  ("Kenova"),
  ("Kensington"),
  ("Kensington Park"),
  ("Kent"),
  ("Kentfield"),
  ("Kenton"),
  ("Kentwood"),
  ("Kenwood"),
  ("Keokuk"),
  ("Kerman"),
  ("Kermit"),
  ("Kernersville"),
  ("Kerrville"),
  ("Ketchikan"),
  ("Ketchum"),
  ("Kettering"),
  ("Kewanee"),
  ("Kewaskum"),
  ("Kewaunee"),
  ("Key Biscayne"),
  ("Key Largo"),
  ("Key West"),
  ("Keyes"),
  ("Keyport borough"),
  ("Keyser"),
  ("Keystone"),
  ("Kiamesha Lake"),
  ("Kiel"),
  ("Kihei"),
  ("Kildeer"),
  ("Kilgore"),
  ("Kill Devil Hills"),
  ("Killeen"),
  ("Killington"),
  ("Kimball"),
  ("Kimberly"),
  ("King"),
  ("King City"),
  ("King of Prussia"),
  ("Kingfield"),
  ("Kingfisher"),
  ("Kingman"),
  ("Kings Bay Base"),
  ("Kings Beach"),
  ("Kings Grant"),
  ("Kings Mountain"),
  ("Kings Park"),
  ("Kings Point"),
  ("Kingsburg"),
  ("Kingsbury"),
  ("Kingsford"),
  ("Kingsgate"),
  ("Kingsland"),
  ("Kingsport"),
  ("Kingston"),
  ("Kingston borough"),
  ("Kingston Springs"),
  ("Kingstree"),
  ("Kingsville"),
  ("Kingwood"),
  ("Kinnelon borough"),
  ("Kinston"),
  ("Kirby"),
  ("Kirkland"),
  ("Kirksville"),
  ("Kirkwood"),
  ("Kirtland"),
  ("Kiryas Joel"),
  ("Kissimmee"),
  ("Kit Carson"),
  ("Kittanning borough"),
  ("Kittery"),
  ("Kitty Hawk"),
  ("Klamath"),
  ("Klamath Falls"),
  ("Knightdale"),
  ("Knik-Fairview"),
  ("Knox"),
  ("Knoxville"),
  ("Kodiak"),
  ("Kokomo"),
  ("Kokomo"),
  ("Kosciusko"),
  ("Kotzebue"),
  ("Kulpmont borough"),
  ("Kulpsville"),
  ("Kuna"),
  ("Kutz borough"),
  ("Kyle"),
  ("La Canada Flintridge"),
  ("La Cienega"),
  ("La Crescent"),
  ("La Crescenta-Montrose"),
  ("La Crosse"),
  ("La Fayette"),
  ("La Feria"),
  ("La Follette"),
  ("La Grande"),
  ("La Grange"),
  ("La Grange Park"),
  ("La Habra"),
  ("La Habra Heights"),
  ("La Homa"),
  ("La Joya"),
  ("La Junta"),
  ("La Marque"),
  ("La Mesa"),
  ("La Mirada"),
  ("La Palma"),
  ("La Pine"),
  ("La Plata"),
  ("La Porte"),
  ("La Presa"),
  ("La Puente"),
  ("La Quinta"),
  ("La Riviera"),
  ("La Salle"),
  ("La Salle/Peru"),
  ("La Vale"),
  ("La Vergne"),
  ("La Verkin"),
  ("La Verne"),
  ("La Vista"),
  ("Labelle"),
  ("Lacey"),
  ("Lackawanna"),
  ("Lackland AFB"),
  ("Lacombe"),
  ("Laconia"),
  ("Lacy-Lakeview"),
  ("Ladera Heights"),
  ("Ladonia"),
  ("Ladson"),
  ("Ladue"),
  ("Lady Lake"),
  ("Ladysmith"),
  ("Lafayette"),
  ("Lafayette"),
  ("Lago Vista"),
  ("LaGrange"),
  ("Lagrange"),
  ("Laguna"),
  ("Laguna Beach"),
  ("Laguna Hills"),
  ("Laguna Niguel"),
  ("Laguna West-Lakeside"),
  ("Laguna Woods"),
  ("Lahaina"),
  ("Lahaina"),
  ("Laie"),
  ("Lake Alfred"),
  ("Lake Arbor"),
  ("Lake Arrowhead"),
  ("Lake Arthur"),
  ("Lake Barcroft"),
  ("Lake Barrington"),
  ("Lake Bluff"),
  ("Lake Butter"),
  ("Lake Carmel"),
  ("Lake Charles"),
  ("Lake Charles"),
  ("Lake City"),
  ("Lake City borough"),
  ("Lake Clarke Shores"),
  ("Lake Como"),
  ("Lake Dallas"),
  ("Lake Darby"),
  ("Lake Elmo"),
  ("Lake Elsinore"),
  ("Lake Erie Beach"),
  ("Lake Fenton"),
  ("Lake Forest"),
  ("Lake Forest Park"),
  ("Lake Geneva"),
  ("Lake George"),
  ("Lake Goodwin"),
  ("Lake Grove"),
  ("Lake Havasu City"),
  ("Lake Helen"),
  ("Lake in the Hills"),
  ("Lake Isabella"),
  ("Lake Jackson"),
  ("Lake Junaluska"),
  ("Lake Lorraine"),
  ("Lake Los Angeles"),
  ("Lake Lucerne"),
  ("Lake Magdalene"),
  ("Lake Mary"),
  ("Lake Mills"),
  ("Lake Mohawk"),
  ("Lake Mohegan"),
  ("Lake Montezuma"),
  ("Lake Monticello"),
  ("Lake Morton-Berrydale"),
  ("Lake Murray of Richland"),
  ("Lake Norman of Catawba"),
  ("Lake of the Pines"),
  ("Lake of the Woods"),
  ("Lake Orion"),
  ("Lake Oswego"),
  ("Lake Panasoffkee"),
  ("Lake Park"),
  ("Lake Placid"),
  ("Lake Pocotopaug"),
  ("Lake Providence"),
  ("Lake Purdy"),
  ("Lake Ridge"),
  ("Lake Ronkonkoma"),
  ("Lake San Marcos"),
  ("Lake Sarasota"),
  ("Lake Shore"),
  ("Lake St"),
  ("Lake Station"),
  ("Lake Stevens"),
  ("Lake Success"),
  ("Lake Tahoe"),
  ("Lake Tansi"),
  ("Lake Toxaway"),
  ("Lake Villa"),
  ("Lake Village"),
  ("Lake Wales"),
  ("Lake Wazeecha"),
  ("Lake Wildwood"),
  ("Lake Wisconsin"),
  ("Lake Worth"),
  ("Lake Worth Corridor"),
  ("Lake Wylie"),
  ("Lake Zurich"),
  ("Lakehills"),
  ("Lakehurst borough"),
  ("Lakeland"),
  ("Lakeland Highlands"),
  ("Lakeland North"),
  ("Lakeland South"),
  ("Lakeland Village"),
  ("Lakemoor"),
  ("Lakemore"),
  ("Lakeport"),
  ("Lakes"),
  ("Lakes by the Bay"),
  ("Lakes of the Four"),
  ("Lakeshore"),
  ("LakesideLakeside Green"),
  ("Lakeside Park"),
  ("Lakeview"),
  ("Lakeview Estates"),
  ("Lakeville"),
  ("Lakeway"),
  ("Lakewood"),
  ("Lakewood Park"),
  ("Lamar"),
  ("Lambertville"),
  ("Lamesa"),
  ("Lamont"),
  ("Lampasas"),
  ("Lanai City"),
  ("Lancaster"),
  ("Land O'  Lakes"),
  ("Landen"),
  ("Lander"),
  ("Landis"),
  ("Lanett"),
  ("Langley Park"),
  ("Lanham-Seabrook"),
  ("Lansdale borough"),
  ("Lansdowne borough"),
  ("Lansdowne-Baltimore"),
  ("Lansford borough"),
  ("Lansing"),
  ("Lantana"),
  ("Lapeer"),
  ("Laplace"),
  ("Laporte"),
  ("Laramie"),
  ("Larchmont"),
  ("Laredo"),
  ("Laredo"),
  ("Largo"),
  ("Larkfield-Wikiup"),
  ("Larkspur"),
  ("Larksville borough"),
  ("Larned"),
  ("Larose"),
  ("Las Animas"),
  ("Las Cruces"),
  ("Las Flores"),
  ("Las Lomas"),
  ("Las Vegas"),
  ("Lathrop"),
  ("Lathrup Village"),
  ("Latimer"),
  ("Latrobe"),
  ("Lauderdale Lakes"),
  ("Lauderdale-by-the-Sea"),
  ("Lauderhill"),
  ("Laughlin"),
  ("Laurel"),
  ("Laurel Bay"),
  ("Laurel Lake"),
  ("Laureldale borough"),
  ("Laureles"),
  ("Laurence Harbor"),
  ("Laurens"),
  ("Laurinburg"),
  ("Lavallette borough"),
  ("Lawndale"),
  ("Lawnside borough"),
  ("Lawnton"),
  ("Lawrence"),
  ("Lawrence Park"),
  ("Lawrenceburg"),
  ("Lawrenceville"),
  ("Lawton"),
  ("Le Claire"),
  ("Le Mars"),
  ("Le Roy"),
  ("Le Sueur"),
  ("Lea Hill"),
  ("Leacock-Leola-Bareville"),
  ("Lead"),
  ("Leadville"),
  ("League City"),
  ("Leander"),
  ("Leavenworth"),
  ("Leawood"),
  ("Lebanon"),
  ("Lecanto"),
  ("Lee's Summit"),
  ("Leeds"),
  ("Leesburg"),
  ("Leesville"),
  ("Lehi"),
  ("Lehigh Acres"),
  ("Lehighton borough"),
  ("Leisure City"),
  ("Leisure Village"),
  ("Leisure Village East"),
  ("Leisure Village West-Pine"),
  ("Leisuree"),
  ("Leitchfield"),
  ("Leith-Hatfield"),
  ("Leland"),
  ("Lely"),
  ("Lemay"),
  ("Lemmon Valley-Golden"),
  ("Lemon Grove"),
  ("Lemont"),
  ("Lemoore"),
  ("Lemoore Station"),
  ("Lemoyne borough"),
  ("Lena"),
  ("Lenexa"),
  ("Lennox"),
  ("Lenoir"),
  ("Lenoir City"),
  ("Lenwood"),
  ("Leo-Cedarville"),
  ("Leominster"),
  ("Leon Valley"),
  ("Leonardo"),
  ("Leonia borough"),
  ("Level Park-Oak Park"),
  ("Levelland"),
  ("Levit"),
  ("Lewes"),
  ("Lewis"),
  ("Lewis borough"),
  ("Lewisburg"),
  ("Lewisburg borough"),
  ("Lewiston"),
  ("Lewisville"),
  ("Lexington"),
  ("Lexington Park"),
  ("Lexington-Fayette"),
  ("Libby"),
  ("Liberal"),
  ("Liberty"),
  ("Liberty borough"),
  ("Liberty Lake"),
  ("Libertyville"),
  ("Lido Beach"),
  ("Lighthouse Point"),
  ("Ligonier"),
  ("Lihue"),
  ("Lilburn"),
  ("Lillington"),
  ("Lima"),
  ("Lima"),
  ("Lincoln"),
  ("Lincoln City"),
  ("Lincoln Heights"),
  ("Lincoln Park"),
  ("Lincoln Park borough"),
  ("Lincoln Village"),
  ("Lincolnia"),
  ("Lincolnshire"),
  ("Lincolnton"),
  ("Lincolnwood"),
  ("Lincroft"),
  ("Linda"),
  ("Lindale"),
  ("Linden"),
  ("Lindenhurst"),
  ("Lindenwold borough"),
  ("Lindon"),
  ("Lindsay"),
  ("Lindsborg"),
  ("Lindstrom"),
  ("Linganore-Bartonsville"),
  ("Lingles"),
  ("Lino Lakes"),
  ("Linthicum"),
  ("Linton"),
  ("Linton Hall"),
  ("Linwood"),
  ("Lionville-Marchwood"),
  ("Lisbon"),
  ("Lisbon Falls"),
  ("Lisle"),
  ("Litchfield"),
  ("Litchfield Park"),
  ("Lititz borough"),
  ("Little Canada"),
  ("Little Chute"),
  ("Little Cottonwood Creek"),
  ("Little Elm"),
  ("Little Falls"),
  ("Little Ferry borough"),
  ("Little Flock"),
  ("Little River"),
  ("Little Rock"),
  ("Little Silver borough"),
  ("Littlefield"),
  ("Littles borough"),
  ("Littleton"),
  ("Littleton Common"),
  ("Live Oak"),
  ("Livermore"),
  ("Liverpool"),
  ("Livingston"),
  ("Livonia"),
  ("Llano"),
  ("Llano Grande"),
  ("Lloyd Harbor"),
  ("Loch Lomond"),
  ("Lochearn"),
  ("Lochmoor Waterway"),
  ("Lock Haven"),
  ("Lockeford"),
  ("Lockhart"),
  ("Lockland"),
  ("Lockport"),
  ("Lockwood"),
  ("Locust Valley"),
  ("Lodi"),
  ("Lodi borough"),
  ("Logansport"),
  ("Loganville"),
  ("Lolo"),
  ("Loma Linda"),
  ("Lombard"),
  ("Lomita"),
  ("Lompoc"),
  ("London"),
  ("Londonderry"),
  ("Londone"),
  ("Lone Grove"),
  ("Lone Tree"),
  ("Long Beach"),
  ("Long Branch"),
  ("Long Grove"),
  ("Long Hill"),
  ("Long Lake"),
  ("Long Prairie"),
  ("Long View"),
  ("Longboat Key"),
  ("Longmeadow"),
  ("Longmont"),
  ("Longview"),
  ("Longview Heights"),
  ("Longwood"),
  ("Lonoke"),
  ("Loogootee"),
  ("Loomis"),
  ("Lopezville"),
  ("Lorain"),
  ("Lorane"),
  ("Lords"),
  ("Lordsburg"),
  ("Lorton"),
  ("Los Alamitos"),
  ("Los Alamos"),
  ("Los Altos"),
  ("Los Altos Hills"),
  ("Los Angeles"),
  ("Los Banos"),
  ("Los Chaves"),
  ("Los Fresnos"),
  ("Los Gatos"),
  ("Los Lunas"),
  ("Los Ranchos de"),
  ("Lost Creek"),
  ("Loudon"),
  ("Loudonville"),
  ("Louisburg"),
  ("Louisiana"),
  ("Louisville"),
  ("Louviers"),
  ("Loveland"),
  ("Loves Park"),
  ("Lovington"),
  ("Lowell"),
  ("Lower Allen"),
  ("Lower Burrell"),
  ("Lower Grand Lagoon"),
  ("Lowville"),
  ("Loyola"),
  ("Loysburg"),
  ("Lubbock"),
  ("Lucas"),
  ("Lucas Valley-Marinwood"),
  ("Lucerne"),
  ("Ludington"),
  ("Ludlow"),
  ("Lufkin"),
  ("Lugoff"),
  ("Luling"),
  ("Lumberton"),
  ("Luray"),
  ("Lutcher"),
  ("Lutherville-Timonium"),
  ("Lutsen"),
  ("Lutz"),
  ("Luverne"),
  ("Luzerne borough"),
  ("Lyman"),
  ("Lyme"),
  ("Lyme Center"),
  ("Lynbrook"),
  ("Lynchburg"),
  ("Lyncourt"),
  ("Lynden"),
  ("Lyndhurst"),
  ("Lyndon"),
  ("Lynn"),
  ("Lynn Haven"),
  ("Lynnfield"),
  ("Lynnwood"),
  ("Lynwood"),
  ("Lyons"),
  ("Mableton"),
  ("Macclenny"),
  ("Macedonia"),
  ("Machesney Park"),
  ("Mack North"),
  ("Mack South"),
  ("Macomb"),
  ("Macon"),
  ("Macungie borough"),
  ("Madawaska"),
  ("Madeira"),
  ("Madeira Beach"),
  ("Madera"),
  ("Madera Acres"),
  ("Madill"),
  ("Madison"),
  ("Madison borough"),
  ("Madison Heights"),
  ("Madison Park"),
  ("Madisonville"),
  ("Madras"),
  ("Maeser"),
  ("Magalia"),
  ("Magee"),
  ("Maggie Valley"),
  ("Magna"),
  ("Magnolia"),
  ("Magnolia borough"),
  ("Mahanoy City borough"),
  ("Mahomet"),
  ("Mahopac"),
  ("Mahtomedi"),
  ("Maiden"),
  ("Maili"),
  ("Maitland"),
  ("Makaha"),
  ("Makakilo City"),
  ("Makawao"),
  ("Malabar"),
  ("Malden"),
  ("Malibu"),
  ("Malmstrom AFB"),
  ("Malone"),
  ("Maltby"),
  ("Malvern"),
  ("Malvern borough"),
  ("Malverne"),
  ("Mamaroneck"),
  ("Mammoth Lakes"),
  ("Mamou"),
  ("Manasquan borough"),
  ("Manassas"),
  ("Manassas Park"),
  ("Manchester"),
  ("Manchester Center"),
  ("Mandan"),
  ("Mandeville"),
  ("Mango"),
  ("Mangum"),
  ("Manhasset"),
  ("Manhasset Hills"),
  ("Manhattan"),
  ("Manhattan Beach"),
  ("Manheim borough"),
  ("Manila"),
  ("Manistee"),
  ("Manistique"),
  ("Manitou Springs"),
  ("Manitowoc"),
  ("Mankato"),
  ("Manlius"),
  ("Manning"),
  ("Manor borough"),
  ("Manorhaven"),
  ("Manorville"),
  ("Mansfield"),
  ("Mansfield borough"),
  ("Mansfield Center"),
  ("Manteca"),
  ("Manteno"),
  ("Manti"),
  ("Mantua"),
  ("Manvel"),
  ("Manville borough"),
  ("Many"),
  ("Maple Glen"),
  ("Maple Grove"),
  ("Maple Heights"),
  ("Maple Heights-Lake"),
  ("Maple Valley"),
  ("Mapleton"),
  ("Maplewood"),
  ("Maquoketa"),
  ("Marana"),
  ("Marathon"),
  ("Marble Falls"),
  ("Marblehead"),
  ("Marceline"),
  ("Marco Island"),
  ("Marengo"),
  ("Margate"),
  ("Margate City"),
  ("Marianna"),
  ("Mariemont"),
  ("Marietta"),
  ("Marietta borough"),
  ("Marietta-Alderwood"),
  ("Marina"),
  ("Marina del Rey"),
  ("Marine City"),
  ("Marinette"),
  ("Marion"),
  ("Marked Tree"),
  ("Markham"),
  ("Marksville"),
  ("Marlborough"),
  ("Marlin"),
  ("Marlow"),
  ("Marlow Heights"),
  ("Marlton"),
  ("Mar-Mac"),
  ("Marquette"),
  ("Marquette Heights"),
  ("Marrero"),
  ("Mars Hill"),
  ("Marseilles"),
  ("Marshall"),
  ("Marshfield"),
  ("Martha Lake"),
  ("Martin"),
  ("Martinez"),
  ("Martins Ferry"),
  ("Martinsburg"),
  ("Martinsville"),
  ("Martubsburg"),
  ("Mary Esther"),
  ("Maryland City"),
  ("Maryland Heights"),
  ("Marysville"),
  ("Marysville Beale AFB"),
  ("Maryville"),
  ("Mascotte"),
  ("Mascoutah"),
  ("Mason"),
  ("Mason borough"),
  ("Mason City"),
  ("Masonboro"),
  ("Massac"),
  ("Massapequa"),
  ("Massapequa Park"),
  ("Massena"),
  ("Massena"),
  ("Massillon"),
  ("Mastic"),
  ("Mastic Beach"),
  ("Masury"),
  ("Matawan borough"),
  ("Mathis"),
  ("Mattapoisett Center"),
  ("Mattawa"),
  ("Mattawan"),
  ("Matteson"),
  ("Matthews"),
  ("Mattituck"),
  ("Mattoon"),
  ("Mattydale"),
  ("Mauldin"),
  ("Maumee"),
  ("Maumelle"),
  ("Maunawili"),
  ("Mauriceville"),
  ("Mauston"),
  ("Maxton"),
  ("May"),
  ("Maybrook"),
  ("Mayfield"),
  ("Mayfield Heights"),
  ("Mayflower Village"),
  ("Maynard"),
  ("Mayo"),
  ("Mays Chapel"),
  ("Maysville"),
  ("Mayville"),
  ("Maywood"),
  ("Maywood borough"),
  ("Mcalester"),
  ("McAlester"),
  ("McAllen"),
  ("McCandless Township"),
  ("McChesney-"),
  ("McChord AFB"),
  ("Mccomb"),
  ("McCook"),
  ("McDonald"),
  ("McDonough"),
  ("McFarland"),
  ("McGaheysville"),
  ("McGehee"),
  ("McGovern"),
  ("McGregor"),
  ("McGuire AFB"),
  ("McHenry"),
  ("McKees Rocks borough"),
  ("McKeesport"),
  ("McKenzie"),
  ("McKinleyville"),
  ("McKinney"),
  ("McLean"),
  ("McLeansboro"),
  ("McLoud"),
  ("McMinnville"),
  ("McMurray"),
  ("McPherson"),
  ("McQueeney"),
  ("McRae"),
  ("McSherrys borough"),
  ("Meadow Lake"),
  ("Meadow Lakes"),
  ("Meadow Vista"),
  ("Meadow Woods"),
  ("Meadowbrook"),
  ("Meadowood"),
  ("Meadows Place"),
  ("Meadville"),
  ("Mebane"),
  ("Mecca"),
  ("Mechanics"),
  ("Mechanicsburg borough"),
  ("Mechanicsville"),
  ("Mechanicville"),
  ("Medfield"),
  ("Medford"),
  ("Medford Lakes borough"),
  ("Media borough"),
  ("Medical Lake"),
  ("Medina"),
  ("Medulla"),
  ("Mehlville"),
  ("Meiners Oaks"),
  ("Melbourne"),
  ("Melbourne Beach"),
  ("Melcroft"),
  ("Melody Hill"),
  ("Melrose"),
  ("Melrose Park"),
  ("Melville"),
  ("Melvindale"),
  ("Memphis"),
  ("Mena"),
  ("Menands"),
  ("Menasha"),
  ("Mendenhall"),
  ("Mendham borough"),
  ("Mendocino"),
  ("Mendota"),
  ("Mendota Heights"),
  ("Menlo Park"),
  ("Menominee"),
  ("Menomonee Falls"),
  ("Menomonie"),
  ("Mentone"),
  ("Mentor"),
  ("Mentor-on-the-Lake"),
  ("Mequon"),
  ("Meraux"),
  ("Merced"),
  ("Mercedes"),
  ("Mercer Island"),
  ("Mercer Island"),
  ("Mercersburg"),
  ("Mercerville-Hamilton"),
  ("Merchantville borough"),
  ("Meriden"),
  ("Meridian"),
  ("Meridianville"),
  ("Merkel"),
  ("Merriam"),
  ("Merrick"),
  ("Merrifield"),
  ("Merrill"),
  ("Merrillville"),
  ("Merrimac"),
  ("Merritt Island"),
  ("Merrydale"),
  ("Mesa"),
  ("Mesquite"),
  ("Metairie"),
  ("Metamora"),
  ("Methuen"),
  ("Metropolis"),
  ("Metter"),
  ("Metuchen borough"),
  ("Metzger"),
  ("Mexia"),
  ("Mexico"),
  ("Miami"),
  ("Miami Beach"),
  ("Miami Gardens"),
  ("Miami Lakes"),
  ("Miami Shores"),
  ("Miami Springs"),
  ("Miamisburg"),
  ("Micco"),
  ("Michigan Center"),
  ("Michigan City"),
  ("Middle"),
  ("Middle borough"),
  ("Middle Island"),
  ("Middle River"),
  ("Middle Valley"),
  ("Middleborough Center"),
  ("Middleburg"),
  ("Middleburg Heights"),
  ("Middlebury"),
  ("Middlebury College Snow Bowl"),
  ("Middlefield"),
  ("Middleport"),
  ("Middlesborough"),
  ("Middlesex borough"),
  ("Middleton"),
  ("Middletown"),
  ("Middleville"),
  ("Midfield"),
  ("Midland"),
  ("Midland borough"),
  ("Midland Park borough"),
  ("Midlothian"),
  ("Midvale"),
  ("Midway North"),
  ("Midway-Hardwick"),
  ("Midwest City"),
  ("Mifflinburg borough"),
  ("Mila Doce"),
  ("Milaca"),
  ("Milan"),
  ("Milbank"),
  ("Miles City"),
  ("Milford"),
  ("Milford Mill"),
  ("Mililani Town"),
  ("Mill borough"),
  ("Mill Creek"),
  ("Mill Plain"),
  ("Mill Valley"),
  ("Millbrae"),
  ("Millbrook"),
  ("Millburn"),
  ("Millcreek"),
  ("Milledgeville"),
  ("Millen"),
  ("Miller Place"),
  ("Millersburg"),
  ("Millersburg borough"),
  ("Millersville"),
  ("Millersville borough"),
  ("Milliken"),
  ("Millington"),
  ("Millinocket"),
  ("Millis-Clicquot"),
  ("Mills"),
  ("Millstadt"),
  ("Millvale borough"),
  ("Millville"),
  ("Milpitas"),
  ("Milton"),
  ("Milton borough"),
  ("Milton-Freewater"),
  ("Milwaukee"),
  ("Milwaukie"),
  ("Mims"),
  ("Minden"),
  ("Mineola"),
  ("Mineral Point"),
  ("Mineral Ridge"),
  ("Mineral Wells"),
  ("Minersville borough"),
  ("Minerva"),
  ("Mingo Junction"),
  ("Minisink Hills"),
  ("Minneapolis"),
  ("Minneapolis"),
  ("Minnehaha"),
  ("Minneola"),
  ("Minnetonka"),
  ("Minnetrista"),
  ("Minoa"),
  ("Minooka"),
  ("Minot"),
  ("Minot AFB"),
  ("Minster"),
  ("Mint Hill"),
  ("Mio"),
  ("Mira Loma"),
  ("Mira Monte"),
  ("Miramar"),
  ("Mirrormont"),
  ("Mishawaka"),
  ("Mission"),
  ("Mission Bay"),
  ("Mission Bend"),
  ("Mission Canyon"),
  ("Mission Hills"),
  ("Mission Viejo"),
  ("Missoula"),
  ("Missouri City"),
  ("Missouri Valley"),
  ("Mitchell"),
  ("Mitchellville"),
  ("Moab"),
  ("Moapa Valley"),
  ("Moberly"),
  ("Mobile"),
  ("Mobridge"),
  ("Mocksville"),
  ("Modesto"),
  ("Mogadore"),
  ("Mohave Valley"),
  ("Mohawk"),
  ("Mohnton borough"),
  ("Mojave"),
  ("Mokena"),
  ("Molalla"),
  ("Moline"),
  ("Moline Acres"),
  ("Momence"),
  ("Monaca borough"),
  ("Monahans"),
  ("Moncks Corner"),
  ("Mondovi"),
  ("Monee"),
  ("Monessen"),
  ("Monett"),
  ("Monfort Heights East"),
  ("Monfort Heights South"),
  ("Monmouth"),
  ("Monmouth Beach"),
  ("Monmouth Junction"),
  ("Mono Vista"),
  ("Monona"),
  ("Monongahela"),
  ("Monroe"),
  ("Monroe City"),
  ("Monroeville"),
  ("Monrovia"),
  ("Monsey"),
  ("MONTANA"),
  ("Montara"),
  ("Montauk"),
  ("Montclair"),
  ("Monte Sereno"),
  ("Monte Vista"),
  ("Montebello"),
  ("Montecito"),
  ("Monterey"),
  ("Monterey Park"),
  ("Montesano"),
  ("Montevallo"),
  ("Montevideo"),
  ("Monteview"),
  ("Montezuma"),
  ("Montgomery"),
  ("Montgomery Village"),
  ("Montgomeryville"),
  ("Monticello"),
  ("Montoursville borough"),
  ("Montpelier"),
  ("Montrose"),
  ("Montrose-Ghent"),
  ("Montvale borough"),
  ("Moody"),
  ("Moonachie borough"),
  ("Moore"),
  ("Moores Mill"),
  ("Moores-Lenola"),
  ("Mooresville"),
  ("Moorhead"),
  ("Moorpark"),
  ("Moosic"),
  ("Moosic borough"),
  ("Moosup"),
  ("Mora"),
  ("Morada"),
  ("Moraine"),
  ("Morehead"),
  ("Morehead City"),
  ("Moreland Hills"),
  ("Moreno Valley"),
  ("Morgan"),
  ("Morgan City"),
  ("Morgan Hill"),
  ("Morgan's Point Resort"),
  ("Morganfield"),
  ("Morganton"),
  ("Morgantown"),
  ("Morganville"),
  ("Morrilton"),
  ("Morris"),
  ("Morris Plains borough"),
  ("Morrison"),
  ("Morrisville"),
  ("Morrisville borough"),
  ("Morro Bay"),
  ("Morrow"),
  ("Morton"),
  ("Morton borough"),
  ("Morton Grove"),
  ("Moscow"),
  ("Moses Lake"),
  ("Moses Lake North"),
  ("Mosinee"),
  ("Moss Bluff"),
  ("Moss Point"),
  ("Moulton"),
  ("Moultrie"),
  ("Mound"),
  ("Mounds View"),
  ("Moundsville"),
  ("Mount Airy"),
  ("Mount Angel"),
  ("Mount Arlington borough"),
  ("Mount Baldy"),
  ("Mount Bethel"),
  ("Mount Carmel"),
  ("Mount Carmel borough"),
  ("Mount Clemens"),
  ("Mount Dora"),
  ("Mount Ephraim borough"),
  ("Mount Gay-Shamrock"),
  ("Mount Gilead"),
  ("Mount Healthy"),
  ("Mount Healthy Heights"),
  ("Mount Holly"),
  ("Mount Hood Parkdale"),
  ("Mount Hood Village"),
  ("Mount Horeb"),
  ("Mount Ivy"),
  ("Mount Joy borough"),
  ("Mount Juliet"),
  ("Mount Kisco"),
  ("Mount Lebanon"),
  ("Mount Morris"),
  ("Mount Olive"),
  ("Mount Oliver borough"),
  ("Mount Olympus"),
  ("Mount Penn borough"),
  ("Mount Pleasant"),
  ("Mount Pleasant borough"),
  ("Mount Plymouth"),
  ("Mount Pocono borough"),
  ("Mount Prospect"),
  ("Mount Rainier"),
  ("Mount Repose"),
  ("Mount Shasta"),
  ("Mount Sinai"),
  ("Mount Sterling"),
  ("Mount Union borough"),
  ("Mount Vernon"),
  ("Mount Vista"),
  ("Mount Washington"),
  ("Mount Zion"),
  ("Mountain Brook"),
  ("Mountain Grove"),
  ("Mountain Home"),
  ("Mountain Home AFB"),
  ("Mountain Iron"),
  ("Mountain Lakes borough"),
  ("Mountain Park"),
  ("Mountain Top"),
  ("Mountain View"),
  ("Mountain View Acres"),
  ("Mountainside borough"),
  ("Mountlake Terrace"),
  ("Mukilteo"),
  ("Mukwonago"),
  ("Mulberry"),
  ("Muldrow"),
  ("Muleshoe"),
  ("Mullan"),
  ("Mullins"),
  ("Mulvane"),
  ("Muncie"),
  ("Muncy borough"),
  ("Mundelein"),
  ("Munford"),
  ("Munhall borough"),
  ("Municipality of Monroeville"),
  ("Municipality of Murrysville"),
  ("Munising"),
  ("Munroe Falls"),
  ("Munsey Park"),
  ("Munster"),
  ("Murfreesboro"),
  ("Murphy"),
  ("Murphysboro"),
  ("Murray"),
  ("Murraysville"),
  ("Murrells Inlet"),
  ("Murrieta"),
  ("Murrieta Hot Springs"),
  ("Muscatine"),
  ("Muscle Shoals"),
  ("Muscoy"),
  ("Muskego"),
  ("Muskegon"),
  ("Muskegon Heights"),
  ("Muskogee"),
  ("Mustang"),
  ("Mutton"),
  ("Myers borough"),
  ("Myers Corner"),
  ("Myrtle"),
  ("Myrtle Beach"),
  ("Myrtle Creek"),
  ("Myrtle Grove"),
  ("Mystic"),
  ("Mystic Island"),
  ("Nacogdoches"),
  ("Nags Head"),
  ("Nahant"),
  ("Nampa"),
  ("Nanakuli"),
  ("Nanticoke"),
  ("Nantucket"),
  ("Nanty-Glo borough"),
  ("Nanuet"),
  ("Napa"),
  ("Naperville"),
  ("Napili-Honokowai"),
  ("Naples"),
  ("Naples Manor"),
  ("Naples Park"),
  ("Napoleon"),
  ("Nappanee"),
  ("Naranja"),
  ("Narberth borough"),
  ("Narragansett Pier"),
  ("Nashua"),
  ("Nashville"),
  ("Nashville-Davidson"),
  ("Nassau Bay"),
  ("Nassau Village-Ratliff"),
  ("Natchez"),
  ("Natchitoches"),
  ("National City"),
  ("National Park borough"),
  ("Naugatuck borough"),
  ("Naval Academy"),
  ("Navasota"),
  ("Navy Yard City"),
  ("Nazareth borough"),
  ("Nebraska City"),
  ("Nederland"),
  ("Needham"),
  ("Needles"),
  ("Needville"),
  ("Neenah"),
  ("Negaunee"),
  ("Neihart"),
  ("Neillsville"),
  ("Nekoosa"),
  ("Nellis AFB"),
  ("Nellysford"),
  ("Nelsonville"),
  ("Neodesha"),
  ("Neosho"),
  ("Nephi"),
  ("Neptune Beach"),
  ("Neptune City borough"),
  ("Nesconset"),
  ("Nesquehoning borough"),
  ("Netcong borough"),
  ("Nether Providence"),
  ("Nevada"),
  ("Nevada City"),
  ("New Albany"),
  ("New Baden"),
  ("New Baltimore"),
  ("New Bedford"),
  ("New Berlin"),
  ("New Bern"),
  ("New Boston"),
  ("New Braunfels"),
  ("New Bremen"),
  ("New Brighton"),
  ("New Brighton borough"),
  ("New Britain"),
  ("New Britain borough"),
  ("New Brunswick"),
  ("New Carlisle"),
  ("New Carrollton"),
  ("New Cassel"),
  ("New Castle"),
  ("New City"),
  ("New Concord"),
  ("New Cordell"),
  ("New Cumberland"),
  ("New Egypt"),
  ("New Freedom borough"),
  ("New Grant"),
  ("New Hampton"),
  ("New Haven"),
  ("New Hempstead"),
  ("New Holland borough"),
  ("New Holstein"),
  ("New Hope"),
  ("New Hyde Park"),
  ("New Iberia"),
  ("New Kensington"),
  ("New Kingman-Butler"),
  ("New Lebanon"),
  ("New Lenox"),
  ("New Lexington"),
  ("New London"),
  ("New Madrid"),
  ("New Martinsville"),
  ("New Meadows"),
  ("New Milford"),
  ("New Milford borough"),
  ("New Orleans"),
  ("New Orleans"),
  ("New Paltz"),
  ("New Philadelphia"),
  ("New Port Richey"),
  ("New Port Richey East"),
  ("New Prague"),
  ("New Providence borough"),
  ("New Richmond"),
  ("New River"),
  ("New Roads"),
  ("New Rochelle"),
  ("New Smyrna Beach"),
  ("New Square"),
  ("New Tazewell"),
  ("New Territory"),
  ("New Ulm"),
  ("New Whiteland"),
  ("New Windsor"),
  ("New York"),
  ("New York Mills"),
  ("Newark"),
  ("Newberg"),
  ("Newbern"),
  ("Newberry"),
  ("Newburg"),
  ("Newburgh"),
  ("Newbury"),
  ("Newburyport"),
  ("Newcastle"),
  ("Newcomers"),
  ("Newfane"),
  ("Newfoundland"),
  ("Newington"),
  ("Newman"),
  ("Newmarket"),
  ("Newnan"),
  ("Newport"),
  ("Newport Beach"),
  ("Newport Coast"),
  ("Newport East"),
  ("Newport News"),
  ("Newton"),
  ("Newton Falls"),
  ("Niagara Falls"),
  ("Niantic"),
  ("Nice"),
  ("Niceville"),
  ("Nicholasville"),
  ("Nichols Hills"),
  ("Nikiski"),
  ("Niles"),
  ("Nipomo"),
  ("Niskayuna"),
  ("Nitro"),
  ("Niwot"),
  ("Nixa"),
  ("Noble"),
  ("Noblesville"),
  ("Nocona"),
  ("Nogales"),
  ("Nokomis"),
  ("Nolensville"),
  ("Nome"),
  ("Norco"),
  ("Norcross"),
  ("Norden"),
  ("Norfolk"),
  ("Norland"),
  ("Normal"),
  ("Norman"),
  ("Normandy"),
  ("Normandy Park"),
  ("Norridge"),
  ("Norris borough"),
  ("North Adams"),
  ("North Amherst"),
  ("North Amityville"),
  ("North Andrews Gardens"),
  ("North Arlington borough"),
  ("North Atlanta"),
  ("North Attleborough Center"),
  ("North Auburn"),
  ("North Augusta"),
  ("North Aurora"),
  ("North Babylon"),
  ("North Baltimore"),
  ("North Barrington"),
  ("North Bay Shore"),
  ("North Bay Village"),
  ("North Bellmore"),
  ("North Bellport"),
  ("North Bend"),
  ("North Bethesda"),
  ("North Boston"),
  ("North Braddock borough"),
  ("North Branch"),
  ("North Brookfield"),
  ("North Brunswick Township"),
  ("North Caldwell borough"),
  ("North Canton"),
  ("North Cape May"),
  ("NORTH CAROLINA"),
  ("North Catasauqua"),
  ("North Charleston"),
  ("North Chicago"),
  ("North College Hill"),
  ("North Conway"),
  ("North Creek"),
  ("North Crossett"),
  ("NORTH DAKOTA"),
  ("North Decatur"),
  ("North Druid Hills"),
  ("North East"),
  ("North East borough"),
  ("North El Monte"),
  ("North Fair Oaks"),
  ("North Falmouth"),
  ("North Fond du Lac"),
  ("North Fort Myers"),
  ("North Great River"),
  ("North Haledon borough"),
  ("North Hartsville"),
  ("North Haven"),
  ("North Highlands"),
  ("North Hills"),
  ("North Hudson"),
  ("North Kansas City"),
  ("North Kensington"),
  ("North Kingsville"),
  ("North Lakeport"),
  ("North Las Vegas"),
  ("North Lauderdale"),
  ("North Laurel"),
  ("North Liberty"),
  ("North Lindenhurst"),
  ("North Little Rock"),
  ("North Logan"),
  ("North Madison"),
  ("North Manchester"),
  ("North Mankato"),
  ("North Marysville"),
  ("North Massapequa"),
  ("North Merrick"),
  ("North Miami"),
  ("North Miami Beach"),
  ("North Middle"),
  ("North Muskegon"),
  ("North Myrtle Beach"),
  ("North New Hyde Park"),
  ("North Oaks"),
  ("North Ogden"),
  ("North Olmsted"),
  ("North Palm Beach"),
  ("North Patchogue"),
  ("North Pembroke"),
  ("North Plainfield borough"),
  ("North Platte"),
  ("North Plymouth"),
  ("North Port"),
  ("North Potomac"),
  ("North Providence"),
  ("North Richland Hills"),
  ("North Ridgeville"),
  ("North River Shores"),
  ("North Riverside"),
  ("North Royalton"),
  ("North Salt Lake"),
  ("North Sarasota"),
  ("North Scituate"),
  ("North Sea"),
  ("North Seekonk"),
  ("North Springfield"),
  ("North St"),
  ("North St. Paul"),
  ("North Star"),
  ("North Syracuse"),
  ("North Terre Haute"),
  ("North Tonawanda"),
  ("North Valley"),
  ("North Valley Stream"),
  ("North Vernon"),
  ("North Versailles"),
  ("North Wales borough"),
  ("North Wantagh"),
  ("North Weeki Wachee"),
  ("North Westport"),
  ("North Wildwood"),
  ("North Wilkesboro"),
  ("North Windham"),
  ("North Yelm"),
  ("North Zanesville"),
  ("Northampton"),
  ("Northampton borough"),
  ("Northborough"),
  ("Northbrook"),
  ("Northeast Ithaca"),
  ("Northern Cambria"),
  ("Northfield"),
  ("Northgate"),
  ("Northglenn"),
  ("Northlake"),
  ("Northland"),
  ("Northport"),
  ("Northridge"),
  ("Northstar-At-Tahoe"),
  ("Northumberland borough"),
  ("Northvale borough"),
  ("Northview"),
  ("Northville"),
  ("Northwest Harbor"),
  ("Northwest Harborcreek"),
  ("Northwest Harwich"),
  ("Northwest Harwinton"),
  ("Northwood"),
  ("Northwoods"),
  ("Norton"),
  ("Norton Center"),
  ("Norton Shores"),
  ("Norwalk"),
  ("Norway"),
  ("Norwich"),
  ("Norwich"),
  ("Norwood"),
  ("Norwood borough"),
  ("Norwood Young America"),
  ("Novato"),
  ("Novi"),
  ("Nowata"),
  ("Noyack"),
  ("Nuevo"),
  ("Nurillo"),
  ("Nutley"),
  ("Nyack"),
  ("Nyssa"),
  ("O'Fallon"),
  ("O'Hara Township"),
  ("O'Neill"),
  ("Oak Brook"),
  ("Oak Creek"),
  ("Oak Forest"),
  ("Oak Grove"),
  ("Oak Harbor"),
  ("Oak Hill"),
  ("Oak Hills"),
  ("Oak Hills Place"),
  ("Oak Island"),
  ("Oak Lawn"),
  ("Oak Park"),
  ("Oak Park Heights"),
  ("Oak Ridge"),
  ("Oak Ridge North"),
  ("Oak Valley"),
  ("Oak View"),
  ("Oakbrook"),
  ("Oakdale"),
  ("Oakhurst"),
  ("Oakland"),
  ("Oakland borough"),
  ("Oakland City"),
  ("Oakland Park"),
  ("Oaklawn-Sunview"),
  ("Oakley"),
  ("Oaklyn borough"),
  ("Oakmont borough"),
  ("Oakridge"),
  ("Oakton"),
  ("Oakville"),
  ("Oakwood"),
  ("Oatfield"),
  ("Oberlin"),
  ("Obetz"),
  ("Ocala"),
  ("Ocala"),
  ("Ocean Acres"),
  ("Ocean Bluff-Brant Rock"),
  ("Ocean City"),
  ("Ocean Grove"),
  ("Ocean Pines"),
  ("Ocean Shores"),
  ("Ocean Springs"),
  ("Oceano"),
  ("Oceanport borough"),
  ("Oceanside"),
  ("Ocilla"),
  ("Ocoee"),
  ("Oconomowoc"),
  ("Oconto"),
  ("Oconto Falls"),
  ("Odenton"),
  ("Odessa"),
  ("Oelwein"),
  ("Offutt AFB"),
  ("Ogallala"),
  ("Ogden"),
  ("Ogden"),
  ("Ogdensburg"),
  ("Ogdensburg borough"),
  ("Oglesby"),
  ("Ogunquit"),
  ("Ohiopyle"),
  ("Ohioville borough"),
  ("Oil City"),
  ("Oildale"),
  ("Ojai"),
  ("Ojus"),
  ("Okauchee Lake"),
  ("Okeechobee"),
  ("Okemah"),
  ("Okemos"),
  ("Oklahoma City"),
  ("Okmulgee"),
  ("Okolona"),
  ("Olathe"),
  ("Old Bethpage"),
  ("Old Bridge"),
  ("Old Forge borough"),
  ("Old Jefferson"),
  ("Old Mystic"),
  ("Old Orchard Beach"),
  ("Old Orchard Beach"),
  ("Old Tappan borough"),
  ("Old Town"),
  ("Old Westbury"),
  ("Oldsmar"),
  ("Olean"),
  ("Olive Branch"),
  ("Olivehurst"),
  ("Oliver"),
  ("Oliver Springs"),
  ("Olivette"),
  ("Olivia"),
  ("Olmsted Falls"),
  ("Olney"),
  ("Olympia"),
  ("Olympia Fields"),
  ("Olympia Heights"),
  ("Olyphant borough"),
  ("Omaha"),
  ("Omak"),
  ("Omro"),
  ("Onalaska"),
  ("Onawa"),
  ("Oneida"),
  ("Oneonta"),
  ("Ontario"),
  ("Ooltewah"),
  ("Oostburg"),
  ("Opal Cliffs"),
  ("Opa-locka"),
  ("Opa-locka North"),
  ("Opelika"),
  ("Opelousas"),
  ("Ophir"),
  ("Opp"),
  ("Opportunity"),
  ("Oquirrh"),
  ("Oracle"),
  ("Oradell borough"),
  ("Orange"),
  ("Orange Beach"),
  ("Orange City"),
  ("Orange Cove"),
  ("Orange Lake"),
  ("Orange Park"),
  ("Orangeburg"),
  ("Orangeburg"),
  ("Orangevale"),
  ("Orchard City"),
  ("Orchard Homes"),
  ("Orchard Mesa"),
  ("Orchard Park"),
  ("Orchards"),
  ("Orcutt"),
  ("Oregon"),
  ("Oregon City"),
  ("Oreland"),
  ("Orem"),
  ("Orick"),
  ("Orinda"),
  ("Orkney Springs"),
  ("Orland"),
  ("Orland Hills"),
  ("Orland Park"),
  ("Orlando"),
  ("Orlovista"),
  ("Ormond Beach"),
  ("Ormond Beach"),
  ("Ormond-By-The-Sea"),
  ("Oro Valley"),
  ("Orofino"),
  ("Orono"),
  ("Orosi"),
  ("Oroville"),
  ("Oroville East"),
  ("Orrville"),
  ("Orting"),
  ("Orwigsburg borough"),
  ("Osage"),
  ("Osage Beach"),
  ("Osage City"),
  ("Osawatomie"),
  ("Osceola"),
  ("Oshkosh"),
  ("Oskaloosa"),
  ("Osprey"),
  ("Ossian"),
  ("Ossining"),
  ("Oswego"),
  ("Othello"),
  ("Otis Orchards-East Farms"),
  ("Otsego"),
  ("Ottawa"),
  ("Ottawa Hills"),
  ("Ottumwa"),
  ("Overland"),
  ("Overland Park"),
  ("Overlea"),
  ("Oviedo"),
  ("Ovilla"),
  ("Owasso"),
  ("Owatonna"),
  ("Owego"),
  ("Owensboro"),
  ("Owensville"),
  ("Owings Mills"),
  ("Owosso"),
  ("Oxford"),
  ("Oxford borough"),
  ("Oxnard"),
  ("Oxoboxo River"),
  ("Oxon Hill-Glassmanor"),
  ("Oyster Bay"),
  ("Ozark"),
  ("Ozona"),
  ("Pace"),
  ("Pacheco"),
  ("Pacific"),
  ("Pacific Grove"),
  ("Pacifica"),
  ("Packwood"),
  ("Pacolet"),
  ("Paddock Lake"),
  ("Paden City"),
  ("Padre Island"),
  ("Paducah"),
  ("Page"),
  ("Pagedale"),
  ("Pageland"),
  ("Pahokee"),
  ("Pahrump"),
  ("Paine Field-Lake Stickney"),
  ("Painesville"),
  ("Pajaro"),
  ("Palacios"),
  ("Palatine"),
  ("Palatka"),
  ("Palermo"),
  ("Palestine"),
  ("Palisade"),
  ("Palisades Park borough"),
  ("Palm Bay"),
  ("Palm Beach"),
  ("Palm Beach Gardens"),
  ("Palm City"),
  ("Palm Coast"),
  ("Palm Desert"),
  ("Palm Harbor"),
  ("Palm River-Clair Mel"),
  ("Palm Springs"),
  ("Palm Springs North"),
  ("Palm Valley"),
  ("Palmdale"),
  ("Palmer"),
  ("Palmer Heights"),
  ("Palmerton borough"),
  ("Palmetto"),
  ("Palmetto Estates"),
  ("Palmhurst"),
  ("Palmview"),
  ("Palmview South"),
  ("Palmyra"),
  ("Palmyra borough"),
  ("Palo Alto"),
  ("Palo Alto"),
  ("Palos Heights"),
  ("Palos Hills"),
  ("Palos Park"),
  ("Palos Verdes Estates"),
  ("Pampa"),
  ("Pana"),
  ("Panama City"),
  ("Panama City Beach"),
  ("Panhandle"),
  ("Panthersville"),
  ("Paola"),
  ("Paoli"),
  ("Papillion"),
  ("Paradise"),
  ("Paradise Valley"),
  ("Paragould"),
  ("Paramount"),
  ("Paramount-Long Meadow"),
  ("Paramus borough"),
  ("Paris"),
  ("Park City"),
  ("Park Falls"),
  ("Park Forest"),
  ("Park Forest Village"),
  ("Park Hill"),
  ("Park Hills"),
  ("Park Layne"),
  ("Park Rapids"),
  ("Park Ridge"),
  ("Park Ridge borough"),
  ("Parker"),
  ("Parker Strip"),
  ("Parkersburg"),
  ("Parkers-Iron Springs"),
  ("Parkesburg borough"),
  ("Parkland"),
  ("Parksdale"),
  ("Parkville"),
  ("Parkway-South"),
  ("Parkwood"),
  ("Parlier"),
  ("Parma"),
  ("Parma Heights"),
  ("Parole"),
  ("Parowan"),
  ("Parris Island"),
  ("Parsons"),
  ("Pasadena"),
  ("Pascagoula"),
  ("Pasco"),
  ("Pascoag"),
  ("Paso Robles"),
  ("Pass Christian"),
  ("Passaic"),
  ("Pataskala"),
  ("Patchogue"),
  ("Paterson"),
  ("Patterson"),
  ("Patterson Township"),
  ("Paulden"),
  ("Paulding"),
  ("Pauls Valley"),
  ("Paulsboro borough"),
  ("Paw Paw"),
  ("Paw Paw Lake"),
  ("Pawcatuck"),
  ("Pawhuska"),
  ("Pawnee"),
  ("Pawtucket"),
  ("Paxton"),
  ("Paxtonia"),
  ("Payette"),
  ("Payson"),
  ("Pea Ridge"),
  ("Peabody"),
  ("Peachtree City"),
  ("Pearisburg"),
  ("Pearl"),
  ("Pearl Beach"),
  ("Pearl City"),
  ("Pearl River"),
  ("Pearland"),
  ("Pearsall"),
  ("Pebble Creek"),
  ("Pecan Grove"),
  ("Pecan Plantation"),
  ("Pecos"),
  ("Peculiar"),
  ("Pedley"),
  ("Peekskill"),
  ("Pekin"),
  ("Pelham"),
  ("Pelham Manor"),
  ("Pelican Bay"),
  ("Pell City"),
  ("Pell Lake"),
  ("Pella"),
  ("Pemberton Heights"),
  ("Pembroke Park"),
  ("Pembroke Pines"),
  ("Pen Argyl borough"),
  ("Penbrook borough"),
  ("Pendleton"),
  ("Peninsula"),
  ("Penn Hills"),
  ("Penn Wynne"),
  ("Penn Yan"),
  ("Pennington borough"),
  ("Penns Grove borough"),
  ("Pennsauken"),
  ("Pennsburg borough"),
  ("Pennsville"),
  ("Penrose"),
  ("Pensacola"),
  ("Peoria"),
  ("Peoria Heights"),
  ("Peotone"),
  ("Pepper Pike"),
  ("Pepperell"),
  ("Peralta"),
  ("Perham"),
  ("Perkasie borough"),
  ("Perris"),
  ("Perry"),
  ("Perry Hall"),
  ("Perry Heights"),
  ("Perrysburg"),
  ("Perryton"),
  ("Perryville"),
  ("Perth Amboy"),
  ("Peru"),
  ("Peshtigo"),
  ("Petal"),
  ("Petaluma"),
  ("Peterborough"),
  ("Petersburg"),
  ("Petoskey"),
  ("Pevely"),
  ("Pewaukee"),
  ("Pflugerville"),
  ("Pharr"),
  ("Phenix City"),
  ("Philadelphia"),
  ("Philippi"),
  ("Philipsburg"),
  ("Philipsburg borough"),
  ("Phillipsburg"),
  ("Philomath"),
  ("Phoenix"),
  ("Phoenix Lake-Cedar"),
  ("Phoenixville borough"),
  ("Picayune"),
  ("Pickens"),
  ("Pickerington"),
  ("Picnic Point-North"),
  ("Pico Rivera"),
  ("Picture Rocks"),
  ("Piermont"),
  ("Pierre"),
  ("Pierre Part"),
  ("Pierson"),
  ("Pigeon Forge"),
  ("Piggott"),
  ("Pike Creek"),
  ("Pikesville"),
  ("Pikeville"),
  ("Pilot Point"),
  ("Pimmit Hills"),
  ("Pinardville"),
  ("Pinch"),
  ("Pinckneyville"),
  ("Pine Bluff"),
  ("Pine Castle"),
  ("Pine City"),
  ("Pine Crest"),
  ("Pine Hill borough"),
  ("Pine Hills"),
  ("Pine Island Ridge"),
  ("Pine Lawn"),
  ("Pine Manor"),
  ("Pine Ridge"),
  ("Pinecrest"),
  ("Pinedale"),
  ("Pinehurst"),
  ("Pinellas Park"),
  ("Pinetop-Lakeside"),
  ("Pineville"),
  ("Pinewood"),
  ("Piney"),
  ("Piney Green"),
  ("Piney Point Village"),
  ("Pinole"),
  ("Pinson"),
  ("Pioneer Village"),
  ("Pipestone"),
  ("Piqua"),
  ("Pismo Beach"),
  ("Pistakee Highlands"),
  ("Pitcairn borough"),
  ("Pitman borough"),
  ("Pittsburg"),
  ("Pittsburgh"),
  ("Pittsfield"),
  ("Pittston"),
  ("Pixley"),
  ("Placentia"),
  ("Placerville"),
  ("Placid Lakes"),
  ("Placitas"),
  ("Plain City"),
  ("Plainedge"),
  ("Plainfield"),
  ("Plainfield Village"),
  ("Plainview"),
  ("Plainwell"),
  ("Planada"),
  ("Plano"),
  ("Plant City"),
  ("Plantation"),
  ("Plaquemine"),
  ("Platte City"),
  ("Plattekill"),
  ("Platteville"),
  ("Plattsburgh"),
  ("Plattsmouth"),
  ("Pleasant Garden"),
  ("Pleasant Grove"),
  ("Pleasant Hill"),
  ("Pleasant Hills"),
  ("Pleasant Hills borough"),
  ("Pleasant Prairie"),
  ("Pleasant Ridge"),
  ("Pleasant Run"),
  ("Pleasant Run Farm"),
  ("Pleasant Valley"),
  ("Pleasant View"),
  ("Pleasanton"),
  ("Pleasantville"),
  ("Pleasure Ridge Park"),
  ("Plover"),
  ("Plum borough"),
  ("Plymouth"),
  ("Plymouth borough"),
  ("Plymouth Meeting"),
  ("Plymouth Township"),
  ("Pocahontas"),
  ("Pocasset"),
  ("Pocatello"),
  ("Pocola"),
  ("Pocomoke City"),
  ("Poinciana"),
  ("Point Arena"),
  ("Point Mugu"),
  ("Point Pleasant"),
  ("Point Pleasant Beach"),
  ("Point Pleasant borough"),
  ("Poland"),
  ("Polaris"),
  ("Pollock Pines"),
  ("Polson"),
  ("Pomona"),
  ("Pompano Beach"),
  ("Pompano Estates"),
  ("Pompton Lakes borough"),
  ("Ponca City"),
  ("Ponce Inlet"),
  ("Ponchatoula"),
  ("Ponderosa Park"),
  ("Pontiac"),
  ("Pontoon Beach"),
  ("Pontotoc"),
  ("Pooler"),
  ("Poolesville"),
  ("Pope AFB"),
  ("Poplar Bluff"),
  ("Poplarville"),
  ("Poquoson"),
  ("Port Allen"),
  ("Port Angeles"),
  ("Port Angeles East"),
  ("Port Aransas"),
  ("Port ArthurPort Charlotte"),
  ("Port Chester"),
  ("Port Clinton"),
  ("Port Ewen"),
  ("Port Hadlock-Irondale"),
  ("Port Hueneme"),
  ("Port Huron"),
  ("Port Isabel"),
  ("Port Jefferson"),
  ("Port Jefferson Station"),
  ("Port Jervis"),
  ("Port La Belle"),
  ("Port Lavaca"),
  ("Port Monmouth"),
  ("Port Neches"),
  ("Port Orange"),
  ("Port Orchard"),
  ("Port Orford"),
  ("Port Reading"),
  ("Port Richey"),
  ("Port Royal"),
  ("Port Salerno"),
  ("Port St. Joe city"),
  ("Port St. John"),
  ("Port St. Lucie"),
  ("Port St. Lucie city"),
  ("Port St. Lucie-River Park"),
  ("Port Sulphur"),
  ("Port Townsend"),
  ("Port Vue borough"),
  ("Port Washington"),
  ("Port Washington North"),
  ("Port Wentworth"),
  ("Portage"),
  ("Portage"),
  ("Portage borough"),
  ("Portage Lakes"),
  ("Portageville"),
  ("Portales"),
  ("Porter"),
  ("Porterville"),
  ("Portland"),
  ("Portland"),
  ("Portola Hills"),
  ("Portola Valley"),
  ("Portsmouth"),
  ("Posen"),
  ("Post"),
  ("Post Falls"),
  ("Poteau"),
  ("Poteet"),
  ("Potomac"),
  ("Potosi"),
  ("Potsdam"),
  ("Potts borough"),
  ("Pottsgrove"),
  ("Pottsville"),
  ("Poughkeepsie"),
  ("Poulsbo"),
  ("Poway"),
  ("Powder Springs"),
  ("Powderhorn"),
  ("Powderville"),
  ("Powell"),
  ("Poydras"),
  ("Prairie du Chien"),
  ("Prairie du Sac"),
  ("Prairie Grove"),
  ("Prairie Ridge"),
  ("Prairie View"),
  ("Prairie Village"),
  ("Pratt"),
  ("Prattville"),
  ("Premont"),
  ("Prescott"),
  ("Prescott Valley"),
  ("Presidio"),
  ("Presque Isle"),
  ("Preston"),
  ("Preston Heights"),
  ("Prestonsburg"),
  ("Pretty Bayou"),
  ("Price"),
  ("Pricedale"),
  ("Prichard"),
  ("Prien"),
  ("Primera"),
  ("Princeton"),
  ("Princeton borough"),
  ("Princeton Meadows"),
  ("Princeton North"),
  ("Prineville"),
  ("Prior Lake"),
  ("Proctor"),
  ("Progreso"),
  ("Progress"),
  ("Prospect"),
  ("Prospect Heights"),
  ("Prospect Park borough"),
  ("Prosser"),
  ("Providence"),
  ("Province"),
  ("Provo"),
  ("Prunedale"),
  ("Pryor Creek"),
  ("Pueblo"),
  ("Pueblo West"),
  ("Pukalani"),
  ("Pulaski"),
  ("Pullman"),
  ("Pumphrey"),
  ("Punta Gorda"),
  ("Punxsutawney borough"),
  ("Pupukea"),
  ("Purcell"),
  ("Purcellville"),
  ("Putnam District"),
  ("Putnam Lake"),
  ("Putney"),
  ("Puyallup"),
  ("Quaker borough"),
  ("Quanah"),
  ("Quantico Station"),
  ("Quartz Hill"),
  ("Quartzsite"),
  ("Quechee"),
  ("Queen Creek"),
  ("Quinault"),
  ("Quincy"),
  ("Quitman"),
  ("Quogue"),
  ("Raceland"),
  ("Racine"),
  ("Racine"),
  ("Radcliff"),
  ("Radford"),
  ("Radnor Township"),
  ("Raeford"),
  ("Rahway"),
  ("Rainbow City"),
  ("Rainsville"),
  ("Raleigh"),
  ("Raleigh Hills"),
  ("Ralston"),
  ("Ram"),
  ("Ramblewood"),
  ("Ramona"),
  ("Ramsey"),
  ("Ramsey borough"),
  ("Ranchettes"),
  ("Rancho Calaveras"),
  ("Rancho Cordova"),
  ("Rancho Cucamonga"),
  ("Rancho Mirage"),
  ("Rancho Murieta"),
  ("Rancho Palos Verdes"),
  ("Rancho San Diego"),
  ("Rancho Santa Fe"),
  ("Rancho Santa Margarita"),
  ("Randalls"),
  ("Randleman"),
  ("Randolph"),
  ("Ranger"),
  ("Rantoul"),
  ("Rapid City"),
  ("Rapid Valley"),
  ("Raritan borough"),
  ("Rathdrum"),
  ("Raton"),
  ("Raven"),
  ("Ravena"),
  ("Ravenna"),
  ("Ravenswood"),
  ("Rawlins"),
  ("Ray"),
  ("Raymond"),
  ("Raymondville"),
  ("Raymore"),
  ("Rayne"),
  ("Raynham Center"),
  ("Rayville"),
  ("Reading"),
  ("Reams"),
  ("Red Bank"),
  ("Red Bank borough"),
  ("Red Bay"),
  ("Red Bluff"),
  ("Red Bud"),
  ("Red Chute"),
  ("Red Hill"),
  ("Red Lion borough"),
  ("Red Lodge"),
  ("Red Oak"),
  ("Red Oaks Mill"),
  ("Red River"),
  ("Red Springs"),
  ("Red Wing"),
  ("Redan"),
  ("Redding"),
  ("Redfield"),
  ("Redford"),
  ("Redland"),
  ("Redlands"),
  ("Redmond"),
  ("Redondo Beach"),
  ("Redwood"),
  ("Redwood City"),
  ("Redwood Falls"),
  ("Reeders"),
  ("Reedley"),
  ("Reedsburg"),
  ("Reedsport"),
  ("Refugio"),
  ("Reidland"),
  ("Reidsville"),
  ("Reiffton"),
  ("Reisters"),
  ("Remsenburg-Speonk"),
  ("Rendon"),
  ("Reno"),
  ("Rensselaer"),
  ("Renton"),
  ("Republic"),
  ("Reserve"),
  ("Reserve Township"),
  ("Reston"),
  ("Revere"),
  ("Rexburg"),
  ("Reynoldsburg"),
  ("Reynoldsville borough"),
  ("Rhinebeck"),
  ("Rhinelander"),
  ("RHODE ISLAND"),
  ("Rhododendron"),
  ("Rialto"),
  ("Rib Mountain"),
  ("Rice Lake"),
  ("Richardson"),
  ("Richboro"),
  ("Richfield"),
  ("Richgrove"),
  ("Richland"),
  ("Richland Center"),
  ("Richland Hills"),
  ("Richlands"),
  ("Richmond"),
  ("Richmond Heights"),
  ("Richmond Hill"),
  ("Richmond West"),
  ("Richton Park"),
  ("Richwood"),
  ("Ridge"),
  ("Ridge Manor"),
  ("Ridge Wood Heights"),
  ("Ridgecrest"),
  ("Ridgefield"),
  ("Ridgefield borough"),
  ("Ridgefield Park"),
  ("Ridgeland"),
  ("Ridgemark"),
  ("Ridgewood"),
  ("Ridgway borough"),
  ("Ridley Park borough"),
  ("Rifle"),
  ("Rigby"),
  ("Rincon"),
  ("Ringwood borough"),
  ("Rio Bravo"),
  ("Rio Communities"),
  ("Rio del Mar"),
  ("Rio Dell"),
  ("Rio Dell"),
  ("Rio Grande City"),
  ("Rio Linda"),
  ("Rio Rancho"),
  ("Rio Rico Northeast"),
  ("Rio Rico Northwest"),
  ("Rio Vista"),
  ("Ripley"),
  ("Ripon"),
  ("Rittman"),
  ("Riva"),
  ("River Bend"),
  ("River Edge borough"),
  ("River Falls"),
  ("River Forest"),
  ("River Grove"),
  ("River Oaks"),
  ("River Ridge"),
  ("River Road"),
  ("River Rouge"),
  ("River Vale"),
  ("Riverbank"),
  ("Riverdale"),
  ("Riverdale Park"),
  ("Riverhead"),
  ("Riverside"),
  ("Riverside/March AFB"),
  ("Riverton"),
  ("Riverton borough"),
  ("Riverton-Boulevard Park"),
  ("Riverview"),
  ("Riverwoods"),
  ("Riviera Beach"),
  ("Roanoke"),
  ("Roanoke Rapids"),
  ("Robbins"),
  ("Robbinsdale"),
  ("Robertsdale"),
  ("Robins AFB"),
  ("Robinson"),
  ("Robinson Township"),
  ("Robinwood"),
  ("Robs"),
  ("Rochelle"),
  ("Rochelle Park"),
  ("Rochester"),
  ("Rochester borough"),
  ("Rochester Hills"),
  ("Rock Cave"),
  ("Rock Falls"),
  ("Rock Hill"),
  ("Rock Island"),
  ("Rock Rapids"),
  ("Rock Springs"),
  ("Rock Valley"),
  ("Rockaway Beach"),
  ("Rockaway borough"),
  ("Rockcreek"),
  ("Rockdale"),
  ("Rockford"),
  ("Rockingham"),
  ("Rockland"),
  ("Rockledge"),
  ("Rockledge borough"),
  ("Rocklin"),
  ("Rockmart"),
  ("Rockport"),
  ("Rockton"),
  ("Rockville"),
  ("Rockville Centre"),
  ("Rockwall"),
  ("Rockwell"),
  ("Rockwood"),
  ("Rocky Ford"),
  ("Rocky Mount"),
  ("Rocky Point"),
  ("Rocky River"),
  ("Rodeo"),
  ("Roeland Park"),
  ("Rogers"),
  ("Rogers City"),
  ("Rogersville"),
  ("Rohnert Park"),
  ("Roland"),
  ("Rolla"),
  ("Rolling Hills Estates"),
  ("Rolling Meadows"),
  ("Rollingwood"),
  ("Rollinsville"),
  ("Roma"),
  ("Rome"),
  ("Romeo"),
  ("Romeoville"),
  ("Romoland"),
  ("Romulus"),
  ("Ronkonkoma"),
  ("Roosevelt"),
  ("Roosevelt Park"),
  ("Rosamond"),
  ("Rosaryville"),
  ("Roscoe"),
  ("Rose Hill"),
  ("Roseau"),
  ("Roseburg"),
  ("Roseburg North"),
  ("Rosedale"),
  ("Roseland"),
  ("Roseland borough"),
  ("Roselawn"),
  ("Roselle"),
  ("Roselle borough"),
  ("Roselle Park borough"),
  ("Rosemead"),
  ("Rosemont"),
  ("Rosemount"),
  ("Rosenberg"),
  ("Roseville"),
  ("Rosewood Heights"),
  ("Rosita North"),
  ("Rosita South"),
  ("Roslyn"),
  ("Roslyn Heights"),
  ("Ross Township"),
  ("Rossford"),
  ("Rossmoor"),
  ("Rossville"),
  ("Roswell"),
  ("Rothschild"),
  ("Rothsville"),
  ("Rotonda"),
  ("Rotterdam"),
  ("Round Lake"),
  ("Round Lake Beach"),
  ("Round Lake Park"),
  ("Round Rock"),
  ("Rowland Heights"),
  ("Rowlett"),
  ("Roxboro"),
  ("Roxborough Park"),
  ("Roxbury"),
  ("Roy"),
  ("Royal Oak"),
  ("Royal Palm Beach"),
  ("Royal Palm Estates"),
  ("Royal Pines"),
  ("Royersford borough"),
  ("Royse City"),
  ("Rubidoux"),
  ("Rugby"),
  ("Ruidoso"),
  ("Ruleville"),
  ("Rumford"),
  ("Rumson borough"),
  ("Runnemede borough"),
  ("Running Springs"),
  ("Running Springs"),
  ("Rupert"),
  ("Rushville"),
  ("Rusk"),
  ("Ruskin"),
  ("Russell"),
  ("Russellville"),
  ("Ruston"),
  ("Rutherford"),
  ("Rutherford borough"),
  ("Rutherfordton"),
  ("Rutland"),
  ("Rye"),
  ("Rye Brooks"),
  ("Sabetha"),
  ("Sabina"),
  ("Sachse"),
  ("Saco"),
  ("Sacramento"),
  ("Saddle Brook"),
  ("Saddle River borough"),
  ("Safety Harbor"),
  ("Safford"),
  ("Sag Harbor"),
  ("Sagamore"),
  ("Sagaponack"),
  ("Saginaw"),
  ("Saginaw"),
  ("Saginaw Township North"),
  ("Saginaw Township South"),
  ("Sahuarita"),
  ("Saint Albans"),
  ("Saint Charles"),
  ("Saint Cloud"),
  ("Saint George"),
  ("Saint Johnsbury"),
  ("Saint Joseph"),
  ("Saint Paul"),
  ("Saint Petersburg"),
  ("Saks"),
  ("Salado"),
  ("Salamanca"),
  ("Salem"),
  ("Salem"),
  ("Salida"),
  ("Salina"),
  ("Salinas"),
  ("Saline"),
  ("Salisbury"),
  ("Sallisaw"),
  ("Salmon"),
  ("Salmon Creek"),
  ("Salt Lake City"),
  ("Saltillo"),
  ("Saluda"),
  ("Salunga-Landisville"),
  ("Sammamish"),
  ("Samoset"),
  ("Samsula-Spruce Creek"),
  ("San Andreas"),
  ("San Angelo"),
  ("San Anselmo"),
  ("San Antonio"),
  ("San Antonio Heights"),
  ("San Benito"),
  ("San Bernardino"),
  ("San Bruno"),
  ("San Buenaventura"),
  ("San Carlos"),
  ("San Carlos Park"),
  ("San Clemente"),
  ("San Clemente"),
  ("San Cristobal"),
  ("San Diego"),
  ("San Diego Country"),
  ("San Dimas"),
  ("San Elizario"),
  ("San Fernando"),
  ("San Francisco"),
  ("San Gabriel"),
  ("San Jacinto"),
  ("San Joaquin"),
  ("San Joaquin Hills"),
  ("San Jose"),
  ("San Juan Capistrano"),
  ("San Leandro"),
  ("San Leon"),
  ("San Lorenzo"),
  ("San Lucas"),
  ("San Luis"),
  ("San Luis Obispo"),
  ("San Manuel"),
  ("San Marcos"),
  ("San Marino"),
  ("San Martin"),
  ("San Mateo"),
  ("San Nicolas Island"),
  ("San Pablo"),
  ("San Rafael"),
  ("San Ramon"),
  ("San Saba"),
  ("San Simeon"),
  ("Sanatoga"),
  ("Sand Springs"),
  ("Sandalfoot Cove"),
  ("Sandersville"),
  ("Sandia Park"),
  ("Sandpoint"),
  ("Sandpoint"),
  ("Sands Point"),
  ("Sandusky"),
  ("Sandusky"),
  ("Sandusky South"),
  ("Sandwich"),
  ("Sandy"),
  ("Sandy Springs"),
  ("Sanford"),
  ("Sanger"),
  ("Sanibel"),
  ("Sans Souci"),
  ("Sansom Park"),
  ("Santa Ana"),
  ("Santa Barbara"),
  ("Santa Clara"),
  ("Santa Clarita"),
  ("Santa Cruz"),
  ("Santa Fe"),
  ("Santa Fe Springs"),
  ("Santa Maria"),
  ("Santa Monica"),
  ("Santa Paula"),
  ("Santa Rosa"),
  ("Santa Teresa"),
  ("Santa Venetia"),
  ("Santa Ynez"),
  ("Santaquin"),
  ("Santee"),
  ("Santo Domingo Pueblo"),
  ("Sappington"),
  ("Sapulpa"),
  ("Saraland"),
  ("Saranac Lake"),
  ("Sarasota"),
  ("Sarasota Springs"),
  ("Saratoga"),
  ("Saratoga Springs"),
  ("Sartell"),
  ("Satellite Beach"),
  ("Satsuma"),
  ("Saugerties"),
  ("Saugus"),
  ("Sauk Centre"),
  ("Sauk City"),
  ("Sauk Rapids"),
  ("Sauk Village"),
  ("Saukville"),
  ("Sault Sainte Marie"),
  ("Sault Ste"),
  ("Sausalito"),
  ("Savage"),
  ("Savage-Guilford"),
  ("Savanna"),
  ("Savannah"),
  ("Savoy"),
  ("Sawgrass"),
  ("Sawmills"),
  ("Saxon"),
  ("Saxon"),
  ("Saylorville"),
  ("Sayre"),
  ("Sayre borough"),
  ("Sayreville borough"),
  ("Sayville"),
  ("Scappoose"),
  ("Scarborough"),
  ("Scarsdale"),
  ("Scenic Oaks"),
  ("Schaumburg"),
  ("Schenectady"),
  ("Schererville"),
  ("Schertz"),
  ("Schiller Park"),
  ("Schlusser"),
  ("Schofield Barracks"),
  ("Schriever"),
  ("Schulenburg"),
  ("Schuyler"),
  ("Schuylkill Haven borough"),
  ("Scissors"),
  ("Scituate"),
  ("Scotch"),
  ("Scotch Plains"),
  ("Scotia"),
  ("Scott"),
  ("Scott AFB"),
  ("Scott City"),
  ("Scott Lake"),
  ("Scott Township"),
  ("Scottdale"),
  ("Scottdale borough"),
  ("Scotts Valley"),
  ("Scottsbluff"),
  ("Scottsboro"),
  ("Scottsburg"),
  ("Scottsdale"),
  ("Scottsville"),
  ("Scranton"),
  ("Sea Cliff"),
  ("Sea Isle City"),
  ("Seabrook"),
  ("Seaford"),
  ("Seagate"),
  ("Seagoville"),
  ("Seal Beach"),
  ("Sealy"),
  ("Searcy"),
  ("Searing"),
  ("Seaside"),
  ("Seaside Heights borough"),
  ("Seat Pleasant"),
  ("SeaTac"),
  ("Seattle"),
  ("Seattle Hill-Silver Firs"),
  ("Sebago"),
  ("Sebastian"),
  ("Sebastopol"),
  ("Sebring"),
  ("Secaucus"),
  ("Security-Widefield"),
  ("Sedalia"),
  ("Sedco Hills"),
  ("Sedona"),
  ("Sedro-Woolley"),
  ("Seeley Lake"),
  ("Seffner"),
  ("Seguin"),
  ("Selah"),
  ("Selby-on-the-Bay"),
  ("Selden"),
  ("Selinsgrove borough"),
  ("Sellersburg"),
  ("Sellersville borough"),
  ("Sells"),
  ("Selma"),
  ("Selmer"),
  ("Selmont-West Selmont"),
  ("Seminole"),
  ("Seminole Manor"),
  ("Senatobia"),
  ("Seneca"),
  ("Seneca Falls"),
  ("Sequim"),
  ("Sergeant Bluff"),
  ("Setauket-East Setauket"),
  ("Seven Corners"),
  ("Seven Hills"),
  ("Seven Lakes"),
  ("Seven Oaks"),
  ("Severn"),
  ("Severna Park"),
  ("Sevierville"),
  ("Seward"),
  ("Sewaren"),
  ("Sewickley borough"),
  ("Seymour"),
  ("Shackelford"),
  ("Shady Hills"),
  ("Shady Hollow"),
  ("Shady Side"),
  ("Shadyside"),
  ("Shafter"),
  ("Shaker Heights"),
  ("Shakopee"),
  ("Shaler Township"),
  ("Shamokin"),
  ("Shanor-Northvue"),
  ("Shark River Hills"),
  ("Sharon"),
  ("Sharon Hill borough"),
  ("Sharonville"),
  ("Sharpes"),
  ("Sharpsburg borough"),
  ("Sharpsville borough"),
  ("Shasta Lake"),
  ("Shattuckville"),
  ("Shawano"),
  ("Shawnee"),
  ("Sheboygan"),
  ("Sheboygan Falls"),
  ("Sheffield"),
  ("Sheffield Lake"),
  ("Shelby"),
  ("Shelbyville"),
  ("Sheldon"),
  ("Shell Point"),
  ("Shelley"),
  ("Shelter Island"),
  ("Shelton"),
  ("Shenandoah"),
  ("Shenandoah borough"),
  ("Shepherdsville"),
  ("Sheridan"),
  ("Sherman"),
  ("Sherrelwood"),
  ("Sherrill"),
  ("Sherwood"),
  ("Sherwood Manor"),
  ("Shields"),
  ("Shillington borough"),
  ("Shiloh"),
  ("Shingle Springs"),
  ("Shippensburg borough"),
  ("Shiprock"),
  ("Shirley"),
  ("Shively"),
  ("Shoreline"),
  ("Shoreline Park"),
  ("Shoreview"),
  ("Shorewood"),
  ("Show Low"),
  ("Shreveport"),
  ("Shrewsbury"),
  ("Shrewsbury borough"),
  ("Sibley"),
  ("Sidney"),
  ("Sierra Madre"),
  ("Sierra Vista"),
  ("Sierra Vista Southeast"),
  ("Sierra-At-Tahoe"),
  ("Siesta Key"),
  ("Signal Hill"),
  ("Signal Mountain"),
  ("Sikeston"),
  ("Siler City"),
  ("Siloam Springs"),
  ("Silsbee"),
  ("Silver City"),
  ("Silver Creek"),
  ("Silver Lake"),
  ("Silver Spring"),
  ("Silver Springs"),
  ("Silver Springs Shores"),
  ("Silverdale"),
  ("Silverthorne"),
  ("Silverton"),
  ("Silvis"),
  ("Simi Valley"),
  ("Simonton Lake"),
  ("Simpsonville"),
  ("Simsbury Center"),
  ("Sinking Spring borough"),
  ("Sinton"),
  ("Sioux Center"),
  ("Sioux City"),
  ("Sioux Falls"),
  ("Sisseton"),
  ("Sissonville"),
  ("Sitka"),
  ("Sitka  and borough"),
  ("Skaneateles"),
  ("Skiatook"),
  ("Skidaway Island"),
  ("Skidway Lake"),
  ("Skippack"),
  ("Skokie"),
  ("Skowhegan"),
  ("Sky Lake"),
  ("Skykomish"),
  ("Slatington borough"),
  ("Slaton"),
  ("Slaty Fork"),
  ("Slaughterville"),
  ("Sleepy Eye"),
  ("Sleepy Hollow"),
  ("Slidell"),
  ("Slinger"),
  ("Slinger"),
  ("Slippery Rock borough"),
  ("Sloan"),
  ("Sloatsburg"),
  ("Smith"),
  ("Smith Mills"),
  ("Smith River"),
  ("Smithfield"),
  ("Smiths"),
  ("Smithville"),
  ("Smuggler's Notch"),
  ("Smyrna"),
  ("Snellville"),
  ("Snohomish"),
  ("Snowflake"),
  ("Snowmass Village"),
  ("Snyder"),
  ("Socastee"),
  ("Social Circle"),
  ("Society Hill"),
  ("Socorro"),
  ("Soda Springs"),
  ("Soddy-Daisy"),
  ("Solana Beach"),
  ("Soldotna"),
  ("Soledad"),
  ("Solon"),
  ("Solvang"),
  ("Solvay"),
  ("Somerdale borough"),
  ("Somers Point"),
  ("Somerset"),
  ("Somerset borough"),
  ("Somersworth"),
  ("Somerton"),
  ("Somerville"),
  ("Somerville borough"),
  ("Sonoma"),
  ("Sonora"),
  ("Soperton"),
  ("Soquel"),
  ("Souderton borough"),
  ("Sound Beach"),
  ("South Alamo"),
  ("South Amboy"),
  ("South Amherst"),
  ("South Apopka"),
  ("South Barrington"),
  ("South Bay"),
  ("South Beach"),
  ("South Beloit"),
  ("South Bend"),
  ("South Bend"),
  ("South Boston"),
  ("South Bound Brook"),
  ("South Bradenton"),
  ("South Burlington"),
  ("South Burlington"),
  ("South Charleston"),
  ("South Chicago Heights"),
  ("South Cleveland"),
  ("South Daytona"),
  ("South Dennis"),
  ("South Duxbury"),
  ("South El Monte"),
  ("South Elgin"),
  ("South Eliot"),
  ("South Euclid"),
  ("South Farmingdale"),
  ("South Fulton"),
  ("South Gastonia"),
  ("South Gate"),
  ("South Gate Ridge"),
  ("South Gibson"),
  ("South Glens Falls"),
  ("South Glens Falls"),
  ("South Greeley"),
  ("South Haven"),
  ("South Hempstead"),
  ("South Highpoint"),
  ("South Hill"),
  ("South Holland"),
  ("South Hooksett"),
  ("South Houston"),
  ("South Huntington"),
  ("South Hutchinson"),
  ("South Jacksonville"),
  ("South Jordan"),
  ("South Kensington"),
  ("South Lake Tahoe"),
  ("South Lake Tahoe"),
  ("South Laurel"),
  ("South Lebanon"),
  ("South Lockport"),
  ("South Lyon"),
  ("South Miami"),
  ("South Miami Heights"),
  ("South Milwaukee"),
  ("South Monroe"),
  ("South Nyack"),
  ("South Ogden"),
  ("South Orange"),
  ("South Oroville"),
  ("South Park Township"),
  ("South Pasadena"),
  ("South Patrick Shores"),
  ("South Pittsburg"),
  ("South Plainfield borough"),
  ("South Point"),
  ("South Portland"),
  ("South River borough"),
  ("South Rosemary"),
  ("South Russell"),
  ("South Salt Lake"),
  ("South San Francisco"),
  ("South San Gabriel"),
  ("South San Jose Hills"),
  ("South Sanford"),
  ("South Sarasota"),
  ("South Sioux City"),
  ("South Snyderville Basin"),
  ("South St"),
  ("South St. Paul"),
  ("South Sumter"),
  ("South Toms River"),
  ("South Tucson"),
  ("South Vacherie"),
  ("South Valley"),
  ("South Valley Stream"),
  ("South Venice"),
  ("South Weber"),
  ("South Whittier"),
  ("South Williamsport"),
  ("South Woodbridge"),
  ("South Yarmouth"),
  ("South Yuba City"),
  ("Southampton"),
  ("Southampton"),
  ("Southaven"),
  ("Southbridge"),
  ("Southchase"),
  ("Southeast Arcadia"),
  ("Southern Pines"),
  ("Southern Shops"),
  ("Southfield"),
  ("Southgate"),
  ("Southglenn"),
  ("Southington"),
  ("Southlake"),
  ("Southold"),
  ("Southport"),
  ("Southside"),
  ("Southwood Acres"),
  ("Spackenkill"),
  ("Spanaway"),
  ("Spanish Fork"),
  ("Spanish Fort"),
  ("Spanish Lake"),
  ("Spanish Springs"),
  ("Sparks"),
  ("Sparta"),
  ("Spartanburg"),
  ("Spearfish"),
  ("Spearman"),
  ("Speedway"),
  ("Spencer"),
  ("Spencerport"),
  ("Spindale"),
  ("Spirit Lake"),
  ("Spokane"),
  ("Spokane"),
  ("Spooner"),
  ("Spotswood borough"),
  ("Spotsylvania Courthouse"),
  ("Spring"),
  ("Spring City borough"),
  ("Spring Creek"),
  ("Spring Grove"),
  ("Spring Hill"),
  ("Spring House"),
  ("Spring Lake"),
  ("Spring Lake borough"),
  ("Spring Lake Heights"),
  ("Spring Lake Park"),
  ("Spring Valley"),
  ("Springboro"),
  ("Springdale"),
  ("Springdale borough"),
  ("Springetts Manor-Yorklyn"),
  ("Springfield"),
  ("Springhill"),
  ("Springs"),
  ("Springvale"),
  ("Springville"),
  ("Spry"),
  ("Spurgeon"),
  ("Squaw Valley"),
  ("Squaw Valley USA"),
  ("St. Albans"),
  ("St. Andrews"),
  ("St. Ann"),
  ("St. Anthony city."),
  ("St. Augustine city"),
  ("St. Augustine Shores"),
  ("St. Augustine South"),
  ("St. Bernard"),
  ("St. Charles"),
  ("St. Charles city"),
  ("St. Clair"),
  ("St. Clair borough"),
  ("St. Clair Shores"),
  ("St. Clairsville"),
  ("St. Cloud city"),
  ("St. Dennis"),
  ("St. Francis"),
  ("St. Gabriel"),
  ("St. George"),
  ("St. Helena city"),
  ("St. Helens"),
  ("St. Ignace"),
  ("St. James"),
  ("St. James City ."),
  ("St. John"),
  ("St. John"),
  ("St. Johns"),
  ("St. Johnsbury"),
  ("St. Joseph"),
  ("St. Joseph"),
  ("St. Louis"),
  ("St. Louis Park"),
  ("St. Maries city."),
  ("St. Martin  ."),
  ("St. Martinville city"),
  ("St. Marys"),
  ("St. Marys city"),
  ("St. Matthews city."),
  ("St. Michael"),
  ("St. Paul"),
  ("St. Paul Park"),
  ("St. Pete Beach city"),
  ("St. Peter"),
  ("St. Peters"),
  ("St. Petersburg city."),
  ("St. Robert"),
  ("St. Rose"),
  ("St. Simons"),
  ("St. Stephens"),
  ("Stafford"),
  ("Stallings"),
  ("Stamford"),
  ("Stanford"),
  ("Stanhope borough"),
  ("Stanley"),
  ("Stanton"),
  ("Stanwood"),
  ("Staples"),
  ("Starke"),
  ("Starkville"),
  ("State College borough"),
  ("Statesboro"),
  ("Statesville"),
  ("Staunton"),
  ("Stayton"),
  ("Ste. Genevieve"),
  ("Steamboat Springs"),
  ("Steelton borough"),
  ("Steger"),
  ("Steilacoom"),
  ("Stephentown"),
  ("Stephenville"),
  ("Sterling"),
  ("Sterling Heights"),
  ("Steubenville"),
  ("Stevens Point"),
  ("Stevensville"),
  ("Stewartville"),
  ("Stickney"),
  ("Stigler"),
  ("Stillwater"),
  ("Stilwell"),
  ("Stock Island"),
  ("Stockbridge"),
  ("Stockholm"),
  ("Stockton"),
  ("Stokesdale"),
  ("Stone Mountain"),
  ("Stone Park"),
  ("Stonegate"),
  ("Stoneham"),
  ("Stony Brook"),
  ("Stony Point"),
  ("Stonybrook-Wilshire"),
  ("Storm Lake"),
  ("Storrs"),
  ("Story City"),
  ("Stoughton"),
  ("Stow"),
  ("Stowe"),
  ("Stowe Township"),
  ("Strasburg"),
  ("Strasburg borough"),
  ("Stratford"),
  ("Stratford borough"),
  ("Strathmore"),
  ("Stratmoor"),
  ("Stratton Mountain"),
  ("Strawberry"),
  ("Streamwood"),
  ("Streator"),
  ("Streetsboro"),
  ("Strongsville"),
  ("Stroud"),
  ("Stroudsburg borough"),
  ("Struthers"),
  ("Stuart"),
  ("Stuarts Draft"),
  ("Sturgeon Bay"),
  ("Sturgis"),
  ("Sturtevant"),
  ("Stuttgart"),
  ("Succasunna-Kenvil"),
  ("Sudden Valley"),
  ("Sudley"),
  ("Suffern"),
  ("Suffolk"),
  ("Sugar Creek"),
  ("Sugar Grove"),
  ("Sugar Hill"),
  ("Sugar Land"),
  ("Sugarcreek borough"),
  ("Sugarmill Woods"),
  ("Suisun City"),
  ("Suitland-Silver Hill"),
  ("Sula"),
  ("Sullivan"),
  ("Sullivan City"),
  ("Sulphur"),
  ("Sulphur Springs"),
  ("Sultan"),
  ("Sumiton"),
  ("Summerfield"),
  ("Summerlin South"),
  ("Summerside"),
  ("Summersville"),
  ("Summerville"),
  ("Summit"),
  ("Summit Hill"),
  ("Summit Hill borough"),
  ("Summit Park"),
  ("Sumner"),
  ("Sumter"),
  ("Sumter"),
  ("Sun City"),
  ("Sun City West"),
  ("Sun Lakes"),
  ("Sun Prairie"),
  ("Sun Valley"),
  ("Sunbury"),
  ("Suncoast Estates"),
  ("Suncook"),
  ("Sunland Park"),
  ("Sunny Isles Beach"),
  ("Sunnyside"),
  ("Sunnyslope"),
  ("Sunnyvale"),
  ("Sunrise"),
  ("Sunrise Manor"),
  ("Sunset"),
  ("Sunset Hills"),
  ("Superior"),
  ("Suquamish"),
  ("Surfside"),
  ("Surfside Beach"),
  ("Surprise"),
  ("Susanville"),
  ("Sussex"),
  ("Sutherlin"),
  ("Sutter"),
  ("Suwanee"),
  ("Swainsboro"),
  ("Swampscott"),
  ("Swannanoa"),
  ("Swansea"),
  ("Swanton"),
  ("Swarthmore borough"),
  ("Swartz"),
  ("Swartz Creek"),
  ("Sweeny"),
  ("Sweet Home"),
  ("Sweetgrass"),
  ("Sweetwater"),
  ("Swissvale borough"),
  ("Swoyersville borough"),
  ("Sycamore"),
  ("Sykesville"),
  ("Sylacauga"),
  ("Sylvania"),
  ("Sylvester"),
  ("Syosset"),
  ("Syracuse"),
  ("Syracuse"),
  ("Tabor City"),
  ("Tacoma"),
  ("Taft"),
  ("Tafton"),
  ("Tahlequah"),
  ("Tahoe City"),
  ("Tahoka"),
  ("Takoma Park"),
  ("Talent"),
  ("Talladega"),
  ("Tallahassee"),
  ("Tallapoosa"),
  ("Tallassee"),
  ("Tallmadge"),
  ("Tallulah"),
  ("Tama"),
  ("Tamalpais-Homestead"),
  ("Tamaqua borough"),
  ("Tamarac"),
  ("Tamiami"),
  ("Tampa"),
  ("Tanaina"),
  ("Taney"),
  ("Tanglewilde-Thompson"),
  ("Tanner"),
  ("Tanque Verde"),
  ("Taos"),
  ("Tappan"),
  ("Tara Hills"),
  ("Tarboro"),
  ("Tarentum borough"),
  ("Tariffville"),
  ("Tarpon Springs"),
  ("Tarrant"),
  ("Tarry"),
  ("Taunton"),
  ("Tavares"),
  ("Taylor"),
  ("Taylor borough"),
  ("Taylor Creek"),
  ("Taylor Lake Village"),
  ("Taylor Mill"),
  ("Taylor Ridge"),
  ("Taylors"),
  ("Taylorsville"),
  ("Taylorville"),
  ("Tazewell"),
  ("Teague"),
  ("Teaneck"),
  ("Teays Valley"),
  ("Tecumseh"),
  ("Tega Cay"),
  ("Tehachapi"),
  ("Telford borough"),
  ("Tell City"),
  ("Telluride"),
  ("Temecula"),
  ("Tempe"),
  ("Temperance"),
  ("Temple"),
  ("Temple City"),
  ("Temple Hills"),
  ("Temple Terrace"),
  ("Templeton"),
  ("Tenafly borough"),
  ("Tequesta"),
  ("Tererro"),
  ("Terra Bella"),
  ("Terra Mar"),
  ("Terrace Heights"),
  ("Terre Haute"),
  ("Terre Haute"),
  ("Terrell"),
  ("Terrell Hills"),
  ("Terry"),
  ("Terryville"),
  ("Texarkana"),
  ("Texas City"),
  ("Thatcher"),
  ("The Colony"),
  ("The Crossings"),
  ("The Hammocks"),
  ("The Meadows"),
  ("The Pinery"),
  ("The Plains"),
  ("The Village"),
  ("The Village of Indian Hill"),
  ("The Villages"),
  ("The Woodlands"),
  ("Theodore"),
  ("Thermal"),
  ("Thermalito"),
  ("Thermopolis"),
  ("Thibodaux"),
  ("Thief River Falls"),
  ("Thiells"),
  ("Thiensville"),
  ("Thomaston"),
  ("Thomasville"),
  ("Thompsonville"),
  ("Thompsonville"),
  ("Thomson"),
  ("Thonotosassa"),
  ("Thorndale"),
  ("Thornton"),
  ("Thornwood"),
  ("Thousand Oaks"),
  ("Thousand Palms"),
  ("Three Lakes"),
  ("Three Points"),
  ("Three Rivers"),
  ("Throop borough"),
  ("Thurmont"),
  ("Tiburon"),
  ("Tice"),
  ("Tierra Buena"),
  ("Tierra Verde"),
  ("Tiffin"),
  ("Tifton"),
  ("Tigard"),
  ("Tillamook"),
  ("Tillmans Corner"),
  ("Tilton"),
  ("Tilton-Northfield"),
  ("Timber Pines"),
  ("Timberlake"),
  ("Timberlane"),
  ("Timberwood Park"),
  ("Tinicum Township"),
  ("Tinley Park"),
  ("Tinton Falls borough"),
  ("Tipp City"),
  ("Tipton"),
  ("Tishomingo"),
  ("Titusville"),
  ("Tiverton"),
  ("Toccoa"),
  ("Toledo"),
  ("Tolleson"),
  ("Tolono"),
  ("Tomah"),
  ("Tomah"),
  ("Tomahawk"),
  ("Tomball"),
  ("Tompkinsville"),
  ("Toms River"),
  ("Tonawanda"),
  ("Tonganoxie"),
  ("Tonkawa"),
  ("Tonopah"),
  ("Tooele"),
  ("Topeka"),
  ("Toppenish"),
  ("Topsfield"),
  ("Topsham"),
  ("Toronto"),
  ("Torrance"),
  ("Torrington"),
  ("Tortolita"),
  ("Totowa borough"),
  ("Towanda borough"),
  ("Town 'n' Country"),
  ("Town and Country"),
  ("Town Line"),
  ("Towson"),
  ("Tracy"),
  ("Tracyton"),
  ("Trafford borough"),
  ("Trappe borough"),
  ("Travelers Rest"),
  ("Traverse City"),
  ("Travilah"),
  ("Treasure Island"),
  ("Treasure Lake"),
  ("Tremonton"),
  ("Trenary"),
  ("Trent Woods"),
  ("Trenton"),
  ("Trentwood"),
  ("Triangle"),
  ("Tri-City"),
  ("Tri-Lakes"),
  ("Trinidad"),
  ("Trinity"),
  ("Trooper"),
  ("Trophy Club"),
  ("Trotwood"),
  ("Troutdale"),
  ("Troy"),
  ("Truckee"),
  ("Trumann"),
  ("Trumbull"),
  ("Trussville"),
  ("Truth or Consequences"),
  ("Tualatin"),
  ("Tuba City"),
  ("Tuckahoe"),
  ("Tucker"),
  ("Tuckerton borough"),
  ("Tucson"),
  ("Tucson"),
  ("Tucson Estates"),
  ("Tucumcari"),
  ("Tukwila"),
  ("Tulare"),
  ("Tulare"),
  ("Tularosa"),
  ("Tulia"),
  ("Tullahoma"),
  ("Tulsa"),
  ("Tulsa"),
  ("Tumwater"),
  ("Tupelo"),
  ("Tupper Lake"),
  ("Tupper Lake"),
  ("Turin"),
  ("Turley"),
  ("Turlock"),
  ("Turlock"),
  ("Turners Falls"),
  ("Turnersville"),
  ("Turpin Hills"),
  ("Turtle Creek borough"),
  ("Tuscaloosa"),
  ("Tuscaloosa"),
  ("Tuscola"),
  ("Tuscumbia"),
  ("Tuskegee"),
  ("Tustin"),
  ("Tustin Foothills"),
  ("Tuttle"),
  ("Twain Harte"),
  ("Twentynine Palms"),
  ("Twentynine Palms Base"),
  ("Twin Bridges"),
  ("Twin Falls"),
  ("Twin Lakes"),
  ("Twin Rivers"),
  ("Twinsburg"),
  ("Two Harbors"),
  ("Two Rivers"),
  ("Tybee Island"),
  ("Tyler"),
  ("Tyler Run-Queens Gate"),
  ("Tyndall AFB"),
  ("Tyrone"),
  ("Tyrone borough"),
  ("Tysons Corner"),
  ("Uhrichsville"),
  ("Ukiah"),
  ("Ukiah"),
  ("Ulysses"),
  ("Umatilla"),
  ("Unadilla"),
  ("Unalaska"),
  ("Underwood-Petersville"),
  ("Unicoi"),
  ("Union"),
  ("Union Beach borough"),
  ("Union City"),
  ("Union City borough"),
  ("Union Gap"),
  ("Union Grove"),
  ("Union Hill-Novelty Hill"),
  ("Union Park"),
  ("Union Springs"),
  ("Uniondale"),
  ("Unionville"),
  ("Universal City"),
  ("University"),
  ("University City"),
  ("University Gardens"),
  ("University Heights"),
  ("University Park"),
  ("University Place"),
  ("Upland"),
  ("Upland borough"),
  ("Upper Arlington"),
  ("Upper Grand Lagoon"),
  ("Upper Providence"),
  ("Upper Saddle River"),
  ("Upper Sandusky"),
  ("Upper St"),
  ("Upper St. Clair"),
  ("Urbana"),
  ("Urbandale"),
  ("Utica"),
  ("Uvalde"),
  ("Vacaville"),
  ("Vacaville"),
  ("Vadito"),
  ("Vadnais Heights"),
  ("Vado"),
  ("Vail"),
  ("Vail Mountain Resort"),
  ("Vails Gate"),
  ("Valdese"),
  ("Valdez"),
  ("Valdosta"),
  ("Valencia"),
  ("Valentine"),
  ("Valhalla"),
  ("Valinda"),
  ("Valle Vista"),
  ("Vallejo"),
  ("Valley"),
  ("Valley Center"),
  ("Valley City"),
  ("Valley Cottage"),
  ("Valley Falls"),
  ("Valley Green"),
  ("Valley Park"),
  ("Valley Springs"),
  ("Valley Station"),
  ("Valley Stream"),
  ("Valley View"),
  ("Valparaiso"),
  ("Valparaiso"),
  ("Valrico"),
  ("Valyermo"),
  ("Vamo"),
  ("Van Alstyne"),
  ("Van Buren"),
  ("Van Wert"),
  ("Vancleave"),
  ("Vancouver"),
  ("Vancouver"),
  ("Vandalia"),
  ("Vandenberg AFB"),
  ("Vandenberg Village"),
  ("Vandercook Lake"),
  ("Vandergrift borough"),
  ("Vashon"),
  ("Vassar"),
  ("Venersborg"),
  ("Veneta"),
  ("Venetian Village"),
  ("Venice"),
  ("Venice Gardens"),
  ("Ventnor City"),
  ("Veradale"),
  ("Verdi-Mogul"),
  ("Vergennes"),
  ("Vermilion"),
  ("Vermillion"),
  ("VERMONT"),
  ("Vernal"),
  ("Vernon"),
  ("Vernon Hills"),
  ("Vero Beach"),
  ("Vero Beach South"),
  ("Verona"),
  ("Verona borough"),
  ("Versailles"),
  ("Vestavia Hills"),
  ("Vicksburg"),
  ("Victoria"),
  ("Victorville"),
  ("Victorville"),
  ("Vidalia"),
  ("Vidor"),
  ("Vienna"),
  ("View Park-Windsor Hills"),
  ("Villa Grove"),
  ("Villa Hills"),
  ("Villa Park"),
  ("Villa Rica"),
  ("Village Green"),
  ("Village Green-Green"),
  ("Village Park"),
  ("Village Shires"),
  ("Village St"),
  ("Village St. George"),
  ("Villages of Oriole"),
  ("Villano Beach"),
  ("Villas"),
  ("Ville Platte"),
  ("Vincennes"),
  ("Vincent"),
  ("Vine Grove"),
  ("Vine Hill"),
  ("Vineland"),
  ("Vineland"),
  ("Vineyard"),
  ("Vinings"),
  ("Vinita"),
  ("Vinton"),
  ("Viola"),
  ("Violet"),
  ("Virden"),
  ("Virginia"),
  ("Virginia Beach"),
  ("Virginia Beach"),
  ("Viroqua"),
  ("Visalia"),
  ("Vista"),
  ("Vivian"),
  ("Voorheesville"),
  ("Wabash"),
  ("Wabasha"),
  ("Waco"),
  ("Waconia"),
  ("Wade Hampton"),
  ("Wadena"),
  ("Wadesboro"),
  ("Wading River"),
  ("Wadsworth"),
  ("Waggaman"),
  ("Wagoner"),
  ("Wahiawa"),
  ("Wahneta"),
  ("Wahoo"),
  ("Wahpeton"),
  ("Waialua"),
  ("Waianae"),
  ("Waihee-Waiehu"),
  ("Waikoloa Village"),
  ("Wailea-Makena"),
  ("Wailua Homesteads"),
  ("Wailuku"),
  ("Waimalu"),
  ("Waimanalo"),
  ("Waimanalo Beach"),
  ("Waimea"),
  ("Wainscott"),
  ("Waipahu"),
  ("Waipio"),
  ("Waipio Acres"),
  ("Waite Park"),
  ("Waitsfield"),
  ("Wake Forest"),
  ("Wake Village"),
  ("Wakefield"),
  ("Wakefield-Peacedale"),
  ("Walbridge"),
  ("Walden"),
  ("Waldon"),
  ("Waldorf"),
  ("Waldport"),
  ("Waldron"),
  ("Waldwick borough"),
  ("Wales"),
  ("Walhalla"),
  ("Walker"),
  ("Walker Mill"),
  ("Walkersville"),
  ("Walla Walla"),
  ("Wallace"),
  ("Walled Lake"),
  ("Waller"),
  ("Wallingford Center"),
  ("Wallington borough"),
  ("Walnut"),
  ("Walnut Creek"),
  ("Walnut Grove"),
  ("Walnut Hill"),
  ("Walnut Park"),
  ("Walnut Ridge"),
  ("Walpole"),
  ("Walsenburg"),
  ("Walterboro"),
  ("Walters"),
  ("Waltham"),
  ("Walthourville"),
  ("Walton"),
  ("Wamego"),
  ("Wanamassa"),
  ("Wanaque borough"),
  ("Wantagh"),
  ("Wapakoneta"),
  ("Wapato"),
  ("Wappingers Falls"),
  ("Ward"),
  ("Warden"),
  ("Ware"),
  ("Wareham Center"),
  ("Warm Mineral Springs"),
  ("Warminster Heights"),
  ("Warner Robins"),
  ("Warr Acres"),
  ("Warren"),
  ("Warren AFB"),
  ("Warrensburg"),
  ("Warrensville Heights"),
  ("Warrenton"),
  ("Warrenville"),
  ("Warrington"),
  ("Warrior"),
  ("Warsaw"),
  ("Warwick"),
  ("Wasco"),
  ("Waseca"),
  ("Washington"),
  ("WASHINGTON"),
  ("Washington"),
  ("Washington borough"),
  ("Washington Park"),
  ("Washington Terrace"),
  ("Washington Township"),
  ("Washingtonville"),
  ("Washougal"),
  ("Wasilla"),
  ("Watauga"),
  ("Watchung borough"),
  ("Water"),
  ("Water Mill"),
  ("Water Valley"),
  ("Waterbury"),
  ("Waterford"),
  ("Waterford North"),
  ("Waterloo"),
  ("Watertown"),
  ("Waterville"),
  ("Waterville Valley"),
  ("Watervliet"),
  ("Watonga"),
  ("Watseka"),
  ("Watsonville"),
  ("Wauchula"),
  ("Wauconda"),
  ("Waukee"),
  ("Waukegan"),
  ("Waukesha"),
  ("Waukon"),
  ("Waunakee"),
  ("Waupaca"),
  ("Waupun"),
  ("Wausau"),
  ("Wauseon"),
  ("Wautoma"),
  ("Wauwatosa"),
  ("Waveland"),
  ("Waverly"),
  ("Waverly City"),
  ("Waxahachie"),
  ("Waxhaw"),
  ("Waycross"),
  ("Wayland"),
  ("Wayne"),
  ("Waynesboro"),
  ("Waynesboro borough"),
  ("Waynesburg borough"),
  ("Waynesville"),
  ("Wayzata"),
  ("Weatherford"),
  ("Weatherly borough"),
  ("Weatogue"),
  ("Weaver"),
  ("Weaverville"),
  ("Webb City"),
  ("Webster"),
  ("Webster City"),
  ("Webster Groves"),
  ("Weddington"),
  ("Wedgefield"),
  ("Weed"),
  ("Weedpatch"),
  ("Weigels"),
  ("Weirton"),
  ("Weiser"),
  ("Wekiwa Springs"),
  ("Welby"),
  ("Welch"),
  ("Welcome"),
  ("Weldon Spring"),
  ("Wellesley"),
  ("Wellington"),
  ("Wells Branch"),
  ("Wellsboro borough"),
  ("Wellsburg"),
  ("Wellston"),
  ("Wellsville"),
  ("Welsh"),
  ("Wenatchee"),
  ("Wenatchee"),
  ("Wendell"),
  ("Wentworth"),
  ("Wentzville"),
  ("Weslaco"),
  ("Wesley Chapel"),
  ("Wesley Chapel South"),
  ("Wesley Hills"),
  ("Wesleyville borough"),
  ("West"),
  ("West Allis"),
  ("West and East Lealman"),
  ("West Athens"),
  ("West Babylon"),
  ("West Bay Shore"),
  ("West Belmar"),
  ("West Bend"),
  ("West Bishop"),
  ("West Bloomfield Township"),
  ("West Bountiful"),
  ("West Bradenton"),
  ("West Brattleboro"),
  ("West Burlington"),
  ("West Caldwell"),
  ("West Carrollton City"),
  ("West Carson"),
  ("West Chester borough"),
  ("West Chicago"),
  ("West Clarkston-Highland"),
  ("West Columbia"),
  ("West Compton"),
  ("West Concord"),
  ("West Covina"),
  ("West De Land"),
  ("West Dennis"),
  ("West Des Moines"),
  ("West Dover"),
  ("West Dundee"),
  ("West Elmira"),
  ("West End-Cobb Town"),
  ("West Fargo"),
  ("West Frankfort"),
  ("West Freehold"),
  ("West Gate"),
  ("West Glens Falls"),
  ("West Goshen"),
  ("West Grove borough"),
  ("West Hartford"),
  ("West Hattiesburg"),
  ("West Haven"),
  ("West Haven-Sylvan"),
  ("West Haverstraw"),
  ("West Hazleton borough"),
  ("West Helena"),
  ("West Hempstead"),
  ("West Hill"),
  ("West Hills"),
  ("West Hollywood"),
  ("West Ishpeming"),
  ("West Islip"),
  ("West Jefferson"),
  ("West Jordan"),
  ("West Ken-Lark"),
  ("West Lafayette"),
  ("West Lake Hills"),
  ("West Lake Sammamish"),
  ("West Lake Stevens"),
  ("West Laurel"),
  ("West Liberty"),
  ("West Linn"),
  ("West Little River"),
  ("West Livingston"),
  ("West Long Branch"),
  ("West Longview"),
  ("West Melbourne"),
  ("West Memphis"),
  ("West Menlo Park"),
  ("West Miami"),
  ("West Mifflin borough"),
  ("West Milford"),
  ("West Milton"),
  ("West Milwaukee"),
  ("West Modesto"),
  ("West Monroe"),
  ("West New York"),
  ("West Newton borough"),
  ("West Norriton"),
  ("West Nyack"),
  ("West Ocean City"),
  ("West Odessa"),
  ("West Orange"),
  ("West Palm Beach"),
  ("West Palm Beach"),
  ("West Pasco"),
  ("West Paterson borough"),
  ("West Pensacola"),
  ("West Peoria"),
  ("West Perrine"),
  ("West Pittston borough"),
  ("West Plains"),
  ("West Pleasant View"),
  ("West Point"),
  ("West Portsmouth"),
  ("West Puente Valley"),
  ("West Reading borough"),
  ("West Richland"),
  ("West Sacramento"),
  ("West Salem"),
  ("West Samoset"),
  ("West Sayville"),
  ("West Seneca"),
  ("West Sharyland"),
  ("West Side Highway"),
  ("West Slope"),
  ("West Springfield"),
  ("West St"),
  ("West St. Paul"),
  ("West Union"),
  ("West University Place"),
  ("West Valley"),
  ("West Valley City"),
  ("West Vero Corridor"),
  ("West View borough"),
  ("WEST VIRGINIA"),
  ("West Warwick"),
  ("West Wendover"),
  ("West Whittier-Los Nietos"),
  ("West Wyoming borough"),
  ("West Wyomissing"),
  ("West Yarmouth"),
  ("West York borough"),
  ("Westborough"),
  ("Westbrook"),
  ("Westbury"),
  ("Westchase"),
  ("Westchester"),
  ("Westerly"),
  ("Western Springs"),
  ("Westernville"),
  ("Westerville"),
  ("Westfield"),
  ("Westgate-Belvedere"),
  ("Westhampton"),
  ("Westhampton Beach"),
  ("Westlake"),
  ("Westlake Village"),
  ("Westland"),
  ("Westmere"),
  ("Westminster"),
  ("Westminster"),
  ("Westmont"),
  ("Westmont borough"),
  ("Weston"),
  ("Westover"),
  ("Westport"),
  ("Westvale"),
  ("Westview"),
  ("Westville"),
  ("Westville borough"),
  ("Westway"),
  ("Westwego"),
  ("Westwood"),
  ("Westwood borough"),
  ("Westwood Lakes"),
  ("Wethersfield"),
  ("Wetumpka"),
  ("Wewoka"),
  ("Weymouth"),
  ("Wharton"),
  ("Wharton borough"),
  ("Wheat Ridge"),
  ("Wheatland"),
  ("Wheatley Heights"),
  ("Wheaton"),
  ("Wheaton-Glenmont"),
  ("Wheeler AFB"),
  ("Wheelersburg"),
  ("Wheeling"),
  ("Whiskey Creek"),
  ("Whisper Walk"),
  ("White Bear Lake"),
  ("White Center"),
  ("White City"),
  ("White Hall"),
  ("White Haven"),
  ("White Horse"),
  ("White House"),
  ("White Lake"),
  ("White Marsh"),
  ("White Meadow Lake"),
  ("White Oak"),
  ("White Oak borough"),
  ("White Oak East"),
  ("White Oak West"),
  ("White Pine"),
  ("White Plains"),
  ("White River Junction"),
  ("White Rock"),
  ("White Settlement"),
  ("White Swan"),
  ("Whitefish"),
  ("Whitefish"),
  ("Whitefish Bay"),
  ("Whitehall"),
  ("Whitehall borough"),
  ("Whitehouse"),
  ("Whiteland"),
  ("Whiteman AFB"),
  ("Whitemarsh Island"),
  ("Whiteriver"),
  ("Whitesboro"),
  ("Whiteville"),
  ("Whitewater"),
  ("Whitfield"),
  ("Whiting"),
  ("Whitinsville"),
  ("Whitmore Lake"),
  ("Whitmore Village"),
  ("Whitney"),
  ("Whittier"),
  ("Wichita"),
  ("Wichita"),
  ("Wichita Falls"),
  ("Wickenburg"),
  ("Wickliffe"),
  ("Wiggins"),
  ("Wilbraham"),
  ("Wilburton"),
  ("Wilder"),
  ("Wildomar"),
  ("Wildwood"),
  ("Wildwood Crest borough"),
  ("Wildwood Lake"),
  ("Wilkes-Barre"),
  ("Wilkes-Barre"),
  ("Wilkes-Barre Township"),
  ("Wilkesboro"),
  ("Wilkins Township"),
  ("Wilkinsburg borough"),
  ("Wilkinson Heights"),
  ("Willard"),
  ("Willcox"),
  ("Williamsburg"),
  ("Williamson"),
  ("Williamsport"),
  ("Williamston"),
  ("Williamsville"),
  ("Willimantic"),
  ("Willis"),
  ("Williston"),
  ("Williston Park"),
  ("Willits"),
  ("Willmar"),
  ("Willoughby"),
  ("Willoughby Hills"),
  ("Willow Grove"),
  ("Willow Oak"),
  ("Willow Park"),
  ("Willow Springs"),
  ("Willow Street"),
  ("Willowbrook"),
  ("Willowick"),
  ("Willows"),
  ("Wills Point"),
  ("Wilmer"),
  ("Wilmette"),
  ("Wilmington"),
  ("Wilmington Island"),
  ("Wilmington Manor"),
  ("Wilmore"),
  ("Wilson"),
  ("Wilson borough"),
  ("Wilsonville"),
  ("Wilton"),
  ("Wilton Manors"),
  ("Wimauma"),
  ("Wimberley"),
  ("Winchendon"),
  ("Winchester"),
  ("Wind Gap borough"),
  ("Wind Lake"),
  ("Windber borough"),
  ("Windcrest"),
  ("Windemere"),
  ("Winder"),
  ("Windham"),
  ("Windom"),
  ("Window Rock"),
  ("Windsor"),
  ("Windsor Heights"),
  ("Windsor Locks"),
  ("Winfield"),
  ("Winnebago"),
  ("Winnemucca"),
  ("Winner"),
  ("Winnetka"),
  ("Winnfield"),
  ("Winnie"),
  ("Winnsboro"),
  ("Winona"),
  ("Winona Lake"),
  ("Winooski"),
  ("Winslow"),
  ("Winsted"),
  ("Winston"),
  ("Winston-Salem"),
  ("Winter Garden"),
  ("Winter Gardens"),
  ("Winter Haven"),
  ("Winter Park"),
  ("Winter Springs"),
  ("Winters"),
  ("Winterset"),
  ("Wintersville"),
  ("Winterville"),
  ("Winthrop"),
  ("Winthrop Harbor"),
  ("Winton"),
  ("Wisconsin Dells"),
  ("Wisconsin Rapids"),
  ("Wise"),
  ("Withamsville"),
  ("Wixom"),
  ("Woburn"),
  ("Wolf Lake"),
  ("Wolf Point"),
  ("Wolf Trap"),
  ("Wolfdale"),
  ("Wolfeboro"),
  ("Wolfforth"),
  ("Wolverine Lake"),
  ("Womelsdorf borough"),
  ("Wonder Lake"),
  ("Wood Dale"),
  ("Wood River"),
  ("Wood Village"),
  ("Woodbine borough"),
  ("Woodbourne"),
  ("Woodbourne-Hyde Park"),
  ("Woodbridge"),
  ("Woodburn"),
  ("Woodbury"),
  ("Woodbury Heights"),
  ("Woodcliff Lake borough"),
  ("Woodcrest"),
  ("Woodfield"),
  ("Woodfin"),
  ("Woodhaven"),
  ("Woodinville"),
  ("Woodlake"),
  ("Woodland"),
  ("Woodland Park"),
  ("Woodlawn"),
  ("Woodlawn-Oakdale"),
  ("Woodlyn"),
  ("Woodlynne borough"),
  ("Woodmere"),
  ("Woodmoor"),
  ("Woodmore"),
  ("Woodridge"),
  ("Wood-Ridge borough"),
  ("Woodruff"),
  ("Woods borough"),
  ("Woods Creek"),
  ("Woods Cross"),
  ("Woodsfield"),
  ("Woodside"),
  ("Woodson Terrace"),
  ("Woodstock"),
  ("Woodville"),
  ("Woodward"),
  ("Woodway"),
  ("Woonsocket"),
  ("Wooster"),
  ("Worcester"),
  ("Worland"),
  ("Wormleysburg borough"),
  ("Worth"),
  ("Worthington"),
  ("Wothington"),
  ("Woxall"),
  ("Wright"),
  ("Wright-Patterson AFB"),
  ("Wrightsboro"),
  ("Wrightsville Beach"),
  ("Wrightwood"),
  ("Wyandanch"),
  ("Wyandotte"),
  ("Wyckoff"),
  ("Wylie"),
  ("Wynantskill"),
  ("Wyncote"),
  ("Wyndham"),
  ("Wyndmoor"),
  ("Wynne"),
  ("Wyoming"),
  ("Wyoming borough"),
  ("Wyomissing borough"),
  ("Wyomissing Hills borough"),
  ("Wytheville"),
  ("Xenia"),
  ("Yachats"),
  ("Yadkinville"),
  ("Yakima"),
  ("Yankton"),
  ("Yaphank"),
  ("Yardville-Groveville"),
  ("Yarmouth"),
  ("Yarmouth Port"),
  ("Yazoo City"),
  ("Yeadon borough"),
  ("Yeehaw Junction"),
  ("Yellow Springs"),
  ("Yelm"),
  ("Yerington"),
  ("Yoakum"),
  ("Yonkers"),
  ("Yorba Linda"),
  ("York"),
  ("York Harbor"),
  ("York Heights"),
  ("Yorke"),
  ("Yorkshire"),
  ("Yorkville"),
  ("Yosemite Lakes"),
  ("Young"),
  ("Youngs"),
  ("Youngstown"),
  ("Youngsville"),
  ("Youngwood borough"),
  ("Yountville"),
  ("Ypsilanti"),
  ("Yreka"),
  ("Yuba City"),
  ("Yucaipa"),
  ("Yucca Valley"),
  ("Yukon"),
  ("Yulee"),
  ("Yuma"),
  ("Zachary"),
  ("Zanesville"),
  ("Zapata"),
  ("Zebulon"),
  ("Zeeland"),
  ("Zelienople borough"),
  ("Zellwood"),
  ("Zephyrhills"),
  ("Zephyrhills North"),
  ("Zephyrhills South"),
  ("Zephyrhills West"),
  ("Zimmerman"),
  ("Zion"),
  ("Zionsville"),
  ("Zumbrota"),
  ("Zuni Pueblo")
);
CreateDict(
    "name" => "city.dict",
    "table" => "city.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'comics/misc_comics_keywords_en_short.dict'
CreateTable(
  "comics/misc_comics_keywords_en_short.dict__TABLE",
  ("entry" => "Text"),
  ("Watchmen"),
  ("V for Vendetta"),
  ("The League of Extraordinary Gentlemen"),
  ("Sandman"),
  ("Superman"),
  ("Batman"),
  ("Kingdom Come"),
  ("Identity Crisis"),
  ("Justice League of America"),
  ("Green Lantern"),
  ("Crisis on Infinite Earths"),
  ("Transmetropolitan"),
  ("Pride of Baghdad"),
  ("Hellblazer"),
  ("Y: The Last Man"),
  ("Ex Machina"),
  ("Action Comics"),
  ("Amazing Fantasy"),
  ("Spiderman"),
  ("Spider-Man"),
  ("Superboy"),
  ("The Incredible Hulk"),
  ("Eightball"),
  ("Sin City"),
  ("Dark Horse Presents"),
  ("Marvel Zombies"),
  ("The Sinestro Corps War"),
  ("The Coyote Gospel"),
  ("Green Arrow"),
  ("Justice Society of America"),
  ("Swamp Thing"),
  ("Arkhum Asylum"),
  ("Snowbirds don't fly"),
  ("The man of steel"),
  ("The killing joke"),
  ("Teen Titans"),
  ("Kingdom Come"),
  ("Jimmy Corrigan, the smartest kid on earth"),
  ("American Elf"),
  ("Box Office Poison"),
  ("Daredevil"),
  ("DC the new frontier"),
  ("Eightball"),
  ("The Golem's mighty swing"),
  ("Promethea"),
  ("Persepolis"),
  ("The complete peanuts"),
  ("The EC archives"),
  ("XO Manowar"),
  ("X-O Manowar"),
  ("Eternal warrior"),
  ("Bloodshot"),
  ("Miracleman"),
  ("Supergirl"),
  ("The X-files"),
  ("Way of the rat"),
  ("Wildcats"),
  ("Sigil"),
  ("X-men"),
  ("Xmen"),
  ("Battle Angle Alita"),
  ("Transmetropolitan"),
  ("Doctor Solar"),
  ("Magnus Robot fighter"),
  ("Elektra"),
  ("Doom Patrol"),
  ("American Flagg"),
  ("Strangers in paradise"),
  ("Tomb of Dracula"),
  ("Dan Dare"),
  ("Fantastic Four"),
  ("Earth X"),
  ("The Infinity Gauntlet"),
  ("Spider-girl"),
  ("Marvel Super Heroes"),
  ("Hellraiser"),
  ("Moonshadow"),
  ("Stray Toasters"),
  ("Ronin"),
  ("Cerebus"),
  ("Flaming Carrot"),
  ("A contract with God"),
  ("Grendel"),
  ("Detective Comics"),
  ("Secret Avengers"),
  ("Avengers"),
  ("John Carter of Mars"),
  ("Dejah Thoris"),
  ("The walking dead"),
  ("Ultimate comics"),
  ("Punisher Max"),
  ("Jonah Hex"),
  ("Northlanders"),
  ("The sixth gun"),
  ("Atomic Robo"),
  ("American Vampire"),
  ("Master of disguise"),
  ("Tales from the crypt"),
  ("Wonder woman"),
  ("Batwoman"),
  ("Action Comics"),
  ("Dreadstar"),
  ("Sandman"),
  ("Captain America"),
  ("Hellboy"),
  ("Sin City"),
  ("Lone Wolf and Cub"),
  ("Understanding Comics"),
  ("John Carter"),
  ("John Carter of Mars"),
  ("Dejah Thoris"),
  ("Avengers"),
  ("Peter Parker"),
  ("Black Cat"),
  ("Black Knight"),
  ("Black Widow"),
  ("Captain America"),
  ("Captain Atlas"),
  ("Captain Britain"),
  ("Captain France"),
  ("Captain Italy"),
  ("Captain Spain"),
  ("Captain Mahr Vehl"),
  ("Diablo"),
  ("Doctor Octopus"),
  ("Doctor Strange"),
  ("Dreadknight"),
  ("Dreamcatcher"),
  ("Elektra"),
  ("Ghost Rider"),
  ("Gladiator"),
  ("Glenn Talbot"),
  ("Green Goblin"),
  ("The Incredible Hulk"),
  ("Hulk"),
  ("Iceman"),
  ("Ironman"),
  ("Iron man"),
  ("Magneto"),
  ("Mary Jane Watson"),
  ("Melissa Beckerman"),
  ("Mephisto"),
  ("Miles Morales"),
  ("Mister Fantastic"),
  ("Medussa"),
  ("Nighthawk"),
  ("Ronin"),
  ("Sandman"),
  ("Thor"),
  ("Unicorn"),
  ("Valkyrie"),
  ("Wolverine"),
  ("The Challenger"),
  ("Hercules"),
  ("Scimitar"),
  ("Vulcan"),
  ("Ape-Man"),
  ("Apeman"),
  ("Aragorn"),
  ("Archangel"),
  ("The Avengers"),
  ("Banshee"),
  ("Basilisk"),
  ("Cyclops"),
  ("Daredevil"),
  ("Darkhawk"),
  ("Spider-Man"),
  ("Spider man"),
  ("Spiderman"),
  ("Green Goblin"),
  ("Hydro-Man"),
  ("Tony Stark"),
  ("Thor"),
  ("Thoris"),
  ("Transformers"),
  ("Werewolf"),
  ("The X-Men"),
  ("X-men"),
  ("Demolition Man"),
  ("Quasar"),
  ("Stingray"),
  ("Superman"),
  ("Batman"),
  ("Green Lantern"),
  ("Wonder Woman"),
  ("Aquaman"),
  ("Green Arrow"),
  ("Hawkman"),
  ("Captain Marvel"),
  ("Supergirl"),
  ("Aquagirl"),
  ("Batgirl"),
  ("Beowulf"),
  ("Catwoman"),
  ("Hitman"),
  ("Reflecto"),
  ("Robin"),
  ("Robotman"),
  ("Hellboy"),
  ("Stanley Ipkiss"),
  ("Grendel"),
  ("Conan the Barbarian"),
  ("Xena"),
  ("Indiana Jones"),
  ("Roark Jr."),
  ("Odin"),
  ("The Joker"),
  ("Transformers"),
  ("Scott Pilgrim"),
  ("Spawn"),
  ("Captain Haddock"),
  ("Harvey Pekar"),
  ("The Midnighter"),
  ("Midnighter"),
  ("J Jonah Jameson"),
  ("J. Jonah Jameson"),
  ("Deadpool"),
  ("Astro boy"),
  ("Astroboy"),
  ("Saint of Killers"),
  ("The Mekon"),
  ("Cerebus"),
  ("Daredevil"),
  ("Agent Graves"),
  ("Dr. Strange"),
  ("Doctor Strange"),
  ("Lex Luthor"),
  ("Emma Frost"),
  ("The White Queen"),
  ("Swamp Thing"),
  ("Johnny Alpha"),
  ("Dr. Doom"),
  ("Doctor Doom"),
  ("Deena Pilgrim"),
  ("Asterix and Obelix"),
  ("Asterix"),
  ("Obelix"),
  ("Calvin and Hobbes"),
  ("Hunter Rose"),
  ("Wonder Woman"),
  ("The Punisher"),
  ("Halo Jones"),
  ("Rorschach"),
  ("Vladek Spiegelman"),
  ("Spider Jerusalem"),
  ("Jesse Custer"),
  ("Judge Dredd"),
  ("John Constantine"),
  ("Dr. Manhattan"),
  ("Nite Owl"),
  ("Ozymandias"),
  ("Silk Spectre"),
  ("Cyclops"),
  ("Red Robin"),
  ("Hawkeye"),
  ("Green Arrow"),
  ("Batgirl"),
  ("Nightcrawler"),
  ("Booster Gold"),
  ("Iron Fist"),
  ("Conan the Barbarian"),
  ("The Submariner"),
  ("Namor"),
  ("Kingpin"),
  ("Galactus"),
  ("Thanos"),
  ("Scarlet Witch"),
  ("Hopey & Maggie"),
  ("Human Torch"),
  ("Black Nick Fury"),
  ("Lois Lane"),
  ("Deathstroke"),
  ("Black Canary"),
  ("Black Panther"),
  ("Red skull"),
  ("Herr Starr"),
  ("Bucky Barnes"),
  ("Darkseid"),
  ("Cobra Commander"),
  ("Professor X"),
  ("Nightwing"),
  ("Silver Surfer"),
  ("Hal Jordan"),
  ("Mr. Fantastic"),
  ("Luke Cage"),
  ("Fone Bone"),
  ("Miracleman"),
  ("Morpheus"),
  ("Snake Eyes"),
  ("Kitty Pryde"),
  ("Lex Luther"),
  ("Sentry"),
  ("Silverclaw"),
  ("Swordsman"),
  ("Mantis"),
  ("Hellcat"),
  ("Doctor Druid"),
  ("Dr. Druid"),
  ("Tigra"),
  ("Falcon"),
  ("Moondragon"),
  ("Starfox"),
  ("Comics"),
  ("215 Ink"),
  ("Aardvark-Vanaheim"),
  ("About Comics"),
  ("AC Comics"),
  ("Approbation Comics"),
  ("Adhouse Books"),
  ("After Hours Press"),
  ("AiT/Planet Lar"),
  ("Alias Enterprises"),
  ("Cross Culture"),
  ("Alterna Comics"),
  ("Ankama Editions"),
  ("Angry Viking Press"),
  ("Antarctic Press"),
  ("Ape Entertainment"),
  ("Arcana Studio"),
  ("Arch Enemy Entertainment"),
  ("Archaia Studios Press"),
  ("Archie Comics"),
  ("Aspen MLT"),
  ("Atomic Book Company"),
  ("Avatar Press"),
  ("Azteca Productions"),
  ("Big Bang Comics"),
  ("Beta 3 Comics"),
  ("Black Snow Comics"),
  ("Bluewater Productions"),
  ("Boneyard Press"),
  ("Bongo Comics"),
  ("Boom! Studios"),
  ("Brain Scan Studios"),
  ("BroadSword Comics"),
  ("Cartoon Books"),
  ("Calvary Comics"),
  ("Casterman"),
  ("Checker Book Publishing Group"),
  ("Devil's Due Digital"),
  ("Cinebook"),
  ("Class Comics"),
  ("Classical Comics"),
  ("DAPshow Press"),
  ("Dare Comics"),
  ("Dargaud"),
  ("Dargaud USA"),
  ("Dark Horse Comics"),
  ("Comics Greatest World"),
  ("Dark Horse Manga"),
  ("DC Comics"),
  ("All-American Publications"),
  ("All Star DC Comics"),
  ("DC: Earth One"),
  ("Johnny DC"),
  ("Paradox Press"),
  ("Vertigo Comics"),
  ("Wildstorm"),
  ("America's Best Comics"),
  ("Wildstorm Universe"),
  ("Cliffhanger"),
  ("Milestone Media"),
  ("D. C. Thomson & Co. Ltd"),
  ("Delcourt"),
  ("Devil's Due Publishing"),
  ("Devil's Due Digital"),
  ("Dynamite Entertainment"),
  ("Drawn and Quarterly"),
  ("DrMaster"),
  ("Dupuis"),
  ("Dynamite Entertainment"),
  ("DWAP Productions"),
  ("E.F.edizioni"),
  ("Eros Comix Italia"),
  ("eigoMANGA"),
  ("Evil Ink Comics"),
  ("Evil Twin Comics"),
  ("Fan-Atic Press"),
  ("Fantagraphics Books"),
  ("Eros Comix"),
  ("Fluid Friction Comics"),
  ("Full Bleed Studios"),
  ("Gemstone Publishing"),
  ("Gestalt Publishing"),
  ("Gimmicksmile Press"),
  ("Grim Crew Comics"),
  ("Tummelvision Press"),
  ("Heritage Comics HSQ"),
  ("Hero Comics"),
  ("Hero Graphics"),
  ("Heroic Publishing"),
  ("Humanoids Publishing"),
  ("IDW Publishing"),
  ("Image Comics"),
  ("ShadowLine"),
  ("Silverline"),
  ("Todd McFarlane Productions"),
  ("Top Cow Productions"),
  ("Wildstorm"),
  ("Affiliated Publishers"),
  ("Beckett Comics"),
  ("Desperado Publishing"),
  ("Devil's Due Publishing"),
  ("Dreamwave Productions"),
  ("Imagination Comics"),
  ("Imperium Comics"),
  ("InterVerse Comics"),
  ("Last Gasp Comix & Stories"),
  ("Le Lombard"),
  ("Les Humano�des Associ�s"),
  ("Liquid Comics"),
  ("Lonely Robot Comics"),
  ("Ludovico Technique LLC"),
  ("Mam Tor Publishing"),
  ("Manuscript Press"),
  ("Markosia"),
  ("Marvel Comics"),
  ("Icon Comics"),
  ("Marvel Age"),
  ("Soleil Productions"),
  ("Ultimate Marvel"),
  ("Mini-Komix"),
  ("Mirage Comics"),
  ("Moonstone Books"),
  ("NBM Publishing"),
  ("Neko Press"),
  ("New Baby Productions"),
  ("New England Comics"),
  ("Nifty Comics"),
  ("Oni Press"),
  ("Paper Crane Factory"),
  ("Penny-Farthing Press"),
  ("Prism Comics"),
  ("Raj Comics"),
  ("Radical Comics"),
  ("Radio Comix"),
  ("Reasonably Priced Comics"),
  ("Red 5 Comics"),
  ("Rip Off Press"),
  ("Robot Comics"),
  ("Sequential Pulp Comics"),
  ("Seven Seas Entertainment"),
  ("Shanda Fantasy Arts"),
  ("Slave Labor Graphics"),
  ("Smoking Monkey Comics"),
  ("Terminal Press"),
  ("Teshkeel Comics"),
  ("Timeless Journey Comics"),
  ("THENEXTART"),
  ("Titan Books"),
  ("Top Shelf Comics"),
  ("Valiant Comics"),
  ("Viper Comics"),
  ("VIZ Media"),
  ("Shonen Jump"),
  ("WaRP Graphics"),
  ("Yaoi Press"),
  ("Zenescope Entertainment"),
  ("Zeta Comics")
);
CreateDict(
    "name" => "comics/misc_comics_keywords_en_short.dict",
    "table" => "comics/misc_comics_keywords_en_short.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'comics/misc_relevance_comics_negClue_en.dict'
CreateTable(
  "comics/misc_relevance_comics_negClue_en.dict__TABLE",
  ("entry" => "Text"),
  ("music"),
  ("album"),
  ("video"),
  ("videos"),
  ("albums"),
  ("now playing"),
  ("playing"),
  ("chart"),
  ("charts"),
  ("birds"),
  ("bird"),
  ("animals"),
  ("honey"),
  ("cutie"),
  ("baby"),
  ("babe"),
  ("marry"),
  ("Live stream"),
  ("NFL"),
  ("Company"),
  ("Inc."),
  ("song"),
  ("songs"),
  ("chicks"),
  ("chick"),
  ("son"),
  ("sons"),
  ("daughter"),
  ("daughters"),
  ("lightning"),
  ("rain"),
  ("scared"),
  ("scare"),
  ("Asus"),
  ("Van Persie"),
  ("soccer"),
  ("spiders"),
  ("arachnid"),
  ("Black Widow spider"),
  ("Robin Hood"),
  ("thread"),
  ("threads"),
  ("bloodshot eyes"),
  ("Rome"),
  ("Russell Crowe"),
  ("snowing"),
  ("poison"),
  ("snakes"),
  ("snake"),
  ("preying mantis"),
  ("grasshopper"),
  ("insect"),
  ("insects"),
  ("egg"),
  ("eggs"),
  ("computer"),
  ("band"),
  ("bands"),
  ("girls"),
  ("boys"),
  ("cricket"),
  ("hockey"),
  ("tennis"),
  ("thanks"),
  ("you're welcome"),
  ("ur welcum"),
  ("ur welcome"),
  ("lizard"),
  ("heaven"),
  ("earth"),
  ("robin hood")
);
CreateDict(
    "name" => "comics/misc_relevance_comics_negClue_en.dict",
    "table" => "comics/misc_relevance_comics_negClue_en.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'fathersDayWishes.dict'
CreateTable(
  "fathersDayWishes.dict__TABLE",
  ("entry" => "Text"),
  ("Happyfathersday"),
  ("we are the best dads"),
  ("we are the best fathers"),
  ("happy father"),
  ("happy fathers"),
  ("happy daddy"),
  ("happy daddys"),
  ("happy dad"),
  ("happy dads"),
  ("happy daddie"),
  ("happy daddies"),
  ("happy first"),
  ("happy second"),
  ("happy third"),
  ("happy fourth"),
  ("happy fifth"),
  ("happy sixth"),
  ("happy seventh"),
  ("happy eighth"),
  ("happy ninth"),
  ("happy tenth"),
  ("Hpyfathersday"),
  ("hpy father"),
  ("hpy fathers"),
  ("hpy daddy"),
  ("hpy daddys"),
  ("hpy dad"),
  ("hpy dads"),
  ("hpy daddie"),
  ("hpy daddies"),
  ("hpy first"),
  ("hpy second"),
  ("hpy third"),
  ("hpy fourth"),
  ("hpy fifth"),
  ("hpy sixth"),
  ("hpy seventh"),
  ("hpy eighth"),
  ("hpy ninth"),
  ("hpy tenth"),
  ("HAPPIfathersday"),
  ("happi father"),
  ("happi fathers"),
  ("happi daddy"),
  ("happi daddys"),
  ("happi dad"),
  ("happi dads"),
  ("happi daddie"),
  ("happi daddies"),
  ("happi first"),
  ("happi second"),
  ("happi third"),
  ("happi fourth"),
  ("happi fifth"),
  ("happi sixth"),
  ("happi seventh"),
  ("happi eighth"),
  ("happi ninth"),
  ("happi tenth"),
  ("HAPIfathersday"),
  ("hapi father"),
  ("hapi fathers"),
  ("hapi daddy"),
  ("hapi daddys"),
  ("hapi dad"),
  ("hapi dads"),
  ("hapi daddie"),
  ("hapi daddies"),
  ("hapi first"),
  ("hapi second"),
  ("hapi third"),
  ("hapi fourth"),
  ("hapi fifth"),
  ("hapi sixth"),
  ("hapi seventh"),
  ("hapi eighth"),
  ("hapi ninth"),
  ("hapi tenth")
);
CreateDict(
    "name" => "fathersDayWishes.dict",
    "table" => "fathersDayWishes.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'filterPerson.dict'
CreateTable(
  "filterPerson.dict__TABLE",
  ("entry" => "Text"),
  ("again"),
  ("aw"),
  ("awww"),
  ("awwww"),
  ("babe"),
  ("babes"),
  ("baby"),
  ("be"),
  ("big"),
  ("birthday"),
  ("boo"),
  ("boss"),
  ("boy"),
  ("bro"),
  ("come"),
  ("congrats"),
  ("congratulations"),
  ("daddy"),
  ("dude"),
  ("fake"),
  ("fellow"),
  ("for"),
  ("friend"),
  ("gal"),
  ("girl"),
  ("girlie"),
  ("girly"),
  ("guy"),
  ("haha"),
  ("happy"),
  ("have"),
  ("hey"),
  ("hi"),
  ("hun"),
  ("jr"),
  ("left"),
  ("lil"),
  ("lol"),
  ("love"),
  ("luv"),
  ("madam"),
  ("mama"),
  ("man"),
  ("many"),
  ("master"),
  ("miss"),
  ("mr"),
  ("mrs"),
  ("ms"),
  ("mummy"),
  ("my"),
  ("oh"),
  ("papa"),
  ("party"),
  ("pimp"),
  ("right"),
  ("sir"),
  ("sis"),
  ("sr"),
  ("super"),
  ("sweetheart"),
  ("to"),
  ("very"),
  ("well"),
  ("wish"),
  ("wishes"),
  ("wishing"),
  ("woman"),
  ("yes"),
  ("yo"),
  ("you")
);
CreateDict(
    "name" => "filterPerson.dict",
    "table" => "filterPerson.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'genericHasChildrenClues.dict'
CreateTable(
  "genericHasChildrenClues.dict__TABLE",
  ("entry" => "Text"),
  ("my son loves"),
  ("my daughter loves"),
  ("my child loves"),
  ("my kids love"),
  ("my children love"),
  ("my son luvs"),
  ("my daughter luvs"),
  ("my child luvs"),
  ("my kids luv"),
  ("my children luv"),
  ("with my son"),
  ("with my daughter"),
  ("with my child"),
  ("with my kid"),
  ("with my kids"),
  ("with my children"),
  ("with my babies"),
  ("i am a mother"),
  ("i m a mother"),
  ("i am a father"),
  ("i m a father"),
  ("i am a mom"),
  ("i m a mom"),
  ("i am a dad"),
  ("i m a dad")
);
CreateDict(
    "name" => "genericHasChildrenClues.dict",
    "table" => "genericHasChildrenClues.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'genericMarriageClues.dict'
CreateTable(
  "genericMarriageClues.dict__TABLE",
  ("entry" => "Text"),
  ("my wife and I"),
  ("my husband and I"),
  ("my wifey and I"),
  ("my hubby and I"),
  ("my wife n I"),
  ("my husband n I"),
  ("my wifey n I"),
  ("my hubby n I"),
  ("my wife & I"),
  ("my husband & I"),
  ("my wifey & I"),
  ("my hubby & I"),
  ("me and my wife"),
  ("me and my husband"),
  ("me and my wifey"),
  ("me and my hubby"),
  ("me n my wife"),
  ("me n my husband"),
  ("me n my wifey"),
  ("me n my hubby"),
  ("me & my wife"),
  ("me & my husband"),
  ("me & my wifey"),
  ("me & my hubby"),
  ("love my husband"),
  ("love my wife"),
  ("love my hubby"),
  ("love my wifey"),
  ("luv my husband"),
  ("luv my wife"),
  ("luv my hubby"),
  ("luv my wifey"),
  ("miss my husband"),
  ("miss my wife"),
  ("miss my hubby"),
  ("miss my wifey"),
  ("missing my husband"),
  ("missing my wife"),
  ("missing my hubby"),
  ("missing my wifey"),
  ("missin my husband"),
  ("missin my wife"),
  ("missin my hubby"),
  ("missin my wifey")
);
CreateDict(
    "name" => "genericMarriageClues.dict",
    "table" => "genericMarriageClues.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'job_types.dict'
CreateTable(
  "job_types.dict__TABLE",
  ("entry" => "Text"),
  ("Account Manager"),
  ("Account Mgr"),
  ("Account Services Executive"),
  ("Account Servicing"),
  ("Accountant"),
  ("Accounts Assistant"),
  ("Accounts Head"),
  ("Actuary"),
  ("Admin Executive"),
  ("Admin Head"),
  ("Advertising Executive"),
  ("Advertising Manager"),
  ("Advertising Mgr"),
  ("Advisory"),
  ("Air Hostess"),
  ("Alliances Manager"),
  ("Alliances Mgr"),
  ("Anaesthetist"),
  ("Analytical Chemistry Scientist"),
  ("Animator"),
  ("Appraisals Head"),
  ("Appraisals Manager"),
  ("Appraisals Mgr"),
  ("Architect"),
  ("Area Manager"),
  ("Area Mgr"),
  ("Art Tutor"),
  ("Asset Operations"),
  ("Attendant"),
  ("Attorney"),
  ("Auditor"),
  ("AV Executive"),
  ("Avation Executive"),
  ("Aviation Engineer"),
  ("Aviation Er."),
  ("Ayurvedic Doctor"),
  ("Banquet Manager"),
  ("Banquet Sales"),
  ("Bartender"),
  ("Basic Research Scientist"),
  ("Bio chemist"),
  ("Bio Technology Research Scientist"),
  ("Biotech Research Scientist"),
  ("Book Keeper"),
  ("Branch Head"),
  ("Branch Manager"),
  ("Brand Mgr."),
  ("Business Analyst"),
  ("Business Center Manager"),
  ("Business Center Mgr"),
  ("Business Editor"),
  ("Business Man"),
  ("Business Writer"),
  ("Businessman"),
  ("Cabin Crew"),
  ("Cameraman"),
  ("Cash Management Operations"),
  ("Cash Manager"),
  ("Cash Officer"),
  ("Cashier"),
  ("Casting Assistant"),
  ("CEO"),
  ("CGA Technician"),
  ("Chartered Accountant"),
  ("Chef"),
  ("Chemical Engineer"),
  ("Chemical Er."),
  ("Chemical Research Scientist"),
  ("Chemist"),
  ("Chief Chef"),
  ("Chief Engineer"),
  ("Chief Er."),
  ("Chief of Bureau"),
  ("Choreographer"),
  ("Civil Engineer"),
  ("Civil Er."),
  ("Claims Adjuster"),
  ("Clearing Head"),
  ("Clearing Officer"),
  ("Clerk"),
  ("Clinical Research Scientist"),
  ("Club Floor Manager"),
  ("Club Floor Mgr"),
  ("Commercial Manager"),
  ("Commercial Mgr"),
  ("Company Secretary"),
  ("Compliance & Control"),
  ("Computer Operator"),
  ("Concierge"),
  ("Configuration Mgr"),
  ("Construction Suptd"),
  ("Consultant"),
  ("Consumer Banking Asset Operations"),
  ("Consumer Banking Branch Head"),
  ("Consumer Banking Credit Analyst"),
  ("Consumer Banking Credit Head"),
  ("Consumer Banking Customer Service"),
  ("Consumer Banking Head"),
  ("Consumer Banking Region Head"),
  ("Consumer Branch Banking Operations"),
  ("Copy Editor"),
  ("Copy Writer"),
  ("Corp Communications Executive"),
  ("Corp Communications Head"),
  ("Corp Communications Manager"),
  ("Corp Communications Mgr"),
  ("Corp. Communications Executive"),
  ("Corp. Communications Head"),
  ("Corp. Communications Manager"),
  ("Corp. Communications Mgr"),
  ("Corporate Banking Branch Head"),
  ("Corporate Banking Credit Analyst"),
  ("Corporate Banking Credit Control Manager"),
  ("Corporate Banking Credit Head"),
  ("Corporate Banking Customer Support Manager"),
  ("Corporate Banking Head"),
  ("Corporate Banking Region Head"),
  ("Correspondent"),
  ("Cost Accountant"),
  ("Country Manager"),
  ("Country Mgr"),
  ("Country Network Coordinator"),
  ("CPA"),
  ("Creative Director"),
  ("Credit Control & Collections"),
  ("CRM Functional Consultant"),
  ("CRM Support Engineer"),
  ("CRM Support Er."),
  ("CRM Technical Consultant"),
  ("Customer Care Executive"),
  ("Customer Service"),
  ("Customer Service Executive (Voice)"),
  ("Customer Service Executive (Web)"),
  ("Customer Support Engineer"),
  ("Customer Support Er."),
  ("Customer Support Technician"),
  ("Data Entry"),
  ("Database Administrator"),
  ("Database Architect"),
  ("Database Designer"),
  ("Datawarehousing Consultants"),
  ("Db Administrator"),
  ("Db Architect"),
  ("Db Designer"),
  ("Depository Participant"),
  ("Deputy Chief of Bureau"),
  ("Derivatives Analyst"),
  ("Design  Engineer"),
  ("Design Manager"),
  ("Despatch Incharge"),
  ("DGM"),
  ("Dietician"),
  ("Direct Marketing  Executive"),
  ("Direct Marketing  Manager"),
  ("Director"),
  ("Director on Board"),
  ("Distribution  Head"),
  ("Doctor"),
  ("Documentation Medical Writing"),
  ("Documentation Shipment Management"),
  ("Domestic Travel"),
  ("Drug Regulatory Doctor"),
  ("ECG Technician"),
  ("Editor"),
  ("EDP Analyst"),
  ("Electrical Engineer"),
  ("Electronics & Instrumentation Engineer"),
  ("Electronics & Instrumentation Er."),
  ("Electronics and Instrumentation Engineer"),
  ("Electronics and Instrumentation Er."),
  ("Entrepreneur"),
  ("Environmental Engineer"),
  ("ERP Functional Consultant"),
  ("ERP Support Engineer"),
  ("ERP Support Er."),
  ("ERP Technical Consultant"),
  ("Event Manager"),
  ("Event Mgr"),
  ("Express Centre Executive"),
  ("Express Centre Head"),
  ("Express Centre Manager"),
  ("Express Centre Mgr"),
  ("External Auditor"),
  ("External Consultant"),
  ("F&B Manager"),
  ("Factory Manager"),
  ("Factory Mgr"),
  ("Faculty"),
  ("Fashion Designer"),
  ("Features Editor"),
  ("Features Writer"),
  ("Finance Assistant"),
  ("Finance Head"),
  ("Finance Manager"),
  ("Finance Mgr"),
  ("Financial Analyst"),
  ("Financial Budgeting Manager"),
  ("Financial Budgeting Mgr"),
  ("Financial Controller"),
  ("Financial Planning Manager"),
  ("Financial Planning Mgr"),
  ("Fitness Trainer"),
  ("Fixed Income Head"),
  ("Fixed Income Manager"),
  ("Fixed Income Mgr"),
  ("Fleet Supervisor"),
  ("Foreign Exchange Officer"),
  ("Foreman"),
  ("FOREX Dealer"),
  ("FOREX Head"),
  ("FOREX Manager"),
  ("FOREX Mgr"),
  ("Franchisee Coordinator"),
  ("Freelancer"),
  ("Front Desk"),
  ("Front Office Executive"),
  ("Front Office Manager"),
  ("GM"),
  ("GM Accounts"),
  ("GM Finance"),
  ("GM Admin"),
  ("GM Administration"),
  ("GM Commercial"),
  ("GM Engg"),
  ("GM HR"),
  ("GM Production"),
  ("GM Quality"),
  ("GM R&D (Pharma)"),
  ("GM Risks"),
  ("GM Treasury"),
  ("Graphic Animator"),
  ("Graphic Designer"),
  ("Ground Staff"),
  ("Group Account Director"),
  ("Group Account Manager"),
  ("Group Account Mgr"),
  ("Group Head   Creative"),
  ("GSM Engineer"),
  ("Guest Relations Executive"),
  ("Guest Relations Manager"),
  ("H/W Installation Engg"),
  ("H/W Maintenance Engg"),
  ("H/W Installation Engineer"),
  ("H/W Maintenance Engineer"),
  ("Hardware Design Engineer"),
  ("Hardware Design Technical Leader"),
  ("Head Customer Service"),
  ("Head Marketing"),
  ("Head Technology"),
  ("Manager BPO"),
  ("Health Club Manager"),
  ("Hearing Aid Technician"),
  ("Hedge Fund Analyst"),
  ("Host"),
  ("Hostess"),
  ("House Keeping"),
  ("House Keeping Executive"),
  ("House Keeping Head"),
  ("House Keeping Manager"),
  ("HR Executive"),
  ("ICWA"),
  ("In Cleaning"),
  ("In Clerical"),
  ("In Collections"),
  ("In data entry position"),
  ("In Data Management"),
  ("In Data Statistics"),
  ("In Documentation & VISA"),
  ("in Other Advertising"),
  ("in Other Banking"),
  ("in Other Customer Service"),
  ("in Other Distribution"),
  ("in Other Export/Import"),
  ("in Other Import/Export"),
  ("in Other Financial Services"),
  ("in Other Health Care"),
  ("in Other Hotels"),
  ("in Other Resturants"),
  ("in Other Legal"),
  ("in Other Marketing"),
  ("in Other Media"),
  ("in Other Pharma"),
  ("in Other Purchase"),
  ("in Other Retail Chains"),
  ("in Other Telecom"),
  ("in Other Travel"),
  ("in Outside Service Providers"),
  ("In Trading"),
  ("Industrial Engineering"),
  ("Industrial Relations Manager"),
  ("Information Systems (MIS)   Manager"),
  ("Inspector"),
  ("Instructional Designer"),
  ("Interior Designer"),
  ("Internal Auditor"),
  ("International Business Dev Mgr"),
  ("International Travel"),
  ("Internet Banking"),
  ("Into Audit"),
  ("Into Business"),
  ("Into Goods Manufacturing Practices (GMP)"),
  ("Into Maintenance"),
  ("Into Phone Banking"),
  ("Inventory Control Manager"),
  ("Investment Advisor"),
  ("IT   Manager"),
  ("Journalist"),
  ("Kitchen Manager"),
  ("Lab Staff"),
  ("Lab Technician"),
  ("Laundry Manager"),
  ("Law Officer"),
  ("Lawyer"),
  ("Legal Head"),
  ("Legal Advisor"),
  ("Legal Apprentice"),
  ("Legal Assistant"),
  ("Legal Consultant"),
  ("Legal Services Manager"),
  ("Legal Services Mgr"),
  ("Legal Solicitor"),
  ("Liaison"),
  ("Librarian"),
  ("Lobby Manager"),
  ("Logistics Co ordinator"),
  ("Logistics Head"),
  ("Logistics Mgr"),
  ("Logistics Manager"),
  ("Loyalty Program"),
  ("M & A Advisor"),
  ("Maintenance Engineer"),
  ("Maintenance Technician"),
  ("Management Trainee"),
  ("Manager"),
  ("Managing Editor"),
  ("Market Research Executive"),
  ("Market Research Field Executive"),
  ("Market Research Field Supervisor"),
  ("Market Research Manager"),
  ("Market Research Exec Qualitative"),
  ("Market Research Exec Quantitative"),
  ("Market Research Manager"),
  ("Market Risk Head"),
  ("Market Risk Mgr"),
  ("Market Risk Manager"),
  ("Marketing Head"),
  ("Marketing Manager"),
  ("Masseur"),
  ("Materials Head"),
  ("Materials GM"),
  ("Materials Manager"),
  ("MD"),
  ("Mechanical Engineer"),
  ("Media Buying Manager"),
  ("Media Buying Executive"),
  ("Media Planning Manager"),
  ("Media Planning Executive"),
  ("Media Relations & Research Manager"),
  ("Medical Officer"),
  ("Medical Representative"),
  ("Medical Transcription Executive"),
  ("Merchandiser"),
  ("Mgr"),
  ("Microbiologist"),
  ("Migrations"),
  ("Mines Engineer"),
  ("Model"),
  ("Money Market Dealer"),
  ("Mutual Fund Analyst"),
  ("Nephrologist"),
  ("Network Administrator"),
  ("Network Installation & Administration Engineer"),
  ("Network Planning   Chief Engineer"),
  ("Network Planning   Engineer"),
  ("Networking (EDP)   Manager"),
  ("News Editor"),
  ("Nurse"),
  ("Nutritionist"),
  ("O&M Engineer"),
  ("Occupational Therapist"),
  ("Office Assistant"),
  ("Operation Theater Technician"),
  ("Operations   Manager"),
  ("Ophthalmologist"),
  ("Optometrist"),
  ("Orthopaedist"),
  ("Painter"),
  ("Paramedic"),
  ("Pathologist"),
  ("Compensation  Head"),
  ("Compensation  Mgr"),
  ("Payroll Head"),
  ("Payroll Mgr"),
  ("Perfusionist"),
  ("Personal Assistant to CEO"),
  ("Pharmaceutical Research Scientist"),
  ("Pharmacist"),
  ("Photographer"),
  ("Physician"),
  ("Physiotherapist"),
  ("Pilot"),
  ("Plant Head"),
  ("PM"),
  ("POD Assistant"),
  ("POD Incharge"),
  ("Policy Administration"),
  ("Political Editor"),
  ("Political Writer"),
  ("Portfolio Manager"),
  ("Postdoc Position"),
  ("Practice Head"),
  ("President"),
  ("Principal"),
  ("Principal Correspondent"),
  ("Senior Correspondent"),
  ("Printing Technologist"),
  ("Printing Manager"),
  ("Private Banker"),
  ("Private Practitioner"),
  ("Lawyer"),
  ("Process Manager"),
  ("Process Engineer"),
  ("Production Manager"),
  ("Product Manager"),
  ("Product Manager"),
  ("Product Mgr"),
  ("Production Manager"),
  ("Production Engineer"),
  ("Professor"),
  ("Proff."),
  ("Profit Centre Head"),
  ("Program Manager"),
  ("Programmer"),
  ("Project Finance Head"),
  ("Project Finance Mgr"),
  ("Project Finance Advisor"),
  ("Project Leader"),
  ("Project Manager"),
  ("Project Mgr"),
  ("Promotions Manager"),
  ("Promotions Mgr"),
  ("Property Management"),
  ("Psychiatrist"),
  ("Psychologist"),
  ("Public Relations   Executive"),
  ("Public Relations   Manager"),
  ("Purchase   Head"),
  ("Purchase Manager"),
  ("Purchase Officer"),
  ("Purchase Executive"),
  ("Purchase Coordinator"),
  ("Quality Assurance Manager"),
  ("Quality Assurance Executive"),
  ("R & D Head"),
  ("R & D Manager"),
  ("R&D Head"),
  ("R&D Manager"),
  ("Radiographer"),
  ("Radiologist"),
  ("Ratings Analyst"),
  ("Real Estate Assessor"),
  ("Real Estate Broker"),
  ("Receptionist"),
  ("Recruitment Head"),
  ("Recruitment Mgr"),
  ("Recruitment Manager"),
  ("Regional Manager"),
  ("Regional Mgr"),
  ("Relationship Mgr"),
  ("Release Manager"),
  ("Release Mgr"),
  ("Reporter"),
  ("Research Assistant"),
  ("Research Scientist"),
  ("Reservation Manager"),
  ("Resident Editor"),
  ("Resource Allocator"),
  ("Resource Manager"),
  ("Resource Mgr"),
  ("Restaurant Manager"),
  ("Retail Store Manager"),
  ("RF Installation & Administration Engineer"),
  ("RF Planning   Chief Engineer"),
  ("RF Planning Engineer"),
  ("Risk Manager"),
  ("RM"),
  ("Room Service Manager"),
  ("S/W Installation Engg"),
  ("S/W Maintenance Engg"),
  ("Software M"),
  ("Safety Officer"),
  ("Safety Engineer"),
  ("Sales Exec"),
  ("Sales Representative"),
  ("SBU Head"),
  ("Script Writer"),
  ("Secretary"),
  ("Security Analyst"),
  ("Security Manager"),
  ("Security Officer"),
  ("Security Officer"),
  ("Senior V. President"),
  ("Senior Vice President"),
  ("Senior VP"),
  ("Service Manager"),
  ("Service Engineer"),
  ("Shares Services Executive"),
  ("Shift Engineer"),
  ("Shift Supervisor"),
  ("Shift Manager"),
  ("Shift Supervisor"),
  ("Shift Supervisor"),
  ("Shipping Supervisor"),
  ("Software Engineer"),
  ("Software Programmer"),
  ("Software Test Engineer"),
  ("S/W Engineer"),
  ("S/W Programmer"),
  ("S/W Test Engineer"),
  ("Spares Manager"),
  ("Spares Engineer"),
  ("Specialist in Medicine"),
  ("Steward"),
  ("Stock Broker"),
  ("Store Keeper"),
  ("Strategic Planning   Manager"),
  ("Sub  Editor"),
  ("Suicide hotline operator"),
  ("Supply Chain   Head"),
  ("Surgeon"),
  ("Switching   Chief Engineer"),
  ("Switching   Engineer"),
  ("System Administrator"),
  ("System Analyst"),
  ("System Engineer"),
  ("System Integrator"),
  ("System Security   Chief Engineer"),
  ("System Security   Engineer"),
  ("Taxation Manager"),
  ("Teacher"),
  ("Team Lead"),
  ("Team Leader"),
  ("Tech Architect"),
  ("Tech Support"),
  ("Tech Manager"),
  ("Technical   Manager"),
  ("Technical Leader"),
  ("Technical Support Engineer"),
  ("Technical Support Executive"),
  ("Technical Writer"),
  ("Technician"),
  ("Technology Transfer Engineer"),
  ("Telesales/ Telemarketing Executive"),
  ("Tool Room"),
  ("Tour Operator"),
  ("Trade Finance Head"),
  ("Cash Mgmt Services Head"),
  ("Trade Finance Mgr"),
  ("Cash Mgmt Services Mgr"),
  ("Trade Finance Manager"),
  ("Cash Mgmt Services Manager"),
  ("Trader"),
  ("Trading Advisor"),
  ("Traffic Clerk"),
  ("Traffic Clerk"),
  ("Trainee"),
  ("Trainee"),
  ("Trainer"),
  ("Trainers"),
  ("Training & Development Head"),
  ("Training Manager"),
  ("Training Managers"),
  ("Transactions Processing Executive"),
  ("Transit Centre Executive"),
  ("Transit Centre Head"),
  ("Transit Centre Manager"),
  ("Transitions"),
  ("Transportation"),
  ("Travel Agent"),
  ("Treasury Manager"),
  ("Treasury Marketing Fixed Income"),
  ("Treasury Marketing FOREX"),
  ("TV Anchor"),
  ("Typist"),
  ("Underwriter"),
  ("Vendor Development Manager"),
  ("Vendor Development Manager"),
  ("Vice President"),
  ("Visualiser"),
  ("VP Admin"),
  ("VP Administration"),
  ("VP Finance"),
  ("VP HR"),
  ("VP Marketing"),
  ("VP Media Buying"),
  ("VP Media Planning & Strategy"),
  ("VP Media Planning and Strategy"),
  ("VP Operations"),
  ("VP Quality"),
  ("VP R&D (Pharma)"),
  ("VP Technology"),
  ("Waiter"),
  ("Warehouse Assistant"),
  ("Web Designer"),
  ("Web Master"),
  ("Web Site Manager"),
  ("Web Site Mgr"),
  ("Work Flow Analyst")
);
CreateDict(
    "name" => "job_types.dict",
    "table" => "job_types.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/USCities_Weak.dict'
CreateTable(
  "location/USCities_Weak.dict__TABLE",
  ("entry" => "Text"),
  ("Atl"),
  ("Cali"),
  ("Indy"),
  ("NYC"),
  ("Philly"),
  ("Vegas")
);
CreateDict(
    "name" => "location/USCities_Weak.dict",
    "table" => "location/USCities_Weak.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/city_bayarea.dict'
CreateTable(
  "location/_depr_cities/city_bayarea.dict__TABLE",
  ("entry" => "Text"),
  ("Alameda"),
  ("Albany"),
  ("American Canyon"),
  ("Antioch"),
  ("Atherton"),
  ("Belmont"),
  ("Belvedere"),
  ("Benicia"),
  ("Berkeley"),
  ("Brentwood"),
  ("Brisbane"),
  ("Burlingame"),
  ("Calistoga"),
  ("Campbell"),
  ("Clayton"),
  ("Cloverdale"),
  ("Colma"),
  ("Concord"),
  ("Corte Madera"),
  ("Cotati"),
  ("Cupertino"),
  ("Daly City"),
  ("Danville"),
  ("Dixon"),
  ("Dublin"),
  ("East Palo Alto"),
  ("El Cerrito"),
  ("Emeryville"),
  ("Fairfax"),
  ("Fairfield"),
  ("Foster City"),
  ("Fremont"),
  ("Gilroy"),
  ("Half Moon Bay"),
  ("Hayward"),
  ("Healdsburg"),
  ("Hercules"),
  ("Hillsborough"),
  ("Lafayette"),
  ("Larkspur"),
  ("Livermore"),
  ("Los Altos"),
  ("Los Altos Hills"),
  ("Los Gatos"),
  ("Martinez"),
  ("Menlo Park"),
  ("Mill Valley"),
  ("Millbrae"),
  ("Milpitas"),
  ("Monte Sereno"),
  ("Moraga"),
  ("Morgan Hill"),
  ("Mountain View"),
  ("Napa"),
  ("Newark"),
  ("Novato"),
  ("Oakland"),
  ("Oakley"),
  ("Orinda"),
  ("Palo Alto"),
  ("Petaluma"),
  ("Piedmont"),
  ("Pinole"),
  ("Pittsburg"),
  ("Pleasant Hill"),
  ("Pleasanton"),
  ("Portola Valley"),
  ("Redwood City"),
  ("Richmond"),
  ("Rio Vista"),
  ("Rohnert Park"),
  ("Ross"),
  ("St. Helena"),
  ("San Anselmo"),
  ("San Bruno"),
  ("San Carlos"),
  ("San Francisco"),
  ("San Jose"),
  ("San Leandro"),
  ("San Mateo"),
  ("San Pablo"),
  ("San Ramon"),
  ("San Rafael"),
  ("Santa Clara"),
  ("Santa Rosa"),
  ("Saratoga"),
  ("Sausalito"),
  ("Sebastopol"),
  ("Sonoma"),
  ("Suisun City"),
  ("Sunnyvale"),
  ("Tiburon"),
  ("Union City"),
  ("Vacaville"),
  ("Vallejo"),
  ("Walnut Creek"),
  ("Windsor"),
  ("Woodside"),
  ("Yountville")
);
CreateDict(
    "name" => "location/_depr_cities/city_bayarea.dict",
    "table" => "location/_depr_cities/city_bayarea.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-UK.dict'
CreateTable(
  "location/_depr_cities/majorCities-UK.dict__TABLE",
  ("entry" => "Text"),
  ("London"),
  ("Birmingham"),
  ("Leeds"),
  ("Glasgow"),
  ("Sheffield"),
  ("Bradford"),
  ("Edinburgh"),
  ("Liverpool"),
  ("Manchester"),
  ("Bristol"),
  ("Cardiff"),
  ("Coventry"),
  ("Leicester"),
  ("Belfast"),
  ("Nottingham"),
  ("Newcastle on Tyne"),
  ("Kingston upon Hull"),
  ("Plymouth"),
  ("Stoke-on-Trent"),
  ("Wolverhampton"),
  ("Derby")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-UK.dict",
    "table" => "location/_depr_cities/majorCities-UK.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-australia.dict'
CreateTable(
  "location/_depr_cities/majorCities-australia.dict__TABLE",
  ("entry" => "Text"),
  ("Sydney"),
  ("Adelaide"),
  ("Melbourne"),
  ("Perth"),
  ("Brisbane"),
  ("Alice Springs"),
  ("Darwin"),
  ("Cairns")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-australia.dict",
    "table" => "location/_depr_cities/majorCities-australia.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-brazil.dict'
CreateTable(
  "location/_depr_cities/majorCities-brazil.dict__TABLE",
  ("entry" => "Text"),
  ("Brasilia"),
  ("São Paulo"),
  ("Rio de Janeiro"),
  ("Salvador"),
  ("Belo Horizonte"),
  ("Curitiba"),
  ("Recife"),
  ("Porto Alegre")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-brazil.dict",
    "table" => "location/_depr_cities/majorCities-brazil.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-china.dict'
CreateTable(
  "location/_depr_cities/majorCities-china.dict__TABLE",
  ("entry" => "Text"),
  ("Beijing"),
  ("Chongqing"),
  ("Shanghai"),
  ("Shanxi"),
  ("Sichuan"),
  ("Tianjin"),
  ("Hong Kong"),
  ("Macau"),
  ("")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-china.dict",
    "table" => "location/_depr_cities/majorCities-china.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-france.dict'
CreateTable(
  "location/_depr_cities/majorCities-france.dict__TABLE",
  ("entry" => "Text"),
  ("Strasbourg"),
  ("Bordeaux"),
  ("Clermont-Ferrand"),
  ("Dijon"),
  ("Rennes"),
  ("Orléans"),
  ("Châlons-en-Champagne"),
  ("Ajaccio"),
  ("Besançon"),
  ("Paris"),
  ("Montpellier"),
  ("Limoges"),
  ("Metz"),
  ("Toulouse"),
  ("Lille"),
  ("Caen"),
  ("Rouen"),
  ("Nantes"),
  ("Amiens"),
  ("Poitiers"),
  ("Marseille"),
  ("Lyon"),
  ("Cayenne"),
  ("Basse-Terre"),
  ("Fort-de-France"),
  ("Saint-Denis")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-france.dict",
    "table" => "location/_depr_cities/majorCities-france.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-india.dict'
CreateTable(
  "location/_depr_cities/majorCities-india.dict__TABLE",
  ("entry" => "Text"),
  ("Agra"),
  ("Chandigarh"),
  ("Jaipur"),
  ("Ahmedabad"),
  ("Chennai"),
  ("Mumbai"),
  ("Bangalore"),
  ("Delhi"),
  ("Pune"),
  ("Kolkota"),
  ("Hyderabad"),
  ("Thiruvananthapuram")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-india.dict",
    "table" => "location/_depr_cities/majorCities-india.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-indonesia.dict'
CreateTable(
  "location/_depr_cities/majorCities-indonesia.dict__TABLE",
  ("entry" => "Text"),
  ("Jakarta"),
  ("Bandung"),
  ("Surabaya"),
  ("Medan"),
  ("Bekasi"),
  ("Palembang"),
  ("Tangerang"),
  ("Makassar"),
  ("Semarang"),
  ("Bogor"),
  ("Malang"),
  ("Bandar Lampung"),
  ("Padang"),
  ("Samarinda"),
  ("Pekanbaru"),
  ("Banjarmasin"),
  ("Surakarta"),
  ("Depok"),
  ("Balikpapan"),
  ("Pontianak"),
  ("Denpasar"),
  ("Jambi")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-indonesia.dict",
    "table" => "location/_depr_cities/majorCities-indonesia.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-iran.dict'
CreateTable(
  "location/_depr_cities/majorCities-iran.dict__TABLE",
  ("entry" => "Text"),
  ("Tehran"),
  ("Mashhad"),
  ("Esfahan"),
  ("Karaj"),
  ("Tabriz"),
  ("Shiraz"),
  ("Qom"),
  ("Ahvaz"),
  ("Kermanshah"),
  ("Orumiyeh"),
  ("Rasht"),
  ("Kerman"),
  ("Zahedan"),
  ("Hamadan"),
  ("Arak"),
  ("Yazd"),
  ("Ardabil"),
  ("Abadan"),
  ("Zanjan"),
  ("Sanandaj"),
  ("Qazvin"),
  ("Khorramshahr"),
  ("Khorramabad"),
  ("Eslamshahr"),
  ("Khomeynishahr")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-iran.dict",
    "table" => "location/_depr_cities/majorCities-iran.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-italy.dict'
CreateTable(
  "location/_depr_cities/majorCities-italy.dict__TABLE",
  ("entry" => "Text"),
  ("Roma"),
  ("Rome"),
  ("Milano"),
  ("Milan"),
  ("Napoli"),
  ("Naples"),
  ("Torino"),
  ("Turin"),
  ("Palermo"),
  ("Genova"),
  ("Bologna"),
  ("Firenze"),
  ("Florence"),
  ("Bari"),
  ("Catania"),
  ("Venezia"),
  ("Venice"),
  ("Verona"),
  ("Messina"),
  ("Trieste"),
  ("Padova"),
  ("Taranto"),
  ("Brescia"),
  ("Reggio di Calabria"),
  ("Modena"),
  ("Prato")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-italy.dict",
    "table" => "location/_depr_cities/majorCities-italy.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-mexico.dict'
CreateTable(
  "location/_depr_cities/majorCities-mexico.dict__TABLE",
  ("entry" => "Text"),
  ("Mexico City"),
  ("Monterrey"),
  ("Guadajajara"),
  ("Puebla"),
  ("Toluca"),
  ("Tijuana"),
  ("León"),
  ("Ciudad Juárez"),
  ("Torreón"),
  ("San Luis Potosi"),
  ("Querétaro"),
  ("Mérida"),
  ("Mexicali"),
  ("Aguascalientes"),
  ("Tampico"),
  ("Culiacán"),
  ("Cuernavaca"),
  ("Acapulco"),
  ("Chihuahua"),
  ("Morelia")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-mexico.dict",
    "table" => "location/_depr_cities/majorCities-mexico.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-netherlands.dict'
CreateTable(
  "location/_depr_cities/majorCities-netherlands.dict__TABLE",
  ("entry" => "Text"),
  ("Aardenburg"),
  ("Alkmaar"),
  ("Almelo"),
  ("Almere"),
  ("Almere Buiten"),
  ("Amersfoort"),
  ("Amstelveen"),
  ("Amsterdam"),
  ("Appingedam"),
  ("Arnhem"),
  ("Assen"),
  ("Breda"),
  ("Buren"),
  ("Coevorden"),
  ("Culemborg"),
  ("Delfzijl"),
  ("Den Helder"),
  ("Deventer"),
  ("Doesburg"),
  ("Doetinchem"),
  ("Dordrecht"),
  ("Echt"),
  ("Edam"),
  ("Eindhoven"),
  ("Enschede"),
  ("Flushing"),
  ("Geertruidenberg"),
  ("Gouda"),
  ("Grave"),
  ("Groningen"),
  ("Haarlem"),
  ("Hagestein"),
  ("Helmond"),
  ("Hengelo"),
  ("'s-Hertogenbosch"),
  ("Hilversum"),
  ("Hoogeveen"),
  ("Hoorn"),
  ("Huissen"),
  ("Hulst"),
  ("IJzendijke"),
  ("Kampen"),
  ("Overijssel"),
  ("Kerkrade"),
  ("Lelystad"),
  ("Lochem"),
  ("Megen"),
  ("Middelburg"),
  ("Nijkerk"),
  ("Nijmegen"),
  ("Oisterwijk"),
  ("Oldenzaal"),
  ("Ommen"),
  ("Oostburg"),
  ("Oosterhout"),
  ("Purmerend"),
  ("Roermond"),
  ("Rotterdam"),
  ("Sint-Oedenrode"),
  ("Sint Oedenrode"),
  ("Sittard-Geleen"),
  ("Sittard"),
  ("Geleen"),
  ("Sluis"),
  ("Terneuzen"),
  ("Tiel"),
  ("Tilburg"),
  ("Uden"),
  ("Utrecht"),
  ("Veere"),
  ("Venlo"),
  ("Wageningen"),
  ("Winschoten"),
  ("Winterswijk"),
  ("Woerden"),
  ("Zeist"),
  ("Zutphen"),
  ("Zwolle")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-netherlands.dict",
    "table" => "location/_depr_cities/majorCities-netherlands.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-russia.dict'
CreateTable(
  "location/_depr_cities/majorCities-russia.dict__TABLE",
  ("entry" => "Text"),
  ("Moscow"),
  ("St. Petersburg"),
  ("St Petersburg"),
  ("Saint Petersburg"),
  ("Grozny"),
  ("Vladikavkaz"),
  ("Vladivostok"),
  ("Masdok"),
  ("Belsan"),
  ("Alagir"),
  ("Terek"),
  ("Terek"),
  ("Khristianskoye"),
  ("Alkhanchurt"),
  ("Angushty"),
  ("Abaytikau"),
  ("Ardon"),
  ("Ardonskaya"),
  ("Areaki"),
  ("Ardonskaya"),
  ("Akabas"),
  ("Akhsarisar"),
  ("Akhki-Yurt"),
  ("Akhushkov"),
  ("Akhsau"),
  ("Ali-Yurt"),
  ("Sochi"),
  ("Nizhny Novgorod"),
  ("Nizhni Novgorod"),
  ("Samara"),
  ("Kalininggrad"),
  ("Kenigsberg"),
  ("Ekaterinburg"),
  ("Yekaterinburg"),
  ("Kazan"),
  ("Rostov-on-Donu"),
  ("Volgograd"),
  ("Khabarovsk"),
  ("Omsk"),
  ("Krasnodar"),
  ("Arkhangelsk"),
  ("Krasnoyarsk"),
  ("Novosibirsk"),
  ("Saratov"),
  ("Murmansk"),
  ("Izhevsk"),
  ("Perm"),
  ("Chelyabink"),
  ("Tver"),
  ("Irkutsk"),
  ("Yaroslavl"),
  ("Novgorod Veliky"),
  ("Rostov Veliky"),
  ("Petrozavodsk"),
  ("Ulan-Ude"),
  ("Smolenk"),
  ("Pskov"),
  ("Ufa"),
  ("Naberezhnye Chelny"),
  ("Novorossiisk"),
  ("Kamyshin"),
  ("Togliatti")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-russia.dict",
    "table" => "location/_depr_cities/majorCities-russia.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-serbia.dict'
CreateTable(
  "location/_depr_cities/majorCities-serbia.dict__TABLE",
  ("entry" => "Text"),
  ("Belgrade"),
  ("Novi Sad"),
  ("Niš"),
  ("Nis"),
  ("Kragujevac"),
  ("Subotica"),
  ("Zrenjanin"),
  ("Pančevo"),
  ("Pancevo"),
  ("Čačak"),
  ("Cacak"),
  ("Leskovac"),
  ("Smederevo"),
  ("Valjevo"),
  ("Kraljevo"),
  ("Kruševac"),
  ("Krusevac"),
  ("Šabac"),
  ("Sabac"),
  ("Vranje"),
  ("Užice"),
  ("Uzice"),
  ("NoviPazar"),
  ("Sombor"),
  ("Kikinda"),
  ("Požarevac"),
  ("Pozarevac")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-serbia.dict",
    "table" => "location/_depr_cities/majorCities-serbia.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-southKorea.dict'
CreateTable(
  "location/_depr_cities/majorCities-southKorea.dict__TABLE",
  ("entry" => "Text"),
  ("Seoul"),
  ("Busan"),
  ("Pushan"),
  ("Daegu"),
  ("Incheon"),
  ("Gwangju"),
  ("Daejeon"),
  ("Ulsan"),
  ("Suwon"),
  ("Seongnam"),
  ("Goyang"),
  ("Asan"),
  ("Boryeong"),
  ("Cheonan"),
  ("Gongju"),
  ("Nonsan"),
  ("Seosan"),
  ("Gyeryong"),
  ("Chuncheon"),
  ("Donghae"),
  ("Gangneung"),
  ("Samcheok"),
  ("Sokcho"),
  ("Taebaek"),
  ("Wonju"),
  ("Andong"),
  ("Gimcheon"),
  ("Gyeongju"),
  ("Gyeongsan"),
  ("Gumi"),
  ("Mungyeong"),
  ("Pohang"),
  ("Sangju"),
  ("Yeongcheon"),
  ("Yeongju"),
  ("Changwon"),
  ("Geoje"),
  ("Gimhae"),
  ("Jinhae"),
  ("Jinju"),
  ("Masan"),
  ("Miryang"),
  ("Sacheon"),
  ("Tongyeong"),
  ("Yangsan"),
  ("Jeju City"),
  ("Mokpo"),
  ("Yeosu"),
  ("Suncheon"),
  ("Gwangyang"),
  ("Naju"),
  ("Jeonju"),
  ("Gimje"),
  ("Gunsan"),
  ("Iksan"),
  ("Jeongeup"),
  ("Namwon"),
  ("Cheongju"),
  ("Chungju"),
  ("Jecheon"),
  ("Suwon"),
  ("Ansan"),
  ("Anseong"),
  ("Anyang"),
  ("Bucheon"),
  ("Dongducheon"),
  ("Gimpo"),
  ("Goyang"),
  ("Gunpo"),
  ("Guri"),
  ("Gwacheon"),
  ("Gwangju"),
  ("Gwangmyeong"),
  ("Hanam"),
  ("Hwaseong"),
  ("Icheon"),
  ("Namyangju"),
  ("Osan"),
  ("Paju"),
  ("Pocheon"),
  ("Pyeongtaek"),
  (""),
  ("Seongnam (???, ???)"),
  ("Siheung (???, ???)"),
  ("Uijeongbu (????, ????)"),
  ("Uiwang (???, ???)"),
  ("Yangju (???, ???)"),
  ("Yongin (???, ???)")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-southKorea.dict",
    "table" => "location/_depr_cities/majorCities-southKorea.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-spain.dict'
CreateTable(
  "location/_depr_cities/majorCities-spain.dict__TABLE",
  ("entry" => "Text"),
  ("Barcelona"),
  ("Bilbao"),
  ("Madrid"),
  ("Valencia"),
  ("Zaragoza"),
  ("Malaga")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-spain.dict",
    "table" => "location/_depr_cities/majorCities-spain.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-taiwan.dict'
CreateTable(
  "location/_depr_cities/majorCities-taiwan.dict__TABLE",
  ("entry" => "Text"),
  ("Taipei"),
  ("Taipei Shih"),
  ("Taoyuan"),
  ("Taichung"),
  ("Kaohsiung"),
  ("Changhua"),
  ("Kaohsiung"),
  ("Tainan")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-taiwan.dict",
    "table" => "location/_depr_cities/majorCities-taiwan.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities-turkey.dict'
CreateTable(
  "location/_depr_cities/majorCities-turkey.dict__TABLE",
  ("entry" => "Text"),
  ("Istanbul"),
  ("Izmir"),
  ("Antalya"),
  ("Ankara"),
  ("Diyarbakir")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities-turkey.dict",
    "table" => "location/_depr_cities/majorCities-turkey.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCities.dict'
CreateTable(
  "location/_depr_cities/majorCities.dict__TABLE",
  ("entry" => "Text"),
  ("Colombo"),
  ("Kabul"),
  ("Tirana"),
  ("Algiers"),
  ("Andorra la Vella"),
  ("Luanda"),
  ("St. John's"),
  ("Buenos Aires"),
  ("Yerevan"),
  ("Canberra"),
  ("Sydney"),
  ("Melbourne"),
  ("Brisbane"),
  ("Perth"),
  ("Adelaide"),
  ("Newcastle"),
  ("Gold Coast"),
  ("Vienna"),
  ("Baku"),
  ("Nassau"),
  ("Manama"),
  ("Dhaka"),
  ("Bridgetown"),
  ("Minsk"),
  ("Brussels"),
  ("Belmopan"),
  ("Belize City"),
  ("Corozal Town"),
  ("Dangriga"),
  ("Orange Walk Town"),
  ("San Ignacio Cayo"),
  ("Porto-Novo"),
  ("Cotonou"),
  ("Thimphu"),
  ("Sucre"),
  ("La Paz"),
  ("Santa Cruz"),
  ("Sarajevo"),
  ("Gaborone"),
  ("Brasília"),
  ("São Paulo"),
  ("Rio de Janeiro"),
  ("Belo Horizonte"),
  ("Salvador"),
  ("Bandar Seri Begawan"),
  ("Sofia"),
  ("Ouagadougou"),
  ("Bujumbura"),
  ("Phnom Penh"),
  ("Yaoundé"),
  ("Douala"),
  ("Ottawa"),
  ("Toronto"),
  ("Montreal"),
  ("Calgary"),
  ("Vancouver"),
  ("Praia"),
  ("Bangui"),
  ("N'Djamena"),
  ("Santiago"),
  ("Valparaíso"),
  ("Santiago"),
  ("Beijing"),
  ("Shanghai"),
  ("Bogotá"),
  ("Moroni"),
  ("Brazzaville"),
  ("Kinshasa"),
  ("San José"),
  ("Yamoussoukro"),
  ("Abidjan"),
  ("Abidjan"),
  ("Zagreb"),
  ("Havana"),
  ("Nicosia"),
  ("Prague"),
  ("Copenhagen"),
  ("Djibouti City"),
  ("Roseau"),
  ("Santo Domingo"),
  ("Santiago de los Caballeros"),
  ("San Felipe de Puerto Plata"),
  ("San Francisco de MacorísDili"),
  ("Quito"),
  ("GuayaquilCairo"),
  ("San Salvador"),
  ("Malabo"),
  ("Asmara"),
  ("Tallinn"),
  ("Addis Ababa"),
  ("Suva"),
  ("Helsinki"),
  ("Paris"),
  ("Libreville"),
  ("Banjul"),
  ("Tbilisi"),
  ("Berlin"),
  ("Accra"),
  ("Athens"),
  ("St. George's"),
  ("Guatemala City"),
  ("Conakry"),
  ("Bissau"),
  ("Georgetown"),
  ("Port-au-Prince"),
  ("Tegucigalpa"),
  ("Budapest"),
  ("Reykjavík"),
  ("New Delhi"),
  ("Mumbai"),
  ("Bombay"),
  ("Delhi"),
  ("Kolkata"),
  ("Chennai"),
  ("Bangalore"),
  ("Hyderabad"),
  ("Ahmedabad"),
  ("Pune"),
  ("Lucknow"),
  ("Jaipur"),
  ("Kanpur"),
  ("Nagpur"),
  ("Vadodara"),
  ("Cochin"),
  ("Trivandrum"),
  ("Jakarta"),
  ("Tehran"),
  ("Baghdad"),
  ("Dublin"),
  ("Jerusalem"),
  ("Rome"),
  ("Kingston"),
  ("Tokyo"),
  ("Amman"),
  ("Astana"),
  ("Almaty"),
  ("Nairobi"),
  ("South Tarawa"),
  ("Pyongyang"),
  ("Seoul"),
  ("Kuwait City"),
  ("Bishkek"),
  ("Vientiane"),
  ("Riga"),
  ("Beirut"),
  ("Maseru"),
  ("Monrovia"),
  ("Tripoli"),
  ("Vaduz"),
  ("Schaan"),
  ("Vilnius"),
  ("Luxembourg City"),
  ("Skopje"),
  ("Antananarivo"),
  ("Lilongwe"),
  ("Blantyre"),
  ("Putrajaya"),
  ("Kuala Lumpur"),
  ("Malé"),
  ("Bamako"),
  ("Valletta"),
  ("Birkirkara"),
  ("Mosta"),
  ("Qormi"),
  ("Żabbar"),
  ("St. Paul's Bay"),
  ("Sliema"),
  ("San Ġwann"),
  ("Naxxar"),
  ("Rabat"),
  ("Żejtun"),
  ("Żebbuġ"),
  ("Fgura"),
  ("Attard"),
  ("Żurrieq"),
  ("Ħamrun"),
  ("Marsascala"),
  ("Birzebbugia"),
  ("Paola"),
  ("Swieqi"),
  ("Siġġiewi"),
  ("St. Julian's"),
  ("Msida"),
  ("Tarxien"),
  ("Mellieħa"),
  ("Gżira"),
  ("Rabat"),
  ("Majuro"),
  ("Nouakchott"),
  ("Port Louis"),
  ("Mexico City"),
  ("Palikir"),
  ("Weno"),
  ("Chişinău"),
  ("Monaco-Ville"),
  ("Monte-Carlo"),
  ("La Condamine"),
  ("Ulaanbaatar"),
  ("Podgorica"),
  ("Rabat"),
  ("Casablanca"),
  ("Maputo"),
  ("Naypyidaw"),
  ("Pyinmana"),
  ("Yangon"),
  ("Mandalay"),
  ("Windhoek"),
  ("Kathmandu"),
  ("Amsterdam"),
  ("The Hague"),
  ("Rotterdam"),
  ("Wellington"),
  ("Auckland"),
  ("Christchurch"),
  ("Manukau"),
  ("North Shore"),
  ("Waitakere"),
  ("Managua"),
  ("Niamey"),
  ("Abuja"),
  ("Lagos"),
  ("Ibadan"),
  ("Kano"),
  ("Ilorin"),
  ("Port Harcourt"),
  ("Ogbomosho"),
  ("Oslo"),
  ("Muscat"),
  ("Islamabad"),
  ("Karachi"),
  ("Lahore"),
  ("Faisalabad"),
  ("Rawalpindi"),
  ("Gujranwala"),
  ("Multan"),
  ("Hyderabad"),
  ("Peshawar"),
  ("Melekeok"),
  ("Koror"),
  ("Panama City"),
  ("Port Moresby"),
  ("Asunción"),
  ("Lima"),
  ("Manila"),
  ("Metro Manila"),
  ("Quezon City"),
  ("Makati City"),
  ("Davao City"),
  ("Warsaw"),
  ("Lisbon"),
  ("Doha"),
  ("Bucharest"),
  ("Moscow"),
  ("Kigali"),
  ("Basseterre"),
  ("Castries"),
  ("Kingstown"),
  ("Apia"),
  ("San Marino"),
  ("Serravalle"),
  ("São Tomé"),
  ("Riyadh"),
  ("Dakar"),
  ("Belgrade"),
  ("Victoria"),
  ("Freetown"),
  ("Singapore"),
  ("Bratislava"),
  ("Ljubljana"),
  ("Honiara"),
  ("Mogadishu"),
  ("Pretoria"),
  ("Cape Town"),
  ("Bloemfontein"),
  ("Johannesburg"),
  ("Durban"),
  ("Madrid"),
  ("Sri Jayewardenepura Kotte"),
  ("Colombo"),
  ("Kotte"),
  ("Khartoum"),
  ("Omdurman"),
  ("Paramaribo"),
  ("Mbabane"),
  ("Lobamba"),
  ("Manzini"),
  ("Stockholm"),
  ("Bern"),
  ("Zürich"),
  ("Geneva"),
  ("Basel"),
  ("Damascus"),
  ("Taipei"),
  ("Dushanbe"),
  ("Dodoma"),
  ("Dar es Salaam"),
  ("Mwanza"),
  ("Bangkok"),
  ("Lomé"),
  ("Nukuʻalofa"),
  ("Port of Spain"),
  ("Chaguanas"),
  ("San Fernando"),
  ("San Juan"),
  ("Tunis"),
  ("Ankara"),
  ("Istanbul"),
  ("Ashgabat"),
  ("Funafuti"),
  ("Kampala"),
  ("Kiev"),
  ("Abu Dhabi"),
  ("Dubai"),
  ("Sharjah"),
  ("London"),
  ("Washington, D.C."),
  ("New York City"),
  ("Los Angeles"),
  ("Chicago"),
  ("Houston"),
  ("Phoenix"),
  ("Philadelphia"),
  ("San Antonio"),
  ("San Diego"),
  ("Dallas"),
  ("San Jose"),
  ("Detroit"),
  ("Jacksonville"),
  ("Indianapolis"),
  ("San Francisco"),
  ("Columbus"),
  ("Austin"),
  ("Memphis"),
  ("Ft. Worth"),
  ("Baltimore"),
  ("Charlotte"),
  ("El Paso"),
  ("Milwaukee"),
  ("Boston"),
  ("Seattle"),
  ("Denver"),
  ("Tashkent"),
  ("Port Vila"),
  ("Vatican City"),
  ("Caracas"),
  ("Hanoi"),
  ("Ho Chi Minh City"),
  ("Sanaá"),
  ("Lusaka"),
  ("Harare"),
  ("The Valley"),
  ("Pago Pago"),
  ("Tafuna"),
  ("Nu'uuli"),
  ("Leone"),
  ("Ili'ili"),
  ("Aua"),
  ("Oranjestad"),
  ("Hamilton"),
  ("Road Town"),
  ("George Town"),
  ("The Settlement"),
  ("Avarua"),
  ("Stanley"),
  ("Tórshavn"),
  ("Cayenne"),
  ("Papeete"),
  ("Gibraltar"),
  ("Nuuk"),
  ("Hagåtña"),
  ("Tamuning"),
  ("Mangilao"),
  ("Yigo"),
  ("St Peter Port"),
  ("Saint Helier"),
  ("Douglas"),
  ("Fort-de-France"),
  ("Mamoudzou"),
  ("Plymouth"),
  ("Willemstad"),
  ("Nouméa"),
  ("Alofi"),
  ("Kingston"),
  ("Burnt Pine"),
  ("Saipan"),
  ("Adamstown"),
  ("San Juan"),
  ("Saint-Denis"),
  ("Jamestown"),
  ("Saint-Pierre"),
  ("Longyearbyen"),
  ("Cockburn Town"),
  ("Charlotte Amalie"),
  ("Matâ'Utu"),
  ("Sukhumi"),
  ("Enugu"),
  ("Priština"),
  ("Erbil"),
  ("Stepanakert"),
  ("Nicosia"),
  ("Tskhinvali"),
  ("Hargeisa"),
  ("Killinochchi"),
  ("Jaffna"),
  ("Batticaloa"),
  ("Trincomalee"),
  ("Vavuniya"),
  ("Mannar"),
  ("Tiraspol")
);
CreateDict(
    "name" => "location/_depr_cities/majorCities.dict",
    "table" => "location/_depr_cities/majorCities.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/majorCity_world.dict'
CreateTable(
  "location/_depr_cities/majorCity_world.dict__TABLE",
  ("entry" => "Text"),
  ("Sao Paulo"),
  ("Burj Al Arab"),
  ("Kabul"),
  ("El Djazaïr"),
  ("Algiers"),
  ("Wahran"),
  ("Oran"),
  ("Huambo"),
  ("Luanda"),
  ("Buenos Aires"),
  ("Córdoba"),
  ("Mendoza"),
  ("Rosario"),
  ("San Miguel de Tucumán"),
  ("Yerevan"),
  ("Adelaide"),
  ("Brisbane"),
  ("Melbourne"),
  ("Perth"),
  ("Sydney"),
  ("Wien"),
  ("Vienna"),
  ("Baku"),
  ("Chittagong"),
  ("Dhaka"),
  ("Khulna"),
  ("Rajshahi"),
  ("Minsk"),
  ("Antwerpen"),
  ("Bruxelles-Brussel"),
  ("Bruxelles"),
  ("Brussel"),
  ("Cotonou"),
  ("La Paz"),
  ("Santa Cruz"),
  ("Baixada Santista"),
  ("Belém"),
  ("Belo Horizonte"),
  ("Brasília"),
  ("Campinas"),
  ("Campo Grande"),
  ("Cuiabá"),
  ("Curitiba"),
  ("Florianópolis"),
  ("Fortaleza"),
  ("Goiânia"),
  ("Grande São Luís"),
  ("Grande Vitória"),
  ("João Pessoa"),
  ("Maceió"),
  ("Manaus"),
  ("Natal"),
  ("Norte/Nordeste Catarinense"),
  ("Pôrto Alegre"),
  ("Recife"),
  ("Rio de Janeiro"),
  ("Salvador"),
  ("São Paulo"),
  ("Teresina"),
  ("Sofia"),
  ("Ouagadougou"),
  ("Phnum Pénh"),
  ("Phnom Penh"),
  ("Douala"),
  ("Yaoundé"),
  ("Calgary"),
  ("Edmonton"),
  ("Montréal"),
  ("Ottawa"),
  ("Gatineau"),
  ("Toronto"),
  ("Vancouver"),
  ("N'Djaména"),
  ("Santiago"),
  ("Valparaíso"),
  ("Anshan"),
  ("Anshun"),
  ("Anyang"),
  ("Baoding"),
  ("Baotou"),
  ("Beijing"),
  ("Bengbu"),
  ("Benxi"),
  ("Changchun"),
  ("Changde"),
  ("Changsha"),
  ("Changzhou"),
  ("Chengdu"),
  ("Chifeng"),
  ("Chongqing"),
  ("Dalian"),
  ("Dandong"),
  ("Daqing"),
  ("Datong"),
  ("Dongguan"),
  ("Foshan"),
  ("Fushun"),
  ("Fuxin"),
  ("Fuyang"),
  ("Fuzhou"),
  ("Guangzhou"),
  ("Guilin"),
  ("Guiyang"),
  ("Haerbin"),
  ("Handan"),
  ("Hangzhou"),
  ("Hefei"),
  ("Hengyang"),
  ("Heze"),
  ("Hohhot"),
  ("Huai'an"),
  ("Huaibei"),
  ("Huainan"),
  ("Huzhou"),
  ("Jiamusi"),
  ("Jiaozuo"),
  ("Jiaxing"),
  ("Jilin"),
  ("Jinan"),
  ("Jining"),
  ("Jinxi"),
  ("Jinzhou"),
  ("Jixi"),
  ("Kaifeng"),
  ("Kaohsiung"),
  ("Kunming"),
  ("Langfang"),
  ("Lanzhou"),
  ("Leshan"),
  ("Lianyungang"),
  ("Liaoyang"),
  ("Linfen"),
  ("Linyi"),
  ("Liuan"),
  ("Liupanshui"),
  ("Liuzhou"),
  ("Luoyang"),
  ("Luzhou"),
  ("Mianyang"),
  ("Mudanjiang"),
  ("Nanchang"),
  ("Nanchong"),
  ("Nanjing"),
  ("Nanning"),
  ("Nantong"),
  ("Nanyang"),
  ("Neijiang"),
  ("Ningbo"),
  ("Pingdingshan"),
  ("Pingxiang"),
  ("Qingdao"),
  ("Qinhuangdao"),
  ("Qiqihaer"),
  ("Quanzhou"),
  ("Shanghai"),
  ("Shangqiu"),
  ("Shantou"),
  ("Shaoxing"),
  ("Shenyang"),
  ("Shenzhen"),
  ("Shijiazhuang"),
  ("Suining"),
  ("Suzhou"),
  ("Taian"),
  ("Taichung"),
  ("Tainan"),
  ("Taipei"),
  ("Taiyuan"),
  ("Tangshan"),
  ("Tianjin"),
  ("Tianmen"),
  ("Tianshui"),
  ("Tongliao"),
  ("Ürümqi"),
  ("Wulumqi"),
  ("Weifang"),
  ("Wenzhou"),
  ("Wuhan"),
  ("Wuhu"),
  ("Wuxi"),
  ("Xiamen"),
  ("Xi'an"),
  ("Xiangfan"),
  ("Xiantao"),
  ("Xianyang"),
  ("Xingyi"),
  ("Xining"),
  ("Xinxiang"),
  ("Xinyang"),
  ("Xinyu"),
  ("Xuanzhou"),
  ("Xuzhou"),
  ("Yancheng"),
  ("Yantai"),
  ("Yibin"),
  ("Yichang"),
  ("Yichun"),
  ("Yinchuan"),
  ("Yingkou"),
  ("Yiyang"),
  ("Yongzhou"),
  ("Yuci"),
  ("Yueyang"),
  ("Yulin"),
  ("Zaozhuang"),
  ("Zhangjiakou"),
  ("Zhanjiang"),
  ("Zhaotong"),
  ("Zhengzhou"),
  ("Zhenjiang"),
  ("Zhuhai"),
  ("Zhuzhou"),
  ("Zibo"),
  ("Zigong"),
  ("Zunyi"),
  ("Hong Kong"),
  ("Barranquilla"),
  ("Bogotá"),
  ("Bucaramanga"),
  ("Cali"),
  ("Cartagena"),
  ("Medellín"),
  ("Brazzaville"),
  ("Kananga"),
  ("Kinshasa"),
  ("Lubumbashi"),
  ("Mbuji-Mayi"),
  ("San José"),
  ("Abidjan"),
  ("La Habana"),
  ("Havana"),
  ("Praha"),
  ("Prague"),
  ("København"),
  ("Copenhagen"),
  ("Santo Domingo"),
  ("Guayaquil"),
  ("Quito"),
  ("Al-Iskandariyah"),
  ("Alexandria"),
  ("Al-Qahirah"),
  ("Cairo"),
  ("San Salvador"),
  ("Addis Ababa"),
  ("Helsinki"),
  ("Bordeaux"),
  ("Lille"),
  ("Lyon"),
  ("Marseille"),
  ("Aix-en-Provence"),
  ("Nice-Cannes"),
  ("Paris"),
  ("Toulouse"),
  ("Tbilisi"),
  ("Berlin"),
  ("Hamburg"),
  ("Köln"),
  ("Cologne"),
  ("München"),
  ("Munich"),
  ("Accra"),
  ("Kumasi"),
  ("Athínai"),
  ("Athens"),
  ("Thessaloniki"),
  ("Ciudad de Guatemala"),
  ("Conakry"),
  ("Port-au-Prince"),
  ("Tegucigalpa"),
  ("Budapest"),
  ("Agra"),
  ("Ahmadabad"),
  ("Aligarh"),
  ("Allahabad"),
  ("Amritsar"),
  ("Asansol"),
  ("Aurangabad"),
  ("Bangalore"),
  ("Bareilly"),
  ("Bhiwandi"),
  ("Bhopal"),
  ("Bhubaneswar"),
  ("Chandigarh"),
  ("Chennai"),
  ("Madras"),
  ("Coimbatore"),
  ("Delhi"),
  ("New Delhi"),
  ("Dhanbad"),
  ("Durg"),
  ("Bhilainagar"),
  ("Faridabad"),
  ("Ghaziabad"),
  ("Guwahati"),
  ("Gauhati"),
  ("Gwalior"),
  ("Hubli-Dharwad"),
  ("Hyderabad"),
  ("Indore"),
  ("Jabalpur"),
  ("Jaipur"),
  ("Jalandhar"),
  ("Jammu"),
  ("Jamshedpur"),
  ("Jodhpur"),
  ("Kanpur"),
  ("Kochi"),
  ("Cochin"),
  ("Kolkata"),
  ("Calcutta"),
  ("Kota"),
  ("Kozhikode"),
  ("Calicut"),
  ("Lucknow"),
  ("Ludhiana"),
  ("Madurai"),
  ("Meerut"),
  ("Moradabad"),
  ("Mumbai"),
  ("Bombay"),
  ("Mysore"),
  ("Nagpur"),
  ("Nashik"),
  ("Patna"),
  ("Pune"),
  ("Poona"),
  ("Raipur"),
  ("Rajkot"),
  ("Ranchi"),
  ("Salem"),
  ("Solapur"),
  ("Srinagar"),
  ("Surat"),
  ("Thiruvananthapuram"),
  ("Tiruchirappalli"),
  ("Vadodara"),
  ("Varanasi"),
  ("Benares"),
  ("Vijayawada"),
  ("Visakhapatnam"),
  ("Bandar Lampung"),
  ("Bandung"),
  ("Bogor"),
  ("Jakarta"),
  ("Malang"),
  ("Medan"),
  ("Padang"),
  ("Palembang"),
  ("Pekan Baru"),
  ("Semarang"),
  ("Surabaya"),
  ("Ujung Pandang"),
  ("Ahvaz"),
  ("Esfahan"),
  ("Karaj"),
  ("Kermanshah"),
  ("Mashhad"),
  ("Qom"),
  ("Shiraz"),
  ("Tabriz"),
  ("Tehran"),
  ("Al-Basrah"),
  ("Basra"),
  ("Al-Mawsil"),
  ("Mosul"),
  ("Baghdad"),
  ("Irbil"),
  ("Erbil"),
  ("Dublin"),
  ("Hefa"),
  ("Haifa"),
  ("Tel Aviv-Yafo"),
  ("Milano"),
  ("Milan"),
  ("Napoli"),
  ("Naples"),
  ("Palermo"),
  ("Roma"),
  ("Rome"),
  ("Torino"),
  ("Turin"),
  ("Fukuoka"),
  ("Kitakyushu"),
  ("Hiroshima"),
  ("Kyoto"),
  ("Nagoya"),
  ("Osaka-Kobe"),
  ("Sapporo"),
  ("Sendai"),
  ("Tokyo"),
  ("Amman"),
  ("Almaty"),
  ("Mombasa"),
  ("Nairobi"),
  ("Al Kuwayt"),
  ("Kuwait City"),
  ("Bishkek"),
  ("Bayrut"),
  ("Beirut"),
  ("Monrovia"),
  ("Banghazi"),
  ("Tarabulus"),
  ("Tripoli"),
  ("Antananarivo"),
  ("Johore Bharu"),
  ("Klang"),
  ("Kuala Lumpur"),
  ("Bamako"),
  ("Aguascalientes"),
  ("Chihuahua"),
  ("Ciudad de México"),
  ("Ciudad Juárez"),
  ("Culiacán"),
  ("Guadalajara"),
  ("León de los Aldamas"),
  ("Mérida"),
  ("Mexicali"),
  ("Monterrey"),
  ("Puebla"),
  ("Querétaro"),
  ("Saltillo"),
  ("San Luis Potosí"),
  ("Tijuana"),
  ("Toluca de Lerdo"),
  ("Torreón"),
  ("Ulaanbaatar"),
  ("Dar-el-Beida"),
  ("Casablanca"),
  ("Fès"),
  ("Marrakech"),
  ("Rabat"),
  ("Maputo"),
  ("Mandalay"),
  ("Nay Pyi Taw"),
  ("Yangon"),
  ("Kathmandu"),
  ("Amsterdam"),
  ("Rotterdam"),
  ("Auckland"),
  ("Managua"),
  ("Niamey"),
  ("Abuja"),
  ("Benin City"),
  ("Ibadan"),
  ("Ilorin"),
  ("Kaduna"),
  ("Kano"),
  ("Lagos"),
  ("Maiduguri"),
  ("Ogbomosho"),
  ("Port Harcourt"),
  ("Zaria"),
  ("Hamhung"),
  ("N'ampo"),
  ("P'yongyang"),
  ("Oslo"),
  ("Faisalabad"),
  ("Gujranwala"),
  ("Hyderabad"),
  ("Islamabad"),
  ("Karachi"),
  ("Lahore"),
  ("Multan"),
  ("Peshawar"),
  ("Quetta"),
  ("Rawalpindi"),
  ("Ciudad de Panamá"),
  ("Asunción"),
  ("Arequipa"),
  ("Lima"),
  ("Cebu"),
  ("Davao"),
  ("Manila"),
  ("Zamboanga"),
  ("Kraków"),
  ("Cracow"),
  ("Lódz"),
  ("Warszawa"),
  ("Warsaw"),
  ("Lisboa"),
  ("Lisbon"),
  ("Porto"),
  ("San Juan"),
  ("Bucuresti"),
  ("Bucharest"),
  ("Chelyabinsk"),
  ("Kazan"),
  ("Krasnoyarsk"),
  ("Moskva"),
  ("Moscow"),
  ("Nizhniy Novgorod"),
  ("Novosibirsk"),
  ("Omsk"),
  ("Perm"),
  ("Rostov-na-Donu"),
  ("Samara"),
  ("Sankt Peterburg"),
  ("Saratov"),
  ("Ufa"),
  ("Volgograd"),
  ("Voronezh"),
  ("Yekaterinburg"),
  ("Kigali"),
  ("Ad-Dammam"),
  ("Al-Madinah"),
  ("Medina"),
  ("Ar-Riyadh"),
  ("Riyadh"),
  ("Jiddah"),
  ("Makkah"),
  ("Mecca"),
  ("Dakar"),
  ("Beograd"),
  ("Belgrade"),
  ("Freetown"),
  ("Singapore"),
  ("Muqdisho"),
  ("Mogadishu"),
  ("Cape Town"),
  ("Durban"),
  ("Ekurhuleni"),
  ("East Rand"),
  ("Johannesburg"),
  ("Port Elizabeth"),
  ("Pretoria"),
  ("Vereeniging"),
  ("Bucheon"),
  ("Busan"),
  ("Daegu"),
  ("Daejon"),
  ("Goyang"),
  ("Gwangju"),
  ("Incheon"),
  ("Seongnam"),
  ("Seoul"),
  ("Suweon"),
  ("Ulsan"),
  ("Barcelona"),
  ("Madrid"),
  ("Valencia"),
  ("Al-Khartum"),
  ("Khartoum"),
  ("Stockholm"),
  ("Zürich"),
  ("Zurich"),
  ("Dimashq"),
  ("Damascus"),
  ("Halab"),
  ("Aleppo"),
  ("Hims"),
  ("Homs"),
  ("Dar es Salaam"),
  ("Krung Thep"),
  ("Bangkok"),
  ("Lomé"),
  ("Adana"),
  ("Ankara"),
  ("Antalya"),
  ("Bursa"),
  ("Gaziantep"),
  ("Istanbul"),
  ("Izmir"),
  ("Konya"),
  ("Kampala"),
  ("Dnipropetrovs'k"),
  ("Donets'k"),
  ("Kharkiv"),
  ("Kyiv"),
  ("Kiev"),
  ("Odesa"),
  ("Zaporizhzhya"),
  ("Dubayy"),
  ("Dubai"),
  ("Birmingham"),
  ("Glasgow"),
  ("Liverpool"),
  ("London"),
  ("Manchester"),
  ("Newcastle upon Tyne"),
  ("West Yorkshire"),
  ("Montevideo"),
  ("Atlanta"),
  ("Austin"),
  ("Baltimore"),
  ("Boston"),
  ("Bridgeport"),
  ("Stamford"),
  ("Buffalo"),
  ("Charlotte"),
  ("Chicago"),
  ("Cincinnati"),
  ("Cleveland"),
  ("Columbus, Ohio"),
  ("Dallas-Fort Worth"),
  ("Dayton"),
  ("Denver-Aurora"),
  ("Detroit"),
  ("El Paso"),
  ("Hartford"),
  ("Honolulu"),
  ("Houston"),
  ("Indianapolis"),
  ("Jacksonville"),
  ("Kansas City"),
  ("Las Vegas"),
  ("Los Angeles"),
  ("Louisville"),
  ("Memphis"),
  ("Miami"),
  ("Milwaukee"),
  ("Minneapolis"),
  ("St. Paul"),
  ("Nashville"),
  ("Davidson"),
  ("New Orleans"),
  ("New York"),
  ("New York City"),
  ("Newark"),
  ("Oklahoma City"),
  ("Orlando"),
  ("Philadelphia"),
  ("Phoenix"),
  ("Mesa"),
  ("Pittsburgh"),
  ("Portland"),
  ("Providence"),
  ("Richmond"),
  ("Riverside"),
  ("San Bernardino"),
  ("Rochester"),
  ("Sacramento"),
  ("Salt Lake City"),
  ("San Antonio"),
  ("San Diego"),
  ("San Francisco"),
  ("Oakland"),
  ("San Jose"),
  ("Seattle"),
  ("St. Louis"),
  ("Tampa"),
  ("St. Petersburg"),
  ("Tucson"),
  ("Virginia Beach"),
  ("Washington, D.C."),
  ("Washington D.C."),
  ("Tashkent"),
  ("Barquisimeto"),
  ("Caracas"),
  ("Maracaibo"),
  ("Maracay"),
  ("Valencia"),
  ("Hà Noi"),
  ("Hai Phòng"),
  ("Thành Pho Ho Chí Minh"),
  ("Al-Hudaydah"),
  ("Sana'a'"),
  ("Ta'izz"),
  ("Lusaka"),
  ("Harare")
);
CreateDict(
    "name" => "location/_depr_cities/majorCity_world.dict",
    "table" => "location/_depr_cities/majorCity_world.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/_depr_cities/stateCapitals-us.dict'
CreateTable(
  "location/_depr_cities/stateCapitals-us.dict__TABLE",
  ("entry" => "Text"),
  ("Montgomery"),
  ("Juneau"),
  ("Phoenix"),
  ("Little Rock"),
  ("Sacramento"),
  ("Denver"),
  ("Hartford"),
  ("Dover"),
  ("Tallahassee"),
  ("Atlanta"),
  ("Honolulu"),
  ("Boise"),
  ("Springfield"),
  ("Indianapolis"),
  ("Des Moines"),
  ("Topeka"),
  ("Frankfort"),
  ("Baton Rouge"),
  ("Augusta"),
  ("Annapolis"),
  ("Boston"),
  ("Lansing"),
  ("Saint Paul"),
  ("St. Paul"),
  ("St Paul"),
  ("Jefferson City"),
  ("Helena"),
  ("Carson City"),
  ("Concord"),
  ("Trenton"),
  ("Santa Fe"),
  ("Albany"),
  ("Raleigh"),
  ("Bismarck"),
  ("Columbus"),
  ("Oklahoma City"),
  ("Salem"),
  ("Harrisburg"),
  ("Providence"),
  ("Columbia"),
  ("Pierre"),
  ("Nashville"),
  ("Austin"),
  ("Salt Lake City"),
  ("Montpelier"),
  ("Richmond"),
  ("Olympia"),
  ("Charleston"),
  ("Madison"),
  ("Cheyenne")
);
CreateDict(
    "name" => "location/_depr_cities/stateCapitals-us.dict",
    "table" => "location/_depr_cities/stateCapitals-us.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/canadaStateList.dict'
CreateTable(
  "location/canadaStateList.dict__TABLE",
  ("entry" => "Text"),
  ("BRITISH COLUMBIA"),
  ("ALBERTA"),
  ("MANITOBA"),
  ("ONTARIO"),
  ("NEWFOUNDLAND"),
  ("QUEBEC"),
  ("SASKATCHEWAN")
);
CreateDict(
    "name" => "location/canadaStateList.dict",
    "table" => "location/canadaStateList.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/cities.dict'
CreateTable(
  "location/cities.dict__TABLE",
  ("entry" => "Text"),
  ("Abbeville"),
  ("Adamsville"),
  ("Addison"),
  ("Akron"),
  ("Alabaster"),
  ("Albertville"),
  ("Alexander City"),
  ("Alexandria"),
  ("Aliceville"),
  ("Allgood"),
  ("Altoona"),
  ("Andalusia"),
  ("Anderson"),
  ("Anniston"),
  ("Arab"),
  ("Ardmore"),
  ("Argo"),
  ("Ariton"),
  ("Arley"),
  ("Ashford"),
  ("Ashland"),
  ("Ashville"),
  ("Athens"),
  ("Atmore"),
  ("Attalla"),
  ("Auburn"),
  ("Autaugaville"),
  ("Avon"),
  ("Babbie"),
  ("Baileyton"),
  ("Banks"),
  ("Bay Minette"),
  ("Bayou La Batre"),
  ("Bear Creek"),
  ("Beatrice"),
  ("Beaverton"),
  ("Belk"),
  ("Benton"),
  ("Berry"),
  ("Bessemer"),
  ("Billingsley"),
  ("Birmingham"),
  ("Black"),
  ("Blountsville"),
  ("Blue Mountain"),
  ("Blue Ridge"),
  ("Blue Springs"),
  ("Boaz"),
  ("Boligee"),
  ("Bon Air"),
  ("Branchville"),
  ("Brantley"),
  ("Brent"),
  ("Brewton"),
  ("Bridgeport"),
  ("Brighton"),
  ("Brilliant"),
  ("Brookside"),
  ("Brookwood"),
  ("Brundidge"),
  ("Butler"),
  ("Bynum"),
  ("Cahaba Heights"),
  ("Calera"),
  ("Camden"),
  ("Camp Hill"),
  ("Carbon Hill"),
  ("Cardiff"),
  ("Carolina"),
  ("Carrollton"),
  ("Castleberry"),
  ("Cedar Bluff"),
  ("Center Point"),
  ("Centre"),
  ("Centreville"),
  ("Chalkville"),
  ("Chatom"),
  ("Chelsea"),
  ("Cherokee"),
  ("Chickasaw"),
  ("Childersburg"),
  ("Citronelle"),
  ("Clanton"),
  ("Clay"),
  ("Clayhatchee"),
  ("Clayton"),
  ("Cleveland"),
  ("Clio"),
  ("Coaling"),
  ("Coffee Springs"),
  ("Coffeeville"),
  ("Coker"),
  ("Collinsville"),
  ("Colony"),
  ("Columbia"),
  ("Columbiana"),
  ("Concord"),
  ("Coosada"),
  ("Cordova"),
  ("Cottonwood"),
  ("County Line"),
  ("Courtland"),
  ("Cowarts"),
  ("Creola"),
  ("Crossville"),
  ("Cuba"),
  ("Cullman"),
  ("Dadeville"),
  ("Daleville"),
  ("Daphne"),
  ("Dauphin Island"),
  ("Daviston"),
  ("Dayton"),
  ("Deatsville"),
  ("Decatur"),
  ("Demopolis"),
  ("Detroit"),
  ("Dodge City"),
  ("Dora"),
  ("Dothan"),
  ("Double Springs"),
  ("Douglas"),
  ("Dozier"),
  ("Dutton"),
  ("East Brewton"),
  ("Eclectic"),
  ("Edgewater"),
  ("Edwardsville"),
  ("Elba"),
  ("Elberta"),
  ("Eldridge"),
  ("Elkmont"),
  ("Elmore"),
  ("Emelle"),
  ("Enterprise"),
  ("Epes"),
  ("Ethelsville"),
  ("Eufaula"),
  ("Eunola"),
  ("Eutaw"),
  ("Eva"),
  ("Evergreen"),
  ("Excel"),
  ("Fairfield"),
  ("Fairhope"),
  ("Fairview"),
  ("Falkville"),
  ("Faunsdale"),
  ("Fayette"),
  ("Five Points"),
  ("Flomaton"),
  ("Florala"),
  ("Florence"),
  ("Foley"),
  ("Forestdale"),
  ("Forkland"),
  ("Fort Deposit"),
  ("Fort Payne"),
  ("Fort Rucker"),
  ("Franklin"),
  ("Frisco City"),
  ("Fruithurst"),
  ("Fulton"),
  ("Fultondale"),
  ("Fyffe"),
  ("Gadsden"),
  ("Gainesville"),
  ("Gantt"),
  ("Gantts Quarry"),
  ("Garden City"),
  ("Gardendale"),
  ("Gaylesville"),
  ("Geiger"),
  ("Geneva"),
  ("Georgiana"),
  ("Geraldine"),
  ("Gilbertown"),
  ("Glen Allen"),
  ("Glencoe"),
  ("Glenwood"),
  ("Goldville"),
  ("Good Hope"),
  ("Goodwater"),
  ("Gordo"),
  ("Gordon"),
  ("Gordonville"),
  ("Goshen"),
  ("Grand Bay"),
  ("Grant"),
  ("Grayson Valley"),
  ("Graysville"),
  ("Greensboro"),
  ("Greenville"),
  ("Grimes"),
  ("Grove Hill"),
  ("Guin"),
  ("Gulf Shores"),
  ("Guntersville"),
  ("Gurley"),
  ("Gu-Win"),
  ("Hackleburg"),
  ("Haleburg"),
  ("Haleyville"),
  ("Hamilton"),
  ("Hammondville"),
  ("Hanceville"),
  ("Harpersville"),
  ("Hartford"),
  ("Hartselle"),
  ("Harvest"),
  ("Hayden"),
  ("Hayneville"),
  ("Hazel Green"),
  ("Headland"),
  ("Heath"),
  ("Heflin"),
  ("Helena"),
  ("Henagar"),
  ("Highland Lake"),
  ("Hillsboro"),
  ("Hobson City"),
  ("Hodges"),
  ("Hokes Bluff"),
  ("Holly Pond"),
  ("Hollywood"),
  ("Holt"),
  ("Homewood"),
  ("Hoover"),
  ("Horn Hill"),
  ("Hueytown"),
  ("Huguley"),
  ("Huntsville"),
  ("Hurtsboro"),
  ("Hytop"),
  ("Ider"),
  ("Indian Springs Village"),
  ("Irondale"),
  ("Jackson"),
  ("Jacksons' Gap"),
  ("Jacksonville"),
  ("Jasper"),
  ("Jemison"),
  ("Kansas"),
  ("Kennedy"),
  ("Killen"),
  ("Kimberly"),
  ("Kinsey"),
  ("Kinston"),
  ("Ladonia"),
  ("La Fayette"),
  ("Lake Purdy"),
  ("Lakeview"),
  ("Lake View"),
  ("Lanett"),
  ("Langston"),
  ("Leeds"),
  ("Leesburg"),
  ("Leighton"),
  ("Lester"),
  ("Level Plains"),
  ("Lexington"),
  ("Libertyville"),
  ("Lincoln"),
  ("Linden"),
  ("Lineville"),
  ("Lipscomb"),
  ("Lisman"),
  ("Littleville"),
  ("Livingston"),
  ("Loachapoka"),
  ("Lockhart"),
  ("Locust Fork"),
  ("Louisville"),
  ("Lowndesboro"),
  ("Loxley"),
  ("Luverne"),
  ("Lynn"),
  ("McDonald Chapel"),
  ("Macedonia"),
  ("McIntosh"),
  ("McKenzie"),
  ("McMullen"),
  ("Madison"),
  ("Madrid"),
  ("Malvern"),
  ("Maplesville"),
  ("Margaret"),
  ("Marion"),
  ("Maytown"),
  ("Meadowbrook"),
  ("Memphis"),
  ("Mentone"),
  ("Meridianville"),
  ("Midfield"),
  ("Midland City"),
  ("Midway"),
  ("Mignon"),
  ("Millbrook"),
  ("Millport"),
  ("Millry"),
  ("Minor"),
  ("Mobile"),
  ("Monroeville"),
  ("Montevallo"),
  ("Montgomery"),
  ("Moody"),
  ("Moores Mill"),
  ("Mooresville"),
  ("Morris"),
  ("Mosses"),
  ("Moulton"),
  ("Moundville"),
  ("Mountainboro"),
  ("Mountain Brook"),
  ("Mount Olive"),
  ("Mount Vernon"),
  ("Mulga"),
  ("Munford"),
  ("Muscle Shoals"),
  ("Myrtlewood"),
  ("Napier Field"),
  ("Natural Bridge"),
  ("Nauvoo"),
  ("Nectar"),
  ("Needham"),
  ("Newbern"),
  ("New Brockton"),
  ("New Hope"),
  ("New Market"),
  ("New Site"),
  ("Newton"),
  ("Newville"),
  ("North Bibb"),
  ("North Courtland"),
  ("North Johns"),
  ("Northport"),
  ("Notasulga"),
  ("Oak Grove"),
  ("Oak Hill"),
  ("Oakman"),
  ("Odenville"),
  ("Ohatchee"),
  ("Oneonta"),
  ("Onycha"),
  ("Opelika"),
  ("Opp"),
  ("Orange Beach"),
  ("Orrville"),
  ("Owens Cross Roads"),
  ("Oxford"),
  ("Ozark"),
  ("Paint Rock"),
  ("Parrish"),
  ("Pelham"),
  ("Pell City"),
  ("Pennington"),
  ("Petrey"),
  ("Phenix City"),
  ("Phil Campbell"),
  ("Pickensville"),
  ("Piedmont"),
  ("Pike Road"),
  ("Pinckard"),
  ("Pine Apple"),
  ("Pine Hill"),
  ("Pine Ridge"),
  ("Pinson"),
  ("Pisgah"),
  ("Pleasant Grove"),
  ("Pleasant Groves"),
  ("Point Clear"),
  ("Pollard"),
  ("Powell"),
  ("Prattville"),
  ("Priceville"),
  ("Prichard"),
  ("Providence"),
  ("Ragland"),
  ("Rainbow City"),
  ("Rainsville"),
  ("Ranburne"),
  ("Red Bay"),
  ("Red Level"),
  ("Redstone Arsenal"),
  ("Reece City"),
  ("Reform"),
  ("Rehobeth"),
  ("Repton"),
  ("Ridgeville"),
  ("River Falls"),
  ("Riverside"),
  ("Riverview"),
  ("Roanoke"),
  ("Robertsdale"),
  ("Rock Creek"),
  ("Rockford"),
  ("Rock Mills"),
  ("Rogersville"),
  ("Rosa"),
  ("Russellville"),
  ("Rutledge"),
  ("St. Florian"),
  ("Saks"),
  ("Samson"),
  ("Sand Rock"),
  ("Sanford"),
  ("Saraland"),
  ("Sardis City"),
  ("Satsuma"),
  ("Scottsboro"),
  ("Section"),
  ("Selma"),
  ("Selmont-West Selmont"),
  ("Sheffield"),
  ("Shiloh"),
  ("Shorter"),
  ("Silas"),
  ("Silverhill"),
  ("Sipsey"),
  ("Skyline"),
  ("Slocomb"),
  ("Smiths"),
  ("Smoke Rise"),
  ("Snead"),
  ("Somerville"),
  ("Southside"),
  ("South Vinemont"),
  ("Spanish Fort"),
  ("Springville"),
  ("Steele"),
  ("Stevenson"),
  ("Sulligent"),
  ("Sumiton"),
  ("Summerdale"),
  ("Susan Moore"),
  ("Sweet Water"),
  ("Sylacauga"),
  ("Sylvania"),
  ("Sylvan Springs"),
  ("Talladega"),
  ("Talladega Springs"),
  ("Tallassee"),
  ("Tarrant"),
  ("Taylor"),
  ("Theodore"),
  ("Thomaston"),
  ("Thomasville"),
  ("Thorsby"),
  ("Tillmans Corner"),
  ("Town Creek"),
  ("Toxey"),
  ("Trafford"),
  ("Triana"),
  ("Trinity"),
  ("Troy"),
  ("Trussville"),
  ("Tuscaloosa"),
  ("Tuscumbia"),
  ("Tuskegee"),
  ("Underwood-Petersville"),
  ("Union"),
  ("Union Grove"),
  ("Union Springs"),
  ("Uniontown"),
  ("Valley"),
  ("Valley Head"),
  ("Vance"),
  ("Vernon"),
  ("Vestavia Hills"),
  ("Vina"),
  ("Vincent"),
  ("Vredenburgh"),
  ("Wadley"),
  ("Waldo"),
  ("Walnut Grove"),
  ("Warrior"),
  ("Waterloo"),
  ("Waverly"),
  ("Weaver"),
  ("Webb"),
  ("Wedowee"),
  ("West Blocton"),
  ("West End-Cobb Town"),
  ("West Jefferson"),
  ("West Point"),
  ("Wetumpka"),
  ("White Hall"),
  ("Wilsonville"),
  ("Wilton"),
  ("Winfield"),
  ("Woodland"),
  ("Woodville"),
  ("Yellow Bluff"),
  ("York"),
  ("Adak"),
  ("Akhiok"),
  ("Akiachak"),
  ("Akiak"),
  ("Akutan"),
  ("Alakanuk"),
  ("Alatna"),
  ("Alcan Border"),
  ("Aleknagik"),
  ("Aleneva"),
  ("Allakaket"),
  ("Alpine"),
  ("Ambler"),
  ("Anaktuvuk Pass"),
  ("Anchorage municipality"),
  ("Anchor Point"),
  ("Anderson"),
  ("Angoon"),
  ("Aniak"),
  ("Anvik"),
  ("Arctic Village"),
  ("Atka"),
  ("Atmautluak"),
  ("Atqasuk"),
  ("Attu Station"),
  ("Barrow"),
  ("Bear Creek"),
  ("Beaver"),
  ("Beluga"),
  ("Bethel"),
  ("Bettles"),
  ("Big Delta"),
  ("Big Lake"),
  ("Birch Creek"),
  ("Brevig Mission"),
  ("Buckland"),
  ("Buffalo Soapstone"),
  ("Butte"),
  ("Cantwell"),
  ("Central"),
  ("Chalkyitsik"),
  ("Chase"),
  ("Chefornak"),
  ("Chenega"),
  ("Chevak"),
  ("Chickaloon"),
  ("Chicken"),
  ("Chignik"),
  ("Chignik Lagoon"),
  ("Chignik Lake"),
  ("Chiniak"),
  ("Chisana"),
  ("Chistochina"),
  ("Chitina"),
  ("Chuathbaluk"),
  ("Circle"),
  ("Clam Gulch"),
  ("Clark's Point"),
  ("Coffman Cove"),
  ("Cohoe"),
  ("Cold Bay"),
  ("Coldfoot"),
  ("College"),
  ("Cooper Landing"),
  ("Copper Center"),
  ("Copperville"),
  ("Cordova"),
  ("Covenant Life"),
  ("Craig"),
  ("Crooked Creek"),
  ("Crown Point"),
  ("Cube Cove"),
  ("Deering"),
  ("Delta Junction"),
  ("Deltana"),
  ("Diamond Ridge"),
  ("Dillingham"),
  ("Diomede"),
  ("Dot Lake"),
  ("Dot Lake Village"),
  ("Dry Creek"),
  ("Eagle"),
  ("Eagle Village"),
  ("Edna Bay"),
  ("Eek"),
  ("Egegik"),
  ("Eielson AFB"),
  ("Ekwok"),
  ("Elfin Cove"),
  ("Elim"),
  ("Emmonak"),
  ("Ester"),
  ("Evansville"),
  ("Excursion Inlet"),
  ("Fairbanks"),
  ("False Pass"),
  ("Farm Loop"),
  ("Ferry"),
  ("Fishhook"),
  ("Flat"),
  ("Fort Greely"),
  ("Fort Yukon"),
  ("Four Mile Road"),
  ("Fox"),
  ("Fox River"),
  ("Fritz Creek"),
  ("Funny River"),
  ("Gakona"),
  ("Galena"),
  ("Gambell"),
  ("Game Creek"),
  ("Gateway"),
  ("Glacier View"),
  ("Glennallen"),
  ("Golovin"),
  ("Goodnews Bay"),
  ("Grayling"),
  ("Gulkana"),
  ("Gustavus"),
  ("Haines"),
  ("Halibut Cove"),
  ("Happy Valley"),
  ("Harding-Birch Lakes"),
  ("Healy"),
  ("Healy Lake"),
  ("Hobart Bay"),
  ("Hollis"),
  ("Holy Cross"),
  ("Homer"),
  ("Hoonah"),
  ("Hooper Bay"),
  ("Hope"),
  ("Houston"),
  ("Hughes"),
  ("Huslia"),
  ("Hydaburg"),
  ("Hyder"),
  ("Igiugig"),
  ("Iliamna"),
  ("Ivanof Bay"),
  ("Juneau"),
  ("Kachemak"),
  ("Kake"),
  ("Kaktovik"),
  ("Kalifornsky"),
  ("Kaltag"),
  ("Karluk"),
  ("Kasaan"),
  ("Kasigluk"),
  ("Kasilof"),
  ("Kenai"),
  ("Kenny Lake"),
  ("Ketchikan"),
  ("Kiana"),
  ("King Cove"),
  ("King Salmon"),
  ("Kipnuk"),
  ("Kivalina"),
  ("Klawock"),
  ("Klukwan"),
  ("Knik-Fairview"),
  ("Knik River"),
  ("Kobuk"),
  ("Kodiak"),
  ("Kodiak Station"),
  ("Kokhanok"),
  ("Koliganek"),
  ("Kongiganak"),
  ("Kotlik"),
  ("Kotzebue"),
  ("Koyuk"),
  ("Koyukuk"),
  ("Kupreanof"),
  ("Kwethluk"),
  ("Kwigillingok"),
  ("Lake Louise"),
  ("Lake Minchumina"),
  ("Lakes"),
  ("Larsen Bay"),
  ("Lazy Mountain"),
  ("Levelock"),
  ("Lime Village"),
  ("Livengood"),
  ("Lowell Point"),
  ("Lower Kalskag"),
  ("Lutak"),
  ("McCarthy"),
  ("McGrath"),
  ("McKinley Park"),
  ("Manley Hot Springs"),
  ("Manokotak"),
  ("Marshall"),
  ("Meadow Lakes"),
  ("Mekoryuk"),
  ("Mendeltna"),
  ("Mentasta Lake"),
  ("Metlakatla"),
  ("Meyers Chuck"),
  ("Miller Landing"),
  ("Minto"),
  ("Moose Creek"),
  ("Moose Pass"),
  ("Mosquito Lake"),
  ("Mountain Village"),
  ("Mud Bay"),
  ("Naknek"),
  ("Nanwalek"),
  ("Napakiak"),
  ("Napaskiak"),
  ("Naukati Bay"),
  ("Nelchina"),
  ("Nelson Lagoon"),
  ("Nenana"),
  ("New Allakaket"),
  ("Newhalen"),
  ("New Stuyahok"),
  ("Newtok"),
  ("Nightmute"),
  ("Nikiski"),
  ("Nikolaevsk"),
  ("Nikolai"),
  ("Nikolski"),
  ("Ninilchik"),
  ("Noatak"),
  ("Nome"),
  ("Nondalton"),
  ("Noorvik"),
  ("North Pole"),
  ("Northway"),
  ("Northway Junction"),
  ("Northway Village"),
  ("Nuiqsut"),
  ("Nulato"),
  ("Nunapitchuk"),
  ("Old Harbor"),
  ("Oscarville"),
  ("Ouzinkie"),
  ("Palmer"),
  ("Paxson"),
  ("Pedro Bay"),
  ("Pelican"),
  ("Perryville"),
  ("Petersburg"),
  ("Petersville"),
  ("Pilot Point"),
  ("Pilot Station"),
  ("Pitkas Point"),
  ("Platinum"),
  ("Pleasant Valley"),
  ("Point Baker"),
  ("Point Hope"),
  ("Point Lay"),
  ("Point MacKenzie"),
  ("Pope-Vannoy Landing"),
  ("Portage Creek"),
  ("Port Alexander"),
  ("Port Alsworth"),
  ("Port Clarence"),
  ("Port Graham"),
  ("Port Heiden"),
  ("Port Lions"),
  ("Port Protection"),
  ("Primrose"),
  ("Prudhoe Bay"),
  ("Quinhagak"),
  ("Rampart"),
  ("Red Devil"),
  ("Red Dog Mine"),
  ("Ridgeway"),
  ("Ruby"),
  ("Russian Mission"),
  ("St. George"),
  ("St. Mary's"),
  ("St. Michael"),
  ("St. Paul"),
  ("Salamatof"),
  ("Salcha"),
  ("Sand Point"),
  ("Savoonga"),
  ("Saxman"),
  ("Scammon Bay"),
  ("Selawik"),
  ("Seldovia"),
  ("Seldovia Village"),
  ("Seward"),
  ("Shageluk"),
  ("Shaktoolik"),
  ("Sheldon Point (Nunam Iqua)"),
  ("Shishmaref"),
  ("Shungnak"),
  ("Silver Springs"),
  ("Sitka"),
  ("Skagway"),
  ("Skwentna"),
  ("Slana"),
  ("Sleetmute"),
  ("Soldotna"),
  ("South Naknek"),
  ("Stebbins"),
  ("Sterling"),
  ("Stevens Village"),
  ("Stony River"),
  ("Sunrise"),
  ("Susitna"),
  ("Sutton-Alpine"),
  ("Takotna"),
  ("Talkeetna"),
  ("Tanacross"),
  ("Tanaina"),
  ("Tanana"),
  ("Tatitlek"),
  ("Tazlina"),
  ("Teller"),
  ("Tenakee Springs"),
  ("Tetlin"),
  ("Thoms Place"),
  ("Thorne Bay"),
  ("Togiak"),
  ("Tok"),
  ("Toksook Bay"),
  ("Tolsona"),
  ("Tonsina"),
  ("Trapper Creek"),
  ("Tuluksak"),
  ("Tuntutuliak"),
  ("Tununak"),
  ("Twin Hills"),
  ("Two Rivers"),
  ("Tyonek"),
  ("Ugashik"),
  ("Unalakleet"),
  ("Unalaska"),
  ("Upper Kalskag"),
  ("Valdez"),
  ("Venetie"),
  ("Wainwright"),
  ("Wales"),
  ("Wasilla"),
  ("Whale Pass"),
  ("White Mountain"),
  ("Whitestone Logging Camp"),
  ("Whittier"),
  ("Willow"),
  ("Willow Creek"),
  ("Wiseman"),
  ("Womens Bay"),
  ("Wrangell"),
  ("Yakutat"),
  ("Ajo"),
  ("Ak-Chin Village"),
  ("Amado"),
  ("Apache Junction"),
  ("Arizona City"),
  ("Arizona Village"),
  ("Ash Fork"),
  ("Avondale"),
  ("Avra Valley"),
  ("Bagdad"),
  ("Benson"),
  ("Big Park"),
  ("Bisbee"),
  ("Bitter Springs"),
  ("Black Canyon City"),
  ("Blackwater"),
  ("Bluewater"),
  ("Bouse"),
  ("Buckeye"),
  ("Bullhead City"),
  ("Burnside"),
  ("Cameron"),
  ("Camp Verde"),
  ("Canyon Day"),
  ("Carefree"),
  ("Casa Grande"),
  ("Casas Adobes"),
  ("Catalina"),
  ("Catalina Foothills"),
  ("Cave Creek"),
  ("Central Heights-Midland City"),
  ("Chandler"),
  ("Chilchinbito"),
  ("Chinle"),
  ("Chino Valley"),
  ("Chuichu"),
  ("Cibecue"),
  ("Cibola"),
  ("Clarkdale"),
  ("Claypool"),
  ("Clifton"),
  ("Colorado City"),
  ("Congress"),
  ("Coolidge"),
  ("Cordes Lakes"),
  ("Cornville"),
  ("Corona de Tucson"),
  ("Cottonwood"),
  ("Cottonwood-Verde Village"),
  ("Dennehotso"),
  ("Desert Hills"),
  ("Dewey-Humboldt"),
  ("Dilkon"),
  ("Dolan Springs"),
  ("Douglas"),
  ("Drexel-Alvernon"),
  ("Drexel Heights"),
  ("Dudleyville"),
  ("Duncan"),
  ("Eagar"),
  ("East Fork"),
  ("East Sahuarita"),
  ("Ehrenberg"),
  ("Elgin"),
  ("El Mirage"),
  ("Eloy"),
  ("First Mesa"),
  ("Flagstaff"),
  ("Florence"),
  ("Flowing Wells"),
  ("Fort Defiance"),
  ("Fortuna Foothills"),
  ("Fountain Hills"),
  ("Fredonia"),
  ("Gadsden"),
  ("Ganado"),
  ("Gila Bend"),
  ("Gilbert"),
  ("Gisela"),
  ("Glendale"),
  ("Globe"),
  ("Gold Camp"),
  ("Golden Valley"),
  ("Goodyear"),
  ("Grand Canyon Village"),
  ("Greasewood"),
  ("Green Valley"),
  ("Guadalupe"),
  ("Hayden"),
  ("Heber-Overgaard"),
  ("Holbrook"),
  ("Hotevilla-Bacavi"),
  ("Houck"),
  ("Huachuca City"),
  ("Jeddito"),
  ("Jerome"),
  ("Kachina Village"),
  ("Kaibab"),
  ("Kaibito"),
  ("Kayenta"),
  ("Keams Canyon"),
  ("Kearny"),
  ("Kingman"),
  ("Kykotsmovi Village"),
  ("Lake Havasu City"),
  ("Lake Montezuma"),
  ("Lechee"),
  ("Leupp"),
  ("Litchfield Park"),
  ("Littletown"),
  ("Lukachukai"),
  ("McNary"),
  ("Mammoth"),
  ("Many Farms"),
  ("Marana"),
  ("Maricopa"),
  ("Mayer"),
  ("Mesa"),
  ("Mesquite Creek"),
  ("Miami"),
  ("Moenkopi"),
  ("Mohave Valley"),
  ("Mojave Ranch Estates"),
  ("Morenci"),
  ("Mountainaire"),
  ("Munds Park"),
  ("Naco"),
  ("Nazlini"),
  ("New Kingman-Butler"),
  ("New River"),
  ("Nogales"),
  ("Oljato-Monument Valley"),
  ("Oracle"),
  ("Oro Valley"),
  ("Page"),
  ("Paradise Valley"),
  ("Parker"),
  ("Parker Strip"),
  ("Parks"),
  ("Patagonia"),
  ("Paulden"),
  ("Payson"),
  ("Peach Springs"),
  ("Peeples Valley"),
  ("Peoria"),
  ("Peridot"),
  ("Phoenix"),
  ("Picture Rocks"),
  ("Pima"),
  ("Pine"),
  ("Pinetop-Lakeside"),
  ("Pinon"),
  ("Pirtleville"),
  ("Pisinemo"),
  ("Poston"),
  ("Prescott"),
  ("Prescott Valley"),
  ("Quartzsite"),
  ("Queen Creek"),
  ("Queen Valley"),
  ("Red Mesa"),
  ("Rio Rico Northeast"),
  ("Rio Rico Northwest"),
  ("Rio Rico Southeast"),
  ("Rio Rico Southwest"),
  ("Rio Verde"),
  ("Rock Point"),
  ("Rough Rock"),
  ("Round Rock"),
  ("Sacaton"),
  ("Safford"),
  ("Sahuarita"),
  ("St. David"),
  ("St. Johns"),
  ("St. Michaels"),
  ("Salome"),
  ("San Carlos"),
  ("San Luis"),
  ("San Manuel"),
  ("Santan"),
  ("Santa Rosa"),
  ("Sawmill"),
  ("Scottsdale"),
  ("Second Mesa"),
  ("Sedona"),
  ("Seligman"),
  ("Sells"),
  ("Shongopovi"),
  ("Shonto"),
  ("Show Low"),
  ("Sierra Vista"),
  ("Sierra Vista Southeast"),
  ("Snowflake"),
  ("Somerton"),
  ("Sonoita"),
  ("South Tucson"),
  ("Springerville"),
  ("Spring Valley"),
  ("Stanfield"),
  ("Steamboat"),
  ("Strawberry"),
  ("Summit"),
  ("Sun City"),
  ("Sun City West"),
  ("Sun Lakes"),
  ("Sun Valley"),
  ("Supai"),
  ("Superior"),
  ("Surprise"),
  ("Swift Trail Junction"),
  ("Tacna"),
  ("Tanque Verde"),
  ("Taylor"),
  ("Teec Nos Pos"),
  ("Tempe"),
  ("Thatcher"),
  ("Three Points"),
  ("Tolleson"),
  ("Tombstone"),
  ("Tonalea"),
  ("Tonto Basin"),
  ("Top-of-the-World"),
  ("Tortolita"),
  ("Tsaile"),
  ("Tubac"),
  ("Tuba City"),
  ("Tucson"),
  ("Tucson Estates"),
  ("Tumacacori-Carmen"),
  ("Tusayan"),
  ("Vail"),
  ("Valencia West"),
  ("Wellton"),
  ("Wenden"),
  ("Whetstone"),
  ("Whiteriver"),
  ("Wickenburg"),
  ("Wilhoit"),
  ("Willcox"),
  ("Williams"),
  ("Williamson"),
  ("Willow Valley"),
  ("Window Rock"),
  ("Winkelman"),
  ("Winslow"),
  ("Winslow West"),
  ("Yarnell"),
  ("Young"),
  ("Youngtown"),
  ("Yuma"),
  ("Adona"),
  ("Alexander"),
  ("Alicia"),
  ("Allport"),
  ("Alma"),
  ("Almyra"),
  ("Alpena"),
  ("Altheimer"),
  ("Altus"),
  ("Amagon"),
  ("Amity"),
  ("Anthonyville"),
  ("Antoine"),
  ("Arkadelphia"),
  ("Arkansas City"),
  ("Ashdown"),
  ("Ash Flat"),
  ("Atkins"),
  ("Aubrey"),
  ("Augusta"),
  ("Austin"),
  ("Avoca"),
  ("Bald Knob"),
  ("Banks"),
  ("Barling"),
  ("Bassett"),
  ("Batesville"),
  ("Bauxite"),
  ("Bay"),
  ("Bearden"),
  ("Beaver"),
  ("Beebe"),
  ("Beedeville"),
  ("Bella Vista"),
  ("Bellefonte"),
  ("Belleville"),
  ("Ben Lomond"),
  ("Benton"),
  ("Bentonville"),
  ("Bergman"),
  ("Berryville"),
  ("Bethel Heights"),
  ("Bigelow"),
  ("Big Flat"),
  ("Biggers"),
  ("Birdsong"),
  ("Black Oak"),
  ("Black Rock"),
  ("Black Springs"),
  ("Blevins"),
  ("Blue Eye"),
  ("Blue Mountain"),
  ("Bluff City"),
  ("Blytheville"),
  ("Bodcaw"),
  ("Bonanza"),
  ("Bono"),
  ("Booneville"),
  ("Bradford"),
  ("Bradley"),
  ("Branch"),
  ("Briarcliff"),
  ("Brinkley"),
  ("Brookland"),
  ("Bryant"),
  ("Buckner"),
  ("Bull Shoals"),
  ("Burdette"),
  ("Cabot"),
  ("Caddo Valley"),
  ("Caldwell"),
  ("Cale"),
  ("Calico Rock"),
  ("Calion"),
  ("Camden"),
  ("Cammack Village"),
  ("Campbell Station"),
  ("Caraway"),
  ("Carlisle"),
  ("Carthage"),
  ("Casa"),
  ("Cash"),
  ("Caulksville"),
  ("Cave City"),
  ("Cave Springs"),
  ("Cedarville"),
  ("Centerton"),
  ("Central City"),
  ("Charleston"),
  ("Cherokee Village"),
  ("Cherry Valley"),
  ("Chester"),
  ("Chidester"),
  ("Clarendon"),
  ("Clarksville"),
  ("Clinton"),
  ("Coal Hill"),
  ("College City"),
  ("College Station"),
  ("Colt"),
  ("Concord"),
  ("Conway"),
  ("Corinth"),
  ("Corning"),
  ("Cotter"),
  ("Cotton Plant"),
  ("Cove"),
  ("Coy"),
  ("Crawfordsville"),
  ("Crossett"),
  ("Cushman"),
  ("Daisy"),
  ("Damascus"),
  ("Danville"),
  ("Dardanelle"),
  ("Datto"),
  ("Decatur"),
  ("Delaplaine"),
  ("Delight"),
  ("Dell"),
  ("Denning"),
  ("De Queen"),
  ("Dermott"),
  ("Des Arc"),
  ("De Valls Bluff"),
  ("De Witt"),
  ("Diamond City"),
  ("Diaz"),
  ("Dierks"),
  ("Donaldson"),
  ("Dover"),
  ("Dumas"),
  ("Dyer"),
  ("Dyess"),
  ("Earle"),
  ("East Camden"),
  ("East End"),
  ("Edmondson"),
  ("Egypt"),
  ("Elaine"),
  ("El Dorado"),
  ("Elkins"),
  ("Elm Springs"),
  ("Emerson"),
  ("Emmet"),
  ("England"),
  ("Enola"),
  ("Etowah"),
  ("Eudora"),
  ("Eureka Springs"),
  ("Evening Shade"),
  ("Everton"),
  ("Fairfield Bay"),
  ("Fargo"),
  ("Farmington"),
  ("Fayetteville"),
  ("Felsenthal"),
  ("Fifty-Six"),
  ("Fisher"),
  ("Flippin"),
  ("Fordyce"),
  ("Foreman"),
  ("Forrest City"),
  ("Fort Smith"),
  ("Fouke"),
  ("Fountain Hill"),
  ("Fountain Lake"),
  ("Fourche"),
  ("Franklin"),
  ("Fredonia (Biscoe)"),
  ("Friendship"),
  ("Fulton"),
  ("Garfield"),
  ("Garland"),
  ("Garner"),
  ("Gassville"),
  ("Gateway"),
  ("Gentry"),
  ("Georgetown"),
  ("Gibson"),
  ("Gilbert"),
  ("Gillett"),
  ("Gillham"),
  ("Gilmore"),
  ("Glenwood"),
  ("Goshen"),
  ("Gosnell"),
  ("Gould"),
  ("Grady"),
  ("Grannis"),
  ("Gravel Ridge"),
  ("Gravette"),
  ("Greenbrier"),
  ("Green Forest"),
  ("Greenland"),
  ("Greenway"),
  ("Greenwood"),
  ("Greers Ferry"),
  ("Griffithville"),
  ("Grubbs"),
  ("Guion"),
  ("Gum Springs"),
  ("Gurdon"),
  ("Guy"),
  ("Hackett"),
  ("Hamburg"),
  ("Hampton"),
  ("Hardy"),
  ("Harrell"),
  ("Harrisburg"),
  ("Harrison"),
  ("Hartford"),
  ("Hartman"),
  ("Haskell"),
  ("Hatfield"),
  ("Havana"),
  ("Haynes"),
  ("Hazen"),
  ("Heber Springs"),
  ("Hector"),
  ("Helena"),
  ("Hensley"),
  ("Hermitage"),
  ("Hickory Ridge"),
  ("Higden"),
  ("Higginson"),
  ("Highfill"),
  ("Highland"),
  ("Hindsville"),
  ("Holland"),
  ("Holly Grove"),
  ("Hope"),
  ("Horatio"),
  ("Horseshoe Bend"),
  ("Horseshoe Lake"),
  ("Hot Springs"),
  ("Hot Springs Village"),
  ("Houston"),
  ("Hoxie"),
  ("Hughes"),
  ("Humnoke"),
  ("Humphrey"),
  ("Hunter"),
  ("Huntington"),
  ("Huntsville"),
  ("Huttig"),
  ("Imboden"),
  ("Jacksonport"),
  ("Jacksonville"),
  ("Jasper"),
  ("Jennette"),
  ("Jericho"),
  ("Jerome"),
  ("Johnson"),
  ("Joiner"),
  ("Jonesboro"),
  ("Judsonia"),
  ("Junction City"),
  ("Keiser"),
  ("Kensett"),
  ("Keo"),
  ("Kibler"),
  ("Kingsland"),
  ("Knobel"),
  ("Knoxville"),
  ("Lafe"),
  ("LaGrange"),
  ("Lake City"),
  ("Lake Hamilton"),
  ("Lakeview"),
  ("Lake View"),
  ("Lake Village"),
  ("Lamar"),
  ("Lavaca"),
  ("Leachville"),
  ("Lead Hill"),
  ("Leola"),
  ("Lepanto"),
  ("Leslie"),
  ("Letona"),
  ("Lewisville"),
  ("Lexa"),
  ("Lincoln"),
  ("Little Flock"),
  ("Little Rock"),
  ("Lockesburg"),
  ("London"),
  ("Lonoke"),
  ("Lonsdale"),
  ("Louann"),
  ("Lowell"),
  ("Luxora"),
  ("Lynn"),
  ("McAlmont"),
  ("McCaskill"),
  ("McCrory"),
  ("McDougal"),
  ("McGehee"),
  ("McNab"),
  ("McNeil"),
  ("McRae"),
  ("Madison"),
  ("Magazine"),
  ("Magness"),
  ("Magnolia"),
  ("Malvern"),
  ("Mammoth Spring"),
  ("Manila"),
  ("Mansfield"),
  ("Marianna"),
  ("Marie"),
  ("Marion"),
  ("Marked Tree"),
  ("Marmaduke"),
  ("Marshall"),
  ("Marvell"),
  ("Maumelle"),
  ("Mayflower"),
  ("Maynard"),
  ("Melbourne"),
  ("Mena"),
  ("Menifee"),
  ("Midland"),
  ("Mineral Springs"),
  ("Minturn"),
  ("Mitchellville"),
  ("Monette"),
  ("Monticello"),
  ("Montrose"),
  ("Moorefield"),
  ("Moro"),
  ("Morrilton"),
  ("Morrison Bluff"),
  ("Mountainburg"),
  ("Mountain Home"),
  ("Mountain Pine"),
  ("Mountain View"),
  ("Mount Ida"),
  ("Mount Pleasant"),
  ("Mount Vernon"),
  ("Mulberry"),
  ("Murfreesboro"),
  ("Nashville"),
  ("Newark"),
  ("Newport"),
  ("Nimmons"),
  ("Norfork"),
  ("Norman"),
  ("Norphlet"),
  ("North Crossett"),
  ("North Little Rock"),
  ("Oak Grove"),
  ("Oak Grove Heights"),
  ("Oakhaven"),
  ("Oden"),
  ("Ogden"),
  ("Oil Trough"),
  ("O'Kean"),
  ("Okolona"),
  ("Ola"),
  ("Omaha"),
  ("Oppelo"),
  ("Osceola"),
  ("Oxford"),
  ("Ozan"),
  ("Ozark"),
  ("Palestine"),
  ("Pangburn"),
  ("Paragould"),
  ("Paris"),
  ("Parkdale"),
  ("Parkers-Iron Springs"),
  ("Parkin"),
  ("Patmos"),
  ("Patterson"),
  ("Peach Orchard"),
  ("Pea Ridge"),
  ("Perla"),
  ("Perry"),
  ("Perrytown"),
  ("Perryville"),
  ("Piggott"),
  ("Pindall"),
  ("Pine Bluff"),
  ("Pineville"),
  ("Piney"),
  ("Plainview"),
  ("Pleasant Plains"),
  ("Plumerville"),
  ("Pocahontas"),
  ("Pollard"),
  ("Portia"),
  ("Portland"),
  ("Pottsville"),
  ("Powhatan"),
  ("Poyen"),
  ("Prairie Creek"),
  ("Prairie Grove"),
  ("Prattsville"),
  ("Prescott"),
  ("Pyatt"),
  ("Quitman"),
  ("Ratcliff"),
  ("Ravenden"),
  ("Ravenden Springs"),
  ("Reader"),
  ("Rector"),
  ("Redfield"),
  ("Reed"),
  ("Reyno"),
  ("Rison"),
  ("Rockport"),
  ("Rockwell"),
  ("Roe"),
  ("Rogers"),
  ("Rondo"),
  ("Rose Bud"),
  ("Rosston"),
  ("Rudy"),
  ("Russell"),
  ("Russellville"),
  ("St. Charles"),
  ("St. Francis"),
  ("St. Joe"),
  ("St. Paul"),
  ("Salem"),
  ("Salem"),
  ("Salesville"),
  ("Scott"),
  ("Scranton"),
  ("Searcy"),
  ("Sedgwick"),
  ("Shannon Hills"),
  ("Sheridan"),
  ("Sherrill"),
  ("Sherwood"),
  ("Shirley"),
  ("Sidney"),
  ("Siloam Springs"),
  ("Smackover"),
  ("Smithville"),
  ("South Lead Hill"),
  ("Sparkman"),
  ("Springdale"),
  ("Springtown"),
  ("Stamps"),
  ("Star City"),
  ("Stephens"),
  ("Strawberry"),
  ("Strong"),
  ("Stuttgart"),
  ("Subiaco"),
  ("Success"),
  ("Sulphur Rock"),
  ("Sulphur Springs"),
  ("Summit"),
  ("Sunset"),
  ("Sweet Home"),
  ("Swifton"),
  ("Taylor"),
  ("Texarkana"),
  ("Thornton"),
  ("Tillar"),
  ("Tinsman"),
  ("Tollette"),
  ("Tontitown"),
  ("Traskwood"),
  ("Trumann"),
  ("Tuckerman"),
  ("Tull"),
  ("Tupelo"),
  ("Turrell"),
  ("Twin Groves"),
  ("Tyronza"),
  ("Ulm"),
  ("Valley Springs"),
  ("Van Buren"),
  ("Vandervoort"),
  ("Victoria"),
  ("Vilonia"),
  ("Viola"),
  ("Wabbaseka"),
  ("Waldenburg"),
  ("Waldo"),
  ("Waldron"),
  ("Walnut Ridge"),
  ("Ward"),
  ("Warren"),
  ("Washington"),
  ("Watson"),
  ("Weiner"),
  ("Weldon"),
  ("West Crossett"),
  ("Western Grove"),
  ("West Fork"),
  ("West Helena"),
  ("West Memphis"),
  ("West Point"),
  ("Wheatley"),
  ("Whelen Springs"),
  ("White Hall"),
  ("Wickes"),
  ("Widener"),
  ("Wiederkehr Village"),
  ("Williford"),
  ("Willisville"),
  ("Wilmar"),
  ("Wilmot"),
  ("Wilson"),
  ("Wilton"),
  ("Winchester"),
  ("Winslow"),
  ("Winthrop"),
  ("Woodson"),
  ("Wooster"),
  ("Wrightsville"),
  ("Wynne"),
  ("Yellville"),
  ("Zinc"),
  ("Acton"),
  ("Adelanto"),
  ("Agoura Hills"),
  ("Alameda"),
  ("Alamo"),
  ("Albany"),
  ("Alhambra"),
  ("Aliso Viejo"),
  ("Almanor"),
  ("Alondra Park"),
  ("Alpaugh"),
  ("Alpine"),
  ("Alpine Village"),
  ("Altadena"),
  ("Alta Sierra"),
  ("Alturas"),
  ("Alum Rock"),
  ("Amador City"),
  ("American Canyon"),
  ("Amesti"),
  ("Anaheim"),
  ("Anderson"),
  ("Angels City"),
  ("Angwin"),
  ("Antioch"),
  ("Apple Valley"),
  ("Aptos"),
  ("Aptos Hills-Larkin Valley"),
  ("Arbuckle"),
  ("Arcadia"),
  ("Arcata"),
  ("Arden-Arcade"),
  ("Armona"),
  ("Arnold"),
  ("Aromas"),
  ("Arroyo Grande"),
  ("Artesia"),
  ("Arvin"),
  ("Ashland"),
  ("Atascadero"),
  ("Atherton"),
  ("Atwater"),
  ("Auberry"),
  ("Auburn"),
  ("August"),
  ("Avalon"),
  ("Avenal"),
  ("Avery"),
  ("Avocado Heights"),
  ("Azusa"),
  ("Bakersfield"),
  ("Baldwin Park"),
  ("Banning"),
  ("Barstow"),
  ("Bay Point"),
  ("Bayview"),
  ("Bayview-Montalvin"),
  ("Baywood-Los Osos"),
  ("Beale AFB"),
  ("Bear Valley"),
  ("Bear Valley Springs"),
  ("Beaumont"),
  ("Beckwourth"),
  ("Belden"),
  ("Bell"),
  ("Bellflower"),
  ("Bell Gardens"),
  ("Belmont"),
  ("Belvedere"),
  ("Benicia"),
  ("Ben Lomond"),
  ("Berkeley"),
  ("Bermuda Dunes"),
  ("Bertsch-Oceanview"),
  ("Bethel Island"),
  ("Beverly Hills"),
  ("Big Bear City"),
  ("Big Bear Lake"),
  ("Big Bend"),
  ("Biggs"),
  ("Big Pine"),
  ("Big River"),
  ("Biola"),
  ("Bishop"),
  ("Blackhawk-Camino Tassajara"),
  ("Black Point-Green Point"),
  ("Blairsden"),
  ("Bloomington"),
  ("Blue Lake"),
  ("Bluewater"),
  ("Blythe"),
  ("Bodega Bay"),
  ("Bodfish"),
  ("Bolinas"),
  ("Bombay Beach"),
  ("Bonadelle Ranchos-Madera Ranchos"),
  ("Bonita"),
  ("Bonsall"),
  ("Bootjack"),
  ("Boron"),
  ("Boronda"),
  ("Borrego Springs"),
  ("Bostonia"),
  ("Boulder Creek"),
  ("Bowles"),
  ("Boyes Hot Springs"),
  ("Bradbury"),
  ("Bradley"),
  ("Brawley"),
  ("Brea"),
  ("Brentwood"),
  ("Bret Harte"),
  ("Brisbane"),
  ("Broadmoor"),
  ("Bucks Lake"),
  ("Buellton"),
  ("Buena Park"),
  ("Buena Vista"),
  ("Burbank"),
  ("Burbank"),
  ("Burlingame"),
  ("Burney"),
  ("Buttonwillow"),
  ("Byron"),
  ("Bystrom"),
  ("Cabazon"),
  ("Calabasas"),
  ("Calexico"),
  ("California City"),
  ("Calimesa"),
  ("Calipatria"),
  ("Calistoga"),
  ("Calwa"),
  ("Camarillo"),
  ("Cambria"),
  ("Cambrian Park"),
  ("Cameron Park"),
  ("Campbell"),
  ("Camp Pendleton North"),
  ("Camp Pendleton South"),
  ("Cantua Creek"),
  ("Canyondam"),
  ("Canyon Lake"),
  ("Capitola"),
  ("Caribou"),
  ("Carlsbad"),
  ("Carmel-by-the-Sea"),
  ("Carmel Valley Village"),
  ("Carmichael"),
  ("Carpinteria"),
  ("Carrick"),
  ("Carson"),
  ("Cartago"),
  ("Caruthers"),
  ("Casa Conejo"),
  ("Casa de Oro-Mount Helix"),
  ("Castro Valley"),
  ("Castroville"),
  ("Cathedral City"),
  ("Cayucos"),
  ("Ceres"),
  ("Cerritos"),
  ("Challenge-Brownsville"),
  ("Channel Islands Beach"),
  ("Charter Oak"),
  ("Cherryland"),
  ("Cherry Valley"),
  ("Chester"),
  ("Chico"),
  ("Chilcoot-Vinton"),
  ("China Lake Acres"),
  ("Chinese Camp"),
  ("Chino"),
  ("Chino Hills"),
  ("Chowchilla"),
  ("Chualar"),
  ("Chula Vista"),
  ("Citrus"),
  ("Citrus Heights"),
  ("Claremont"),
  ("Clayton"),
  ("Clearlake"),
  ("Clearlake Oaks"),
  ("Clio"),
  ("Cloverdale"),
  ("Clovis"),
  ("Clyde"),
  ("Coachella"),
  ("Coalinga"),
  ("Cobb"),
  ("Colfax"),
  ("Colma"),
  ("Colton"),
  ("Columbia"),
  ("Colusa"),
  ("Commerce"),
  ("Compton"),
  ("Concord"),
  ("Concow"),
  ("Copperopolis"),
  ("Corcoran"),
  ("Corning"),
  ("Corona"),
  ("Coronado"),
  ("Corralitos"),
  ("Corte Madera"),
  ("Costa Mesa"),
  ("Cotati"),
  ("Coto de Caza"),
  ("Cottonwood"),
  ("Country Club"),
  ("Covelo"),
  ("Covina"),
  ("Crescent City"),
  ("Crescent City North"),
  ("Crescent Mills"),
  ("Crest"),
  ("Crestline"),
  ("C-Road"),
  ("Crockett"),
  ("Cromberg"),
  ("Cudahy"),
  ("Culver City"),
  ("Cupertino"),
  ("Cutler"),
  ("Cutten"),
  ("Cypress"),
  ("Daly City"),
  ("Dana Point"),
  ("Danville"),
  ("Darwin"),
  ("Davis"),
  ("Day Valley"),
  ("Deer Park"),
  ("Del Aire"),
  ("Delano"),
  ("Delhi"),
  ("Delleker"),
  ("Del Mar"),
  ("Del Monte Forest"),
  ("Del Rey"),
  ("Del Rey Oaks"),
  ("Del Rio"),
  ("Denair"),
  ("Derby Acres"),
  ("Desert Hot Springs"),
  ("Desert Shores"),
  ("Desert View Highlands"),
  ("Diablo"),
  ("Diamond Bar"),
  ("Diamond Springs"),
  ("Dillon Beach"),
  ("Dinuba"),
  ("Discovery Bay"),
  ("Dixon"),
  ("Dixon Lane-Meadow Creek"),
  ("Dollar Point"),
  ("Dorrington"),
  ("Dorris"),
  ("Dos Palos"),
  ("Downey"),
  ("Duarte"),
  ("Dublin"),
  ("Ducor"),
  ("Dunsmuir"),
  ("Durham"),
  ("Dustin Acres"),
  ("Earlimart"),
  ("East Blythe"),
  ("East Compton"),
  ("East Foothills"),
  ("East Hemet"),
  ("East La Mirada"),
  ("East Los Angeles"),
  ("East Oakdale"),
  ("Easton"),
  ("East Orosi"),
  ("East Palo Alto"),
  ("East Pasadena"),
  ("East Porterville"),
  ("East Quincy"),
  ("East Richmond Heights"),
  ("East San Gabriel"),
  ("East Shore"),
  ("East Sonora"),
  ("Edgewood"),
  ("Edwards AFB"),
  ("El Cajon"),
  ("El Centro"),
  ("El Cerrito"),
  ("El Cerrito"),
  ("El Dorado Hills"),
  ("Eldridge"),
  ("El Granada"),
  ("Elk Grove"),
  ("Elkhorn"),
  ("Elmira"),
  ("El Monte"),
  ("El Paso de Robles (Paso Robles)"),
  ("El Rio"),
  ("El Segundo"),
  ("El Sobrante"),
  ("El Verano"),
  ("Emerald Lake Hills"),
  ("Emeryville"),
  ("Empire"),
  ("Encinitas"),
  ("Escalon"),
  ("Escondido"),
  ("Esparto"),
  ("Etna"),
  ("Eureka"),
  ("Exeter"),
  ("Fairbanks Ranch"),
  ("Fairfax"),
  ("Fairfield"),
  ("Fair Oaks"),
  ("Fairview"),
  ("Fallbrook"),
  ("Fall River Mills"),
  ("Farmersville"),
  ("Farmington"),
  ("Fellows"),
  ("Felton"),
  ("Ferndale"),
  ("Fetters Hot Springs-Agua Caliente"),
  ("Fillmore"),
  ("Firebaugh"),
  ("Florence-Graham"),
  ("Florin"),
  ("Folsom"),
  ("Fontana"),
  ("Foothill Farms"),
  ("Foothill Ranch"),
  ("Ford City"),
  ("Foresthill"),
  ("Forest Meadows"),
  ("Forestville"),
  ("Fort Bragg"),
  ("Fort Jones"),
  ("Fortuna"),
  ("Foster City"),
  ("Fountain Valley"),
  ("Fowler"),
  ("Frazier Park"),
  ("Freedom"),
  ("Fremont"),
  ("French Camp"),
  ("French Gulch"),
  ("Fresno"),
  ("Friant"),
  ("Fruitdale"),
  ("Fullerton"),
  ("Furnace Creek"),
  ("Galt"),
  ("Gardena"),
  ("Garden Acres"),
  ("Garden Grove"),
  ("Gazelle"),
  ("Georgetown"),
  ("Gerber-Las Flores"),
  ("Gilroy"),
  ("Glen Avon"),
  ("Glendale"),
  ("Glendora"),
  ("Glen Ellen"),
  ("Golden Hills"),
  ("Gold River"),
  ("Goleta"),
  ("Gonzales"),
  ("Goshen"),
  ("Graeagle"),
  ("Grand Terrace"),
  ("Granite Bay"),
  ("Granite Hills"),
  ("Grass Valley"),
  ("Graton"),
  ("Grayson"),
  ("Greenfield"),
  ("Greenhorn"),
  ("Green Valley"),
  ("Greenview"),
  ("Greenville"),
  ("Grenada"),
  ("Gridley"),
  ("Groveland-Big Oak Flat"),
  ("Grover Beach"),
  ("Guadalupe"),
  ("Guerneville"),
  ("Gustine"),
  ("Hacienda Heights"),
  ("Half Moon Bay"),
  ("Hamilton Branch"),
  ("Hamilton City"),
  ("Hanford"),
  ("Harbison Canyon"),
  ("Hawaiian Gardens"),
  ("Hawthorne"),
  ("Hayfork"),
  ("Hayward"),
  ("Healdsburg"),
  ("Heber"),
  ("Hemet"),
  ("Hercules"),
  ("Hermosa Beach"),
  ("Hesperia"),
  ("Hickman"),
  ("Hidden Hills"),
  ("Hidden Meadows"),
  ("Hidden Valley Lake"),
  ("Highgrove"),
  ("Highland"),
  ("Highlands-Baywood Park"),
  ("Hills"),
  ("Hilmar-Irwin"),
  ("Hollister"),
  ("Holtville"),
  ("Home Garden"),
  ("Home Gardens"),
  ("Homeland"),
  ("Homewood Canyon-Valley Wells"),
  ("Hornbrook"),
  ("Hughson"),
  ("Humboldt Hill"),
  ("Huntington Beach"),
  ("Huntington Park"),
  ("Huron"),
  ("Hydesville"),
  ("Idyllwild-Pine Cove"),
  ("Imperial"),
  ("Imperial Beach"),
  ("Independence"),
  ("Indian Falls"),
  ("Indian Wells"),
  ("Indio"),
  ("Industry"),
  ("Inglewood"),
  ("Interlaken"),
  ("Inverness"),
  ("Inyokern"),
  ("Ione"),
  ("Iron Horse"),
  ("Irvine"),
  ("Irwindale"),
  ("Isla Vista"),
  ("Isleton"),
  ("Ivanhoe"),
  ("Jackson"),
  ("Jamestown"),
  ("Jamul"),
  ("Johannesburg"),
  ("Johnsville"),
  ("Joshua Tree"),
  ("Julian"),
  ("Keddie"),
  ("Keeler"),
  ("Keene"),
  ("Kelseyville"),
  ("Kennedy"),
  ("Kensington"),
  ("Kentfield"),
  ("Kerman"),
  ("Kernville"),
  ("Kettleman City"),
  ("Keyes"),
  ("King City"),
  ("Kings Beach"),
  ("Kingsburg"),
  ("Kirkwood"),
  ("Klamath"),
  ("Knightsen"),
  ("La Canada Flintridge"),
  ("La Crescenta-Montrose"),
  ("Ladera Heights"),
  ("Lafayette"),
  ("Laguna"),
  ("Laguna Beach"),
  ("Laguna Hills"),
  ("Laguna Niguel"),
  ("Laguna West-Lakeside"),
  ("Laguna Woods"),
  ("Lagunitas-Forest Knolls"),
  ("La Habra"),
  ("La Habra Heights"),
  ("Lake Almanor Country Club"),
  ("Lake Almanor Peninsula"),
  ("Lake Almanor West"),
  ("Lake Arrowhead"),
  ("Lake Davis"),
  ("Lake Elsinore"),
  ("Lake Forest"),
  ("Lakehead-Lakeshore"),
  ("Lake Isabella"),
  ("Lakeland Village"),
  ("Lake Los Angeles"),
  ("Lake Nacimiento"),
  ("Lake of the Pines"),
  ("Lake of the Woods"),
  ("Lakeport"),
  ("Lake San Marcos"),
  ("Lakeside"),
  ("Lakeview"),
  ("Lake Wildwood"),
  ("Lakewood"),
  ("La Mesa"),
  ("La Mirada"),
  ("Lamont"),
  ("Lanare"),
  ("Lancaster"),
  ("La Palma"),
  ("La Porte"),
  ("La Presa"),
  ("La Puente"),
  ("La Quinta"),
  ("La Riviera"),
  ("Larkfield-Wikiup"),
  ("Larkspur"),
  ("Las Flores"),
  ("Las Lomas"),
  ("Lathrop"),
  ("Laton"),
  ("La Verne"),
  ("Lawndale"),
  ("Laytonville"),
  ("Lebec"),
  ("Le Grand"),
  ("Lemon Cove"),
  ("Lemon Grove"),
  ("Lemoore"),
  ("Lemoore Station"),
  ("Lennox"),
  ("Lenwood"),
  ("Lewiston"),
  ("Lexington Hills"),
  ("Lincoln"),
  ("Lincoln Village"),
  ("Linda"),
  ("Linden"),
  ("Lindsay"),
  ("Little Grass Valley"),
  ("Littlerock"),
  ("Live Oak"),
  ("Live Oak"),
  ("Livermore"),
  ("Livingston"),
  ("Lockeford"),
  ("Lodi"),
  ("Loma Linda"),
  ("Loma Rica"),
  ("Lomita"),
  ("Lompoc"),
  ("London"),
  ("Lone Pine"),
  ("Long Beach"),
  ("Loomis"),
  ("Los Alamitos"),
  ("Los Alamos"),
  ("Los Altos"),
  ("Los Altos Hills"),
  ("Los Angeles"),
  ("Los Banos"),
  ("Los Gatos"),
  ("Los Molinos"),
  ("Lost Hills"),
  ("Lower Lake"),
  ("Loyalton"),
  ("Loyola"),
  ("Lucas Valley-Marinwood"),
  ("Lucerne"),
  ("Lynwood"),
  ("McArthur"),
  ("McCloud"),
  ("Macdoel"),
  ("McFarland"),
  ("McKinleyville"),
  ("McKittrick"),
  ("Madera"),
  ("Madera Acres"),
  ("Magalia"),
  ("Malibu"),
  ("Mammoth Lakes"),
  ("Manhattan Beach"),
  ("Manteca"),
  ("Manton"),
  ("March AFB"),
  ("Maricopa"),
  ("Marina"),
  ("Marina del Rey"),
  ("Mariposa"),
  ("Markleeville"),
  ("Martinez"),
  ("Marysville"),
  ("Mayflower Village"),
  ("Maywood"),
  ("Meadow Valley"),
  ("Meadow Vista"),
  ("Mecca"),
  ("Meiners Oaks"),
  ("Mendocino"),
  ("Mendota"),
  ("Menlo Park"),
  ("Mentone"),
  ("Merced"),
  ("Mesa"),
  ("Mesa Vista"),
  ("Mettler"),
  ("Middletown"),
  ("Millbrae"),
  ("Mill Valley"),
  ("Millville"),
  ("Milpitas"),
  ("Mineral"),
  ("Mira Loma"),
  ("Mira Monte"),
  ("Mission Canyon"),
  ("Mission Hills"),
  ("Mission Viejo"),
  ("Mi-Wuk Village"),
  ("Modesto"),
  ("Mohawk Vista"),
  ("Mojave"),
  ("Mokelumne Hill"),
  ("Mono Vista"),
  ("Monrovia"),
  ("Montague"),
  ("Montara"),
  ("Montclair"),
  ("Montebello"),
  ("Montecito"),
  ("Monterey"),
  ("Monterey Park"),
  ("Monte Rio"),
  ("Monte Sereno"),
  ("Montgomery Creek"),
  ("Moorpark"),
  ("Morada"),
  ("Moraga"),
  ("Moreno Valley"),
  ("Morgan Hill"),
  ("Morongo Valley"),
  ("Morro Bay"),
  ("Moss Beach"),
  ("Moss Landing"),
  ("Mountain Mesa"),
  ("Mountain Ranch"),
  ("Mountain View"),
  ("Mountain View"),
  ("Mountain View Acres"),
  ("Mount Hebron"),
  ("Mount Shasta"),
  ("Muir Beach"),
  ("Murphys"),
  ("Murrieta"),
  ("Murrieta Hot Springs"),
  ("Muscoy"),
  ("Myrtletown"),
  ("Napa"),
  ("National City"),
  ("Nebo Center"),
  ("Needles"),
  ("Nevada City"),
  ("Newark"),
  ("Newman"),
  ("Newport Beach"),
  ("Newport Coast"),
  ("Nice"),
  ("Niland"),
  ("Nipomo"),
  ("Norco"),
  ("North Auburn"),
  ("North Edwards"),
  ("North El Monte"),
  ("North Fair Oaks"),
  ("North Highlands"),
  ("North Lakeport"),
  ("North Woodbridge"),
  ("Norwalk"),
  ("Novato"),
  ("Nuevo"),
  ("Oakdale"),
  ("Oakhurst"),
  ("Oakland"),
  ("Oakley"),
  ("Oak Park"),
  ("Oak View"),
  ("Occidental"),
  ("Oceano"),
  ("Oceanside"),
  ("Ocotillo"),
  ("Oildale"),
  ("Ojai"),
  ("Olancha"),
  ("Olivehurst"),
  ("Ontario"),
  ("Onyx"),
  ("Opal Cliffs"),
  ("Orange"),
  ("Orange Cove"),
  ("Orangevale"),
  ("Orcutt"),
  ("Orinda"),
  ("Orland"),
  ("Orosi"),
  ("Oroville"),
  ("Oroville East"),
  ("Oxnard"),
  ("Pacheco"),
  ("Pacifica"),
  ("Pacific Grove"),
  ("Pajaro"),
  ("Palermo"),
  ("Palmdale"),
  ("Palm Desert"),
  ("Palm Springs"),
  ("Palo Alto"),
  ("Palo Cedro"),
  ("Palos Verdes Estates"),
  ("Palo Verde"),
  ("Paradise"),
  ("Paramount"),
  ("Parksdale"),
  ("Parkway-South Sacramento"),
  ("Parkwood"),
  ("Parlier"),
  ("Pasadena"),
  ("Patterson"),
  ("Paxton"),
  ("Pearsonville"),
  ("Pedley"),
  ("Penn Valley"),
  ("Perris"),
  ("Petaluma"),
  ("Phoenix Lake-Cedar Ridge"),
  ("Pico Rivera"),
  ("Piedmont"),
  ("Pine Hills"),
  ("Pine Mountain Club"),
  ("Pine Valley"),
  ("Pinole"),
  ("Piru"),
  ("Pismo Beach"),
  ("Pittsburg"),
  ("Pixley"),
  ("Placentia"),
  ("Placerville"),
  ("Planada"),
  ("Pleasant Hill"),
  ("Pleasanton"),
  ("Plumas Eureka"),
  ("Plymouth"),
  ("Point Arena"),
  ("Point Reyes Station"),
  ("Pollock Pines"),
  ("Pomona"),
  ("Poplar-Cotton Center"),
  ("Port Costa"),
  ("Porterville"),
  ("Port Hueneme"),
  ("Portola"),
  ("Portola Hills"),
  ("Portola Valley"),
  ("Poway"),
  ("Prattville"),
  ("Prunedale"),
  ("Quail Valley"),
  ("Quartz Hill"),
  ("Quincy"),
  ("Rail Road Flat"),
  ("Rainbow"),
  ("Raisin City"),
  ("Ramona"),
  ("Rancho Calaveras"),
  ("Rancho Cordova"),
  ("Rancho Cucamonga"),
  ("Rancho Mirage"),
  ("Rancho Murieta"),
  ("Rancho Palos Verdes"),
  ("Rancho San Diego"),
  ("Rancho Santa Fe"),
  ("Rancho Santa Margarita"),
  ("Rancho Tehama Reserve"),
  ("Randsburg"),
  ("Red Bluff"),
  ("Redding"),
  ("Redlands"),
  ("Redondo Beach"),
  ("Redway"),
  ("Redwood City"),
  ("Reedley"),
  ("Rialto"),
  ("Richgrove"),
  ("Richmond"),
  ("Ridgecrest"),
  ("Ridgemark"),
  ("Rio Dell"),
  ("Rio del Mar"),
  ("Rio Linda"),
  ("Rio Vista"),
  ("Ripon"),
  ("Riverbank"),
  ("Riverdale"),
  ("Riverdale Park"),
  ("Riverside"),
  ("Rocklin"),
  ("Rodeo"),
  ("Rohnert Park"),
  ("Rolling Hills"),
  ("Rolling Hills Estates"),
  ("Rollingwood"),
  ("Romoland"),
  ("Rosamond"),
  ("Rosedale"),
  ("Roseland"),
  ("Rosemead"),
  ("Rosemont"),
  ("Roseville"),
  ("Ross"),
  ("Rossmoor"),
  ("Round Mountain"),
  ("Round Valley"),
  ("Rowland Heights"),
  ("Rubidoux"),
  ("Running Springs"),
  ("Sacramento"),
  ("St. Helena"),
  ("Salida"),
  ("Salinas"),
  ("Salton City"),
  ("Salton Sea Beach"),
  ("San Andreas"),
  ("San Anselmo"),
  ("San Antonio Heights"),
  ("San Ardo"),
  ("San Bernardino"),
  ("San Bruno"),
  ("San Buenaventura (Ventura)"),
  ("San Carlos"),
  ("San Clemente"),
  ("Sand City"),
  ("San Diego"),
  ("San Diego Country Estates"),
  ("San Dimas"),
  ("San Fernando"),
  ("San Francisco"),
  ("San Gabriel"),
  ("Sanger"),
  ("San Geronimo"),
  ("San Jacinto"),
  ("San Joaquin"),
  ("San Joaquin Hills"),
  ("San Jose"),
  ("San Juan Bautista"),
  ("San Juan Capistrano"),
  ("San Leandro"),
  ("San Lorenzo"),
  ("San Lucas"),
  ("San Luis Obispo"),
  ("San Marcos"),
  ("San Marino"),
  ("San Martin"),
  ("San Mateo"),
  ("San Miguel"),
  ("San Pablo"),
  ("San Rafael"),
  ("San Ramon"),
  ("Santa Ana"),
  ("Santa Barbara"),
  ("Santa Clara"),
  ("Santa Clarita"),
  ("Santa Cruz"),
  ("Santa Fe Springs"),
  ("Santa Maria"),
  ("Santa Monica"),
  ("Santa Paula"),
  ("Santa Rosa"),
  ("Santa Venetia"),
  ("Santa Ynez"),
  ("Santee"),
  ("Saratoga"),
  ("Sausalito"),
  ("Scotts Valley"),
  ("Seal Beach"),
  ("Searles Valley"),
  ("Seaside"),
  ("Sebastopol"),
  ("Sedco Hills"),
  ("Seeley"),
  ("Selma"),
  ("Seven Trees"),
  ("Shackelford"),
  ("Shafter"),
  ("Shandon"),
  ("Shasta Lake"),
  ("Shaver Lake"),
  ("Shingle Springs"),
  ("Shingletown"),
  ("Shoshone"),
  ("Sierra Madre"),
  ("Signal Hill"),
  ("Simi Valley"),
  ("Solana Beach"),
  ("Soledad"),
  ("Solvang"),
  ("Sonoma"),
  ("Sonora"),
  ("Soquel"),
  ("Soulsbyville"),
  ("South Dos Palos"),
  ("South El Monte"),
  ("South Gate"),
  ("South Lake Tahoe"),
  ("South Oroville"),
  ("South Pasadena"),
  ("South San Francisco"),
  ("South San Gabriel"),
  ("South San Jose Hills"),
  ("South Taft"),
  ("South Whittier"),
  ("South Woodbridge"),
  ("South Yuba City"),
  ("Spreckels"),
  ("Spring Garden"),
  ("Spring Valley"),
  ("Springville"),
  ("Squaw Valley"),
  ("Squirrel Mountain Valley"),
  ("Stallion Springs"),
  ("Stanford"),
  ("Stanton"),
  ("Stinson Beach"),
  ("Stockton"),
  ("Storrie"),
  ("Stratford"),
  ("Strathmore"),
  ("Strawberry"),
  ("Suisun City"),
  ("Summerland"),
  ("Sun City"),
  ("Sunnyside-Tahoe City"),
  ("Sunnyslope"),
  ("Sunnyvale"),
  ("Sunol"),
  ("Sunol-Midtown"),
  ("Susanville"),
  ("Sutter"),
  ("Sutter Creek"),
  ("Taft"),
  ("Taft Heights"),
  ("Taft Mosswood"),
  ("Tahoe Vista"),
  ("Talmage"),
  ("Tamalpais-Homestead Valley"),
  ("Tara Hills"),
  ("Taylorsville"),
  ("Tecopa"),
  ("Tehachapi"),
  ("Tehama"),
  ("Temecula"),
  ("Temelec"),
  ("Temple City"),
  ("Templeton"),
  ("Tennant"),
  ("Terra Bella"),
  ("Thermalito"),
  ("Thousand Oaks"),
  ("Thousand Palms"),
  ("Three Rivers"),
  ("Tiburon"),
  ("Tierra Buena"),
  ("Tipton"),
  ("Tobin"),
  ("Tomales"),
  ("Toro Canyon"),
  ("Torrance"),
  ("Tracy"),
  ("Tranquillity"),
  ("Traver"),
  ("Trinidad"),
  ("Truckee"),
  ("Tulare"),
  ("Tulelake"),
  ("Tuolumne City"),
  ("Tupman"),
  ("Turlock"),
  ("Tustin"),
  ("Tustin Foothills"),
  ("Twain"),
  ("Twain Harte"),
  ("Twentynine Palms"),
  ("Twentynine Palms Base"),
  ("Twin Lakes"),
  ("Ukiah"),
  ("Union City"),
  ("Upland"),
  ("Upper Lake"),
  ("Vacaville"),
  ("Valinda"),
  ("Vallecito"),
  ("Vallejo"),
  ("Valle Vista"),
  ("Valley Acres"),
  ("Valley Center"),
  ("Valley Ranch"),
  ("Valley Springs"),
  ("Val Verde"),
  ("Vandenberg AFB"),
  ("Vandenberg Village"),
  ("Vernon"),
  ("Victorville"),
  ("View Park-Windsor Hills"),
  ("Villa Park"),
  ("Vincent"),
  ("Vine Hill"),
  ("Vineyard"),
  ("Visalia"),
  ("Vista"),
  ("Waldon"),
  ("Wallace"),
  ("Walnut"),
  ("Walnut Creek"),
  ("Walnut Grove"),
  ("Walnut Park"),
  ("Wasco"),
  ("Waterford"),
  ("Watsonville"),
  ("Weaverville"),
  ("Weed"),
  ("Weedpatch"),
  ("Weldon"),
  ("West Athens"),
  ("West Bishop"),
  ("West Carson"),
  ("West Compton"),
  ("West Covina"),
  ("Westhaven-Moonstone"),
  ("West Hollywood"),
  ("Westlake Village"),
  ("Westley"),
  ("West Menlo Park"),
  ("Westminster"),
  ("West Modesto"),
  ("Westmont"),
  ("Westmorland"),
  ("West Point"),
  ("West Puente Valley"),
  ("West Sacramento"),
  ("West Whittier-Los Nietos"),
  ("Westwood"),
  ("Wheatland"),
  ("Whitehawk"),
  ("Whittier"),
  ("Wildomar"),
  ("Wilkerson"),
  ("Williams"),
  ("Willits"),
  ("Willowbrook"),
  ("Willow Creek"),
  ("Willows"),
  ("Wilton"),
  ("Winchester"),
  ("Windsor"),
  ("Winter Gardens"),
  ("Winterhaven"),
  ("Winters"),
  ("Winton"),
  ("Wofford Heights"),
  ("Woodacre"),
  ("Woodcrest"),
  ("Woodlake"),
  ("Woodland"),
  ("Woodside"),
  ("Woodville"),
  ("Wrightwood"),
  ("Yorba Linda"),
  ("Yosemite Lakes"),
  ("Yosemite Valley"),
  ("Yountville"),
  ("Yreka"),
  ("Yuba City"),
  ("Yucaipa"),
  ("Yucca Valley"),
  ("Acres Green"),
  ("Aguilar"),
  ("Air Force Academy"),
  ("Akron"),
  ("Alamosa"),
  ("Alamosa East"),
  ("Allenspark"),
  ("Alma"),
  ("Antonito"),
  ("Applewood"),
  ("Arboles"),
  ("Aristocrat Ranchettes"),
  ("Arriba"),
  ("Arvada"),
  ("Aspen"),
  ("Aspen Park"),
  ("Atwood"),
  ("Ault"),
  ("Aurora"),
  ("Avon"),
  ("Avondale"),
  ("Basalt"),
  ("Battlement Mesa"),
  ("Bayfield"),
  ("Bennett"),
  ("Berkley"),
  ("Berthoud"),
  ("Bethune"),
  ("Beulah Valley"),
  ("Black Forest"),
  ("Black Hawk"),
  ("Blanca"),
  ("Blue River"),
  ("Bonanza"),
  ("Boone"),
  ("Boulder"),
  ("Bow Mar"),
  ("Branson"),
  ("Breckenridge"),
  ("Brighton"),
  ("Brookside"),
  ("Broomfield"),
  ("Brush"),
  ("Buena Vista"),
  ("Burlington"),
  ("Byers"),
  ("Calhan"),
  ("Campion"),
  ("Campo"),
  ("Canon City"),
  ("Carbondale"),
  ("Carriage Club"),
  ("Cascade-Chipita Park"),
  ("Castle Pines"),
  ("Castle Rock"),
  ("Castlewood"),
  ("Cedaredge"),
  ("Center"),
  ("Central City"),
  ("Cheraw"),
  ("Cherry Hills Village"),
  ("Cheyenne Wells"),
  ("Cimarron Hills"),
  ("Clifton"),
  ("Coal Creek"),
  ("Coal Creek"),
  ("Cokedale"),
  ("Collbran"),
  ("Colorado City"),
  ("Colorado Springs"),
  ("Columbine"),
  ("Columbine Valley"),
  ("Commerce City"),
  ("Cortez"),
  ("Cottonwood"),
  ("Craig"),
  ("Crawford"),
  ("Creede"),
  ("Crested Butte"),
  ("Crestone"),
  ("Cripple Creek"),
  ("Crook"),
  ("Crowley"),
  ("Dacono"),
  ("De Beque"),
  ("Deer Trail"),
  ("Del Norte"),
  ("Delta"),
  ("Denver"),
  ("Derby"),
  ("Dillon"),
  ("Dinosaur"),
  ("Dolores"),
  ("Dove Creek"),
  ("Downieville-Lawson-Dumont"),
  ("Durango"),
  ("Eads"),
  ("Eagle"),
  ("Eagle-Vail"),
  ("East Pleasant View"),
  ("Eaton"),
  ("Eckley"),
  ("Edgewater"),
  ("Edwards"),
  ("Eldora"),
  ("Eldorado Springs"),
  ("Elizabeth"),
  ("El Jebel"),
  ("Empire"),
  ("Englewood"),
  ("Erie"),
  ("Estes Park"),
  ("Evans"),
  ("Evergreen"),
  ("Fairplay"),
  ("Federal Heights"),
  ("Firestone"),
  ("Flagler"),
  ("Fleming"),
  ("Florence"),
  ("Fort Carson"),
  ("Fort Collins"),
  ("Fort Garland"),
  ("Fort Lupton"),
  ("Fort Morgan"),
  ("Fountain"),
  ("Fowler"),
  ("Foxfield"),
  ("Franktown"),
  ("Fraser"),
  ("Frederick"),
  ("Frisco"),
  ("Fruita"),
  ("Fruitvale"),
  ("Garden City"),
  ("Genesee"),
  ("Genoa"),
  ("Georgetown"),
  ("Gilcrest"),
  ("Glendale"),
  ("Gleneagle"),
  ("Glenwood Springs"),
  ("Golden"),
  ("Gold Hill"),
  ("Granada"),
  ("Granby"),
  ("Grand Junction"),
  ("Grand Lake"),
  ("Grand View Estates"),
  ("Greeley"),
  ("Green Mountain Falls"),
  ("Greenwood Village"),
  ("Grover"),
  ("Gunbarrel"),
  ("Gunnison"),
  ("Gypsum"),
  ("Hartman"),
  ("Haswell"),
  ("Haxtun"),
  ("Hayden"),
  ("Heritage Hills"),
  ("Highlands Ranch"),
  ("Hillrose"),
  ("Holly"),
  ("Holyoke"),
  ("Hooper"),
  ("Hotchkiss"),
  ("Hot Sulphur Springs"),
  ("Hudson"),
  ("Hugo"),
  ("Idaho Springs"),
  ("Ignacio"),
  ("Iliff"),
  ("Indian Hills"),
  ("Jamestown"),
  ("Johnstown"),
  ("Julesburg"),
  ("Keenesburg"),
  ("Ken Caryl"),
  ("Kersey"),
  ("Keystone"),
  ("Kim"),
  ("Kiowa"),
  ("Kit Carson"),
  ("Kittredge"),
  ("Kremmling"),
  ("Lafayette"),
  ("La Jara"),
  ("La Junta"),
  ("Lake City"),
  ("Lakeside"),
  ("Lakewood"),
  ("Lamar"),
  ("Laporte"),
  ("Larkspur"),
  ("La Salle"),
  ("Las Animas"),
  ("La Veta"),
  ("Leadville"),
  ("Leadville North"),
  ("Limon"),
  ("Lincoln Park"),
  ("Littleton"),
  ("Lochbuie"),
  ("Loghill Village"),
  ("Log Lane Village"),
  ("Lone Tree"),
  ("Longmont"),
  ("Louisville"),
  ("Louviers"),
  ("Loveland"),
  ("Lyons"),
  ("Manassa"),
  ("Mancos"),
  ("Manitou Springs"),
  ("Manzanola"),
  ("Marble"),
  ("Mead"),
  ("Meeker"),
  ("Meridian"),
  ("Merino"),
  ("Milliken"),
  ("Minturn"),
  ("Moffat"),
  ("Monte Vista"),
  ("Montezuma"),
  ("Montrose"),
  ("Monument"),
  ("Morrison"),
  ("Mountain View"),
  ("Mountain Village"),
  ("Mount Crested Butte"),
  ("Naturita"),
  ("Nederland"),
  ("New Castle"),
  ("Niwot"),
  ("Northglenn"),
  ("North Washington"),
  ("Norwood"),
  ("Nucla"),
  ("Nunn"),
  ("Oak Creek"),
  ("Olathe"),
  ("Olney Springs"),
  ("Ophir"),
  ("Orchard City"),
  ("Orchard Mesa"),
  ("Ordway"),
  ("Otis"),
  ("Ouray"),
  ("Ovid"),
  ("Padroni"),
  ("Pagosa Springs"),
  ("Palisade"),
  ("Palmer Lake"),
  ("Paoli"),
  ("Paonia"),
  ("Parachute"),
  ("Parker"),
  ("Peetz"),
  ("Penrose"),
  ("Perry Park"),
  ("Pierce"),
  ("Pitkin"),
  ("Platteville"),
  ("Poncha Springs"),
  ("Ponderosa Park"),
  ("Pritchett"),
  ("Pueblo"),
  ("Pueblo West"),
  ("Ramah"),
  ("Rangely"),
  ("Raymer"),
  ("Red Cliff"),
  ("Red Feather Lakes"),
  ("Redlands"),
  ("Rico"),
  ("Ridgway"),
  ("Rifle"),
  ("Rockvale"),
  ("Rocky Ford"),
  ("Romeo"),
  ("Rox"),
  ("Rye"),
  ("Saguache"),
  ("St. Mary's"),
  ("Salida"),
  ("Salt Creek"),
  ("Sanford"),
  ("San Luis"),
  ("Sawpit"),
  ("Security-Widefield"),
  ("Sedalia"),
  ("Sedgwick"),
  ("Seibert"),
  ("Severance"),
  ("Sheridan"),
  ("Sheridan Lake"),
  ("Sherrelwood"),
  ("Silt"),
  ("Silver Cliff"),
  ("Silver Plume"),
  ("Silverthorne"),
  ("Silverton"),
  ("Simla"),
  ("Snowmass Village"),
  ("South Fork"),
  ("Southglenn"),
  ("Springfield"),
  ("Starkville"),
  ("Steamboat Springs"),
  ("Sterling"),
  ("Stonegate"),
  ("Strasburg"),
  ("Stratmoor"),
  ("Stratton"),
  ("Sugar City"),
  ("Superior"),
  ("Swink"),
  ("Tabernash"),
  ("Telluride"),
  ("The Pinery"),
  ("Thornton"),
  ("Timnath"),
  ("Todd Creek"),
  ("Towaoc"),
  ("Trinidad"),
  ("Twin Lakes"),
  ("Two Buttes"),
  ("Vail"),
  ("Victor"),
  ("Vilas"),
  ("Vona"),
  ("Walden"),
  ("Walsenburg"),
  ("Walsh"),
  ("Ward"),
  ("Welby"),
  ("Wellington"),
  ("Westcliffe"),
  ("Westcreek"),
  ("Westminster"),
  ("West Pleasant View"),
  ("Wheat Ridge"),
  ("Wiggins"),
  ("Wiley"),
  ("Williamsburg"),
  ("Windsor"),
  ("Winter Park"),
  ("Woodland Park"),
  ("Woodmoor"),
  ("Wray"),
  ("Yampa"),
  ("Yuma"),
  ("Ansonia"),
  ("Bantam"),
  ("Bethel"),
  ("Bethlehem Village"),
  ("Blue Hills"),
  ("Branford Center"),
  ("Bridgeport"),
  ("Bristol"),
  ("Broad Brook"),
  ("Canaan"),
  ("Canton Valley"),
  ("Central Manchester"),
  ("Central Somers"),
  ("Central Waterford"),
  ("Cheshire Village"),
  ("Chester Center"),
  ("Clinton"),
  ("Collinsville"),
  ("Conning Towers-Nautilus Park"),
  ("Coventry Lake"),
  ("Crystal Lake"),
  ("Danbury"),
  ("Danielson"),
  ("Darien"),
  ("Deep River Center"),
  ("Derby"),
  ("Durham"),
  ("East Brooklyn"),
  ("East Hampton"),
  ("East Hartford"),
  ("East Haven"),
  ("Essex Village"),
  ("Fenwick"),
  ("Georgetown"),
  ("Glastonbury Center"),
  ("Groton"),
  ("Groton Long Point"),
  ("Guilford Center"),
  ("Hartford"),
  ("Hazardville"),
  ("Heritage Village"),
  ("Higganum"),
  ("Jewett City"),
  ("Kensington"),
  ("Lake Pocotopaug"),
  ("Litchfield"),
  ("Long Hill"),
  ("Madison Center"),
  ("Mansfield Center"),
  ("Meriden"),
  ("Middletown"),
  ("Milford"),
  ("Moodus"),
  ("Moosup"),
  ("Mystic"),
  ("Naugatuck"),
  ("New Britain"),
  ("New Hartford Center"),
  ("New Haven"),
  ("Newington"),
  ("New London"),
  ("New Milford"),
  ("New Preston"),
  ("Newtown"),
  ("Niantic"),
  ("Noank"),
  ("North Granby"),
  ("North Grosvenor Dale"),
  ("North Haven"),
  ("Northwest Harwinton"),
  ("Norwalk"),
  ("Norwich"),
  ("Oakville"),
  ("Old Mystic"),
  ("Old Saybrook Center"),
  ("Orange"),
  ("Oxoboxo River"),
  ("Pawcatuck"),
  ("Plainfield Village"),
  ("Poquonock Bridge"),
  ("Portland"),
  ("Putnam District"),
  ("Quinebaug"),
  ("Ridgefield"),
  ("Rockville"),
  ("Salmon Brook"),
  ("Saybrook Manor"),
  ("Shelton"),
  ("Sherwood Manor"),
  ("Simsbury Center"),
  ("South Coventry"),
  ("South Windham"),
  ("Southwood Acres"),
  ("South Woodstock"),
  ("Stamford"),
  ("Stonington"),
  ("Storrs"),
  ("Stratford"),
  ("Suffield Depot"),
  ("Tariffville"),
  ("Terramuggus"),
  ("Terryville"),
  ("Thompsonville"),
  ("Torrington"),
  ("Trumbull"),
  ("Wallingford Center"),
  ("Waterbury"),
  ("Wauregan"),
  ("Weatogue"),
  ("Westbrook Center"),
  ("West Hartford"),
  ("West Haven"),
  ("Westport"),
  ("West Simsbury"),
  ("Wethersfield"),
  ("Willimantic"),
  ("Windsor Locks"),
  ("Winsted"),
  ("Woodbury Center"),
  ("Woodmont"),
  ("Arden"),
  ("Ardencroft"),
  ("Ardentown"),
  ("Bear"),
  ("Bellefonte"),
  ("Bethany Beach"),
  ("Bethel"),
  ("Blades"),
  ("Bowers"),
  ("Bridgeville"),
  ("Brookside"),
  ("Camden"),
  ("Cheswold"),
  ("Claymont"),
  ("Clayton"),
  ("Dagsboro"),
  ("Delaware City"),
  ("Delmar"),
  ("Dewey Beach"),
  ("Dover"),
  ("Dover Base Housing"),
  ("Edgemoor"),
  ("Ellendale"),
  ("Elsmere"),
  ("Farmington"),
  ("Felton"),
  ("Fenwick Island"),
  ("Frankford"),
  ("Frederica"),
  ("Georgetown"),
  ("Glasgow"),
  ("Greenville"),
  ("Greenwood"),
  ("Harrington"),
  ("Hartly"),
  ("Henlopen Acres"),
  ("Highland Acres"),
  ("Hockessin"),
  ("Houston"),
  ("Kent Acres"),
  ("Kenton"),
  ("Laurel"),
  ("Leipsic"),
  ("Lewes"),
  ("Little Creek"),
  ("Long Neck"),
  ("Magnolia"),
  ("Middletown"),
  ("Milford"),
  ("Millsboro"),
  ("Millville"),
  ("Milton"),
  ("Newark"),
  ("New Castle"),
  ("Newport"),
  ("North Star"),
  ("Ocean View"),
  ("Odessa"),
  ("Pike Creek"),
  ("Rehoboth Beach"),
  ("Rising Sun-Lebanon"),
  ("Riverview"),
  ("Rodney Village"),
  ("Seaford"),
  ("Selbyville"),
  ("Slaughter Beach"),
  ("Smyrna"),
  ("South Bethany"),
  ("Townsend"),
  ("Viola"),
  ("Wilmington"),
  ("Wilmington Manor"),
  ("Woodside"),
  ("Woodside East"),
  ("Wyoming"),
  ("Washington"),
  ("Alachua"),
  ("Alford"),
  ("Altamonte Springs"),
  ("Altha"),
  ("Altoona"),
  ("Alva"),
  ("Andover"),
  ("Andrews"),
  ("Anna Maria"),
  ("Apalachicola"),
  ("Apollo Beach"),
  ("Apopka"),
  ("Arcadia"),
  ("Archer"),
  ("Asbury Lake"),
  ("Astatula"),
  ("Astor"),
  ("Atlantic Beach"),
  ("Atlantis"),
  ("Auburndale"),
  ("Aventura"),
  ("Avon Park"),
  ("Azalea Park"),
  ("Babson Park"),
  ("Bagdad"),
  ("Baldwin"),
  ("Bal Harbour"),
  ("Bartow"),
  ("Bascom"),
  ("Bay Harbor Islands"),
  ("Bay Hill"),
  ("Bay Lake"),
  ("Bayonet Point"),
  ("Bay Pines"),
  ("Bayport"),
  ("Bayshore Gardens"),
  ("Beacon Square"),
  ("Bee Ridge"),
  ("Bell"),
  ("Bellair-Meadowbrook Terrace"),
  ("Belleair"),
  ("Belleair Beach"),
  ("Belleair Bluffs"),
  ("Belleair Shore"),
  ("Belle Glade"),
  ("Belle Glade Camp"),
  ("Belle Isle"),
  ("Belleview"),
  ("Bellview"),
  ("Beverly Beach"),
  ("Beverly Hills"),
  ("Big Coppitt Key"),
  ("Big Pine Key"),
  ("Biscayne Park"),
  ("Bithlo"),
  ("Black Diamond"),
  ("Bloomingdale"),
  ("Blountstown"),
  ("Boca Del Mar"),
  ("Boca Pointe"),
  ("Boca Raton"),
  ("Bokeelia"),
  ("Bonifay"),
  ("Bonita Springs"),
  ("Bonnie Lock-Woodsetter North"),
  ("Boulevard Gardens"),
  ("Bowling Green"),
  ("Boyette"),
  ("Boynton Beach"),
  ("Bradenton"),
  ("Bradenton Beach"),
  ("Brandon"),
  ("Branford"),
  ("Brent"),
  ("Briny Breezes"),
  ("Bristol"),
  ("Broadview Park"),
  ("Broadview-Pompano Park"),
  ("Bronson"),
  ("Brooker"),
  ("Brookridge"),
  ("Brooksville"),
  ("Broward Estates"),
  ("Brownsville"),
  ("Buckhead Ridge"),
  ("Buckingham"),
  ("Bunche Park"),
  ("Bunnell"),
  ("Burnt Store Marina"),
  ("Bushnell"),
  ("Butler Beach"),
  ("Callahan"),
  ("Callaway"),
  ("Campbell"),
  ("Campbellton"),
  ("Canal Point"),
  ("Cape Canaveral"),
  ("Cape Coral"),
  ("Captiva"),
  ("Carol City"),
  ("Carrabelle"),
  ("Carver Ranches"),
  ("Caryville"),
  ("Casselberry"),
  ("Cedar Grove"),
  ("Cedar Key"),
  ("Celebration"),
  ("Center Hill"),
  ("Century"),
  ("Century Village"),
  ("Chambers Estates"),
  ("Charleston Park"),
  ("Charlotte Harbor"),
  ("Charlotte Park"),
  ("Chattahoochee"),
  ("Cheval"),
  ("Chiefland"),
  ("Chipley"),
  ("Chokoloskee"),
  ("Christmas"),
  ("Chula Vista"),
  ("Chuluota"),
  ("Cinco Bayou"),
  ("Citrus Hills"),
  ("Citrus Park"),
  ("Citrus Ridge"),
  ("Citrus Springs"),
  ("Clearwater"),
  ("Clermont"),
  ("Cleveland"),
  ("Clewiston"),
  ("Cloud Lake"),
  ("Cocoa"),
  ("Cocoa Beach"),
  ("Cocoa West"),
  ("Coconut Creek"),
  ("Coleman"),
  ("Collier Manor-Cresthaven"),
  ("Combee Settlement"),
  ("Conway"),
  ("Cooper City"),
  ("Coral Gables"),
  ("Coral Springs"),
  ("Coral Terrace"),
  ("Cortez"),
  ("Cottondale"),
  ("Country Club"),
  ("Country Estates"),
  ("Country Walk"),
  ("Crescent Beach"),
  ("Crescent City"),
  ("Crestview"),
  ("Crooked Lake Park"),
  ("Cross City"),
  ("Crystal Lake"),
  ("Crystal Lake"),
  ("Crystal River"),
  ("Crystal Springs"),
  ("Cudjoe Key"),
  ("Cutler"),
  ("Cutler Ridge"),
  ("Cypress Gardens"),
  ("Cypress Lake"),
  ("Cypress Lakes"),
  ("Cypress Quarters"),
  ("Dade City"),
  ("Dade City North"),
  ("Dania Beach"),
  ("Davenport"),
  ("Davie"),
  ("Daytona Beach"),
  ("Daytona Beach Shores"),
  ("De Bary"),
  ("Deerfield Beach"),
  ("De Funiak Springs"),
  ("De Land"),
  ("De Land Southwest"),
  ("De Leon Springs"),
  ("Delray Beach"),
  ("Deltona"),
  ("Desoto Lakes"),
  ("Destin"),
  ("Doctor Phillips"),
  ("Doral"),
  ("Dover"),
  ("Duck Key"),
  ("Dundee"),
  ("Dunedin"),
  ("Dunes Road"),
  ("Dunnellon"),
  ("Eagle Lake"),
  ("East Bronson"),
  ("East Dunbar"),
  ("East Lake"),
  ("East Lake-Orient Park"),
  ("East Palatka"),
  ("East Perrine"),
  ("Eastpoint"),
  ("East Williston"),
  ("Eatonville"),
  ("Ebro"),
  ("Edgewater"),
  ("Edgewater"),
  ("Edgewood"),
  ("Eglin AFB"),
  ("Egypt Lake-Leto"),
  ("Elfers"),
  ("Ellenton"),
  ("El Portal"),
  ("Englewood"),
  ("Ensley"),
  ("Estates of Fort Lauderdale"),
  ("Estero"),
  ("Esto"),
  ("Eustis"),
  ("Everglades"),
  ("Fairview Shores"),
  ("Fanning Springs"),
  ("Feather Sound"),
  ("Fellsmere"),
  ("Fernandina Beach"),
  ("Ferndale"),
  ("Fern Park"),
  ("Ferry Pass"),
  ("Fisher Island"),
  ("Fish Hawk"),
  ("Five Points"),
  ("Flagler Beach"),
  ("Floral City"),
  ("Florida City"),
  ("Florida Ridge"),
  ("Forest City"),
  ("Fort Lauderdale"),
  ("Fort Meade"),
  ("Fort Myers"),
  ("Fort Myers Beach"),
  ("Fort Myers Shores"),
  ("Fort Pierce"),
  ("Fort Pierce North"),
  ("Fort Pierce South"),
  ("Fort Walton Beach"),
  ("Fort White"),
  ("Fountainbleau"),
  ("Franklin Park"),
  ("Freeport"),
  ("Fremd Village-Padgett Island"),
  ("Frostproof"),
  ("Fruit Cove"),
  ("Fruitland Park"),
  ("Fruitville"),
  ("Fussels Corner"),
  ("Gainesville"),
  ("Gandy"),
  ("Gateway"),
  ("Geneva"),
  ("Gibsonia"),
  ("Gibsonton"),
  ("Gifford"),
  ("Gladeview"),
  ("Glencoe"),
  ("Glen Ridge"),
  ("Glen St. Mary"),
  ("Glenvar Heights"),
  ("Godfrey Road"),
  ("Golden Beach"),
  ("Golden Gate"),
  ("Golden Glades"),
  ("Golden Heights"),
  ("Golden Lakes"),
  ("Goldenrod"),
  ("Golf"),
  ("Gonzalez"),
  ("Goodland"),
  ("Gotha"),
  ("Goulding"),
  ("Goulds"),
  ("Graceville"),
  ("Grand Ridge"),
  ("Greater Carrollwood"),
  ("Greater Northdale"),
  ("Greater Sun Center"),
  ("Greenacres"),
  ("Green Cove Springs"),
  ("Green Meadow"),
  ("Greensboro"),
  ("Greenville"),
  ("Greenwood"),
  ("Gretna"),
  ("Grove City"),
  ("Groveland"),
  ("Gulf Breeze"),
  ("Gulf Gate Estates"),
  ("Gulfport"),
  ("Gulf Stream"),
  ("Gun Club Estates"),
  ("Haines City"),
  ("Hallandale"),
  ("Hampton"),
  ("Hamptons at Boca Raton"),
  ("Harbor Bluffs"),
  ("Harbour Heights"),
  ("Harlem"),
  ("Harlem Heights"),
  ("Hastings"),
  ("Havana"),
  ("Haverhill"),
  ("Hawthorne"),
  ("Heathrow"),
  ("Hernando"),
  ("Hernando Beach"),
  ("Hialeah"),
  ("Hialeah Gardens"),
  ("Highland Beach"),
  ("Highland City"),
  ("Highland Park"),
  ("High Point"),
  ("High Point"),
  ("High Springs"),
  ("Hiland Park"),
  ("Hillcrest Heights"),
  ("Hilliard"),
  ("Hill 'n Dale"),
  ("Hillsboro Beach"),
  ("Hillsboro Pines"),
  ("Hillsboro Ranches"),
  ("Hobe Sound"),
  ("Holden Heights"),
  ("Holiday"),
  ("Holly Hill"),
  ("Hollywood"),
  ("Holmes Beach"),
  ("Homestead"),
  ("Homestead Base"),
  ("Homosassa"),
  ("Homosassa Springs"),
  ("Horseshoe Beach"),
  ("Howey-in-the-Hills"),
  ("Hudson"),
  ("Hunters Creek"),
  ("Hutchinson Island South"),
  ("Hypoluxo"),
  ("Immokalee"),
  ("Indialantic"),
  ("Indian Creek"),
  ("Indian Harbour Beach"),
  ("Indian River Estates"),
  ("Indian River Shores"),
  ("Indian Rocks Beach"),
  ("Indian Shores"),
  ("Indiantown"),
  ("Inglis"),
  ("Interlachen"),
  ("Inverness"),
  ("Inverness Highlands North"),
  ("Inverness Highlands South"),
  ("Inwood"),
  ("Iona"),
  ("Islamorada, Village of Islands"),
  ("Islandia"),
  ("Istachatta"),
  ("Ivanhoe Estates"),
  ("Ives Estates"),
  ("Jacksonville"),
  ("Jacksonville Beach"),
  ("Jacob City"),
  ("Jan Phyl Village"),
  ("Jasmine Estates"),
  ("Jasper"),
  ("Jay"),
  ("Jennings"),
  ("Jensen Beach"),
  ("June Park"),
  ("Juno Beach"),
  ("Juno Ridge"),
  ("Jupiter"),
  ("Jupiter Inlet Colony"),
  ("Jupiter Island"),
  ("Kathleen"),
  ("Kendale Lakes"),
  ("Kendall"),
  ("Kendall Green"),
  ("Kendall West"),
  ("Kenneth City"),
  ("Kensington Park"),
  ("Key Biscayne"),
  ("Key Colony Beach"),
  ("Key Largo"),
  ("Keystone"),
  ("Keystone Heights"),
  ("Key West"),
  ("Kings Point"),
  ("Kissimmee"),
  ("Labelle"),
  ("Lacoochee"),
  ("La Crosse"),
  ("Lady Lake"),
  ("Laguna Beach"),
  ("Lake Alfred"),
  ("Lake Belvedere Estates"),
  ("Lake Buena Vista"),
  ("Lake Butler"),
  ("Lake Butter"),
  ("Lake City"),
  ("Lake Clarke Shores"),
  ("Lake Forest"),
  ("Lake Hamilton"),
  ("Lake Harbor"),
  ("Lake Hart"),
  ("Lake Helen"),
  ("Lake Kathryn"),
  ("Lakeland"),
  ("Lakeland Highlands"),
  ("Lake Lindsey"),
  ("Lake Lorraine"),
  ("Lake Lucerne"),
  ("Lake Mack-Forest Hills"),
  ("Lake Magdalene"),
  ("Lake Mary"),
  ("Lake Panasoffkee"),
  ("Lake Park"),
  ("Lake Placid"),
  ("Lake Sarasota"),
  ("Lakes by the Bay"),
  ("Lakeside"),
  ("Lakeside Green"),
  ("Lake Wales"),
  ("Lakewood Park"),
  ("Lake Worth"),
  ("Lake Worth Corridor"),
  ("Land O' Lakes"),
  ("Lantana"),
  ("Largo"),
  ("Lauderdale-by-the-Sea"),
  ("Lauderdale Lakes"),
  ("Lauderhill"),
  ("Laurel"),
  ("Laurel Hill"),
  ("Lawtey"),
  ("Layton"),
  ("Lazy Lake"),
  ("Lecanto"),
  ("Lee"),
  ("Leesburg"),
  ("Lehigh Acres"),
  ("Leisure City"),
  ("Leisureville"),
  ("Lely"),
  ("Lely Resort"),
  ("Lighthouse Point"),
  ("Limestone Creek"),
  ("Lisbon"),
  ("Live Oak"),
  ("Loch Lomond"),
  ("Lochmoor Waterway Estates"),
  ("Lockhart"),
  ("Longboat Key"),
  ("Longwood"),
  ("Loughman"),
  ("Lower Grand Lagoon"),
  ("Lutz"),
  ("Lynn Haven"),
  ("Macclenny"),
  ("McGregor"),
  ("McIntosh"),
  ("Madeira Beach"),
  ("Madison"),
  ("Maitland"),
  ("Malabar"),
  ("Malone"),
  ("Manalapan"),
  ("Manasota Key"),
  ("Manattee Road"),
  ("Mango"),
  ("Mangonia Park"),
  ("Marathon"),
  ("Marco Island"),
  ("Margate"),
  ("Marianna"),
  ("Marineland"),
  ("Mary Esther"),
  ("Masaryktown"),
  ("Mascotte"),
  ("Matlacha"),
  ("Matlacha Isles-Matlacha Shores"),
  ("Mayo"),
  ("Meadow Woods"),
  ("Medley"),
  ("Medulla"),
  ("Melbourne"),
  ("Melbourne Beach"),
  ("Melbourne Village"),
  ("Melrose Park"),
  ("Memphis"),
  ("Merritt Island"),
  ("Mexico Beach"),
  ("Miami"),
  ("Miami Beach"),
  ("Miami Gardens"),
  ("Miami Lakes"),
  ("Miami Shores"),
  ("Miami Springs"),
  ("Micanopy"),
  ("Micco"),
  ("Middleburg"),
  ("Midway"),
  ("Midway"),
  ("Milton"),
  ("Mims"),
  ("Minneola"),
  ("Miramar"),
  ("Miramar Beach"),
  ("Mission Bay"),
  ("Molino"),
  ("Monticello"),
  ("Montverde"),
  ("Moore Haven"),
  ("Mount Dora"),
  ("Mount Plymouth"),
  ("Mulberry"),
  ("Myrtle Grove"),
  ("Naples"),
  ("Naples Manor"),
  ("Naples Park"),
  ("Naranja"),
  ("Nassau Village-Ratliff"),
  ("Neptune Beach"),
  ("Newberry"),
  ("New Port Richey"),
  ("New Port Richey East"),
  ("New Smyrna Beach"),
  ("Niceville"),
  ("Nobleton"),
  ("Nokomis"),
  ("Noma"),
  ("Norland"),
  ("North Andrews Gardens"),
  ("North Bay Village"),
  ("North Beach"),
  ("North Brooksville"),
  ("North De Land"),
  ("North Fort Myers"),
  ("North Key Largo"),
  ("North Lauderdale"),
  ("North Miami"),
  ("North Miami Beach"),
  ("North Palm Beach"),
  ("North Port"),
  ("North Redington Beach"),
  ("North River Shores"),
  ("North Sarasota"),
  ("North Weeki Wachee"),
  ("Oak Hill"),
  ("Oakland"),
  ("Oakland Park"),
  ("Oak Point"),
  ("Oak Ridge"),
  ("Ocala"),
  ("Ocean Breeze Park"),
  ("Ocean City"),
  ("Ocean Ridge"),
  ("Ocoee"),
  ("Odessa"),
  ("Ojus"),
  ("Okahumpka"),
  ("Okeechobee"),
  ("Oldsmar"),
  ("Olga"),
  ("Olympia Heights"),
  ("Opa-locka"),
  ("Opa-locka North"),
  ("Orange City"),
  ("Orange Park"),
  ("Orangetree"),
  ("Orchid"),
  ("Orlando"),
  ("Orlovista"),
  ("Ormond Beach"),
  ("Ormond-By-The-Sea"),
  ("Osprey"),
  ("Otter Creek"),
  ("Oviedo"),
  ("Pace"),
  ("Page Park"),
  ("Pahokee"),
  ("Paisley"),
  ("Palatka"),
  ("Palm Aire"),
  ("Palm Bay"),
  ("Palm Beach"),
  ("Palm Beach Gardens"),
  ("Palm Beach Shores"),
  ("Palm City"),
  ("Palm Coast"),
  ("Palmetto"),
  ("Palmetto Estates"),
  ("Palm Harbor"),
  ("Palmona Park"),
  ("Palm River-Clair Mel"),
  ("Palm Shores"),
  ("Palm Springs"),
  ("Palm Springs North"),
  ("Palm Valley"),
  ("Panama City"),
  ("Panama City Beach"),
  ("Paradise Heights"),
  ("Parker"),
  ("Parkland"),
  ("Paxton"),
  ("Pebble Creek"),
  ("Pelican Bay"),
  ("Pembroke Park"),
  ("Pembroke Pines"),
  ("Penney Farms"),
  ("Pensacola"),
  ("Perry"),
  ("Pierson"),
  ("Pine Castle"),
  ("Pinecrest"),
  ("Pine Hills"),
  ("Pine Island"),
  ("Pine Island Center"),
  ("Pine Island Ridge"),
  ("Pine Lakes"),
  ("Pineland"),
  ("Pinellas Park"),
  ("Pine Manor"),
  ("Pine Ridge"),
  ("Pine Ridge"),
  ("Pinewood"),
  ("Pittman"),
  ("Placid Lakes"),
  ("Plantation"),
  ("Plantation"),
  ("Plantation Island"),
  ("Plantation Mobile Home Park"),
  ("Plant City"),
  ("Poinciana"),
  ("Polk City"),
  ("Pomona Park"),
  ("Pompano Beach"),
  ("Pompano Beach Highlands"),
  ("Pompano Estates"),
  ("Ponce de Leon"),
  ("Ponce Inlet"),
  ("Port Charlotte"),
  ("Port La Belle"),
  ("Port Orange"),
  ("Port Richey"),
  ("Port St. Joe"),
  ("Port St. John"),
  ("Port St. Lucie"),
  ("Port St. Lucie-River Park"),
  ("Port Salerno"),
  ("Pretty Bayou"),
  ("Princeton"),
  ("Progress Village"),
  ("Punta Gorda"),
  ("Punta Rassa"),
  ("Quincy"),
  ("Raiford"),
  ("Ramblewood East"),
  ("Ravenswood Estates"),
  ("Reddick"),
  ("Redington Beach"),
  ("Redington Shores"),
  ("Richmond Heights"),
  ("Richmond West"),
  ("Ridgecrest"),
  ("Ridge Manor"),
  ("Ridge Wood Heights"),
  ("Rio"),
  ("Riverland Village"),
  ("Riverview"),
  ("Riviera Beach"),
  ("Rock Island"),
  ("Rockledge"),
  ("Rolling Oaks"),
  ("Roosevelt Gardens"),
  ("Roseland"),
  ("Rotonda"),
  ("Royal Palm Beach"),
  ("Royal Palm Estates"),
  ("Royal Palm Ranches"),
  ("Ruskin"),
  ("Safety Harbor"),
  ("St. Augustine"),
  ("St. Augustine Beach"),
  ("St. Augustine Shores"),
  ("St. Augustine South"),
  ("St. Cloud"),
  ("St. George"),
  ("St. James City"),
  ("St. Leo"),
  ("St. Lucie"),
  ("St. Marks"),
  ("St. Pete Beach"),
  ("St. Petersburg"),
  ("Samoset"),
  ("Samsula-Spruce Creek"),
  ("San Antonio"),
  ("San Carlos Park"),
  ("Sandalfoot Cove"),
  ("Sanford"),
  ("Sanibel"),
  ("Sarasota"),
  ("Sarasota Springs"),
  ("Satellite Beach"),
  ("Sawgrass"),
  ("Schall Circle"),
  ("Scott Lake"),
  ("Sea Ranch Lakes"),
  ("Sebastian"),
  ("Sebring"),
  ("Seffner"),
  ("Seminole"),
  ("Seminole Manor"),
  ("Sewall's Point"),
  ("Shady Hills"),
  ("Shalimar"),
  ("Sharpes"),
  ("Siesta Key"),
  ("Silver Lake"),
  ("Silver Springs Shores"),
  ("Sky Lake"),
  ("Sneads"),
  ("Solana"),
  ("Sopchoppy"),
  ("Sorrento"),
  ("South Apopka"),
  ("South Bay"),
  ("South Beach"),
  ("South Bradenton"),
  ("South Brooksville"),
  ("Southchase"),
  ("South Daytona"),
  ("Southeast Arcadia"),
  ("Southgate"),
  ("South Gate Ridge"),
  ("South Highpoint"),
  ("South Miami"),
  ("South Miami Heights"),
  ("South Palm Beach"),
  ("South Pasadena"),
  ("South Patrick Shores"),
  ("South Sarasota"),
  ("South Venice"),
  ("Springfield"),
  ("Spring Hill"),
  ("Spring Lake"),
  ("Stacey Street"),
  ("Starke"),
  ("Stock Island"),
  ("Stuart"),
  ("Sugarmill Woods"),
  ("Suncoast Estates"),
  ("Sunny Isles Beach"),
  ("Sunrise"),
  ("Sunset"),
  ("Sunshine Acres"),
  ("Sunshine Ranches"),
  ("Surfside"),
  ("Sweetwater"),
  ("Sylvan Shores"),
  ("Taft"),
  ("Tallahassee"),
  ("Tamarac"),
  ("Tamiami"),
  ("Tampa"),
  ("Tangelo Park"),
  ("Tangerine"),
  ("Tarpon Springs"),
  ("Tavares"),
  ("Tavernier"),
  ("Taylor Creek"),
  ("Tedder"),
  ("Temple Terrace"),
  ("Tequesta"),
  ("Terra Mar"),
  ("The Crossings"),
  ("The Hammocks"),
  ("The Meadows"),
  ("The Villages"),
  ("Thonotosassa"),
  ("Three Lakes"),
  ("Three Oaks"),
  ("Tice"),
  ("Tierra Verde"),
  ("Tildenville"),
  ("Timber Pines"),
  ("Titusville"),
  ("Town 'n' Country"),
  ("Treasure Island"),
  ("Trenton"),
  ("Trinity"),
  ("Twin Lakes"),
  ("Tyndall AFB"),
  ("Umatilla"),
  ("Union Park"),
  ("University"),
  ("University Park"),
  ("Upper Grand Lagoon"),
  ("Utopia"),
  ("Valparaiso"),
  ("Valrico"),
  ("Vamo"),
  ("Venice"),
  ("Venice Gardens"),
  ("Vernon"),
  ("Vero Beach"),
  ("Vero Beach South"),
  ("Village Park"),
  ("Villages of Oriole"),
  ("Villano Beach"),
  ("Villas"),
  ("Vineyards"),
  ("Virginia Gardens"),
  ("Wabasso"),
  ("Wabasso Beach"),
  ("Wahneta"),
  ("Waldo"),
  ("Warm Mineral Springs"),
  ("Warrington"),
  ("Washington Park"),
  ("Watertown"),
  ("Wauchula"),
  ("Wausau"),
  ("Waverly"),
  ("Webster"),
  ("Wedgefield"),
  ("Weeki Wachee"),
  ("Weeki Wachee Gardens"),
  ("Wekiwa Springs"),
  ("Welaka"),
  ("Wellington"),
  ("Wesley Chapel"),
  ("Wesley Chapel South"),
  ("West and East Lealman"),
  ("West Bradenton"),
  ("Westchase"),
  ("Westchester"),
  ("West De Land"),
  ("Westgate-Belvedere Homes"),
  ("West Ken-Lark"),
  ("West Little River"),
  ("West Melbourne"),
  ("West Miami"),
  ("Weston"),
  ("West Palm Beach"),
  ("West Pensacola"),
  ("West Perrine"),
  ("West Samoset"),
  ("West Vero Corridor"),
  ("Westview"),
  ("Westville"),
  ("Westwood Lakes"),
  ("Wewahitchka"),
  ("Whiskey Creek"),
  ("Whisper Walk"),
  ("White City"),
  ("White Springs"),
  ("Whitfield"),
  ("Wildwood"),
  ("Williamsburg"),
  ("Williston"),
  ("Williston Highlands"),
  ("Willow Oak"),
  ("Wilton Manors"),
  ("Wimauma"),
  ("Windermere"),
  ("Winston"),
  ("Winter Beach"),
  ("Winter Garden"),
  ("Winter Haven"),
  ("Winter Park"),
  ("Winter Springs"),
  ("Woodville"),
  ("Worthington Springs"),
  ("Wright"),
  ("Yalaha"),
  ("Yankeetown"),
  ("Yeehaw Junction"),
  ("Yulee"),
  ("Zellwood"),
  ("Zephyrhills"),
  ("Zephyrhills North"),
  ("Zephyrhills South"),
  ("Zephyrhills West"),
  ("Zolfo Springs"),
  ("Abbeville"),
  ("Acworth"),
  ("Adairsville"),
  ("Adel"),
  ("Adrian"),
  ("Ailey"),
  ("Alamo"),
  ("Alapaha"),
  ("Albany"),
  ("Aldora"),
  ("Allenhurst"),
  ("Allentown"),
  ("Alma"),
  ("Alpharetta"),
  ("Alston"),
  ("Alto"),
  ("Ambrose"),
  ("Americus"),
  ("Andersonville"),
  ("Arabi"),
  ("Aragon"),
  ("Arcade"),
  ("Argyle"),
  ("Arlington"),
  ("Arnoldsville"),
  ("Ashburn"),
  ("Athens-Clarke County"),
  ("Atlanta"),
  ("Attapulgus"),
  ("Auburn"),
  ("Augusta-Richmond County"),
  ("Austell"),
  ("Avalon"),
  ("Avera"),
  ("Avondale Estates"),
  ("Baconton"),
  ("Bainbridge"),
  ("Baldwin"),
  ("Ball Ground"),
  ("Barnesville"),
  ("Bartow"),
  ("Barwick"),
  ("Baxley"),
  ("Bellville"),
  ("Belvedere Park"),
  ("Berkeley Lake"),
  ("Berlin"),
  ("Bethlehem"),
  ("Between"),
  ("Bibb City"),
  ("Bishop"),
  ("Blackshear"),
  ("Blacksville"),
  ("Blairsville"),
  ("Blakely"),
  ("Bloomingdale"),
  ("Blue Ridge"),
  ("Bluffton"),
  ("Blythe"),
  ("Bogart"),
  ("Bonanza"),
  ("Boston"),
  ("Bostwick"),
  ("Bowdon"),
  ("Bowersville"),
  ("Bowman"),
  ("Braselton"),
  ("Braswell"),
  ("Bremen"),
  ("Brinson"),
  ("Bronwood"),
  ("Brooklet"),
  ("Brooks"),
  ("Broxton"),
  ("Brunswick"),
  ("Buchanan"),
  ("Buckhead"),
  ("Buena Vista"),
  ("Buford"),
  ("Butler"),
  ("Byromville"),
  ("Byron"),
  ("Cadwell"),
  ("Cairo"),
  ("Calhoun"),
  ("Camak"),
  ("Camilla"),
  ("Candler-McAfee"),
  ("Canon"),
  ("Canton"),
  ("Carl"),
  ("Carlton"),
  ("Carnesville"),
  ("Carrollton"),
  ("Cartersville"),
  ("Cave Spring"),
  ("Cecil"),
  ("Cedartown"),
  ("Centerville"),
  ("Centralhatchee"),
  ("Chamblee"),
  ("Chatsworth"),
  ("Chattanooga Valley"),
  ("Chauncey"),
  ("Chester"),
  ("Chickamauga"),
  ("Clarkesville"),
  ("Clarkston"),
  ("Claxton"),
  ("Clayton"),
  ("Clermont"),
  ("Cleveland"),
  ("Climax"),
  ("Cobbtown"),
  ("Cochran"),
  ("Cohutta"),
  ("Colbert"),
  ("Coleman"),
  ("College Park"),
  ("Collins"),
  ("Colquitt"),
  ("Columbus"),
  ("Comer"),
  ("Commerce"),
  ("Concord"),
  ("Conley"),
  ("Conyers"),
  ("Coolidge"),
  ("Cordele"),
  ("Corinth"),
  ("Cornelia"),
  ("Country Club Estates"),
  ("Covington"),
  ("Crawford"),
  ("Crawfordville"),
  ("Culloden"),
  ("Cumming"),
  ("Cusseta"),
  ("Cuthbert"),
  ("Dacula"),
  ("Dahlonega"),
  ("Daisy"),
  ("Dallas"),
  ("Dalton"),
  ("Damascus"),
  ("Danielsville"),
  ("Danville"),
  ("Darien"),
  ("Dasher"),
  ("Davisboro"),
  ("Dawson"),
  ("Dawsonville"),
  ("Dearing"),
  ("Decatur"),
  ("Deenwood"),
  ("Deepstep"),
  ("Demorest"),
  ("Denton"),
  ("De Soto"),
  ("Dexter"),
  ("Dillard"),
  ("Dock Junction"),
  ("Doerun"),
  ("Donalsonville"),
  ("Dooling"),
  ("Doraville"),
  ("Douglas"),
  ("Douglasville"),
  ("Druid Hills"),
  ("Dublin"),
  ("Dudley"),
  ("Duluth"),
  ("Dunwoody"),
  ("Du Pont"),
  ("East Dublin"),
  ("East Ellijay"),
  ("East Griffin"),
  ("Eastman"),
  ("East Newnan"),
  ("East Point"),
  ("Eatonton"),
  ("Edge Hill"),
  ("Edison"),
  ("Elberton"),
  ("Ellaville"),
  ("Ellenton"),
  ("Ellijay"),
  ("Emerson"),
  ("Enigma"),
  ("Ephesus"),
  ("Eton"),
  ("Euharlee"),
  ("Evans"),
  ("Experiment"),
  ("Fairburn"),
  ("Fairmount"),
  ("Fair Oaks"),
  ("Fairview"),
  ("Fargo"),
  ("Fayetteville"),
  ("Fitzgerald"),
  ("Flemington"),
  ("Flovilla"),
  ("Flowery Branch"),
  ("Folkston"),
  ("Forest Park"),
  ("Forsyth"),
  ("Fort Benning South"),
  ("Fort Gaines"),
  ("Fort Oglethorpe"),
  ("Fort Stewart"),
  ("Fort Valley"),
  ("Franklin"),
  ("Franklin Springs"),
  ("Funston"),
  ("Gainesville"),
  ("Garden City"),
  ("Garfield"),
  ("Gay"),
  ("Geneva"),
  ("Georgetown"),
  ("Georgetown"),
  ("Gibson"),
  ("Gillsville"),
  ("Girard"),
  ("Glennville"),
  ("Glenwood"),
  ("Good Hope"),
  ("Gordon"),
  ("Graham"),
  ("Grantville"),
  ("Gray"),
  ("Grayson"),
  ("Greensboro"),
  ("Greenville"),
  ("Gresham Park"),
  ("Griffin"),
  ("Grovetown"),
  ("Gumbranch"),
  ("Gumlog"),
  ("Guyton"),
  ("Hagan"),
  ("Hahira"),
  ("Hamilton"),
  ("Hampton"),
  ("Hannahs Mill"),
  ("Hapeville"),
  ("Haralson"),
  ("Harlem"),
  ("Harrison"),
  ("Hartwell"),
  ("Hawkinsville"),
  ("Hazlehurst"),
  ("Helen"),
  ("Helena"),
  ("Hephzibah"),
  ("Hiawassee"),
  ("Higgston"),
  ("Hilltop"),
  ("Hiltonia"),
  ("Hinesville"),
  ("Hiram"),
  ("Hoboken"),
  ("Hogansville"),
  ("Holly Springs"),
  ("Homeland"),
  ("Homer"),
  ("Homerville"),
  ("Hoschton"),
  ("Hull"),
  ("Ideal"),
  ("Ila"),
  ("Indian Springs"),
  ("Iron City"),
  ("Irondale"),
  ("Irwinton"),
  ("Isle of Hope"),
  ("Ivey"),
  ("Jackson"),
  ("Jacksonville"),
  ("Jakin"),
  ("Jasper"),
  ("Jefferson"),
  ("Jeffersonville"),
  ("Jenkinsburg"),
  ("Jersey"),
  ("Jesup"),
  ("Jonesboro"),
  ("Junction City"),
  ("Kennesaw"),
  ("Keysville"),
  ("Kings Bay Base"),
  ("Kingsland"),
  ("Kingston"),
  ("Kite"),
  ("La Fayette"),
  ("LaGrange"),
  ("Lake City"),
  ("Lakeland"),
  ("Lake Park"),
  ("Lakeview"),
  ("Lakeview Estates"),
  ("Lavonia"),
  ("Lawrenceville"),
  ("Leary"),
  ("Leesburg"),
  ("Lenox"),
  ("Leslie"),
  ("Lexington"),
  ("Lilburn"),
  ("Lilly"),
  ("Lincoln Park"),
  ("Lincolnton"),
  ("Lindale"),
  ("Lithia Springs"),
  ("Lithonia"),
  ("Locust Grove"),
  ("Loganville"),
  ("Lone Oak"),
  ("Lookout Mountain"),
  ("Louisville"),
  ("Lovejoy"),
  ("Ludowici"),
  ("Lula"),
  ("Lumber City"),
  ("Lumpkin"),
  ("Luthersville"),
  ("Lyerly"),
  ("Lyons"),
  ("Mableton"),
  ("McCaysville"),
  ("McDonough"),
  ("McIntyre"),
  ("Macon"),
  ("McRae"),
  ("Madison"),
  ("Manassas"),
  ("Manchester"),
  ("Mansfield"),
  ("Marietta"),
  ("Marshallville"),
  ("Martin"),
  ("Martinez"),
  ("Maxeys"),
  ("Maysville"),
  ("Meansville"),
  ("Meigs"),
  ("Menlo"),
  ("Metter"),
  ("Midville"),
  ("Midway"),
  ("Midway-Hardwick"),
  ("Milan"),
  ("Milledgeville"),
  ("Millen"),
  ("Milner"),
  ("Mitchell"),
  ("Molena"),
  ("Monroe"),
  ("Montezuma"),
  ("Montgomery"),
  ("Monticello"),
  ("Montrose"),
  ("Moody AFB"),
  ("Moreland"),
  ("Morgan"),
  ("Morganton"),
  ("Morrow"),
  ("Morven"),
  ("Moultrie"),
  ("Mountain City"),
  ("Mountain Park"),
  ("Mountain Park"),
  ("Mount Airy"),
  ("Mount Vernon"),
  ("Mount Zion"),
  ("Nahunta"),
  ("Nashville"),
  ("Nelson"),
  ("Newborn"),
  ("Newington"),
  ("Newnan"),
  ("Newton"),
  ("Nicholls"),
  ("Nicholson"),
  ("Norcross"),
  ("Norman Park"),
  ("North Atlanta"),
  ("North Decatur"),
  ("North Druid Hills"),
  ("North High Shoals"),
  ("Norwood"),
  ("Nunez"),
  ("Oak Park"),
  ("Oakwood"),
  ("Ochlocknee"),
  ("Ocilla"),
  ("Oconee"),
  ("Odum"),
  ("Offerman"),
  ("Oglethorpe"),
  ("Oliver"),
  ("Omega"),
  ("Orchard Hill"),
  ("Oxford"),
  ("Palmetto"),
  ("Panthersville"),
  ("Parrott"),
  ("Patterson"),
  ("Pavo"),
  ("Payne"),
  ("Peachtree City"),
  ("Pearson"),
  ("Pelham"),
  ("Pembroke"),
  ("Pendergrass"),
  ("Perry"),
  ("Phillipsburg"),
  ("Pinehurst"),
  ("Pine Lake"),
  ("Pine Mountain"),
  ("Pineview"),
  ("Pitts"),
  ("Plains"),
  ("Plainville"),
  ("Pooler"),
  ("Portal"),
  ("Porterdale"),
  ("Port Wentworth"),
  ("Poulan"),
  ("Powder Springs"),
  ("Preston"),
  ("Pulaski"),
  ("Putney"),
  ("Quitman"),
  ("Ranger"),
  ("Raoul"),
  ("Ray City"),
  ("Rayle"),
  ("Rebecca"),
  ("Redan"),
  ("Reed Creek"),
  ("Register"),
  ("Reidsville"),
  ("Remerton"),
  ("Rentz"),
  ("Resaca"),
  ("Rest Haven"),
  ("Reynolds"),
  ("Rhine"),
  ("Riceboro"),
  ("Richland"),
  ("Richmond Hill"),
  ("Riddleville"),
  ("Rincon"),
  ("Ringgold"),
  ("Riverdale"),
  ("Riverside"),
  ("Roberta"),
  ("Robins AFB"),
  ("Rochelle"),
  ("Rockmart"),
  ("Rocky Ford"),
  ("Rome"),
  ("Roopville"),
  ("Rossville"),
  ("Roswell"),
  ("Royston"),
  ("Rutledge"),
  ("St. Marys"),
  ("St. Simons"),
  ("Sale City"),
  ("Salem"),
  ("Sandersville"),
  ("Sandy Springs"),
  ("Santa Claus"),
  ("Sardis"),
  ("Sasser"),
  ("Savannah"),
  ("Scotland"),
  ("Scottdale"),
  ("Screven"),
  ("Senoia"),
  ("Shady Dale"),
  ("Shannon"),
  ("Sharon"),
  ("Sharpsburg"),
  ("Shellman"),
  ("Shiloh"),
  ("Siloam"),
  ("Skidaway Island"),
  ("Sky Valley"),
  ("Smithville"),
  ("Smyrna"),
  ("Snellville"),
  ("Social Circle"),
  ("Soperton"),
  ("Sparks"),
  ("Sparta"),
  ("Springfield"),
  ("Stapleton"),
  ("Statesboro"),
  ("Statham"),
  ("Stillmore"),
  ("Stockbridge"),
  ("Stone Mountain"),
  ("Sugar Hill"),
  ("Summertown"),
  ("Summerville"),
  ("Sumner"),
  ("Sunny Side"),
  ("Sunnyside"),
  ("Sunset Village"),
  ("Surrency"),
  ("Suwanee"),
  ("Swainsboro"),
  ("Sycamore"),
  ("Sylvania"),
  ("Sylvester"),
  ("Talbotton"),
  ("Talking Rock"),
  ("Tallapoosa"),
  ("Tallulah Falls"),
  ("Talmo"),
  ("Tarrytown"),
  ("Taylorsville"),
  ("Temple"),
  ("Tennille"),
  ("Thomaston"),
  ("Thomasville"),
  ("Thomson"),
  ("Thunderbolt"),
  ("Tifton"),
  ("Tiger"),
  ("Tignall"),
  ("Toccoa"),
  ("Toomsboro"),
  ("Trenton"),
  ("Trion"),
  ("Tucker"),
  ("Tunnel Hill"),
  ("Turin"),
  ("Twin City"),
  ("Tybee Island"),
  ("Tyrone"),
  ("Ty Ty"),
  ("Unadilla"),
  ("Union City"),
  ("Union Point"),
  ("Unionville"),
  ("Uvalda"),
  ("Valdosta"),
  ("Varnell"),
  ("Vernonburg"),
  ("Vidalia"),
  ("Vidette"),
  ("Vienna"),
  ("Villa Rica"),
  ("Vinings"),
  ("Waco"),
  ("Wadley"),
  ("Waleska"),
  ("Walnut Grove"),
  ("Walthourville"),
  ("Warm Springs"),
  ("Warner Robins"),
  ("Warrenton"),
  ("Warwick"),
  ("Washington"),
  ("Watkinsville"),
  ("Waverly Hall"),
  ("Waycross"),
  ("Waynesboro"),
  ("Weston"),
  ("West Point"),
  ("Whigham"),
  ("White"),
  ("Whitemarsh Island"),
  ("White Plains"),
  ("Whitesburg"),
  ("Willacoochee"),
  ("Williamson"),
  ("Wilmington Island"),
  ("Winder"),
  ("Winterville"),
  ("Woodbine"),
  ("Woodbury"),
  ("Woodland"),
  ("Woodstock"),
  ("Woodville"),
  ("Woolsey"),
  ("Wrens"),
  ("Wrightsville"),
  ("Yatesville"),
  ("Young Harris"),
  ("Zebulon"),
  ("Ahuimanu"),
  ("Aiea"),
  ("Ainaloa"),
  ("Anahola"),
  ("Barbers Point Housing"),
  ("Captain Cook"),
  ("Eden Roc"),
  ("Eleele"),
  ("Ewa Beach"),
  ("Ewa Gentry"),
  ("Ewa Villages"),
  ("Fern Acres"),
  ("Fern Forest"),
  ("Haiku-Pauwela"),
  ("Halaula"),
  ("Halawa"),
  ("Haleiwa"),
  ("Haliimaile"),
  ("Hana"),
  ("Hanalei"),
  ("Hanamaulu"),
  ("Hanapepe"),
  ("Hauula"),
  ("Hawaiian Acres"),
  ("Hawaiian Beaches"),
  ("Hawaiian Ocean View"),
  ("Hawaiian Paradise Park"),
  ("Hawi"),
  ("Heeia"),
  ("Hickam Housing"),
  ("Hilo"),
  ("Holualoa"),
  ("Honalo"),
  ("Honaunau-Napoopoo"),
  ("Honokaa"),
  ("Honolulu"),
  ("Honomu"),
  ("Iroquois Point"),
  ("Kaaawa"),
  ("Kaanapali"),
  ("Kahaluu"),
  ("Kahaluu-Keauhou"),
  ("Kahuku"),
  ("Kahului"),
  ("Kailua"),
  ("Kailua"),
  ("Kalaheo"),
  ("Kalaoa"),
  ("Kalihiwai"),
  ("Kaneohe"),
  ("Kaneohe Station"),
  ("Kapaa"),
  ("Kapaau"),
  ("Kapalua"),
  ("Kaumakani"),
  ("Kaunakakai"),
  ("Kawela Bay"),
  ("Keaau"),
  ("Kealakekua"),
  ("Kekaha"),
  ("Kihei"),
  ("Kilauea"),
  ("Koloa"),
  ("Kualapuu"),
  ("Kukuihaele"),
  ("Kurtistown"),
  ("Lahaina"),
  ("Laie"),
  ("Lanai City"),
  ("Laupahoehoe"),
  ("Lawai"),
  ("Leilani Estates"),
  ("Lihue"),
  ("Maalaea"),
  ("Maili"),
  ("Makaha"),
  ("Makaha Valley"),
  ("Makakilo City"),
  ("Makawao"),
  ("Maunaloa"),
  ("Maunawili"),
  ("Mililani Town"),
  ("Mokuleia"),
  ("Mountain View"),
  ("Naalehu"),
  ("Nanakuli"),
  ("Nanawale Estates"),
  ("Napili-Honokowai"),
  ("Omao"),
  ("Orchidlands Estates"),
  ("Paauilo"),
  ("Pahala"),
  ("Pahoa"),
  ("Paia"),
  ("Pakala Village"),
  ("Papaikou"),
  ("Paukaa"),
  ("Pearl City"),
  ("Pepeekeo"),
  ("Poipu"),
  ("Princeville"),
  ("Puako"),
  ("Puhi"),
  ("Pukalani"),
  ("Punaluu"),
  ("Pupukea"),
  ("Schofield Barracks"),
  ("Village Park"),
  ("Volcano"),
  ("Wahiawa"),
  ("Waialua"),
  ("Waianae"),
  ("Waihee-Waiehu"),
  ("Waikane"),
  ("Waikapu"),
  ("Waikoloa Village"),
  ("Wailea-Makena"),
  ("Wailua"),
  ("Wailua Homesteads"),
  ("Wailuku"),
  ("Waimalu"),
  ("Waimanalo"),
  ("Waimanalo Beach"),
  ("Waimea"),
  ("Waimea"),
  ("Wainaku"),
  ("Waipahu"),
  ("Waipio"),
  ("Waipio Acres"),
  ("Wheeler AFB"),
  ("Whitmore Village"),
  ("Aberdeen"),
  ("Acequia"),
  ("Albion"),
  ("American Falls"),
  ("Ammon"),
  ("Arbon Valley"),
  ("Arco"),
  ("Arimo"),
  ("Ashton"),
  ("Athol"),
  ("Atomic City"),
  ("Bancroft"),
  ("Basalt"),
  ("Bellevue"),
  ("Blackfoot"),
  ("Bliss"),
  ("Bloomington"),
  ("Boise City"),
  ("Bonners Ferry"),
  ("Bovill"),
  ("Buhl"),
  ("Burley"),
  ("Butte City"),
  ("Caldwell"),
  ("Cambridge"),
  ("Carey"),
  ("Cascade"),
  ("Castleford"),
  ("Challis"),
  ("Chubbuck"),
  ("Clark Fork"),
  ("Clayton"),
  ("Clifton"),
  ("Coeur d'Alene"),
  ("Cottonwood"),
  ("Council"),
  ("Craigmont"),
  ("Crouch"),
  ("Culdesac"),
  ("Dalton Gardens"),
  ("Dayton"),
  ("Deary"),
  ("Declo"),
  ("Dietrich"),
  ("Donnelly"),
  ("Dover"),
  ("Downey"),
  ("Driggs"),
  ("Drummond"),
  ("Dubois"),
  ("Eagle"),
  ("East Hope"),
  ("Eden"),
  ("Elk River"),
  ("Emmett"),
  ("Fairfield"),
  ("Ferdinand"),
  ("Fernan Lake Village"),
  ("Filer"),
  ("Firth"),
  ("Fort Hall"),
  ("Franklin"),
  ("Fruitland"),
  ("Garden City"),
  ("Genesee"),
  ("Georgetown"),
  ("Glenns Ferry"),
  ("Gooding"),
  ("Grace"),
  ("Grand View"),
  ("Grangeville"),
  ("Greenleaf"),
  ("Hagerman"),
  ("Hailey"),
  ("Hamer"),
  ("Hansen"),
  ("Harrison"),
  ("Hauser"),
  ("Hayden"),
  ("Hayden Lake"),
  ("Hazelton"),
  ("Heyburn"),
  ("Hollister"),
  ("Homedale"),
  ("Hope"),
  ("Horseshoe Bend"),
  ("Huetter"),
  ("Idaho City"),
  ("Idaho Falls"),
  ("Inkom"),
  ("Iona"),
  ("Irwin"),
  ("Island Park"),
  ("Jerome"),
  ("Juliaetta"),
  ("Kamiah"),
  ("Kellogg"),
  ("Kendrick"),
  ("Ketchum"),
  ("Kimberly"),
  ("Kooskia"),
  ("Kootenai"),
  ("Kuna"),
  ("Lapwai"),
  ("Lava Hot Springs"),
  ("Leadore"),
  ("Lewiston"),
  ("Lewisville"),
  ("Lost River"),
  ("McCall"),
  ("McCammon"),
  ("Mackay"),
  ("Malad City"),
  ("Malta"),
  ("Marsing"),
  ("Melba"),
  ("Menan"),
  ("Meridian"),
  ("Middleton"),
  ("Midvale"),
  ("Minidoka"),
  ("Montpelier"),
  ("Moore"),
  ("Moscow"),
  ("Mountain Home"),
  ("Mountain Home AFB"),
  ("Moyie Springs"),
  ("Mud Lake"),
  ("Mullan"),
  ("Murtaugh"),
  ("Nampa"),
  ("Newdale"),
  ("New Meadows"),
  ("New Plymouth"),
  ("Nezperce"),
  ("Notus"),
  ("Oakley"),
  ("Oldtown"),
  ("Onaway"),
  ("Orofino"),
  ("Osburn"),
  ("Oxford"),
  ("Paris"),
  ("Parker"),
  ("Parkline"),
  ("Parma"),
  ("Paul"),
  ("Payette"),
  ("Peck"),
  ("Pierce"),
  ("Pinehurst"),
  ("Placerville"),
  ("Plummer"),
  ("Pocatello"),
  ("Ponderay"),
  ("Post Falls"),
  ("Potlatch"),
  ("Preston"),
  ("Priest River"),
  ("Rathdrum"),
  ("Reubens"),
  ("Rexburg"),
  ("Richfield"),
  ("Rigby"),
  ("Riggins"),
  ("Ririe"),
  ("Roberts"),
  ("Rockland"),
  ("Rupert"),
  ("St. Anthony"),
  ("St. Charles"),
  ("St. Maries"),
  ("Salmon"),
  ("Sandpoint"),
  ("Shelley"),
  ("Shoshone"),
  ("Smelterville"),
  ("Soda Springs"),
  ("Spencer"),
  ("Spirit Lake"),
  ("Stanley"),
  ("Star"),
  ("State Line"),
  ("Stites"),
  ("Sugar City"),
  ("Sun Valley"),
  ("Swan Valley"),
  ("Tensed"),
  ("Teton"),
  ("Tetonia"),
  ("Troy"),
  ("Twin Falls"),
  ("Ucon"),
  ("Victor"),
  ("Wallace"),
  ("Wardner"),
  ("Warm River"),
  ("Weippe"),
  ("Weiser"),
  ("Wendell"),
  ("Weston"),
  ("White Bird"),
  ("Wilder"),
  ("Winchester"),
  ("Worley"),
  ("Abingdon"),
  ("Addieville"),
  ("Addison"),
  ("Adeline"),
  ("Albany"),
  ("Albers"),
  ("Albion"),
  ("Aledo"),
  ("Alexis"),
  ("Algonquin"),
  ("Alhambra"),
  ("Allendale"),
  ("Allenville"),
  ("Allerton"),
  ("Alma"),
  ("Alorton"),
  ("Alpha"),
  ("Alsey"),
  ("Alsip"),
  ("Altamont"),
  ("Alton"),
  ("Altona"),
  ("Alto Pass"),
  ("Alvin"),
  ("Amboy"),
  ("Anchor"),
  ("Andalusia"),
  ("Andover"),
  ("Anna"),
  ("Annawan"),
  ("Antioch"),
  ("Apple River"),
  ("Arcola"),
  ("Arenzville"),
  ("Argenta"),
  ("Arlington"),
  ("Arlington Heights"),
  ("Armington"),
  ("Aroma Park"),
  ("Arrowsmith"),
  ("Arthur"),
  ("Ashkum"),
  ("Ashland"),
  ("Ashley"),
  ("Ashmore"),
  ("Ashton"),
  ("Assumption"),
  ("Astoria"),
  ("Athens"),
  ("Atkinson"),
  ("Atlanta"),
  ("Atwood"),
  ("Auburn"),
  ("Augusta"),
  ("Aurora"),
  ("Ava"),
  ("Aviston"),
  ("Avon"),
  ("Baldwin"),
  ("Banner"),
  ("Bannockburn"),
  ("Bardolph"),
  ("Barrington"),
  ("Barrington Hills"),
  ("Barry"),
  ("Bartelso"),
  ("Bartlett"),
  ("Bartonville"),
  ("Basco"),
  ("Batavia"),
  ("Batchtown"),
  ("Bath"),
  ("Baylis"),
  ("Bay View Gardens"),
  ("Beach Park"),
  ("Beardstown"),
  ("Beaverville"),
  ("Beckemeyer"),
  ("Bedford Park"),
  ("Beecher"),
  ("Beecher City"),
  ("Belgium"),
  ("Belknap"),
  ("Belle Prairie City"),
  ("Belle Rive"),
  ("Belleville"),
  ("Bellevue"),
  ("Bellflower"),
  ("Bellmont"),
  ("Bellwood"),
  ("Belvidere"),
  ("Bement"),
  ("Benld"),
  ("Bensenville"),
  ("Benson"),
  ("Bentley"),
  ("Benton"),
  ("Berkeley"),
  ("Berlin"),
  ("Berwyn"),
  ("Bethalto"),
  ("Bethany"),
  ("Biggsville"),
  ("Bingham"),
  ("Birds"),
  ("Bishop Hill"),
  ("Bismarck"),
  ("Blandinsville"),
  ("Bloomingdale"),
  ("Bloomington"),
  ("Blue Island"),
  ("Blue Mound"),
  ("Bluffs"),
  ("Bluford"),
  ("Bolingbrook"),
  ("Bondville"),
  ("Bone Gap"),
  ("Bonfield"),
  ("Bonnie"),
  ("Boulder Hill"),
  ("Bourbonnais"),
  ("Bowen"),
  ("Braceville"),
  ("Bradford"),
  ("Bradley"),
  ("Braidwood"),
  ("Breese"),
  ("Bridgeport"),
  ("Bridgeview"),
  ("Brighton"),
  ("Brimfield"),
  ("Broadlands"),
  ("Broadview"),
  ("Broadwell"),
  ("Brocton"),
  ("Brookfield"),
  ("Brooklyn"),
  ("Brookport"),
  ("Broughton"),
  ("Browning"),
  ("Browns"),
  ("Brownstown"),
  ("Brussels"),
  ("Bryant"),
  ("Buckingham"),
  ("Buckley"),
  ("Buckner"),
  ("Buda"),
  ("Buffalo"),
  ("Buffalo Grove"),
  ("Bull Valley"),
  ("Bulpitt"),
  ("Buncombe"),
  ("Bunker Hill"),
  ("Burbank"),
  ("Bureau Junction"),
  ("Burlington"),
  ("Burnham"),
  ("Burnt Prairie"),
  ("Burr Ridge"),
  ("Bush"),
  ("Bushnell"),
  ("Butler"),
  ("Byron"),
  ("Cabery"),
  ("Cahokia"),
  ("Cairo"),
  ("Caledonia"),
  ("Calhoun"),
  ("Calumet City"),
  ("Calumet Park"),
  ("Camargo"),
  ("Cambria"),
  ("Cambridge"),
  ("Camden"),
  ("Campbell Hill"),
  ("Camp Point"),
  ("Campus"),
  ("Canton"),
  ("Cantrall"),
  ("Capron"),
  ("Carbon Cliff"),
  ("Carbondale"),
  ("Carbon Hill"),
  ("Carlinville"),
  ("Carlock"),
  ("Carlyle"),
  ("Carmi"),
  ("Carol Stream"),
  ("Carpentersville"),
  ("Carrier Mills"),
  ("Carrollton"),
  ("Carterville"),
  ("Carthage"),
  ("Cary"),
  ("Casey"),
  ("Caseyville"),
  ("Catlin"),
  ("Cave-In-Rock"),
  ("Cedar Point"),
  ("Cedarville"),
  ("Central City"),
  ("Centralia"),
  ("Centreville"),
  ("Cerro Gordo"),
  ("Chadwick"),
  ("Champaign"),
  ("Chandlerville"),
  ("Channahon"),
  ("Channel Lake"),
  ("Chapin"),
  ("Charleston"),
  ("Chatham"),
  ("Chatsworth"),
  ("Chebanse"),
  ("Chenoa"),
  ("Cherry"),
  ("Cherry Valley"),
  ("Chester"),
  ("Chesterfield"),
  ("Chicago"),
  ("Chicago Heights"),
  ("Chicago Ridge"),
  ("Chillicothe"),
  ("Chrisman"),
  ("Christopher"),
  ("Cicero"),
  ("Cisco"),
  ("Cisne"),
  ("Cissna Park"),
  ("Claremont"),
  ("Clarendon Hills"),
  ("Clay City"),
  ("Clayton"),
  ("Clear Lake"),
  ("Cleveland"),
  ("Clifton"),
  ("Clinton"),
  ("Coal City"),
  ("Coalton"),
  ("Coal Valley"),
  ("Coatsburg"),
  ("Cobden"),
  ("Coffeen"),
  ("Colchester"),
  ("Coleta"),
  ("Colfax"),
  ("Collinsville"),
  ("Colona"),
  ("Colp"),
  ("Columbia"),
  ("Columbus"),
  ("Compton"),
  ("Concord"),
  ("Congerville"),
  ("Cooksville"),
  ("Cordova"),
  ("Cornell"),
  ("Cortland"),
  ("Coulterville"),
  ("Country Club Hills"),
  ("Countryside"),
  ("Cowden"),
  ("Coyne Center"),
  ("Crainville"),
  ("Creal Springs"),
  ("Crescent City"),
  ("Crest Hill"),
  ("Creston"),
  ("Crestwood"),
  ("Crete"),
  ("Creve Coeur"),
  ("Crossville"),
  ("Crystal Lake"),
  ("Crystal Lawns"),
  ("Cuba"),
  ("Cullom"),
  ("Cutler"),
  ("Cypress"),
  ("Dahlgren"),
  ("Dakota"),
  ("Dallas City"),
  ("Dalton City"),
  ("Dalzell"),
  ("Damiansville"),
  ("Dana"),
  ("Danforth"),
  ("Danvers"),
  ("Danville"),
  ("Darien"),
  ("Davis"),
  ("Davis Junction"),
  ("Dawson"),
  ("Decatur"),
  ("Deer Creek"),
  ("Deerfield"),
  ("Deer Grove"),
  ("Deer Park"),
  ("DeKalb"),
  ("De Land"),
  ("Delavan"),
  ("De Pue"),
  ("De Soto"),
  ("Des Plaines"),
  ("Detroit"),
  ("De Witt"),
  ("Diamond"),
  ("Dieterich"),
  ("Divernon"),
  ("Dix"),
  ("Dixmoor"),
  ("Dixon"),
  ("Dolton"),
  ("Dongola"),
  ("Donnellson"),
  ("Donovan"),
  ("Dorchester"),
  ("Dover"),
  ("Dowell"),
  ("Downers Grove"),
  ("Downs"),
  ("Du Bois"),
  ("Dunfermline"),
  ("Dunlap"),
  ("Dupo"),
  ("Du Quoin"),
  ("Durand"),
  ("Dwight"),
  ("Eagarville"),
  ("Earlville"),
  ("East Alton"),
  ("East Brooklyn"),
  ("East Cape Girardeau"),
  ("East Carondelet"),
  ("East Dubuque"),
  ("East Dundee"),
  ("East Galesburg"),
  ("East Gillespie"),
  ("East Hazel Crest"),
  ("East Moline"),
  ("Easton"),
  ("East Peoria"),
  ("East St. Louis"),
  ("Eddyville"),
  ("Edgewood"),
  ("Edinburg"),
  ("Edwardsville"),
  ("Effingham"),
  ("Elburn"),
  ("El Dara"),
  ("Eldorado"),
  ("Eldred"),
  ("Elgin"),
  ("Elizabeth"),
  ("Elizabethtown"),
  ("Elk Grove Village"),
  ("Elkhart"),
  ("Elkville"),
  ("Elliott"),
  ("Ellis Grove"),
  ("Ellisville"),
  ("Ellsworth"),
  ("Elmhurst"),
  ("Elmwood"),
  ("Elmwood Park"),
  ("El Paso"),
  ("Elsah"),
  ("Elvaston"),
  ("Elwood"),
  ("Emden"),
  ("Emington"),
  ("Energy"),
  ("Enfield"),
  ("Equality"),
  ("Erie"),
  ("Essex"),
  ("Eureka"),
  ("Evanston"),
  ("Evansville"),
  ("Evergreen Park"),
  ("Ewing"),
  ("Exeter"),
  ("Fairbury"),
  ("Fairfield"),
  ("Fairmont"),
  ("Fairmont City"),
  ("Fairmount"),
  ("Fairview"),
  ("Fairview Heights"),
  ("Farina"),
  ("Farmer City"),
  ("Farmersville"),
  ("Farmington"),
  ("Fayetteville"),
  ("Ferris"),
  ("Fidelity"),
  ("Fieldon"),
  ("Fillmore"),
  ("Findlay"),
  ("Fisher"),
  ("Fithian"),
  ("Flanagan"),
  ("Flat Rock"),
  ("Flora"),
  ("Florence"),
  ("Flossmoor"),
  ("Foosland"),
  ("Ford Heights"),
  ("Forest City"),
  ("Forest Lake"),
  ("Forest Park"),
  ("Forest View"),
  ("Forrest"),
  ("Forreston"),
  ("Forsyth"),
  ("Fox Lake"),
  ("Fox Lake Hills"),
  ("Fox River Grove"),
  ("Fox River Valley Gardens"),
  ("Frankfort"),
  ("Frankfort Square"),
  ("Franklin"),
  ("Franklin Grove"),
  ("Franklin Park"),
  ("Freeburg"),
  ("Freeman Spur"),
  ("Freeport"),
  ("Fulton"),
  ("Fults"),
  ("Gages Lake"),
  ("Galatia"),
  ("Galena"),
  ("Galesburg"),
  ("Galva"),
  ("Gardner"),
  ("Garrett"),
  ("Gays"),
  ("Geneseo"),
  ("Geneva"),
  ("Genoa"),
  ("Georgetown"),
  ("Germantown"),
  ("Germantown Hills"),
  ("German Valley"),
  ("Gibson"),
  ("Gifford"),
  ("Gilberts"),
  ("Gillespie"),
  ("Gilman"),
  ("Girard"),
  ("Gladstone"),
  ("Glasford"),
  ("Glasgow"),
  ("Glen Carbon"),
  ("Glencoe"),
  ("Glendale Heights"),
  ("Glen Ellyn"),
  ("Glenview"),
  ("Glenwood"),
  ("Godfrey"),
  ("Godley"),
  ("Golconda"),
  ("Golden"),
  ("Golden Gate"),
  ("Golf"),
  ("Goodfield"),
  ("Good Hope"),
  ("Goodings Grove"),
  ("Goreville"),
  ("Gorham"),
  ("Grafton"),
  ("Grand Ridge"),
  ("Grand Tower"),
  ("Grandview"),
  ("Grandwood Park"),
  ("Granite City"),
  ("Grantfork"),
  ("Grant Park"),
  ("Granville"),
  ("Grayslake"),
  ("Grayville"),
  ("Greenfield"),
  ("Green Oaks"),
  ("Greenup"),
  ("Green Valley"),
  ("Greenview"),
  ("Greenville"),
  ("Greenwood"),
  ("Gridley"),
  ("Griggsville"),
  ("Gulf Port"),
  ("Gurnee"),
  ("Hainesville"),
  ("Hamburg"),
  ("Hamel"),
  ("Hamilton"),
  ("Hammond"),
  ("Hampshire"),
  ("Hampton"),
  ("Hanaford"),
  ("Hanna City"),
  ("Hanover"),
  ("Hanover Park"),
  ("Hardin"),
  ("Harmon"),
  ("Harrisburg"),
  ("Harristown"),
  ("Hartford"),
  ("Hartsburg"),
  ("Harvard"),
  ("Harvel"),
  ("Harvey"),
  ("Harwood Heights"),
  ("Havana"),
  ("Hawthorn Woods"),
  ("Hazel Crest"),
  ("Hebron"),
  ("Hecker"),
  ("Henderson"),
  ("Hennepin"),
  ("Henning"),
  ("Henry"),
  ("Herrick"),
  ("Herrin"),
  ("Herscher"),
  ("Hettick"),
  ("Heyworth"),
  ("Hickory Hills"),
  ("Hidalgo"),
  ("Highland"),
  ("Highland Park"),
  ("Highwood"),
  ("Hillcrest"),
  ("Hillsboro"),
  ("Hillsdale"),
  ("Hillside"),
  ("Hillview"),
  ("Hinckley"),
  ("Hindsboro"),
  ("Hinsdale"),
  ("Hodgkins"),
  ("Hoffman"),
  ("Hoffman Estates"),
  ("Holiday Hills"),
  ("Hollowayville"),
  ("Homer"),
  ("Hometown"),
  ("Homewood"),
  ("Hoopeston"),
  ("Hooppole"),
  ("Hopedale"),
  ("Hopewell"),
  ("Hopkins Park"),
  ("Hoyleton"),
  ("Hudson"),
  ("Huey"),
  ("Hull"),
  ("Humboldt"),
  ("Hume"),
  ("Huntley"),
  ("Hurst"),
  ("Hutsonville"),
  ("Illiopolis"),
  ("Ina"),
  ("Indian Creek"),
  ("Indian Head Park"),
  ("Indianola"),
  ("Industry"),
  ("Ingalls Park"),
  ("Inverness"),
  ("Iola"),
  ("Ipava"),
  ("Iroquois"),
  ("Irving"),
  ("Irvington"),
  ("Irwin"),
  ("Island Lake"),
  ("Itasca"),
  ("Iuka"),
  ("Ivesdale"),
  ("Jacksonville"),
  ("Jeffersonville"),
  ("Jeisyville"),
  ("Jerome"),
  ("Jerseyville"),
  ("Jewett"),
  ("Johnsburg"),
  ("Johnsonville"),
  ("Johnston City"),
  ("Joliet"),
  ("Jonesboro"),
  ("Joppa"),
  ("Joy"),
  ("Junction"),
  ("Junction City"),
  ("Justice"),
  ("Kampsville"),
  ("Kane"),
  ("Kangley"),
  ("Kankakee"),
  ("Kansas"),
  ("Kappa"),
  ("Karnak"),
  ("Kaskaskia"),
  ("Keenes"),
  ("Keensburg"),
  ("Keithsburg"),
  ("Kell"),
  ("Kempton"),
  ("Kenilworth"),
  ("Kenney"),
  ("Kewanee"),
  ("Keyesport"),
  ("Kilbourne"),
  ("Kildeer"),
  ("Kincaid"),
  ("Kinderhook"),
  ("Kingston"),
  ("Kingston Mines"),
  ("Kinmundy"),
  ("Kinsman"),
  ("Kirkland"),
  ("Kirkwood"),
  ("Knoxville"),
  ("Lacon"),
  ("Ladd"),
  ("La Fayette"),
  ("La Grange"),
  ("La Grange Park"),
  ("La Harpe"),
  ("Lake Barrington"),
  ("Lake Bluff"),
  ("Lake Catherine"),
  ("Lake Forest"),
  ("Lake in the Hills"),
  ("Lakemoor"),
  ("Lake of the Woods"),
  ("Lake Summerset"),
  ("Lake Villa"),
  ("Lakewood"),
  ("Lakewood Shores"),
  ("Lake Zurich"),
  ("La Moille"),
  ("Lanark"),
  ("Lansing"),
  ("La Prairie"),
  ("La Rose"),
  ("La Salle"),
  ("Latham"),
  ("Lawrenceville"),
  ("Leaf River"),
  ("Lebanon"),
  ("Lee"),
  ("Leland"),
  ("Leland Grove"),
  ("Lemont"),
  ("Lena"),
  ("Lenzburg"),
  ("Leonore"),
  ("Lerna"),
  ("Le Roy"),
  ("Lewistown"),
  ("Lexington"),
  ("Liberty"),
  ("Libertyville"),
  ("Lily Lake"),
  ("Lima"),
  ("Lincoln"),
  ("Lincolnshire"),
  ("Lincolnwood"),
  ("Lindenhurst"),
  ("Lisbon"),
  ("Lisle"),
  ("Litchfield"),
  ("Littleton"),
  ("Little York"),
  ("Liverpool"),
  ("Livingston"),
  ("Loami"),
  ("Lockport"),
  ("Loda"),
  ("Lomax"),
  ("Lombard"),
  ("London Mills"),
  ("Long Creek"),
  ("Long Grove"),
  ("Long Lake"),
  ("Long Point"),
  ("Longview"),
  ("Loraine"),
  ("Lostant"),
  ("Louisville"),
  ("Loves Park"),
  ("Lovington"),
  ("Ludlow"),
  ("Lyndon"),
  ("Lynnville"),
  ("Lynwood"),
  ("Lyons"),
  ("McCook"),
  ("McCullom Lake"),
  ("Macedonia"),
  ("McHenry"),
  ("Machesney Park"),
  ("Mackinaw"),
  ("McLean"),
  ("McLeansboro"),
  ("McNabb"),
  ("Macomb"),
  ("Macon"),
  ("Madison"),
  ("Maeystown"),
  ("Magnolia"),
  ("Mahomet"),
  ("Makanda"),
  ("Malden"),
  ("Malta"),
  ("Manchester"),
  ("Manhattan"),
  ("Manito"),
  ("Manlius"),
  ("Mansfield"),
  ("Manteno"),
  ("Maple Park"),
  ("Mapleton"),
  ("Maquon"),
  ("Marengo"),
  ("Marietta"),
  ("Marine"),
  ("Marion"),
  ("Marissa"),
  ("Mark"),
  ("Markham"),
  ("Maroa"),
  ("Marquette Heights"),
  ("Marseilles"),
  ("Marshall"),
  ("Martinsville"),
  ("Martinton"),
  ("Maryville"),
  ("Mascoutah"),
  ("Mason"),
  ("Mason City"),
  ("Matherville"),
  ("Matteson"),
  ("Mattoon"),
  ("Maunie"),
  ("Maywood"),
  ("Mazon"),
  ("Mechanicsburg"),
  ("Media"),
  ("Medora"),
  ("Melrose Park"),
  ("Melvin"),
  ("Mendon"),
  ("Mendota"),
  ("Menominee"),
  ("Meredosia"),
  ("Merrionette Park"),
  ("Metamora"),
  ("Metcalf"),
  ("Metropolis"),
  ("Mettawa"),
  ("Middletown"),
  ("Midlothian"),
  ("Milan"),
  ("Milford"),
  ("Mill Creek"),
  ("Milledgeville"),
  ("Millington"),
  ("Mill Shoals"),
  ("Millstadt"),
  ("Milton"),
  ("Mineral"),
  ("Minier"),
  ("Minonk"),
  ("Minooka"),
  ("Modesto"),
  ("Mokena"),
  ("Moline"),
  ("Momence"),
  ("Monee"),
  ("Monmouth"),
  ("Montgomery"),
  ("Monticello"),
  ("Montrose"),
  ("Morris"),
  ("Morrison"),
  ("Morrisonville"),
  ("Morton"),
  ("Morton Grove"),
  ("Mound City"),
  ("Mounds"),
  ("Mound Station"),
  ("Mount Auburn"),
  ("Mount Carmel"),
  ("Mount Carroll"),
  ("Mount Clare"),
  ("Mount Erie"),
  ("Mount Morris"),
  ("Mount Olive"),
  ("Mount Prospect"),
  ("Mount Pulaski"),
  ("Mount Sterling"),
  ("Mount Vernon"),
  ("Mount Zion"),
  ("Moweaqua"),
  ("Muddy"),
  ("Mulberry Grove"),
  ("Muncie"),
  ("Mundelein"),
  ("Murphysboro"),
  ("Murrayville"),
  ("Naperville"),
  ("Naplate"),
  ("Naples"),
  ("Nashville"),
  ("Nason"),
  ("Nauvoo"),
  ("Nebo"),
  ("Nelson"),
  ("Neoga"),
  ("Neponset"),
  ("Newark"),
  ("New Athens"),
  ("New Baden"),
  ("New Bedford"),
  ("New Berlin"),
  ("New Boston"),
  ("New Burnside"),
  ("New Canton"),
  ("New Douglas"),
  ("New Grand Chain"),
  ("New Haven"),
  ("New Holland"),
  ("New Lenox"),
  ("Newman"),
  ("New Millford"),
  ("New Minden"),
  ("New Salem"),
  ("Newton"),
  ("Niantic"),
  ("Niles"),
  ("Nilwood"),
  ("Noble"),
  ("Nokomis"),
  ("Nora"),
  ("Normal"),
  ("Norridge"),
  ("Norris"),
  ("Norris City"),
  ("North Aurora"),
  ("North Barrington"),
  ("Northbrook"),
  ("North Chicago"),
  ("North City"),
  ("Northfield"),
  ("North Henderson"),
  ("Northlake"),
  ("North Pekin"),
  ("North Riverside"),
  ("North Utica"),
  ("Norwood"),
  ("Oak Brook"),
  ("Oakbrook Terrace"),
  ("Oakdale"),
  ("Oakford"),
  ("Oak Forest"),
  ("Oak Grove"),
  ("Oakland"),
  ("Oak Lawn"),
  ("Oak Park"),
  ("Oakwood"),
  ("Oakwood Hills"),
  ("Oblong"),
  ("Oconee"),
  ("Odell"),
  ("Odin"),
  ("O'Fallon"),
  ("Ogden"),
  ("Oglesby"),
  ("Ohio"),
  ("Ohlman"),
  ("Okawville"),
  ("Old Mill Creek"),
  ("Old Ripley"),
  ("Old Shawneetown"),
  ("Olmsted"),
  ("Olney"),
  ("Olympia Fields"),
  ("Omaha"),
  ("Onarga"),
  ("Oneida"),
  ("Oquawka"),
  ("Orangeville"),
  ("Oreana"),
  ("Oregon"),
  ("Orient"),
  ("Orion"),
  ("Orland Hills"),
  ("Orland Park"),
  ("Oswego"),
  ("Ottawa"),
  ("Otterville"),
  ("Owaneco"),
  ("Palatine"),
  ("Palestine"),
  ("Palmer"),
  ("Palmyra"),
  ("Palos Heights"),
  ("Palos Hills"),
  ("Palos Park"),
  ("Pana"),
  ("Panama"),
  ("Panola"),
  ("Papineau"),
  ("Paris"),
  ("Park City"),
  ("Parkersburg"),
  ("Park Forest"),
  ("Park Ridge"),
  ("Patoka"),
  ("Pawnee"),
  ("Paw Paw"),
  ("Paxton"),
  ("Payson"),
  ("Pearl"),
  ("Pearl City"),
  ("Pecatonica"),
  ("Pekin"),
  ("Peoria"),
  ("Peoria Heights"),
  ("Peotone"),
  ("Percy"),
  ("Perry"),
  ("Peru"),
  ("Pesotum"),
  ("Petersburg"),
  ("Phillipstown"),
  ("Philo"),
  ("Phoenix"),
  ("Pierron"),
  ("Pinckneyville"),
  ("Pingree Grove"),
  ("Piper City"),
  ("Pistakee Highlands"),
  ("Pittsburg"),
  ("Pittsfield"),
  ("Plainfield"),
  ("Plainville"),
  ("Plano"),
  ("Pleasant Hill"),
  ("Pleasant Plains"),
  ("Plymouth"),
  ("Pocahontas"),
  ("Polo"),
  ("Pontiac"),
  ("Pontoon Beach"),
  ("Pontoosuc"),
  ("Poplar Grove"),
  ("Port Byron"),
  ("Posen"),
  ("Potomac"),
  ("Prairie City"),
  ("Prairie du Rocher"),
  ("Prairie Grove"),
  ("Preston Heights"),
  ("Princeton"),
  ("Princeville"),
  ("Prophetstown"),
  ("Prospect Heights"),
  ("Pulaski"),
  ("Quincy"),
  ("Radom"),
  ("Raleigh"),
  ("Ramsey"),
  ("Rankin"),
  ("Ransom"),
  ("Rantoul"),
  ("Rapids City"),
  ("Raritan"),
  ("Raymond"),
  ("Red Bud"),
  ("Reddick"),
  ("Redmon"),
  ("Reynolds"),
  ("Richmond"),
  ("Richton Park"),
  ("Richview"),
  ("Ridge Farm"),
  ("Ridgway"),
  ("Ridott"),
  ("Ringwood"),
  ("Rio"),
  ("Ripley"),
  ("Riverdale"),
  ("River Forest"),
  ("River Grove"),
  ("Riverside"),
  ("Riverton"),
  ("Riverwoods"),
  ("Roanoke"),
  ("Robbins"),
  ("Roberts"),
  ("Robinson"),
  ("Rochelle"),
  ("Rochester"),
  ("Rockbridge"),
  ("Rock City"),
  ("Rockdale"),
  ("Rock Falls"),
  ("Rockford"),
  ("Rock Island"),
  ("Rock Island Arsenal"),
  ("Rockton"),
  ("Rockwood"),
  ("Rolling Meadows"),
  ("Rome"),
  ("Romeoville"),
  ("Roodhouse"),
  ("Roscoe"),
  ("Rose Hill"),
  ("Roselle"),
  ("Rosemont"),
  ("Roseville"),
  ("Rosewood Heights"),
  ("Rosiclare"),
  ("Rossville"),
  ("Round Lake"),
  ("Round Lake Beach"),
  ("Round Lake Heights"),
  ("Round Lake Park"),
  ("Roxana"),
  ("Royal"),
  ("Royal Lakes"),
  ("Royalton"),
  ("Ruma"),
  ("Rushville"),
  ("Russellville"),
  ("Rutland"),
  ("Sadorus"),
  ("Sailor Springs"),
  ("St. Anne"),
  ("St. Augustine"),
  ("St. Charles"),
  ("St. David"),
  ("St. Elmo"),
  ("Ste. Marie"),
  ("St. Francisville"),
  ("St. Jacob"),
  ("St. Johns"),
  ("St. Joseph"),
  ("St. Libory"),
  ("St. Peter"),
  ("Salem"),
  ("Sandoval"),
  ("Sandwich"),
  ("San Jose"),
  ("Sauget"),
  ("Sauk Village"),
  ("Saunemin"),
  ("Savanna"),
  ("Savoy"),
  ("Sawyerville"),
  ("Saybrook"),
  ("Scales Mound"),
  ("Schaumburg"),
  ("Schiller Park"),
  ("Schram City"),
  ("Sciota"),
  ("Scott AFB"),
  ("Scottville"),
  ("Seaton"),
  ("Seatonville"),
  ("Secor"),
  ("Seneca"),
  ("Sesser"),
  ("Shabbona"),
  ("Shannon"),
  ("Shawneetown"),
  ("Sheffield"),
  ("Shelbyville"),
  ("Sheldon"),
  ("Sheridan"),
  ("Sherman"),
  ("Sherrard"),
  ("Shiloh"),
  ("Shipman"),
  ("Shorewood"),
  ("Shumway"),
  ("Sibley"),
  ("Sidell"),
  ("Sidney"),
  ("Sigel"),
  ("Silvis"),
  ("Simpson"),
  ("Sims"),
  ("Skokie"),
  ("Sleepy Hollow"),
  ("Smithboro"),
  ("Smithfield"),
  ("Smithton"),
  ("Somonauk"),
  ("Sorento"),
  ("South Barrington"),
  ("South Beloit"),
  ("South Chicago Heights"),
  ("South Elgin"),
  ("Southern View"),
  ("South Holland"),
  ("South Jacksonville"),
  ("South Pekin"),
  ("South Roxana"),
  ("South Wilmington"),
  ("Sparland"),
  ("Sparta"),
  ("Spaulding"),
  ("Spillertown"),
  ("Spring Bay"),
  ("Springerton"),
  ("Springfield"),
  ("Spring Grove"),
  ("Spring Valley"),
  ("Standard"),
  ("Standard City"),
  ("Stanford"),
  ("Staunton"),
  ("Steeleville"),
  ("Steger"),
  ("Sterling"),
  ("Steward"),
  ("Stewardson"),
  ("Stickney"),
  ("Stillman Valley"),
  ("Stockton"),
  ("Stonefort"),
  ("Stone Park"),
  ("Stonington"),
  ("Stoy"),
  ("Strasburg"),
  ("Strawn"),
  ("Streamwood"),
  ("Streator"),
  ("Stronghurst"),
  ("Sublette"),
  ("Sugar Grove"),
  ("Sullivan"),
  ("Summerfield"),
  ("Summit"),
  ("Sumner"),
  ("Sun River Terrace"),
  ("Swansea"),
  ("Sycamore"),
  ("Symerton"),
  ("Table Grove"),
  ("Tallula"),
  ("Tamaroa"),
  ("Tamms"),
  ("Tampico"),
  ("Taylor Springs"),
  ("Taylorville"),
  ("Tennessee"),
  ("Teutopolis"),
  ("Thawville"),
  ("Thayer"),
  ("Thebes"),
  ("Third Lake"),
  ("Thomasboro"),
  ("Thompsonville"),
  ("Thomson"),
  ("Thornton"),
  ("Tilden"),
  ("Tilton"),
  ("Timberlane"),
  ("Time"),
  ("Tinley Park"),
  ("Tiskilwa"),
  ("Toledo"),
  ("Tolono"),
  ("Toluca"),
  ("Tonica"),
  ("Topeka"),
  ("Toulon"),
  ("Tovey"),
  ("Towanda"),
  ("Tower Hill"),
  ("Tower Lakes"),
  ("Tremont"),
  ("Trenton"),
  ("Trout Valley"),
  ("Troy"),
  ("Troy Grove"),
  ("Tuscola"),
  ("Ullin"),
  ("Union"),
  ("Union Hill"),
  ("University Park"),
  ("Urbana"),
  ("Ursa"),
  ("Valier"),
  ("Valley City"),
  ("Valmeyer"),
  ("Vandalia"),
  ("Varna"),
  ("Venedy"),
  ("Venetian Village"),
  ("Venice"),
  ("Vergennes"),
  ("Vermilion"),
  ("Vermont"),
  ("Vernon"),
  ("Vernon Hills"),
  ("Verona"),
  ("Versailles"),
  ("Victoria"),
  ("Vienna"),
  ("Villa Grove"),
  ("Villa Park"),
  ("Viola"),
  ("Virden"),
  ("Virgil"),
  ("Virginia"),
  ("Volo"),
  ("Wadsworth"),
  ("Waggoner"),
  ("Walnut"),
  ("Walnut Hill"),
  ("Walshville"),
  ("Waltonville"),
  ("Wamac"),
  ("Wapella"),
  ("Warren"),
  ("Warrensburg"),
  ("Warrenville"),
  ("Warsaw"),
  ("Washburn"),
  ("Washington"),
  ("Washington Park"),
  ("Wataga"),
  ("Waterloo"),
  ("Waterman"),
  ("Watseka"),
  ("Watson"),
  ("Wauconda"),
  ("Waukegan"),
  ("Waverly"),
  ("Wayne"),
  ("Wayne City"),
  ("Waynesville"),
  ("Weldon"),
  ("Wellington"),
  ("Wenona"),
  ("Wenonah"),
  ("West Brooklyn"),
  ("Westchester"),
  ("West Chicago"),
  ("West City"),
  ("West Dundee"),
  ("Western Springs"),
  ("Westfield"),
  ("West Frankfort"),
  ("Westmont"),
  ("West Peoria"),
  ("West Point"),
  ("West Salem"),
  ("Westville"),
  ("Wheaton"),
  ("Wheeler"),
  ("Wheeling"),
  ("Whiteash"),
  ("White City"),
  ("White Hall"),
  ("Williamsfield"),
  ("Williamson"),
  ("Williamsville"),
  ("Willisville"),
  ("Willowbrook"),
  ("Willowbrook"),
  ("Willow Hill"),
  ("Willow Springs"),
  ("Wilmette"),
  ("Wilmington"),
  ("Wilmington"),
  ("Wilsonville"),
  ("Winchester"),
  ("Windsor"),
  ("Windsor"),
  ("Winfield"),
  ("Winnebago"),
  ("Winnetka"),
  ("Winslow"),
  ("Winthrop Harbor"),
  ("Witt"),
  ("Wonder Lake"),
  ("Wonder Lake"),
  ("Wood Dale"),
  ("Woodhull"),
  ("Woodland"),
  ("Woodlawn"),
  ("Woodridge"),
  ("Wood River"),
  ("Woodson"),
  ("Woodstock"),
  ("Worden"),
  ("Worth"),
  ("Wyanet"),
  ("Wyoming"),
  ("Xenia"),
  ("Yale"),
  ("Yates City"),
  ("Yorkville"),
  ("Zeigler"),
  ("Zion"),
  ("Advance"),
  ("Akron"),
  ("Alamo"),
  ("Albany"),
  ("Albion"),
  ("Alexandria"),
  ("Alfordsville"),
  ("Alton"),
  ("Altona"),
  ("Ambia"),
  ("Amboy"),
  ("Amo"),
  ("Anderson"),
  ("Andrews"),
  ("Angola"),
  ("Arcadia"),
  ("Argos"),
  ("Ashley"),
  ("Atlanta"),
  ("Attica"),
  ("Auburn"),
  ("Aurora"),
  ("Austin"),
  ("Avilla"),
  ("Avon"),
  ("Bainbridge"),
  ("Bargersville"),
  ("Bass Lake"),
  ("Batesville"),
  ("Battle Ground"),
  ("Bedford"),
  ("Beech Grove"),
  ("Berne"),
  ("Bethany"),
  ("Beverly Shores"),
  ("Bicknell"),
  ("Birdseye"),
  ("Bloomfield"),
  ("Bloomingdale"),
  ("Bloomington"),
  ("Blountsville"),
  ("Bluffton"),
  ("Boonville"),
  ("Borden"),
  ("Boston"),
  ("Boswell"),
  ("Bourbon"),
  ("Brazil"),
  ("Bremen"),
  ("Bright"),
  ("Bristol"),
  ("Brook"),
  ("Brooklyn"),
  ("Brooksburg"),
  ("Brookston"),
  ("Brookville"),
  ("Brownsburg"),
  ("Brownstown"),
  ("Bruceville"),
  ("Bryant"),
  ("Buffalo"),
  ("Bunker Hill"),
  ("Burket"),
  ("Burlington"),
  ("Burnettsville"),
  ("Burns Harbor"),
  ("Butler"),
  ("Cadiz"),
  ("Cambridge City"),
  ("Camden"),
  ("Campbellsburg"),
  ("Cannelburg"),
  ("Cannelton"),
  ("Carbon"),
  ("Carlisle"),
  ("Carmel"),
  ("Carthage"),
  ("Cayuga"),
  ("Cedar Grove"),
  ("Cedar Lake"),
  ("Center Point"),
  ("Centerville"),
  ("Chalmers"),
  ("Chandler"),
  ("Charlestown"),
  ("Chesterfield"),
  ("Chesterton"),
  ("Chrisney"),
  ("Churubusco"),
  ("Cicero"),
  ("Clarks Hill"),
  ("Clarksville"),
  ("Clay City"),
  ("Claypool"),
  ("Clayton"),
  ("Clear Lake"),
  ("Clermont"),
  ("Clifford"),
  ("Clinton"),
  ("Cloverdale"),
  ("Coatesville"),
  ("Colfax"),
  ("Collegeville"),
  ("Columbia City"),
  ("Columbus"),
  ("Connersville"),
  ("Converse"),
  ("Corunna"),
  ("Corydon"),
  ("Country Club Heights"),
  ("Covington"),
  ("Crandall"),
  ("Crane"),
  ("Crawfordsville"),
  ("Cromwell"),
  ("Crothersville"),
  ("Crown Point"),
  ("Crows Nest"),
  ("Culver"),
  ("Cumberland"),
  ("Cynthiana"),
  ("Dale"),
  ("Daleville"),
  ("Dana"),
  ("Danville"),
  ("Darlington"),
  ("Darmstadt"),
  ("Dayton"),
  ("Decatur"),
  ("Decker"),
  ("Delphi"),
  ("De Motte"),
  ("Denver"),
  ("Dillsboro"),
  ("Dublin"),
  ("Dugger"),
  ("Dune Acres"),
  ("Dunkirk"),
  ("Dunlap"),
  ("Dunreith"),
  ("Dupont"),
  ("Dyer"),
  ("Earl Park"),
  ("East Chicago"),
  ("East Germantown"),
  ("Eaton"),
  ("Economy"),
  ("Edgewood"),
  ("Edinburgh"),
  ("Edwardsport"),
  ("Elberfeld"),
  ("Elizabeth"),
  ("Elizabethtown"),
  ("Elkhart"),
  ("Ellettsville"),
  ("Elnora"),
  ("Elwood"),
  ("English"),
  ("Etna Green"),
  ("Evansville"),
  ("Fairland"),
  ("Fairmount"),
  ("Fairview Park"),
  ("Farmersburg"),
  ("Farmland"),
  ("Ferdinand"),
  ("Fillmore"),
  ("Fishers"),
  ("Flora"),
  ("Fort Branch"),
  ("Fortville"),
  ("Fort Wayne"),
  ("Fountain City"),
  ("Fowler"),
  ("Fowlerton"),
  ("Francesville"),
  ("Francisco"),
  ("Frankfort"),
  ("Franklin"),
  ("Frankton"),
  ("Fredericksburg"),
  ("Fremont"),
  ("French Lick"),
  ("Fulton"),
  ("Galena"),
  ("Galveston"),
  ("Garrett"),
  ("Gary"),
  ("Gas City"),
  ("Gaston"),
  ("Geneva"),
  ("Gentryville"),
  ("Georgetown"),
  ("Georgetown"),
  ("Glenwood"),
  ("Goodland"),
  ("Goshen"),
  ("Gosport"),
  ("Grabill"),
  ("Grandview"),
  ("Granger"),
  ("Greencastle"),
  ("Greendale"),
  ("Greenfield"),
  ("Greensboro"),
  ("Greensburg"),
  ("Greens Fork"),
  ("Greentown"),
  ("Greenville"),
  ("Greenwood"),
  ("Griffin"),
  ("Griffith"),
  ("Grissom AFB"),
  ("Gulivoire Park"),
  ("Hagerstown"),
  ("Hamilton"),
  ("Hamlet"),
  ("Hammond"),
  ("Hanover"),
  ("Hardinsburg"),
  ("Harmony"),
  ("Hartford City"),
  ("Hartsville"),
  ("Haubstadt"),
  ("Hazleton"),
  ("Hebron"),
  ("Henryville"),
  ("Hidden Valley"),
  ("Highland"),
  ("Highland"),
  ("Hillsboro"),
  ("Hobart"),
  ("Holland"),
  ("Holton"),
  ("Homecroft"),
  ("Hope"),
  ("Hudson"),
  ("Huntertown"),
  ("Huntingburg"),
  ("Huntington"),
  ("Hymera"),
  ("Indianapolis"),
  ("Indian Heights"),
  ("Indian Village"),
  ("Ingalls"),
  ("Jamestown"),
  ("Jasonville"),
  ("Jasper"),
  ("Jeffersonville"),
  ("Jonesboro"),
  ("Jonesville"),
  ("Kempton"),
  ("Kendallville"),
  ("Kennard"),
  ("Kentland"),
  ("Kewanna"),
  ("Kingman"),
  ("Kingsbury"),
  ("Kingsford Heights"),
  ("Kirklin"),
  ("Knightstown"),
  ("Knightsville"),
  ("Knox"),
  ("Kokomo"),
  ("Koontz Lake"),
  ("Kouts"),
  ("Laconia"),
  ("La Crosse"),
  ("Ladoga"),
  ("Lafayette"),
  ("La Fontaine"),
  ("Lagrange"),
  ("Lagro"),
  ("Lake Dalecarlia"),
  ("Lakes of the Four Seasons"),
  ("Lake Station"),
  ("Lake Village"),
  ("Lakeville"),
  ("Lanesville"),
  ("La Paz"),
  ("Lapel"),
  ("La Porte"),
  ("Larwill"),
  ("Laurel"),
  ("Lawrence"),
  ("Lawrenceburg"),
  ("Leavenworth"),
  ("Lebanon"),
  ("Leesburg"),
  ("Leo-Cedarville"),
  ("Lewisville"),
  ("Liberty"),
  ("Ligonier"),
  ("Linden"),
  ("Linton"),
  ("Little York"),
  ("Livonia"),
  ("Lizton"),
  ("Logansport"),
  ("Long Beach"),
  ("Loogootee"),
  ("Losantville"),
  ("Lowell"),
  ("Lynn"),
  ("Lynnville"),
  ("Lyons"),
  ("McCordsville"),
  ("Mackey"),
  ("Macy"),
  ("Madison"),
  ("Marengo"),
  ("Marion"),
  ("Markle"),
  ("Markleville"),
  ("Marshall"),
  ("Martinsville"),
  ("Matthews"),
  ("Mauckport"),
  ("Mecca"),
  ("Medaryville"),
  ("Medora"),
  ("Mellott"),
  ("Melody Hill"),
  ("Memphis"),
  ("Mentone"),
  ("Meridian Hills"),
  ("Merom"),
  ("Merrillville"),
  ("Mexico"),
  ("Michiana Shores"),
  ("Michigan City"),
  ("Michigantown"),
  ("Middlebury"),
  ("Middletown"),
  ("Milan"),
  ("Milford"),
  ("Milford"),
  ("Millersburg"),
  ("Millhousen"),
  ("Milltown"),
  ("Milton"),
  ("Mishawaka"),
  ("Mitchell"),
  ("Modoc"),
  ("Monon"),
  ("Monroe"),
  ("Monroe City"),
  ("Monroeville"),
  ("Monrovia"),
  ("Monterey"),
  ("Montezuma"),
  ("Montgomery"),
  ("Monticello"),
  ("Montpelier"),
  ("Mooreland"),
  ("Moores Hill"),
  ("Mooresville"),
  ("Morgantown"),
  ("Morocco"),
  ("Morristown"),
  ("Mount Auburn"),
  ("Mount Ayr"),
  ("Mount Carmel"),
  ("Mount Etna"),
  ("Mount Summit"),
  ("Mount Vernon"),
  ("Mulberry"),
  ("Muncie"),
  ("Munster"),
  ("Napoleon"),
  ("Nappanee"),
  ("Nashville"),
  ("New Albany"),
  ("New Amsterdam"),
  ("Newberry"),
  ("Newburgh"),
  ("New Carlisle"),
  ("New Castle"),
  ("New Chicago"),
  ("New Harmony"),
  ("New Haven"),
  ("New Market"),
  ("New Middletown"),
  ("New Palestine"),
  ("New Paris"),
  ("New Pekin"),
  ("Newpoint"),
  ("Newport"),
  ("New Richmond"),
  ("New Ross"),
  ("Newtown"),
  ("New Washington"),
  ("New Whiteland"),
  ("Noblesville"),
  ("North Crows Nest"),
  ("North Judson"),
  ("North Liberty"),
  ("North Manchester"),
  ("North Salem"),
  ("North Terre Haute"),
  ("North Vernon"),
  ("North Webster"),
  ("Norway"),
  ("Oakland City"),
  ("Oak Park"),
  ("Oaktown"),
  ("Odon"),
  ("Ogden Dunes"),
  ("Oldenburg"),
  ("Onward"),
  ("Oolitic"),
  ("Orestes"),
  ("Orland"),
  ("Orleans"),
  ("Osceola"),
  ("Osgood"),
  ("Ossian"),
  ("Otterbein"),
  ("Owensville"),
  ("Oxford"),
  ("Palmyra"),
  ("Paoli"),
  ("Paragon"),
  ("Parker City"),
  ("Patoka"),
  ("Patriot"),
  ("Pendleton"),
  ("Pennville"),
  ("Perrysville"),
  ("Peru"),
  ("Petersburg"),
  ("Pierceton"),
  ("Pine Village"),
  ("Pittsboro"),
  ("Plainfield"),
  ("Plainville"),
  ("Plymouth"),
  ("Poneto"),
  ("Portage"),
  ("Porter"),
  ("Portland"),
  ("Poseyville"),
  ("Pottawattamie Park"),
  ("Princes Lakes"),
  ("Princeton"),
  ("Redkey"),
  ("Remington"),
  ("Rensselaer"),
  ("Reynolds"),
  ("Richmond"),
  ("Ridgeville"),
  ("Riley"),
  ("Rising Sun"),
  ("River Forest"),
  ("Roachdale"),
  ("Roann"),
  ("Roanoke"),
  ("Rochester"),
  ("Rockport"),
  ("Rockville"),
  ("Rocky Ripple"),
  ("Rome City"),
  ("Rosedale"),
  ("Roseland"),
  ("Roselawn"),
  ("Rossville"),
  ("Royal Center"),
  ("Rushville"),
  ("Russellville"),
  ("Russiaville"),
  ("St. Joe"),
  ("St. John"),
  ("St. Leon"),
  ("St. Paul"),
  ("Salamonia"),
  ("Salem"),
  ("Saltillo"),
  ("Sandborn"),
  ("San Pierre"),
  ("Santa Claus"),
  ("Saratoga"),
  ("Schererville"),
  ("Schneider"),
  ("Scottsburg"),
  ("Seelyville"),
  ("Sellersburg"),
  ("Selma"),
  ("Seymour"),
  ("Shadeland"),
  ("Shamrock Lakes"),
  ("Sharpsville"),
  ("Shelburn"),
  ("Shelbyville"),
  ("Sheridan"),
  ("Shipshewana"),
  ("Shirley"),
  ("Shoals"),
  ("Sidney"),
  ("Silver Lake"),
  ("Simonton Lake"),
  ("Somerville"),
  ("South Bend"),
  ("South Haven"),
  ("Southport"),
  ("South Whitley"),
  ("Speedway"),
  ("Spencer"),
  ("Spiceland"),
  ("Spring Grove"),
  ("Spring Hill"),
  ("Spring Lake"),
  ("Springport"),
  ("Spurgeon"),
  ("Star City"),
  ("State Line City"),
  ("Staunton"),
  ("Stilesville"),
  ("Stinesville"),
  ("Straughn"),
  ("Sullivan"),
  ("Sulphur Springs"),
  ("Summitville"),
  ("Sunman"),
  ("Swayzee"),
  ("Sweetser"),
  ("Switz City"),
  ("Syracuse"),
  ("Taylorsville"),
  ("Tell City"),
  ("Tennyson"),
  ("Terre Haute"),
  ("Thorntown"),
  ("Tipton"),
  ("Topeka"),
  ("Town of Pines"),
  ("Trafalgar"),
  ("Trail Creek"),
  ("Tri-Lakes"),
  ("Troy"),
  ("Ulen"),
  ("Union City"),
  ("Uniondale"),
  ("Universal"),
  ("Upland"),
  ("Utica"),
  ("Valparaiso"),
  ("Van Buren"),
  ("Veedersburg"),
  ("Vera Cruz"),
  ("Vernon"),
  ("Versailles"),
  ("Vevay"),
  ("Vincennes"),
  ("Wabash"),
  ("Wakarusa"),
  ("Walkerton"),
  ("Wallace"),
  ("Walton"),
  ("Wanatah"),
  ("Warren"),
  ("Warren Park"),
  ("Warsaw"),
  ("Washington"),
  ("Waterloo"),
  ("Waveland"),
  ("Waynetown"),
  ("West Baden Springs"),
  ("West College Corner"),
  ("Westfield"),
  ("West Harrison"),
  ("West Lafayette"),
  ("West Lebanon"),
  ("Westport"),
  ("West Terre Haute"),
  ("Westville"),
  ("Wheatfield"),
  ("Wheatland"),
  ("Whiteland"),
  ("Whitestown"),
  ("Whitewater"),
  ("Whiting"),
  ("Wilkinson"),
  ("Williams Creek"),
  ("Williamsport"),
  ("Winamac"),
  ("Winchester"),
  ("Windfall City"),
  ("Winfield"),
  ("Wingate"),
  ("Winona Lake"),
  ("Winslow"),
  ("Wolcott"),
  ("Wolcottville"),
  ("Woodburn"),
  ("Woodlawn Heights"),
  ("Worthington"),
  ("Wynnedale"),
  ("Yeoman"),
  ("Yorktown"),
  ("Zanesville"),
  ("Zionsville"),
  ("Ackley"),
  ("Ackworth"),
  ("Adair"),
  ("Adel"),
  ("Afton"),
  ("Agency"),
  ("Ainsworth"),
  ("Akron"),
  ("Albert City"),
  ("Albia"),
  ("Albion"),
  ("Alburnett"),
  ("Alden"),
  ("Alexander"),
  ("Algona"),
  ("Alleman"),
  ("Allerton"),
  ("Allison"),
  ("Alta"),
  ("Alta Vista"),
  ("Alton"),
  ("Altoona"),
  ("Alvord"),
  ("Ames"),
  ("Anamosa"),
  ("Andover"),
  ("Andrew"),
  ("Anita"),
  ("Ankeny"),
  ("Anthon"),
  ("Aplington"),
  ("Arcadia"),
  ("Archer"),
  ("Aredale"),
  ("Arion"),
  ("Arispe"),
  ("Arlington"),
  ("Armstrong"),
  ("Arnolds Park"),
  ("Arthur"),
  ("Asbury"),
  ("Ashton"),
  ("Aspinwall"),
  ("Atalissa"),
  ("Athelstan"),
  ("Atkins"),
  ("Atlantic"),
  ("Auburn"),
  ("Audubon"),
  ("Aurelia"),
  ("Aurora"),
  ("Avoca"),
  ("Ayrshire"),
  ("Badger"),
  ("Bagley"),
  ("Baldwin"),
  ("Balltown"),
  ("Bancroft"),
  ("Bankston"),
  ("Barnes City"),
  ("Barnum"),
  ("Bassett"),
  ("Batavia"),
  ("Battle Creek"),
  ("Baxter"),
  ("Bayard"),
  ("Beacon"),
  ("Beaconsfield"),
  ("Beaman"),
  ("Beaver"),
  ("Bedford"),
  ("Belle Plaine"),
  ("Bellevue"),
  ("Belmond"),
  ("Bennett"),
  ("Benton"),
  ("Berkley"),
  ("Bernard"),
  ("Bertram"),
  ("Bettendorf"),
  ("Bevington"),
  ("Birmingham"),
  ("Blairsburg"),
  ("Blairstown"),
  ("Blakesburg"),
  ("Blanchard"),
  ("Blencoe"),
  ("Blockton"),
  ("Bloomfield"),
  ("Blue Grass"),
  ("Bode"),
  ("Bonaparte"),
  ("Bondurant"),
  ("Boone"),
  ("Bouton"),
  ("Boxholm"),
  ("Boyden"),
  ("Braddyville"),
  ("Bradgate"),
  ("Brandon"),
  ("Brayton"),
  ("Breda"),
  ("Bridgewater"),
  ("Brighton"),
  ("Bristow"),
  ("Britt"),
  ("Bronson"),
  ("Brooklyn"),
  ("Brunsville"),
  ("Buckeye"),
  ("Buck Grove"),
  ("Buffalo"),
  ("Buffalo Center"),
  ("Burlington"),
  ("Burt"),
  ("Bussey"),
  ("Calamus"),
  ("Callender"),
  ("Calmar"),
  ("Calumet"),
  ("Camanche"),
  ("Cambridge"),
  ("Cantril"),
  ("Carbon"),
  ("Carlisle"),
  ("Carpenter"),
  ("Carroll"),
  ("Carson"),
  ("Carter Lake"),
  ("Cascade"),
  ("Casey"),
  ("Castalia"),
  ("Castana"),
  ("Cedar Falls"),
  ("Cedar Rapids"),
  ("Center Junction"),
  ("Center Point"),
  ("Centerville"),
  ("Central City"),
  ("Centralia"),
  ("Chariton"),
  ("Charles City"),
  ("Charlotte"),
  ("Charter Oak"),
  ("Chatsworth"),
  ("Chelsea"),
  ("Cherokee"),
  ("Chester"),
  ("Chillicothe"),
  ("Churdan"),
  ("Cincinnati"),
  ("Clare"),
  ("Clarence"),
  ("Clarinda"),
  ("Clarion"),
  ("Clarksville"),
  ("Clayton"),
  ("Clearfield"),
  ("Clear Lake"),
  ("Cleghorn"),
  ("Clemons"),
  ("Clermont"),
  ("Clinton"),
  ("Clio"),
  ("Clive"),
  ("Clutier"),
  ("Coalville"),
  ("Coburg"),
  ("Coggon"),
  ("Coin"),
  ("Colesburg"),
  ("Colfax"),
  ("College Springs"),
  ("Collins"),
  ("Colo"),
  ("Columbus City"),
  ("Columbus Junction"),
  ("Colwell"),
  ("Conesville"),
  ("Conrad"),
  ("Conway"),
  ("Coon Rapids"),
  ("Coppock"),
  ("Coralville"),
  ("Corning"),
  ("Correctionville"),
  ("Corwith"),
  ("Corydon"),
  ("Cotter"),
  ("Coulter"),
  ("Council Bluffs"),
  ("Craig"),
  ("Crawfordsville"),
  ("Crescent"),
  ("Cresco"),
  ("Creston"),
  ("Cromwell"),
  ("Crystal Lake"),
  ("Cumberland"),
  ("Cumming"),
  ("Curlew"),
  ("Cushing"),
  ("Cylinder"),
  ("Dakota City"),
  ("Dallas Center"),
  ("Dana"),
  ("Danbury"),
  ("Danville"),
  ("Davenport"),
  ("Davis City"),
  ("Dawson"),
  ("Dayton"),
  ("Decatur City"),
  ("Decorah"),
  ("Dedham"),
  ("Deep River"),
  ("Defiance"),
  ("Delaware"),
  ("Delhi"),
  ("Delmar"),
  ("Deloit"),
  ("Delphos"),
  ("Delta"),
  ("Denison"),
  ("Denver"),
  ("Derby"),
  ("Des Moines"),
  ("De Soto"),
  ("De Witt"),
  ("Dexter"),
  ("Diagonal"),
  ("Dickens"),
  ("Dike"),
  ("Dixon"),
  ("Dolliver"),
  ("Donahue"),
  ("Donnellson"),
  ("Doon"),
  ("Douds"),
  ("Dougherty"),
  ("Dow City"),
  ("Dows"),
  ("Drakesville"),
  ("Dubuque"),
  ("Dumont"),
  ("Duncombe"),
  ("Dundee"),
  ("Dunkerton"),
  ("Dunlap"),
  ("Durango"),
  ("Durant"),
  ("Dyersville"),
  ("Dysart"),
  ("Eagle Grove"),
  ("Earlham"),
  ("Earling"),
  ("Earlville"),
  ("Early"),
  ("East Peru"),
  ("Eddyville"),
  ("Edgewood"),
  ("Elberon"),
  ("Eldon"),
  ("Eldora"),
  ("Eldridge"),
  ("Elgin"),
  ("Elkader"),
  ("Elkhart"),
  ("Elk Horn"),
  ("Elkport"),
  ("Elk Run Heights"),
  ("Elliott"),
  ("Ellston"),
  ("Ellsworth"),
  ("Elma"),
  ("Ely"),
  ("Emerson"),
  ("Emmetsburg"),
  ("Epworth"),
  ("Essex"),
  ("Estherville"),
  ("Evansdale"),
  ("Everly"),
  ("Exira"),
  ("Exline"),
  ("Fairbank"),
  ("Fairfax"),
  ("Fairfield"),
  ("Farley"),
  ("Farmersburg"),
  ("Farmington"),
  ("Farnhamville"),
  ("Farragut"),
  ("Fayette"),
  ("Fenton"),
  ("Ferguson"),
  ("Fertile"),
  ("Floris"),
  ("Floyd"),
  ("Fonda"),
  ("Fontanelle"),
  ("Forest City"),
  ("Fort Atkinson"),
  ("Fort Dodge"),
  ("Fort Madison"),
  ("Fostoria"),
  ("Franklin"),
  ("Fraser"),
  ("Fredericksburg"),
  ("Frederika"),
  ("Fredonia"),
  ("Fremont"),
  ("Fruitland"),
  ("Galt"),
  ("Galva"),
  ("Garber"),
  ("Garden Grove"),
  ("Garnavillo"),
  ("Garner"),
  ("Garrison"),
  ("Garwin"),
  ("Geneva"),
  ("George"),
  ("Gibson"),
  ("Gilbert"),
  ("Gilbertville"),
  ("Gillett Grove"),
  ("Gilman"),
  ("Gilmore City"),
  ("Gladbrook"),
  ("Glenwood"),
  ("Glidden"),
  ("Goldfield"),
  ("Goodell"),
  ("Goose Lake"),
  ("Gowrie"),
  ("Graettinger"),
  ("Graf"),
  ("Grafton"),
  ("Grand Junction"),
  ("Grand Mound"),
  ("Grand River"),
  ("Grandview"),
  ("Granger"),
  ("Grant"),
  ("Granville"),
  ("Gravity"),
  ("Gray"),
  ("Greeley"),
  ("Greene"),
  ("Greenfield"),
  ("Greenville"),
  ("Grimes"),
  ("Grinnell"),
  ("Griswold"),
  ("Grundy Center"),
  ("Gruver"),
  ("Guernsey"),
  ("Guthrie Center"),
  ("Guttenberg"),
  ("Halbur"),
  ("Hamburg"),
  ("Hamilton"),
  ("Hampton"),
  ("Hancock"),
  ("Hanlontown"),
  ("Hansell"),
  ("Harcourt"),
  ("Hardy"),
  ("Harlan"),
  ("Harper"),
  ("Harpers Ferry"),
  ("Harris"),
  ("Hartford"),
  ("Hartley"),
  ("Hartwick"),
  ("Harvey"),
  ("Hastings"),
  ("Havelock"),
  ("Haverhill"),
  ("Hawarden"),
  ("Hawkeye"),
  ("Hayesville"),
  ("Hazleton"),
  ("Hedrick"),
  ("Henderson"),
  ("Hepburn"),
  ("Hiawatha"),
  ("Hills"),
  ("Hillsboro"),
  ("Hinton"),
  ("Holland"),
  ("Holstein"),
  ("Holy Cross"),
  ("Hopkinton"),
  ("Hornick"),
  ("Hospers"),
  ("Houghton"),
  ("Hubbard"),
  ("Hudson"),
  ("Hull"),
  ("Humboldt"),
  ("Humeston"),
  ("Huxley"),
  ("Ida Grove"),
  ("Imogene"),
  ("Independence"),
  ("Indianola"),
  ("Inwood"),
  ("Ionia"),
  ("Iowa City"),
  ("Iowa Falls"),
  ("Ireton"),
  ("Irwin"),
  ("Jackson Junction"),
  ("Jamaica"),
  ("Janesville"),
  ("Jefferson"),
  ("Jesup"),
  ("Jewell Junction"),
  ("Johnston"),
  ("Joice"),
  ("Jolley"),
  ("Kalona"),
  ("Kamrar"),
  ("Kanawha"),
  ("Kellerton"),
  ("Kelley"),
  ("Kellogg"),
  ("Kensett"),
  ("Kent"),
  ("Keokuk"),
  ("Keomah Village"),
  ("Keosauqua"),
  ("Keota"),
  ("Keswick"),
  ("Keystone"),
  ("Kimballton"),
  ("Kingsley"),
  ("Kinross"),
  ("Kirkman"),
  ("Kirkville"),
  ("Kiron"),
  ("Klemme"),
  ("Knierim"),
  ("Knoxville"),
  ("Lacona"),
  ("Ladora"),
  ("Lake City"),
  ("Lake Mills"),
  ("Lake Park"),
  ("Lakeside"),
  ("Lake View"),
  ("Lakota"),
  ("Lambs Grove"),
  ("Lamoni"),
  ("Lamont"),
  ("La Motte"),
  ("Lanesboro"),
  ("Lansing"),
  ("La Porte City"),
  ("Larchwood"),
  ("Larrabee"),
  ("Latimer"),
  ("Laurel"),
  ("Laurens"),
  ("Lawler"),
  ("Lawton"),
  ("Leando"),
  ("Le Claire"),
  ("Ledyard"),
  ("Le Grand"),
  ("Lehigh"),
  ("Leighton"),
  ("Leland"),
  ("Le Mars"),
  ("Lenox"),
  ("Leon"),
  ("Le Roy"),
  ("Lester"),
  ("Letts"),
  ("Lewis"),
  ("Libertyville"),
  ("Lidderdale"),
  ("Lime Springs"),
  ("Lincoln"),
  ("Linden"),
  ("Lineville"),
  ("Linn Grove"),
  ("Lisbon"),
  ("Liscomb"),
  ("Littleport"),
  ("Little Rock"),
  ("Little Sioux"),
  ("Livermore"),
  ("Lockridge"),
  ("Logan"),
  ("Lohrville"),
  ("Lone Rock"),
  ("Lone Tree"),
  ("Long Grove"),
  ("Lorimor"),
  ("Lost Nation"),
  ("Lovilia"),
  ("Lowden"),
  ("Low Moor"),
  ("Luana"),
  ("Lucas"),
  ("Luther"),
  ("Lu Verne"),
  ("Luxemburg"),
  ("Luzerne"),
  ("Lynnville"),
  ("Lytton"),
  ("McCallsburg"),
  ("McCausland"),
  ("McClelland"),
  ("Macedonia"),
  ("McGregor"),
  ("McIntire"),
  ("Macksburg"),
  ("Madrid"),
  ("Magnolia"),
  ("Malcom"),
  ("Mallard"),
  ("Maloy"),
  ("Malvern"),
  ("Manchester"),
  ("Manilla"),
  ("Manly"),
  ("Manning"),
  ("Manson"),
  ("Mapleton"),
  ("Maquoketa"),
  ("Marathon"),
  ("Marble Rock"),
  ("Marcus"),
  ("Marengo"),
  ("Marion"),
  ("Marne"),
  ("Marquette"),
  ("Marshalltown"),
  ("Martelle"),
  ("Martensdale"),
  ("Martinsburg"),
  ("Marysville"),
  ("Mason City"),
  ("Masonville"),
  ("Massena"),
  ("Matlock"),
  ("Maurice"),
  ("Maxwell"),
  ("Maynard"),
  ("Maysville"),
  ("Mechanicsville"),
  ("Mediapolis"),
  ("Melbourne"),
  ("Melcher-Dallas"),
  ("Melrose"),
  ("Melvin"),
  ("Menlo"),
  ("Meriden"),
  ("Merrill"),
  ("Meservey"),
  ("Middletown"),
  ("Miles"),
  ("Milford"),
  ("Millersburg"),
  ("Millerton"),
  ("Millville"),
  ("Milo"),
  ("Milton"),
  ("Minburn"),
  ("Minden"),
  ("Mingo"),
  ("Missouri Valley"),
  ("Mitchell"),
  ("Mitchellville"),
  ("Modale"),
  ("Mondamin"),
  ("Monmouth"),
  ("Monona"),
  ("Monroe"),
  ("Montezuma"),
  ("Monticello"),
  ("Montour"),
  ("Montrose"),
  ("Moorhead"),
  ("Moorland"),
  ("Moravia"),
  ("Morley"),
  ("Morning Sun"),
  ("Morrison"),
  ("Moulton"),
  ("Mount Auburn"),
  ("Mount Ayr"),
  ("Mount Pleasant"),
  ("Mount Sterling"),
  ("Mount Union"),
  ("Mount Vernon"),
  ("Moville"),
  ("Murray"),
  ("Muscatine"),
  ("Mystic"),
  ("Nashua"),
  ("Nemaha"),
  ("Neola"),
  ("Nevada"),
  ("New Albin"),
  ("Newell"),
  ("Newhall"),
  ("New Hampton"),
  ("New Hartford"),
  ("New Liberty"),
  ("New London"),
  ("New Market"),
  ("New Providence"),
  ("New Sharon"),
  ("Newton"),
  ("New Vienna"),
  ("New Virginia"),
  ("Nichols"),
  ("Nodaway"),
  ("Nora Springs"),
  ("Northboro"),
  ("North Buena Vista"),
  ("North English"),
  ("North Liberty"),
  ("North Washington"),
  ("Northwood"),
  ("Norwalk"),
  ("Norway"),
  ("Numa"),
  ("Oakland"),
  ("Oakland Acres"),
  ("Oakville"),
  ("Ocheyedan"),
  ("Odebolt"),
  ("Oelwein"),
  ("Ogden"),
  ("Okoboji"),
  ("Olds"),
  ("Olin"),
  ("Ollie"),
  ("Onawa"),
  ("Onslow"),
  ("Orange City"),
  ("Orchard"),
  ("Orient"),
  ("Orleans"),
  ("Osage"),
  ("Osceola"),
  ("Oskaloosa"),
  ("Ossian"),
  ("Osterdock"),
  ("Otho"),
  ("Oto"),
  ("Ottosen"),
  ("Ottumwa"),
  ("Owasa"),
  ("Oxford"),
  ("Oxford Junction"),
  ("Oyens"),
  ("Pacific Junction"),
  ("Packwood"),
  ("Palmer"),
  ("Palo"),
  ("Panama"),
  ("Panora"),
  ("Panorama Park"),
  ("Parkersburg"),
  ("Park View"),
  ("Parnell"),
  ("Paton"),
  ("Patterson"),
  ("Paullina"),
  ("Pella"),
  ("Peosta"),
  ("Perry"),
  ("Persia"),
  ("Peterson"),
  ("Pierson"),
  ("Pilot Mound"),
  ("Pioneer"),
  ("Pisgah"),
  ("Plainfield"),
  ("Plano"),
  ("Pleasant Hill"),
  ("Pleasanton"),
  ("Pleasant Plain"),
  ("Pleasantville"),
  ("Plover"),
  ("Plymouth"),
  ("Pocahontas"),
  ("Polk City"),
  ("Pomeroy"),
  ("Popejoy"),
  ("Portsmouth"),
  ("Postville"),
  ("Prairieburg"),
  ("Prairie City"),
  ("Prescott"),
  ("Preston"),
  ("Primghar"),
  ("Princeton"),
  ("Promise City"),
  ("Protivin"),
  ("Pulaski"),
  ("Quasqueton"),
  ("Quimby"),
  ("Radcliffe"),
  ("Rake"),
  ("Ralston"),
  ("Randalia"),
  ("Randall"),
  ("Randolph"),
  ("Rathbun"),
  ("Raymond"),
  ("Readlyn"),
  ("Reasnor"),
  ("Redding"),
  ("Redfield"),
  ("Red Oak"),
  ("Reinbeck"),
  ("Rembrandt"),
  ("Remsen"),
  ("Renwick"),
  ("Rhodes"),
  ("Riceville"),
  ("Richland"),
  ("Rickardsville"),
  ("Ricketts"),
  ("Ridgeway"),
  ("Rinard"),
  ("Ringsted"),
  ("Rippey"),
  ("Riverdale"),
  ("Riverside"),
  ("Riverton"),
  ("Robins"),
  ("Rock Falls"),
  ("Rockford"),
  ("Rock Rapids"),
  ("Rock Valley"),
  ("Rockwell"),
  ("Rockwell City"),
  ("Rodman"),
  ("Rodney"),
  ("Roland"),
  ("Rolfe"),
  ("Rome"),
  ("Rose Hill"),
  ("Rossie"),
  ("Rowan"),
  ("Rowley"),
  ("Royal"),
  ("Rudd"),
  ("Runnells"),
  ("Russell"),
  ("Ruthven"),
  ("Rutland"),
  ("Ryan"),
  ("Sabula"),
  ("Sac City"),
  ("Sageville"),
  ("St. Ansgar"),
  ("St. Anthony"),
  ("St. Charles"),
  ("St. Donatus"),
  ("St. Lucas"),
  ("St. Marys"),
  ("St. Olaf"),
  ("St. Paul"),
  ("Salem"),
  ("Salix"),
  ("Sanborn"),
  ("Sandyville"),
  ("Saylorville"),
  ("Scarville"),
  ("Schaller"),
  ("Schleswig"),
  ("Scranton"),
  ("Searsboro"),
  ("Sergeant Bluff"),
  ("Seymour"),
  ("Shambaugh"),
  ("Shannon City"),
  ("Sharpsburg"),
  ("Sheffield"),
  ("Shelby"),
  ("Sheldahl"),
  ("Sheldon"),
  ("Shell Rock"),
  ("Shellsburg"),
  ("Shenandoah"),
  ("Sherrill"),
  ("Shueyville"),
  ("Sibley"),
  ("Sidney"),
  ("Sigourney"),
  ("Silver City"),
  ("Sioux Center"),
  ("Sioux City"),
  ("Sioux Rapids"),
  ("Slater"),
  ("Sloan"),
  ("Smithland"),
  ("Soldier"),
  ("Solon"),
  ("Somers"),
  ("South English"),
  ("Spencer"),
  ("Spillville"),
  ("Spirit Lake"),
  ("Spragueville"),
  ("Springbrook"),
  ("Spring Hill"),
  ("Springville"),
  ("Stacyville"),
  ("Stanhope"),
  ("Stanley"),
  ("Stanton"),
  ("Stanwood"),
  ("State Center"),
  ("Steamboat Rock"),
  ("Stockport"),
  ("Stockton"),
  ("Storm Lake"),
  ("Story City"),
  ("Stout"),
  ("Stratford"),
  ("Strawberry Point"),
  ("Struble"),
  ("Stuart"),
  ("Sully"),
  ("Sumner"),
  ("Superior"),
  ("Sutherland"),
  ("Swaledale"),
  ("Swan"),
  ("Swea City"),
  ("Swisher"),
  ("Tabor"),
  ("Tama"),
  ("Templeton"),
  ("Tennant"),
  ("Terril"),
  ("Thayer"),
  ("Thompson"),
  ("Thor"),
  ("Thornburg"),
  ("Thornton"),
  ("Thurman"),
  ("Tiffin"),
  ("Tingley"),
  ("Tipton"),
  ("Titonka"),
  ("Toledo"),
  ("Toronto"),
  ("Traer"),
  ("Treynor"),
  ("Tripoli"),
  ("Truesdale"),
  ("Truro"),
  ("Turin"),
  ("Udell"),
  ("Underwood"),
  ("Union"),
  ("Unionville"),
  ("University Heights"),
  ("University Park"),
  ("Urbana"),
  ("Urbandale"),
  ("Ute"),
  ("Vail"),
  ("Valeria"),
  ("Van Horne"),
  ("Van Meter"),
  ("Van Wert"),
  ("Varina"),
  ("Ventura"),
  ("Victor"),
  ("Villisca"),
  ("Vincent"),
  ("Vining"),
  ("Vinton"),
  ("Volga"),
  ("Wadena"),
  ("Wahpeton"),
  ("Walcott"),
  ("Walford"),
  ("Walker"),
  ("Wallingford"),
  ("Wall Lake"),
  ("Walnut"),
  ("Wapello"),
  ("Washington"),
  ("Washta"),
  ("Waterloo"),
  ("Waterville"),
  ("Waucoma"),
  ("Waukee"),
  ("Waukon"),
  ("Waverly"),
  ("Wayland"),
  ("Webb"),
  ("Webster"),
  ("Webster City"),
  ("Weldon"),
  ("Wellman"),
  ("Wellsburg"),
  ("Welton"),
  ("Wesley"),
  ("West Bend"),
  ("West Branch"),
  ("West Burlington"),
  ("West Chester"),
  ("West Des Moines"),
  ("Westfield"),
  ("Westgate"),
  ("West Liberty"),
  ("West Okoboji"),
  ("Westphalia"),
  ("West Point"),
  ("Westside"),
  ("West Union"),
  ("Westwood"),
  ("What Cheer"),
  ("Wheatland"),
  ("Whiting"),
  ("Whittemore"),
  ("Whitten"),
  ("Willey"),
  ("Williams"),
  ("Williamsburg"),
  ("Williamson"),
  ("Wilton"),
  ("Windsor Heights"),
  ("Winfield"),
  ("Winterset"),
  ("Winthrop"),
  ("Wiota"),
  ("Woden"),
  ("Woodbine"),
  ("Woodburn"),
  ("Woodward"),
  ("Woolstock"),
  ("Worthington"),
  ("Wyoming"),
  ("Yale"),
  ("Yetter"),
  ("Yorktown"),
  ("Zearing"),
  ("Zwingle"),
  ("Abbyville"),
  ("Abilene"),
  ("Admire"),
  ("Agenda"),
  ("Agra"),
  ("Albert"),
  ("Alden"),
  ("Alexander"),
  ("Allen"),
  ("Alma"),
  ("Almena"),
  ("Altamont"),
  ("Alta Vista"),
  ("Alton"),
  ("Altoona"),
  ("Americus"),
  ("Andale"),
  ("Andover"),
  ("Anthony"),
  ("Arcadia"),
  ("Argonia"),
  ("Arkansas City"),
  ("Arlington"),
  ("Arma"),
  ("Ashland"),
  ("Assaria"),
  ("Atchison"),
  ("Athol"),
  ("Atlanta"),
  ("Attica"),
  ("Atwood"),
  ("Auburn"),
  ("Augusta"),
  ("Aurora"),
  ("Axtell"),
  ("Baldwin City"),
  ("Barnard"),
  ("Barnes"),
  ("Bartlett"),
  ("Basehor"),
  ("Bassett"),
  ("Baxter Springs"),
  ("Bazine"),
  ("Beattie"),
  ("Bel Aire"),
  ("Belle Plaine"),
  ("Belleville"),
  ("Beloit"),
  ("Belpre"),
  ("Belvue"),
  ("Benedict"),
  ("Bennington"),
  ("Bentley"),
  ("Benton"),
  ("Bern"),
  ("Beverly"),
  ("Bird City"),
  ("Bison"),
  ("Blue Mound"),
  ("Blue Rapids"),
  ("Bluff City"),
  ("Bogue"),
  ("Bonner Springs"),
  ("Brewster"),
  ("Bronson"),
  ("Brookville"),
  ("Brownell"),
  ("Bucklin"),
  ("Buffalo"),
  ("Buhler"),
  ("Bunker Hill"),
  ("Burden"),
  ("Burdett"),
  ("Burlingame"),
  ("Burlington"),
  ("Burns"),
  ("Burr Oak"),
  ("Burrton"),
  ("Bushong"),
  ("Bushton"),
  ("Byers"),
  ("Caldwell"),
  ("Cambridge"),
  ("Caney"),
  ("Canton"),
  ("Carbondale"),
  ("Carlton"),
  ("Cassoday"),
  ("Cawker City"),
  ("Cedar"),
  ("Cedar Point"),
  ("Cedar Vale"),
  ("Centralia"),
  ("Chanute"),
  ("Chapman"),
  ("Chase"),
  ("Chautauqua"),
  ("Cheney"),
  ("Cherokee"),
  ("Cherryvale"),
  ("Chetopa"),
  ("Cimarron"),
  ("Circleville"),
  ("Claflin"),
  ("Clay Center"),
  ("Clayton"),
  ("Clearwater"),
  ("Clifton"),
  ("Climax"),
  ("Clyde"),
  ("Coats"),
  ("Coffeyville"),
  ("Colby"),
  ("Coldwater"),
  ("Collyer"),
  ("Colony"),
  ("Columbus"),
  ("Colwich"),
  ("Concordia"),
  ("Conway Springs"),
  ("Coolidge"),
  ("Copeland"),
  ("Corning"),
  ("Cottonwood Falls"),
  ("Council Grove"),
  ("Countryside"),
  ("Courtland"),
  ("Coyville"),
  ("Cuba"),
  ("Cullison"),
  ("Culver"),
  ("Cunningham"),
  ("Damar"),
  ("Danville"),
  ("Dearing"),
  ("Deerfield"),
  ("Delia"),
  ("Delphos"),
  ("Denison"),
  ("Denton"),
  ("Derby"),
  ("De Soto"),
  ("Dexter"),
  ("Dighton"),
  ("Dodge City"),
  ("Dorrance"),
  ("Douglass"),
  ("Downs"),
  ("Dresden"),
  ("Dunlap"),
  ("Durham"),
  ("Dwight"),
  ("Earlton"),
  ("East"),
  ("Easton"),
  ("Edgerton"),
  ("Edmond"),
  ("Edna"),
  ("Edwardsville"),
  ("Effingham"),
  ("Elbing"),
  ("El Dorado"),
  ("Elgin"),
  ("Elk City"),
  ("Elk Falls"),
  ("Elkhart"),
  ("Ellinwood"),
  ("Ellis"),
  ("Ellsworth"),
  ("Elmdale"),
  ("Elsmore"),
  ("Elwood"),
  ("Emmett"),
  ("Emporia"),
  ("Englewood"),
  ("Ensign"),
  ("Enterprise"),
  ("Erie"),
  ("Esbon"),
  ("Eskridge"),
  ("Eudora"),
  ("Eureka"),
  ("Everest"),
  ("Fairview"),
  ("Fairway"),
  ("Fall River"),
  ("Florence"),
  ("Fontana"),
  ("Ford"),
  ("Formoso"),
  ("Fort Riley-Camp Whiteside"),
  ("Fort Riley North"),
  ("Fort Scott"),
  ("Fowler"),
  ("Frankfort"),
  ("Frederick"),
  ("Fredonia"),
  ("Freeport"),
  ("Frontenac"),
  ("Fulton"),
  ("Galatia"),
  ("Galena"),
  ("Galesburg"),
  ("Galva"),
  ("Garden City"),
  ("Garden Plain"),
  ("Gardner"),
  ("Garfield"),
  ("Garnett"),
  ("Gas"),
  ("Gaylord"),
  ("Gem"),
  ("Geneseo"),
  ("Geuda Springs"),
  ("Girard"),
  ("Glade"),
  ("Glasco"),
  ("Glen Elder"),
  ("Goddard"),
  ("Goessel"),
  ("Goff"),
  ("Goodland"),
  ("Gorham"),
  ("Gove City"),
  ("Grainfield"),
  ("Grandview Plaza"),
  ("Great Bend"),
  ("Greeley"),
  ("Green"),
  ("Greenleaf"),
  ("Greensburg"),
  ("Grenola"),
  ("Gridley"),
  ("Grinnell"),
  ("Gypsum"),
  ("Haddam"),
  ("Halstead"),
  ("Hamilton"),
  ("Hamlin"),
  ("Hanover"),
  ("Hanston"),
  ("Hardtner"),
  ("Harper"),
  ("Harris"),
  ("Hartford"),
  ("Harveyville"),
  ("Havana"),
  ("Haven"),
  ("Havensville"),
  ("Haviland"),
  ("Hays"),
  ("Haysville"),
  ("Hazelton"),
  ("Hepler"),
  ("Herington"),
  ("Herndon"),
  ("Hesston"),
  ("Hiawatha"),
  ("Highland"),
  ("Hill City"),
  ("Hillsboro"),
  ("Hoisington"),
  ("Holcomb"),
  ("Hollenberg"),
  ("Holton"),
  ("Holyrood"),
  ("Hope"),
  ("Horace"),
  ("Horton"),
  ("Howard"),
  ("Hoxie"),
  ("Hoyt"),
  ("Hudson"),
  ("Hugoton"),
  ("Humboldt"),
  ("Hunnewell"),
  ("Hunter"),
  ("Huron"),
  ("Hutchinson"),
  ("Independence"),
  ("Ingalls"),
  ("Inman"),
  ("Iola"),
  ("Isabel"),
  ("Iuka"),
  ("Jamestown"),
  ("Jennings"),
  ("Jetmore"),
  ("Jewell"),
  ("Johnson City"),
  ("Junction City"),
  ("Kanopolis"),
  ("Kanorado"),
  ("Kansas City"),
  ("Kechi"),
  ("Kensington"),
  ("Kincaid"),
  ("Kingman"),
  ("Kinsley"),
  ("Kiowa"),
  ("Kirwin"),
  ("Kismet"),
  ("Labette"),
  ("La Crosse"),
  ("La Cygne"),
  ("La Harpe"),
  ("Lake Quivira"),
  ("Lakin"),
  ("Lancaster"),
  ("Lane"),
  ("Langdon"),
  ("Lansing"),
  ("Larned"),
  ("Latham"),
  ("Latimer"),
  ("Lawrence"),
  ("Leavenworth"),
  ("Leawood"),
  ("Lebanon"),
  ("Lebo"),
  ("Lecompton"),
  ("Lehigh"),
  ("Lenexa"),
  ("Lenora"),
  ("Leon"),
  ("Leona"),
  ("Leonardville"),
  ("Leoti"),
  ("Le Roy"),
  ("Lewis"),
  ("Liberal"),
  ("Liberty"),
  ("Liebenthal"),
  ("Lincoln Center"),
  ("Lincolnville"),
  ("Lindsborg"),
  ("Linn"),
  ("Linn Valley"),
  ("Linwood"),
  ("Little River"),
  ("Logan"),
  ("Lone Elm"),
  ("Longford"),
  ("Long Island"),
  ("Longton"),
  ("Lorraine"),
  ("Lost Springs"),
  ("Louisburg"),
  ("Louisville"),
  ("Lucas"),
  ("Luray"),
  ("Lyndon"),
  ("Lyons"),
  ("McCracken"),
  ("McCune"),
  ("McDonald"),
  ("McFarland"),
  ("Macksville"),
  ("McLouth"),
  ("McPherson"),
  ("Madison"),
  ("Mahaska"),
  ("Maize"),
  ("Manchester"),
  ("Manhattan"),
  ("Mankato"),
  ("Manter"),
  ("Maple Hill"),
  ("Mapleton"),
  ("Marion"),
  ("Marquette"),
  ("Marysville"),
  ("Matfield Green"),
  ("Mayetta"),
  ("Mayfield"),
  ("Meade"),
  ("Medicine Lodge"),
  ("Melvern"),
  ("Menlo"),
  ("Meriden"),
  ("Merriam"),
  ("Milan"),
  ("Mildred"),
  ("Milford"),
  ("Miltonvale"),
  ("Minneapolis"),
  ("Minneola"),
  ("Mission"),
  ("Mission Hills"),
  ("Mission Woods"),
  ("Moline"),
  ("Montezuma"),
  ("Moran"),
  ("Morganville"),
  ("Morland"),
  ("Morrill"),
  ("Morrowville"),
  ("Moscow"),
  ("Mound City"),
  ("Moundridge"),
  ("Mound Valley"),
  ("Mount Hope"),
  ("Mulberry"),
  ("Mullinville"),
  ("Mulvane"),
  ("Munden"),
  ("Muscotah"),
  ("Narka"),
  ("Nashville"),
  ("Natoma"),
  ("Neodesha"),
  ("Neosho Falls"),
  ("Neosho Rapids"),
  ("Ness City"),
  ("Netawaka"),
  ("New Albany"),
  ("New Cambria"),
  ("New Strawn"),
  ("Newton"),
  ("Nickerson"),
  ("Niotaze"),
  ("Norcatur"),
  ("North Newton"),
  ("Norton"),
  ("Nortonville"),
  ("Norwich"),
  ("Oak Hill"),
  ("Oaklawn-Sunview"),
  ("Oakley"),
  ("Oberlin"),
  ("Offerle"),
  ("Ogden"),
  ("Oketo"),
  ("Olathe"),
  ("Olivet"),
  ("Olmitz"),
  ("Olpe"),
  ("Olsburg"),
  ("Onaga"),
  ("Oneida"),
  ("Osage City"),
  ("Osawatomie"),
  ("Osborne"),
  ("Oskaloosa"),
  ("Oswego"),
  ("Otis"),
  ("Ottawa"),
  ("Overbrook"),
  ("Overland Park"),
  ("Oxford"),
  ("Ozawkie"),
  ("Palco"),
  ("Palmer"),
  ("Paola"),
  ("Paradise"),
  ("Park"),
  ("Park City"),
  ("Parker"),
  ("Parkerville"),
  ("Parsons"),
  ("Partridge"),
  ("Pawnee Rock"),
  ("Paxico"),
  ("Peabody"),
  ("Penalosa"),
  ("Perry"),
  ("Peru"),
  ("Phillipsburg"),
  ("Pittsburg"),
  ("Plains"),
  ("Plainville"),
  ("Pleasanton"),
  ("Plevna"),
  ("Pomona"),
  ("Portis"),
  ("Potwin"),
  ("Powhattan"),
  ("Prairie View"),
  ("Prairie Village"),
  ("Pratt"),
  ("Prescott"),
  ("Preston"),
  ("Pretty Prairie"),
  ("Princeton"),
  ("Protection"),
  ("Quenemo"),
  ("Quinter"),
  ("Radium"),
  ("Ramona"),
  ("Randall"),
  ("Randolph"),
  ("Ransom"),
  ("Rantoul"),
  ("Raymond"),
  ("Reading"),
  ("Redfield"),
  ("Republic"),
  ("Reserve"),
  ("Rexford"),
  ("Richfield"),
  ("Richmond"),
  ("Riley"),
  ("Robinson"),
  ("Roeland Park"),
  ("Rolla"),
  ("Rose Hill"),
  ("Roseland"),
  ("Rossville"),
  ("Rozel"),
  ("Rush Center"),
  ("Russell"),
  ("Russell Springs"),
  ("Sabetha"),
  ("St. Francis"),
  ("St. George"),
  ("St. John"),
  ("St. Marys"),
  ("St. Paul"),
  ("Salina"),
  ("Satanta"),
  ("Savonburg"),
  ("Sawyer"),
  ("Scammon"),
  ("Scandia"),
  ("Schoenchen"),
  ("Scott City"),
  ("Scottsville"),
  ("Scranton"),
  ("Sedan"),
  ("Sedgwick"),
  ("Selden"),
  ("Seneca"),
  ("Severance"),
  ("Severy"),
  ("Seward"),
  ("Sharon"),
  ("Sharon Springs"),
  ("Shawnee"),
  ("Silver Lake"),
  ("Simpson"),
  ("Smith Center"),
  ("Smolan"),
  ("Soldier"),
  ("Solomon"),
  ("South Haven"),
  ("South Hutchinson"),
  ("Spearville"),
  ("Speed"),
  ("Spivey"),
  ("Spring Hill"),
  ("Stafford"),
  ("Stark"),
  ("Sterling"),
  ("Stockton"),
  ("Strong City"),
  ("Sublette"),
  ("Summerfield"),
  ("Sun City"),
  ("Susank"),
  ("Sylvan Grove"),
  ("Sylvia"),
  ("Syracuse"),
  ("Tampa"),
  ("Tescott"),
  ("Thayer"),
  ("Timken"),
  ("Tipton"),
  ("Tonganoxie"),
  ("Topeka"),
  ("Toronto"),
  ("Towanda"),
  ("Treece"),
  ("Tribune"),
  ("Troy"),
  ("Turon"),
  ("Tyro"),
  ("Udall"),
  ("Ulysses"),
  ("Uniontown"),
  ("Utica"),
  ("Valley Center"),
  ("Valley Falls"),
  ("Vermillion"),
  ("Victoria"),
  ("Vining"),
  ("Viola"),
  ("Virgil"),
  ("WaKeeney"),
  ("Wakefield"),
  ("Waldo"),
  ("Waldron"),
  ("Wallace"),
  ("Walnut"),
  ("Walton"),
  ("Wamego"),
  ("Washington"),
  ("Waterville"),
  ("Wathena"),
  ("Waverly"),
  ("Webber"),
  ("Weir"),
  ("Wellington"),
  ("Wellsville"),
  ("West Mineral"),
  ("Westmoreland"),
  ("Westphalia"),
  ("Westwood"),
  ("Westwood Hills"),
  ("Wetmore"),
  ("Wheaton"),
  ("White City"),
  ("White Cloud"),
  ("Whitewater"),
  ("Whiting"),
  ("Wichita"),
  ("Willard"),
  ("Williamsburg"),
  ("Willis"),
  ("Willowbrook"),
  ("Wilmore"),
  ("Wilsey"),
  ("Wilson"),
  ("Winchester"),
  ("Windom"),
  ("Winfield"),
  ("Winona"),
  ("Woodbine"),
  ("Woodston"),
  ("Yates Center"),
  ("Zenda"),
  ("Zurich"),
  ("Adairville"),
  ("Albany"),
  ("Alexandria"),
  ("Allen"),
  ("Allensville"),
  ("Anchorage"),
  ("Annville"),
  ("Arlington"),
  ("Ashland"),
  ("Auburn"),
  ("Audubon Park"),
  ("Augusta"),
  ("Bancroft"),
  ("Barbourmeade"),
  ("Barbourville"),
  ("Bardstown"),
  ("Bardwell"),
  ("Barlow"),
  ("Beattyville"),
  ("Beaver Dam"),
  ("Bedford"),
  ("Beechwood Village"),
  ("Bellefonte"),
  ("Bellemeade"),
  ("Bellevue"),
  ("Bellewood"),
  ("Benham"),
  ("Benton"),
  ("Berea"),
  ("Berry"),
  ("Blackey"),
  ("Blaine"),
  ("Blandville"),
  ("Bloomfield"),
  ("Blue Ridge Manor"),
  ("Bonnieville"),
  ("Booneville"),
  ("Bowling Green"),
  ("Bradfordsville"),
  ("Brandenburg"),
  ("Breckinridge Center"),
  ("Bremen"),
  ("Briarwood"),
  ("Broad Fields"),
  ("Brodhead"),
  ("Broeck Pointe"),
  ("Bromley"),
  ("Brooks"),
  ("Brooksville"),
  ("Brownsboro Farm"),
  ("Brownsboro Village"),
  ("Brownsville"),
  ("Buckhorn"),
  ("Buckner"),
  ("Buechel"),
  ("Burgin"),
  ("Burkesville"),
  ("Burlington"),
  ("Burnside"),
  ("Butler"),
  ("Cadiz"),
  ("Calhoun"),
  ("California"),
  ("Calvert City"),
  ("Camargo"),
  ("Cambridge"),
  ("Campbellsburg"),
  ("Campbellsville"),
  ("Campton"),
  ("Caneyville"),
  ("Carlisle"),
  ("Carrollton"),
  ("Carrsville"),
  ("Catlettsburg"),
  ("Cave City"),
  ("Cedarville"),
  ("Centertown"),
  ("Central City"),
  ("Cherrywood Village"),
  ("Clarkson"),
  ("Claryville"),
  ("Clay"),
  ("Clay City"),
  ("Clinton"),
  ("Cloverport"),
  ("Coal Run Village"),
  ("Cold Spring"),
  ("Coldstream"),
  ("Columbia"),
  ("Columbus"),
  ("Concord"),
  ("Corbin"),
  ("Corinth"),
  ("Corydon"),
  ("Covington"),
  ("Crab Orchard"),
  ("Creekside"),
  ("Crescent Springs"),
  ("Crestview"),
  ("Crestview Hills"),
  ("Crestwood"),
  ("Crittenden"),
  ("Crofton"),
  ("Crossgate"),
  ("Cumberland"),
  ("Cynthiana"),
  ("Danville"),
  ("Dawson Springs"),
  ("Dayton"),
  ("Dixon"),
  ("Douglass Hills"),
  ("Dover"),
  ("Drakesboro"),
  ("Druid Hills"),
  ("Dry Ridge"),
  ("Dycusburg"),
  ("Earlington"),
  ("East Bernstadt"),
  ("Eddyville"),
  ("Edgewood"),
  ("Edmonton"),
  ("Ekron"),
  ("Elizabethtown"),
  ("Elkhorn City"),
  ("Elkton"),
  ("Elsmere"),
  ("Eminence"),
  ("Erlanger"),
  ("Eubank"),
  ("Evarts"),
  ("Ewing"),
  ("Fairdale"),
  ("Fairfield"),
  ("Fairmeade"),
  ("Fairview"),
  ("Falmouth"),
  ("Ferguson"),
  ("Fern Creek"),
  ("Fincastle"),
  ("Flatwoods"),
  ("Fleming-Neon"),
  ("Flemingsburg"),
  ("Florence"),
  ("Fordsville"),
  ("Forest Hills"),
  ("Fort Campbell North"),
  ("Fort Knox"),
  ("Fort Mitchell"),
  ("Fort Thomas"),
  ("Fort Wright"),
  ("Fountain Run"),
  ("Fox Chase"),
  ("Frankfort"),
  ("Franklin"),
  ("Fredonia"),
  ("Frenchburg"),
  ("Fulton"),
  ("Gamaliel"),
  ("Georgetown"),
  ("Germantown"),
  ("Ghent"),
  ("Glasgow"),
  ("Glencoe"),
  ("Glenview"),
  ("Glenview Hills"),
  ("Glenview Manor"),
  ("Goose Creek"),
  ("Goshen"),
  ("Grand Rivers"),
  ("Gratz"),
  ("Graymoor-Devondale"),
  ("Grayson"),
  ("Greensburg"),
  ("Green Spring"),
  ("Greenup"),
  ("Greenville"),
  ("Guthrie"),
  ("Hanson"),
  ("Hardin"),
  ("Hardinsburg"),
  ("Harlan"),
  ("Harrodsburg"),
  ("Hartford"),
  ("Hawesville"),
  ("Hazard"),
  ("Hazel"),
  ("Hebron Estates"),
  ("Henderson"),
  ("Hendron"),
  ("Hickman"),
  ("Hickory Hill"),
  ("Highland Heights"),
  ("Highview"),
  ("Hills and Dales"),
  ("Hillview"),
  ("Hindman"),
  ("Hiseville"),
  ("Hodgenville"),
  ("Hollow Creek"),
  ("Hollyvilla"),
  ("Hopkinsville"),
  ("Horse Cave"),
  ("Houston Acres"),
  ("Hunters Hollow"),
  ("Hurstbourne"),
  ("Hurstbourne Acres"),
  ("Hustonville"),
  ("Hyden"),
  ("Independence"),
  ("Indian Hills"),
  ("Inez"),
  ("Irvine"),
  ("Irvington"),
  ("Island"),
  ("Jackson"),
  ("Jamestown"),
  ("Jeffersontown"),
  ("Jeffersonville"),
  ("Jenkins"),
  ("Junction City"),
  ("Keeneland"),
  ("Kenton Vale"),
  ("Kevil"),
  ("Kingsley"),
  ("Kuttawa"),
  ("La Center"),
  ("LaFayette"),
  ("La Grange"),
  ("Lakeside Park"),
  ("Lakeview Heights"),
  ("Lancaster"),
  ("Langdon Place"),
  ("Latonia Lakes"),
  ("Lawrenceburg"),
  ("Lebanon"),
  ("Lebanon Junction"),
  ("Ledbetter"),
  ("Leitchfield"),
  ("Lewisburg"),
  ("Lewisport"),
  ("Lexington-Fayette"),
  ("Liberty"),
  ("Lincolnshire"),
  ("Livermore"),
  ("Livingston"),
  ("London"),
  ("Lone Oak"),
  ("Loretto"),
  ("Louisa"),
  ("Louisville"),
  ("Loyall"),
  ("Ludlow"),
  ("Lynch"),
  ("Lyndon"),
  ("Lynnview"),
  ("McHenry"),
  ("McKee"),
  ("Mackville"),
  ("McRoberts"),
  ("Madisonville"),
  ("Manchester"),
  ("Manor Creek"),
  ("Marion"),
  ("Martin"),
  ("Maryhill Estates"),
  ("Masonville"),
  ("Massac"),
  ("Mayfield"),
  ("Maysville"),
  ("Meadowbrook Farm"),
  ("Meadow Vale"),
  ("Meadowview Estates"),
  ("Melbourne"),
  ("Mentor"),
  ("Middles"),
  ("Middletown"),
  ("Midway"),
  ("Millersburg"),
  ("Milton"),
  ("Minor Lane Heights"),
  ("Mockingbird Valley"),
  ("Monterey"),
  ("Monticello"),
  ("Moorland"),
  ("Morehead"),
  ("Morganfield"),
  ("Morgantown"),
  ("Mortons Gap"),
  ("Mount Olivet"),
  ("Mount Sterling"),
  ("Mount Vernon"),
  ("Mount Washington"),
  ("Muldraugh"),
  ("Munfordville"),
  ("Murray"),
  ("Murray Hill"),
  ("Nebo"),
  ("Newburg"),
  ("New Castle"),
  ("New Haven"),
  ("Newport"),
  ("Nicholasville"),
  ("Norbourne Estates"),
  ("North Corbin"),
  ("Northfield"),
  ("North Middletown"),
  ("Nortonville"),
  ("Norwood"),
  ("Oakbrook"),
  ("Oak Grove"),
  ("Oakland"),
  ("Okolona"),
  ("Old Brownsboro Place"),
  ("Olive Hill"),
  ("Orchard Grass Hills"),
  ("Owensboro"),
  ("Owenton"),
  ("Owingsville"),
  ("Paducah"),
  ("Paintsville"),
  ("Paris"),
  ("Park City"),
  ("Park Hills"),
  ("Park Lake"),
  ("Parkway Village"),
  ("Pembroke"),
  ("Perryville"),
  ("Pewee Valley"),
  ("Phelps"),
  ("Pikeville"),
  ("Pine Knot"),
  ("Pineville"),
  ("Pioneer Village"),
  ("Pippa Passes"),
  ("Plantation"),
  ("Pleasure Ridge Park"),
  ("Pleasureville"),
  ("Plum Springs"),
  ("Plymouth Village"),
  ("Poplar Hills"),
  ("Powderly"),
  ("Prestonsburg"),
  ("Prestonville"),
  ("Princeton"),
  ("Prospect"),
  ("Providence"),
  ("Raceland"),
  ("Radcliff"),
  ("Ravenna"),
  ("Raywick"),
  ("Reidland"),
  ("Richlawn"),
  ("Richmond"),
  ("River Bluff"),
  ("Riverwood"),
  ("Robards"),
  ("Rochester"),
  ("Rockport"),
  ("Rolling Fields"),
  ("Rolling Hills"),
  ("Russell"),
  ("Russell Springs"),
  ("Russellville"),
  ("Ryland Heights"),
  ("Sacramento"),
  ("Sadieville"),
  ("St. Charles"),
  ("St. Dennis"),
  ("St. Matthews"),
  ("St. Regis Park"),
  ("Salem"),
  ("Salt Lick"),
  ("Salyersville"),
  ("Sanders"),
  ("Sandy Hook"),
  ("Sardis"),
  ("Science Hill"),
  ("Scottsville"),
  ("Sebree"),
  ("Seneca Gardens"),
  ("Sharpsburg"),
  ("Shelbyville"),
  ("Shepherdsville"),
  ("Shively"),
  ("Silver Grove"),
  ("Simpsonville"),
  ("Slaughters"),
  ("Smithfield"),
  ("Smithland"),
  ("Smiths Grove"),
  ("Somerset"),
  ("Sonora"),
  ("South Carrollton"),
  ("Southgate"),
  ("South Park View"),
  ("South Shore"),
  ("South Wallins"),
  ("Sparta"),
  ("Springfield"),
  ("Springlee"),
  ("Spring Mill"),
  ("Spring Valley"),
  ("Stamping Ground"),
  ("Stanford"),
  ("Stanton"),
  ("Stearns"),
  ("Strathmoor Manor"),
  ("Strathmoor Village"),
  ("Sturgis"),
  ("Sycamore"),
  ("Taylor Mill"),
  ("Taylorsville"),
  ("Ten Broeck"),
  ("Thornhill"),
  ("Tompkinsville"),
  ("Trenton"),
  ("Union"),
  ("Uniontown"),
  ("Upton"),
  ("Valley Station"),
  ("Vanceburg"),
  ("Versailles"),
  ("Vicco"),
  ("Villa Hills"),
  ("Vine Grove"),
  ("Visalia"),
  ("Wallins Creek"),
  ("Walton"),
  ("Warfield"),
  ("Warsaw"),
  ("Water Valley"),
  ("Watterson Park"),
  ("Waverly"),
  ("Wayland"),
  ("Wellington"),
  ("West Buechel"),
  ("West Liberty"),
  ("West Point"),
  ("Westwood"),
  ("Westwood"),
  ("Wheatcroft"),
  ("Wheelwright"),
  ("Whipps Millgate"),
  ("White Plains"),
  ("Whitesburg"),
  ("Whitesville"),
  ("Whitley City"),
  ("Wickliffe"),
  ("Wilder"),
  ("Wildwood"),
  ("Williamsburg"),
  ("Williamstown"),
  ("Willisburg"),
  ("Wilmore"),
  ("Winchester"),
  ("Windy Hills"),
  ("Wingo"),
  ("Woodburn"),
  ("Woodbury"),
  ("Woodland Hills"),
  ("Woodlawn"),
  ("Woodlawn-Oakdale"),
  ("Woodlawn Park"),
  ("Worthington"),
  ("Worthington Hills"),
  ("Worthville"),
  ("Wurtland"),
  ("Abbeville"),
  ("Abita Springs"),
  ("Addis"),
  ("Albany"),
  ("Alexandria"),
  ("Ama"),
  ("Amelia"),
  ("Amite City"),
  ("Anacoco"),
  ("Angie"),
  ("Arabi"),
  ("Arcadia"),
  ("Arnaudville"),
  ("Ashland"),
  ("Athens"),
  ("Atlanta"),
  ("Avondale"),
  ("Baker"),
  ("Baldwin"),
  ("Ball"),
  ("Barataria"),
  ("Basile"),
  ("Baskin"),
  ("Bastrop"),
  ("Baton Rouge"),
  ("Bayou Cane"),
  ("Bayou Gauche"),
  ("Bayou Vista"),
  ("Belcher"),
  ("Belle Chasse"),
  ("Belle Rose"),
  ("Benton"),
  ("Bernice"),
  ("Berwick"),
  ("Bienville"),
  ("Blanchard"),
  ("Bogalusa"),
  ("Bonita"),
  ("Boothville-Venice"),
  ("Bossier City"),
  ("Boutte"),
  ("Boyce"),
  ("Breaux Bridge"),
  ("Bridge City"),
  ("Broussard"),
  ("Brownfields"),
  ("Brownsville-Bawcomville"),
  ("Brusly"),
  ("Bryceland"),
  ("Bunkie"),
  ("Buras-Triumph"),
  ("Calvin"),
  ("Cameron"),
  ("Campti"),
  ("Cankton"),
  ("Carencro"),
  ("Carlyss"),
  ("Castor"),
  ("Cecilia"),
  ("Chackbay"),
  ("Chalmette"),
  ("Charenton"),
  ("Chataignier"),
  ("Chatham"),
  ("Chauvin"),
  ("Cheneyville"),
  ("Choudrant"),
  ("Church Point"),
  ("Claiborne"),
  ("Clarence"),
  ("Clarks"),
  ("Clayton"),
  ("Clinton"),
  ("Colfax"),
  ("Collinston"),
  ("Columbia"),
  ("Converse"),
  ("Cottonport"),
  ("Cotton Valley"),
  ("Coushatta"),
  ("Covington"),
  ("Crowley"),
  ("Cullen"),
  ("Cut Off"),
  ("Delcambre"),
  ("Delhi"),
  ("Delta"),
  ("Denham Springs"),
  ("DeQuincy"),
  ("De Ridder"),
  ("Des Allemands"),
  ("Destrehan"),
  ("Deville"),
  ("Dixie Inn"),
  ("Dodson"),
  ("Donaldsonville"),
  ("Downsville"),
  ("Doyline"),
  ("Dry Prong"),
  ("Dubach"),
  ("Dubberly"),
  ("Dulac"),
  ("Duson"),
  ("East Hodge"),
  ("Eastwood"),
  ("Eden Isle"),
  ("Edgard"),
  ("Edgefield"),
  ("Elizabeth"),
  ("Elmwood"),
  ("Elton"),
  ("Empire"),
  ("Epps"),
  ("Erath"),
  ("Eros"),
  ("Estelle"),
  ("Estherwood"),
  ("Eunice"),
  ("Evergreen"),
  ("Farmerville"),
  ("Fenton"),
  ("Ferriday"),
  ("Fisher"),
  ("Florien"),
  ("Folsom"),
  ("Fordoche"),
  ("Forest"),
  ("Forest Hill"),
  ("Fort Polk North"),
  ("Fort Polk South"),
  ("Franklin"),
  ("Franklinton"),
  ("French Settlement"),
  ("Galliano"),
  ("Gardere"),
  ("Garyville"),
  ("Georgetown"),
  ("Gibsland"),
  ("Gilbert"),
  ("Gilliam"),
  ("Glenmora"),
  ("Golden Meadow"),
  ("Goldonna"),
  ("Gonzales"),
  ("Grambling"),
  ("Gramercy"),
  ("Grand Cane"),
  ("Grand Coteau"),
  ("Grand Isle"),
  ("Gray"),
  ("Grayson"),
  ("Greensburg"),
  ("Greenwood"),
  ("Gretna"),
  ("Grosse Tete"),
  ("Gueydan"),
  ("Hackberry"),
  ("Hahnville"),
  ("Hall Summit"),
  ("Hammond"),
  ("Harahan"),
  ("Harrisonburg"),
  ("Harvey"),
  ("Haughton"),
  ("Haynesville"),
  ("Heflin"),
  ("Henderson"),
  ("Hessmer"),
  ("Hodge"),
  ("Homer"),
  ("Hornbeck"),
  ("Hosston"),
  ("Houma"),
  ("Ida"),
  ("Independence"),
  ("Inniswold"),
  ("Iota"),
  ("Iowa"),
  ("Jackson"),
  ("Jamestown"),
  ("Jeanerette"),
  ("Jean Lafitte"),
  ("Jefferson"),
  ("Jena"),
  ("Jennings"),
  ("Jonesboro"),
  ("Jonesville"),
  ("Junction City"),
  ("Kaplan"),
  ("Keachi"),
  ("Kenner"),
  ("Kentwood"),
  ("Kilbourne"),
  ("Killian"),
  ("Killona"),
  ("Kinder"),
  ("Krotz Springs"),
  ("Labadieville"),
  ("Lacombe"),
  ("Lafayette"),
  ("Lafitte"),
  ("Lake Arthur"),
  ("Lake Charles"),
  ("Lake Providence"),
  ("Laplace"),
  ("Larose"),
  ("Lecompte"),
  ("Leesville"),
  ("Leonville"),
  ("Lillie"),
  ("Lisbon"),
  ("Livingston"),
  ("Livonia"),
  ("Lockport"),
  ("Logansport"),
  ("Longstreet"),
  ("Loreauville"),
  ("Lucky"),
  ("Luling"),
  ("Lutcher"),
  ("Lydia"),
  ("McNary"),
  ("Madisonville"),
  ("Mamou"),
  ("Mandeville"),
  ("Mangham"),
  ("Mansfield"),
  ("Mansura"),
  ("Many"),
  ("Maringouin"),
  ("Marion"),
  ("Marksville"),
  ("Marrero"),
  ("Martin"),
  ("Mathews"),
  ("Maurice"),
  ("Melville"),
  ("Meraux"),
  ("Mermentau"),
  ("Mer Rouge"),
  ("Merrydale"),
  ("Merryville"),
  ("Metairie"),
  ("Midway"),
  ("Minden"),
  ("Monroe"),
  ("Montegut"),
  ("Montgomery"),
  ("Monticello"),
  ("Montpelier"),
  ("Montz"),
  ("Mooringsport"),
  ("Moreauville"),
  ("Morgan City"),
  ("Morganza"),
  ("Morse"),
  ("Moss Bluff"),
  ("Mound"),
  ("Mount Lebanon"),
  ("Napoleonville"),
  ("Natalbany"),
  ("Natchez"),
  ("Natchitoches"),
  ("Newellton"),
  ("New Iberia"),
  ("New Llano"),
  ("New Orleans"),
  ("New Roads"),
  ("New Sarpy"),
  ("Noble"),
  ("Norco"),
  ("North Hodge"),
  ("North Vacherie"),
  ("Norwood"),
  ("Oakdale"),
  ("Oak Grove"),
  ("Oak Hills Place"),
  ("Oak Ridge"),
  ("Oberlin"),
  ("Oil City"),
  ("Old Jefferson"),
  ("Olla"),
  ("Opelousas"),
  ("Paincourtville"),
  ("Palmetto"),
  ("Paradis"),
  ("Parks"),
  ("Patterson"),
  ("Pearl River"),
  ("Pierre Part"),
  ("Pine Prairie"),
  ("Pineville"),
  ("Pioneer"),
  ("Plain Dealing"),
  ("Plaquemine"),
  ("Plaucheville"),
  ("Pleasant Hill"),
  ("Pollock"),
  ("Ponchatoula"),
  ("Port Allen"),
  ("Port Barre"),
  ("Port Sulphur"),
  ("Port Vincent"),
  ("Powhatan"),
  ("Poydras"),
  ("Prien"),
  ("Provencal"),
  ("Quitman"),
  ("Raceland"),
  ("Rayne"),
  ("Rayville"),
  ("Red Chute"),
  ("Reeves"),
  ("Reserve"),
  ("Richmond"),
  ("Richwood"),
  ("Ridgecrest"),
  ("Ringgold"),
  ("River Ridge"),
  ("Robeline"),
  ("Rodessa"),
  ("Rosedale"),
  ("Roseland"),
  ("Rosepine"),
  ("Ruston"),
  ("St. Francisville"),
  ("St. Gabriel"),
  ("St. Joseph"),
  ("St. Martinville"),
  ("St. Rose"),
  ("Saline"),
  ("Sarepta"),
  ("Schriever"),
  ("Scott"),
  ("Shenandoah"),
  ("Shongaloo"),
  ("Shreveport"),
  ("Sibley"),
  ("Sicily Island"),
  ("Sikes"),
  ("Simmesport"),
  ("Simpson"),
  ("Simsboro"),
  ("Slaughter"),
  ("Slidell"),
  ("Sorrento"),
  ("South Mansfield"),
  ("South Vacherie"),
  ("Spearsville"),
  ("Springfield"),
  ("Springhill"),
  ("Stanley"),
  ("Sterlington"),
  ("Stonewall"),
  ("Sulphur"),
  ("Sun"),
  ("Sunset"),
  ("Supreme"),
  ("Swartz"),
  ("Taft"),
  ("Tallulah"),
  ("Tangipahoa"),
  ("Terrytown"),
  ("Thibodaux"),
  ("Tickfaw"),
  ("Timberlane"),
  ("Tullos"),
  ("Turkey Creek"),
  ("Urania"),
  ("Varnado"),
  ("Vidalia"),
  ("Vienna"),
  ("Village St. George"),
  ("Ville Platte"),
  ("Vinton"),
  ("Violet"),
  ("Vivian"),
  ("Waggaman"),
  ("Walker"),
  ("Wallace"),
  ("Washington"),
  ("Waterproof"),
  ("Welsh"),
  ("West Ferriday"),
  ("Westlake"),
  ("Westminster"),
  ("West Monroe"),
  ("Westwego"),
  ("White Castle"),
  ("Wilson"),
  ("Winnfield"),
  ("Winnsboro"),
  ("Wisner"),
  ("Woodmere"),
  ("Woodworth"),
  ("Youngsville"),
  ("Zachary"),
  ("Zwolle"),
  ("Anson"),
  ("Auburn"),
  ("Augusta"),
  ("Bangor"),
  ("Bar Harbor"),
  ("Bath"),
  ("Belfast"),
  ("Berwick"),
  ("Biddeford"),
  ("Bingham"),
  ("Boothbay Harbor"),
  ("Brewer"),
  ("Bridgton"),
  ("Brunswick"),
  ("Brunswick Station"),
  ("Bucksport"),
  ("Calais"),
  ("Camden"),
  ("Cape Neddick"),
  ("Caribou"),
  ("Chisholm"),
  ("Clinton"),
  ("Cumberland Center"),
  ("Damariscotta-Newcastle"),
  ("Dexter"),
  ("Dixfield"),
  ("Dover-Foxcroft"),
  ("East Millinocket"),
  ("Eastport"),
  ("Ellsworth"),
  ("Fairfield"),
  ("Falmouth Foreside"),
  ("Farmingdale"),
  ("Farmington"),
  ("Fort Fairfield"),
  ("Fort Kent"),
  ("Freeport"),
  ("Fryeburg"),
  ("Gardiner"),
  ("Gorham"),
  ("Greenville"),
  ("Guilford"),
  ("Hallowell"),
  ("Hampden"),
  ("Hartland"),
  ("Houlton"),
  ("Howland"),
  ("Kennebunk"),
  ("Kennebunkport"),
  ("Kittery"),
  ("Kittery Point"),
  ("Lake Arrowhead"),
  ("Lewiston"),
  ("Limestone"),
  ("Lincoln"),
  ("Lisbon Falls"),
  ("Little Falls-South Windham"),
  ("Livermore Falls"),
  ("Loring AFB"),
  ("Machias"),
  ("Madawaska"),
  ("Madison"),
  ("Mars Hill-Blaine"),
  ("Mechanic Falls"),
  ("Mexico"),
  ("Milford"),
  ("Millinocket"),
  ("Milo"),
  ("Newport"),
  ("Norridgewock"),
  ("North Berwick"),
  ("North Windham"),
  ("Norway"),
  ("Oakland"),
  ("Old Orchard Beach"),
  ("Old Town"),
  ("Orono"),
  ("Oxford"),
  ("Pittsfield"),
  ("Portland"),
  ("Presque Isle"),
  ("Randolph"),
  ("Richmond"),
  ("Rockland"),
  ("Rumford"),
  ("Saco"),
  ("Sanford"),
  ("Scar"),
  ("Searsport"),
  ("Skowhegan"),
  ("South Eliot"),
  ("South Paris"),
  ("South Portland"),
  ("South Sanford"),
  ("Springvale"),
  ("Thomaston"),
  ("Topsham"),
  ("Unity"),
  ("Van Buren"),
  ("Waldoboro"),
  ("Waterville"),
  ("Westbrook"),
  ("West Kennebunk"),
  ("Wilton"),
  ("Winslow"),
  ("Winterport"),
  ("Winthrop"),
  ("Wiscasset"),
  ("Woodland"),
  ("Yarmouth"),
  ("York Harbor"),
  ("Aberdeen"),
  ("Aberdeen Proving Ground"),
  ("Accident"),
  ("Accokeek"),
  ("Adelphi"),
  ("Algonquin"),
  ("Andrews AFB"),
  ("Annapolis"),
  ("Arbutus"),
  ("Arden-on-the-Severn"),
  ("Arnold"),
  ("Ashton-Sandy Spring"),
  ("Aspen Hill"),
  ("Ballenger Creek"),
  ("Baltimore"),
  ("Barclay"),
  ("Barnesville"),
  ("Barton"),
  ("Bel Air"),
  ("Bel Air North"),
  ("Bel Air South"),
  ("Beltsville"),
  ("Bennsville"),
  ("Berlin"),
  ("Berwyn Heights"),
  ("Bethesda"),
  ("Betterton"),
  ("Bladensburg"),
  ("Boonsboro"),
  ("Bowie"),
  ("Bowleys Quarters"),
  ("Braddock Heights"),
  ("Brandywine"),
  ("Brentwood"),
  ("Brookeville"),
  ("Brooklyn Park"),
  ("Brookmont"),
  ("Brookview"),
  ("Brunswick"),
  ("Bryans Road"),
  ("Burkittsville"),
  ("Burtonsville"),
  ("Cabin John"),
  ("California"),
  ("Calvert Beach-Long Beach"),
  ("Calverton"),
  ("Cambridge"),
  ("Camp Springs"),
  ("Cape St. Claire"),
  ("Capitol Heights"),
  ("Carmody Hills-Pepper Mill Village"),
  ("Carney"),
  ("Catonsville"),
  ("Cavetown"),
  ("Cecilton"),
  ("Centreville"),
  ("Chance"),
  ("Charlestown"),
  ("Charlotte Hall"),
  ("Chesapeake Beach"),
  ("Chesapeake City"),
  ("Chesapeake Ranch Estates-Drum Point"),
  ("Chester"),
  ("Chestertown"),
  ("Cheverly"),
  ("Chevy Chase"),
  ("Chevy Chase"),
  ("Chevy Chase Section Five"),
  ("Chevy Chase Section Three"),
  ("Chevy Chase View"),
  ("Chevy Chase Village"),
  ("Chewsville"),
  ("Chillum"),
  ("Church Creek"),
  ("Church Hill"),
  ("Clarksburg"),
  ("Clear Spring"),
  ("Clinton"),
  ("Clover Hill"),
  ("Cloverly"),
  ("Cockeysville"),
  ("Colesville"),
  ("College Park"),
  ("Colmar Manor"),
  ("Columbia"),
  ("Coral Hills"),
  ("Cordova"),
  ("Cottage City"),
  ("Cresaptown-Bel Air"),
  ("Crisfield"),
  ("Crofton"),
  ("Crownsville"),
  ("Cumberland"),
  ("Damascus"),
  ("Dames Quarter"),
  ("Darnestown"),
  ("Deale"),
  ("Deal Island"),
  ("Deer Park"),
  ("Delmar"),
  ("Denton"),
  ("Discovery-Spring Garden"),
  ("District Heights"),
  ("Dundalk"),
  ("Dunkirk"),
  ("Eagle Harbor"),
  ("East New Market"),
  ("Easton"),
  ("East Riverdale"),
  ("Eden"),
  ("Edgemere"),
  ("Edgewood"),
  ("Edmonston"),
  ("Eldersburg"),
  ("Eldorado"),
  ("Elkridge"),
  ("Elkton"),
  ("Ellicott City"),
  ("Emmitsburg"),
  ("Essex"),
  ("Fairland"),
  ("Fairmount"),
  ("Fairmount Heights"),
  ("Fallston"),
  ("Federalsburg"),
  ("Ferndale"),
  ("Forest Glen"),
  ("Forest Heights"),
  ("Forestville"),
  ("Fort Meade"),
  ("Fort Ritchie"),
  ("Fort Washington"),
  ("Fountainhead-Orchard Hills"),
  ("Frederick"),
  ("Frenchtown-Rumbly"),
  ("Friendly"),
  ("Friendship Village"),
  ("Friendsville"),
  ("Frostburg"),
  ("Fruitland"),
  ("Funkstown"),
  ("Gaithersburg"),
  ("Galena"),
  ("Galestown"),
  ("Garrett Park"),
  ("Garrison"),
  ("Germantown"),
  ("Girdletree"),
  ("Glenarden"),
  ("Glen Burnie"),
  ("Glen Echo"),
  ("Glenn Dale"),
  ("Goddard"),
  ("Golden Beach"),
  ("Goldsboro"),
  ("Grantsville"),
  ("Grasonville"),
  ("Greater Landover"),
  ("Greater Upper Marlboro"),
  ("Greenbelt"),
  ("Green Haven"),
  ("Greensboro"),
  ("Green Valley"),
  ("Hagerstown"),
  ("Halfway"),
  ("Hampstead"),
  ("Hampton"),
  ("Hancock"),
  ("Havre de Grace"),
  ("Hebron"),
  ("Henderson"),
  ("Herald Harbor"),
  ("Highfield-Cascade"),
  ("Highland Beach"),
  ("Hillandale"),
  ("Hillcrest Heights"),
  ("Hillsboro"),
  ("Hillsmere Shores"),
  ("Hughesville"),
  ("Huntingtown"),
  ("Hurlock"),
  ("Hyattsville"),
  ("Indian Head"),
  ("Jarrettsville"),
  ("Jessup"),
  ("Joppatowne"),
  ("Keedysville"),
  ("Kemp Mill"),
  ("Kensington"),
  ("Kent Narrows"),
  ("Kettering"),
  ("Kingstown"),
  ("Kingsville"),
  ("Kitzmiller"),
  ("Lake Arbor"),
  ("Lake Shore"),
  ("Landover Hills"),
  ("Langley Park"),
  ("Lanham-Seabrook"),
  ("Lansdowne-Baltimore Highlands"),
  ("La Plata"),
  ("Largo"),
  ("Laurel"),
  ("La Vale"),
  ("Laytonsville"),
  ("Leitersburg"),
  ("Leonardtown"),
  ("Lexington Park"),
  ("Linganore-Bartonsville"),
  ("Linthicum"),
  ("Lochearn"),
  ("Loch Lynn Heights"),
  ("Lonaconing"),
  ("Londontowne"),
  ("Luke"),
  ("Lusby"),
  ("Lutherville-Timonium"),
  ("Manchester"),
  ("Mardela Springs"),
  ("Marlow Heights"),
  ("Marlton"),
  ("Martin's Additions"),
  ("Marydel"),
  ("Maryland City"),
  ("Maugansville"),
  ("Mayo"),
  ("Mays Chapel"),
  ("Middle River"),
  ("Middletown"),
  ("Midland"),
  ("Milford Mill"),
  ("Millington"),
  ("Mitchellville"),
  ("Montgomery Village"),
  ("Morningside"),
  ("Mount Aetna"),
  ("Mountain Lake Park"),
  ("Mount Airy"),
  ("Mount Lena"),
  ("Mount Rainier"),
  ("Mount Vernon"),
  ("Myersville"),
  ("Naval Academy"),
  ("Newark"),
  ("New Carrollton"),
  ("New Market"),
  ("New Windsor"),
  ("North Beach"),
  ("North Bethesda"),
  ("North Brentwood"),
  ("North Chevy Chase"),
  ("North East"),
  ("North Kensington"),
  ("North Laurel"),
  ("North Potomac"),
  ("Oakland"),
  ("Ocean City"),
  ("Ocean Pines"),
  ("Odenton"),
  ("Olney"),
  ("Overlea"),
  ("Owings"),
  ("Owings Mills"),
  ("Oxford"),
  ("Oxon Hill-Glassmanor"),
  ("Paramount-Long Meadow"),
  ("Parkville"),
  ("Parole"),
  ("Pasadena"),
  ("Perry Hall"),
  ("Perryman"),
  ("Perryville"),
  ("Pikesville"),
  ("Pittsville"),
  ("Pleasant Hills"),
  ("Pocomoke City"),
  ("Poolesville"),
  ("Port Deposit"),
  ("Port Tobacco Village"),
  ("Potomac"),
  ("Potomac Heights"),
  ("Preston"),
  ("Prince Frederick"),
  ("Princess Anne"),
  ("Pumphrey"),
  ("Queen Anne"),
  ("Queenstown"),
  ("Randallstown"),
  ("Redland"),
  ("Reisterstown"),
  ("Ridgely"),
  ("Rising Sun"),
  ("Riva"),
  ("Riverdale Park"),
  ("Riverside"),
  ("Riviera Beach"),
  ("Robinwood"),
  ("Rock Hall"),
  ("Rockville"),
  ("Rohrersville"),
  ("Rosaryville"),
  ("Rosedale"),
  ("Rosemont"),
  ("Rossmoor"),
  ("Rossville"),
  ("St. Charles"),
  ("St. James"),
  ("St. Leonard"),
  ("St. Michaels"),
  ("Salisbury"),
  ("San Mar"),
  ("Savage-Guilford"),
  ("Seat Pleasant"),
  ("Secretary"),
  ("Selby-on-the-Bay"),
  ("Severn"),
  ("Severna Park"),
  ("Shady Side"),
  ("Sharpsburg"),
  ("Sharptown"),
  ("Silver Spring"),
  ("Smith Island"),
  ("Smithsburg"),
  ("Snow Hill"),
  ("Solomons"),
  ("Somerset"),
  ("South Gate"),
  ("South Kensington"),
  ("South Laurel"),
  ("Springdale"),
  ("Stevensville"),
  ("Stockton"),
  ("Sudlersville"),
  ("Suitland-Silver Hill"),
  ("Sykesville"),
  ("Takoma Park"),
  ("Taneytown"),
  ("Temple Hills"),
  ("Templeville"),
  ("Thurmont"),
  ("Tilghman Island"),
  ("Towson"),
  ("Trappe"),
  ("Travilah"),
  ("Union Bridge"),
  ("University Park"),
  ("Upper Marlboro"),
  ("Vienna"),
  ("Waldorf"),
  ("Walker Mill"),
  ("Walkersville"),
  ("Washington Grove"),
  ("Westernport"),
  ("West Laurel"),
  ("Westminster"),
  ("West Ocean City"),
  ("West Pocomoke"),
  ("Whaleyville"),
  ("Wheaton-Glenmont"),
  ("White Marsh"),
  ("White Oak"),
  ("Willards"),
  ("Williamsport"),
  ("Wilson-Conococheague"),
  ("Woodlawn"),
  ("Woodlawn"),
  ("Woodmore"),
  ("Woodsboro"),
  ("Abington"),
  ("Acushnet Center"),
  ("Adams"),
  ("Agawam"),
  ("Amesbury"),
  ("Amherst Center"),
  ("Andover"),
  ("Arlington"),
  ("Athol"),
  ("Attleboro"),
  ("Ayer"),
  ("Baldwinville"),
  ("Barnstable Town"),
  ("Barre"),
  ("Belchertown"),
  ("Bellingham"),
  ("Belmont"),
  ("Beverly"),
  ("Bliss Corner"),
  ("Bondsville"),
  ("Boston"),
  ("Bourne"),
  ("Boxford"),
  ("Braintree"),
  ("Brewster"),
  ("Bridgewater"),
  ("Brockton"),
  ("Brookline"),
  ("Burlington"),
  ("Buzzards Bay"),
  ("Cambridge"),
  ("Chatham"),
  ("Chelsea"),
  ("Chicopee"),
  ("Clinton"),
  ("Cochituate"),
  ("Cordaville"),
  ("Danvers"),
  ("Dedham"),
  ("Dennis"),
  ("Dennis Port"),
  ("Dover"),
  ("Duxbury"),
  ("East Brookfield"),
  ("East Dennis"),
  ("East Douglas"),
  ("East Falmouth"),
  ("Easthampton"),
  ("East Harwich"),
  ("East Pepperell"),
  ("East Sandwich"),
  ("Essex"),
  ("Everett"),
  ("Fall River"),
  ("Falmouth"),
  ("Fiskdale"),
  ("Fitchburg"),
  ("Forestdale"),
  ("Fort Devens"),
  ("Fox"),
  ("Framingham"),
  ("Franklin"),
  ("Gardner"),
  ("Gloucester"),
  ("Granby"),
  ("Great Barrington"),
  ("Greenfield"),
  ("Green Harbor-Cedar Crest"),
  ("Groton"),
  ("Hanson"),
  ("Harwich Center"),
  ("Harwich Port"),
  ("Hatfield"),
  ("Haverhill"),
  ("Hingham"),
  ("Holbrook"),
  ("Holland"),
  ("Holyoke"),
  ("Hopedale"),
  ("Hopkinton"),
  ("Housatonic"),
  ("Hudson"),
  ("Hull"),
  ("Ipswich"),
  ("Kingston"),
  ("Lawrence"),
  ("Lee"),
  ("Lenox"),
  ("Leominster"),
  ("Lexington"),
  ("Littleton Common"),
  ("Longmeadow"),
  ("Lowell"),
  ("Lunenburg"),
  ("Lynn"),
  ("Lynnfield"),
  ("Malden"),
  ("Mansfield Center"),
  ("Marblehead"),
  ("Marion Center"),
  ("Marl"),
  ("Marshfield"),
  ("Marshfield Hills"),
  ("Mashpee Neck"),
  ("Mattapoisett Center"),
  ("Maynard"),
  ("Medfield"),
  ("Medford"),
  ("Melrose"),
  ("Methuen"),
  ("Middle"),
  ("Milford"),
  ("Millers Falls"),
  ("Millis-Clicquot"),
  ("Milton"),
  ("Monomoscoy Island"),
  ("Monson Center"),
  ("Monument Beach"),
  ("Nahant"),
  ("Nantucket"),
  ("Needham"),
  ("New Bedford"),
  ("Newburyport"),
  ("New Seabury"),
  ("Newton"),
  ("North Adams"),
  ("North Amherst"),
  ("Northampton"),
  ("North Attle"),
  ("North"),
  ("North Brookfield"),
  ("North Eastham"),
  ("North Falmouth"),
  ("Northfield"),
  ("North Lakeville"),
  ("North Pembroke"),
  ("North Plymouth"),
  ("North Scituate"),
  ("North Seekonk"),
  ("Northwest Harwich"),
  ("North Westport"),
  ("Norton Center"),
  ("Norwood"),
  ("Ocean Bluff-Brant Rock"),
  ("Ocean Grove"),
  ("Onset"),
  ("Orange"),
  ("Orleans"),
  ("Oxford"),
  ("Palmer"),
  ("Peabody"),
  ("Pepperell"),
  ("Pinehurst"),
  ("Pittsfield"),
  ("Plymouth"),
  ("Pocasset"),
  ("Popponesset"),
  ("Popponesset Island"),
  ("Provincetown"),
  ("Quincy"),
  ("Randolph"),
  ("Raynham Center"),
  ("Reading"),
  ("Revere"),
  ("Rockport"),
  ("Rowley"),
  ("Rutland"),
  ("Sagamore"),
  ("Salem"),
  ("Salisbury"),
  ("Sandwich"),
  ("Saugus"),
  ("Scituate"),
  ("Seabrook"),
  ("Seconsett Island"),
  ("Sharon"),
  ("Shelburne Falls"),
  ("Shirley"),
  ("Smith Mills"),
  ("Somerset"),
  ("Somerville"),
  ("South Amherst"),
  ("South Ashburnham"),
  ("Southbridge"),
  ("South Deerfield"),
  ("South Dennis"),
  ("South Duxbury"),
  ("South Lancaster"),
  ("South Yarmouth"),
  ("Spencer"),
  ("Springfield"),
  ("Stoneham"),
  ("Sturbridge"),
  ("Swampscott"),
  ("Taunton"),
  ("Teaticket"),
  ("Three Rivers"),
  ("Topsfield"),
  ("Townsend"),
  ("Turners Falls"),
  ("Upton-West Upton"),
  ("Vineyard Haven"),
  ("Wakefield"),
  ("Walpole"),
  ("Waltham"),
  ("Ware"),
  ("Wareham Center"),
  ("Warren"),
  ("Watertown"),
  ("Webster"),
  ("Wellesley"),
  ("West"),
  ("West Brookfield"),
  ("West Chatham"),
  ("West Concord"),
  ("West Dennis"),
  ("West Falmouth"),
  ("Westfield"),
  ("West Springfield"),
  ("West Wareham"),
  ("West Yarmouth"),
  ("Weweantic"),
  ("Weymouth"),
  ("White Island Shores"),
  ("Whitinsville"),
  ("Wilbraham"),
  ("Williamstown"),
  ("Wilmington"),
  ("Winchendon"),
  ("Winchester"),
  ("Winthrop"),
  ("Woburn"),
  ("Woods Hole"),
  ("Worcester"),
  ("Yarmouth Port"),
  ("Addison"),
  ("Adrian"),
  ("Ahmeek"),
  ("Akron"),
  ("Alanson"),
  ("Albion"),
  ("Algonac"),
  ("Allegan"),
  ("Allen"),
  ("Allendale"),
  ("Allen Park"),
  ("Alma"),
  ("Almont"),
  ("Alpena"),
  ("Alpha"),
  ("Ann Arbor"),
  ("Applegate"),
  ("Argentine"),
  ("Armada"),
  ("Ashley"),
  ("Athens"),
  ("Atlanta"),
  ("Auburn"),
  ("Auburn Hills"),
  ("Au Gres"),
  ("Augusta"),
  ("Au Sable"),
  ("Bad Axe"),
  ("Baldwin"),
  ("Bancroft"),
  ("Bangor"),
  ("Baraga"),
  ("Barnes Lake-Millers Lake"),
  ("Baroda"),
  ("Barryton"),
  ("Barton Hills"),
  ("Battle Creek"),
  ("Bay City"),
  ("Beal City"),
  ("Bear Lake"),
  ("Beaverton"),
  ("Beecher"),
  ("Beechwood"),
  ("Belding"),
  ("Bellaire"),
  ("Belleville"),
  ("Bellevue"),
  ("Benton Harbor"),
  ("Benton Heights"),
  ("Benzonia"),
  ("Berkley"),
  ("Berrien Springs"),
  ("Bessemer"),
  ("Beulah"),
  ("Beverly Hills"),
  ("Big Bay"),
  ("Big Rapids"),
  ("Bingham Farms"),
  ("Birch Run"),
  ("Birmingham"),
  ("Blissfield"),
  ("Bloomfield Hills"),
  ("Bloomfield Township"),
  ("Bloomingdale"),
  ("Boyne City"),
  ("Boyne Falls"),
  ("Breckenridge"),
  ("Breedsville"),
  ("Bridgeport"),
  ("Bridgman"),
  ("Brighton"),
  ("Britton"),
  ("Bronson"),
  ("Brooklyn"),
  ("Brown City"),
  ("Brownlee Park"),
  ("Buchanan"),
  ("Buckley"),
  ("Buena Vista"),
  ("Burlington"),
  ("Burr Oak"),
  ("Burt"),
  ("Burton"),
  ("Byron"),
  ("Byron Center"),
  ("Cadillac"),
  ("Caledonia"),
  ("Calumet"),
  ("Camden"),
  ("Canada Creek Ranch"),
  ("Canadian Lakes"),
  ("Canton"),
  ("Capac"),
  ("Carleton"),
  ("Carney"),
  ("Caro"),
  ("Carrollton"),
  ("Carson City"),
  ("Carsonville"),
  ("Caseville"),
  ("Casnovia"),
  ("Caspian"),
  ("Cass City"),
  ("Cassopolis"),
  ("Cedar Springs"),
  ("Cement City"),
  ("Center Line"),
  ("Central Lake"),
  ("Centreville"),
  ("Charlevoix"),
  ("Charlotte"),
  ("Chatham"),
  ("Cheboygan"),
  ("Chelsea"),
  ("Chesaning"),
  ("Clare"),
  ("Clarksville"),
  ("Clawson"),
  ("Clayton"),
  ("Clifford"),
  ("Climax"),
  ("Clinton"),
  ("Clinton"),
  ("Clio"),
  ("Coldwater"),
  ("Coleman"),
  ("Coloma"),
  ("Colon"),
  ("Columbiaville"),
  ("Comstock Northwest"),
  ("Comstock Park"),
  ("Concord"),
  ("Constantine"),
  ("Coopersville"),
  ("Copemish"),
  ("Copper City"),
  ("Corunna"),
  ("Croswell"),
  ("Crystal Falls"),
  ("Custer"),
  ("Cutlerville"),
  ("Daggett"),
  ("Dansville"),
  ("Davison"),
  ("Dearborn"),
  ("Dearborn Heights"),
  ("Decatur"),
  ("Deckerville"),
  ("Deerfield"),
  ("De Tour Village"),
  ("Detroit"),
  ("Detroit Beach"),
  ("De Witt"),
  ("Dexter"),
  ("Dimondale"),
  ("Douglas"),
  ("Dowagiac"),
  ("Dryden"),
  ("Dundee"),
  ("Durand"),
  ("Eagle"),
  ("East Grand Rapids"),
  ("East Jordan"),
  ("Eastlake"),
  ("East Lansing"),
  ("Eastpointe"),
  ("East Tawas"),
  ("Eastwood"),
  ("Eaton Rapids"),
  ("Eau Claire"),
  ("Ecorse"),
  ("Edgemont Park"),
  ("Edmore"),
  ("Edwardsburg"),
  ("Elberta"),
  ("Elk Rapids"),
  ("Elkton"),
  ("Ellsworth"),
  ("Elsie"),
  ("Emmett"),
  ("Empire"),
  ("Escanaba"),
  ("Essexville"),
  ("Estral Beach"),
  ("Evart"),
  ("Fairgrove"),
  ("Fair Plain"),
  ("Farmington"),
  ("Farmington Hills"),
  ("Farwell"),
  ("Fennville"),
  ("Fenton"),
  ("Ferndale"),
  ("Ferrysburg"),
  ("Fife Lake"),
  ("Flat Rock"),
  ("Flint"),
  ("Flushing"),
  ("Forest Hills"),
  ("Forestville"),
  ("Fountain"),
  ("Fowler"),
  ("Fowlerville"),
  ("Frankenmuth"),
  ("Frankfort"),
  ("Franklin"),
  ("Fraser"),
  ("Freeland"),
  ("Freeport"),
  ("Free Soil"),
  ("Fremont"),
  ("Fruitport"),
  ("Gaastra"),
  ("Gagetown"),
  ("Gaines"),
  ("Galesburg"),
  ("Galien"),
  ("Garden"),
  ("Garden City"),
  ("Gaylord"),
  ("Gibraltar"),
  ("Gladstone"),
  ("Gladwin"),
  ("Gobles"),
  ("Goodrich"),
  ("Grand Beach"),
  ("Grand Blanc"),
  ("Grand Haven"),
  ("Grand Ledge"),
  ("Grand Rapids"),
  ("Grandville"),
  ("Grant"),
  ("Grass Lake"),
  ("Grayling"),
  ("Greater Galesburg"),
  ("Greenville"),
  ("Greilickville"),
  ("Grosse Ile"),
  ("Grosse Pointe"),
  ("Grosse Pointe Farms"),
  ("Grosse Pointe Park"),
  ("Grosse Pointe Shores"),
  ("Grosse Pointe Woods"),
  ("Gwinn"),
  ("Hamtramck"),
  ("Hancock"),
  ("Hanover"),
  ("Harbor Beach"),
  ("Harbor Springs"),
  ("Harper Woods"),
  ("Harrietta"),
  ("Harrison"),
  ("Harrison"),
  ("Harrisville"),
  ("Hart"),
  ("Hartford"),
  ("Harvey"),
  ("Haslett"),
  ("Hastings"),
  ("Hazel Park"),
  ("Hemlock"),
  ("Hersey"),
  ("Hesperia"),
  ("Highland Park"),
  ("Hillman"),
  ("Hillsdale"),
  ("Holland"),
  ("Holly"),
  ("Holt"),
  ("Homer"),
  ("Honor"),
  ("Hopkins"),
  ("Houghton"),
  ("Houghton Lake"),
  ("Howard City"),
  ("Howell"),
  ("Hubbard Lake"),
  ("Hubbardston"),
  ("Hubbell"),
  ("Hudson"),
  ("Hudsonville"),
  ("Huntington Woods"),
  ("Imlay City"),
  ("Indian River"),
  ("Inkster"),
  ("Ionia"),
  ("Iron Mountain"),
  ("Iron River"),
  ("Ironwood"),
  ("Ishpeming"),
  ("Ithaca"),
  ("Jackson"),
  ("Jenison"),
  ("Jonesville"),
  ("Kalamazoo"),
  ("Kaleva"),
  ("Kalkaska"),
  ("Keego Harbor"),
  ("Kent City"),
  ("Kentwood"),
  ("Kinde"),
  ("Kingsford"),
  ("Kingsley"),
  ("Kingston"),
  ("K. I. Sawyer AFB"),
  ("Laingsburg"),
  ("Lake Angelus"),
  ("Lake Ann"),
  ("Lake City"),
  ("Lake Fenton"),
  ("Lake Linden"),
  ("Lake Michigan Beach"),
  ("Lake Odessa"),
  ("Lake Orion"),
  ("Lakeview"),
  ("Lakewood Club"),
  ("Lambertville"),
  ("L'Anse"),
  ("Lansing"),
  ("Lapeer"),
  ("Lathrup Village"),
  ("Laurium"),
  ("Lawrence"),
  ("Lawton"),
  ("Lennon"),
  ("Leonard"),
  ("Le Roy"),
  ("Leslie"),
  ("Level Park-Oak Park"),
  ("Lewiston"),
  ("Lexington"),
  ("Lincoln"),
  ("Lincoln Park"),
  ("Linden"),
  ("Litchfield"),
  ("Livonia"),
  ("Lost Lake Woods"),
  ("Lowell"),
  ("Ludington"),
  ("Luna Pier"),
  ("Luther"),
  ("Lyons"),
  ("McBain"),
  ("McBride"),
  ("Mackinac Island"),
  ("Mackinaw City"),
  ("Madison Heights"),
  ("Mancelona"),
  ("Manchester"),
  ("Manistee"),
  ("Manistique"),
  ("Manitou Beach-Devils Lake"),
  ("Manton"),
  ("Maple Rapids"),
  ("Marcellus"),
  ("Marine City"),
  ("Marion"),
  ("Marlette"),
  ("Marquette"),
  ("Marshall"),
  ("Martin"),
  ("Marysville"),
  ("Mason"),
  ("Mattawan"),
  ("Maybee"),
  ("Mayville"),
  ("Mecosta"),
  ("Melvin"),
  ("Melvindale"),
  ("Memphis"),
  ("Mendon"),
  ("Menominee"),
  ("Merrill"),
  ("Mesick"),
  ("Metamora"),
  ("Michiana"),
  ("Michigamme"),
  ("Michigan Center"),
  ("Middletown"),
  ("Middleville"),
  ("Midland"),
  ("Milan"),
  ("Milford"),
  ("Millersburg"),
  ("Millington"),
  ("Minden City"),
  ("Mineral Hills"),
  ("Mio"),
  ("Monroe"),
  ("Montague"),
  ("Montgomery"),
  ("Montrose"),
  ("Morenci"),
  ("Morley"),
  ("Morrice"),
  ("Mount Clemens"),
  ("Mount Morris"),
  ("Mount Pleasant"),
  ("Muir"),
  ("Mulliken"),
  ("Munising"),
  ("Muskegon"),
  ("Muskegon Heights"),
  ("Napoleon"),
  ("Nashville"),
  ("Negaunee"),
  ("Newaygo"),
  ("New Baltimore"),
  ("Newberry"),
  ("New Buffalo"),
  ("New Era"),
  ("New Haven"),
  ("New Lothrop"),
  ("Niles"),
  ("North Adams"),
  ("North Branch"),
  ("North Muskegon"),
  ("Northport"),
  ("Northview"),
  ("Northville"),
  ("Norton Shores"),
  ("Norway"),
  ("Novi"),
  ("Oakley"),
  ("Oak Park"),
  ("Okemos"),
  ("Olivet"),
  ("Omer"),
  ("Onaway"),
  ("Onekama"),
  ("Onsted"),
  ("Ontonagon"),
  ("Orchard Lake Village"),
  ("Ortonville"),
  ("Oscoda"),
  ("Ossineke"),
  ("Otisville"),
  ("Otsego"),
  ("Otter Lake"),
  ("Ovid"),
  ("Owendale"),
  ("Owosso"),
  ("Oxford"),
  ("Palmer"),
  ("Parchment"),
  ("Parma"),
  ("Paw Paw"),
  ("Paw Paw Lake"),
  ("Pearl Beach"),
  ("Peck"),
  ("Pellston"),
  ("Pentwater"),
  ("Perrinton"),
  ("Perry"),
  ("Petersburg"),
  ("Petoskey"),
  ("Pewamo"),
  ("Pierson"),
  ("Pigeon"),
  ("Pinckney"),
  ("Pinconning"),
  ("Plainwell"),
  ("Pleasant Ridge"),
  ("Plymouth"),
  ("Plymouth Township"),
  ("Pontiac"),
  ("Portage"),
  ("Port Austin"),
  ("Port Hope"),
  ("Port Huron"),
  ("Portland"),
  ("Port Sanilac"),
  ("Posen"),
  ("Potterville"),
  ("Powers"),
  ("Prescott"),
  ("Prudenville"),
  ("Quincy"),
  ("Quinnesec"),
  ("Ravenna"),
  ("Reading"),
  ("Redford"),
  ("Reed City"),
  ("Reese"),
  ("Republic"),
  ("Richland"),
  ("Richmond"),
  ("River Rouge"),
  ("Riverview"),
  ("Robin Glen-Indiantown"),
  ("Rochester"),
  ("Rochester Hills"),
  ("Rockford"),
  ("Rockwood"),
  ("Rogers City"),
  ("Romeo"),
  ("Romulus"),
  ("Roosevelt Park"),
  ("Roscommon"),
  ("Rosebush"),
  ("Rose City"),
  ("Roseville"),
  ("Rothbury"),
  ("Royal Oak"),
  ("Saginaw"),
  ("Saginaw Township North"),
  ("Saginaw Township South"),
  ("St. Charles"),
  ("St. Clair"),
  ("St. Clair Shores"),
  ("St. Helen"),
  ("St. Ignace"),
  ("St. Johns"),
  ("St. Joseph"),
  ("St. Louis"),
  ("Saline"),
  ("Sand Lake"),
  ("Sandusky"),
  ("Sanford"),
  ("Saranac"),
  ("Saugatuck"),
  ("Sault Ste. Marie"),
  ("Schoolcraft"),
  ("Scottville"),
  ("Sebewaing"),
  ("Shelby"),
  ("Shelby"),
  ("Shepherd"),
  ("Sheridan"),
  ("Sherwood"),
  ("Shields"),
  ("Shoreham"),
  ("Shorewood-Tower Hills-Harbert"),
  ("Skidway Lake"),
  ("Southfield"),
  ("Southgate"),
  ("South Gull Lake"),
  ("South Haven"),
  ("South Lyon"),
  ("South Monroe"),
  ("South Range"),
  ("South Rockwood"),
  ("Sparta"),
  ("Spring Arbor"),
  ("Springfield"),
  ("Spring Lake"),
  ("Springport"),
  ("Stambaugh"),
  ("Standish"),
  ("Stanton"),
  ("Stanwood"),
  ("Stephenson"),
  ("Sterling"),
  ("Sterling Heights"),
  ("Stevensville"),
  ("Stockbridge"),
  ("Stony Point"),
  ("Sturgis"),
  ("Sunfield"),
  ("Suttons Bay"),
  ("Swartz Creek"),
  ("Sylvan Lake"),
  ("Tawas City"),
  ("Taylor"),
  ("Tecumseh"),
  ("Tekonsha"),
  ("Temperance"),
  ("Thompsonville"),
  ("Three Oaks"),
  ("Three Rivers"),
  ("Traverse City"),
  ("Trenton"),
  ("Trowbridge Park"),
  ("Troy"),
  ("Turner"),
  ("Tustin"),
  ("Twining"),
  ("Twin Lake"),
  ("Ubly"),
  ("Union City"),
  ("Unionville"),
  ("Utica"),
  ("Vandalia"),
  ("Vanderbilt"),
  ("Vandercook Lake"),
  ("Vassar"),
  ("Vermontville"),
  ("Vernon"),
  ("Vicksburg"),
  ("Village of Clarkston"),
  ("Village of Lake Isabella"),
  ("Wakefield"),
  ("Waldron"),
  ("Walker"),
  ("Walkerville"),
  ("Walled Lake"),
  ("Warren"),
  ("Waterford"),
  ("Watervliet"),
  ("Waverly"),
  ("Wayland"),
  ("Wayne"),
  ("Webberville"),
  ("Weidman"),
  ("West Bloomfield Township"),
  ("West Branch"),
  ("West Ishpeming"),
  ("Westland"),
  ("West Monroe"),
  ("Westphalia"),
  ("Westwood"),
  ("White Cloud"),
  ("Whitehall"),
  ("White Pigeon"),
  ("Whitmore Lake"),
  ("Whittemore"),
  ("Williamston"),
  ("Wixom"),
  ("Wolf Lake"),
  ("Wolverine"),
  ("Wolverine Lake"),
  ("Woodhaven"),
  ("Woodland"),
  ("Woodland Beach"),
  ("Wyandotte"),
  ("Wyoming"),
  ("Yale"),
  ("Ypsilanti"),
  ("Zeeland"),
  ("Zilwaukee"),
  ("Ada"),
  ("Adams"),
  ("Adrian"),
  ("Afton"),
  ("Aitkin"),
  ("Akeley"),
  ("Albany"),
  ("Alberta"),
  ("Albert Lea"),
  ("Albertville"),
  ("Alden"),
  ("Aldrich"),
  ("Alexandria"),
  ("Alpha"),
  ("Altura"),
  ("Alvarado"),
  ("Amboy"),
  ("Andover"),
  ("Annandale"),
  ("Anoka"),
  ("Appleton"),
  ("Apple Valley"),
  ("Arco"),
  ("Arden Hills"),
  ("Argyle"),
  ("Arlington"),
  ("Arnold"),
  ("Ashby"),
  ("Askov"),
  ("Atwater"),
  ("Audubon"),
  ("Aurora"),
  ("Austin"),
  ("Avoca"),
  ("Avon"),
  ("Babbitt"),
  ("Backus"),
  ("Badger"),
  ("Bagley"),
  ("Balaton"),
  ("Barnesville"),
  ("Barnum"),
  ("Barrett"),
  ("Barry"),
  ("Battle Lake"),
  ("Baudette"),
  ("Baxter"),
  ("Bayport"),
  ("Beardsley"),
  ("Beaver Bay"),
  ("Beaver Creek"),
  ("Becker"),
  ("Bejou"),
  ("Belgrade"),
  ("Bellechester"),
  ("Belle Plaine"),
  ("Bellingham"),
  ("Beltrami"),
  ("Belview"),
  ("Bemidji"),
  ("Bena"),
  ("Benson"),
  ("Bertha"),
  ("Bethel"),
  ("Bigelow"),
  ("Big Falls"),
  ("Bigfork"),
  ("Big Lake"),
  ("Bingham Lake"),
  ("Birchwood Village"),
  ("Bird Island"),
  ("Biscay"),
  ("Biwabik"),
  ("Blackduck"),
  ("Blaine"),
  ("Blomkest"),
  ("Blooming Prairie"),
  ("Bloomington"),
  ("Blue Earth"),
  ("Bluffton"),
  ("Bock"),
  ("Borup"),
  ("Bovey"),
  ("Bowlus"),
  ("Boyd"),
  ("Boy River"),
  ("Braham"),
  ("Brainerd"),
  ("Brandon"),
  ("Breckenridge"),
  ("Breezy Point"),
  ("Brewster"),
  ("Bricelyn"),
  ("Brooklyn Center"),
  ("Brooklyn Park"),
  ("Brook Park"),
  ("Brooks"),
  ("Brookston"),
  ("Brooten"),
  ("Browerville"),
  ("Brownsdale"),
  ("Browns Valley"),
  ("Brownsville"),
  ("Brownton"),
  ("Bruno"),
  ("Buckman"),
  ("Buffalo"),
  ("Buffalo Lake"),
  ("Buhl"),
  ("Burnsville"),
  ("Burtrum"),
  ("Butterfield"),
  ("Byron"),
  ("Caledonia"),
  ("Callaway"),
  ("Calumet"),
  ("Cambridge"),
  ("Campbell"),
  ("Canby"),
  ("Cannon Falls"),
  ("Canton"),
  ("Carlos"),
  ("Carlton"),
  ("Carver"),
  ("Cass Lake"),
  ("Cedar Mills"),
  ("Center City"),
  ("Centerville"),
  ("Ceylon"),
  ("Champlin"),
  ("Chandler"),
  ("Chanhassen"),
  ("Chaska"),
  ("Chatfield"),
  ("Chickamaw Beach"),
  ("Chisago City"),
  ("Chisholm"),
  ("Chokio"),
  ("Circle Pines"),
  ("Clara City"),
  ("Claremont"),
  ("Clarissa"),
  ("Clarkfield"),
  ("Clarks Grove"),
  ("Clearbrook"),
  ("Clear Lake"),
  ("Clearwater"),
  ("Clements"),
  ("Cleveland"),
  ("Climax"),
  ("Clinton"),
  ("Clitherall"),
  ("Clontarf"),
  ("Cloquet"),
  ("Coates"),
  ("Cobden"),
  ("Cohasset"),
  ("Cokato"),
  ("Cold Spring"),
  ("Coleraine"),
  ("Cologne"),
  ("Columbia Heights"),
  ("Comfrey"),
  ("Comstock"),
  ("Conger"),
  ("Cook"),
  ("Coon Rapids"),
  ("Corcoran"),
  ("Correll"),
  ("Cosmos"),
  ("Cottage Grove"),
  ("Cottonwood"),
  ("Courtland"),
  ("Cromwell"),
  ("Crookston"),
  ("Crosby"),
  ("Crosslake"),
  ("Crystal"),
  ("Currie"),
  ("Cuyuna"),
  ("Cyrus"),
  ("Dakota"),
  ("Dalton"),
  ("Danube"),
  ("Danvers"),
  ("Darfur"),
  ("Darwin"),
  ("Dassel"),
  ("Dawson"),
  ("Dayton"),
  ("Deephaven"),
  ("Deer Creek"),
  ("Deer River"),
  ("Deerwood"),
  ("De Graff"),
  ("Delano"),
  ("Delavan"),
  ("Delhi"),
  ("Dellwood"),
  ("Denham"),
  ("Dennison"),
  ("Dent"),
  ("Detroit Lakes"),
  ("Dexter"),
  ("Dilworth"),
  ("Dodge Center"),
  ("Donaldson"),
  ("Donnelly"),
  ("Doran"),
  ("Dover"),
  ("Dovray"),
  ("Duluth"),
  ("Dumont"),
  ("Dundas"),
  ("Dundee"),
  ("Dunnell"),
  ("Eagan"),
  ("Eagle Bend"),
  ("Eagle Lake"),
  ("East Bethel"),
  ("East Grand Forks"),
  ("East Gull Lake"),
  ("Easton"),
  ("Echo"),
  ("Eden Prairie"),
  ("Eden Valley"),
  ("Edgerton"),
  ("Edina"),
  ("Effie"),
  ("Eitzen"),
  ("Elba"),
  ("Elbow Lake"),
  ("Elbow Lake"),
  ("Elgin"),
  ("Elizabeth"),
  ("Elko"),
  ("Elk River"),
  ("Elkton"),
  ("Ellendale"),
  ("Ellsworth"),
  ("Elmdale"),
  ("Elmore"),
  ("Elrosa"),
  ("Ely"),
  ("Elysian"),
  ("Emily"),
  ("Emmons"),
  ("Erhard"),
  ("Erskine"),
  ("Evan"),
  ("Evansville"),
  ("Eveleth"),
  ("Excelsior"),
  ("Eyota"),
  ("Fairfax"),
  ("Fairmont"),
  ("Falcon Heights"),
  ("Faribault"),
  ("Farmington"),
  ("Farwell"),
  ("Federal Dam"),
  ("Felton"),
  ("Fergus Falls"),
  ("Fertile"),
  ("Fifty Lakes"),
  ("Finlayson"),
  ("Fisher"),
  ("Flensburg"),
  ("Floodwood"),
  ("Florence"),
  ("Foley"),
  ("Forada"),
  ("Forest Lake"),
  ("Foreston"),
  ("Fort Ripley"),
  ("Fosston"),
  ("Fountain"),
  ("Foxhome"),
  ("Franklin"),
  ("Frazee"),
  ("Freeborn"),
  ("Freeport"),
  ("Fridley"),
  ("Frost"),
  ("Fulda"),
  ("Funkley"),
  ("Garfield"),
  ("Garrison"),
  ("Garvin"),
  ("Gary"),
  ("Gaylord"),
  ("Gem Lake"),
  ("Geneva"),
  ("Genola"),
  ("Georgetown"),
  ("Ghent"),
  ("Gibbon"),
  ("Gilbert"),
  ("Gilman"),
  ("Glencoe"),
  ("Glenville"),
  ("Glenwood"),
  ("Glyndon"),
  ("Golden Valley"),
  ("Gonvick"),
  ("Goodhue"),
  ("Goodridge"),
  ("Good Thunder"),
  ("Goodview"),
  ("Graceville"),
  ("Granada"),
  ("Grand Marais"),
  ("Grand Meadow"),
  ("Grand Rapids"),
  ("Granite Falls"),
  ("Grant"),
  ("Grasston"),
  ("Greenbush"),
  ("Greenfield"),
  ("Green Isle"),
  ("Greenwald"),
  ("Greenwood"),
  ("Grey Eagle"),
  ("Grove City"),
  ("Grygla"),
  ("Gully"),
  ("Hackensack"),
  ("Hadley"),
  ("Hallock"),
  ("Halma"),
  ("Halstad"),
  ("Hamburg"),
  ("Ham Lake"),
  ("Hammond"),
  ("Hampton"),
  ("Hancock"),
  ("Hanley Falls"),
  ("Hanover"),
  ("Hanska"),
  ("Harding"),
  ("Hardwick"),
  ("Harmony"),
  ("Harris"),
  ("Hartland"),
  ("Hastings"),
  ("Hatfield"),
  ("Hawley"),
  ("Hayfield"),
  ("Hayward"),
  ("Hazel Run"),
  ("Hector"),
  ("Heidelberg"),
  ("Henderson"),
  ("Hendricks"),
  ("Hendrum"),
  ("Henning"),
  ("Henriette"),
  ("Herman"),
  ("Hermantown"),
  ("Heron Lake"),
  ("Hewitt"),
  ("Hibbing"),
  ("Hill City"),
  ("Hillman"),
  ("Hills"),
  ("Hilltop"),
  ("Hinckley"),
  ("Hitterdal"),
  ("Hoffman"),
  ("Hokah"),
  ("Holdingford"),
  ("Holland"),
  ("Hollandale"),
  ("Holloway"),
  ("Holt"),
  ("Hopkins"),
  ("Houston"),
  ("Howard Lake"),
  ("Hoyt Lakes"),
  ("Hugo"),
  ("Humboldt"),
  ("Hutchinson"),
  ("Ihlen"),
  ("Independence"),
  ("International Falls"),
  ("Inver Grove Heights"),
  ("Iona"),
  ("Iron Junction"),
  ("Ironton"),
  ("Isanti"),
  ("Isle"),
  ("Ivanhoe"),
  ("Jackson"),
  ("Janesville"),
  ("Jasper"),
  ("Jeffers"),
  ("Jenkins"),
  ("Johnson"),
  ("Jordan"),
  ("Kandiyohi"),
  ("Karlstad"),
  ("Kasota"),
  ("Kasson"),
  ("Keewatin"),
  ("Kelliher"),
  ("Kellogg"),
  ("Kennedy"),
  ("Kenneth"),
  ("Kensington"),
  ("Kent"),
  ("Kenyon"),
  ("Kerkhoven"),
  ("Kerrick"),
  ("Kettle River"),
  ("Kiester"),
  ("Kilkenny"),
  ("Kimball"),
  ("Kinbrae"),
  ("Kingston"),
  ("Kinney"),
  ("La Crescent"),
  ("Lafayette"),
  ("Lake Benton"),
  ("Lake Bronson"),
  ("Lake City"),
  ("Lake Crystal"),
  ("Lake Elmo"),
  ("Lakefield"),
  ("Lake Henry"),
  ("Lakeland"),
  ("Lakeland Shores"),
  ("Lake Lillian"),
  ("Lake Park"),
  ("Lake St. Croix Beach"),
  ("Lake Shore"),
  ("Lakeville"),
  ("Lake Wilson"),
  ("Lamberton"),
  ("Lancaster"),
  ("Landfall"),
  ("Lanesboro"),
  ("Laporte"),
  ("La Prairie"),
  ("La Salle"),
  ("Lastrup"),
  ("Lauderdale"),
  ("Le Center"),
  ("Lengby"),
  ("Leonard"),
  ("Leonidas"),
  ("Leota"),
  ("Le Roy"),
  ("Lester Prairie"),
  ("Le Sueur"),
  ("Lewiston"),
  ("Lewisville"),
  ("Lexington"),
  ("Lilydale"),
  ("Lindstrom"),
  ("Lino Lakes"),
  ("Lismore"),
  ("Litchfield"),
  ("Little Canada"),
  ("Little Falls"),
  ("Littlefork"),
  ("Little Rock"),
  ("Long Beach"),
  ("Long Lake"),
  ("Long Prairie"),
  ("Longville"),
  ("Lonsdale"),
  ("Loretto"),
  ("Louisburg"),
  ("Lowry"),
  ("Lucan"),
  ("Luverne"),
  ("Lyle"),
  ("Lynd"),
  ("Mabel"),
  ("McGrath"),
  ("McGregor"),
  ("McIntosh"),
  ("McKinley"),
  ("Madelia"),
  ("Madison"),
  ("Madison Lake"),
  ("Magnolia"),
  ("Mahnomen"),
  ("Mahtomedi"),
  ("Manchester"),
  ("Manhattan Beach"),
  ("Mankato"),
  ("Mantorville"),
  ("Maple Grove"),
  ("Maple Lake"),
  ("Maple Plain"),
  ("Mapleton"),
  ("Mapleview"),
  ("Maplewood"),
  ("Marble"),
  ("Marietta"),
  ("Marine on St. Croix"),
  ("Marshall"),
  ("Mayer"),
  ("Maynard"),
  ("Mazeppa"),
  ("Meadowlands"),
  ("Medford"),
  ("Medicine Lake"),
  ("Medina"),
  ("Meire Grove"),
  ("Melrose"),
  ("Menahga"),
  ("Mendota"),
  ("Mendota Heights"),
  ("Mentor"),
  ("Middle River"),
  ("Miesville"),
  ("Milaca"),
  ("Milan"),
  ("Millerville"),
  ("Millville"),
  ("Milroy"),
  ("Miltona"),
  ("Minneapolis"),
  ("Minneiska"),
  ("Minneota"),
  ("Minnesota City"),
  ("Minnesota Lake"),
  ("Minnetonka"),
  ("Minnetonka Beach"),
  ("Minnetrista"),
  ("Mizpah"),
  ("Montevideo"),
  ("Montgomery"),
  ("Monticello"),
  ("Montrose"),
  ("Moorhead"),
  ("Moose Lake"),
  ("Mora"),
  ("Morgan"),
  ("Morris"),
  ("Morristown"),
  ("Morton"),
  ("Motley"),
  ("Mound"),
  ("Mounds View"),
  ("Mountain Iron"),
  ("Mountain Lake"),
  ("Murdock"),
  ("Myrtle"),
  ("Nashua"),
  ("Nashwauk"),
  ("Nassau"),
  ("Naytahwaush"),
  ("Nelson"),
  ("Nerstrand"),
  ("Nevis"),
  ("New Auburn"),
  ("New Brighton"),
  ("Newfolden"),
  ("New Germany"),
  ("New Hope"),
  ("New London"),
  ("New Market"),
  ("New Munich"),
  ("Newport"),
  ("New Prague"),
  ("New Richland"),
  ("New Trier"),
  ("New Ulm"),
  ("New York Mills"),
  ("Nicollet"),
  ("Nielsville"),
  ("Nimrod"),
  ("Nisswa"),
  ("Norcross"),
  ("North Branch"),
  ("Northfield"),
  ("North Mankato"),
  ("North Oaks"),
  ("Northome"),
  ("Northrop"),
  ("North St. Paul"),
  ("Norwood Young America"),
  ("Oakdale"),
  ("Oak Grove"),
  ("Oak Park Heights"),
  ("Oakport"),
  ("Odessa"),
  ("Odin"),
  ("Ogema"),
  ("Ogilvie"),
  ("Okabena"),
  ("Oklee"),
  ("Olivia"),
  ("Onamia"),
  ("Ormsby"),
  ("Orono"),
  ("Oronoco"),
  ("Orr"),
  ("Ortonville"),
  ("Osakis"),
  ("Oslo"),
  ("Osseo"),
  ("Ostrander"),
  ("Otsego"),
  ("Ottertail"),
  ("Owatonna"),
  ("Palisade"),
  ("Parkers Prairie"),
  ("Park Rapids"),
  ("Paynesville"),
  ("Pease"),
  ("Pelican Rapids"),
  ("Pemberton"),
  ("Pennock"),
  ("Pequot Lakes"),
  ("Perham"),
  ("Perley"),
  ("Peterson"),
  ("Pierz"),
  ("Pillager"),
  ("Pine City"),
  ("Pine Island"),
  ("Pine Point"),
  ("Pine River"),
  ("Pine Springs"),
  ("Pipestone"),
  ("Plainview"),
  ("Plato"),
  ("Pleasant Lake"),
  ("Plummer"),
  ("Plymouth"),
  ("Ponemah"),
  ("Porter"),
  ("Preston"),
  ("Princeton"),
  ("Prinsburg"),
  ("Prior Lake"),
  ("Proctor"),
  ("Quamba"),
  ("Racine"),
  ("Ramsey"),
  ("Randall"),
  ("Randolph"),
  ("Ranier"),
  ("Raymond"),
  ("Redby"),
  ("Red Lake"),
  ("Red Lake Falls"),
  ("Red Wing"),
  ("Redwood Falls"),
  ("Regal"),
  ("Remer"),
  ("Renville"),
  ("Revere"),
  ("Rice"),
  ("Rice Lake"),
  ("Richfield"),
  ("Richmond"),
  ("Richville"),
  ("Riverton"),
  ("Robbinsdale"),
  ("Rochester"),
  ("Rock Creek"),
  ("Rockford"),
  ("Rockville"),
  ("Rogers"),
  ("Rollingstone"),
  ("Ronneby"),
  ("Roosevelt"),
  ("Roscoe"),
  ("Roseau"),
  ("Rose Creek"),
  ("Rosemount"),
  ("Roseville"),
  ("Rothsay"),
  ("Round Lake"),
  ("Royalton"),
  ("Rush City"),
  ("Rushford"),
  ("Rushford Village"),
  ("Rushmore"),
  ("Russell"),
  ("Ruthton"),
  ("Rutledge"),
  ("Sabin"),
  ("Sacred Heart"),
  ("St. Anthony"),
  ("St. Anthony"),
  ("St. Bonifacius"),
  ("St. Charles"),
  ("St. Clair"),
  ("St. Cloud"),
  ("St. Francis"),
  ("St. Hilaire"),
  ("St. James"),
  ("St. Joseph"),
  ("St. Leo"),
  ("St. Louis Park"),
  ("St. Martin"),
  ("St. Marys Point"),
  ("St. Michael"),
  ("St. Paul"),
  ("St. Paul Park"),
  ("St. Peter"),
  ("St. Rosa"),
  ("St. Stephen"),
  ("St. Vincent"),
  ("Sanborn"),
  ("Sandstone"),
  ("Sargeant"),
  ("Sartell"),
  ("Sauk Centre"),
  ("Sauk Rapids"),
  ("Savage"),
  ("Scanlon"),
  ("Seaforth"),
  ("Sebeka"),
  ("Sedan"),
  ("Shafer"),
  ("Shakopee"),
  ("Shelly"),
  ("Sherburn"),
  ("Shevlin"),
  ("Shoreview"),
  ("Shorewood"),
  ("Silver Bay"),
  ("Silver Lake"),
  ("Skyline"),
  ("Slayton"),
  ("Sleepy Eye"),
  ("Sobieski"),
  ("Solway"),
  ("South Haven"),
  ("South St. Paul"),
  ("Spicer"),
  ("Springfield"),
  ("Spring Grove"),
  ("Spring Hill"),
  ("Spring Lake Park"),
  ("Spring Park"),
  ("Spring Valley"),
  ("Squaw Lake"),
  ("Stacy"),
  ("Staples"),
  ("Starbuck"),
  ("Steen"),
  ("Stephen"),
  ("Stewart"),
  ("Stewartville"),
  ("Stillwater"),
  ("Stockton"),
  ("Storden"),
  ("Strandquist"),
  ("Strathcona"),
  ("Sturgeon Lake"),
  ("Sunburg"),
  ("Sunfish Lake"),
  ("Swanville"),
  ("Taconite"),
  ("Tamarack"),
  ("Taopi"),
  ("Taunton"),
  ("Taylors Falls"),
  ("Tenney"),
  ("Tenstrike"),
  ("The Lakes"),
  ("Thief River Falls"),
  ("Thomson"),
  ("Tintah"),
  ("Tonka Bay"),
  ("Tower"),
  ("Tracy"),
  ("Trail"),
  ("Trimont"),
  ("Trommald"),
  ("Trosky"),
  ("Truman"),
  ("Turtle River"),
  ("Twin Lakes"),
  ("Twin Valley"),
  ("Two Harbors"),
  ("Tyler"),
  ("Ulen"),
  ("Underwood"),
  ("Upsala"),
  ("Urbank"),
  ("Utica"),
  ("Vadnais Heights"),
  ("Vergas"),
  ("Vermillion"),
  ("Verndale"),
  ("Vernon Center"),
  ("Vesta"),
  ("Victoria"),
  ("Viking"),
  ("Villard"),
  ("Vineland"),
  ("Vining"),
  ("Virginia"),
  ("Wabasha"),
  ("Wabasso"),
  ("Waconia"),
  ("Wadena"),
  ("Wahkon"),
  ("Waite Park"),
  ("Waldorf"),
  ("Walker"),
  ("Walnut Grove"),
  ("Walters"),
  ("Waltham"),
  ("Wanamingo"),
  ("Wanda"),
  ("Warba"),
  ("Warren"),
  ("Warroad"),
  ("Waseca"),
  ("Watertown"),
  ("Waterville"),
  ("Watkins"),
  ("Watson"),
  ("Waubun"),
  ("Waverly"),
  ("Wayzata"),
  ("Welcome"),
  ("Wells"),
  ("Wendell"),
  ("Westbrook"),
  ("West Concord"),
  ("Westport"),
  ("West St. Paul"),
  ("West Union"),
  ("Whalan"),
  ("Wheaton"),
  ("White Bear Lake"),
  ("White Earth"),
  ("Wilder"),
  ("Willernie"),
  ("Williams"),
  ("Willmar"),
  ("Willow River"),
  ("Wilmont"),
  ("Wilton"),
  ("Windom"),
  ("Winger"),
  ("Winnebago"),
  ("Winona"),
  ("Winsted"),
  ("Winthrop"),
  ("Winton"),
  ("Wolf Lake"),
  ("Wolverton"),
  ("Woodbury"),
  ("Wood Lake"),
  ("Woodland"),
  ("Woodstock"),
  ("Worthington"),
  ("Wrenshall"),
  ("Wright"),
  ("Wykoff"),
  ("Wyoming"),
  ("Zemple"),
  ("Zimmerman"),
  ("Zumbro Falls"),
  ("Zumbrota"),
  ("Abbeville"),
  ("Aberdeen"),
  ("Ackerman"),
  ("Algoma"),
  ("Alligator"),
  ("Amory"),
  ("Anguilla"),
  ("Arcola"),
  ("Artesia"),
  ("Ashland"),
  ("Baldwyn"),
  ("Bassfield"),
  ("Batesville"),
  ("Bay St. Louis"),
  ("Bay Springs"),
  ("Beaumont"),
  ("Beauregard"),
  ("Belmont"),
  ("Belzoni"),
  ("Benoit"),
  ("Bentonia"),
  ("Beulah"),
  ("Big Creek"),
  ("Big Point"),
  ("Biloxi"),
  ("Blue Mountain"),
  ("Blue Springs"),
  ("Bogue Chitto"),
  ("Bolton"),
  ("Booneville"),
  ("Boyle"),
  ("Brandon"),
  ("Braxton"),
  ("Brookhaven"),
  ("Brooksville"),
  ("Bruce"),
  ("Bude"),
  ("Burnsville"),
  ("Byhalia"),
  ("Byram"),
  ("Caledonia"),
  ("Calhoun City"),
  ("Canton"),
  ("Carrollton"),
  ("Carthage"),
  ("Cary"),
  ("Centreville"),
  ("Charleston"),
  ("Chunky"),
  ("Clarksdale"),
  ("Cleveland"),
  ("Clinton"),
  ("Coahoma"),
  ("Coffeeville"),
  ("Coldwater"),
  ("Collins"),
  ("Collinsville"),
  ("Columbia"),
  ("Columbus"),
  ("Columbus AFB"),
  ("Como"),
  ("Conehatta"),
  ("Corinth"),
  ("Courtland"),
  ("Crawford"),
  ("Crenshaw"),
  ("Crosby"),
  ("Crowder"),
  ("Cruger"),
  ("Crystal Springs"),
  ("Decatur"),
  ("De Kalb"),
  ("Derma"),
  ("Diamondhead"),
  ("D'Iberville"),
  ("D'Lo"),
  ("Doddsville"),
  ("Drew"),
  ("Duck Hill"),
  ("Dumas"),
  ("Duncan"),
  ("Durant"),
  ("Ecru"),
  ("Eden"),
  ("Edwards"),
  ("Ellisville"),
  ("Enterprise"),
  ("Escatawpa"),
  ("Ethel"),
  ("Eupora"),
  ("Falcon"),
  ("Falkner"),
  ("Farmington"),
  ("Fayette"),
  ("Flora"),
  ("Florence"),
  ("Flowood"),
  ("Forest"),
  ("French Camp"),
  ("Friars Point"),
  ("Fulton"),
  ("Gattman"),
  ("Gautier"),
  ("Georgetown"),
  ("Glen"),
  ("Glendora"),
  ("Gloster"),
  ("Golden"),
  ("Goodman"),
  ("Greenville"),
  ("Greenwood"),
  ("Grenada"),
  ("Gulf Hills"),
  ("Gulf Park Estates"),
  ("Gulfport"),
  ("Gunnison"),
  ("Guntown"),
  ("Hatley"),
  ("Hattiesburg"),
  ("Hazlehurst"),
  ("Heidelberg"),
  ("Helena"),
  ("Hernando"),
  ("Hickory"),
  ("Hickory Flat"),
  ("Hickory Hills"),
  ("Hollandale"),
  ("Holly Springs"),
  ("Horn Lake"),
  ("Houston"),
  ("Hurley"),
  ("Indianola"),
  ("Inverness"),
  ("Isola"),
  ("Itta Bena"),
  ("Iuka"),
  ("Jackson"),
  ("Jonestown"),
  ("Jumpertown"),
  ("Kilmichael"),
  ("Kiln"),
  ("Kosciusko"),
  ("Kossuth"),
  ("Lake"),
  ("Lambert"),
  ("Latimer"),
  ("Laurel"),
  ("Leakesville"),
  ("Learned"),
  ("Leland"),
  ("Lena"),
  ("Lexington"),
  ("Liberty"),
  ("Long Beach"),
  ("Louin"),
  ("Louise"),
  ("Louisville"),
  ("Lucedale"),
  ("Lula"),
  ("Lumberton"),
  ("Lyman"),
  ("Lynchburg"),
  ("Lyon"),
  ("Maben"),
  ("McComb"),
  ("McCool"),
  ("McLain"),
  ("Macon"),
  ("Madison"),
  ("Magee"),
  ("Magnolia"),
  ("Mantachie"),
  ("Mantee"),
  ("Marietta"),
  ("Marion"),
  ("Marks"),
  ("Mathiston"),
  ("Mayersville"),
  ("Meadville"),
  ("Memphis"),
  ("Mendenhall"),
  ("Meridian"),
  ("Meridian Station"),
  ("Merigold"),
  ("Metcalfe"),
  ("Mize"),
  ("Monticello"),
  ("Montrose"),
  ("Moorhead"),
  ("Morgan City"),
  ("Morton"),
  ("Moss Point"),
  ("Mound Bayou"),
  ("Mount Olive"),
  ("Myrtle"),
  ("Natchez"),
  ("Nellieburg"),
  ("Nettleton"),
  ("New Albany"),
  ("New Augusta"),
  ("New Hebron"),
  ("New Hope"),
  ("New Houlka"),
  ("Newton"),
  ("North Carrollton"),
  ("North Tunica"),
  ("Noxapater"),
  ("Oakland"),
  ("Ocean Springs"),
  ("Okolona"),
  ("Olive Branch"),
  ("Osyka"),
  ("Oxford"),
  ("Pace"),
  ("Pachuta"),
  ("Paden"),
  ("Pascagoula"),
  ("Pass Christian"),
  ("Pearl"),
  ("Pearlington"),
  ("Pearl River"),
  ("Pelahatchie"),
  ("Petal"),
  ("Philadelphia"),
  ("Picayune"),
  ("Pickens"),
  ("Pittsboro"),
  ("Plantersville"),
  ("Polkville"),
  ("Pontotoc"),
  ("Pope"),
  ("Poplarville"),
  ("Port Gibson"),
  ("Potts Camp"),
  ("Prentiss"),
  ("Puckett"),
  ("Purvis"),
  ("Quitman"),
  ("Raleigh"),
  ("Raymond"),
  ("Redwater"),
  ("Renova"),
  ("Richland"),
  ("Richton"),
  ("Ridgeland"),
  ("Rienzi"),
  ("Ripley"),
  ("Rolling Fork"),
  ("Rosedale"),
  ("Roxie"),
  ("Ruleville"),
  ("St. Martin"),
  ("Sallis"),
  ("Saltillo"),
  ("Sandersville"),
  ("Sardis"),
  ("Satartia"),
  ("Saucier"),
  ("Schlater"),
  ("Scooba"),
  ("Sebastopol"),
  ("Seminary"),
  ("Senatobia"),
  ("Shannon"),
  ("Shaw"),
  ("Shelby"),
  ("Sherman"),
  ("Shoreline Park"),
  ("Shubuta"),
  ("Shuqualak"),
  ("Sidon"),
  ("Silver City"),
  ("Silver Creek"),
  ("Slate Springs"),
  ("Sledge"),
  ("Smithville"),
  ("Snow Lake Shores"),
  ("Soso"),
  ("Southaven"),
  ("Standing Pine"),
  ("Starkville"),
  ("State Line"),
  ("Stonewall"),
  ("Sturgis"),
  ("Summit"),
  ("Sumner"),
  ("Sumrall"),
  ("Sunflower"),
  ("Sylvarena"),
  ("Taylor"),
  ("Taylorsville"),
  ("Tchula"),
  ("Terry"),
  ("Thaxton"),
  ("Tillatoba"),
  ("Tishomingo"),
  ("Toccopola"),
  ("Tremont"),
  ("Tucker"),
  ("Tunica"),
  ("Tupelo"),
  ("Tutwiler"),
  ("Tylertown"),
  ("Union"),
  ("Utica"),
  ("Vaiden"),
  ("Vancleave"),
  ("Vardaman"),
  ("Verona"),
  ("Vicksburg"),
  ("Wade"),
  ("Walnut"),
  ("Walnut Grove"),
  ("Walthall"),
  ("Water Valley"),
  ("Waveland"),
  ("Waynesboro"),
  ("Webb"),
  ("Weir"),
  ("Wesson"),
  ("West"),
  ("West Hattiesburg"),
  ("West Point"),
  ("Wiggins"),
  ("Winona"),
  ("Winstonville"),
  ("Woodland"),
  ("Woodville"),
  ("Yazoo City"),
  ("Adrian"),
  ("Advance"),
  ("Affton"),
  ("Agency"),
  ("Airport Drive"),
  ("Alba"),
  ("Albany"),
  ("Aldrich"),
  ("Alexandria"),
  ("Allendale"),
  ("Allenville"),
  ("Alma"),
  ("Altamont"),
  ("Altenburg"),
  ("Alton"),
  ("Amazonia"),
  ("Amity"),
  ("Amoret"),
  ("Amsterdam"),
  ("Anderson"),
  ("Annada"),
  ("Annapolis"),
  ("Anniston"),
  ("Appleton City"),
  ("Arbela"),
  ("Arbyrd"),
  ("Arcadia"),
  ("Archie"),
  ("Arcola"),
  ("Argyle"),
  ("Arkoe"),
  ("Armstrong"),
  ("Arnold"),
  ("Arrow Point"),
  ("Arrow Rock"),
  ("Asbury"),
  ("Ashburn"),
  ("Ash Grove"),
  ("Ashland"),
  ("Atlanta"),
  ("Augusta"),
  ("Aullville"),
  ("Aurora"),
  ("Auxvasse"),
  ("Ava"),
  ("Avilla"),
  ("Avondale"),
  ("Bagnell"),
  ("Baker"),
  ("Bakersfield"),
  ("Baldwin Park"),
  ("Ballwin"),
  ("Baring"),
  ("Barnard"),
  ("Barnett"),
  ("Barnhart"),
  ("Bates City"),
  ("Battlefield"),
  ("Bella Villa"),
  ("Bell City"),
  ("Belle"),
  ("Bellefontaine Neighbors"),
  ("Bellerive"),
  ("Bellflower"),
  ("Bel-Nor"),
  ("Bel-Ridge"),
  ("Belton"),
  ("Benton"),
  ("Benton City"),
  ("Berger"),
  ("Berkeley"),
  ("Bernie"),
  ("Bertrand"),
  ("Bethany"),
  ("Bethel"),
  ("Beverly Hills"),
  ("Bevier"),
  ("Biehle"),
  ("Bigelow"),
  ("Big Lake"),
  ("Billings"),
  ("Birch Tree"),
  ("Birmingham"),
  ("Bismarck"),
  ("Blackburn"),
  ("Black Jack"),
  ("Blackwater"),
  ("Blairstown"),
  ("Bland"),
  ("Blodgett"),
  ("Bloomfield"),
  ("Bloomsdale"),
  ("Blue Eye"),
  ("Blue Springs"),
  ("Blythedale"),
  ("Bogard"),
  ("Bolckow"),
  ("Bolivar"),
  ("Bonne Terre"),
  ("Boonville"),
  ("Bosworth"),
  ("Bourbon"),
  ("Bowling Green"),
  ("Bragg City"),
  ("Brandsville"),
  ("Branson"),
  ("Branson West"),
  ("Brashear"),
  ("Braymer"),
  ("Breckenridge"),
  ("Breckenridge Hills"),
  ("Brentwood"),
  ("Bridgeton"),
  ("Brimson"),
  ("Bronaugh"),
  ("Brookfield"),
  ("Brookline"),
  ("Brooklyn Heights"),
  ("Browning"),
  ("Brownington"),
  ("Brumley"),
  ("Brunswick"),
  ("Bucklin"),
  ("Buckner"),
  ("Buffalo"),
  ("Bull Creek"),
  ("Bunceton"),
  ("Bunker"),
  ("Burgess"),
  ("Burlington Junction"),
  ("Butler"),
  ("Butterfield"),
  ("Byrnes Mill"),
  ("Cabool"),
  ("Cainsville"),
  ("Cairo"),
  ("Caledonia"),
  ("Calhoun"),
  ("California"),
  ("Callao"),
  ("Calverton Park"),
  ("Camden"),
  ("Camden Point"),
  ("Camdenton"),
  ("Cameron"),
  ("Campbell"),
  ("Canalou"),
  ("Canton"),
  ("Cape Girardeau"),
  ("Cardwell"),
  ("Carl Junction"),
  ("Carrollton"),
  ("Carterville"),
  ("Carthage"),
  ("Caruthersville"),
  ("Carytown"),
  ("Cassville"),
  ("Castle Point"),
  ("Catron"),
  ("Cave"),
  ("Cedar Hill"),
  ("Cedar Hill Lakes"),
  ("Center"),
  ("Centertown"),
  ("Centerview"),
  ("Centerville"),
  ("Centralia"),
  ("Chaffee"),
  ("Chain of Rocks"),
  ("Chain-O-Lakes"),
  ("Chamois"),
  ("Champ"),
  ("Charlack"),
  ("Charleston"),
  ("Chesterfield"),
  ("Chilhowee"),
  ("Chillicothe"),
  ("Chula"),
  ("Clarence"),
  ("Clark"),
  ("Clarksburg"),
  ("Clarksdale"),
  ("Clarkson Valley"),
  ("Clarksville"),
  ("Clarkton"),
  ("Claycomo"),
  ("Clayton"),
  ("Clearmont"),
  ("Cleveland"),
  ("Clever"),
  ("Cliff Village"),
  ("Clifton Hill"),
  ("Climax Springs"),
  ("Clinton"),
  ("Clyde"),
  ("Cobalt"),
  ("Coffey"),
  ("Cole Camp"),
  ("Collins"),
  ("Columbia"),
  ("Commerce"),
  ("Conception Junction"),
  ("Concord"),
  ("Concordia"),
  ("Coney Island"),
  ("Conway"),
  ("Cool Valley"),
  ("Cooter"),
  ("Corder"),
  ("Corning"),
  ("Cosby"),
  ("Cottleville"),
  ("Country Club"),
  ("Country Club Hills"),
  ("Country Life Acres"),
  ("Cowgill"),
  ("Craig"),
  ("Crane"),
  ("Creighton"),
  ("Crestwood"),
  ("Creve Coeur"),
  ("Crocker"),
  ("Cross Timbers"),
  ("Crystal City"),
  ("Crystal Lake Park"),
  ("Crystal Lakes"),
  ("Cuba"),
  ("Curryville"),
  ("Dadeville"),
  ("Dalton"),
  ("Dardenne Prairie"),
  ("Darlington"),
  ("Dearborn"),
  ("Deepwater"),
  ("Deerfield"),
  ("De Kalb"),
  ("Dellwood"),
  ("Delta"),
  ("Dennis Acres"),
  ("Denver"),
  ("Des Arc"),
  ("Desloge"),
  ("De Soto"),
  ("Des Peres"),
  ("De Witt"),
  ("Dexter"),
  ("Diamond"),
  ("Diehlstadt"),
  ("Diggins"),
  ("Dixon"),
  ("Doniphan"),
  ("Doolittle"),
  ("Dover"),
  ("Downing"),
  ("Drexel"),
  ("Dudley"),
  ("Duenweg"),
  ("Duquesne"),
  ("Dutchtown"),
  ("Eagleville"),
  ("East Lynne"),
  ("Easton"),
  ("East Prairie"),
  ("Edgar Springs"),
  ("Edgerton"),
  ("Edina"),
  ("Edmundson"),
  ("Eldon"),
  ("El Dorado Springs"),
  ("Ellington"),
  ("Ellisville"),
  ("Ellsinore"),
  ("Elmer"),
  ("Elmira"),
  ("Elmo"),
  ("Elsberry"),
  ("Emerald Beach"),
  ("Eminence"),
  ("Emma"),
  ("Eolia"),
  ("Essex"),
  ("Ethel"),
  ("Eureka"),
  ("Everton"),
  ("Ewing"),
  ("Excelsior Estates"),
  ("Excelsior Springs"),
  ("Exeter"),
  ("Fairfax"),
  ("Fair Grove"),
  ("Fair Play"),
  ("Fairview"),
  ("Farber"),
  ("Farley"),
  ("Farmington"),
  ("Fayette"),
  ("Fenton"),
  ("Ferguson"),
  ("Ferrelview"),
  ("Festus"),
  ("Fidelity"),
  ("Fillmore"),
  ("Fisk"),
  ("Fleming"),
  ("Flemington"),
  ("Flint Hill"),
  ("Flordell Hills"),
  ("Florida"),
  ("Florissant"),
  ("Foley"),
  ("Fordland"),
  ("Forest City"),
  ("Foristell"),
  ("Forsyth"),
  ("Fortescue"),
  ("Fort Leonard Wood"),
  ("Foster"),
  ("Fountain N' Lakes"),
  ("Frankford"),
  ("Franklin"),
  ("Fredericktown"),
  ("Freeburg"),
  ("Freeman"),
  ("Freistatt"),
  ("Fremont Hills"),
  ("Frohna"),
  ("Frontenac"),
  ("Fulton"),
  ("Gainesville"),
  ("Galena"),
  ("Gallatin"),
  ("Galt"),
  ("Garden City"),
  ("Gasconade"),
  ("Gentry"),
  ("Gerald"),
  ("Gerster"),
  ("Gibbs"),
  ("Gideon"),
  ("Gilliam"),
  ("Gilman City"),
  ("Gladstone"),
  ("Glasgow"),
  ("Glasgow Village"),
  ("Glenaire"),
  ("Glen Allen"),
  ("Glendale"),
  ("Glen Echo Park"),
  ("Glenwood"),
  ("Golden City"),
  ("Goodman"),
  ("Gordonville"),
  ("Gower"),
  ("Graham"),
  ("Grain Valley"),
  ("Granby"),
  ("Grand Falls Plaza"),
  ("Grandin"),
  ("Grand Pass"),
  ("Grandview"),
  ("Granger"),
  ("Grant City"),
  ("Grantwood Village"),
  ("Gravois Mills"),
  ("Gray Summit"),
  ("Greencastle"),
  ("Green City"),
  ("Greendale"),
  ("Greenfield"),
  ("Green Park"),
  ("Green Ridge"),
  ("Greentop"),
  ("Greenville"),
  ("Greenwood"),
  ("Guilford"),
  ("Gunn City"),
  ("Hale"),
  ("Halfway"),
  ("Hallsville"),
  ("Halltown"),
  ("Hamilton"),
  ("Hanley Hills"),
  ("Hannibal"),
  ("Hardin"),
  ("Harris"),
  ("Harrisburg"),
  ("Harrisonville"),
  ("Hartsburg"),
  ("Hartville"),
  ("Hartwell"),
  ("Harwood"),
  ("Hawk Point"),
  ("Hayti"),
  ("Hayti Heights"),
  ("Hayward"),
  ("Haywood City"),
  ("Hazelwood"),
  ("Henrietta"),
  ("Herculaneum"),
  ("Hermann"),
  ("Hermitage"),
  ("Higbee"),
  ("Higginsville"),
  ("High Hill"),
  ("Highlandville"),
  ("High Ridge"),
  ("Hillsboro"),
  ("Hillsdale"),
  ("Hoberg"),
  ("Holcomb"),
  ("Holden"),
  ("Holland"),
  ("Holliday"),
  ("Hollister"),
  ("Holt"),
  ("Holts Summit"),
  ("Homestead"),
  ("Homestown"),
  ("Hopkins"),
  ("Horine"),
  ("Hornersville"),
  ("Houston"),
  ("Houstonia"),
  ("Houston Lake"),
  ("Howardville"),
  ("Hughesville"),
  ("Humansville"),
  ("Hume"),
  ("Humphreys"),
  ("Hunnewell"),
  ("Huntleigh"),
  ("Huntsville"),
  ("Hurdland"),
  ("Hurley"),
  ("Iatan"),
  ("Iberia"),
  ("Imperial"),
  ("Independence"),
  ("Indian Point"),
  ("Innsbrook"),
  ("Ionia"),
  ("Irena"),
  ("Irondale"),
  ("Iron Mountain Lake"),
  ("Ironton"),
  ("Jackson"),
  ("Jacksonville"),
  ("Jameson"),
  ("Jamesport"),
  ("Jamestown"),
  ("Jasper"),
  ("Jefferson City"),
  ("Jennings"),
  ("Jerico Springs"),
  ("Jonesburg"),
  ("Joplin"),
  ("Josephville"),
  ("Junction City"),
  ("Kahoka"),
  ("Kansas City"),
  ("Kearney"),
  ("Kelso"),
  ("Kennett"),
  ("Keytesville"),
  ("Kidder"),
  ("Kimberling City"),
  ("Kimmswick"),
  ("King City"),
  ("Kingdom City"),
  ("Kingston"),
  ("Kingsville"),
  ("Kinloch"),
  ("Kirksville"),
  ("Kirkwood"),
  ("Knob Noster"),
  ("Knox City"),
  ("Koshkonong"),
  ("La Belle"),
  ("Laclede"),
  ("Laddonia"),
  ("La Due"),
  ("Ladue"),
  ("La Grange"),
  ("Lake Annette"),
  ("Lake Lafayette"),
  ("Lake Lotawana"),
  ("Lake Mykee Town"),
  ("Lake Ozark"),
  ("Lake St. Louis"),
  ("Lakeshire"),
  ("Lakeside"),
  ("Lake Tapawingo"),
  ("Lake Waukomis"),
  ("Lake Winnebago"),
  ("Lamar"),
  ("Lamar Heights"),
  ("Lambert"),
  ("La Monte"),
  ("Lanagan"),
  ("Lancaster"),
  ("La Plata"),
  ("Laredo"),
  ("La Russell"),
  ("Lathrop"),
  ("La Tour"),
  ("Laurie"),
  ("Lawson"),
  ("Leadington"),
  ("Leadwood"),
  ("Leasburg"),
  ("Leawood"),
  ("Lebanon"),
  ("Lee's Summit"),
  ("Leeton"),
  ("Lemay"),
  ("Leonard"),
  ("Leslie"),
  ("Levasy"),
  ("Lewis and Clark Village"),
  ("Lewistown"),
  ("Lexington"),
  ("Liberal"),
  ("Liberty"),
  ("Licking"),
  ("Lilbourn"),
  ("Lincoln"),
  ("Linn"),
  ("Linn Creek"),
  ("Linneus"),
  ("Lithium"),
  ("Livonia"),
  ("Lock Springs"),
  ("Lockwood"),
  ("Lohman"),
  ("Loma Linda"),
  ("Lone Jack"),
  ("Longtown"),
  ("Louisburg"),
  ("Louisiana"),
  ("Lowry City"),
  ("Lucerne"),
  ("Ludlow"),
  ("Lupus"),
  ("Luray"),
  ("McBaine"),
  ("McCord Bend"),
  ("McFall"),
  ("Mackenzie"),
  ("McKittrick"),
  ("Macks Creek"),
  ("Macon"),
  ("Madison"),
  ("Maitland"),
  ("Malden"),
  ("Malta Bend"),
  ("Manchester"),
  ("Mansfield"),
  ("Maplewood"),
  ("Marble Hill"),
  ("Marceline"),
  ("Marionville"),
  ("Marl"),
  ("Marquand"),
  ("Marshall"),
  ("Marshfield"),
  ("Marston"),
  ("Marthasville"),
  ("Martinsburg"),
  ("Maryland Heights"),
  ("Maryville"),
  ("Matthews"),
  ("Maysville"),
  ("Mayview"),
  ("Meadville"),
  ("Mehlville"),
  ("Memphis"),
  ("Mendon"),
  ("Mercer"),
  ("Merriam Woods"),
  ("Merwin"),
  ("Meta"),
  ("Metz"),
  ("Mexico"),
  ("Miami"),
  ("Middletown"),
  ("Milan"),
  ("Milford"),
  ("Millard"),
  ("Miller"),
  ("Mill Spring"),
  ("Milo"),
  ("Mindenmines"),
  ("Miner"),
  ("Mineral Point"),
  ("Miramiguoa Park"),
  ("Missouri City"),
  ("Moberly"),
  ("Mokane"),
  ("Moline Acres"),
  ("Monett"),
  ("Monroe City"),
  ("Montgomery City"),
  ("Monticello"),
  ("Montrose"),
  ("Mooresville"),
  ("Morehouse"),
  ("Morley"),
  ("Morrison"),
  ("Morrisville"),
  ("Mosby"),
  ("Moscow Mills"),
  ("Mound City"),
  ("Moundville"),
  ("Mountain Grove"),
  ("Mountain View"),
  ("Mount Leonard"),
  ("Mount Moriah"),
  ("Mount Vernon"),
  ("Murphy"),
  ("Napoleon"),
  ("Naylor"),
  ("Neck City"),
  ("Neelyville"),
  ("Nelson"),
  ("Neosho"),
  ("Nevada"),
  ("Newark"),
  ("New Bloomfield"),
  ("Newburg"),
  ("New Cambria"),
  ("New Florence"),
  ("New Franklin"),
  ("New Hampton"),
  ("New Haven"),
  ("New London"),
  ("New Madrid"),
  ("New Melle"),
  ("Newtonia"),
  ("Newtown"),
  ("Niangua"),
  ("Nixa"),
  ("Noel"),
  ("Norborne"),
  ("Normandy"),
  ("North Kansas City"),
  ("North Lilbourn"),
  ("Northmoor"),
  ("North Wardell"),
  ("Northwoods"),
  ("Norwood"),
  ("Norwood Court"),
  ("Novelty"),
  ("Novinger"),
  ("Oak Grove"),
  ("Oak Grove"),
  ("Oakland"),
  ("Oak Ridge"),
  ("Oaks"),
  ("Oakview"),
  ("Oakville"),
  ("Oakwood"),
  ("Oakwood Park"),
  ("Odessa"),
  ("O'Fallon"),
  ("Old Appleton"),
  ("Old Monroe"),
  ("Olean"),
  ("Olivette"),
  ("Olympian Village"),
  ("Oran"),
  ("Oregon"),
  ("Oronogo"),
  ("Orrick"),
  ("Osage Beach"),
  ("Osborn"),
  ("Osceola"),
  ("Osgood"),
  ("Otterville"),
  ("Overland"),
  ("Owensville"),
  ("Ozark"),
  ("Pacific"),
  ("Pagedale"),
  ("Palmyra"),
  ("Paris"),
  ("Parkdale"),
  ("Park Hills"),
  ("Parkville"),
  ("Parkway"),
  ("Parma"),
  ("Parnell"),
  ("Pasadena Hills"),
  ("Pasadena Park"),
  ("Pascola"),
  ("Passaic"),
  ("Pattonsburg"),
  ("Paynesville"),
  ("Peculiar"),
  ("Penermon"),
  ("Perry"),
  ("Perryville"),
  ("Pevely"),
  ("Phillipsburg"),
  ("Pickering"),
  ("Piedmont"),
  ("Pierce City"),
  ("Pilot Grove"),
  ("Pilot Knob"),
  ("Pine Lawn"),
  ("Pineville"),
  ("Pinhook"),
  ("Platte City"),
  ("Platte Woods"),
  ("Plattsburg"),
  ("Pleasant Hill"),
  ("Pleasant Hope"),
  ("Pleasant Valley"),
  ("Pocahontas"),
  ("Pollock"),
  ("Polo"),
  ("Poplar Bluff"),
  ("Portage Des Sioux"),
  ("Portageville"),
  ("Potosi"),
  ("Powersville"),
  ("Prairie Home"),
  ("Prathersville"),
  ("Preston"),
  ("Princeton"),
  ("Purcell"),
  ("Purdin"),
  ("Purdy"),
  ("Puxico"),
  ("Queen City"),
  ("Quitman"),
  ("Qulin"),
  ("Randolph"),
  ("Ravenwood"),
  ("Raymondville"),
  ("Raymore"),
  ("Raytown"),
  ("Rayville"),
  ("Rea"),
  ("Redings Mill"),
  ("Reeds"),
  ("Reeds Spring"),
  ("Renick"),
  ("Rensselaer"),
  ("Republic"),
  ("Revere"),
  ("Rhineland"),
  ("Richards"),
  ("Rich Hill"),
  ("Richland"),
  ("Richmond"),
  ("Richmond Heights"),
  ("Ridgely"),
  ("Ridgeway"),
  ("Risco"),
  ("Ritchey"),
  ("River Bend"),
  ("Riverside"),
  ("Riverview"),
  ("Rives"),
  ("Rocheport"),
  ("Rockaway Beach"),
  ("Rock Hill"),
  ("Rock Port"),
  ("Rockville"),
  ("Rogersville"),
  ("Rolla"),
  ("Roscoe"),
  ("Rosebud"),
  ("Rosendale"),
  ("Rothville"),
  ("Rush Hill"),
  ("Rushville"),
  ("Russellville"),
  ("Rutledge"),
  ("Saginaw"),
  ("St. Ann"),
  ("St. Charles"),
  ("St. Clair"),
  ("St. Cloud"),
  ("Ste. Genevieve"),
  ("St. Elizabeth"),
  ("St. George"),
  ("St. James"),
  ("St. John"),
  ("St. Joseph"),
  ("St. Louis"),
  ("St. Martins"),
  ("St. Mary"),
  ("St. Paul"),
  ("St. Peters"),
  ("St. Robert"),
  ("St. Thomas"),
  ("Salem"),
  ("Salisbury"),
  ("Sappington"),
  ("Sarcoxie"),
  ("Savannah"),
  ("Schell City"),
  ("Scotsdale"),
  ("Scott City"),
  ("Sedalia"),
  ("Sedgewickville"),
  ("Seligman"),
  ("Senath"),
  ("Seneca"),
  ("Seymour"),
  ("Shelbina"),
  ("Shelbyville"),
  ("Sheldon"),
  ("Shell Knob"),
  ("Sheridan"),
  ("Shoal Creek Drive"),
  ("Shoal Creek Estates"),
  ("Shrewsbury"),
  ("Sibley"),
  ("Sikeston"),
  ("Silex"),
  ("Silver Creek"),
  ("Skidmore"),
  ("Slater"),
  ("Smithton"),
  ("Smithville"),
  ("South Gifford"),
  ("South Gorin"),
  ("South Greenfield"),
  ("South Lineville"),
  ("South West City"),
  ("Spanish Lake"),
  ("Sparta"),
  ("Spickard"),
  ("Spokane"),
  ("Springfield"),
  ("Stanberry"),
  ("Stark City"),
  ("Steele"),
  ("Steelville"),
  ("Stella"),
  ("Stewartsville"),
  ("Stockton"),
  ("Stotesbury"),
  ("Stotts City"),
  ("Stoutland"),
  ("Stoutsville"),
  ("Stover"),
  ("Strafford"),
  ("Strasburg"),
  ("Sturgeon"),
  ("Sugar Creek"),
  ("Sullivan"),
  ("Summersville"),
  ("Sumner"),
  ("Sundown"),
  ("Sunrise Beach"),
  ("Sunset Hills"),
  ("Sweet Springs"),
  ("Sycamore Hills"),
  ("Syracuse"),
  ("Table Rock"),
  ("Tallapoosa"),
  ("Taneyville"),
  ("Taos"),
  ("Tarkio"),
  ("Tarrants"),
  ("Thayer"),
  ("Theodosia"),
  ("Tightwad"),
  ("Tina"),
  ("Tindall"),
  ("Tipton"),
  ("Town and Country"),
  ("Tracy"),
  ("Trenton"),
  ("Trimble"),
  ("Triplett"),
  ("Troy"),
  ("Truesdale"),
  ("Truxton"),
  ("Turney"),
  ("Tuscumbia"),
  ("Twin Bridges"),
  ("Twin Oaks"),
  ("Umber View Heights"),
  ("Union"),
  ("Union Star"),
  ("Unionville"),
  ("Unity Village"),
  ("University City"),
  ("Uplands Park"),
  ("Urbana"),
  ("Urich"),
  ("Utica"),
  ("Valley Park"),
  ("Van Buren"),
  ("Vandalia"),
  ("Vandiver"),
  ("Vanduser"),
  ("Velda City"),
  ("Velda Village Hills"),
  ("Verona"),
  ("Versailles"),
  ("Viburnum"),
  ("Vienna"),
  ("Village of Four Seasons"),
  ("Villa Ridge"),
  ("Vinita Park"),
  ("Vinita Terrace"),
  ("Vista"),
  ("Waco"),
  ("Walker"),
  ("Walnut Grove"),
  ("Wardell"),
  ("Wardsville"),
  ("Warrensburg"),
  ("Warrenton"),
  ("Warsaw"),
  ("Warson Woods"),
  ("Washburn"),
  ("Washington"),
  ("Watson"),
  ("Waverly"),
  ("Wayland"),
  ("Waynesville"),
  ("Weatherby"),
  ("Weatherby Lake"),
  ("Weaubleau"),
  ("Webb City"),
  ("Webster Groves"),
  ("Weldon Spring"),
  ("Weldon Spring Heights"),
  ("Wellington"),
  ("Wellston"),
  ("Wellsville"),
  ("Wentworth"),
  ("Wentzville"),
  ("West Alton"),
  ("Westboro"),
  ("West Line"),
  ("Weston"),
  ("Westphalia"),
  ("West Plains"),
  ("Westwood"),
  ("Wheatland"),
  ("Wheaton"),
  ("Wheeling"),
  ("Whiteman AFB"),
  ("Whiteside"),
  ("Whitewater"),
  ("Wilbur Park"),
  ("Wildwood"),
  ("Willard"),
  ("Williamsville"),
  ("Willow Springs"),
  ("Wilson City"),
  ("Winchester"),
  ("Windsor"),
  ("Winfield"),
  ("Winona"),
  ("Winston"),
  ("Woods Heights"),
  ("Woodson Terrace"),
  ("Wooldridge"),
  ("Worth"),
  ("Worthington"),
  ("Wright City"),
  ("Wyaconda"),
  ("Wyatt"),
  ("Zalma"),
  ("Absarokee"),
  ("Agency"),
  ("Alberton"),
  ("Alder"),
  ("Amsterdam-Churchill"),
  ("Anaconda-Deer Lodge County"),
  ("Antelope"),
  ("Arlee"),
  ("Ashland"),
  ("Augusta"),
  ("Avon"),
  ("Azure"),
  ("Bainville"),
  ("Baker"),
  ("Ballantine"),
  ("Basin"),
  ("Bearcreek"),
  ("Beaver Creek"),
  ("Belfry"),
  ("Belgrade"),
  ("Belt"),
  ("Big Arm"),
  ("Bigfork"),
  ("Big Sandy"),
  ("Big Sky"),
  ("Big Timber"),
  ("Billings"),
  ("Birney"),
  ("Black Eagle"),
  ("Boneau"),
  ("Bonner-West Riverside"),
  ("Boulder"),
  ("Box Elder"),
  ("Bozeman"),
  ("Bridger"),
  ("Broadus"),
  ("Broadview"),
  ("Brockton"),
  ("Browning"),
  ("Busby"),
  ("Butte-Silver Bow"),
  ("Camp Three"),
  ("Cardwell"),
  ("Carter"),
  ("Cascade"),
  ("Charlo"),
  ("Chester"),
  ("Chinook"),
  ("Choteau"),
  ("Circle"),
  ("Clancy"),
  ("Clinton"),
  ("Clyde Park"),
  ("Colstrip"),
  ("Columbia Falls"),
  ("Columbus"),
  ("Conrad"),
  ("Cooke City-Silver Gate"),
  ("Coram"),
  ("Corvallis"),
  ("Crow Agency"),
  ("Culbertson"),
  ("Custer"),
  ("Cut Bank"),
  ("Darby"),
  ("Dayton"),
  ("De Borgia"),
  ("Deer Lodge"),
  ("Denton"),
  ("Dillon"),
  ("Dixon"),
  ("Dodson"),
  ("Drummond"),
  ("Dutton"),
  ("East Glacier Park Village"),
  ("East Helena"),
  ("East Missoula"),
  ("Ekalaka"),
  ("Elliston"),
  ("Elmo"),
  ("Ennis"),
  ("Eureka"),
  ("Evaro"),
  ("Evergreen"),
  ("Fairfield"),
  ("Fairview"),
  ("Fallon"),
  ("Finley Point"),
  ("Flaxville"),
  ("Florence"),
  ("Forsyth"),
  ("Fort Belknap Agency"),
  ("Fort Benton"),
  ("Fortine"),
  ("Fort Peck"),
  ("Fort Shaw"),
  ("Fort Smith"),
  ("Four Corners"),
  ("Fox Lake"),
  ("Frazer"),
  ("Frenchtown"),
  ("Froid"),
  ("Fromberg"),
  ("Gardiner"),
  ("Garrison"),
  ("Geraldine"),
  ("Gildford"),
  ("Glasgow"),
  ("Glendive"),
  ("Grass Range"),
  ("Great Falls"),
  ("Greycliff"),
  ("Hamilton"),
  ("Hardin"),
  ("Harlem"),
  ("Harlowton"),
  ("Harrison"),
  ("Havre"),
  ("Havre North"),
  ("Hays"),
  ("Heart Butte"),
  ("Helena"),
  ("Helena Valley Northeast"),
  ("Helena Valley Northwest"),
  ("Helena Valley Southeast"),
  ("Helena Valley West Central"),
  ("Helena West Side"),
  ("Heron"),
  ("Herron"),
  ("Highwood"),
  ("Hingham"),
  ("Hobson"),
  ("Hot Springs"),
  ("Hungry Horse"),
  ("Huntley"),
  ("Hysham"),
  ("Inverness"),
  ("Ismay"),
  ("Jefferson City"),
  ("Jette"),
  ("Joliet"),
  ("Joplin"),
  ("Jordan"),
  ("Judith Gap"),
  ("Kalispell"),
  ("Kerr"),
  ("Kevin"),
  ("Kicking Horse"),
  ("Kings Point"),
  ("Klein"),
  ("Knife River"),
  ("Kremlin"),
  ("Lakeside"),
  ("Lame Deer"),
  ("Laurel"),
  ("Lavina"),
  ("Lewistown"),
  ("Lewistown Heights"),
  ("Libby"),
  ("Lima"),
  ("Lincoln"),
  ("Livingston"),
  ("Lockwood"),
  ("Lodge Grass"),
  ("Lodge Pole"),
  ("Lolo"),
  ("Loma"),
  ("Lonepine"),
  ("Malmstrom AFB"),
  ("Malta"),
  ("Manhattan"),
  ("Martin City"),
  ("Medicine Lake"),
  ("Melstone"),
  ("Miles City"),
  ("Missoula"),
  ("Montana City"),
  ("Moore"),
  ("Muddy"),
  ("Musselshell"),
  ("Nashua"),
  ("Neihart"),
  ("Niarada"),
  ("North Browning"),
  ("Noxon"),
  ("Old Agency"),
  ("Opheim"),
  ("Orchard Homes"),
  ("Outlook"),
  ("Ovando"),
  ("Pablo"),
  ("Paradise"),
  ("Park City"),
  ("Parker School"),
  ("Philipsburg"),
  ("Pinesdale"),
  ("Plains"),
  ("Plentywood"),
  ("Plevna"),
  ("Polson"),
  ("Poplar"),
  ("Power"),
  ("Pryor"),
  ("Radersburg"),
  ("Ravalli"),
  ("Red Lodge"),
  ("Reed Point"),
  ("Reserve"),
  ("Rexford"),
  ("Richey"),
  ("Riverbend"),
  ("Rocky Point"),
  ("Rollins"),
  ("Ronan"),
  ("Roundup"),
  ("Rudyard"),
  ("Ryegate"),
  ("Saco"),
  ("Saddle Butte"),
  ("St. Ignatius"),
  ("St. Marie"),
  ("St. Pierre"),
  ("St. Regis"),
  ("St. Xavier"),
  ("Sangrey"),
  ("Scobey"),
  ("Seeley Lake"),
  ("Shelby"),
  ("Shepherd"),
  ("Sheridan"),
  ("Sidney"),
  ("Simms"),
  ("Somers"),
  ("South Browning"),
  ("Stanford"),
  ("Starr School"),
  ("Stevensville"),
  ("Sunburst"),
  ("Sun Prairie"),
  ("Sun River"),
  ("Superior"),
  ("Terry"),
  ("Thompson Falls"),
  ("Three Forks"),
  ("Toston"),
  ("Townsend"),
  ("Trout Creek"),
  ("Troy"),
  ("Turtle Lake"),
  ("Twin Bridges"),
  ("Ulm"),
  ("Valier"),
  ("Vaughn"),
  ("Victor"),
  ("Virginia City"),
  ("Walkerville"),
  ("Westby"),
  ("West Glendive"),
  ("West Havre"),
  ("West Yellowstone"),
  ("Whitefish"),
  ("Whitehall"),
  ("White Sulphur Springs"),
  ("Wibaux"),
  ("Willow Creek"),
  ("Wilsall"),
  ("Winifred"),
  ("Winnett"),
  ("Winston"),
  ("Wisdom"),
  ("Wolf Point"),
  ("Woods Bay"),
  ("Worden"),
  ("Wye"),
  ("Wyola"),
  ("Abie"),
  ("Adams"),
  ("Ainsworth"),
  ("Albion"),
  ("Alda"),
  ("Alexandria"),
  ("Allen"),
  ("Alliance"),
  ("Alma"),
  ("Alvo"),
  ("Amherst"),
  ("Anoka"),
  ("Anselmo"),
  ("Ansley"),
  ("Arapahoe"),
  ("Arcadia"),
  ("Arlington"),
  ("Arnold"),
  ("Arthur"),
  ("Ashland"),
  ("Ashton"),
  ("Atkinson"),
  ("Atlanta"),
  ("Auburn"),
  ("Aurora"),
  ("Avoca"),
  ("Axtell"),
  ("Ayr"),
  ("Bancroft"),
  ("Barada"),
  ("Barneston"),
  ("Bartlett"),
  ("Bartley"),
  ("Bassett"),
  ("Battle Creek"),
  ("Bayard"),
  ("Bazile Mills"),
  ("Beatrice"),
  ("Beaver City"),
  ("Beaver Crossing"),
  ("Bee"),
  ("Beemer"),
  ("Belden"),
  ("Belgrade"),
  ("Bellevue"),
  ("Bellwood"),
  ("Belvidere"),
  ("Benedict"),
  ("Benkelman"),
  ("Bennet"),
  ("Bennington"),
  ("Bertrand"),
  ("Berwyn"),
  ("Big Springs"),
  ("Bladen"),
  ("Blair"),
  ("Bloomfield"),
  ("Bloomington"),
  ("Blue Hill"),
  ("Blue Springs"),
  ("Boys Town"),
  ("Bradshaw"),
  ("Brady"),
  ("Brainard"),
  ("Brewster"),
  ("Bridgeport"),
  ("Bristow"),
  ("Broadwater"),
  ("Brock"),
  ("Broken Bow"),
  ("Brownville"),
  ("Brule"),
  ("Bruning"),
  ("Bruno"),
  ("Brunswick"),
  ("Burchard"),
  ("Burr"),
  ("Burton"),
  ("Burwell"),
  ("Bushnell"),
  ("Butte"),
  ("Byron"),
  ("Cairo"),
  ("Callaway"),
  ("Cambridge"),
  ("Campbell"),
  ("Carleton"),
  ("Carroll"),
  ("Cedar Bluffs"),
  ("Cedar Creek"),
  ("Cedar Rapids"),
  ("Center"),
  ("Central City"),
  ("Ceresco"),
  ("Chadron"),
  ("Chalco"),
  ("Chambers"),
  ("Chapman"),
  ("Chappell"),
  ("Chester"),
  ("Cisco"),
  ("Clarks"),
  ("Clarkson"),
  ("Clatonia"),
  ("Clay Center"),
  ("Clearwater"),
  ("Clinton"),
  ("Cody"),
  ("Coleridge"),
  ("Colon"),
  ("Columbus"),
  ("Comstock"),
  ("Concord"),
  ("Cook"),
  ("Cordova"),
  ("Cornlea"),
  ("Cortland"),
  ("Cotesfield"),
  ("Cowles"),
  ("Cozad"),
  ("Crab Orchard"),
  ("Craig"),
  ("Crawford"),
  ("Creighton"),
  ("Creston"),
  ("Crete"),
  ("Crofton"),
  ("Crookston"),
  ("Culbertson"),
  ("Curtis"),
  ("Cushing"),
  ("Dakota City"),
  ("Dalton"),
  ("Danbury"),
  ("Dannebrog"),
  ("Davenport"),
  ("Davey"),
  ("David City"),
  ("Dawson"),
  ("Daykin"),
  ("Decatur"),
  ("Denton"),
  ("Deshler"),
  ("Deweese"),
  ("De Witt"),
  ("Diller"),
  ("Dix"),
  ("Dixon"),
  ("Dodge"),
  ("Doniphan"),
  ("Dorchester"),
  ("Douglas"),
  ("Du Bois"),
  ("Dunbar"),
  ("Duncan"),
  ("Dunning"),
  ("Dwight"),
  ("Eagle"),
  ("Eddyville"),
  ("Edgar"),
  ("Edison"),
  ("Elba"),
  ("Elgin"),
  ("Elk Creek"),
  ("Elkhorn"),
  ("Elm Creek"),
  ("Elmwood"),
  ("Elsie"),
  ("Elwood"),
  ("Elyria"),
  ("Emerson"),
  ("Emmet"),
  ("Endicott"),
  ("Ericson"),
  ("Eustis"),
  ("Ewing"),
  ("Exeter"),
  ("Fairbury"),
  ("Fairfield"),
  ("Fairmont"),
  ("Falls City"),
  ("Farnam"),
  ("Farwell"),
  ("Filley"),
  ("Firth"),
  ("Fordyce"),
  ("Fort Calhoun"),
  ("Foster"),
  ("Franklin"),
  ("Fremont"),
  ("Friend"),
  ("Fullerton"),
  ("Funk"),
  ("Gandy"),
  ("Garland"),
  ("Garrison"),
  ("Geneva"),
  ("Genoa"),
  ("Gering"),
  ("Gibbon"),
  ("Gilead"),
  ("Giltner"),
  ("Glenvil"),
  ("Goehner"),
  ("Gordon"),
  ("Gothenburg"),
  ("Grafton"),
  ("Grand Island"),
  ("Grant"),
  ("Greeley Center"),
  ("Greenwood"),
  ("Gresham"),
  ("Gretna"),
  ("Gross"),
  ("Guide Rock"),
  ("Gurley"),
  ("Hadar"),
  ("Haigler"),
  ("Hallam"),
  ("Halsey"),
  ("Hamlet"),
  ("Hampton"),
  ("Harbine"),
  ("Hardy"),
  ("Harrisburg"),
  ("Harrison"),
  ("Hartington"),
  ("Harvard"),
  ("Hastings"),
  ("Hayes Center"),
  ("Hay Springs"),
  ("Hazard"),
  ("Heartwell"),
  ("Hebron"),
  ("Hemingford"),
  ("Henderson"),
  ("Hendley"),
  ("Henry"),
  ("Herman"),
  ("Hershey"),
  ("Hickman"),
  ("Hildreth"),
  ("Holbrook"),
  ("Holdrege"),
  ("Holstein"),
  ("Homer"),
  ("Hooper"),
  ("Hordville"),
  ("Hoskins"),
  ("Howard City"),
  ("Howells"),
  ("Hubbard"),
  ("Hubbell"),
  ("Humboldt"),
  ("Humphrey"),
  ("Huntley"),
  ("Hyannis"),
  ("Imperial"),
  ("Indianola"),
  ("Inglewood"),
  ("Inman"),
  ("Ithaca"),
  ("Jackson"),
  ("Jansen"),
  ("Johnson"),
  ("Johnstown"),
  ("Julian"),
  ("Juniata"),
  ("Kearney"),
  ("Kenesaw"),
  ("Kennard"),
  ("Kilgore"),
  ("Kimball"),
  ("Lamar"),
  ("Laurel"),
  ("La Vista"),
  ("Lawrence"),
  ("Lebanon"),
  ("Leigh"),
  ("Leshara"),
  ("Lewellen"),
  ("Lewiston"),
  ("Lexington"),
  ("Liberty"),
  ("Lincoln"),
  ("Lindsay"),
  ("Linwood"),
  ("Litchfield"),
  ("Lodgepole"),
  ("Long Pine"),
  ("Loomis"),
  ("Lorton"),
  ("Louisville"),
  ("Loup City"),
  ("Lushton"),
  ("Lyman"),
  ("Lynch"),
  ("Lyons"),
  ("McCook"),
  ("McCool Junction"),
  ("McGrew"),
  ("McLean"),
  ("Macy"),
  ("Madison"),
  ("Madrid"),
  ("Magnet"),
  ("Malcolm"),
  ("Malmo"),
  ("Manley"),
  ("Marquette"),
  ("Martinsburg"),
  ("Maskell"),
  ("Mason City"),
  ("Maxwell"),
  ("Maywood"),
  ("Mead"),
  ("Meadow Grove"),
  ("Melbeta"),
  ("Memphis"),
  ("Merna"),
  ("Merriman"),
  ("Milford"),
  ("Miller"),
  ("Milligan"),
  ("Minatare"),
  ("Minden"),
  ("Mitchell"),
  ("Monowi"),
  ("Monroe"),
  ("Moorefield"),
  ("Morrill"),
  ("Morse Bluff"),
  ("Mullen"),
  ("Murdock"),
  ("Murray"),
  ("Naper"),
  ("Naponee"),
  ("Nebraska City"),
  ("Nehawka"),
  ("Neligh"),
  ("Nelson"),
  ("Nemaha"),
  ("Nenzel"),
  ("Newcastle"),
  ("Newman Grove"),
  ("Newport"),
  ("Nickerson"),
  ("Niobrara"),
  ("Nora"),
  ("Norfolk"),
  ("Norman"),
  ("North Bend"),
  ("North Loup"),
  ("North Platte"),
  ("Oak"),
  ("Oakdale"),
  ("Oakland"),
  ("Obert"),
  ("Oconto"),
  ("Octavia"),
  ("Odell"),
  ("Offutt AFB"),
  ("Ogallala"),
  ("Ohiowa"),
  ("Omaha"),
  ("O'Neill"),
  ("Ong"),
  ("Orchard"),
  ("Ord"),
  ("Orleans"),
  ("Osceola"),
  ("Oshkosh"),
  ("Osmond"),
  ("Otoe"),
  ("Overton"),
  ("Oxford"),
  ("Page"),
  ("Palisade"),
  ("Palmer"),
  ("Palmyra"),
  ("Panama"),
  ("Papillion"),
  ("Pawnee City"),
  ("Paxton"),
  ("Pender"),
  ("Peru"),
  ("Petersburg"),
  ("Phillips"),
  ("Pickrell"),
  ("Pierce"),
  ("Pilger"),
  ("Pine Ridge"),
  ("Plainview"),
  ("Platte Center"),
  ("Plattsmouth"),
  ("Pleasant Dale"),
  ("Pleasanton"),
  ("Plymouth"),
  ("Polk"),
  ("Ponca"),
  ("Potter"),
  ("Prague"),
  ("Preston"),
  ("Primrose"),
  ("Prosser"),
  ("Ragan"),
  ("Ralston"),
  ("Randolph"),
  ("Ravenna"),
  ("Raymond"),
  ("Red Cloud"),
  ("Republican City"),
  ("Reynolds"),
  ("Richland"),
  ("Rising City"),
  ("Riverdale"),
  ("Riverton"),
  ("Roca"),
  ("Rockville"),
  ("Rogers"),
  ("Rosalie"),
  ("Roseland"),
  ("Royal"),
  ("Rulo"),
  ("Rushville"),
  ("Ruskin"),
  ("St. Edward"),
  ("St. Helena"),
  ("St. Paul"),
  ("Salem"),
  ("Santee"),
  ("Sargent"),
  ("Saronville"),
  ("Schuyler"),
  ("Scotia"),
  ("Scottsbluff"),
  ("Scribner"),
  ("Seneca"),
  ("Seward"),
  ("Shelby"),
  ("Shelton"),
  ("Shickley"),
  ("Sholes"),
  ("Shubert"),
  ("Sidney"),
  ("Silver Creek"),
  ("Smithfield"),
  ("Snyder"),
  ("South Bend"),
  ("South Sioux City"),
  ("Spalding"),
  ("Spencer"),
  ("Sprague"),
  ("Springfield"),
  ("Springview"),
  ("Stamford"),
  ("Stanton"),
  ("Staplehurst"),
  ("Stapleton"),
  ("Steele City"),
  ("Steinauer"),
  ("Stella"),
  ("Sterling"),
  ("Stockham"),
  ("Stockville"),
  ("Strang"),
  ("Stratton"),
  ("Stromsburg"),
  ("Stuart"),
  ("Sumner"),
  ("Superior"),
  ("Surprise"),
  ("Sutherland"),
  ("Sutton"),
  ("Swanton"),
  ("Syracuse"),
  ("Table Rock"),
  ("Talmage"),
  ("Tarnov"),
  ("Taylor"),
  ("Tecumseh"),
  ("Tekamah"),
  ("Terrytown"),
  ("Thayer"),
  ("Thedford"),
  ("Thurston"),
  ("Tilden"),
  ("Tobias"),
  ("Trenton"),
  ("Trumbull"),
  ("Uehling"),
  ("Ulysses"),
  ("Unadilla"),
  ("Union"),
  ("Upland"),
  ("Utica"),
  ("Valentine"),
  ("Valley"),
  ("Valparaiso"),
  ("Venango"),
  ("Verdel"),
  ("Verdigre"),
  ("Verdon"),
  ("Virginia"),
  ("Waco"),
  ("Wahoo"),
  ("Wakefield"),
  ("Wallace"),
  ("Walthill"),
  ("Washington"),
  ("Waterbury"),
  ("Waterloo"),
  ("Wauneta"),
  ("Wausa"),
  ("Waverly"),
  ("Wayne"),
  ("Weeping Water"),
  ("Wellfleet"),
  ("Western"),
  ("Weston"),
  ("West Point"),
  ("Whitney"),
  ("Wilber"),
  ("Wilcox"),
  ("Wilsonville"),
  ("Winnebago"),
  ("Winnetoon"),
  ("Winside"),
  ("Winslow"),
  ("Wisner"),
  ("Wolbach"),
  ("Wood Lake"),
  ("Wood River"),
  ("Wymore"),
  ("Wynot"),
  ("York"),
  ("Yutan"),
  ("Battle Mountain"),
  ("Beatty"),
  ("Blue Diamond"),
  ("Boulder City"),
  ("Bunkerville"),
  ("Caliente"),
  ("Cal-Nev-Ari"),
  ("Carlin"),
  ("Carson City"),
  ("Cold Springs"),
  ("Dayton"),
  ("Elko"),
  ("Ely"),
  ("Enterprise"),
  ("Fallon"),
  ("Fallon Station"),
  ("Fernley"),
  ("Gabbs"),
  ("Gardnerville"),
  ("Gardnerville Ranchos"),
  ("Gerlach-Empire"),
  ("Goodsprings"),
  ("Hawthorne"),
  ("Henderson"),
  ("Incline Village-Crystal Bay"),
  ("Indian Hills"),
  ("Indian Springs"),
  ("Johnson Lane"),
  ("Kingsbury"),
  ("Las Vegas"),
  ("Laughlin"),
  ("Lemmon Valley-Golden Valley"),
  ("Lovelock"),
  ("McDermitt"),
  ("McGill"),
  ("Mesquite"),
  ("Minden"),
  ("Moapa Town"),
  ("Moapa Valley"),
  ("Mount Charleston"),
  ("Nellis AFB"),
  ("Nixon"),
  ("North Las Vegas"),
  ("Owyhee"),
  ("Pahrump"),
  ("Paradise"),
  ("Reno"),
  ("Sandy Valley"),
  ("Schurz"),
  ("Searchlight"),
  ("Silver Springs"),
  ("Smith Valley"),
  ("Spanish Springs"),
  ("Sparks"),
  ("Spring Creek"),
  ("Spring Valley"),
  ("Stateline"),
  ("Summerlin South"),
  ("Sunrise Manor"),
  ("Sun Valley"),
  ("Sutcliffe"),
  ("Tonopah"),
  ("Verdi-Mogul"),
  ("Wadsworth"),
  ("Wells"),
  ("West Wendover"),
  ("Whitney"),
  ("Winchester"),
  ("Winnemucca"),
  ("Yerington"),
  ("Zephyr Cove-Round Hill Village"),
  ("Antrim"),
  ("Berlin"),
  ("Bristol"),
  ("Charlestown"),
  ("Claremont"),
  ("Concord"),
  ("Contoocook"),
  ("Conway"),
  ("Derry"),
  ("Dover"),
  ("Durham"),
  ("East Merrimack"),
  ("Enfield"),
  ("Epping"),
  ("Exeter"),
  ("Farmington"),
  ("Franklin"),
  ("Gorham"),
  ("Greenville"),
  ("Groveton"),
  ("Hampton"),
  ("Hanover"),
  ("Henniker"),
  ("Hills"),
  ("Hinsdale"),
  ("Hooksett"),
  ("Hudson"),
  ("Jaffrey"),
  ("Keene"),
  ("Laconia"),
  ("Lancaster"),
  ("Lebanon"),
  ("Lisbon"),
  ("Littleton"),
  ("Londonderry"),
  ("Manchester"),
  ("Marl"),
  ("Meredith"),
  ("Milford"),
  ("Nashua"),
  ("Newmarket"),
  ("Newport"),
  ("North Conway"),
  ("Peter"),
  ("Pinardville"),
  ("Pittsfield"),
  ("Plymouth"),
  ("Portsmouth"),
  ("Raymond"),
  ("Rochester"),
  ("Somersworth"),
  ("South Hooksett"),
  ("Suncook"),
  ("Tilton-Northfield"),
  ("West Swanzey"),
  ("Whitefield"),
  ("Wilton"),
  ("Winchester"),
  ("Wolfeboro"),
  ("Woodsville"),
  ("Absecon"),
  ("Allamuchy-Panther Valley"),
  ("Allendale"),
  ("Allenhurst"),
  ("Allentown"),
  ("Allenwood"),
  ("Alloway"),
  ("Alpha"),
  ("Alpine"),
  ("Andover"),
  ("Annandale"),
  ("Asbury Park"),
  ("Ashland"),
  ("Atlantic City"),
  ("Atlantic Highlands"),
  ("Audubon"),
  ("Audubon Park"),
  ("Avalon"),
  ("Avenel"),
  ("Avon-by-the-Sea"),
  ("Barclay-Kingston"),
  ("Barnegat"),
  ("Barnegat Light"),
  ("Barrington"),
  ("Bay Head"),
  ("Bayonne"),
  ("Beach Haven"),
  ("Beach Haven West"),
  ("Beachwood"),
  ("Beatyestown"),
  ("Beckett"),
  ("Belford"),
  ("Belleville"),
  ("Bellmawr"),
  ("Belmar"),
  ("Belvidere"),
  ("Bergenfield"),
  ("Berkeley Heights"),
  ("Berlin"),
  ("Bernardsville"),
  ("Beverly"),
  ("Blackwood"),
  ("Bloomfield"),
  ("Bloomingdale"),
  ("Bloomsbury"),
  ("Bogota"),
  ("Boonton"),
  ("Bordentown"),
  ("Bound Brook"),
  ("Bradley Beach"),
  ("Branchville"),
  ("Brass Castle"),
  ("Bridgeton"),
  ("Brielle"),
  ("Brigantine"),
  ("Brooklawn"),
  ("Browns Mills"),
  ("Brownville"),
  ("Budd Lake"),
  ("Buena"),
  ("Burlington"),
  ("Butler"),
  ("Caldwell"),
  ("Califon"),
  ("Camden"),
  ("Cape May"),
  ("Cape May Court House"),
  ("Cape May Point"),
  ("Carlstadt"),
  ("Carneys Point"),
  ("Carteret"),
  ("Cedar Glen Lakes"),
  ("Cedar Glen West"),
  ("Cedar Grove"),
  ("Cedarville"),
  ("Chatham"),
  ("Cherry Hill Mall"),
  ("Chesilhurst"),
  ("Chester"),
  ("Clark"),
  ("Clayton"),
  ("Clearbrook Park"),
  ("Clementon"),
  ("Cliffside Park"),
  ("Cliffwood Beach"),
  ("Clifton"),
  ("Clinton"),
  ("Closter"),
  ("Collings Lakes"),
  ("Collingswood"),
  ("Colonia"),
  ("Concordia"),
  ("Corbin City"),
  ("Country Lake Estates"),
  ("Cranbury"),
  ("Crandon Lakes"),
  ("Cranford"),
  ("Cresskill"),
  ("Crestwood Village"),
  ("Dayton"),
  ("Deal"),
  ("Demarest"),
  ("Diamond Beach"),
  ("Dover"),
  ("Dover Beaches North"),
  ("Dover Beaches South"),
  ("Dumont"),
  ("Dunellen"),
  ("East Brunswick"),
  ("East Freehold"),
  ("East Newark"),
  ("East Orange"),
  ("East Rutherford"),
  ("Eatontown"),
  ("Echelon"),
  ("Edgewater"),
  ("Edison"),
  ("Egg Harbor City"),
  ("Elizabeth"),
  ("Elmer"),
  ("Elmwood Park"),
  ("Elwood-Magnolia"),
  ("Emerson"),
  ("Englewood"),
  ("Englewood Cliffs"),
  ("Englishtown"),
  ("Erlton-Ellisburg"),
  ("Erma"),
  ("Essex Fells"),
  ("Estell Manor"),
  ("Ewing"),
  ("Fairfield"),
  ("Fair Haven"),
  ("Fair Lawn"),
  ("Fairton"),
  ("Fairview"),
  ("Fairview"),
  ("Fanwood"),
  ("Far Hills"),
  ("Farmingdale"),
  ("Fieldsboro"),
  ("Flemington"),
  ("Florence-Roebling"),
  ("Florham Park"),
  ("Folsom"),
  ("Fords"),
  ("Forked River"),
  ("Fort Dix"),
  ("Fort Lee"),
  ("Franklin"),
  ("Franklin Lakes"),
  ("Freehold"),
  ("Frenchtown"),
  ("Garfield"),
  ("Garwood"),
  ("Gibbsboro"),
  ("Gibbstown"),
  ("Glassboro"),
  ("Glendora"),
  ("Glen Gardner"),
  ("Glen Ridge"),
  ("Glen Rock"),
  ("Gloucester City"),
  ("Golden Triangle"),
  ("Great Meadows-Vienna"),
  ("Greentree"),
  ("Guttenberg"),
  ("Hackensack"),
  ("Hackettstown"),
  ("Haddonfield"),
  ("Haddon Heights"),
  ("Haledon"),
  ("Hamburg"),
  ("Hammonton"),
  ("Hampton"),
  ("Harrington Park"),
  ("Harrison"),
  ("Harvey Cedars"),
  ("Hasbrouck Heights"),
  ("Haworth"),
  ("Hawthorne"),
  ("Heathcote"),
  ("Helmetta"),
  ("High Bridge"),
  ("Highland Lake"),
  ("Highland Park"),
  ("Highlands"),
  ("Hightstown"),
  ("Hillsdale"),
  ("Hillside"),
  ("Hi-Nella"),
  ("Hoboken"),
  ("Ho-Ho-Kus"),
  ("Holiday City-Berkeley"),
  ("Holiday City South"),
  ("Holiday Heights"),
  ("Hopatcong"),
  ("Hopewell"),
  ("Interlaken"),
  ("Irvington"),
  ("Iselin"),
  ("Island Heights"),
  ("Jamesburg"),
  ("Jersey City"),
  ("Keansburg"),
  ("Kearny"),
  ("Kendall Park"),
  ("Kenilworth"),
  ("Keyport"),
  ("Kingston"),
  ("Kinnelon"),
  ("Lakehurst"),
  ("Lake Mohawk"),
  ("Lake Telemark"),
  ("Lakewood"),
  ("Lambertville"),
  ("Laurel Lake"),
  ("Laurel Springs"),
  ("Laurence Harbor"),
  ("Lavallette"),
  ("Lawnside"),
  ("Lawrenceville"),
  ("Lebanon"),
  ("Leisure Knoll"),
  ("Leisuretowne"),
  ("Leisure Village"),
  ("Leisure Village East"),
  ("Leisure Village West-Pine Lake Park"),
  ("Leonardo"),
  ("Leonia"),
  ("Lincoln Park"),
  ("Lincroft"),
  ("Linden"),
  ("Lindenwold"),
  ("Linwood"),
  ("Little Falls"),
  ("Little Ferry"),
  ("Little Silver"),
  ("Livingston"),
  ("Loch Arbour"),
  ("Lodi"),
  ("Long Branch"),
  ("Longport"),
  ("Long Valley"),
  ("Lyndhurst"),
  ("McGuire AFB"),
  ("Madison"),
  ("Madison Park"),
  ("Magnolia"),
  ("Manahawkin"),
  ("Manasquan"),
  ("Mantoloking"),
  ("Manville"),
  ("Maplewood"),
  ("Margate City"),
  ("Marlton"),
  ("Matawan"),
  ("Mays Landing"),
  ("Maywood"),
  ("Medford Lakes"),
  ("Mendham"),
  ("Mercerville-Hamilton Square"),
  ("Merchantville"),
  ("Metuchen"),
  ("Middlesex"),
  ("Midland Park"),
  ("Milford"),
  ("Millburn"),
  ("Millstone"),
  ("Milltown"),
  ("Millville"),
  ("Monmouth Beach"),
  ("Monmouth Junction"),
  ("Montclair"),
  ("Montvale"),
  ("Moonachie"),
  ("Moorestown-Lenola"),
  ("Morganville"),
  ("Morris Plains"),
  ("Morristown"),
  ("Mountain Lakes"),
  ("Mountainside"),
  ("Mount Arlington"),
  ("Mount Ephraim"),
  ("Mullica Hill"),
  ("Mystic Island"),
  ("National Park"),
  ("Navesink"),
  ("Neptune City"),
  ("Netcong"),
  ("Newark"),
  ("New Brunswick"),
  ("New Egypt"),
  ("Newfield"),
  ("New Milford"),
  ("New Providence"),
  ("Newton"),
  ("North Arlington"),
  ("North Beach Haven"),
  ("North Brunswick Township"),
  ("North Caldwell"),
  ("North Cape May"),
  ("Northfield"),
  ("North Haledon"),
  ("North Middletown"),
  ("North Plainfield"),
  ("Northvale"),
  ("North Wildwood"),
  ("Norwood"),
  ("Nutley"),
  ("Oakhurst"),
  ("Oakland"),
  ("Oaklyn"),
  ("Oak Valley"),
  ("Ocean Acres"),
  ("Ocean City"),
  ("Ocean Gate"),
  ("Ocean Grove"),
  ("Oceanport"),
  ("Ogdensburg"),
  ("Old Bridge"),
  ("Old Tappan"),
  ("Olivet"),
  ("Oradell"),
  ("Orange"),
  ("Oxford"),
  ("Palisades Park"),
  ("Palmyra"),
  ("Paramus"),
  ("Park Ridge"),
  ("Passaic"),
  ("Paterson"),
  ("Paulsboro"),
  ("Peapack and Gladstone"),
  ("Pemberton"),
  ("Pemberton Heights"),
  ("Pennington"),
  ("Pennsauken"),
  ("Penns Grove"),
  ("Pennsville"),
  ("Perth Amboy"),
  ("Phillipsburg"),
  ("Pine Beach"),
  ("Pine Hill"),
  ("Pine Ridge at Crestwood"),
  ("Pine Valley"),
  ("Pitman"),
  ("Plainfield"),
  ("Plainsboro Center"),
  ("Pleasantville"),
  ("Point Pleasant"),
  ("Point Pleasant Beach"),
  ("Pomona"),
  ("Pompton Lakes"),
  ("Port Monmouth"),
  ("Port Norris"),
  ("Port Reading"),
  ("Port Republic"),
  ("Presidential Lakes Estates"),
  ("Princeton"),
  ("Princeton Junction"),
  ("Princeton Meadows"),
  ("Princeton North"),
  ("Prospect Park"),
  ("Rahway"),
  ("Ramblewood"),
  ("Ramsey"),
  ("Ramtown"),
  ("Raritan"),
  ("Red Bank"),
  ("Ridgefield"),
  ("Ridgefield Park"),
  ("Ridgewood"),
  ("Ringwood"),
  ("Rio Grande"),
  ("Riverdale"),
  ("River Edge"),
  ("Riverton"),
  ("River Vale"),
  ("Rochelle Park"),
  ("Rockaway"),
  ("Rockleigh"),
  ("Rocky Hill"),
  ("Roosevelt"),
  ("Roseland"),
  ("Roselle"),
  ("Roselle Park"),
  ("Rosenhayn"),
  ("Rossmoor"),
  ("Rumson"),
  ("Runnemede"),
  ("Rutherford"),
  ("Saddle Brook"),
  ("Saddle River"),
  ("Salem"),
  ("Sayreville"),
  ("Scotch Plains"),
  ("Sea Bright"),
  ("Seabrook Farms"),
  ("Sea Girt"),
  ("Sea Isle City"),
  ("Seaside Heights"),
  ("Seaside Park"),
  ("Secaucus"),
  ("Sewaren"),
  ("Shark River Hills"),
  ("Shiloh"),
  ("Ship Bottom"),
  ("Shrewsbury"),
  ("Silver Ridge"),
  ("Society Hill"),
  ("Somerdale"),
  ("Somerset"),
  ("Somers Point"),
  ("Somerville"),
  ("South Amboy"),
  ("South Belmar"),
  ("South Bound Brook"),
  ("South Orange"),
  ("South Plainfield"),
  ("South River"),
  ("South Toms River"),
  ("Spotswood"),
  ("Springdale"),
  ("Springfield"),
  ("Spring Lake"),
  ("Spring Lake Heights"),
  ("Stanhope"),
  ("Stockton"),
  ("Stone Harbor"),
  ("Stratford"),
  ("Strathmere"),
  ("Strathmore"),
  ("Succasunna-Kenvil"),
  ("Summit"),
  ("Surf City"),
  ("Sussex"),
  ("Swedesboro"),
  ("Tavistock"),
  ("Teaneck"),
  ("Tenafly"),
  ("Teterboro"),
  ("Tinton Falls"),
  ("Toms River"),
  ("Totowa"),
  ("Trenton"),
  ("Tuckerton"),
  ("Turnersville"),
  ("Twin Rivers"),
  ("Union"),
  ("Union Beach"),
  ("Union City"),
  ("Upper Saddle River"),
  ("Ventnor City"),
  ("Vernon Valley"),
  ("Verona"),
  ("Victory Gardens"),
  ("Victory Lakes"),
  ("Villas"),
  ("Vineland"),
  ("Vista Center"),
  ("Waldwick"),
  ("Wallington"),
  ("Wanamassa"),
  ("Wanaque"),
  ("Waretown"),
  ("Washington"),
  ("Washington Township"),
  ("Watchung"),
  ("Wayne"),
  ("Wenonah"),
  ("West Belmar"),
  ("West Caldwell"),
  ("West Cape May"),
  ("Westfield"),
  ("West Freehold"),
  ("West Long Branch"),
  ("West Milford"),
  ("West New York"),
  ("West Orange"),
  ("West Paterson"),
  ("Westville"),
  ("West Wildwood"),
  ("Westwood"),
  ("Wharton"),
  ("White Horse"),
  ("White House Station"),
  ("White Meadow Lake"),
  ("Whitesboro-Burleigh"),
  ("Whittingham"),
  ("Wildwood"),
  ("Wildwood Crest"),
  ("Williamstown"),
  ("Woodbine"),
  ("Woodbridge"),
  ("Woodbury"),
  ("Woodbury Heights"),
  ("Woodcliff Lake"),
  ("Woodlynne"),
  ("Wood-Ridge"),
  ("Woodstown"),
  ("Wrightstown"),
  ("Wyckoff"),
  ("Yardville-Groveville"),
  ("Yorketown"),
  ("Acomita Lake"),
  ("Agua Fria"),
  ("Alamo"),
  ("Alamogordo"),
  ("Albuquerque"),
  ("Alcalde"),
  ("Algodones"),
  ("Angel Fire"),
  ("Anthony"),
  ("Artesia"),
  ("Aztec"),
  ("Bayard"),
  ("Beclabito"),
  ("Belen"),
  ("Bernalillo"),
  ("Black Rock"),
  ("Bloomfield"),
  ("Boles Acres"),
  ("Bosque Farms"),
  ("Brimhall Nizhoni"),
  ("Canada de los Alamos"),
  ("Cannon AFB"),
  ("Capitan"),
  ("Carlsbad"),
  ("Carlsbad North"),
  ("Carnuel"),
  ("Carrizozo"),
  ("Casa Colorada"),
  ("Causey"),
  ("Cedar Crest"),
  ("Cedar Grove"),
  ("Chama"),
  ("Chamisal"),
  ("Chaparral"),
  ("Chilili"),
  ("Chimayo"),
  ("Chupadero"),
  ("Church Rock"),
  ("Cimarron"),
  ("Clayton"),
  ("Cloudcroft"),
  ("Clovis"),
  ("Cochiti"),
  ("Columbus"),
  ("Corona"),
  ("Corrales"),
  ("Crownpoint"),
  ("Crystal"),
  ("Cuartelez"),
  ("Cuba"),
  ("Cundiyo"),
  ("Cuyamungue"),
  ("Deming"),
  ("Des Moines"),
  ("Dexter"),
  ("Dona Ana"),
  ("Dora"),
  ("Dulce"),
  ("Eagle Nest"),
  ("Edgewood"),
  ("El Cerro-Monterey Park"),
  ("Eldorado at Santa Fe"),
  ("Elephant Butte"),
  ("Elida"),
  ("El Rancho"),
  ("El Valle de Arroyo Seco"),
  ("Encinal"),
  ("Encino"),
  ("Espanola"),
  ("Estancia"),
  ("Eunice"),
  ("Farmington"),
  ("Flora Vista"),
  ("Floyd"),
  ("Folsom"),
  ("Fort Sumner"),
  ("Galisteo"),
  ("Gallup"),
  ("Glorieta"),
  ("Grady"),
  ("Grants"),
  ("Grenville"),
  ("Hagerman"),
  ("Hatch"),
  ("Hobbs"),
  ("Holloman AFB"),
  ("Hope"),
  ("House"),
  ("Huerfano"),
  ("Hurley"),
  ("Isleta Village Proper"),
  ("Jaconita"),
  ("Jal"),
  ("Jarales"),
  ("Jemez Pueblo"),
  ("Jemez Springs"),
  ("Kirtland"),
  ("La Cienega"),
  ("Laguna"),
  ("La Jara"),
  ("Lake Arthur"),
  ("Lake Sumner"),
  ("La Luz"),
  ("Lamy"),
  ("La Puebla"),
  ("Las Cruces"),
  ("Las Vegas"),
  ("Logan"),
  ("Lordsburg"),
  ("Los Alamos"),
  ("Los Cerrillos"),
  ("Los Chaves"),
  ("Los Lunas"),
  ("Los Ranchos de Albuquerque"),
  ("Los Trujillos-Gabaldon"),
  ("Loving"),
  ("Lovington"),
  ("Madrid"),
  ("Magdalena"),
  ("Manzano"),
  ("Maxwell"),
  ("Meadow Lake"),
  ("Melrose"),
  ("Mescalero"),
  ("Mesilla"),
  ("Mesita"),
  ("Mesquite"),
  ("Milan"),
  ("Moriarty"),
  ("Mosquero"),
  ("Mountainair"),
  ("Nageezi"),
  ("Nakaibito"),
  ("Napi HQ"),
  ("Naschitti"),
  ("Navajo"),
  ("Nenahnezad"),
  ("Newcomb"),
  ("North Acomita Village"),
  ("North Valley"),
  ("Ojo Amarillo"),
  ("Paguate"),
  ("Paraje"),
  ("Pecos"),
  ("Pena Blanca"),
  ("Penasco"),
  ("Peralta"),
  ("Picuris Pueblo"),
  ("Pinehill"),
  ("Placitas"),
  ("Pojoaque"),
  ("Ponderosa"),
  ("Portales"),
  ("Pueblo of Sandia Village"),
  ("Pueblo Pintado"),
  ("Questa"),
  ("Radium Springs"),
  ("Ramah"),
  ("Ranchos de Taos"),
  ("Raton"),
  ("Red River"),
  ("Regina"),
  ("Reserve"),
  ("Rincon"),
  ("Rio Chiquito"),
  ("Rio Communities"),
  ("Rio Communities North"),
  ("Rio en Medio"),
  ("Rio Lucio"),
  ("Rio Rancho"),
  ("Rock Springs"),
  ("Roswell"),
  ("Roy"),
  ("Ruidoso"),
  ("Ruidoso Downs"),
  ("Salem"),
  ("San Felipe Pueblo"),
  ("San Ildefonso Pueblo"),
  ("San Jon"),
  ("San Juan"),
  ("Sanostee"),
  ("Santa Ana Pueblo"),
  ("Santa Clara"),
  ("Santa Clara Pueblo"),
  ("Santa Cruz"),
  ("Santa Fe"),
  ("Santa Rosa"),
  ("Santa Teresa"),
  ("Santo Domingo Pueblo"),
  ("San Ysidro"),
  ("Seama"),
  ("Sheep Springs"),
  ("Shiprock"),
  ("Silver City"),
  ("Skyline-Ganipa"),
  ("Socorro"),
  ("Sombrillo"),
  ("South Valley"),
  ("Springer"),
  ("Sunland Park"),
  ("Tajique"),
  ("Taos"),
  ("Taos Pueblo"),
  ("Taos Ski Valley"),
  ("Tatum"),
  ("Tesuque"),
  ("Texico"),
  ("Thoreau"),
  ("Tijeras"),
  ("Timberon"),
  ("Tohatchi"),
  ("Tome-Adelino"),
  ("Torreon"),
  ("Torreon"),
  ("Truth or Consequences"),
  ("Tse Bonito"),
  ("Tucumcari"),
  ("Tularosa"),
  ("Twin Lakes"),
  ("University Park"),
  ("Upper Fruitland"),
  ("Vadito"),
  ("Vado"),
  ("Valencia"),
  ("Vaughn"),
  ("Virden"),
  ("Wagon Mound"),
  ("White Rock"),
  ("White Sands"),
  ("Willard"),
  ("Williamsburg"),
  ("Yah-ta-hey"),
  ("Zia Pueblo"),
  ("Zuni Pueblo"),
  ("Accord"),
  ("Adams"),
  ("Adams Center"),
  ("Addison"),
  ("Afton"),
  ("Airmont"),
  ("Akron"),
  ("Albany"),
  ("Albertson"),
  ("Albion"),
  ("Alden"),
  ("Alexander"),
  ("Alexandria Bay"),
  ("Alfred"),
  ("Allegany"),
  ("Almond"),
  ("Altamont"),
  ("Altmar"),
  ("Altona"),
  ("Amagansett"),
  ("Amenia"),
  ("Ames"),
  ("Amityville"),
  ("Amsterdam"),
  ("Andes"),
  ("Andover"),
  ("Angelica"),
  ("Angola"),
  ("Angola on the Lake"),
  ("Antwerp"),
  ("Apalachin"),
  ("Aquebogue"),
  ("Arcade"),
  ("Ardsley"),
  ("Argyle"),
  ("Arkport"),
  ("Arlington"),
  ("Armonk"),
  ("Asharoken"),
  ("Athens"),
  ("Atlantic Beach"),
  ("Attica"),
  ("Auburn"),
  ("Aurora"),
  ("Au Sable Forks"),
  ("Averill Park"),
  ("Avoca"),
  ("Avon"),
  ("Babylon"),
  ("Bainbridge"),
  ("Baiting Hollow"),
  ("Baldwin"),
  ("Baldwin Harbor"),
  ("Baldwinsville"),
  ("Ballston Spa"),
  ("Balmville"),
  ("Bardonia"),
  ("Barker"),
  ("Barneveld"),
  ("Barnum Island"),
  ("Batavia"),
  ("Bath"),
  ("Baxter Estates"),
  ("Bay Park"),
  ("Bayport"),
  ("Bay Shore"),
  ("Bayville"),
  ("Baywood"),
  ("Beacon"),
  ("Beaverdam Lake-Salisbury Mills"),
  ("Bedford"),
  ("Bellerose"),
  ("Bellerose Terrace"),
  ("Belle Terre"),
  ("Bellmore"),
  ("Bellport"),
  ("Belmont"),
  ("Bemus Point"),
  ("Bergen"),
  ("Bethpage"),
  ("Big Flats"),
  ("Big Flats Airport"),
  ("Billington Heights"),
  ("Binghamton"),
  ("Black River"),
  ("Blasdell"),
  ("Blauvelt"),
  ("Bloomfield"),
  ("Bloomingburg"),
  ("Blue Point"),
  ("Bohemia"),
  ("Bolivar"),
  ("Boonville"),
  ("Brasher Falls-Winthrop"),
  ("Brentwood"),
  ("Brewerton"),
  ("Brewster"),
  ("Brewster Hill"),
  ("Briarcliff Manor"),
  ("Bridgehampton"),
  ("Bridgeport"),
  ("Bridgewater"),
  ("Brighton"),
  ("Brightwaters"),
  ("Brinckerhoff"),
  ("Broadalbin"),
  ("Brockport"),
  ("Brocton"),
  ("Bronxville"),
  ("Brookhaven"),
  ("Brookville"),
  ("Brownville"),
  ("Brushton"),
  ("Buchanan"),
  ("Buffalo"),
  ("Burdett"),
  ("Burke"),
  ("Cairo"),
  ("Calcium"),
  ("Caledonia"),
  ("Callicoon"),
  ("Calverton"),
  ("Cambridge"),
  ("Camden"),
  ("Camillus"),
  ("Canajoharie"),
  ("Canandaigua"),
  ("Canaseraga"),
  ("Canastota"),
  ("Candor"),
  ("Canisteo"),
  ("Canton"),
  ("Cape Vincent"),
  ("Carle Place"),
  ("Carmel Hamlet"),
  ("Carthage"),
  ("Cassadaga"),
  ("Castile"),
  ("Castleton-on-Hudson"),
  ("Castorland"),
  ("Cato"),
  ("Catskill"),
  ("Cattaraugus"),
  ("Cayuga"),
  ("Cayuga Heights"),
  ("Cazenovia"),
  ("Cedarhurst"),
  ("Celoron"),
  ("Centereach"),
  ("Center Moriches"),
  ("Centerport"),
  ("Central Islip"),
  ("Central Square"),
  ("Central Valley"),
  ("Centre Island"),
  ("Champlain"),
  ("Chappaqua"),
  ("Chateaugay"),
  ("Chatham"),
  ("Chaumont"),
  ("Cheektowaga"),
  ("Cherry Creek"),
  ("Cherry Valley"),
  ("Chester"),
  ("Chestnut Ridge"),
  ("Chittenango"),
  ("Churchville"),
  ("Clarence Center"),
  ("Clark Mills"),
  ("Claverack-Red Mills"),
  ("Clayton"),
  ("Clayville"),
  ("Cleveland"),
  ("Clifton Springs"),
  ("Clinton"),
  ("Clintondale"),
  ("Clyde"),
  ("Cobleskill"),
  ("Coeymans"),
  ("Cohocton"),
  ("Cohoes"),
  ("Cold Brook"),
  ("Cold Spring"),
  ("Cold Spring Harbor"),
  ("Colonie"),
  ("Commack"),
  ("Congers"),
  ("Constableville"),
  ("Constantia"),
  ("Cooperstown"),
  ("Copake Lake"),
  ("Copenhagen"),
  ("Copiague"),
  ("Coram"),
  ("Corfu"),
  ("Corinth"),
  ("Corning"),
  ("Cornwall on Hudson"),
  ("Cortland"),
  ("Cortland West"),
  ("Country Knolls"),
  ("Cove Neck"),
  ("Coxsackie"),
  ("Cragsmoor"),
  ("Croghan"),
  ("Crompond"),
  ("Croton-on-Hudson"),
  ("Crown Heights"),
  ("Crugers"),
  ("Cuba"),
  ("Cumberland Head"),
  ("Cutchogue"),
  ("Dannemora"),
  ("Dansville"),
  ("Deer Park"),
  ("Deferiet"),
  ("Delanson"),
  ("Delevan"),
  ("Delhi"),
  ("Delmar"),
  ("Depauville"),
  ("Depew"),
  ("Deposit"),
  ("Dering Harbor"),
  ("DeRuyter"),
  ("Dexter"),
  ("Dix Hills"),
  ("Dobbs Ferry"),
  ("Dolgeville"),
  ("Dover Plains"),
  ("Dresden"),
  ("Dryden"),
  ("Duane Lake"),
  ("Duanesburg"),
  ("Dundee"),
  ("Dunkirk"),
  ("Earlville"),
  ("East Atlantic Beach"),
  ("East Aurora"),
  ("Eastchester"),
  ("East Farmingdale"),
  ("East Garden City"),
  ("East Glenville"),
  ("East Greenbush"),
  ("East Hampton"),
  ("East Hampton North"),
  ("East Hills"),
  ("East Islip"),
  ("East Ithaca"),
  ("East Kingston"),
  ("East Marion"),
  ("East Massapequa"),
  ("East Meadow"),
  ("East Moriches"),
  ("East Nassau"),
  ("East Northport"),
  ("East Norwich"),
  ("East Patchogue"),
  ("Eastport"),
  ("East Quogue"),
  ("East Randolph"),
  ("East Rochester"),
  ("East Rockaway"),
  ("East Shoreham"),
  ("East Syracuse"),
  ("East Williston"),
  ("Eatons Neck"),
  ("Eden"),
  ("Edwards"),
  ("Elba"),
  ("Elbridge"),
  ("Ellenville"),
  ("Ellicottville"),
  ("Ellisburg"),
  ("Elma Center"),
  ("Elmira"),
  ("Elmira Heights"),
  ("Elmont"),
  ("Elmsford"),
  ("Elwood"),
  ("Endicott"),
  ("Endwell"),
  ("Esperance"),
  ("Evans Mills"),
  ("Fabius"),
  ("Fair Haven"),
  ("Fairmount"),
  ("Fairport"),
  ("Fairview"),
  ("Fairview"),
  ("Falconer"),
  ("Farmingdale"),
  ("Farmingville"),
  ("Farnham"),
  ("Fayetteville"),
  ("Fire Island"),
  ("Firthcliffe"),
  ("Fishers Island"),
  ("Fishkill"),
  ("Flanders"),
  ("Fleischmanns"),
  ("Floral Park"),
  ("Florida"),
  ("Flower Hill"),
  ("Fonda"),
  ("Forest Home"),
  ("Forestville"),
  ("Fort Ann"),
  ("Fort Drum"),
  ("Fort Edward"),
  ("Fort Johnson"),
  ("Fort Montgomery"),
  ("Fort Plain"),
  ("Fort Salonga"),
  ("Frankfort"),
  ("Franklin"),
  ("Franklin Square"),
  ("Franklinville"),
  ("Fredonia"),
  ("Freeport"),
  ("Freeville"),
  ("Frewsburg"),
  ("Friendship"),
  ("Fulton"),
  ("Fultonville"),
  ("Gainesville"),
  ("Galeville"),
  ("Galway"),
  ("Gang Mills"),
  ("Garden City"),
  ("Garden City Park"),
  ("Garden City South"),
  ("Gardiner"),
  ("Gardnertown"),
  ("Gasport"),
  ("Gates-North Gates"),
  ("Geneseo"),
  ("Geneva"),
  ("Germantown"),
  ("Ghent"),
  ("Gilbertsville"),
  ("Gilgo-Oak Beach-Captree"),
  ("Glasco"),
  ("Glen Cove"),
  ("Glen Head"),
  ("Glen Park"),
  ("Glens Falls"),
  ("Glens Falls North"),
  ("Glenwood Landing"),
  ("Gloversville"),
  ("Golden's Bridge"),
  ("Gordon Heights"),
  ("Goshen"),
  ("Gouverneur"),
  ("Gowanda"),
  ("Grand View-on-Hudson"),
  ("Granville"),
  ("Great Bend"),
  ("Great Neck"),
  ("Great Neck Estates"),
  ("Great Neck Gardens"),
  ("Great Neck Plaza"),
  ("Great River"),
  ("Greece"),
  ("Greene"),
  ("Green Island"),
  ("Greenlawn"),
  ("Greenport"),
  ("Greenport West"),
  ("Greenvale"),
  ("Greenville"),
  ("Greenville"),
  ("Greenwich"),
  ("Greenwood Lake"),
  ("Groton"),
  ("Hagaman"),
  ("Halesite"),
  ("Hamburg"),
  ("Hamilton"),
  ("Hammond"),
  ("Hammondsport"),
  ("Hampton Bays"),
  ("Hampton Manor"),
  ("Hancock"),
  ("Hannibal"),
  ("Harbor Hills"),
  ("Harbor Isle"),
  ("Harriman"),
  ("Harris Hill"),
  ("Harrison"),
  ("Harrisville"),
  ("Hartsdale"),
  ("Hastings-on-Hudson"),
  ("Hauppauge"),
  ("Haverstraw"),
  ("Haviland"),
  ("Hawthorne"),
  ("Head of the Harbor"),
  ("Hempstead"),
  ("Heritage Hills"),
  ("Herkimer"),
  ("Hermon"),
  ("Herricks"),
  ("Herrings"),
  ("Heuvelton"),
  ("Hewlett"),
  ("Hewlett Bay Park"),
  ("Hewlett Harbor"),
  ("Hewlett Neck"),
  ("Hicksville"),
  ("High Falls"),
  ("Highland"),
  ("Highland Falls"),
  ("Highland Mills"),
  ("Hillburn"),
  ("Hillcrest"),
  ("Hillside"),
  ("Hillside Lake"),
  ("Hilton"),
  ("Hobart"),
  ("Holbrook"),
  ("Holland"),
  ("Holland Patent"),
  ("Holley"),
  ("Holtsville"),
  ("Homer"),
  ("Honeoye Falls"),
  ("Hoosick Falls"),
  ("Hopewell Junction"),
  ("Hornell"),
  ("Horseheads"),
  ("Horseheads North"),
  ("Houghton"),
  ("Hudson"),
  ("Hudson Falls"),
  ("Hunter"),
  ("Huntington"),
  ("Huntington Bay"),
  ("Huntington Station"),
  ("Hurley"),
  ("Ilion"),
  ("Interlaken"),
  ("Inwood"),
  ("Irondequoit"),
  ("Irvington"),
  ("Islandia"),
  ("Island Park"),
  ("Islip"),
  ("Islip Terrace"),
  ("Ithaca"),
  ("Jamesport"),
  ("Jamestown"),
  ("Jamestown West"),
  ("Jefferson Heights"),
  ("Jefferson Valley-Yorktown"),
  ("Jeffersonville"),
  ("Jericho"),
  ("Johnson City"),
  ("Johnstown"),
  ("Jordan"),
  ("Kaser"),
  ("Keeseville"),
  ("Kenmore"),
  ("Kensington"),
  ("Kerhonkson"),
  ("Kinderhook"),
  ("Kings Park"),
  ("Kings Point"),
  ("Kingston"),
  ("Kiryas Joel"),
  ("Lackawanna"),
  ("Lacona"),
  ("La Fargeville"),
  ("Lake Carmel"),
  ("Lake Erie Beach"),
  ("Lake George"),
  ("Lake Grove"),
  ("Lake Katrine"),
  ("Lakeland"),
  ("Lake Luzerne-Hadley"),
  ("Lake Mohegan"),
  ("Lake Placid"),
  ("Lake Ronkonkoma"),
  ("Lake Success"),
  ("Lakeview"),
  ("Lakewood"),
  ("Lancaster"),
  ("Lansing"),
  ("Larchmont"),
  ("Lattingtown"),
  ("Laurel"),
  ("Laurel Hollow"),
  ("Laurens"),
  ("Lawrence"),
  ("Leeds"),
  ("Leicester"),
  ("Le Roy"),
  ("Levittown"),
  ("Lewiston"),
  ("Liberty"),
  ("Lido Beach"),
  ("Lima"),
  ("Lime Lake-Machias"),
  ("Limestone"),
  ("Lincolndale"),
  ("Lincoln Park"),
  ("Lindenhurst"),
  ("Lisle"),
  ("Little Falls"),
  ("Little Valley"),
  ("Liverpool"),
  ("Livingston Manor"),
  ("Livonia"),
  ("Lloyd Harbor"),
  ("Lockport"),
  ("Locust Valley"),
  ("Lodi"),
  ("Long Beach"),
  ("Lorenz Park"),
  ("Lowville"),
  ("Lynbrook"),
  ("Lyncourt"),
  ("Lyndonville"),
  ("Lyon Mountain"),
  ("Lyons"),
  ("Lyons Falls"),
  ("Macedon"),
  ("McGraw"),
  ("Madison"),
  ("Mahopac"),
  ("Malden"),
  ("Malone"),
  ("Malverne"),
  ("Malverne Park Oaks"),
  ("Mamaroneck"),
  ("Manchester"),
  ("Manhasset"),
  ("Manhasset Hills"),
  ("Manlius"),
  ("Mannsville"),
  ("Manorhaven"),
  ("Manorville"),
  ("Marathon"),
  ("Marcellus"),
  ("Margaretville"),
  ("Mariaville Lake"),
  ("Marlboro"),
  ("Massapequa"),
  ("Massapequa Park"),
  ("Massena"),
  ("Mastic"),
  ("Mastic Beach"),
  ("Matinecock"),
  ("Mattituck"),
  ("Mattydale"),
  ("Maybrook"),
  ("Mayfield"),
  ("Mayville"),
  ("Mechanicstown"),
  ("Mechanicville"),
  ("Medford"),
  ("Medina"),
  ("Medusa"),
  ("Melrose Park"),
  ("Melville"),
  ("Menands"),
  ("Meridian"),
  ("Merrick"),
  ("Mexico"),
  ("Middleburgh"),
  ("Middle Island"),
  ("Middleport"),
  ("Middletown"),
  ("Middleville"),
  ("Milford"),
  ("Millbrook"),
  ("Miller Place"),
  ("Millerton"),
  ("Mill Neck"),
  ("Millport"),
  ("Milton"),
  ("Milton"),
  ("Mineola"),
  ("Minetto"),
  ("Mineville-Witherbee"),
  ("Minoa"),
  ("Mohawk"),
  ("Monroe"),
  ("Monsey"),
  ("Montauk"),
  ("Montebello"),
  ("Montgomery"),
  ("Monticello"),
  ("Montour Falls"),
  ("Mooers"),
  ("Moravia"),
  ("Moriches"),
  ("Morris"),
  ("Morrisonville"),
  ("Morristown"),
  ("Morrisville"),
  ("Mount Ivy"),
  ("Mount Kisco"),
  ("Mount Morris"),
  ("Mount Sinai"),
  ("Mount Vernon"),
  ("Munnsville"),
  ("Munsey Park"),
  ("Munsons Corners"),
  ("Muttontown"),
  ("Myers Corner"),
  ("Nanuet"),
  ("Napanoch"),
  ("Napeague"),
  ("Naples"),
  ("Narrowsburg"),
  ("Nassau"),
  ("Natural Bridge"),
  ("Nedrow"),
  ("Nelliston"),
  ("Nelsonville"),
  ("Nesconset"),
  ("Newark"),
  ("Newark Valley"),
  ("New Berlin"),
  ("Newburgh"),
  ("New Cassel"),
  ("New City"),
  ("Newfane"),
  ("Newfield Hamlet"),
  ("New Hartford"),
  ("New Hempstead"),
  ("New Hyde Park"),
  ("New Paltz"),
  ("Newport"),
  ("New Rochelle"),
  ("New Square"),
  ("New Suffolk"),
  ("New Windsor"),
  ("New York"),
  ("New York Mills"),
  ("Niagara Falls"),
  ("Nichols"),
  ("Niskayuna"),
  ("Nissequogue"),
  ("Niverville"),
  ("Norfolk"),
  ("North Amityville"),
  ("Northampton"),
  ("North Babylon"),
  ("North Ballston Spa"),
  ("North Bay Shore"),
  ("North Bellmore"),
  ("North Bellport"),
  ("North Boston"),
  ("North Collins"),
  ("Northeast Ithaca"),
  ("North Great River"),
  ("North Haven"),
  ("North Hills"),
  ("North Hornell"),
  ("North Lindenhurst"),
  ("North Lynbrook"),
  ("North Massapequa"),
  ("North Merrick"),
  ("North New Hyde Park"),
  ("North Patchogue"),
  ("Northport"),
  ("North Sea"),
  ("North Syracuse"),
  ("North Tonawanda"),
  ("North Valley Stream"),
  ("Northville"),
  ("Northville"),
  ("North Wantagh"),
  ("Northwest Harbor"),
  ("Northwest Ithaca"),
  ("Norwich"),
  ("Norwood"),
  ("Noyack"),
  ("Nunda"),
  ("Nyack"),
  ("Oakdale"),
  ("Oakfield"),
  ("Ocean Beach"),
  ("Oceanside"),
  ("Odessa"),
  ("Ogdensburg"),
  ("Olcott"),
  ("Old Bethpage"),
  ("Old Brookville"),
  ("Old Field"),
  ("Old Westbury"),
  ("Olean"),
  ("Oneida"),
  ("Oneida Castle"),
  ("Oneonta"),
  ("Orangeburg"),
  ("Orange Lake"),
  ("Orchard Park"),
  ("Orient"),
  ("Oriskany"),
  ("Oriskany Falls"),
  ("Ossining"),
  ("Oswego"),
  ("Otego"),
  ("Otisville"),
  ("Ovid"),
  ("Owego"),
  ("Oxford"),
  ("Oyster Bay"),
  ("Oyster Bay Cove"),
  ("Painted Post"),
  ("Palatine Bridge"),
  ("Palenville"),
  ("Palmyra"),
  ("Panama"),
  ("Parc"),
  ("Parish"),
  ("Patchogue"),
  ("Pattersonville-Rotterdam Junction"),
  ("Pawling"),
  ("Peach Lake"),
  ("Pearl River"),
  ("Peconic"),
  ("Peekskill"),
  ("Pelham"),
  ("Pelham Manor"),
  ("Penn Yan"),
  ("Perry"),
  ("Perrysburg"),
  ("Peru"),
  ("Phelps"),
  ("Philadelphia"),
  ("Philmont"),
  ("Phoenicia"),
  ("Phoenix"),
  ("Piermont"),
  ("Pike"),
  ("Pine Bush"),
  ("Pine Hill"),
  ("Pine Plains"),
  ("Pittsford"),
  ("Plainedge"),
  ("Plainview"),
  ("Plandome"),
  ("Plandome Heights"),
  ("Plandome Manor"),
  ("Plattekill"),
  ("Plattsburgh"),
  ("Plattsburgh West"),
  ("Pleasant Valley"),
  ("Pleasantville"),
  ("Poestenkill"),
  ("Point Lookout"),
  ("Poland"),
  ("Pomona"),
  ("Poquott"),
  ("Port Byron"),
  ("Port Chester"),
  ("Port Dickinson"),
  ("Port Ewen"),
  ("Port Henry"),
  ("Port Jefferson"),
  ("Port Jefferson Station"),
  ("Port Jervis"),
  ("Port Leyden"),
  ("Portville"),
  ("Port Washington"),
  ("Port Washington North"),
  ("Potsdam"),
  ("Poughkeepsie"),
  ("Preston-Potter Hollow"),
  ("Prospect"),
  ("Pulaski"),
  ("Putnam Lake"),
  ("Quioque"),
  ("Quogue"),
  ("Randolph"),
  ("Ransomville"),
  ("Rapids"),
  ("Ravena"),
  ("Red Creek"),
  ("Redford"),
  ("Red Hook"),
  ("Red Oaks Mill"),
  ("Redwood"),
  ("Remsen"),
  ("Remsenburg-Speonk"),
  ("Rensselaer"),
  ("Rensselaer Falls"),
  ("Rhinebeck"),
  ("Richburg"),
  ("Richfield Springs"),
  ("Richmondville"),
  ("Richville"),
  ("Ridge"),
  ("Rifton"),
  ("Ripley"),
  ("Riverhead"),
  ("Riverside"),
  ("Riverside"),
  ("Rochester"),
  ("Rock Hill"),
  ("Rockville Centre"),
  ("Rocky Point"),
  ("Rome"),
  ("Ronkonkoma"),
  ("Roosevelt"),
  ("Roscoe"),
  ("Rosendale Village"),
  ("Roslyn"),
  ("Roslyn Estates"),
  ("Roslyn Harbor"),
  ("Roslyn Heights"),
  ("Rotterdam"),
  ("Round Lake"),
  ("Rouses Point"),
  ("Rushville"),
  ("Russell Gardens"),
  ("Rye"),
  ("Rye Brook"),
  ("Sackets Harbor"),
  ("Saddle Rock"),
  ("Saddle Rock Estates"),
  ("Sagaponack"),
  ("Sag Harbor"),
  ("St. Bonaventure"),
  ("St. James"),
  ("St. Johnsville"),
  ("Salamanca"),
  ("Salem"),
  ("Salisbury"),
  ("Saltaire"),
  ("Sand Ridge"),
  ("Sands Point"),
  ("Sandy Creek"),
  ("Saranac Lake"),
  ("Saratoga Springs"),
  ("Saugerties"),
  ("Saugerties South"),
  ("Savona"),
  ("Sayville"),
  ("Scarsdale"),
  ("Schaghticoke"),
  ("Schenectady"),
  ("Schoharie"),
  ("Schuylerville"),
  ("Scotchtown"),
  ("Scotia"),
  ("Scotts Corners"),
  ("Scottsville"),
  ("Sea Cliff"),
  ("Seaford"),
  ("Searingtown"),
  ("Selden"),
  ("Seneca Falls"),
  ("Seneca Knolls"),
  ("Setauket-East Setauket"),
  ("Sharon Springs"),
  ("Shelter Island"),
  ("Shelter Island Heights"),
  ("Shenorock"),
  ("Sherburne"),
  ("Sherman"),
  ("Sherrill"),
  ("Shinnecock Hills"),
  ("Shirley"),
  ("Shokan"),
  ("Shoreham"),
  ("Shortsville"),
  ("Shrub Oak"),
  ("Sidney"),
  ("Silver Creek"),
  ("Silver Springs"),
  ("Sinclairville"),
  ("Skaneateles"),
  ("Sleepy Hollow"),
  ("Sloan"),
  ("Sloatsburg"),
  ("Smallwood"),
  ("Smithtown"),
  ("Smyrna"),
  ("Sodus"),
  ("Sodus Point"),
  ("Solvay"),
  ("Sound Beach"),
  ("Southampton"),
  ("South Corning"),
  ("South Dayton"),
  ("South Fallsburg"),
  ("South Farmingdale"),
  ("South Floral Park"),
  ("South Glens Falls"),
  ("South Hempstead"),
  ("South Hill"),
  ("South Huntington"),
  ("South Lockport"),
  ("South Nyack"),
  ("Southold"),
  ("Southport"),
  ("South Valley Stream"),
  ("Spackenkill"),
  ("Speculator"),
  ("Spencer"),
  ("Spencerport"),
  ("Springs"),
  ("Spring Valley"),
  ("Springville"),
  ("Staatsburg"),
  ("Stamford"),
  ("Stannards"),
  ("Star Lake"),
  ("Stewart Manor"),
  ("Stillwater"),
  ("Stone Ridge"),
  ("Stony Brook"),
  ("Stony Point"),
  ("Stottville"),
  ("Suffern"),
  ("Sylvan Beach"),
  ("Syosset"),
  ("Syracuse"),
  ("Tannersville"),
  ("Tappan"),
  ("Tarrytown"),
  ("Terryville"),
  ("Theresa"),
  ("Thiells"),
  ("Thomaston"),
  ("Thornwood"),
  ("Tillson"),
  ("Tivoli"),
  ("Tonawanda"),
  ("Tonawanda"),
  ("Town Line"),
  ("Tribes Hill"),
  ("Troy"),
  ("Trumansburg"),
  ("Tuckahoe"),
  ("Tuckahoe"),
  ("Tully"),
  ("Tupper Lake"),
  ("Turin"),
  ("Tuxedo Park"),
  ("Unadilla"),
  ("Uniondale"),
  ("Union Springs"),
  ("Unionville"),
  ("University Gardens"),
  ("Upper Brookville"),
  ("Upper Nyack"),
  ("Utica"),
  ("Vails Gate"),
  ("Valatie"),
  ("Valhalla"),
  ("Valley Cottage"),
  ("Valley Falls"),
  ("Valley Stream"),
  ("Van Etten"),
  ("Vernon"),
  ("Verplanck"),
  ("Victor"),
  ("Victory"),
  ("Village Green"),
  ("Village of the Branch"),
  ("Viola"),
  ("Voorheesville"),
  ("Waddington"),
  ("Wading River"),
  ("Wainscott"),
  ("Walden"),
  ("Walker Valley"),
  ("Wallkill"),
  ("Walton"),
  ("Walton Park"),
  ("Wampsville"),
  ("Wantagh"),
  ("Wappingers Falls"),
  ("Warrensburg"),
  ("Warsaw"),
  ("Warwick"),
  ("Washington Heights"),
  ("Washingtonville"),
  ("Waterford"),
  ("Waterloo"),
  ("Watermill"),
  ("Watertown"),
  ("Waterville"),
  ("Watervliet"),
  ("Watkins Glen"),
  ("Waverly"),
  ("Wayland"),
  ("Webster"),
  ("Weedsport"),
  ("Wellsburg"),
  ("Wellsville"),
  ("Wesley Hills"),
  ("West Babylon"),
  ("West Bay Shore"),
  ("Westbury"),
  ("West Carthage"),
  ("West Elmira"),
  ("West End"),
  ("Westfield"),
  ("West Glens Falls"),
  ("Westhampton"),
  ("Westhampton Beach"),
  ("West Hampton Dunes"),
  ("West Haverstraw"),
  ("West Hempstead"),
  ("West Hills"),
  ("West Hurley"),
  ("West Islip"),
  ("Westmere"),
  ("West Nyack"),
  ("Weston Mills"),
  ("West Point"),
  ("West Sand Lake"),
  ("West Sayville"),
  ("West Seneca"),
  ("Westvale"),
  ("West Winfield"),
  ("Wheatley Heights"),
  ("Whitehall"),
  ("White Plains"),
  ("Whitesboro"),
  ("Whitney Point"),
  ("Williamsville"),
  ("Williston Park"),
  ("Wilson"),
  ("Windham"),
  ("Windsor"),
  ("Wolcott"),
  ("Woodbury"),
  ("Woodmere"),
  ("Woodridge"),
  ("Woodsburgh"),
  ("Woodstock"),
  ("Wurtsboro"),
  ("Wyandanch"),
  ("Wynantskill"),
  ("Wyoming"),
  ("Yaphank"),
  ("Yonkers"),
  ("Yorkshire"),
  ("Yorktown Heights"),
  ("Yorkville"),
  ("Youngstown"),
  ("Zena"),
  ("Aberdeen"),
  ("Ahoskie"),
  ("Alamance"),
  ("Albemarle"),
  ("Alliance"),
  ("Altamahaw-Ossipee"),
  ("Andrews"),
  ("Angier"),
  ("Ansonville"),
  ("Apex"),
  ("Arapahoe"),
  ("Archdale"),
  ("Arlington"),
  ("Asheboro"),
  ("Asheville"),
  ("Ashley Heights"),
  ("Askewville"),
  ("Atkinson"),
  ("Atlantic Beach"),
  ("Aulander"),
  ("Aurora"),
  ("Autryville"),
  ("Avery Creek"),
  ("Ayden"),
  ("Badin"),
  ("Bailey"),
  ("Bakersville"),
  ("Bald Head Island"),
  ("Balfour"),
  ("Banner Elk"),
  ("Barker Heights"),
  ("Barker Ten Mile"),
  ("Bath"),
  ("Bayboro"),
  ("Bayshore"),
  ("Beargrass"),
  ("Beaufort"),
  ("Beech Mountain"),
  ("Belhaven"),
  ("Belmont"),
  ("Belville"),
  ("Belwood"),
  ("Benson"),
  ("Bent Creek"),
  ("Bermuda Run"),
  ("Bessemer City"),
  ("Bethania"),
  ("Bethel"),
  ("Bethlehem"),
  ("Beulaville"),
  ("Biltmore Forest"),
  ("Biscoe"),
  ("Black Creek"),
  ("Black Mountain"),
  ("Bladenboro"),
  ("Blowing Rock"),
  ("Boardman"),
  ("Boger City"),
  ("Bogue"),
  ("Boiling Spring Lakes"),
  ("Boiling Springs"),
  ("Bolivia"),
  ("Bolton"),
  ("Bonnetsville"),
  ("Boone"),
  ("Boonville"),
  ("Bostic"),
  ("Bowmore"),
  ("Brevard"),
  ("Brices Creek"),
  ("Bridgeton"),
  ("Broadway"),
  ("Brogden"),
  ("Brookford"),
  ("Brunswick"),
  ("Bryson City"),
  ("Buies Creek"),
  ("Bunn"),
  ("Burgaw"),
  ("Burlington"),
  ("Burnsville"),
  ("Butner"),
  ("Butters"),
  ("Cajah's Mountain"),
  ("Calabash"),
  ("Calypso"),
  ("Cameron"),
  ("Candor"),
  ("Canton"),
  ("Cape Carteret"),
  ("Carolina Beach"),
  ("Carolina Shores"),
  ("Carrboro"),
  ("Carthage"),
  ("Cary"),
  ("Casar"),
  ("Cashiers"),
  ("Castalia"),
  ("Castle Hayne"),
  ("Caswell Beach"),
  ("Catawba"),
  ("Cedar Point"),
  ("Cedar Rock"),
  ("Centerville"),
  ("Cerro Gordo"),
  ("Chadbourn"),
  ("Chapel Hill"),
  ("Charlotte"),
  ("Cherryville"),
  ("Chimney Rock"),
  ("China Grove"),
  ("Chocowinity"),
  ("Claremont"),
  ("Clarkton"),
  ("Clayton"),
  ("Clemmons"),
  ("Cleveland"),
  ("Clinton"),
  ("Clyde"),
  ("Coats"),
  ("Cofield"),
  ("Colerain"),
  ("Columbia"),
  ("Columbus"),
  ("Como"),
  ("Concord"),
  ("Conetoe"),
  ("Connelly Springs"),
  ("Conover"),
  ("Conway"),
  ("Cooleemee"),
  ("Cornelius"),
  ("Cove City"),
  ("Cramerton"),
  ("Creedmoor"),
  ("Creswell"),
  ("Cricket"),
  ("Crossnore"),
  ("Cullowhee"),
  ("Dallas"),
  ("Danbury"),
  ("Davidson"),
  ("Delway"),
  ("Denton"),
  ("Dillsboro"),
  ("Dobbins Heights"),
  ("Dobson"),
  ("Dortches"),
  ("Dover"),
  ("Drexel"),
  ("Dublin"),
  ("Dundarrach"),
  ("Dunn"),
  ("Durham"),
  ("Earl"),
  ("East Arcadia"),
  ("East Bend"),
  ("East Flat Rock"),
  ("East Laurinburg"),
  ("Eastover"),
  ("East Rockingham"),
  ("East Spencer"),
  ("Eden"),
  ("Edenton"),
  ("Elizabeth City"),
  ("Elizabethtown"),
  ("Elkin"),
  ("Elk Park"),
  ("Ellenboro"),
  ("Ellerbe"),
  ("Elm City"),
  ("Elon College"),
  ("Elrod"),
  ("Elroy"),
  ("Emerald Isle"),
  ("Enfield"),
  ("Enochville"),
  ("Erwin"),
  ("Etowah"),
  ("Eureka"),
  ("Everetts"),
  ("Fair Bluff"),
  ("Fairfield Harbour"),
  ("Fairmont"),
  ("Fairplains"),
  ("Fairview"),
  ("Faison"),
  ("Faith"),
  ("Falcon"),
  ("Falkland"),
  ("Fallston"),
  ("Farmville"),
  ("Fayetteville"),
  ("Fearrington"),
  ("Five Points"),
  ("Flat Rock"),
  ("Flat Rock"),
  ("Fletcher"),
  ("Forest City"),
  ("Forest Hills"),
  ("Forest Oaks"),
  ("Fort Bragg"),
  ("Fountain"),
  ("Four Oaks"),
  ("Foxfire"),
  ("Franklin"),
  ("Franklinton"),
  ("Franklinville"),
  ("Fremont"),
  ("Fuquay-Varina"),
  ("Gamewell"),
  ("Garland"),
  ("Garner"),
  ("Garysburg"),
  ("Gaston"),
  ("Gastonia"),
  ("Gatesville"),
  ("Gibson"),
  ("Gibsonville"),
  ("Glen Alpine"),
  ("Glen Raven"),
  ("Godwin"),
  ("Goldsboro"),
  ("Goldston"),
  ("Gorman"),
  ("Graham"),
  ("Grandfather"),
  ("Granite Falls"),
  ("Granite Quarry"),
  ("Greenevers"),
  ("Green Level"),
  ("Greensboro"),
  ("Greenville"),
  ("Grifton"),
  ("Grimesland"),
  ("Grover"),
  ("Half Moon"),
  ("Halifax"),
  ("Hamilton"),
  ("Hamlet"),
  ("Harkers Island"),
  ("Harmony"),
  ("Harrells"),
  ("Harrellsville"),
  ("Harrisburg"),
  ("Hassell"),
  ("Havelock"),
  ("Haw River"),
  ("Hayesville"),
  ("Hays"),
  ("Hemby Bridge"),
  ("Henderson"),
  ("Hendersonville"),
  ("Hertford"),
  ("Hickory"),
  ("Highlands"),
  ("High Point"),
  ("High Shoals"),
  ("Hightsville"),
  ("Hildebran"),
  ("Hills"),
  ("Hobgood"),
  ("Hoffman"),
  ("Holden Beach"),
  ("Holly Ridge"),
  ("Holly Springs"),
  ("Hookerton"),
  ("Hope Mills"),
  ("Hot Springs"),
  ("Hudson"),
  ("Huntersville"),
  ("Icard"),
  ("Indian Beach"),
  ("Indian Trail"),
  ("Ingold"),
  ("Ivanhoe"),
  ("JAARS"),
  ("Jackson"),
  ("Jacksonville"),
  ("James City"),
  ("Jamestown"),
  ("Jamesville"),
  ("Jefferson"),
  ("Jonesville"),
  ("Kannapolis"),
  ("Keener"),
  ("Kelford"),
  ("Kelly"),
  ("Kenansville"),
  ("Kenly"),
  ("Kernersville"),
  ("Kill Devil Hills"),
  ("King"),
  ("Kings Grant"),
  ("Kings Mountain"),
  ("Kingstown"),
  ("Kinston"),
  ("Kirkland"),
  ("Kittrell"),
  ("Kitty Hawk"),
  ("Knightdale"),
  ("Kure Beach"),
  ("La Grange"),
  ("Lake Junaluska"),
  ("Lake Lure"),
  ("Lake Norman of Catawba"),
  ("Lake Park"),
  ("Lake Santeetlah"),
  ("Lake Waccamaw"),
  ("Landis"),
  ("Lansing"),
  ("Lasker"),
  ("Lattimore"),
  ("Laurel Park"),
  ("Laurinburg"),
  ("Lawndale"),
  ("Leggett"),
  ("Leland"),
  ("Lenoir"),
  ("Lewiston Woodville"),
  ("Lewisville"),
  ("Lexington"),
  ("Liberty"),
  ("Light Oak"),
  ("Lilesville"),
  ("Lillington"),
  ("Lincolnton"),
  ("Linden"),
  ("Littleton"),
  ("Locust"),
  ("Long View"),
  ("Louisburg"),
  ("Love Valley"),
  ("Lowell"),
  ("Lowesville"),
  ("Lucama"),
  ("Lumber Bridge"),
  ("Lumberton"),
  ("McAdenville"),
  ("Macclesfield"),
  ("McDonald"),
  ("McFarlan"),
  ("McLeansville"),
  ("Macon"),
  ("Madison"),
  ("Maggie Valley"),
  ("Magnolia"),
  ("Maiden"),
  ("Manteo"),
  ("Marietta"),
  ("Marion"),
  ("Mar-Mac"),
  ("Marshall"),
  ("Mars Hill"),
  ("Marshville"),
  ("Marvin"),
  ("Masonboro"),
  ("Matthews"),
  ("Maxton"),
  ("Mayodan"),
  ("Maysville"),
  ("Mebane"),
  ("Mesic"),
  ("Micro"),
  ("Middleburg"),
  ("Middlesex"),
  ("Millers Creek"),
  ("Milton"),
  ("Mineral Springs"),
  ("Minnesott Beach"),
  ("Mint Hill"),
  ("Mocksville"),
  ("Momeyer"),
  ("Monroe"),
  ("Montreat"),
  ("Mooresboro"),
  ("Mooresville"),
  ("Moravian Falls"),
  ("Morehead City"),
  ("Morganton"),
  ("Morrisville"),
  ("Morven"),
  ("Mountain Home"),
  ("Mountain View"),
  ("Mount Airy"),
  ("Mount Gilead"),
  ("Mount Holly"),
  ("Mount Olive"),
  ("Mount Pleasant"),
  ("Mulberry"),
  ("Murfreesboro"),
  ("Murphy"),
  ("Murraysville"),
  ("Myrtle Grove"),
  ("Nags Head"),
  ("Nashville"),
  ("Navassa"),
  ("Neuse Forest"),
  ("New Bern"),
  ("Newland"),
  ("New London"),
  ("Newport"),
  ("Newton"),
  ("Newton Grove"),
  ("Norlina"),
  ("Norman"),
  ("Northlakes"),
  ("North Topsail Beach"),
  ("Northwest"),
  ("North Wilkesboro"),
  ("Norwood"),
  ("Oakboro"),
  ("Oak City"),
  ("Oak Island"),
  ("Oak Ridge"),
  ("Ocean Isle Beach"),
  ("Ocracoke"),
  ("Ogden"),
  ("Old Fort"),
  ("Oriental"),
  ("Orrum"),
  ("Oxford"),
  ("Pantego"),
  ("Parkton"),
  ("Parmele"),
  ("Patterson Springs"),
  ("Peachland"),
  ("Peletier"),
  ("Pembroke"),
  ("Pikeville"),
  ("Pilot Mountain"),
  ("Pinebluff"),
  ("Pinehurst"),
  ("Pine Knoll Shores"),
  ("Pine Level"),
  ("Pinetops"),
  ("Pineville"),
  ("Piney Green"),
  ("Pink Hill"),
  ("Pittsboro"),
  ("Plain View"),
  ("Pleasant Garden"),
  ("Pleasant Hill"),
  ("Plymouth"),
  ("Polkton"),
  ("Polkville"),
  ("Pollocksville"),
  ("Pope AFB"),
  ("Powellsville"),
  ("Princeton"),
  ("Princeville"),
  ("Proctorville"),
  ("Prospect"),
  ("Pumpkin Center"),
  ("Raeford"),
  ("Raemon"),
  ("Raleigh"),
  ("Ramseur"),
  ("Randleman"),
  ("Ranlo"),
  ("Raynham"),
  ("Red Oak"),
  ("Red Springs"),
  ("Reidsville"),
  ("Rennert"),
  ("Rex"),
  ("Rhodhiss"),
  ("Richfield"),
  ("Richlands"),
  ("Rich Square"),
  ("River Bend"),
  ("River Road"),
  ("Roanoke Rapids"),
  ("Robbins"),
  ("Robbinsville"),
  ("Robersonville"),
  ("Rockfish"),
  ("Rockingham"),
  ("Rockwell"),
  ("Rocky Mount"),
  ("Rolesville"),
  ("Ronda"),
  ("Roper"),
  ("Roseboro"),
  ("Rose Hill"),
  ("Rosman"),
  ("Rowland"),
  ("Roxboro"),
  ("Roxobel"),
  ("Royal Pines"),
  ("Rural Hall"),
  ("Ruth"),
  ("Rutherford College"),
  ("Rutherfordton"),
  ("St. Helena"),
  ("St. James"),
  ("St. Pauls"),
  ("St. Stephens"),
  ("Salem"),
  ("Salemburg"),
  ("Salisbury"),
  ("Saluda"),
  ("Sandy Creek"),
  ("Sandyfield"),
  ("Sanford"),
  ("Saratoga"),
  ("Sawmills"),
  ("Saxapahaw"),
  ("Scotland Neck"),
  ("Seaboard"),
  ("Sea Breeze"),
  ("Seagate"),
  ("Seagrove"),
  ("Sedalia"),
  ("Selma"),
  ("Seven Devils"),
  ("Seven Lakes"),
  ("Seven Springs"),
  ("Severn"),
  ("Shallotte"),
  ("Shannon"),
  ("Sharpsburg"),
  ("Shelby"),
  ("Sherrills Ford"),
  ("Siler City"),
  ("Silver City"),
  ("Silver Lake"),
  ("Simpson"),
  ("Sims"),
  ("Skippers Corner"),
  ("Smithfield"),
  ("Sneads Ferry"),
  ("Snow Hill"),
  ("Southern Pines"),
  ("Southern Shores"),
  ("South Gastonia"),
  ("South Henderson"),
  ("Southport"),
  ("South Rosemary"),
  ("South Weldon"),
  ("Sparta"),
  ("Speed"),
  ("Spencer"),
  ("Spencer Mountain"),
  ("Spindale"),
  ("Spiveys Corner"),
  ("Spring Hope"),
  ("Spring Lake"),
  ("Spruce Pine"),
  ("Staley"),
  ("Stallings"),
  ("Stanfield"),
  ("Stanley"),
  ("Stantonsburg"),
  ("Star"),
  ("Statesville"),
  ("Stedman"),
  ("Stem"),
  ("Stokesdale"),
  ("Stoneville"),
  ("Stonewall"),
  ("Stony Point"),
  ("Stovall"),
  ("Sugar Mountain"),
  ("Summerfield"),
  ("Sunset Beach"),
  ("Surf City"),
  ("Swannanoa"),
  ("Swansboro"),
  ("Swepsonville"),
  ("Sylva"),
  ("Tabor City"),
  ("Tarboro"),
  ("Tar Heel"),
  ("Taylorsville"),
  ("Taylortown"),
  ("Teachey"),
  ("Thomasville"),
  ("Toast"),
  ("Tobaccoville"),
  ("Topsail Beach"),
  ("Trenton"),
  ("Trent Woods"),
  ("Trinity"),
  ("Troutman"),
  ("Troy"),
  ("Tryon"),
  ("Turkey"),
  ("Unionville"),
  ("Valdese"),
  ("Valley Hill"),
  ("Vanceboro"),
  ("Vandemere"),
  ("Vander"),
  ("Vann Crossroads"),
  ("Varnamtown"),
  ("Vass"),
  ("Waco"),
  ("Wade"),
  ("Wadesboro"),
  ("Wagram"),
  ("Wake Forest"),
  ("Walkertown"),
  ("Wallace"),
  ("Walnut Cove"),
  ("Walnut Creek"),
  ("Walstonburg"),
  ("Wanchese"),
  ("Warrenton"),
  ("Warsaw"),
  ("Washington"),
  ("Washington Park"),
  ("Watha"),
  ("Waxhaw"),
  ("Waynesville"),
  ("Weaverville"),
  ("Webster"),
  ("Weddington"),
  ("Welcome"),
  ("Weldon"),
  ("Wendell"),
  ("Wentworth"),
  ("Wesley Chapel"),
  ("West Canton"),
  ("West Jefferson"),
  ("West Marion"),
  ("Westport"),
  ("West Smithfield"),
  ("Whispering Pines"),
  ("Whitakers"),
  ("White Lake"),
  ("White Oak"),
  ("White Plains"),
  ("Whiteville"),
  ("Whitsett"),
  ("Wilkesboro"),
  ("Williamston"),
  ("Wilmington"),
  ("Wilson"),
  ("Wilson's Mills"),
  ("Windsor"),
  ("Winfall"),
  ("Wingate"),
  ("Winston-Salem"),
  ("Winterville"),
  ("Winton"),
  ("Woodfin"),
  ("Woodland"),
  ("Woodlawn"),
  ("Wrightsboro"),
  ("Wrightsville Beach"),
  ("Yadkinville"),
  ("Yanceyville"),
  ("Youngsville"),
  ("Zebulon"),
  ("Abercrombie"),
  ("Adams"),
  ("Alamo"),
  ("Alexander"),
  ("Alice"),
  ("Almont"),
  ("Alsen"),
  ("Ambrose"),
  ("Amenia"),
  ("Amidon"),
  ("Anamoose"),
  ("Aneta"),
  ("Antler"),
  ("Ardoch"),
  ("Argusville"),
  ("Arnegard"),
  ("Arthur"),
  ("Ashley"),
  ("Ayr"),
  ("Balfour"),
  ("Balta"),
  ("Bantry"),
  ("Barney"),
  ("Bathgate"),
  ("Beach"),
  ("Belcourt"),
  ("Belfield"),
  ("Benedict"),
  ("Bergen"),
  ("Berlin"),
  ("Berthold"),
  ("Beulah"),
  ("Binford"),
  ("Bisbee"),
  ("Bismarck"),
  ("Bottineau"),
  ("Bowbells"),
  ("Bowdon"),
  ("Bowman"),
  ("Braddock"),
  ("Briarwood"),
  ("Brinsmade"),
  ("Brocket"),
  ("Buchanan"),
  ("Bucyrus"),
  ("Buffalo"),
  ("Burlington"),
  ("Butte"),
  ("Buxton"),
  ("Calio"),
  ("Calvin"),
  ("Cando"),
  ("Cannon Ball"),
  ("Canton City"),
  ("Carpio"),
  ("Carrington"),
  ("Carson"),
  ("Casselton"),
  ("Cathay"),
  ("Cavalier"),
  ("Cayuga"),
  ("Center"),
  ("Christine"),
  ("Churchs Ferry"),
  ("Cleveland"),
  ("Clifford"),
  ("Cogswell"),
  ("Coleharbor"),
  ("Colfax"),
  ("Columbus"),
  ("Conway"),
  ("Cooperstown"),
  ("Courtenay"),
  ("Crary"),
  ("Crosby"),
  ("Crystal"),
  ("Davenport"),
  ("Dawson"),
  ("Dazey"),
  ("Deering"),
  ("Des Lacs"),
  ("Devils Lake"),
  ("Dickey"),
  ("Dickinson"),
  ("Dodge"),
  ("Donnybrook"),
  ("Douglas"),
  ("Drake"),
  ("Drayton"),
  ("Dunn Center"),
  ("Dunseith"),
  ("Dwight"),
  ("East Dunseith"),
  ("Edgeley"),
  ("Edinburg"),
  ("Edmore"),
  ("Egeland"),
  ("Elgin"),
  ("Ellendale"),
  ("Elliott"),
  ("Emerado"),
  ("Enderlin"),
  ("Epping"),
  ("Erie"),
  ("Esmond"),
  ("Fairdale"),
  ("Fairmount"),
  ("Fargo"),
  ("Fessenden"),
  ("Fingal"),
  ("Finley"),
  ("Flasher"),
  ("Flaxton"),
  ("Forbes"),
  ("Fordville"),
  ("Forest River"),
  ("Forman"),
  ("Fort Ransom"),
  ("Fort Totten"),
  ("Fortuna"),
  ("Fort Yates"),
  ("Four Bears Village"),
  ("Fredonia"),
  ("Frontier"),
  ("Fullerton"),
  ("Gackle"),
  ("Galesburg"),
  ("Gardena"),
  ("Gardner"),
  ("Garrison"),
  ("Gascoyne"),
  ("Gilby"),
  ("Gladstone"),
  ("Glenburn"),
  ("Glenfield"),
  ("Glen Ullin"),
  ("Golden Valley"),
  ("Golva"),
  ("Goodrich"),
  ("Grace City"),
  ("Grafton"),
  ("Grand Forks"),
  ("Grand Forks AFB"),
  ("Grandin"),
  ("Grano"),
  ("Granville"),
  ("Great Bend"),
  ("Grenora"),
  ("Gwinner"),
  ("Hague"),
  ("Halliday"),
  ("Hamberg"),
  ("Hamilton"),
  ("Hampden"),
  ("Hankinson"),
  ("Hannaford"),
  ("Hannah"),
  ("Hansboro"),
  ("Harvey"),
  ("Harwood"),
  ("Hatton"),
  ("Havana"),
  ("Haynes"),
  ("Hazelton"),
  ("Hazen"),
  ("Hebron"),
  ("Hettinger"),
  ("Hillsboro"),
  ("Hoople"),
  ("Hope"),
  ("Horace"),
  ("Hove Mobile Park"),
  ("Hunter"),
  ("Hurdsfield"),
  ("Inkster"),
  ("Jamestown"),
  ("Jud"),
  ("Karlsruhe"),
  ("Kathryn"),
  ("Kenmare"),
  ("Kensal"),
  ("Kief"),
  ("Killdeer"),
  ("Kindred"),
  ("Knox"),
  ("Kramer"),
  ("Kulm"),
  ("Lakota"),
  ("LaMoure"),
  ("Landa"),
  ("Langdon"),
  ("Lankin"),
  ("Lansford"),
  ("Larimore"),
  ("Larson"),
  ("Lawton"),
  ("Leal"),
  ("Leeds"),
  ("Lehr"),
  ("Leith"),
  ("Leonard"),
  ("Lidgerwood"),
  ("Lignite"),
  ("Lincoln"),
  ("Linton"),
  ("Lisbon"),
  ("Litchville"),
  ("Loma"),
  ("Loraine"),
  ("Ludden"),
  ("Luverne"),
  ("McClusky"),
  ("McHenry"),
  ("McVille"),
  ("Maddock"),
  ("Makoti"),
  ("Mandan"),
  ("Mandaree"),
  ("Mantador"),
  ("Manvel"),
  ("Mapleton"),
  ("Marion"),
  ("Marmarth"),
  ("Martin"),
  ("Max"),
  ("Maxbass"),
  ("Mayville"),
  ("Maza"),
  ("Medina"),
  ("Medora"),
  ("Mercer"),
  ("Michigan City"),
  ("Milnor"),
  ("Milton"),
  ("Minnewaukan"),
  ("Minot"),
  ("Minot AFB"),
  ("Minto"),
  ("Mohall"),
  ("Monango"),
  ("Montpelier"),
  ("Mooreton"),
  ("Mott"),
  ("Mountain"),
  ("Munich"),
  ("Mylo"),
  ("Napoleon"),
  ("Neche"),
  ("Nekoma"),
  ("Newburg"),
  ("New England"),
  ("New Leipzig"),
  ("New Rockford"),
  ("New Salem"),
  ("New Town"),
  ("Niagara"),
  ("Nome"),
  ("Noonan"),
  ("North River"),
  ("Northwood"),
  ("Oakes"),
  ("Oberon"),
  ("Oriska"),
  ("Osnabrock"),
  ("Overly"),
  ("Oxbow"),
  ("Page"),
  ("Palermo"),
  ("Park River"),
  ("Parshall"),
  ("Pekin"),
  ("Pembina"),
  ("Perth"),
  ("Petersburg"),
  ("Pettibone"),
  ("Pick City"),
  ("Pillsbury"),
  ("Pingree"),
  ("Pisek"),
  ("Plaza"),
  ("Portal"),
  ("Portland"),
  ("Powers Lake"),
  ("Prairie Rose"),
  ("Rawson"),
  ("Ray"),
  ("Reeder"),
  ("Regan"),
  ("Regent"),
  ("Reile's Acres"),
  ("Reynolds"),
  ("Rhame"),
  ("Richardton"),
  ("Riverdale"),
  ("Robinson"),
  ("Rocklake"),
  ("Rogers"),
  ("Rolette"),
  ("Rolla"),
  ("Ross"),
  ("Rugby"),
  ("Ruso"),
  ("Rutland"),
  ("Ryder"),
  ("St. John"),
  ("St. Thomas"),
  ("Sanborn"),
  ("Sarles"),
  ("Sawyer"),
  ("Scranton"),
  ("Selfridge"),
  ("Sentinel Butte"),
  ("Sharon"),
  ("Sheldon"),
  ("Shell Valley"),
  ("Sherwood"),
  ("Sheyenne"),
  ("Sibley"),
  ("Solen"),
  ("Souris"),
  ("South Heart"),
  ("Spiritwood Lake"),
  ("Springbrook"),
  ("Stanley"),
  ("Stanton"),
  ("Starkweather"),
  ("Steele"),
  ("Strasburg"),
  ("Streeter"),
  ("Surrey"),
  ("Sykeston"),
  ("Tappen"),
  ("Taylor"),
  ("Thompson"),
  ("Tioga"),
  ("Tolley"),
  ("Tolna"),
  ("Tower City"),
  ("Towner"),
  ("Turtle Lake"),
  ("Tuttle"),
  ("Underwood"),
  ("Upham"),
  ("Valley City"),
  ("Velva"),
  ("Venturia"),
  ("Verona"),
  ("Voltaire"),
  ("Wahpeton"),
  ("Walcott"),
  ("Wales"),
  ("Walhalla"),
  ("Warwick"),
  ("Washburn"),
  ("Watford City"),
  ("West Fargo"),
  ("Westhope"),
  ("Wheatland"),
  ("White Earth"),
  ("White Shield"),
  ("Wildrose"),
  ("Williston"),
  ("Willow City"),
  ("Wilton"),
  ("Wimbledon"),
  ("Wing"),
  ("Wishek"),
  ("Wolford"),
  ("Woodworth"),
  ("Wyndmere"),
  ("York"),
  ("Zap"),
  ("Zeeland"),
  ("Aberdeen"),
  ("Ada"),
  ("Adamsville"),
  ("Addyston"),
  ("Adelphi"),
  ("Adena"),
  ("Akron"),
  ("Albany"),
  ("Alexandria"),
  ("Alger"),
  ("Alliance"),
  ("Alvordton"),
  ("Amanda"),
  ("Amberley"),
  ("Amelia"),
  ("Amesville"),
  ("Amherst"),
  ("Amsterdam"),
  ("Andover"),
  ("Anna"),
  ("Ansonia"),
  ("Antioch"),
  ("Antwerp"),
  ("Apple Creek"),
  ("Aquilla"),
  ("Arcadia"),
  ("Arcanum"),
  ("Archbold"),
  ("Arlington"),
  ("Arlington Heights"),
  ("Ashland"),
  ("Ashley"),
  ("Ashtabula"),
  ("Ashville"),
  ("Athalia"),
  ("Athens"),
  ("Attica"),
  ("Aurora"),
  ("Austintown"),
  ("Avon"),
  ("Avon Lake"),
  ("Bailey Lakes"),
  ("Bainbridge"),
  ("Bainbridge"),
  ("Bairdstown"),
  ("Ballville"),
  ("Baltic"),
  ("Baltimore"),
  ("Barberton"),
  ("Barnesville"),
  ("Barnhill"),
  ("Batavia"),
  ("Batesville"),
  ("Bay View"),
  ("Bay Village"),
  ("Beach City"),
  ("Beachwood"),
  ("Beallsville"),
  ("Beaver"),
  ("Beavercreek"),
  ("Beaverdam"),
  ("Beckett Ridge"),
  ("Bedford"),
  ("Bedford Heights"),
  ("Beechwood Trails"),
  ("Bellaire"),
  ("Bellbrook"),
  ("Belle Center"),
  ("Bellefontaine"),
  ("Belle Valley"),
  ("Bellevue"),
  ("Bellville"),
  ("Belmont"),
  ("Belmore"),
  ("Beloit"),
  ("Belpre"),
  ("Bentleyville"),
  ("Benton Ridge"),
  ("Berea"),
  ("Bergholz"),
  ("Berkey"),
  ("Berlin Heights"),
  ("Bethel"),
  ("Bethesda"),
  ("Bettsville"),
  ("Beverly"),
  ("Bexley"),
  ("Blacklick Estates"),
  ("Blakeslee"),
  ("Blanchester"),
  ("Bloomdale"),
  ("Bloomingburg"),
  ("Bloomingdale"),
  ("Bloomville"),
  ("Blue Ash"),
  ("Bluffton"),
  ("Boardman"),
  ("Bolindale"),
  ("Bolivar"),
  ("Boston Heights"),
  ("Botkins"),
  ("Bowerston"),
  ("Bowersville"),
  ("Bowling Green"),
  ("Bradford"),
  ("Bradner"),
  ("Brady Lake"),
  ("Bratenahl"),
  ("Brecksville"),
  ("Bremen"),
  ("Brewster"),
  ("Brice"),
  ("Bridgeport"),
  ("Bridgetown North"),
  ("Brimfield"),
  ("Broadview Heights"),
  ("Brookfield Center"),
  ("Brooklyn"),
  ("Brooklyn Heights"),
  ("Brook Park"),
  ("Brookside"),
  ("Brookville"),
  ("Broughton"),
  ("Brunswick"),
  ("Bryan"),
  ("Buchtel"),
  ("Buckeye Lake"),
  ("Buckland"),
  ("Bucyrus"),
  ("Burbank"),
  ("Burgoon"),
  ("Burkettsville"),
  ("Burlington"),
  ("Burton"),
  ("Butler"),
  ("Butlerville"),
  ("Byesville"),
  ("Cadiz"),
  ("Cairo"),
  ("Calcutta"),
  ("Caldwell"),
  ("Caledonia"),
  ("Cambridge"),
  ("Camden"),
  ("Campbell"),
  ("Canal Fulton"),
  ("Canal Winchester"),
  ("Canfield"),
  ("Canton"),
  ("Cardington"),
  ("Carey"),
  ("Carlisle"),
  ("Carroll"),
  ("Carrollton"),
  ("Casstown"),
  ("Castalia"),
  ("Castine"),
  ("Catawba"),
  ("Cecil"),
  ("Cedarville"),
  ("Celina"),
  ("Centerburg"),
  ("Centerville"),
  ("Centerville"),
  ("Chagrin Falls"),
  ("Champion Heights"),
  ("Chardon"),
  ("Chatfield"),
  ("Chauncey"),
  ("Cherry Fork"),
  ("Cherry Grove"),
  ("Chesapeake"),
  ("Cheshire"),
  ("Chesterhill"),
  ("Chesterland"),
  ("Chesterville"),
  ("Cheviot"),
  ("Chickasaw"),
  ("Chillicothe"),
  ("Chilo"),
  ("Chippewa Lake"),
  ("Choctaw Lake"),
  ("Christiansburg"),
  ("Churchill"),
  ("Cincinnati"),
  ("Circleville"),
  ("Clarington"),
  ("Clarksburg"),
  ("Clarksville"),
  ("Clay Center"),
  ("Clayton"),
  ("Cleveland"),
  ("Cleveland Heights"),
  ("Cleves"),
  ("Clifton"),
  ("Clinton"),
  ("Cloverdale"),
  ("Clyde"),
  ("Coal Grove"),
  ("Coalton"),
  ("Coldwater"),
  ("College Corner"),
  ("Columbiana"),
  ("Columbus"),
  ("Columbus Grove"),
  ("Commercial Point"),
  ("Conesville"),
  ("Congress"),
  ("Conneaut"),
  ("Continental"),
  ("Convoy"),
  ("Coolville"),
  ("Corning"),
  ("Cortland"),
  ("Corwin"),
  ("Coshocton"),
  ("Covedale"),
  ("Covington"),
  ("Craig Beach"),
  ("Crestline"),
  ("Creston"),
  ("Cridersville"),
  ("Crooksville"),
  ("Crown City"),
  ("Crystal Lakes"),
  ("Cumberland"),
  ("Custar"),
  ("Cuyahoga Falls"),
  ("Cuyahoga Heights"),
  ("Cygnet"),
  ("Dalton"),
  ("Danville"),
  ("Darbyville"),
  ("Day Heights"),
  ("Dayton"),
  ("Deer Park"),
  ("Deersville"),
  ("Defiance"),
  ("De Graff"),
  ("Delaware"),
  ("Dellroy"),
  ("Delphos"),
  ("Delta"),
  ("Dennison"),
  ("Dent"),
  ("Deshler"),
  ("Devola"),
  ("Dexter City"),
  ("Dillonvale"),
  ("Dillonvale"),
  ("Donnelsville"),
  ("Dover"),
  ("Doylestown"),
  ("Dresden"),
  ("Drexel"),
  ("Dry Run"),
  ("Dublin"),
  ("Dunkirk"),
  ("Dupont"),
  ("East Canton"),
  ("East Cleveland"),
  ("Eastlake"),
  ("East Liverpool"),
  ("East Palestine"),
  ("East Sparta"),
  ("Eaton"),
  ("Eaton Estates"),
  ("Edgerton"),
  ("Edgewood"),
  ("Edison"),
  ("Edon"),
  ("Eldorado"),
  ("Elgin"),
  ("Elida"),
  ("Elmore"),
  ("Elmwood Place"),
  ("Elyria"),
  ("Empire"),
  ("Englewood"),
  ("Enon"),
  ("Euclid"),
  ("Evendale"),
  ("Fairborn"),
  ("Fairfax"),
  ("Fairfield"),
  ("Fairfield Beach"),
  ("Fairlawn"),
  ("Fairport Harbor"),
  ("Fairview"),
  ("Fairview Lanes"),
  ("Fairview Park"),
  ("Farmersville"),
  ("Fayette"),
  ("Fayetteville"),
  ("Felicity"),
  ("Findlay"),
  ("Finneytown"),
  ("Five Points"),
  ("Fletcher"),
  ("Florida"),
  ("Flushing"),
  ("Forest"),
  ("Forest Park"),
  ("Forestville"),
  ("Fort Jennings"),
  ("Fort Loramie"),
  ("Fort McKinley"),
  ("Fort Recovery"),
  ("Fort Shawnee"),
  ("Fostoria"),
  ("Frankfort"),
  ("Franklin"),
  ("Franklin Furnace"),
  ("Frazeysburg"),
  ("Fredericksburg"),
  ("Fredericktown"),
  ("Freeport"),
  ("Fremont"),
  ("Fruit Hill"),
  ("Fulton"),
  ("Fultonham"),
  ("Gahanna"),
  ("Galena"),
  ("Galion"),
  ("Gallipolis"),
  ("Gambier"),
  ("Gann"),
  ("Garfield Heights"),
  ("Garrettsville"),
  ("Gates Mills"),
  ("Geneva"),
  ("Geneva-on-the-Lake"),
  ("Genoa"),
  ("Georgetown"),
  ("Germantown"),
  ("Gettysburg"),
  ("Gibsonburg"),
  ("Gilboa"),
  ("Girard"),
  ("Glandorf"),
  ("Glendale"),
  ("Glenford"),
  ("Glenmont"),
  ("Glenmoor"),
  ("Glenwillow"),
  ("Gloria Glens Park"),
  ("Glouster"),
  ("Gnadenhutten"),
  ("Golf Manor"),
  ("Gordon"),
  ("Grafton"),
  ("Grand Rapids"),
  ("Grand River"),
  ("Grandview"),
  ("Grandview Heights"),
  ("Granville"),
  ("Granville South"),
  ("Gratiot"),
  ("Gratis"),
  ("Graysville"),
  ("Green"),
  ("Green Camp"),
  ("Greenfield"),
  ("Greenhills"),
  ("Green Meadows"),
  ("Green Springs"),
  ("Greentown"),
  ("Greenville"),
  ("Greenwich"),
  ("Groesbeck"),
  ("Grove City"),
  ("Groveport"),
  ("Grover Hill"),
  ("Hamden"),
  ("Hamersville"),
  ("Hamilton"),
  ("Hamler"),
  ("Hanging Rock"),
  ("Hanover"),
  ("Hanoverton"),
  ("Harbor Hills"),
  ("Harbor View"),
  ("Harpster"),
  ("Harrisburg"),
  ("Harrison"),
  ("Harrisville"),
  ("Harrod"),
  ("Hartford"),
  ("Hartville"),
  ("Harveysburg"),
  ("Haskins"),
  ("Haviland"),
  ("Hayesville"),
  ("Heath"),
  ("Hebron"),
  ("Helena"),
  ("Hemlock"),
  ("Hicksville"),
  ("Higginsport"),
  ("Highland"),
  ("Highland Heights"),
  ("Highland Hills"),
  ("Hilliard"),
  ("Hills and Dales"),
  ("Hillsboro"),
  ("Hilltop"),
  ("Hiram"),
  ("Holgate"),
  ("Holiday City"),
  ("Holiday Valley"),
  ("Holland"),
  ("Hollansburg"),
  ("Holloway"),
  ("Holmesville"),
  ("Hopedale"),
  ("Howland Center"),
  ("Hoytville"),
  ("Hubbard"),
  ("Huber Heights"),
  ("Huber Ridge"),
  ("Hudson"),
  ("Hunter"),
  ("Hunting Valley"),
  ("Huntsville"),
  ("Huron"),
  ("Independence"),
  ("Irondale"),
  ("Ironton"),
  ("Ithaca"),
  ("Jackson"),
  ("Jacksonburg"),
  ("Jackson Center"),
  ("Jacksonville"),
  ("Jamestown"),
  ("Jefferson"),
  ("Jeffersonville"),
  ("Jenera"),
  ("Jeromesville"),
  ("Jerry City"),
  ("Jerusalem"),
  ("Jewett"),
  ("Johnstown"),
  ("Junction City"),
  ("Kalida"),
  ("Kelleys Island"),
  ("Kent"),
  ("Kenton"),
  ("Kenwood"),
  ("Kettering"),
  ("Kettlersville"),
  ("Killbuck"),
  ("Kimbolton"),
  ("Kingston"),
  ("Kipton"),
  ("Kirby"),
  ("Kirkersville"),
  ("Kirtland"),
  ("Kirtland Hills"),
  ("La Croft"),
  ("Lafayette"),
  ("Lagrange"),
  ("Lake Darby"),
  ("Lakeline"),
  ("Lakemore"),
  ("Lakeview"),
  ("Lakewood"),
  ("Lancaster"),
  ("Landen"),
  ("La Rue"),
  ("Latty"),
  ("Laura"),
  ("Laurelville"),
  ("Lawrenceville"),
  ("Leavittsburg"),
  ("Lebanon"),
  ("Leesburg"),
  ("Leesville"),
  ("Leetonia"),
  ("Leipsic"),
  ("Lewisburg"),
  ("Lewisville"),
  ("Lexington"),
  ("Liberty Center"),
  ("Lima"),
  ("Limaville"),
  ("Lincoln Heights"),
  ("Lincoln Village"),
  ("Lindsey"),
  ("Linndale"),
  ("Lisbon"),
  ("Lithopolis"),
  ("Lockbourne"),
  ("Lockington"),
  ("Lockland"),
  ("Lodi"),
  ("Logan"),
  ("Logan Elm Village"),
  ("London"),
  ("Lorain"),
  ("Lordstown"),
  ("Lore City"),
  ("Loudonville"),
  ("Louisville"),
  ("Loveland"),
  ("Loveland Park"),
  ("Lowell"),
  ("Lowellville"),
  ("Lower Salem"),
  ("Lucas"),
  ("Lucasville"),
  ("Luckey"),
  ("Ludlow Falls"),
  ("Lynchburg"),
  ("Lyndhurst"),
  ("Lyons"),
  ("McArthur"),
  ("McClure"),
  ("McComb"),
  ("McConnelsville"),
  ("McDonald"),
  ("Macedonia"),
  ("McGuffey"),
  ("Mack North"),
  ("Macksburg"),
  ("Mack South"),
  ("Madeira"),
  ("Madison"),
  ("Magnetic Springs"),
  ("Magnolia"),
  ("Maineville"),
  ("Malinta"),
  ("Malta"),
  ("Malvern"),
  ("Manchester"),
  ("Mansfield"),
  ("Mantua"),
  ("Maple Heights"),
  ("Maple Ridge"),
  ("Maplewood Park"),
  ("Marble Cliff"),
  ("Marblehead"),
  ("Marengo"),
  ("Mariemont"),
  ("Marietta"),
  ("Marion"),
  ("Marseilles"),
  ("Marshallville"),
  ("Martinsburg"),
  ("Martins Ferry"),
  ("Martinsville"),
  ("Marysville"),
  ("Mason"),
  ("Massillon"),
  ("Masury"),
  ("Matamoras"),
  ("Maumee"),
  ("Mayfield"),
  ("Mayfield Heights"),
  ("Mechanicsburg"),
  ("Medina"),
  ("Melrose"),
  ("Mendon"),
  ("Mentor"),
  ("Mentor-on-the-Lake"),
  ("Metamora"),
  ("Meyers Lake"),
  ("Miamisburg"),
  ("Middleburg Heights"),
  ("Middlefield"),
  ("Middle Point"),
  ("Middleport"),
  ("Middletown"),
  ("Midland"),
  ("Midvale"),
  ("Midway"),
  ("Mifflin"),
  ("Milan"),
  ("Milford"),
  ("Milford Center"),
  ("Millbury"),
  ("Milledgeville"),
  ("Miller City"),
  ("Millersburg"),
  ("Millersport"),
  ("Millville"),
  ("Milton Center"),
  ("Miltonsburg"),
  ("Mineral City"),
  ("Mineral Ridge"),
  ("Minerva"),
  ("Minerva Park"),
  ("Mingo Junction"),
  ("Minster"),
  ("Mogadore"),
  ("Monfort Heights East"),
  ("Monfort Heights South"),
  ("Monroe"),
  ("Monroeville"),
  ("Montezuma"),
  ("Montgomery"),
  ("Montpelier"),
  ("Montrose-Ghent"),
  ("Moraine"),
  ("Moreland Hills"),
  ("Morral"),
  ("Morristown"),
  ("Morrow"),
  ("Moscow"),
  ("Mount Blanchard"),
  ("Mount Carmel"),
  ("Mount Cory"),
  ("Mount Eaton"),
  ("Mount Gilead"),
  ("Mount Healthy"),
  ("Mount Healthy Heights"),
  ("Mount Orab"),
  ("Mount Pleasant"),
  ("Mount Repose"),
  ("Mount Sterling"),
  ("Mount Vernon"),
  ("Mount Victory"),
  ("Mowrystown"),
  ("Mulberry"),
  ("Munroe Falls"),
  ("Murray City"),
  ("Mutual"),
  ("Napoleon"),
  ("Nashville"),
  ("Navarre"),
  ("Neffs"),
  ("Nellie"),
  ("Nelsonville"),
  ("Nevada"),
  ("Neville"),
  ("New Albany"),
  ("New Alexandria"),
  ("Newark"),
  ("New Athens"),
  ("New Bavaria"),
  ("New Bloomington"),
  ("New Boston"),
  ("New Bremen"),
  ("Newburgh Heights"),
  ("New Carlisle"),
  ("Newcomerstown"),
  ("New Concord"),
  ("New Franklin"),
  ("New Holland"),
  ("New Knoxville"),
  ("New Lebanon"),
  ("New Lexington"),
  ("New London"),
  ("New Madison"),
  ("New Miami"),
  ("New Middletown"),
  ("New Paris"),
  ("New Philadelphia"),
  ("New Richmond"),
  ("New Riegel"),
  ("New Rome"),
  ("New Straitsville"),
  ("Newton Falls"),
  ("Newtonsville"),
  ("Newtown"),
  ("New Vienna"),
  ("New Washington"),
  ("New Waterford"),
  ("New Weston"),
  ("Ney"),
  ("Niles"),
  ("North Baltimore"),
  ("North Bend"),
  ("Northbrook"),
  ("North Canton"),
  ("North College Hill"),
  ("North Fairfield"),
  ("Northfield"),
  ("North Fork Village"),
  ("Northgate"),
  ("North Hampton"),
  ("North Kingsville"),
  ("North Lewisburg"),
  ("North Madison"),
  ("North Olmsted"),
  ("North Perry"),
  ("North Randall"),
  ("Northridge"),
  ("Northridge"),
  ("North Ridgeville"),
  ("North Robinson"),
  ("North Royalton"),
  ("North Star"),
  ("Northwood"),
  ("North Zanesville"),
  ("Norton"),
  ("Norwalk"),
  ("Norwich"),
  ("Norwood"),
  ("Oak Harbor"),
  ("Oak Hill"),
  ("Oakwood"),
  ("Oakwood"),
  ("Oakwood"),
  ("Oberlin"),
  ("Obetz"),
  ("Octa"),
  ("Ohio City"),
  ("Olde West Chester"),
  ("Old Washington"),
  ("Olmsted Falls"),
  ("Ontario"),
  ("Orange"),
  ("Orangeville"),
  ("Oregon"),
  ("Orient"),
  ("Orrville"),
  ("Orwell"),
  ("Osgood"),
  ("Ostrander"),
  ("Ottawa"),
  ("Ottawa Hills"),
  ("Ottoville"),
  ("Otway"),
  ("Owensville"),
  ("Oxford"),
  ("Painesville"),
  ("Palestine"),
  ("Pandora"),
  ("Park Layne"),
  ("Parma"),
  ("Parma Heights"),
  ("Parral"),
  ("Pataskala"),
  ("Patterson"),
  ("Paulding"),
  ("Payne"),
  ("Peebles"),
  ("Pemberville"),
  ("Peninsula"),
  ("Pepper Pike"),
  ("Perry"),
  ("Perry Heights"),
  ("Perrysburg"),
  ("Perrysville"),
  ("Phillipsburg"),
  ("Philo"),
  ("Pickerington"),
  ("Pigeon Creek"),
  ("Piketon"),
  ("Pioneer"),
  ("Piqua"),
  ("Pitsburg"),
  ("Plain City"),
  ("Plainfield"),
  ("Pleasant City"),
  ("Pleasant Grove"),
  ("Pleasant Hill"),
  ("Pleasant Plain"),
  ("Pleasant Run"),
  ("Pleasant Run Farm"),
  ("Pleasantville"),
  ("Plymouth"),
  ("Poland"),
  ("Polk"),
  ("Pomeroy"),
  ("Portage"),
  ("Portage Lakes"),
  ("Port Clinton"),
  ("Port Jefferson"),
  ("Portsmouth"),
  ("Port Washington"),
  ("Port William"),
  ("Potsdam"),
  ("Powell"),
  ("Powhatan Point"),
  ("Proctorville"),
  ("Prospect"),
  ("Put-in-Bay"),
  ("Quaker City"),
  ("Quincy"),
  ("Racine"),
  ("Rarden"),
  ("Ravenna"),
  ("Rawson"),
  ("Rayland"),
  ("Reading"),
  ("Reminderville"),
  ("Rendville"),
  ("Republic"),
  ("Reynoldsburg"),
  ("Richfield"),
  ("Richmond"),
  ("Richmond Heights"),
  ("Richwood"),
  ("Ridgeway"),
  ("Rio Grande"),
  ("Ripley"),
  ("Risingsun"),
  ("Rittman"),
  ("Riverlea"),
  ("Riverside"),
  ("Roaming Shores"),
  ("Rochester"),
  ("Rock Creek"),
  ("Rockford"),
  ("Rocky Ridge"),
  ("Rocky River"),
  ("Rogers"),
  ("Rome"),
  ("Rosemount"),
  ("Roseville"),
  ("Ross"),
  ("Rossburg"),
  ("Rossford"),
  ("Roswell"),
  ("Rushsylvania"),
  ("Rushville"),
  ("Russells Point"),
  ("Russellville"),
  ("Russia"),
  ("Rutland"),
  ("Sabina"),
  ("St. Bernard"),
  ("St. Clairsville"),
  ("St. Henry"),
  ("St. Louisville"),
  ("St. Martin"),
  ("St. Marys"),
  ("St. Paris"),
  ("Salem"),
  ("Salesville"),
  ("Salineville"),
  ("Sandusky"),
  ("Sandusky South"),
  ("Sarahsville"),
  ("Sardinia"),
  ("Savannah"),
  ("Scio"),
  ("Sciotodale"),
  ("Scott"),
  ("Seaman"),
  ("Sebring"),
  ("Senecaville"),
  ("Seven Hills"),
  ("Seven Mile"),
  ("Seville"),
  ("Shadyside"),
  ("Shaker Heights"),
  ("Sharonville"),
  ("Shawnee"),
  ("Shawnee Hills"),
  ("Shawnee Hills"),
  ("Sheffield"),
  ("Sheffield Lake"),
  ("Shelby"),
  ("Sherrodsville"),
  ("Sherwood"),
  ("Sherwood"),
  ("Shiloh"),
  ("Shiloh"),
  ("Shreve"),
  ("Sidney"),
  ("Silver Lake"),
  ("Silverton"),
  ("Sinking Spring"),
  ("Smithfield"),
  ("Smithville"),
  ("Solon"),
  ("Somerset"),
  ("Somerville"),
  ("South Amherst"),
  ("South Bloomfield"),
  ("South Canal"),
  ("South Charleston"),
  ("South Euclid"),
  ("South Lebanon"),
  ("South Middletown"),
  ("South Point"),
  ("South Russell"),
  ("South Salem"),
  ("South Solon"),
  ("South Vienna"),
  ("South Webster"),
  ("South Zanesville"),
  ("Sparta"),
  ("Spencer"),
  ("Spencerville"),
  ("Springboro"),
  ("Springdale"),
  ("Springfield"),
  ("Spring Valley"),
  ("Stafford"),
  ("Steubenville"),
  ("Stockport"),
  ("Stone Creek"),
  ("Stony Prairie"),
  ("Stoutsville"),
  ("Stow"),
  ("Strasburg"),
  ("Stratton"),
  ("Streetsboro"),
  ("Strongsville"),
  ("Struthers"),
  ("Stryker"),
  ("Sugar Bush Knolls"),
  ("Sugarcreek"),
  ("Sugar Grove"),
  ("Summerfield"),
  ("Summerside"),
  ("Summitville"),
  ("Sunbury"),
  ("Swanton"),
  ("Sycamore"),
  ("Sylvania"),
  ("Syracuse"),
  ("Tallmadge"),
  ("Tarlton"),
  ("Terrace Park"),
  ("The Plains"),
  ("The Village of Indian Hill"),
  ("Thornville"),
  ("Thurston"),
  ("Tiffin"),
  ("Tiltonsville"),
  ("Timberlake"),
  ("Tipp City"),
  ("Tiro"),
  ("Toledo"),
  ("Tontogany"),
  ("Toronto"),
  ("Tremont City"),
  ("Trenton"),
  ("Trimble"),
  ("Trotwood"),
  ("Troy"),
  ("Turpin Hills"),
  ("Tuscarawas"),
  ("Twinsburg"),
  ("Uhrichsville"),
  ("Union"),
  ("Union City"),
  ("Uniontown"),
  ("Unionville Center"),
  ("Uniopolis"),
  ("University Heights"),
  ("Upper Arlington"),
  ("Upper Sandusky"),
  ("Urbana"),
  ("Urbancrest"),
  ("Utica"),
  ("Valley Hi"),
  ("Valley View"),
  ("Valleyview"),
  ("Van Buren"),
  ("Vandalia"),
  ("Vanlue"),
  ("Van Wert"),
  ("Venedocia"),
  ("Vermilion"),
  ("Verona"),
  ("Versailles"),
  ("Vienna Center"),
  ("Vinton"),
  ("Wadsworth"),
  ("Waite Hill"),
  ("Wakeman"),
  ("Walbridge"),
  ("Waldo"),
  ("Walton Hills"),
  ("Wapakoneta"),
  ("Warren"),
  ("Warrensville Heights"),
  ("Warsaw"),
  ("Washington"),
  ("Washingtonville"),
  ("Waterville"),
  ("Wauseon"),
  ("Waverly City"),
  ("Wayne"),
  ("Wayne Lakes"),
  ("Waynesburg"),
  ("Waynesfield"),
  ("Waynesville"),
  ("Wellington"),
  ("Wellston"),
  ("Wellsville"),
  ("West Alexandria"),
  ("West Carrollton City"),
  ("West Elkton"),
  ("Westerville"),
  ("West Farmington"),
  ("Westfield Center"),
  ("West Hill"),
  ("West Jefferson"),
  ("West Lafayette"),
  ("Westlake"),
  ("West Leipsic"),
  ("West Liberty"),
  ("West Manchester"),
  ("West Mansfield"),
  ("West Millgrove"),
  ("West Milton"),
  ("Weston"),
  ("West Portsmouth"),
  ("West Rushville"),
  ("West Salem"),
  ("West Union"),
  ("West Unity"),
  ("Wetherington"),
  ("Wharton"),
  ("Wheelersburg"),
  ("Whitehall"),
  ("Whitehouse"),
  ("White Oak"),
  ("White Oak East"),
  ("White Oak West"),
  ("Wickliffe"),
  ("Wilberforce"),
  ("Wilkesville"),
  ("Willard"),
  ("Williamsburg"),
  ("Williamsport"),
  ("Willoughby"),
  ("Willoughby Hills"),
  ("Willowick"),
  ("Willshire"),
  ("Wilmington"),
  ("Wilmot"),
  ("Wilson"),
  ("Winchester"),
  ("Windham"),
  ("Wintersville"),
  ("Withamsville"),
  ("Woodbourne-Hyde Park"),
  ("Woodlawn"),
  ("Woodmere"),
  ("Woodsfield"),
  ("Woodstock"),
  ("Woodville"),
  ("Wooster"),
  ("Worthington"),
  ("Wren"),
  ("Wright-Patterson AFB"),
  ("Wyoming"),
  ("Xenia"),
  ("Yankee Lake"),
  ("Yellow Springs"),
  ("Yorkshire"),
  ("Yorkville"),
  ("Youngstown"),
  ("Zaleski"),
  ("Zanesfield"),
  ("Zanesville"),
  ("Zoar"),
  ("Achille"),
  ("Ada"),
  ("Adair"),
  ("Addington"),
  ("Afton"),
  ("Agra"),
  ("Akins"),
  ("Albion"),
  ("Alderson"),
  ("Alex"),
  ("Aline"),
  ("Allen"),
  ("Altus"),
  ("Alva"),
  ("Amber"),
  ("Ames"),
  ("Amorita"),
  ("Anadarko"),
  ("Antlers"),
  ("Apache"),
  ("Arapaho"),
  ("Arcadia"),
  ("Ardmore"),
  ("Arkoma"),
  ("Armstrong"),
  ("Arnett"),
  ("Asher"),
  ("Ashland"),
  ("Atoka"),
  ("Atwood"),
  ("Avant"),
  ("Avard"),
  ("Ballou"),
  ("Barnsdall"),
  ("Bartlesville"),
  ("Bearden"),
  ("Beaver"),
  ("Beggs"),
  ("Belfonte"),
  ("Bell"),
  ("Bennington"),
  ("Bernice"),
  ("Bessie"),
  ("Bethany"),
  ("Bethel Acres"),
  ("Big Cabin"),
  ("Billings"),
  ("Binger"),
  ("Bixby"),
  ("Blackburn"),
  ("Blackwell"),
  ("Blair"),
  ("Blanchard"),
  ("Bluejacket"),
  ("Boise City"),
  ("Bokchito"),
  ("Bokoshe"),
  ("Boley"),
  ("Boswell"),
  ("Bowlegs"),
  ("Boynton"),
  ("Bradley"),
  ("Braggs"),
  ("Braman"),
  ("Bray"),
  ("Breckenridge"),
  ("Brent"),
  ("Bridgeport"),
  ("Briggs"),
  ("Bristow"),
  ("Broken Arrow"),
  ("Broken Bow"),
  ("Bromide"),
  ("Brooksville"),
  ("Brush Creek"),
  ("Brushy"),
  ("Buffalo"),
  ("Bull Hollow"),
  ("Burbank"),
  ("Burlington"),
  ("Burns Flat"),
  ("Bushyhead"),
  ("Butler"),
  ("Byars"),
  ("Byng"),
  ("Byron"),
  ("Cache"),
  ("Caddo"),
  ("Calera"),
  ("Calumet"),
  ("Calvin"),
  ("Camargo"),
  ("Cameron"),
  ("Canadian"),
  ("Caney"),
  ("Canton"),
  ("Canute"),
  ("Capron"),
  ("Cardin"),
  ("Carlile"),
  ("Carmen"),
  ("Carnegie"),
  ("Carney"),
  ("Carrier"),
  ("Carter"),
  ("Cashion"),
  ("Castle"),
  ("Catoosa"),
  ("Cayuga"),
  ("Cedar Crest"),
  ("Cedar Valley"),
  ("Cement"),
  ("Centrahoma"),
  ("Central High"),
  ("Chandler"),
  ("Chattanooga"),
  ("Checotah"),
  ("Chelsea"),
  ("Cherokee"),
  ("Cherry Tree"),
  ("Chewey"),
  ("Cheyenne"),
  ("Chickasha"),
  ("Choctaw"),
  ("Chouteau"),
  ("Christie"),
  ("Cimarron City"),
  ("Claremore"),
  ("Clayton"),
  ("Clearview"),
  ("Cleora"),
  ("Cleo Springs"),
  ("Cleveland"),
  ("Clinton"),
  ("Cloud Creek"),
  ("Coalgate"),
  ("Colbert"),
  ("Colcord"),
  ("Cole"),
  ("Collinsville"),
  ("Colony"),
  ("Comanche"),
  ("Commerce"),
  ("Cooperton"),
  ("Copan"),
  ("Copeland"),
  ("Corn"),
  ("Cornish"),
  ("Council Hill"),
  ("Covington"),
  ("Coweta"),
  ("Cowlington"),
  ("Coyle"),
  ("Crescent"),
  ("Cromwell"),
  ("Crowder"),
  ("Cushing"),
  ("Custer City"),
  ("Cyril"),
  ("Dacoma"),
  ("Davenport"),
  ("Davidson"),
  ("Davis"),
  ("Deer Creek"),
  ("Delaware"),
  ("Del City"),
  ("Dennis"),
  ("Depew"),
  ("Devol"),
  ("Dewar"),
  ("Dewey"),
  ("Dibble"),
  ("Dickson"),
  ("Dill City"),
  ("Disney"),
  ("Dodge"),
  ("Dotyville"),
  ("Dougherty"),
  ("Douglas"),
  ("Dover"),
  ("Dripping Springs"),
  ("Drummond"),
  ("Drumright"),
  ("Dry Creek"),
  ("Duchess Landing"),
  ("Duncan"),
  ("Durant"),
  ("Dustin"),
  ("Dwight Mission"),
  ("Eakly"),
  ("Earlsboro"),
  ("East Duke"),
  ("Edmond"),
  ("Eldon"),
  ("Eldorado"),
  ("Elgin"),
  ("Elk City"),
  ("Elmer"),
  ("Elmore City"),
  ("El Reno"),
  ("Empire City"),
  ("Enid"),
  ("Erick"),
  ("Erin Springs"),
  ("Etowah"),
  ("Eufaula"),
  ("Evening Shade"),
  ("Fairfax"),
  ("Fairfield"),
  ("Fairland"),
  ("Fairmont"),
  ("Fair Oaks"),
  ("Fairview"),
  ("Fallis"),
  ("Fanshawe"),
  ("Fargo"),
  ("Faxon"),
  ("Fitzhugh"),
  ("Fletcher"),
  ("Flint Creek"),
  ("Flute Springs"),
  ("Foraker"),
  ("Forest Park"),
  ("Forgan"),
  ("Fort Cobb"),
  ("Fort Coffee"),
  ("Fort Gibson"),
  ("Fort Supply"),
  ("Fort Towson"),
  ("Foss"),
  ("Foyil"),
  ("Francis"),
  ("Frederick"),
  ("Freedom"),
  ("Gage"),
  ("Gans"),
  ("Garber"),
  ("Garvin"),
  ("Gate"),
  ("Geary"),
  ("Gene Autry"),
  ("Geronimo"),
  ("Gerty"),
  ("Glencoe"),
  ("Glenpool"),
  ("Goldsby"),
  ("Goltry"),
  ("Goodwell"),
  ("Gore"),
  ("Gotebo"),
  ("Gould"),
  ("Gracemont"),
  ("Grainola"),
  ("Grandfield"),
  ("Grand Lake Towne"),
  ("Granite"),
  ("Grayson"),
  ("Greasy"),
  ("Greenfield"),
  ("Gregory"),
  ("Grove"),
  ("Guthrie"),
  ("Guymon"),
  ("Haileyville"),
  ("Hallett"),
  ("Hall Park"),
  ("Hammon"),
  ("Hanna"),
  ("Hardesty"),
  ("Harrah"),
  ("Hartshorne"),
  ("Haskell"),
  ("Hastings"),
  ("Haworth"),
  ("Headrick"),
  ("Healdton"),
  ("Heavener"),
  ("Helena"),
  ("Hendrix"),
  ("Hennessey"),
  ("Henryetta"),
  ("Hickory"),
  ("Hillsdale"),
  ("Hinton"),
  ("Hitchcock"),
  ("Hitchita"),
  ("Hobart"),
  ("Hoffman"),
  ("Holdenville"),
  ("Hollis"),
  ("Hollister"),
  ("Hominy"),
  ("Hooker"),
  ("Hoot Owl"),
  ("Horntown"),
  ("Howe"),
  ("Hugo"),
  ("Hulbert"),
  ("Hunter"),
  ("Hydro"),
  ("Idabel"),
  ("Indiahoma"),
  ("Indianola"),
  ("Inola"),
  ("Iron Post"),
  ("Jamestown"),
  ("Jay"),
  ("Jefferson"),
  ("Jenks"),
  ("Jennings"),
  ("Jet"),
  ("Johnson"),
  ("Jones"),
  ("Justice"),
  ("Kansas"),
  ("Kaw City"),
  ("Kellyville"),
  ("Kemp"),
  ("Kendrick"),
  ("Kenefic"),
  ("Keota"),
  ("Ketchum"),
  ("Keyes"),
  ("Keys"),
  ("Kiefer"),
  ("Kildare"),
  ("Kingfisher"),
  ("Kingston"),
  ("Kinta"),
  ("Kiowa"),
  ("Knowles"),
  ("Konawa"),
  ("Krebs"),
  ("Kremlin"),
  ("Lahoma"),
  ("Lake Aluma"),
  ("Lamar"),
  ("Lambert"),
  ("Lamont"),
  ("Langley"),
  ("Langston"),
  ("Laverne"),
  ("Lawrence Creek"),
  ("Lawton"),
  ("Leach"),
  ("Leedey"),
  ("Le Flore"),
  ("Lehigh"),
  ("Lenapah"),
  ("Leon"),
  ("Lexington"),
  ("Liberty"),
  ("Lima"),
  ("Limestone"),
  ("Lindsay"),
  ("Loco"),
  ("Locust Grove"),
  ("Lone Grove"),
  ("Lone Wolf"),
  ("Long"),
  ("Longdale"),
  ("Longtown"),
  ("Lookeba"),
  ("Lost City"),
  ("Lotsee"),
  ("Loveland"),
  ("Loyal"),
  ("Luther"),
  ("Lyons Switch"),
  ("McAlester"),
  ("McCord"),
  ("McCurtain"),
  ("McKey"),
  ("McLoud"),
  ("Macomb"),
  ("Madill"),
  ("Manchester"),
  ("Mangum"),
  ("Manitou"),
  ("Mannford"),
  ("Mannsville"),
  ("Maramec"),
  ("Marble City"),
  ("Marble City Community"),
  ("Marietta"),
  ("Marland"),
  ("Marlow"),
  ("Marshall"),
  ("Martha"),
  ("Maryetta"),
  ("Maud"),
  ("May"),
  ("Maysville"),
  ("Mazie"),
  ("Mead"),
  ("Medford"),
  ("Medicine Park"),
  ("Meeker"),
  ("Meno"),
  ("Meridian"),
  ("Meridian"),
  ("Miami"),
  ("Midwest City"),
  ("Milburn"),
  ("Mill Creek"),
  ("Millerton"),
  ("Minco"),
  ("Moffett"),
  ("Moore"),
  ("Mooreland"),
  ("Morris"),
  ("Morrison"),
  ("Mounds"),
  ("Mountain Park"),
  ("Mountain View"),
  ("Muldrow"),
  ("Mule Barn"),
  ("Mulhall"),
  ("Murphy"),
  ("Muskogee"),
  ("Mustang"),
  ("Mutual"),
  ("Narcissa"),
  ("Nash"),
  ("New Alluwe"),
  ("Newcastle"),
  ("New Cordell"),
  ("New Eucha"),
  ("Newkirk"),
  ("New Tulsa"),
  ("Nichols Hills"),
  ("Nicoma Park"),
  ("Ninnekah"),
  ("Noble"),
  ("Norge"),
  ("Norman"),
  ("North Enid"),
  ("North Miami"),
  ("Notchietown"),
  ("Nowata"),
  ("Oak Grove"),
  ("Oakhurst"),
  ("Oakland"),
  ("Oaks"),
  ("Oakwood"),
  ("Ochelata"),
  ("Oilton"),
  ("Okarche"),
  ("Okay"),
  ("Okeene"),
  ("Okemah"),
  ("Oklahoma City"),
  ("Okmulgee"),
  ("Oktaha"),
  ("Old Eucha"),
  ("Olustee"),
  ("Oologah"),
  ("Optima"),
  ("Orlando"),
  ("Osage"),
  ("Owasso"),
  ("Paden"),
  ("Panama"),
  ("Paoli"),
  ("Paradise Hill"),
  ("Park Hill"),
  ("Pauls Valley"),
  ("Pawhuska"),
  ("Pawnee"),
  ("Peavine"),
  ("Pensacola"),
  ("Peoria"),
  ("Perkins"),
  ("Perry"),
  ("Pettit"),
  ("Phillips"),
  ("Picher"),
  ("Piedmont"),
  ("Pinhook Corners"),
  ("Pink"),
  ("Pin Oak Acres"),
  ("Pittsburg"),
  ("Pocasset"),
  ("Pocola"),
  ("Ponca City"),
  ("Pond Creek"),
  ("Porter"),
  ("Porum"),
  ("Poteau"),
  ("Prague"),
  ("Prue"),
  ("Pryor Creek"),
  ("Pump Back"),
  ("Purcell"),
  ("Putnam"),
  ("Quapaw"),
  ("Quay"),
  ("Quinton"),
  ("Ralston"),
  ("Ramona"),
  ("Randlett"),
  ("Ratliff City"),
  ("Rattan"),
  ("Ravia"),
  ("Redbird"),
  ("Redbird Smith"),
  ("Red Oak"),
  ("Red Rock"),
  ("Remy"),
  ("Renfrow"),
  ("Rentiesville"),
  ("Reydon"),
  ("Ringling"),
  ("Ringwood"),
  ("Ripley"),
  ("River Bottom"),
  ("Rock Island"),
  ("Rocky"),
  ("Rocky Ford"),
  ("Rocky Mountain"),
  ("Roff"),
  ("Roland"),
  ("Roosevelt"),
  ("Rosedale"),
  ("Rosston"),
  ("Rush Springs"),
  ("Ryan"),
  ("St. Louis"),
  ("Salem"),
  ("Salina"),
  ("Sallisaw"),
  ("Sams Corner"),
  ("Sand Hills"),
  ("Sand Springs"),
  ("Sapulpa"),
  ("Sasakwa"),
  ("Savanna"),
  ("Sawyer"),
  ("Sayre"),
  ("Schulter"),
  ("Scraper"),
  ("Seiling"),
  ("Seminole"),
  ("Sentinel"),
  ("Sequoyah"),
  ("Shady Grove"),
  ("Shady Grove"),
  ("Shady Grove"),
  ("Shady Point"),
  ("Shamrock"),
  ("Sharon"),
  ("Shattuck"),
  ("Shawnee"),
  ("Shidler"),
  ("Short"),
  ("Silo"),
  ("Simms"),
  ("Skedee"),
  ("Skiatook"),
  ("Slaughterville"),
  ("Slick"),
  ("Smith Village"),
  ("Smithville"),
  ("Snake Creek"),
  ("Snyder"),
  ("Soper"),
  ("Sour John"),
  ("South Coffeyville"),
  ("Sparks"),
  ("Spaulding"),
  ("Spavinaw"),
  ("Spencer"),
  ("Sperry"),
  ("Spiro"),
  ("Sportsmen Acres"),
  ("Sportsmen Acres Community"),
  ("Springer"),
  ("Sterling"),
  ("Stidham"),
  ("Stigler"),
  ("Stillwater"),
  ("Stilwell"),
  ("Stonewall"),
  ("Stony Point"),
  ("Strang"),
  ("Stratford"),
  ("Stringtown"),
  ("Strong City"),
  ("Stroud"),
  ("Stuart"),
  ("Sugden"),
  ("Sulphur"),
  ("Summit"),
  ("Swink"),
  ("Sycamore"),
  ("Sycamore"),
  ("Taft"),
  ("Tagg Flats"),
  ("Tahlequah"),
  ("Talala"),
  ("Talihina"),
  ("Taloga"),
  ("Tamaha"),
  ("Tatums"),
  ("Tecumseh"),
  ("Temple"),
  ("Tenkiller"),
  ("Terlton"),
  ("Terral"),
  ("Texanna"),
  ("Texhoma"),
  ("Texola"),
  ("Thackerville"),
  ("The Village"),
  ("Thomas"),
  ("Taiwah"),
  ("Tipton"),
  ("Tishomingo"),
  ("Tonkawa"),
  ("Tribbey"),
  ("Tryon"),
  ("Tullahassee"),
  ("Tulsa"),
  ("Tupelo"),
  ("Turley"),
  ("Tushka"),
  ("Tuttle"),
  ("Twin Oaks"),
  ("Tyrone"),
  ("Union City"),
  ("Valley Brook"),
  ("Valley Park"),
  ("Valliant"),
  ("Velma"),
  ("Vera"),
  ("Verden"),
  ("Vian"),
  ("Vici"),
  ("Vinita"),
  ("Wagoner"),
  ("Wainwright"),
  ("Wakita"),
  ("Walters"),
  ("Wanette"),
  ("Wann"),
  ("Wapanucka"),
  ("Warner"),
  ("Warr Acres"),
  ("Warwick"),
  ("Washington"),
  ("Watonga"),
  ("Watts"),
  ("Watts Community"),
  ("Waukomis"),
  ("Waurika"),
  ("Wayne"),
  ("Waynoka"),
  ("Weatherford"),
  ("Webb City"),
  ("Webbers Falls"),
  ("Welch"),
  ("Weleetka"),
  ("Welling"),
  ("Wellston"),
  ("West Peavine"),
  ("Westport"),
  ("West Siloam Springs"),
  ("Westville"),
  ("Wetumka"),
  ("Wewoka"),
  ("Whitefield"),
  ("Wickliffe"),
  ("Wilburton"),
  ("Willow"),
  ("Wilson"),
  ("Winchester"),
  ("Wister"),
  ("Woodall"),
  ("Woodlawn Park"),
  ("Woodville"),
  ("Woodward"),
  ("Wright City"),
  ("Wyandotte"),
  ("Wynnewood"),
  ("Wynona"),
  ("Yale"),
  ("Yeager"),
  ("Yukon"),
  ("Zeb"),
  ("Zena"),
  ("Zion"),
  ("Adair Village"),
  ("Adams"),
  ("Adrian"),
  ("Albany"),
  ("Aloha"),
  ("Altamont"),
  ("Amity"),
  ("Antelope"),
  ("Arlington"),
  ("Ashland"),
  ("Astoria"),
  ("Athena"),
  ("Aumsville"),
  ("Aurora"),
  ("Baker City"),
  ("Bandon"),
  ("Banks"),
  ("Barlow"),
  ("Barview"),
  ("Bay City"),
  ("Beaver"),
  ("Beaverton"),
  ("Bend"),
  ("Biggs Junction"),
  ("Boardman"),
  ("Bonanza"),
  ("Brookings"),
  ("Brooks"),
  ("Brownsville"),
  ("Bunker Hill"),
  ("Burns"),
  ("Butte Falls"),
  ("Butteville"),
  ("Canby"),
  ("Cannon Beach"),
  ("Canyon City"),
  ("Canyonville"),
  ("Cape Meares"),
  ("Carlton"),
  ("Cascade Locks"),
  ("Cave Junction"),
  ("Cayuse"),
  ("Cedar Hills"),
  ("Cedar Mill"),
  ("Central Point"),
  ("Chenoweth"),
  ("Chiloquin"),
  ("City of The Dalles"),
  ("Clackamas"),
  ("Clatskanie"),
  ("Cloverdale"),
  ("Coburg"),
  ("Columbia City"),
  ("Condon"),
  ("Coos Bay"),
  ("Coquille"),
  ("Cornelius"),
  ("Corvallis"),
  ("Cottage Grove"),
  ("Cove"),
  ("Creswell"),
  ("Culver"),
  ("Dallas"),
  ("Dayton"),
  ("Dayville"),
  ("Depoe Bay"),
  ("Deschutes River Woods"),
  ("Detroit"),
  ("Donald"),
  ("Drain"),
  ("Dufur"),
  ("Dundee"),
  ("Dunes City"),
  ("Durham"),
  ("Eagle Point"),
  ("Echo"),
  ("Elgin"),
  ("Elkton"),
  ("Enterprise"),
  ("Eola"),
  ("Estacada"),
  ("Eugene"),
  ("Fairview"),
  ("Falls City"),
  ("Florence"),
  ("Forest Grove"),
  ("Fossil"),
  ("Four Corners"),
  ("Garden Home-Whitford"),
  ("Garibaldi"),
  ("Gaston"),
  ("Gates"),
  ("Gearhart"),
  ("Gervais"),
  ("Gladstone"),
  ("Glendale"),
  ("Glide"),
  ("Gold Beach"),
  ("Gold Hill"),
  ("Gopher Flats"),
  ("Grand Ronde"),
  ("Granite"),
  ("Grants Pass"),
  ("Grass Valley"),
  ("Green"),
  ("Greenhorn"),
  ("Gresham"),
  ("Haines"),
  ("Halfway"),
  ("Halsey"),
  ("Happy Valley"),
  ("Harbeck-Fruitdale"),
  ("Harbor"),
  ("Harrisburg"),
  ("Hayesville"),
  ("Hebo"),
  ("Helix"),
  ("Heppner"),
  ("Hermiston"),
  ("Hillsboro"),
  ("Hines"),
  ("Hood River"),
  ("Hubbard"),
  ("Huntington"),
  ("Idanha"),
  ("Imbler"),
  ("Independence"),
  ("Ione"),
  ("Irrigon"),
  ("Island City"),
  ("Jacksonville"),
  ("Jefferson"),
  ("Jennings Lodge"),
  ("John Day"),
  ("Johnson City"),
  ("Jordan Valley"),
  ("Joseph"),
  ("Junction City"),
  ("Keizer"),
  ("King City"),
  ("Kirkpatrick"),
  ("Klamath Falls"),
  ("Labish Village"),
  ("Lafayette"),
  ("La Grande"),
  ("Lake Oswego"),
  ("Lakeside"),
  ("Lakeview"),
  ("La Pine"),
  ("Lebanon"),
  ("Lexington"),
  ("Lincoln Beach"),
  ("Lincoln City"),
  ("Lonerock"),
  ("Long Creek"),
  ("Lostine"),
  ("Lowell"),
  ("Lyons"),
  ("McMinnville"),
  ("Madras"),
  ("Malin"),
  ("Manzanita"),
  ("Marion"),
  ("Maupin"),
  ("Maywood Park"),
  ("Medford"),
  ("Mehama"),
  ("Merrill"),
  ("Metolius"),
  ("Metzger"),
  ("Mill City"),
  ("Millersburg"),
  ("Milton-Freewater"),
  ("Milwaukie"),
  ("Mission"),
  ("Mitchell"),
  ("Molalla"),
  ("Monmouth"),
  ("Monroe"),
  ("Monument"),
  ("Moro"),
  ("Mosier"),
  ("Mount Angel"),
  ("Mount Hood Village"),
  ("Mount Vernon"),
  ("Myrtle Creek"),
  ("Myrtle Point"),
  ("Nehalem"),
  ("Neskowin"),
  ("Netarts"),
  ("Newberg"),
  ("Newport"),
  ("North Bend"),
  ("North Plains"),
  ("North Powder"),
  ("Nyssa"),
  ("Oak Grove"),
  ("Oak Hills"),
  ("Oakland"),
  ("Oakridge"),
  ("Oatfield"),
  ("Oceanside"),
  ("Odell"),
  ("Ontario"),
  ("Oregon City"),
  ("Pacific City"),
  ("Paisley"),
  ("Parkdale"),
  ("Pendleton"),
  ("Philomath"),
  ("Phoenix"),
  ("Pilot Rock"),
  ("Pine Grove"),
  ("Pine Hollow"),
  ("Portland"),
  ("Port Orford"),
  ("Powers"),
  ("Prairie City"),
  ("Prescott"),
  ("Prineville"),
  ("Rainier"),
  ("Raleigh Hills"),
  ("Redmond"),
  ("Redwood"),
  ("Reedsport"),
  ("Richland"),
  ("Rickreall"),
  ("Riddle"),
  ("Rivergrove"),
  ("Riverside"),
  ("Rockaway Beach"),
  ("Rockcreek"),
  ("Rogue River"),
  ("Roseburg"),
  ("Roseburg North"),
  ("Rose Lodge"),
  ("Rowena"),
  ("Rufus"),
  ("St. Helens"),
  ("St. Paul"),
  ("Salem"),
  ("Sandy"),
  ("Scappoose"),
  ("Scio"),
  ("Scotts Mills"),
  ("Seaside"),
  ("Seneca"),
  ("Shady Cove"),
  ("Shaniko"),
  ("Sheridan"),
  ("Sherwood"),
  ("Siletz"),
  ("Silverton"),
  ("Sisters"),
  ("Sodaville"),
  ("South Lebanon"),
  ("Spray"),
  ("Springfield"),
  ("Stanfield"),
  ("Stayton"),
  ("Sublimity"),
  ("Summerville"),
  ("Sumpter"),
  ("Sunnyside"),
  ("Sutherlin"),
  ("Sweet Home"),
  ("Talent"),
  ("Tangent"),
  ("Terrebonne"),
  ("Three Rivers"),
  ("Tigard"),
  ("Tillamook"),
  ("Toledo"),
  ("Tri-City"),
  ("Troutdale"),
  ("Tualatin"),
  ("Turner"),
  ("Tutuilla"),
  ("Tygh Valley"),
  ("Ukiah"),
  ("Umatilla"),
  ("Union"),
  ("Unity"),
  ("Vale"),
  ("Veneta"),
  ("Vernonia"),
  ("Waldport"),
  ("Wallowa"),
  ("Wamic"),
  ("Warm Springs"),
  ("Warrenton"),
  ("Wasco"),
  ("Waterloo"),
  ("Westfir"),
  ("West Haven-Sylvan"),
  ("West Linn"),
  ("Weston"),
  ("West Slope"),
  ("Wheeler"),
  ("White City"),
  ("Willamina"),
  ("Wilsonville"),
  ("Winchester Bay"),
  ("Winston"),
  ("Woodburn"),
  ("Wood Village"),
  ("Yachats"),
  ("Yamhill"),
  ("Yoncalla"),
  ("Aaronsburg"),
  ("Abbottstown"),
  ("Adamsburg"),
  ("Adamstown"),
  ("Adamsville"),
  ("Addison"),
  ("Akron"),
  ("Alba"),
  ("Albion"),
  ("Alburtis"),
  ("Aldan"),
  ("Alexandria"),
  ("Aliquippa"),
  ("Allenport"),
  ("Allentown"),
  ("Almedia"),
  ("Altamont"),
  ("Altoona"),
  ("Ambler"),
  ("Ambridge"),
  ("Amity Gardens"),
  ("Ancient Oaks"),
  ("Annville"),
  ("Apollo"),
  ("Applewold"),
  ("Archbald"),
  ("Ardmore"),
  ("Arendtsville"),
  ("Aristes"),
  ("Arlington Heights"),
  ("Armagh"),
  ("Arnold"),
  ("Arona"),
  ("Ashland"),
  ("Ashley"),
  ("Ashville"),
  ("Aspinwall"),
  ("Atglen"),
  ("Athens"),
  ("Atlantic"),
  ("Atwood"),
  ("Auburn"),
  ("Audubon"),
  ("Austin"),
  ("Avalon"),
  ("Avis"),
  ("Avoca"),
  ("Avon"),
  ("Avondale"),
  ("Avonia"),
  ("Avonmore"),
  ("Back Mountain"),
  ("Baden"),
  ("Baidland"),
  ("Baldwin"),
  ("Bally"),
  ("Bangor"),
  ("Barkeyville"),
  ("Bath"),
  ("Beallsville"),
  ("Bear Creek Village"),
  ("Bear Lake"),
  ("Beaver"),
  ("Beaverdale-Lloydell"),
  ("Beaver Falls"),
  ("Beaver Meadows"),
  ("Beaver Springs"),
  ("Beavertown"),
  ("Bechtelsville"),
  ("Bedford"),
  ("Beech Creek"),
  ("Belfast"),
  ("Bell Acres"),
  ("Bellefonte"),
  ("Belle Vernon"),
  ("Belleville"),
  ("Bellevue"),
  ("Bellwood"),
  ("Belmont"),
  ("Ben Avon"),
  ("Ben Avon Heights"),
  ("Bendersville"),
  ("Bendersville Station-Aspers"),
  ("Benson"),
  ("Bentleyville"),
  ("Benton"),
  ("Berlin"),
  ("Bernville"),
  ("Berrysburg"),
  ("Berwick"),
  ("Bessemer"),
  ("Bethany"),
  ("Bethel Park"),
  ("Bethlehem"),
  ("Beurys Lake"),
  ("Big Beaver"),
  ("Biglerville"),
  ("Big Run"),
  ("Birdsboro"),
  ("Birmingham"),
  ("Black Lick"),
  ("Blain"),
  ("Blairsville"),
  ("Blakely"),
  ("Blanchard"),
  ("Blawnox"),
  ("Bloomfield"),
  ("Blooming Valley"),
  ("Bloomsburg"),
  ("Blossburg"),
  ("Blue Bell"),
  ("Boalsburg"),
  ("Boiling Springs"),
  ("Bolivar"),
  ("Bonneauville"),
  ("Boothwyn"),
  ("Boswell"),
  ("Bowmanstown"),
  ("Boyertown"),
  ("Brackenridge"),
  ("Braddock"),
  ("Braddock Hills"),
  ("Bradford"),
  ("Bradfordwoods"),
  ("Branchdale"),
  ("Brandonville"),
  ("Brentwood"),
  ("Bressler-Enhaut-Oberlin"),
  ("Briar Creek"),
  ("Brickerville"),
  ("Bridgeport"),
  ("Bridgeville"),
  ("Bridgewater"),
  ("Brisbin"),
  ("Bristol"),
  ("Brittany Farms-Highlands"),
  ("Broad Top City"),
  ("Brockway"),
  ("Brodheadsville"),
  ("Brookhaven"),
  ("Brookville"),
  ("Broomall"),
  ("Brownstown"),
  ("Brownsville"),
  ("Bruin"),
  ("Bryn Athyn"),
  ("Bryn Mawr"),
  ("Buckhorn"),
  ("Buck Run"),
  ("Burgettstown"),
  ("Burlington"),
  ("Burnham"),
  ("Burnside"),
  ("Butler"),
  ("California"),
  ("Callensburg"),
  ("Callery"),
  ("Callimont"),
  ("Calumet-Norvelt"),
  ("Cambridge Springs"),
  ("Campbelltown"),
  ("Camp Hill"),
  ("Canadohta Lake"),
  ("Canonsburg"),
  ("Canton"),
  ("Carbondale"),
  ("Carlisle"),
  ("Carmichaels"),
  ("Carnegie"),
  ("Carnot-Moon"),
  ("Carrolltown"),
  ("Carroll Valley"),
  ("Cashtown-McKnightstown"),
  ("Cassandra"),
  ("Casselman"),
  ("Cassville"),
  ("Castanea"),
  ("Castle Shannon"),
  ("Catasauqua"),
  ("Catawissa"),
  ("Cecil-Bishop"),
  ("Centerport"),
  ("Centerville"),
  ("Centerville"),
  ("Central City"),
  ("Centralia"),
  ("Centre Hall"),
  ("Chalfant"),
  ("Chalfont"),
  ("Chambersburg"),
  ("Chapman"),
  ("Charleroi"),
  ("Cherry Tree"),
  ("Cherry Valley"),
  ("Chester"),
  ("Chesterbrook"),
  ("Chester Heights"),
  ("Chester Hill"),
  ("Chester Township"),
  ("Chest Springs"),
  ("Cheswick"),
  ("Chevy Chase Heights"),
  ("Chicora"),
  ("Christiana"),
  ("Churchill"),
  ("Churchville"),
  ("Clairton"),
  ("Clarence"),
  ("Clarendon"),
  ("Clarion"),
  ("Clark"),
  ("Clarks Green"),
  ("Clarks Summit"),
  ("Clarksville"),
  ("Claysburg"),
  ("Claysville"),
  ("Clearfield"),
  ("Cleona"),
  ("Clifton Heights"),
  ("Clintonville"),
  ("Clymer"),
  ("Coal Center"),
  ("Coaldale"),
  ("Coaldale"),
  ("Coalmont"),
  ("Coalport"),
  ("Coatesville"),
  ("Coburn"),
  ("Cochranton"),
  ("Cokeburg"),
  ("Collegeville"),
  ("Collingdale"),
  ("Colonial Park"),
  ("Columbia"),
  ("Colver"),
  ("Colwyn"),
  ("Commodore"),
  ("Confluence"),
  ("Conneaut Lake"),
  ("Conneaut Lakeshore"),
  ("Conneautville"),
  ("Connellsville"),
  ("Connoquenessing"),
  ("Conshohocken"),
  ("Conway"),
  ("Conyngham"),
  ("Coopersburg"),
  ("Cooperstown"),
  ("Coplay"),
  ("Coraopolis"),
  ("Cornwall"),
  ("Cornwells Heights-Eddington"),
  ("Corry"),
  ("Corsica"),
  ("Coudersport"),
  ("Courtdale"),
  ("Crabtree"),
  ("Crafton"),
  ("Cranesville"),
  ("Creekside"),
  ("Cresson"),
  ("Cressona"),
  ("Cross Roads"),
  ("Croydon"),
  ("Curtisville"),
  ("Curwensville"),
  ("Daisytown"),
  ("Dale"),
  ("Dallas"),
  ("Dallastown"),
  ("Dalton"),
  ("Danville"),
  ("Darby"),
  ("Darby Township"),
  ("Darlington"),
  ("Dauphin"),
  ("Davidsville"),
  ("Dawson"),
  ("Dayton"),
  ("Deemston"),
  ("Deer Lake"),
  ("Delano"),
  ("Delaware Water Gap"),
  ("Delmont"),
  ("Delta"),
  ("Denver"),
  ("Derry"),
  ("Devon-Berwyn"),
  ("Dickson City"),
  ("Dicksonville"),
  ("Dillsburg"),
  ("Donaldson"),
  ("Donegal"),
  ("Donora"),
  ("Dormont"),
  ("Dover"),
  ("Downingtown"),
  ("Doylestown"),
  ("Dravosburg"),
  ("Drexel Hill"),
  ("Driftwood"),
  ("Dublin"),
  ("DuBois"),
  ("Duboistown"),
  ("Dudley"),
  ("Dunbar"),
  ("Duncannon"),
  ("Duncansville"),
  ("Dunlevy"),
  ("Dunmore"),
  ("Dunnstown"),
  ("Dupont"),
  ("Duquesne"),
  ("Duryea"),
  ("Dushore"),
  ("Eagles Mere"),
  ("Eagleville"),
  ("East Bangor"),
  ("East Berlin"),
  ("East Berwick"),
  ("East Brady"),
  ("East Butler"),
  ("East Conemaugh"),
  ("East Greenville"),
  ("East Lansdowne"),
  ("Eastlawn Gardens"),
  ("East McKeesport"),
  ("East Norriton"),
  ("Easton"),
  ("East Petersburg"),
  ("East Pittsburgh"),
  ("East Prospect"),
  ("East Rochester"),
  ("East Rutherford"),
  ("East Side"),
  ("East Stroudsburg"),
  ("East Uniontown"),
  ("Eastvale"),
  ("East Vandergrift"),
  ("East Washington"),
  ("East York"),
  ("Eau Claire"),
  ("Ebensburg"),
  ("Economy"),
  ("Eddystone"),
  ("Edgewood"),
  ("Edgewood"),
  ("Edgeworth"),
  ("Edinboro"),
  ("Edwardsville"),
  ("Ehrenfeld"),
  ("Elco"),
  ("Elderton"),
  ("Eldred"),
  ("Elgin"),
  ("Elim"),
  ("Elizabeth"),
  ("Elizabethtown"),
  ("Elizabethville"),
  ("Elkland"),
  ("Ellport"),
  ("Ellsworth"),
  ("Ellwood City"),
  ("Elverson"),
  ("Elysburg"),
  ("Emigsville"),
  ("Emlenton"),
  ("Emmaus"),
  ("Emporium"),
  ("Emsworth"),
  ("Englewood"),
  ("Enola"),
  ("Enon Valley"),
  ("Ephrata"),
  ("Erie"),
  ("Ernest"),
  ("Espy"),
  ("Etna"),
  ("Evansburg"),
  ("Evans City"),
  ("Everett"),
  ("Everson"),
  ("Exeter"),
  ("Export"),
  ("Exton"),
  ("Eyers Grove"),
  ("Factoryville"),
  ("Fairchance"),
  ("Fairdale"),
  ("Fairfield"),
  ("Fairless Hills"),
  ("Fairview"),
  ("Fairview-Ferndale"),
  ("Falls Creek"),
  ("Fallston"),
  ("Farrell"),
  ("Fawn Grove"),
  ("Fayette City"),
  ("Fayetteville"),
  ("Feasterville-Trevose"),
  ("Felton"),
  ("Ferndale"),
  ("Fernville"),
  ("Fernway"),
  ("Finleyville"),
  ("Fleetwood"),
  ("Flemington"),
  ("Flourtown"),
  ("Flying Hills"),
  ("Folcroft"),
  ("Folsom"),
  ("Ford City"),
  ("Ford Cliff"),
  ("Forest City"),
  ("Forest Hills"),
  ("Forksville"),
  ("Forrestville"),
  ("Fort Indiantown Gap"),
  ("Fort Washington"),
  ("Forty Fort"),
  ("Foundryville"),
  ("Fountain Hill"),
  ("Fountain Springs"),
  ("Foxburg"),
  ("Fox Chapel"),
  ("Fox Run"),
  ("Frackville"),
  ("Frankfort Springs"),
  ("Franklin"),
  ("Franklin"),
  ("Franklin Park"),
  ("Franklintown"),
  ("Fredericksburg"),
  ("Fredericksburg"),
  ("Fredericktown-Millsboro"),
  ("Fredonia"),
  ("Freeburg"),
  ("Freedom"),
  ("Freeland"),
  ("Freemansburg"),
  ("Freeport"),
  ("Friedens"),
  ("Friedensburg"),
  ("Friendsville"),
  ("Fullerton"),
  ("Galeton"),
  ("Gallitzin"),
  ("Gap"),
  ("Garden View"),
  ("Garrett"),
  ("Gastonville"),
  ("Geistown"),
  ("Geneva"),
  ("Georgetown"),
  ("Gettysburg"),
  ("Gilberton"),
  ("Gilbertsville"),
  ("Girard"),
  ("Girardville"),
  ("Glasgow"),
  ("Glassport"),
  ("Glenburn"),
  ("Glen Campbell"),
  ("Glendon"),
  ("Glenfield"),
  ("Glen Hope"),
  ("Glen Lyon"),
  ("Glenolden"),
  ("Glen Rock"),
  ("Glenside"),
  ("Goldsboro"),
  ("Gordon"),
  ("Grampian"),
  ("Grantley"),
  ("Grapeville"),
  ("Gratz"),
  ("Great Bend"),
  ("Greencastle"),
  ("Green Hills"),
  ("Green Lane"),
  ("Greensboro"),
  ("Greensburg"),
  ("Green Tree"),
  ("Greenville"),
  ("Grier City-Park Crest"),
  ("Grindstone-Rowes Run"),
  ("Grove City"),
  ("Guilford"),
  ("Guys Mills"),
  ("Halfway House"),
  ("Halifax"),
  ("Hallam"),
  ("Hallstead"),
  ("Hamburg"),
  ("Hampton"),
  ("Hampton Township"),
  ("Hanover"),
  ("Harleysville"),
  ("Harmonsburg"),
  ("Harmony"),
  ("Harmony Township"),
  ("Harrisburg"),
  ("Harrison City"),
  ("Harrison Township"),
  ("Harrisville"),
  ("Hartleton"),
  ("Hartstown"),
  ("Harveys Lake"),
  ("Hasson Heights"),
  ("Hastings"),
  ("Hatboro"),
  ("Hatfield"),
  ("Hawley"),
  ("Hawthorn"),
  ("Haysville"),
  ("Hazleton"),
  ("Heckscherville"),
  ("Heidelberg"),
  ("Heilwood"),
  ("Hellertown"),
  ("Herminie"),
  ("Hermitage"),
  ("Herndon"),
  ("Hershey"),
  ("Highland Park"),
  ("Highspire"),
  ("Hiller"),
  ("Hokendauqua"),
  ("Hollidaysburg"),
  ("Homeacre-Lyndora"),
  ("Homer City"),
  ("Homestead"),
  ("Hometown"),
  ("Homewood"),
  ("Honesdale"),
  ("Honey Brook"),
  ("Hookstown"),
  ("Hooversville"),
  ("Hop Bottom"),
  ("Hopewell"),
  ("Hopwood"),
  ("Horsham"),
  ("Houserville"),
  ("Houston"),
  ("Houtzdale"),
  ("Howard"),
  ("Hughestown"),
  ("Hughesville"),
  ("Hulmeville"),
  ("Hummelstown"),
  ("Hummels Wharf"),
  ("Hunker"),
  ("Huntingdon"),
  ("Hyde"),
  ("Hyde Park"),
  ("Hydetown"),
  ("Hyndman"),
  ("Imperial-Enlow"),
  ("Indiana"),
  ("Indian Lake"),
  ("Industry"),
  ("Ingram"),
  ("Iola"),
  ("Irvona"),
  ("Irwin"),
  ("Ivyland"),
  ("Jackson Center"),
  ("Jacksonville"),
  ("Jacobus"),
  ("Jamestown"),
  ("Jamison City"),
  ("Jeannette"),
  ("Jeddo"),
  ("Jefferson"),
  ("Jefferson"),
  ("Jefferson Hills"),
  ("Jenkintown"),
  ("Jennerstown"),
  ("Jermyn"),
  ("Jerome"),
  ("Jersey Shore"),
  ("Jerseytown"),
  ("Jessup"),
  ("Jim Thorpe"),
  ("Johnsonburg"),
  ("Johnstown"),
  ("Jonestown"),
  ("Jonestown"),
  ("Julian"),
  ("Juniata Terrace"),
  ("Kane"),
  ("Karns City"),
  ("Kenhorst"),
  ("Kenilworth"),
  ("Kennedy Township"),
  ("Kennett Square"),
  ("King of Prussia"),
  ("Kingston"),
  ("Kistler"),
  ("Kittanning"),
  ("Klingerstown"),
  ("Knox"),
  ("Knoxville"),
  ("Koppel"),
  ("Kratzerville"),
  ("Kreamer"),
  ("Kulpmont"),
  ("Kulpsville"),
  ("Kutztown"),
  ("Laceyville"),
  ("Laflin"),
  ("Lake City"),
  ("Lake Heritage"),
  ("Lake Meade"),
  ("Lake Wynonah"),
  ("Lancaster"),
  ("Landingville"),
  ("Landisburg"),
  ("Lanesboro"),
  ("Langhorne"),
  ("Langhorne Manor"),
  ("Lansdale"),
  ("Lansdowne"),
  ("Lansford"),
  ("Laporte"),
  ("Larksville"),
  ("Latrobe"),
  ("Laureldale"),
  ("Laurel Mountain"),
  ("Laurel Run"),
  ("Lavelle-Locustdale"),
  ("Lawnton"),
  ("Lawrence Park"),
  ("Lawrenceville"),
  ("Lawson Heights"),
  ("Leacock-Leola-Bareville"),
  ("Lebanon"),
  ("Lebanon South"),
  ("Leechburg"),
  ("Leesport"),
  ("Leetsdale"),
  ("Lehighton"),
  ("Leith-Hatfield"),
  ("Lemont"),
  ("Lemoyne"),
  ("Lenape Heights"),
  ("Lenhartsville"),
  ("Le Raysville"),
  ("Levittown"),
  ("Lewisberry"),
  ("Lewisburg"),
  ("Lewis Run"),
  ("Lewistown"),
  ("Liberty"),
  ("Liberty"),
  ("Lightstreet"),
  ("Ligonier"),
  ("Lilly"),
  ("Lima"),
  ("Lime Ridge"),
  ("Lincoln"),
  ("Lincolnville"),
  ("Linesville"),
  ("Linglestown"),
  ("Linntown"),
  ("Linwood"),
  ("Lionville-Marchwood"),
  ("Lititz"),
  ("Little Meadows"),
  ("Littlestown"),
  ("Liverpool"),
  ("Lock Haven"),
  ("Locustdale"),
  ("Loganton"),
  ("Loganville"),
  ("Long Branch"),
  ("Lorain"),
  ("Lorane"),
  ("Loretto"),
  ("Lower Allen"),
  ("Lower Burrell"),
  ("Lucerne Mines"),
  ("Lumber City"),
  ("Luzerne"),
  ("Lykens"),
  ("Lynnwood-Pricedale"),
  ("Lyons"),
  ("McAdoo"),
  ("McAlisterville"),
  ("McCandless Township"),
  ("McChesneytown-Loyalhanna"),
  ("McClure"),
  ("McConnellsburg"),
  ("McDonald"),
  ("McEwensville"),
  ("McGovern"),
  ("McKean"),
  ("McKeansburg"),
  ("McKeesport"),
  ("McKees Rocks"),
  ("McMurray"),
  ("McSherrystown"),
  ("Macungie"),
  ("McVeytown"),
  ("Madison"),
  ("Madisonburg"),
  ("Mahaffey"),
  ("Mahanoy City"),
  ("Mainville"),
  ("Malvern"),
  ("Manchester"),
  ("Manheim"),
  ("Manns Choice"),
  ("Manor"),
  ("Manorville"),
  ("Mansfield"),
  ("Maple Glen"),
  ("Mapleton"),
  ("Marcus Hook"),
  ("Marianna"),
  ("Marietta"),
  ("Marion Center"),
  ("Marion Heights"),
  ("Marklesburg"),
  ("Markleysburg"),
  ("Marlin"),
  ("Mars"),
  ("Marshallton"),
  ("Martinsburg"),
  ("Marysville"),
  ("Masontown"),
  ("Matamoras"),
  ("Mayfield"),
  ("Maytown"),
  ("Meadowood"),
  ("Meadville"),
  ("Mechanicsburg"),
  ("Mechanicsville"),
  ("Mechanicsville"),
  ("Media"),
  ("Mercer"),
  ("Mercersburg"),
  ("Meridian"),
  ("Meshoppen"),
  ("Mexico"),
  ("Meyersdale"),
  ("Middleburg"),
  ("Middleport"),
  ("Middletown"),
  ("Middletown"),
  ("Midland"),
  ("Midway"),
  ("Midway"),
  ("Mifflin"),
  ("Mifflinburg"),
  ("Mifflintown"),
  ("Mifflinville"),
  ("Milesburg"),
  ("Milford"),
  ("Millbourne"),
  ("Mill Creek"),
  ("Millersburg"),
  ("Millerstown"),
  ("Millersville"),
  ("Mill Hall"),
  ("Millheim"),
  ("Millvale"),
  ("Mill Village"),
  ("Millville"),
  ("Milroy"),
  ("Milton"),
  ("Minersville"),
  ("Modena"),
  ("Mohnton"),
  ("Monaca"),
  ("Monessen"),
  ("Monongahela"),
  ("Monroe"),
  ("Mont Alto"),
  ("Montgomery"),
  ("Montgomeryville"),
  ("Montoursville"),
  ("Montrose"),
  ("Monument"),
  ("Moosic"),
  ("Morrisville"),
  ("Morrisville"),
  ("Morton"),
  ("Moscow"),
  ("Mountainhome"),
  ("Mountain Top"),
  ("Mount Carbon"),
  ("Mount Carmel"),
  ("Mount Cobb"),
  ("Mount Gretna"),
  ("Mount Gretna Heights"),
  ("Mount Holly Springs"),
  ("Mount Jewett"),
  ("Mount Joy"),
  ("Mount Lebanon"),
  ("Mount Oliver"),
  ("Mount Penn"),
  ("Mount Pleasant"),
  ("Mount Pleasant Mills"),
  ("Mount Pocono"),
  ("Mount Union"),
  ("Mountville"),
  ("Mount Wolf"),
  ("Muncy"),
  ("Munhall"),
  ("Municipality of Monroeville"),
  ("Municipality of Murrysville"),
  ("Myerstown"),
  ("Nanticoke"),
  ("Nanty-Glo"),
  ("Narberth"),
  ("Nazareth"),
  ("Nemacolin"),
  ("Nescopeck"),
  ("Nesquehoning"),
  ("Nether Providence Township"),
  ("New Albany"),
  ("New Alexandria"),
  ("New Baltimore"),
  ("New Beaver"),
  ("New Berlin"),
  ("New Bethlehem"),
  ("New Boston-Morea"),
  ("New Brighton"),
  ("New Britain"),
  ("New Buffalo"),
  ("Newburg"),
  ("Newburg"),
  ("New Castle"),
  ("New Castle Northwest"),
  ("New Centerville"),
  ("New Columbus"),
  ("New Cumberland"),
  ("New Eagle"),
  ("Newell"),
  ("New Florence"),
  ("New Freedom"),
  ("New Galilee"),
  ("New Holland"),
  ("New Hope"),
  ("New Kensington"),
  ("New Kingstown"),
  ("New Lebanon"),
  ("Newmanstown"),
  ("New Milford"),
  ("New Morgan"),
  ("New Oxford"),
  ("New Paris"),
  ("New Philadelphia"),
  ("Newport"),
  ("New Ringgold"),
  ("Newry"),
  ("New Salem"),
  ("New Salem-Buffington"),
  ("New Stanton"),
  ("Newton Hamilton"),
  ("Newtown"),
  ("Newtown"),
  ("Newtown Grant"),
  ("Newville"),
  ("New Washington"),
  ("New Wilmington"),
  ("Nicholson"),
  ("Nixon"),
  ("Norristown"),
  ("Northampton"),
  ("North Apollo"),
  ("North Belle Vernon"),
  ("North Braddock"),
  ("North Catasauqua"),
  ("North Charleroi"),
  ("North East"),
  ("Northern Cambria"),
  ("North Irwin"),
  ("North Philipsburg"),
  ("Northumberland"),
  ("North Vandergrift-Pleasant View"),
  ("North Versailles"),
  ("North Wales"),
  ("Northwest Harborcreek"),
  ("North York"),
  ("Norwood"),
  ("Nuangola"),
  ("Numidia"),
  ("Nuremberg"),
  ("Oakdale"),
  ("Oak Hills"),
  ("Oakland"),
  ("Oakland"),
  ("Oakmont"),
  ("Oakwood"),
  ("O'Hara Township"),
  ("Ohiopyle"),
  ("Ohioville"),
  ("Oil City"),
  ("Oklahoma"),
  ("Old Forge"),
  ("Old Orchard"),
  ("Oliver"),
  ("Olyphant"),
  ("Oneida"),
  ("Orangeville"),
  ("Orbisonia"),
  ("Orchard Hills"),
  ("Oreland"),
  ("Orrstown"),
  ("Orrtanna"),
  ("Orwigsburg"),
  ("Osborne"),
  ("Osceola Mills"),
  ("Oswayo"),
  ("Oxford"),
  ("Paint"),
  ("Palmer Heights"),
  ("Palmerton"),
  ("Palmyra"),
  ("Palo Alto"),
  ("Paoli"),
  ("Paradise"),
  ("Parker"),
  ("Parkesburg"),
  ("Park Forest Village"),
  ("Parkside"),
  ("Parkville"),
  ("Parryville"),
  ("Patterson Heights"),
  ("Patterson Township"),
  ("Patton"),
  ("Paxtang"),
  ("Paxtonia"),
  ("Paxtonville"),
  ("Pen Argyl"),
  ("Penbrook"),
  ("Penn"),
  ("Penndel"),
  ("Penn Hills"),
  ("Penn Lake Park"),
  ("Pennsburg"),
  ("Pennsbury Village"),
  ("Penns Creek"),
  ("Pennville"),
  ("Penn Wynne"),
  ("Perkasie"),
  ("Perryopolis"),
  ("Petersburg"),
  ("Petrolia"),
  ("Philadelphia"),
  ("Philipsburg"),
  ("Phoenixville"),
  ("Picture Rocks"),
  ("Pillow"),
  ("Pine Glen"),
  ("Pine Grove"),
  ("Pine Grove Mills"),
  ("Pitcairn"),
  ("Pittsburgh"),
  ("Pittston"),
  ("Plainfield"),
  ("Platea"),
  ("Pleasant Gap"),
  ("Pleasant Hill"),
  ("Pleasant Hills"),
  ("Pleasantville"),
  ("Pleasantville"),
  ("Plum"),
  ("Plumville"),
  ("Plymouth"),
  ("Plymouth Meeting"),
  ("Plymptonville"),
  ("Pocono Pines"),
  ("Point Marion"),
  ("Polk"),
  ("Portage"),
  ("Port Allegany"),
  ("Port Carbon"),
  ("Port Clinton"),
  ("Portersville"),
  ("Portland"),
  ("Port Matilda"),
  ("Port Royal"),
  ("Port Trevorton"),
  ("Port Vue"),
  ("Pottsgrove"),
  ("Pottstown"),
  ("Pottsville"),
  ("Pringle"),
  ("Progress"),
  ("Prompton"),
  ("Prospect"),
  ("Prospect Park"),
  ("Punxsutawney"),
  ("Pymatuning Central"),
  ("Pymatuning North"),
  ("Pymatuning South"),
  ("Quakertown"),
  ("Quarryville"),
  ("Quentin"),
  ("Radnor Township"),
  ("Railroad"),
  ("Rainsburg"),
  ("Ramblewood"),
  ("Ramey"),
  ("Rankin"),
  ("Ravine"),
  ("Reading"),
  ("Reamstown"),
  ("Rebersburg"),
  ("Red Hill"),
  ("Red Lion"),
  ("Reedsville"),
  ("Reiffton"),
  ("Reinerton-Orwin-Muir"),
  ("Renningers"),
  ("Renovo"),
  ("Republic"),
  ("Reserve Township"),
  ("Reynoldsville"),
  ("Rheems"),
  ("Rices Landing"),
  ("Riceville"),
  ("Richboro"),
  ("Richfield"),
  ("Richland"),
  ("Richlandtown"),
  ("Ridgway"),
  ("Ridley Park"),
  ("Riegelsville"),
  ("Rimersburg"),
  ("Ringtown"),
  ("Riverside"),
  ("Roaring Spring"),
  ("Robesonia"),
  ("Robinson Township"),
  ("Rochester"),
  ("Rockhill Furnace"),
  ("Rockledge"),
  ("Rockwood"),
  ("Rohrsburg"),
  ("Rome"),
  ("Roscoe"),
  ("Roseto"),
  ("Rose Valley"),
  ("Roseville"),
  ("Rossiter"),
  ("Rosslyn Farms"),
  ("Ross Township"),
  ("Rothsville"),
  ("Rouseville"),
  ("Rouzerville"),
  ("Royalton"),
  ("Royersford"),
  ("Rupert"),
  ("Rural Valley"),
  ("Russellton"),
  ("Rutherford"),
  ("Rutledge"),
  ("Saegertown"),
  ("St. Clair"),
  ("St. Clairsville"),
  ("St. Lawrence"),
  ("St. Marys"),
  ("St. Michael-Sidman"),
  ("St. Petersburg"),
  ("Salisbury"),
  ("Salix-Beauty Line Park"),
  ("Salladasburg"),
  ("Saltillo"),
  ("Saltsburg"),
  ("Salunga-Landisville"),
  ("Sanatoga"),
  ("Sand Hill"),
  ("Sandy"),
  ("Sandy Lake"),
  ("Sandy Ridge"),
  ("Sankertown"),
  ("Saxonburg"),
  ("Saxton"),
  ("Sayre"),
  ("Scalp Level"),
  ("Schaefferstown"),
  ("Schellsburg"),
  ("Schlusser"),
  ("Schnecksville"),
  ("Schuylkill Haven"),
  ("Schwenksville"),
  ("Scottdale"),
  ("Scott Township"),
  ("Scranton"),
  ("Selinsgrove"),
  ("Sellersville"),
  ("Seltzer"),
  ("Seneca"),
  ("Seven Fields"),
  ("Seven Springs"),
  ("Seven Valleys"),
  ("Seward"),
  ("Sewickley"),
  ("Sewickley Heights"),
  ("Sewickley Hills"),
  ("Shade Gap"),
  ("Shaler Township"),
  ("Shamokin"),
  ("Shamokin Dam"),
  ("Shanksville"),
  ("Shanor-Northvue"),
  ("Sharon"),
  ("Sharon Hill"),
  ("Sharpsburg"),
  ("Sharpsville"),
  ("Sheakleyville"),
  ("Sheffield"),
  ("Shelocta"),
  ("Shenandoah"),
  ("Shenandoah Heights"),
  ("Sheppton"),
  ("Shickshinny"),
  ("Shillington"),
  ("Shiloh"),
  ("Shinglehouse"),
  ("Shippensburg"),
  ("Shippenville"),
  ("Shippingport"),
  ("Shiremanstown"),
  ("Shirleysburg"),
  ("Shoemakersville"),
  ("Shrewsbury"),
  ("Silverdale"),
  ("Sinking Spring"),
  ("Skippack"),
  ("Skyline View"),
  ("Slabtown"),
  ("Slatington"),
  ("Slickville"),
  ("Sligo"),
  ("Slippery Rock"),
  ("Smethport"),
  ("Smicksburg"),
  ("Smithfield"),
  ("Smithton"),
  ("Snow Shoe"),
  ("S.N.P.J."),
  ("Snydertown"),
  ("Somerset"),
  ("Souderton"),
  ("South Bethlehem"),
  ("South Coatesville"),
  ("South Connellsville"),
  ("South Fork"),
  ("South Greensburg"),
  ("South Heights"),
  ("Southmont"),
  ("South New Castle"),
  ("South Park Township"),
  ("South Philipsburg"),
  ("South Pottstown"),
  ("South Renovo"),
  ("South Waverly"),
  ("Southwest Greensburg"),
  ("South Williamsport"),
  ("Spartansburg"),
  ("Speers"),
  ("Springboro"),
  ("Spring City"),
  ("Springdale"),
  ("Springetts Manor-Yorklyn"),
  ("Springfield"),
  ("Spring Grove"),
  ("Spring Hill"),
  ("Spring House"),
  ("Spring Mills"),
  ("Spring Mount"),
  ("Spring Ridge"),
  ("Spry"),
  ("Starrucca"),
  ("State College"),
  ("Steelton"),
  ("Stewartstown"),
  ("Stillwater"),
  ("Stockdale"),
  ("Stockertown"),
  ("Stoneboro"),
  ("Stonybrook-Wilshire"),
  ("Stormstown"),
  ("Stowe"),
  ("Stowe Township"),
  ("Stoystown"),
  ("Strasburg"),
  ("Strattanville"),
  ("Strausstown"),
  ("Stroudsburg"),
  ("Sturgeon-Noblestown"),
  ("Sugarcreek"),
  ("Sugar Grove"),
  ("Sugar Notch"),
  ("Summerhill"),
  ("Summerville"),
  ("Summit Hill"),
  ("Summit Station"),
  ("Sunbury"),
  ("Susquehanna Depot"),
  ("Susquehanna Trails"),
  ("Sutersville"),
  ("Swarthmore"),
  ("Swissvale"),
  ("Swoyersville"),
  ("Sykesville"),
  ("Sylvania"),
  ("Tamaqua"),
  ("Tarentum"),
  ("Tatamy"),
  ("Taylor"),
  ("Telford"),
  ("Terre Hill"),
  ("Thompson"),
  ("Thompsontown"),
  ("Thompsonville"),
  ("Thornburg"),
  ("Thorndale"),
  ("Three Springs"),
  ("Throop"),
  ("Tidioute"),
  ("Timber Hills"),
  ("Timblin"),
  ("Tinicum Township"),
  ("Tioga"),
  ("Tionesta"),
  ("Tipton"),
  ("Titusville"),
  ("Topton"),
  ("Toughkenamon"),
  ("Towanda"),
  ("Tower City"),
  ("Townville"),
  ("Trafford"),
  ("Trainer"),
  ("Trappe"),
  ("Treasure Lake"),
  ("Tremont"),
  ("Tresckow"),
  ("Trevorton"),
  ("Trooper"),
  ("Troutville"),
  ("Troxelville"),
  ("Troy"),
  ("Trumbauersville"),
  ("Tullytown"),
  ("Tunkhannock"),
  ("Tunnelhill"),
  ("Turbotville"),
  ("Turtle Creek"),
  ("Tuscarora"),
  ("Twilight"),
  ("Tyler Run-Queens Gate"),
  ("Tyrone"),
  ("Ulysses"),
  ("Union City"),
  ("Union Dale"),
  ("Uniontown"),
  ("Unionville"),
  ("Upland"),
  ("Upper Providence Township"),
  ("Upper St. Clair"),
  ("Ursina"),
  ("Utica"),
  ("Valencia"),
  ("Valley Green"),
  ("Valley-Hi"),
  ("Valley View"),
  ("Valley View"),
  ("Vanderbilt"),
  ("Vandergrift"),
  ("Vandling"),
  ("Venango"),
  ("Verona"),
  ("Versailles"),
  ("Village Green-Green Ridge"),
  ("Village Shires"),
  ("Vinco"),
  ("Vintondale"),
  ("Volant"),
  ("Wall"),
  ("Wallaceton"),
  ("Waller"),
  ("Walnutport"),
  ("Wampum"),
  ("Warminster Heights"),
  ("Warren"),
  ("Warren South"),
  ("Warrior Run"),
  ("Washington"),
  ("Washingtonville"),
  ("Waterford"),
  ("Watsontown"),
  ("Wattsburg"),
  ("Waymart"),
  ("Wayne Heights"),
  ("Waynesboro"),
  ("Waynesburg"),
  ("Weatherly"),
  ("Weigelstown"),
  ("Weissport"),
  ("Weissport East"),
  ("Wellersburg"),
  ("Wellsboro"),
  ("Wellsville"),
  ("Wernersville"),
  ("Wesleyville"),
  ("West Alexander"),
  ("West Brownsville"),
  ("West Chester"),
  ("West Conshohocken"),
  ("West Easton"),
  ("West Elizabeth"),
  ("Westfield"),
  ("West Goshen"),
  ("West Grove"),
  ("West Hazleton"),
  ("West Hills"),
  ("West Homestead"),
  ("West Kittanning"),
  ("West Lawn"),
  ("West Leechburg"),
  ("West Liberty"),
  ("West Mayfield"),
  ("West Middlesex"),
  ("West Middletown"),
  ("West Mifflin"),
  ("Westmont"),
  ("West Newton"),
  ("West Norriton"),
  ("Westover"),
  ("West Pittston"),
  ("West Reading"),
  ("West Sunbury"),
  ("West View"),
  ("West Wyoming"),
  ("West Wyomissing"),
  ("West York"),
  ("Wheatland"),
  ("Whitaker"),
  ("Whitehall"),
  ("White Haven"),
  ("White Oak"),
  ("Whitfield"),
  ("Wickerham Manor-Fisher"),
  ("Wilburton Number One"),
  ("Wilburton Number Two"),
  ("Wilkes-Barre"),
  ("Wilkes-Barre Township"),
  ("Wilkinsburg"),
  ("Wilkins Township"),
  ("Williamsburg"),
  ("Williamsport"),
  ("Williamstown"),
  ("Willow Grove"),
  ("Willow Street"),
  ("Wilmerding"),
  ("Wilmore"),
  ("Wilson"),
  ("Windber"),
  ("Wind Gap"),
  ("Windsor"),
  ("Winterstown"),
  ("Wolfdale"),
  ("Womelsdorf"),
  ("Woodbourne"),
  ("Woodbury"),
  ("Woodcock"),
  ("Woodland Heights"),
  ("Woodlyn"),
  ("Woodside"),
  ("Woodward"),
  ("Wormleysburg"),
  ("Worthington"),
  ("Worthville"),
  ("Wrightsville"),
  ("Wyalusing"),
  ("Wyncote"),
  ("Wyndmoor"),
  ("Wyoming"),
  ("Wyomissing"),
  ("Wyomissing Hills"),
  ("Yardley"),
  ("Yatesville"),
  ("Yeadon"),
  ("Yeagertown"),
  ("Yoe"),
  ("York"),
  ("Yorkana"),
  ("York Haven"),
  ("York Springs"),
  ("Youngstown"),
  ("Youngsville"),
  ("Youngwood"),
  ("Zelienople"),
  ("Zion"),
  ("Ashaway"),
  ("Barrington"),
  ("Bradford"),
  ("Bristol"),
  ("Central Falls"),
  ("Cranston"),
  ("Cumberland Hill"),
  ("East Providence"),
  ("Greenville"),
  ("Harrisville"),
  ("Hope Valley"),
  ("Kingston"),
  ("Melville"),
  ("Narragansett Pier"),
  ("Newport"),
  ("Newport East"),
  ("North Providence"),
  ("Pascoag"),
  ("Pawtucket"),
  ("Providence"),
  ("Tiverton"),
  ("Valley Falls"),
  ("Wakefield-Peacedale"),
  ("Warwick"),
  ("Westerly"),
  ("West Warwick"),
  ("Woonsocket"),
  ("Abbeville"),
  ("Aiken"),
  ("Allendale"),
  ("Anderson"),
  ("Andrews"),
  ("Antreville"),
  ("Arcadia Lakes"),
  ("Arial"),
  ("Atlantic Beach"),
  ("Awendaw"),
  ("Aynor"),
  ("Bamberg"),
  ("Barnwell"),
  ("Batesburg-Leesville"),
  ("Beaufort"),
  ("Belton"),
  ("Belvedere"),
  ("Bennettsville"),
  ("Berea"),
  ("Bethune"),
  ("Bishopville"),
  ("Blacksburg"),
  ("Blackville"),
  ("Blenheim"),
  ("Bluffton"),
  ("Blythewood"),
  ("Boiling Springs"),
  ("Bonneau"),
  ("Bowman"),
  ("Bradley"),
  ("Branchville"),
  ("Briarcliffe Acres"),
  ("Brookdale"),
  ("Brunson"),
  ("Bucksport"),
  ("Buffalo"),
  ("Burnettown"),
  ("Burton"),
  ("Calhoun Falls"),
  ("Camden"),
  ("Cameron"),
  ("Campobello"),
  ("Cane Savannah"),
  ("Carlisle"),
  ("Cayce"),
  ("Centerville"),
  ("Central"),
  ("Central Pacolet"),
  ("Chapin"),
  ("Charleston"),
  ("Cheraw"),
  ("Cherryvale"),
  ("Chesnee"),
  ("Chester"),
  ("Chesterfield"),
  ("City View"),
  ("Clarks Hill"),
  ("Clearwater"),
  ("Clemson"),
  ("Clinton"),
  ("Clio"),
  ("Clover"),
  ("Cokesbury"),
  ("Columbia"),
  ("Conway"),
  ("Cope"),
  ("Cordova"),
  ("Coronaca"),
  ("Cottageville"),
  ("Coward"),
  ("Cowpens"),
  ("Cross Hill"),
  ("Dalzell"),
  ("Darlington"),
  ("Denmark"),
  ("Dentsville"),
  ("Dillon"),
  ("Donalds"),
  ("Due West"),
  ("Duncan"),
  ("Dunean"),
  ("Easley"),
  ("East Gaffney"),
  ("Eastover"),
  ("East Sumter"),
  ("Edgefield"),
  ("Edisto"),
  ("Edisto Beach"),
  ("Ehrhardt"),
  ("Elgin"),
  ("Elgin"),
  ("Elko"),
  ("Elloree"),
  ("Estill"),
  ("Eureka Mill"),
  ("Eutawville"),
  ("Fairfax"),
  ("Five Forks"),
  ("Florence"),
  ("Folly Beach"),
  ("Forest Acres"),
  ("Forestbrook"),
  ("Fort Lawn"),
  ("Fort Mill"),
  ("Fountain Inn"),
  ("Furman"),
  ("Gaffney"),
  ("Gantt"),
  ("Garden City"),
  ("Gaston"),
  ("Gayle Mill"),
  ("Georgetown"),
  ("Gifford"),
  ("Gilbert"),
  ("Gloverville"),
  ("Golden Grove"),
  ("Goose Creek"),
  ("Govan"),
  ("Gray Court"),
  ("Great Falls"),
  ("Greeleyville"),
  ("Greenville"),
  ("Greenwood"),
  ("Greer"),
  ("Hampton"),
  ("Hanahan"),
  ("Hardeeville"),
  ("Harleyville"),
  ("Hartsville"),
  ("Heath Springs"),
  ("Hemingway"),
  ("Hickory Grove"),
  ("Hilda"),
  ("Hilton Head Island"),
  ("Hodges"),
  ("Holly Hill"),
  ("Hollywood"),
  ("Homeland Park"),
  ("Honea Path"),
  ("India Hook"),
  ("Inman"),
  ("Inman Mills"),
  ("Irmo"),
  ("Irwin"),
  ("Isle of Palms"),
  ("Iva"),
  ("Jackson"),
  ("Jamestown"),
  ("Jefferson"),
  ("Joanna"),
  ("Johnsonville"),
  ("Johnston"),
  ("Jonesville"),
  ("Judson"),
  ("Kershaw"),
  ("Kiawah Island"),
  ("Kingstree"),
  ("Kline"),
  ("Ladson"),
  ("Lake City"),
  ("Lake Murray of Richland"),
  ("Lake Secession"),
  ("Lake View"),
  ("Lakewood"),
  ("Lake Wylie"),
  ("Lamar"),
  ("Lancaster"),
  ("Lancaster Mill"),
  ("Landrum"),
  ("Lane"),
  ("Latta"),
  ("Laurel Bay"),
  ("Laurens"),
  ("Lesslie"),
  ("Lexington"),
  ("Liberty"),
  ("Lincolnville"),
  ("Little Mountain"),
  ("Little River"),
  ("Livingston"),
  ("Lockhart"),
  ("Lodge"),
  ("Loris"),
  ("Lowndesville"),
  ("Lowrys"),
  ("Lugoff"),
  ("Luray"),
  ("Lyman"),
  ("Lynchburg"),
  ("McBee"),
  ("McClellanville"),
  ("McColl"),
  ("McConnells"),
  ("McCormick"),
  ("Manning"),
  ("Marion"),
  ("Mauldin"),
  ("Mayesville"),
  ("Mayo"),
  ("Meggett"),
  ("Millwood"),
  ("Modoc"),
  ("Monarch Mill"),
  ("Moncks Corner"),
  ("Monetta"),
  ("Mount Carmel"),
  ("Mount Croghan"),
  ("Mount Pleasant"),
  ("Mountville"),
  ("Mulberry"),
  ("Mullins"),
  ("Murphys Estates"),
  ("Murrells Inlet"),
  ("Myrtle Beach"),
  ("Neeses"),
  ("Newberry"),
  ("New Ellenton"),
  ("Newport"),
  ("Nichols"),
  ("Ninety Six"),
  ("Norris"),
  ("North"),
  ("North Augusta"),
  ("North Charleston"),
  ("North Hartsville"),
  ("Northlake"),
  ("North Myrtle Beach"),
  ("Norway"),
  ("Oak Grove"),
  ("Oakland"),
  ("Olanta"),
  ("Olar"),
  ("Orangeburg"),
  ("Oswego"),
  ("Pacolet"),
  ("Pageland"),
  ("Pamplico"),
  ("Parker"),
  ("Parksville"),
  ("Parris Island"),
  ("Patrick"),
  ("Pawleys Island"),
  ("Paxville"),
  ("Peak"),
  ("Pelion"),
  ("Pelzer"),
  ("Pendleton"),
  ("Perry"),
  ("Pickens"),
  ("Piedmont"),
  ("Pine Ridge"),
  ("Pinewood"),
  ("Plum Branch"),
  ("Pomaria"),
  ("Port Royal"),
  ("Powderville"),
  ("Princeton"),
  ("Privateer"),
  ("Promised Land"),
  ("Prosperity"),
  ("Quinby"),
  ("Ravenel"),
  ("Red Bank"),
  ("Red Hill"),
  ("Reevesville"),
  ("Reidville"),
  ("Rembert"),
  ("Richburg"),
  ("Ridgeland"),
  ("Ridge Spring"),
  ("Ridgeville"),
  ("Ridgeway"),
  ("Riverview"),
  ("Rock Hill"),
  ("Rockville"),
  ("Roebuck"),
  ("Rowesville"),
  ("Ruby"),
  ("St. Andrews"),
  ("St. George"),
  ("St. Matthews"),
  ("St. Stephen"),
  ("Salem"),
  ("Salley"),
  ("Saluda"),
  ("Sans Souci"),
  ("Santee"),
  ("Saxon"),
  ("Scotia"),
  ("Scranton"),
  ("Seabrook Island"),
  ("Sellers"),
  ("Seneca"),
  ("Seven Oaks"),
  ("Sharon"),
  ("Shell Point"),
  ("Shiloh"),
  ("Silverstreet"),
  ("Simpsonville"),
  ("Six Mile"),
  ("Slater-Marietta"),
  ("Smoaks"),
  ("Smyrna"),
  ("Snelling"),
  ("Socastee"),
  ("Society Hill"),
  ("South Congaree"),
  ("Southern Shops"),
  ("South Sumter"),
  ("Spartanburg"),
  ("Springdale"),
  ("Springdale"),
  ("Springfield"),
  ("Starr"),
  ("Startex"),
  ("Stateburg"),
  ("Stuckey"),
  ("Sullivan's Island"),
  ("Summerton"),
  ("Summerville"),
  ("Summit"),
  ("Sumter"),
  ("Surfside Beach"),
  ("Swansea"),
  ("Sycamore"),
  ("Tatum"),
  ("Taylors"),
  ("Tega Cay"),
  ("Timmonsville"),
  ("Travelers Rest"),
  ("Trenton"),
  ("Troy"),
  ("Turbeville"),
  ("Ulmer"),
  ("Union"),
  ("Utica"),
  ("Valley Falls"),
  ("Vance"),
  ("Varnville"),
  ("Wade Hampton"),
  ("Wagener"),
  ("Walhalla"),
  ("Walterboro"),
  ("Ward"),
  ("Ware Shoals"),
  ("Waterloo"),
  ("Watts Mills"),
  ("Wedgewood"),
  ("Welcome"),
  ("Wellford"),
  ("West Columbia"),
  ("Westminster"),
  ("West Pelzer"),
  ("West Union"),
  ("Whitmire"),
  ("Wilkinson Heights"),
  ("Williams"),
  ("Williamston"),
  ("Willington"),
  ("Williston"),
  ("Windsor"),
  ("Winnsboro"),
  ("Winnsboro Mills"),
  ("Woodfield"),
  ("Woodford"),
  ("Woodruff"),
  ("Yemassee"),
  ("York"),
  ("Aberdeen"),
  ("Agar"),
  ("Akaska"),
  ("Albee"),
  ("Alcester"),
  ("Alexandria"),
  ("Allen"),
  ("Alpena"),
  ("Altamont"),
  ("Andover"),
  ("Antelope"),
  ("Arlington"),
  ("Armour"),
  ("Artas"),
  ("Artesian"),
  ("Ashland Heights"),
  ("Ashton"),
  ("Astoria"),
  ("Aurora"),
  ("Aurora Center"),
  ("Avon"),
  ("Badger"),
  ("Baltic"),
  ("Bancroft"),
  ("Batesland"),
  ("Belle Fourche"),
  ("Belvidere"),
  ("Beresford"),
  ("Big Stone City"),
  ("Bison"),
  ("Blackhawk"),
  ("Blunt"),
  ("Bonesteel"),
  ("Bowdle"),
  ("Box Elder"),
  ("Bradley"),
  ("Brandon"),
  ("Brandt"),
  ("Brentford"),
  ("Bridgewater"),
  ("Bristol"),
  ("Britton"),
  ("Broadland"),
  ("Brookings"),
  ("Bruce"),
  ("Bryant"),
  ("Buffalo"),
  ("Buffalo Gap"),
  ("Bullhead"),
  ("Burke"),
  ("Bushnell"),
  ("Butler"),
  ("Camp Crook"),
  ("Canistota"),
  ("Canova"),
  ("Canton"),
  ("Carthage"),
  ("Castlewood"),
  ("Cavour"),
  ("Centerville"),
  ("Central City"),
  ("Chamberlain"),
  ("Chancellor"),
  ("Chelsea"),
  ("Claire City"),
  ("Claremont"),
  ("Clark"),
  ("Clear Lake"),
  ("Colman"),
  ("Colome"),
  ("Colonial Pine Hills"),
  ("Colton"),
  ("Columbia"),
  ("Conde"),
  ("Corona"),
  ("Corsica"),
  ("Cottonwood"),
  ("Cresbard"),
  ("Crooks"),
  ("Custer"),
  ("Dallas"),
  ("Dante"),
  ("Davis"),
  ("Deadwood"),
  ("Dell Rapids"),
  ("Delmont"),
  ("De Smet"),
  ("Dimock"),
  ("Doland"),
  ("Dolton"),
  ("Draper"),
  ("Dupree"),
  ("Eagle Butte"),
  ("Eden"),
  ("Edgemont"),
  ("Egan"),
  ("Elk Point"),
  ("Elkton"),
  ("Ellsworth AFB"),
  ("Emery"),
  ("Erwin"),
  ("Estelline"),
  ("Ethan"),
  ("Eureka"),
  ("Fairburn"),
  ("Fairfax"),
  ("Fairview"),
  ("Faith"),
  ("Farmer"),
  ("Faulkton"),
  ("Flandreau"),
  ("Florence"),
  ("Fort Pierre"),
  ("Fort Thompson"),
  ("Frankfort"),
  ("Frederick"),
  ("Freeman"),
  ("Fruitdale"),
  ("Fulton"),
  ("Garden City"),
  ("Garretson"),
  ("Gary"),
  ("Gayville"),
  ("Geddes"),
  ("Gettysburg"),
  ("Glenham"),
  ("Goodwin"),
  ("Green Grass"),
  ("Green Valley"),
  ("Gregory"),
  ("Grenville"),
  ("Groton"),
  ("Hamill"),
  ("Harrisburg"),
  ("Harrison"),
  ("Harrold"),
  ("Hartford"),
  ("Hayti"),
  ("Hazel"),
  ("Hecla"),
  ("Henry"),
  ("Hermosa"),
  ("Herreid"),
  ("Herrick"),
  ("Hetland"),
  ("Highmore"),
  ("Hill City"),
  ("Hillsview"),
  ("Hitchcock"),
  ("Hosmer"),
  ("Hot Springs"),
  ("Hoven"),
  ("Howard"),
  ("Hudson"),
  ("Humboldt"),
  ("Hurley"),
  ("Huron"),
  ("Interior"),
  ("Ipswich"),
  ("Irene"),
  ("Iroquois"),
  ("Isabel"),
  ("Java"),
  ("Jefferson"),
  ("Kadoka"),
  ("Kaylor"),
  ("Kennebec"),
  ("Keystone"),
  ("Kimball"),
  ("Kranzburg"),
  ("Kyle"),
  ("La Bolt"),
  ("Lake Andes"),
  ("Lake City"),
  ("Lake Norden"),
  ("Lake Preston"),
  ("Lane"),
  ("Langford"),
  ("La Plant"),
  ("Lead"),
  ("Lebanon"),
  ("Lemmon"),
  ("Lennox"),
  ("Leola"),
  ("Lesterville"),
  ("Letcher"),
  ("Lily"),
  ("Little Eagle"),
  ("Long Lake"),
  ("Loomis"),
  ("Lower Brule"),
  ("Lowry"),
  ("McIntosh"),
  ("McLaughlin"),
  ("Madison"),
  ("Manderson-White Horse Creek"),
  ("Marion"),
  ("Martin"),
  ("Marty"),
  ("Marvin"),
  ("Mellette"),
  ("Menno"),
  ("Midland"),
  ("Milbank"),
  ("Miller"),
  ("Milltown"),
  ("Mission"),
  ("Mission Hill"),
  ("Mitchell"),
  ("Mobridge"),
  ("Monroe"),
  ("Montrose"),
  ("Morristown"),
  ("Mound City"),
  ("Mount Vernon"),
  ("Murdo"),
  ("Naples"),
  ("New Effington"),
  ("Newell"),
  ("New Holland"),
  ("New Underwood"),
  ("New Witten"),
  ("Nisland"),
  ("North Eagle Butte"),
  ("North Sioux City"),
  ("North Spearfish"),
  ("Northville"),
  ("Nunda"),
  ("Oacoma"),
  ("Oelrichs"),
  ("Oglala"),
  ("Okaton"),
  ("Oldham"),
  ("Olivet"),
  ("Onaka"),
  ("Onida"),
  ("Orient"),
  ("Ortley"),
  ("Parker"),
  ("Parkston"),
  ("Parmelee"),
  ("Peever"),
  ("Philip"),
  ("Pickstown"),
  ("Pierpont"),
  ("Pierre"),
  ("Pine Ridge"),
  ("Plankinton"),
  ("Platte"),
  ("Pollock"),
  ("Porcupine"),
  ("Presho"),
  ("Pringle"),
  ("Pukwana"),
  ("Quinn"),
  ("Ramona"),
  ("Rapid City"),
  ("Rapid Valley"),
  ("Ravinia"),
  ("Raymond"),
  ("Redfield"),
  ("Ree Heights"),
  ("Reliance"),
  ("Revillo"),
  ("Rockham"),
  ("Roscoe"),
  ("Rosebud"),
  ("Rosholt"),
  ("Roslyn"),
  ("Roswell"),
  ("St. Charles"),
  ("St. Francis"),
  ("St. Lawrence"),
  ("Salem"),
  ("Scotland"),
  ("Selby"),
  ("Seneca"),
  ("Sherman"),
  ("Sinai"),
  ("Sioux Falls"),
  ("Sisseton"),
  ("South Shore"),
  ("Spearfish"),
  ("Spencer"),
  ("Spring Creek"),
  ("Springfield"),
  ("Stickney"),
  ("Stockholm"),
  ("Storla"),
  ("Strandburg"),
  ("Stratford"),
  ("Sturgis"),
  ("Summit"),
  ("Tabor"),
  ("Tea"),
  ("Timber Lake"),
  ("Tolstoy"),
  ("Toronto"),
  ("Trent"),
  ("Tripp"),
  ("Tulare"),
  ("Turton"),
  ("Twin Brooks"),
  ("Two Strike"),
  ("Tyndall"),
  ("Utica"),
  ("Valley Springs"),
  ("Veblen"),
  ("Verdon"),
  ("Vermillion"),
  ("Viborg"),
  ("Vienna"),
  ("Vilas"),
  ("Virgil"),
  ("Vivian"),
  ("Volga"),
  ("Volin"),
  ("Wagner"),
  ("Wakonda"),
  ("Wall"),
  ("Wallace"),
  ("Wanblee"),
  ("Ward"),
  ("Warner"),
  ("Wasta"),
  ("Watertown"),
  ("Waubay"),
  ("Webster"),
  ("Wentworth"),
  ("Wessington"),
  ("Wessington Springs"),
  ("Westport"),
  ("Wetonka"),
  ("White"),
  ("Whitehorse"),
  ("White Horse"),
  ("White Lake"),
  ("White River"),
  ("White Rock"),
  ("Whitewood"),
  ("Willow Lake"),
  ("Wilmot"),
  ("Winner"),
  ("Wolsey"),
  ("Wood"),
  ("Woonsocket"),
  ("Worthing"),
  ("Wounded Knee"),
  ("Yale"),
  ("Yankton"),
  ("Adams"),
  ("Adamsville"),
  ("Alamo"),
  ("Alcoa"),
  ("Alexandria"),
  ("Algood"),
  ("Allardt"),
  ("Altamont"),
  ("Ardmore"),
  ("Arlington"),
  ("Ashland City"),
  ("Athens"),
  ("Atoka"),
  ("Atwood"),
  ("Auburntown"),
  ("Baileyton"),
  ("Baneberry"),
  ("Banner Hill"),
  ("Bartlett"),
  ("Baxter"),
  ("Beersheba Springs"),
  ("Bell Buckle"),
  ("Belle Meade"),
  ("Bells"),
  ("Benton"),
  ("Berry Hill"),
  ("Bethel Springs"),
  ("Big Sandy"),
  ("Blaine"),
  ("Bloomingdale"),
  ("Blountville"),
  ("Bluff City"),
  ("Bolivar"),
  ("Braden"),
  ("Bradford"),
  ("Brentwood"),
  ("Brighton"),
  ("Bristol"),
  ("Brownsville"),
  ("Bruceton"),
  ("Bulls Gap"),
  ("Burlison"),
  ("Burns"),
  ("Byrdstown"),
  ("Calhoun"),
  ("Camden"),
  ("Carthage"),
  ("Caryville"),
  ("Cedar Hill"),
  ("Celina"),
  ("Centertown"),
  ("Centerville"),
  ("Central"),
  ("Chapel Hill"),
  ("Charleston"),
  ("Charlotte"),
  ("Chattanooga"),
  ("Church Hill"),
  ("Clarksburg"),
  ("Clarksville"),
  ("Cleveland"),
  ("Clifton"),
  ("Clinton"),
  ("Coalmont"),
  ("Collegedale"),
  ("Collierville"),
  ("Collinwood"),
  ("Colonial Heights"),
  ("Columbia"),
  ("Cookeville"),
  ("Coopertown"),
  ("Copperhill"),
  ("Cornersville"),
  ("Cottage Grove"),
  ("Covington"),
  ("Cowan"),
  ("Crab Orchard"),
  ("Cross Plains"),
  ("Crossville"),
  ("Crump"),
  ("Cumberland City"),
  ("Cumberland Gap"),
  ("Dandridge"),
  ("Dayton"),
  ("Decatur"),
  ("Decaturville"),
  ("Decherd"),
  ("Dickson"),
  ("Dover"),
  ("Dowelltown"),
  ("Doyle"),
  ("Dresden"),
  ("Ducktown"),
  ("Dunlap"),
  ("Dyer"),
  ("Dyersburg"),
  ("Eagleton Village"),
  ("Eagleville"),
  ("East Brainerd"),
  ("East Cleveland"),
  ("East Ridge"),
  ("Eastview"),
  ("Elizabethton"),
  ("Elkton"),
  ("Englewood"),
  ("Enville"),
  ("Erin"),
  ("Erwin"),
  ("Estill Springs"),
  ("Ethridge"),
  ("Etowah"),
  ("Fairfield Glade"),
  ("Fairmount"),
  ("Fairview"),
  ("Fall Branch"),
  ("Farragut"),
  ("Fayetteville"),
  ("Finger"),
  ("Forest Hills"),
  ("Franklin"),
  ("Friendship"),
  ("Friendsville"),
  ("Gadsden"),
  ("Gainesboro"),
  ("Gallatin"),
  ("Gallaway"),
  ("Garland"),
  ("Gates"),
  ("Gatlinburg"),
  ("Germantown"),
  ("Gibson"),
  ("Gilt Edge"),
  ("Gleason"),
  ("Goodlettsville"),
  ("Gordonsville"),
  ("Grand Junction"),
  ("Gray"),
  ("Graysville"),
  ("Greenback"),
  ("Greenbrier"),
  ("Greeneville"),
  ("Greenfield"),
  ("Green Hill"),
  ("Gruetli-Laager"),
  ("Guys"),
  ("Halls"),
  ("Harriman"),
  ("Harrison"),
  ("Harrogate-Shawanee"),
  ("Hartsville"),
  ("Helenwood"),
  ("Henderson"),
  ("Hendersonville"),
  ("Henning"),
  ("Henry"),
  ("Hickory Valley"),
  ("Hickory Withe"),
  ("Hohenwald"),
  ("Hollow Rock"),
  ("Hopewell"),
  ("Hornbeak"),
  ("Hornsby"),
  ("Humboldt"),
  ("Hunter"),
  ("Huntingdon"),
  ("Huntland"),
  ("Huntsville"),
  ("Iron City"),
  ("Jacksboro"),
  ("Jackson"),
  ("Jamestown"),
  ("Jasper"),
  ("Jefferson City"),
  ("Jellico"),
  ("Johnson City"),
  ("Jones"),
  ("Kenton"),
  ("Kimball"),
  ("Kingsport"),
  ("Kingston"),
  ("Kingston Springs"),
  ("Knoxville"),
  ("Lafayette"),
  ("La Follette"),
  ("La Grange"),
  ("Lake City"),
  ("Lakeland"),
  ("Lakesite"),
  ("Lake Tansi"),
  ("Lakewood"),
  ("La Vergne"),
  ("Lawrenceburg"),
  ("Lebanon"),
  ("Lenoir City"),
  ("Lewisburg"),
  ("Lexington"),
  ("Liberty"),
  ("Linden"),
  ("Livingston"),
  ("Lobelville"),
  ("Lookout Mountain"),
  ("Loretto"),
  ("Loudon"),
  ("Louisville"),
  ("Luttrell"),
  ("Lynchburg, Moore County"),
  ("Lynnville"),
  ("McEwen"),
  ("McKenzie"),
  ("McLemoresville"),
  ("McMinnville"),
  ("Madisonville"),
  ("Manchester"),
  ("Martin"),
  ("Maryville"),
  ("Mascot"),
  ("Mason"),
  ("Maury City"),
  ("Maynardville"),
  ("Medina"),
  ("Medon"),
  ("Memphis"),
  ("Michie"),
  ("Middleton"),
  ("Middle Valley"),
  ("Midtown"),
  ("Midway"),
  ("Milan"),
  ("Milledgeville"),
  ("Millersville"),
  ("Millington"),
  ("Minor Hill"),
  ("Mitchellville"),
  ("Monteagle"),
  ("Monterey"),
  ("Morrison"),
  ("Morristown"),
  ("Moscow"),
  ("Mosheim"),
  ("Mountain City"),
  ("Mount Carmel"),
  ("Mount Juliet"),
  ("Mount Pleasant"),
  ("Munford"),
  ("Murfreesboro"),
  ("Nashville-Davidson"),
  ("Newbern"),
  ("New Hope"),
  ("New Johnsonville"),
  ("New Market"),
  ("Newport"),
  ("New Tazewell"),
  ("Niota"),
  ("Nolensville"),
  ("Normandy"),
  ("Norris"),
  ("Oakdale"),
  ("Oak Grove"),
  ("Oak Hill"),
  ("Oakland"),
  ("Oak Ridge"),
  ("Obion"),
  ("Oliver Springs"),
  ("Oneida"),
  ("Ooltewah"),
  ("Orlinda"),
  ("Orme"),
  ("Palmer"),
  ("Paris"),
  ("Parkers Crossroads"),
  ("Parrottsville"),
  ("Parsons"),
  ("Pegram"),
  ("Petersburg"),
  ("Philadelphia"),
  ("Pigeon Forge"),
  ("Pikeville"),
  ("Pine Crest"),
  ("Piperton"),
  ("Pittman Center"),
  ("Plainview"),
  ("Pleasant Hill"),
  ("Pleasant View"),
  ("Portland"),
  ("Powells Crossroads"),
  ("Pulaski"),
  ("Puryear"),
  ("Ramer"),
  ("Red Bank"),
  ("Red Boiling Springs"),
  ("Ridgely"),
  ("Ridgeside"),
  ("Ridgetop"),
  ("Ripley"),
  ("Rives"),
  ("Roan Mountain"),
  ("Rockford"),
  ("Rockwood"),
  ("Rogersville"),
  ("Rossville"),
  ("Rural Hill"),
  ("Rutherford"),
  ("Rutledge"),
  ("St. Joseph"),
  ("Saltillo"),
  ("Samburg"),
  ("Sardis"),
  ("Saulsbury"),
  ("Savannah"),
  ("Scotts Hill"),
  ("Selmer"),
  ("Sevierville"),
  ("Sewanee"),
  ("Seymour"),
  ("Sharon"),
  ("Shelbyville"),
  ("Signal Mountain"),
  ("Silerton"),
  ("Slayden"),
  ("Smithville"),
  ("Smyrna"),
  ("Sneedville"),
  ("Soddy-Daisy"),
  ("Somerville"),
  ("South Carthage"),
  ("South Cleveland"),
  ("South Fulton"),
  ("South Pittsburg"),
  ("Sparta"),
  ("Spencer"),
  ("Spring City"),
  ("Springfield"),
  ("Spring Hill"),
  ("Spurgeon"),
  ("Stanton"),
  ("Stantonville"),
  ("Sunbright"),
  ("Surgoinsville"),
  ("Sweetwater"),
  ("Tazewell"),
  ("Tellico Plains"),
  ("Tennessee Ridge"),
  ("Thompson's Station"),
  ("Three Way"),
  ("Tiptonville"),
  ("Toone"),
  ("Townsend"),
  ("Tracy City"),
  ("Trenton"),
  ("Trezevant"),
  ("Trimble"),
  ("Troy"),
  ("Tullahoma"),
  ("Tusculum"),
  ("Unicoi"),
  ("Union City"),
  ("Vanleer"),
  ("Viola"),
  ("Vonore"),
  ("Walden"),
  ("Walnut Grove"),
  ("Walnut Hill"),
  ("Walterhill"),
  ("Wartburg"),
  ("Wartrace"),
  ("Watauga"),
  ("Watertown"),
  ("Waverly"),
  ("Waynesboro"),
  ("Westmoreland"),
  ("White Bluff"),
  ("White House"),
  ("White Pine"),
  ("Whiteville"),
  ("Whitwell"),
  ("Wildwood Lake"),
  ("Williston"),
  ("Winchester"),
  ("Winfield"),
  ("Woodbury"),
  ("Woodland Mills"),
  ("Yorkville"),
  ("Abbott"),
  ("Abernathy"),
  ("Abilene"),
  ("Abram-Perezville"),
  ("Ackerly"),
  ("Addison"),
  ("Adrian"),
  ("Agua Dulce"),
  ("Agua Dulce"),
  ("Airport Road Addition"),
  ("Alamo"),
  ("Alamo Heights"),
  ("Alba"),
  ("Albany"),
  ("Aldine"),
  ("Aledo"),
  ("Alfred-South La Paloma"),
  ("Alice"),
  ("Alice Acres"),
  ("Allen"),
  ("Alma"),
  ("Alpine"),
  ("Alto"),
  ("Alto Bonito"),
  ("Alton"),
  ("Alton North"),
  ("Alvarado"),
  ("Alvin"),
  ("Alvord"),
  ("Amarillo"),
  ("Ames"),
  ("Amherst"),
  ("Anahuac"),
  ("Anderson"),
  ("Anderson Mill"),
  ("Andrews"),
  ("Angleton"),
  ("Angus"),
  ("Anna"),
  ("Annetta"),
  ("Annetta North"),
  ("Annetta South"),
  ("Annona"),
  ("Anson"),
  ("Anthony"),
  ("Anton"),
  ("Appleby"),
  ("Aquilla"),
  ("Aransas Pass"),
  ("Archer City"),
  ("Arcola"),
  ("Argyle"),
  ("Arlington"),
  ("Arp"),
  ("Arroyo Alto"),
  ("Arroyo Colorado Estates"),
  ("Arroyo Gardens-La Tina Ranch"),
  ("Asherton"),
  ("Aspermont"),
  ("Atascocita"),
  ("Athens"),
  ("Atlanta"),
  ("Aubrey"),
  ("Aurora"),
  ("Austin"),
  ("Austwell"),
  ("Avery"),
  ("Avinger"),
  ("Azle"),
  ("Bacliff"),
  ("Bailey"),
  ("Bailey's Prairie"),
  ("Baird"),
  ("Balch Springs"),
  ("Balcones Heights"),
  ("Ballinger"),
  ("Balmorhea"),
  ("Bandera"),
  ("Bangs"),
  ("Bardwell"),
  ("Barrett"),
  ("Barry"),
  ("Barstow"),
  ("Bartlett"),
  ("Barton Creek"),
  ("Bartonville"),
  ("Bastrop"),
  ("Batesville"),
  ("Bausell and Ellis"),
  ("Bay City"),
  ("Bayou Vista"),
  ("Bayside"),
  ("Baytown"),
  ("Bayview"),
  ("Beach City"),
  ("Bear Creek"),
  ("Beasley"),
  ("Beaumont"),
  ("Beckville"),
  ("Bedford"),
  ("Bee Cave"),
  ("Beeville"),
  ("Bellaire"),
  ("Bellevue"),
  ("Bellmead"),
  ("Bells"),
  ("Bellville"),
  ("Belton"),
  ("Benavides"),
  ("Benbrook"),
  ("Benjamin"),
  ("Berryville"),
  ("Bertram"),
  ("Beverly Hills"),
  ("Bevil Oaks"),
  ("Bigfoot"),
  ("Big Lake"),
  ("Big Sandy"),
  ("Big Spring"),
  ("Big Wells"),
  ("Bishop"),
  ("Bishop Hills"),
  ("Bixby"),
  ("Blackwell"),
  ("Blanco"),
  ("Blanket"),
  ("Blessing"),
  ("Bloomburg"),
  ("Blooming Grove"),
  ("Bloomington"),
  ("Blossom"),
  ("Blue Berry Hill"),
  ("Blue Mound"),
  ("Blue Ridge"),
  ("Bluetown-Iglesia Antigua"),
  ("Blum"),
  ("Boerne"),
  ("Bogata"),
  ("Boling-Iago"),
  ("Bolivar Peninsula"),
  ("Bonham"),
  ("Bonney"),
  ("Booker"),
  ("Borger"),
  ("Botines"),
  ("Bovina"),
  ("Bowie"),
  ("Box Canyon-Amistad"),
  ("Boyd"),
  ("Brackettville"),
  ("Brady"),
  ("Brazoria"),
  ("Breckenridge"),
  ("Bremond"),
  ("Brenham"),
  ("Briar"),
  ("Briarcliff"),
  ("Briaroaks"),
  ("Bridge City"),
  ("Bridgeport"),
  ("Broaddus"),
  ("Bronte"),
  ("Brookshire"),
  ("Brookside Village"),
  ("Browndell"),
  ("Brownfield"),
  ("Brownsboro"),
  ("Brownsville"),
  ("Brownwood"),
  ("Bruceville-Eddy"),
  ("Brundage"),
  ("Bruni"),
  ("Brushy Creek"),
  ("Bryan"),
  ("Bryson"),
  ("Buchanan Dam"),
  ("Buckholts"),
  ("Buda"),
  ("Buffalo"),
  ("Buffalo Gap"),
  ("Buffalo Springs"),
  ("Bullard"),
  ("Bulverde"),
  ("Buna"),
  ("Bunker Hill Village"),
  ("Burkburnett"),
  ("Burke"),
  ("Burleson"),
  ("Burnet"),
  ("Burton"),
  ("Butterfield"),
  ("Byers"),
  ("Bynum"),
  ("Cactus"),
  ("Caddo Mills"),
  ("Caldwell"),
  ("Callisburg"),
  ("Calvert"),
  ("Cameron"),
  ("Cameron Park"),
  ("Campbell"),
  ("Camp Swift"),
  ("Camp Wood"),
  ("Canadian"),
  ("Caney City"),
  ("Canton"),
  ("Cantu Addition"),
  ("Canutillo"),
  ("Canyon"),
  ("Canyon Lake"),
  ("Carbon"),
  ("Carl's Corner"),
  ("Carmine"),
  ("Carrizo Hill"),
  ("Carrizo Springs"),
  ("Carrollton"),
  ("Carthage"),
  ("Castle Hills"),
  ("Castroville"),
  ("Catarina"),
  ("Cedar Hill"),
  ("Cedar Park"),
  ("Celeste"),
  ("Celina"),
  ("Center"),
  ("Centerville"),
  ("Central Gardens"),
  ("Cesar Chavez"),
  ("Chandler"),
  ("Channelview"),
  ("Channing"),
  ("Charlotte"),
  ("Chester"),
  ("Chico"),
  ("Childress"),
  ("Chillicothe"),
  ("China"),
  ("China Grove"),
  ("Chireno"),
  ("Christine"),
  ("Christoval"),
  ("Chula Vista-Orason"),
  ("Chula Vista-River Spur"),
  ("Cibolo"),
  ("Cienegas Terrace"),
  ("Cinco Ranch"),
  ("Circle D-KC Estates"),
  ("Cisco"),
  ("Citrus City"),
  ("Clarendon"),
  ("Clarksville"),
  ("Clarksville City"),
  ("Claude"),
  ("Clear Lake Shores"),
  ("Cleburne"),
  ("Cleveland"),
  ("Clifton"),
  ("Clint"),
  ("Cloverleaf"),
  ("Clute"),
  ("Clyde"),
  ("Coahoma"),
  ("Cockrell Hill"),
  ("Coffee City"),
  ("Coldspring"),
  ("Coleman"),
  ("College Station"),
  ("Colleyville"),
  ("Collinsville"),
  ("Colmesneil"),
  ("Colorado City"),
  ("Columbus"),
  ("Comanche"),
  ("Combes"),
  ("Combine"),
  ("Comfort"),
  ("Commerce"),
  ("Como"),
  ("Concepcion"),
  ("Conroe"),
  ("Converse"),
  ("Cool"),
  ("Coolidge"),
  ("Cooper"),
  ("Coppell"),
  ("Copperas Cove"),
  ("Copper Canyon"),
  ("Corinth"),
  ("Corpus Christi"),
  ("Corral City"),
  ("Corrigan"),
  ("Corsicana"),
  ("Cottonwood"),
  ("Cottonwood Shores"),
  ("Cotulla"),
  ("Cove"),
  ("Covington"),
  ("Coyanosa"),
  ("Coyote Acres"),
  ("Crandall"),
  ("Crane"),
  ("Cranfills Gap"),
  ("Crawford"),
  ("Creedmoor"),
  ("Crockett"),
  ("Crosby"),
  ("Crosbyton"),
  ("Cross Mountain"),
  ("Cross Plains"),
  ("Cross Roads"),
  ("Cross Timber"),
  ("Crowell"),
  ("Crowley"),
  ("Crystal City"),
  ("Cuero"),
  ("Cuevitas"),
  ("Cumby"),
  ("Cumings"),
  ("Cuney"),
  ("Cushing"),
  ("Cut and Shoot"),
  ("Daingerfield"),
  ("Daisetta"),
  ("Dalhart"),
  ("Dallas"),
  ("Dalworthington Gardens"),
  ("Damon"),
  ("Danbury"),
  ("Darrouzett"),
  ("Dawson"),
  ("Dayton"),
  ("Dayton Lakes"),
  ("Dean"),
  ("Decatur"),
  ("Deer Park"),
  ("De Kalb"),
  ("De Leon"),
  ("Dell City"),
  ("Del Mar Heights"),
  ("Del Rio"),
  ("Del Sol-Loma Linda"),
  ("Denison"),
  ("Denton"),
  ("Denver City"),
  ("Deport"),
  ("DeSoto"),
  ("Detroit"),
  ("Devers"),
  ("Devine"),
  ("Deweyville"),
  ("Diboll"),
  ("Dickens"),
  ("Dickinson"),
  ("Dilley"),
  ("Dimmitt"),
  ("Dodd City"),
  ("Dodson"),
  ("Doffing"),
  ("Domino"),
  ("Donna"),
  ("Doolittle"),
  ("Dorchester"),
  ("Double Oak"),
  ("Douglassville"),
  ("Doyle"),
  ("Dripping Springs"),
  ("Driscoll"),
  ("Dublin"),
  ("Dumas"),
  ("Duncanville"),
  ("Eagle Lake"),
  ("Eagle Mountain"),
  ("Eagle Pass"),
  ("Early"),
  ("Earth"),
  ("East Bernard"),
  ("Eastland"),
  ("East Mountain"),
  ("Easton"),
  ("East Tawakoni"),
  ("Ector"),
  ("Edcouch"),
  ("Eden"),
  ("Edgecliff Village"),
  ("Edgewater-Paisano"),
  ("Edgewood"),
  ("Edinburg"),
  ("Edmonson"),
  ("Edna"),
  ("Edom"),
  ("Edroy"),
  ("Eidson Road"),
  ("Elbert"),
  ("El Camino Angosto"),
  ("El Campo"),
  ("El Cenizo"),
  ("Eldorado"),
  ("Electra"),
  ("Elgin"),
  ("El Indio"),
  ("Elkhart"),
  ("El Lago"),
  ("Elm Creek"),
  ("Elmendorf"),
  ("El Paso"),
  ("El Refugio"),
  ("Elsa"),
  ("Emhouse"),
  ("Emory"),
  ("Encantada-Ranchito El Calaboz"),
  ("Enchanted Oaks"),
  ("Encinal"),
  ("Encino"),
  ("Ennis"),
  ("Escobares"),
  ("Estelline"),
  ("Euless"),
  ("Eureka"),
  ("Eustace"),
  ("Evadale"),
  ("Evant"),
  ("Everman"),
  ("Fabens"),
  ("Fairchilds"),
  ("Fairfield"),
  ("Fair Oaks Ranch"),
  ("Fairview"),
  ("Falcon Heights"),
  ("Falcon Lake Estates"),
  ("Falcon Mesa"),
  ("Falcon Village"),
  ("Falfurrias"),
  ("Falls City"),
  ("Falman-County Acres"),
  ("Farmers Branch"),
  ("Farmersville"),
  ("Farwell"),
  ("Fate"),
  ("Fayetteville"),
  ("Faysville"),
  ("Ferris"),
  ("Fifth Street"),
  ("Flatonia"),
  ("Florence"),
  ("Floresville"),
  ("Flowella"),
  ("Flower Mound"),
  ("Floydada"),
  ("Follett"),
  ("Forest Hill"),
  ("Forney"),
  ("Forsan"),
  ("Fort Bliss"),
  ("Fort Davis"),
  ("Fort Hancock"),
  ("Fort Hood"),
  ("Fort Stockton"),
  ("Fort Worth"),
  ("Four Corners"),
  ("Fowlerton"),
  ("Franklin"),
  ("Frankston"),
  ("Fredericksburg"),
  ("Freeport"),
  ("Freer"),
  ("Fresno"),
  ("Friendswood"),
  ("Friona"),
  ("Frisco"),
  ("Fritch"),
  ("Fronton"),
  ("Frost"),
  ("Fruitvale"),
  ("Fulshear"),
  ("Fulton"),
  ("Gainesville"),
  ("Galena Park"),
  ("Gallatin"),
  ("Galveston"),
  ("Ganado"),
  ("Garceno"),
  ("Gardendale"),
  ("Garden Ridge"),
  ("Garfield"),
  ("Garland"),
  ("Garrett"),
  ("Garrison"),
  ("Gary City"),
  ("Gatesville"),
  ("Georgetown"),
  ("George West"),
  ("Geronimo"),
  ("Gholson"),
  ("Giddings"),
  ("Gilmer"),
  ("Girard"),
  ("Gladewater"),
  ("Glenn Heights"),
  ("Glen Rose"),
  ("Godley"),
  ("Goldsmith"),
  ("Goldthwaite"),
  ("Goliad"),
  ("Golinda"),
  ("Gonzales"),
  ("Goodlow"),
  ("Goodrich"),
  ("Gordon"),
  ("Goree"),
  ("Gorman"),
  ("Graford"),
  ("Graham"),
  ("Granbury"),
  ("Grand Acres"),
  ("Grandfalls"),
  ("Grand Prairie"),
  ("Grand Saline"),
  ("Grandview"),
  ("Granger"),
  ("Granite Shoals"),
  ("Granjeno"),
  ("Grape Creek"),
  ("Grapeland"),
  ("Grapevine"),
  ("Grays Prairie"),
  ("Greatwood"),
  ("Green Valley Farms"),
  ("Greenville"),
  ("Gregory"),
  ("Grey Forest"),
  ("Groesbeck"),
  ("Groom"),
  ("Groves"),
  ("Groveton"),
  ("Gruver"),
  ("Guerra"),
  ("Gun Barrel City"),
  ("Gunter"),
  ("Gustine"),
  ("Hackberry"),
  ("Hale Center"),
  ("Hallettsville"),
  ("Hallsburg"),
  ("Hallsville"),
  ("Haltom City"),
  ("Hamilton"),
  ("Hamlin"),
  ("Happy"),
  ("Hardin"),
  ("Harker Heights"),
  ("Harlingen"),
  ("Harper"),
  ("Hart"),
  ("Hartley"),
  ("Haskell"),
  ("Haslet"),
  ("Havana"),
  ("Hawk Cove"),
  ("Hawkins"),
  ("Hawley"),
  ("Hays"),
  ("Hearne"),
  ("Heath"),
  ("Hebbronville"),
  ("Hebron"),
  ("Hedley"),
  ("Hedwig Village"),
  ("Heidelberg"),
  ("Helotes"),
  ("Hemphill"),
  ("Hempstead"),
  ("Henderson"),
  ("Henrietta"),
  ("Hereford"),
  ("Hermleigh"),
  ("Hewitt"),
  ("Hickory Creek"),
  ("Hico"),
  ("Hidalgo"),
  ("Higgins"),
  ("Highland Haven"),
  ("Highland Park"),
  ("Highlands"),
  ("Highland Village"),
  ("Hill Country Village"),
  ("Hillcrest"),
  ("Hillsboro"),
  ("Hilltop"),
  ("Hilshire Village"),
  ("Hitchcock"),
  ("Holiday Lakes"),
  ("Holland"),
  ("Holliday"),
  ("Hollywood Park"),
  ("Homestead Meadows North"),
  ("Homestead Meadows South"),
  ("Hondo"),
  ("Honey Grove"),
  ("Hooks"),
  ("Horizon City"),
  ("Horseshoe Bay"),
  ("Houston"),
  ("Howardwick"),
  ("Howe"),
  ("Hubbard"),
  ("Hudson"),
  ("Hudson Bend"),
  ("Hudson Oaks"),
  ("Hughes Springs"),
  ("Humble"),
  ("Hungerford"),
  ("Hunters Creek Village"),
  ("Huntington"),
  ("Huntsville"),
  ("Hurst"),
  ("Hutchins"),
  ("Hutto"),
  ("Huxley"),
  ("Idalou"),
  ("Impact"),
  ("Imperial"),
  ("Indian Hills"),
  ("Indian Lake"),
  ("Industry"),
  ("Inez"),
  ("Ingleside"),
  ("Ingleside on the Bay"),
  ("Ingram"),
  ("Iowa Colony"),
  ("Iowa Park"),
  ("Iraan"),
  ("Iredell"),
  ("Irving"),
  ("Italy"),
  ("Itasca"),
  ("Jacinto City"),
  ("Jacksboro"),
  ("Jacksonville"),
  ("Jamaica Beach"),
  ("Jasper"),
  ("Jayton"),
  ("Jefferson"),
  ("Jersey Village"),
  ("Jewett"),
  ("Joaquin"),
  ("Johnson City"),
  ("Jolly"),
  ("Jollyville"),
  ("Jones Creek"),
  ("Jonestown"),
  ("Josephine"),
  ("Joshua"),
  ("Jourdanton"),
  ("Junction"),
  ("Justin"),
  ("Karnes City"),
  ("Katy"),
  ("Kaufman"),
  ("K-Bar Ranch"),
  ("Keene"),
  ("Keller"),
  ("Kemah"),
  ("Kemp"),
  ("Kempner"),
  ("Kendleton"),
  ("Kenedy"),
  ("Kenefick"),
  ("Kennard"),
  ("Kennedale"),
  ("Kerens"),
  ("Kermit"),
  ("Kerrville"),
  ("Kilgore"),
  ("Killeen"),
  ("Kingsbury"),
  ("Kingsland"),
  ("Kingsville"),
  ("Kirby"),
  ("Kirbyville"),
  ("Kirvin"),
  ("Knippa"),
  ("Knollwood"),
  ("Knox City"),
  ("Kosse"),
  ("Kountze"),
  ("Kress"),
  ("Krugerville"),
  ("Krum"),
  ("Kyle"),
  ("La Blanca"),
  ("La Casita-Garciasville"),
  ("Lackland AFB"),
  ("LaCoste"),
  ("Lacy-Lakeview"),
  ("Ladonia"),
  ("La Feria"),
  ("La Feria North"),
  ("Lago"),
  ("Lago Vista"),
  ("La Grange"),
  ("La Grulla"),
  ("Laguna Heights"),
  ("Laguna Seca"),
  ("Laguna Vista"),
  ("La Homa"),
  ("La Joya"),
  ("Lake Bridgeport"),
  ("Lake Brownwood"),
  ("Lake City"),
  ("Lake Dallas"),
  ("Lakehills"),
  ("Lake Jackson"),
  ("Lake Kiowa"),
  ("Lakeport"),
  ("Lakeshore Gardens-Hidden Acres"),
  ("Lakeside"),
  ("Lakeside"),
  ("Lakeside City"),
  ("Lake Tanglewood"),
  ("Lakeview"),
  ("Lake View"),
  ("Lakeway"),
  ("Lakewood Village"),
  ("Lake Worth"),
  ("La Marque"),
  ("Lamesa"),
  ("Lampasas"),
  ("Lancaster"),
  ("La Paloma"),
  ("La Paloma-Lost Creek"),
  ("La Porte"),
  ("La Presa"),
  ("La Pryor"),
  ("La Puerta"),
  ("Laredo"),
  ("Laredo Ranchettes"),
  ("Larga Vista"),
  ("La Rosita"),
  ("Lasana"),
  ("Lasara"),
  ("Las Colonias"),
  ("Las Lomas"),
  ("Las Lomitas"),
  ("Las Palmas-Juarez"),
  ("Las Quintas Fronterizas"),
  ("Latexo"),
  ("Laughlin AFB"),
  ("Laureles"),
  ("La Vernia"),
  ("La Victoria"),
  ("La Villa"),
  ("Lavon"),
  ("La Ward"),
  ("Lawn"),
  ("League City"),
  ("Leakey"),
  ("Leander"),
  ("Leary"),
  ("Lefors"),
  ("Leona"),
  ("Leonard"),
  ("Leon Valley"),
  ("Leroy"),
  ("Levelland"),
  ("Lewisville"),
  ("Lexington"),
  ("Liberty"),
  ("Liberty City"),
  ("Liberty Hill"),
  ("Lincoln Park"),
  ("Lindale"),
  ("Linden"),
  ("Lindsay"),
  ("Lindsay"),
  ("Lipan"),
  ("Lipscomb"),
  ("Little Elm"),
  ("Littlefield"),
  ("Little River-Academy"),
  ("Live Oak"),
  ("Liverpool"),
  ("Livingston"),
  ("Llano"),
  ("Llano Grande"),
  ("Lockhart"),
  ("Lockney"),
  ("Log Cabin"),
  ("Lolita"),
  ("Loma Linda East"),
  ("Lometa"),
  ("Lone Oak"),
  ("Lone Star"),
  ("Longview"),
  ("Lopeno"),
  ("Lopezville"),
  ("Loraine"),
  ("Lorena"),
  ("Lorenzo"),
  ("Los Alvarez"),
  ("Los Angeles Subdivision"),
  ("Los Ebanos"),
  ("Los Fresnos"),
  ("Los Indios"),
  ("Lost Creek"),
  ("Los Villareales"),
  ("Los Ybanez"),
  ("Lott"),
  ("Louise"),
  ("Lovelady"),
  ("Lowry Crossing"),
  ("Lozano"),
  ("Lubbock"),
  ("Lucas"),
  ("Lueders"),
  ("Lufkin"),
  ("Luling"),
  ("Lumberton"),
  ("Lyford"),
  ("Lyford South"),
  ("Lytle"),
  ("Mabank"),
  ("McAllen"),
  ("McCamey"),
  ("McGregor"),
  ("McKinney"),
  ("McLean"),
  ("McLendon-Chisholm"),
  ("McQueeney"),
  ("Madisonville"),
  ("Magnolia"),
  ("Malakoff"),
  ("Malone"),
  ("Manor"),
  ("Mansfield"),
  ("Manvel"),
  ("Marathon"),
  ("Marble Falls"),
  ("Marfa"),
  ("Marietta"),
  ("Marion"),
  ("Markham"),
  ("Marlin"),
  ("Marquez"),
  ("Marshall"),
  ("Marshall Creek"),
  ("Mart"),
  ("Martindale"),
  ("Mason"),
  ("Matador"),
  ("Mathis"),
  ("Maud"),
  ("Mauriceville"),
  ("Maypearl"),
  ("Meadow"),
  ("Meadowlakes"),
  ("Meadows Place"),
  ("Medina"),
  ("Megargel"),
  ("Melissa"),
  ("Melvin"),
  ("Memphis"),
  ("Menard"),
  ("Mercedes"),
  ("Meridian"),
  ("Merkel"),
  ("Mertens"),
  ("Mertzon"),
  ("Mesquite"),
  ("Mexia"),
  ("Miami"),
  ("Midland"),
  ("Midlothian"),
  ("Midway"),
  ("Midway North"),
  ("Midway South"),
  ("Mila Doce"),
  ("Milam"),
  ("Milano"),
  ("Mildred"),
  ("Miles"),
  ("Milford"),
  ("Miller's Cove"),
  ("Millican"),
  ("Millsap"),
  ("Mineola"),
  ("Mineral Wells"),
  ("Mingus"),
  ("Mirando City"),
  ("Mission"),
  ("Mission Bend"),
  ("Missouri City"),
  ("Mobeetie"),
  ("Mobile City"),
  ("Monahans"),
  ("Mont Belvieu"),
  ("Monte Alto"),
  ("Montgomery"),
  ("Moody"),
  ("Moore"),
  ("Moore Station"),
  ("Morales-Sanchez"),
  ("Moran"),
  ("Morgan"),
  ("Morgan Farm Area"),
  ("Morgan's Point"),
  ("Morgan's Point Resort"),
  ("Morning Glory"),
  ("Morse"),
  ("Morton"),
  ("Moulton"),
  ("Mountain City"),
  ("Mount Calm"),
  ("Mount Enterprise"),
  ("Mount Pleasant"),
  ("Mount Vernon"),
  ("Muenster"),
  ("Muleshoe"),
  ("Mullin"),
  ("Munday"),
  ("Muniz"),
  ("Murchison"),
  ("Murphy"),
  ("Mustang"),
  ("Mustang Ridge"),
  ("Nacogdoches"),
  ("Naples"),
  ("Nash"),
  ("Nassau Bay"),
  ("Natalia"),
  ("Navarro"),
  ("Navasota"),
  ("Nazareth"),
  ("Nederland"),
  ("Needville"),
  ("Nesbitt"),
  ("Nevada"),
  ("Newark"),
  ("New Berlin"),
  ("New Boston"),
  ("New Braunfels"),
  ("Newcastle"),
  ("New Chapel Hill"),
  ("New Deal"),
  ("New Fairview"),
  ("New Falcon"),
  ("New Home"),
  ("New Hope"),
  ("New London"),
  ("New Summerfield"),
  ("New Territory"),
  ("Newton"),
  ("New Waverly"),
  ("Neylandville"),
  ("Niederwald"),
  ("Nixon"),
  ("Nocona"),
  ("Nolanville"),
  ("Nome"),
  ("Noonday"),
  ("Nordheim"),
  ("Normangee"),
  ("Normanna"),
  ("North Alamo"),
  ("North Cleveland"),
  ("Northcliff"),
  ("North Escobares"),
  ("Northlake"),
  ("North Pearsall"),
  ("North Richland Hills"),
  ("North San Pedro"),
  ("Novice"),
  ("Nurillo"),
  ("Oak Grove"),
  ("Oakhurst"),
  ("Oak Leaf"),
  ("Oak Point"),
  ("Oak Ridge"),
  ("Oak Ridge"),
  ("Oak Ridge North"),
  ("Oak Trail Shores"),
  ("Oak Valley"),
  ("Oakwood"),
  ("O'Brien"),
  ("Odem"),
  ("Odessa"),
  ("O'Donnell"),
  ("Oglesby"),
  ("Oilton"),
  ("Old River-Winfree"),
  ("Olivarez"),
  ("Olmito"),
  ("Olmos Park"),
  ("Olney"),
  ("Olton"),
  ("Omaha"),
  ("Onalaska"),
  ("Onion Creek"),
  ("Opdyke West"),
  ("Orange"),
  ("Orange Grove"),
  ("Orchard"),
  ("Ore City"),
  ("Overton"),
  ("Ovilla"),
  ("Owl Ranch-Amargosa"),
  ("Oyster Creek"),
  ("Ozona"),
  ("Paducah"),
  ("Paint Rock"),
  ("Palacios"),
  ("Palestine"),
  ("Palisades"),
  ("Palmer"),
  ("Palmhurst"),
  ("Palm Valley"),
  ("Palmview"),
  ("Palmview South"),
  ("Pampa"),
  ("Panhandle"),
  ("Panorama Village"),
  ("Pantego"),
  ("Paradise"),
  ("Paris"),
  ("Parker"),
  ("Pasadena"),
  ("Pattison"),
  ("Patton Village"),
  ("Pawnee"),
  ("Payne Springs"),
  ("Pearland"),
  ("Pearsall"),
  ("Pecan Acres"),
  ("Pecan Gap"),
  ("Pecan Grove"),
  ("Pecan Hill"),
  ("Pecan Plantation"),
  ("Pecos"),
  ("Pelican Bay"),
  ("Penelope"),
  ("Penitas"),
  ("Pernitas Point"),
  ("Perryton"),
  ("Petersburg"),
  ("Petrolia"),
  ("Petronila"),
  ("Pettus"),
  ("Pflugerville"),
  ("Pharr"),
  ("Pilot Point"),
  ("Pine Forest"),
  ("Pinehurst"),
  ("Pinehurst"),
  ("Pine Island"),
  ("Pineland"),
  ("Pinewood Estates"),
  ("Piney Point Village"),
  ("Pittsburg"),
  ("Plains"),
  ("Plainview"),
  ("Plano"),
  ("Pleak"),
  ("Pleasanton"),
  ("Pleasant Valley"),
  ("Plum Grove"),
  ("Point"),
  ("Point Blank"),
  ("Point Comfort"),
  ("Ponder"),
  ("Port Aransas"),
  ("Port Arthur"),
  ("Porter Heights"),
  ("Port Isabel"),
  ("Portland"),
  ("Port Lavaca"),
  ("Port Mansfield"),
  ("Port Neches"),
  ("Post"),
  ("Post Oak Bend City"),
  ("Poteet"),
  ("Poth"),
  ("Potosi"),
  ("Pottsboro"),
  ("Powell"),
  ("Poynor"),
  ("Prado Verde"),
  ("Prairie View"),
  ("Premont"),
  ("Presidio"),
  ("Primera"),
  ("Princeton"),
  ("Progreso"),
  ("Progreso Lakes"),
  ("Prosper"),
  ("Putnam"),
  ("Pyote"),
  ("Quail"),
  ("Quanah"),
  ("Queen City"),
  ("Quemado"),
  ("Quinlan"),
  ("Quintana"),
  ("Quitaque"),
  ("Quitman"),
  ("Radar Base"),
  ("Ralls"),
  ("Ranchette Estates"),
  ("Ranchitos Las Lomas"),
  ("Rancho Alegre"),
  ("Rancho Banquete"),
  ("Rancho Chico"),
  ("Ranchos Penitas West"),
  ("Rancho Viejo"),
  ("Ranger"),
  ("Rangerville"),
  ("Rankin"),
  ("Ransom Canyon"),
  ("Ratamosa"),
  ("Ravenna"),
  ("Raymondville"),
  ("Realitos"),
  ("Redford"),
  ("Red Lick"),
  ("Red Oak"),
  ("Redwater"),
  ("Redwood"),
  ("Reese Center"),
  ("Refugio"),
  ("Reid Hope King"),
  ("Reklaw"),
  ("Relampago"),
  ("Rendon"),
  ("Reno"),
  ("Reno"),
  ("Retreat"),
  ("Rhome"),
  ("Rice"),
  ("Richardson"),
  ("Richland"),
  ("Richland Hills"),
  ("Richland Springs"),
  ("Richmond"),
  ("Richwood"),
  ("Riesel"),
  ("Rio Bravo"),
  ("Rio Grande City"),
  ("Rio Hondo"),
  ("Rio Vista"),
  ("Rising Star"),
  ("River Oaks"),
  ("Riverside"),
  ("Roanoke"),
  ("Roaring Springs"),
  ("Robert Lee"),
  ("Robinson"),
  ("Robstown"),
  ("Roby"),
  ("Rochester"),
  ("Rockdale"),
  ("Rockport"),
  ("Rocksprings"),
  ("Rockwall"),
  ("Rocky Mound"),
  ("Rogers"),
  ("Rollingwood"),
  ("Roma"),
  ("Roma Creek"),
  ("Roman Forest"),
  ("Ropesville"),
  ("Roscoe"),
  ("Rosebud"),
  ("Rose City"),
  ("Rose Hill Acres"),
  ("Rosenberg"),
  ("Rosita North"),
  ("Rosita South"),
  ("Ross"),
  ("Rosser"),
  ("Rotan"),
  ("Round Mountain"),
  ("Round Rock"),
  ("Round Top"),
  ("Rowlett"),
  ("Roxton"),
  ("Royse City"),
  ("Rule"),
  ("Runaway Bay"),
  ("Runge"),
  ("Rusk"),
  ("Sabinal"),
  ("Sachse"),
  ("Sadler"),
  ("Saginaw"),
  ("St. Hedwig"),
  ("St. Jo"),
  ("St. Paul"),
  ("St. Paul"),
  ("Salado"),
  ("Salineno"),
  ("Samnorwood"),
  ("San Angelo"),
  ("San Antonio"),
  ("San Augustine"),
  ("San Benito"),
  ("San Carlos"),
  ("Sanctuary"),
  ("Sanderson"),
  ("Sandia"),
  ("San Diego"),
  ("Sandy Hollow-Escondidas"),
  ("San Elizario"),
  ("San Felipe"),
  ("Sanford"),
  ("Sanger"),
  ("San Ignacio"),
  ("San Isidro"),
  ("San Juan"),
  ("San Leanna"),
  ("San Leon"),
  ("San Manuel-Linn"),
  ("San Marcos"),
  ("San Patricio"),
  ("San Pedro"),
  ("San Perlita"),
  ("San Saba"),
  ("Sansom Park"),
  ("Santa Anna"),
  ("Santa Clara"),
  ("Santa Cruz"),
  ("Santa Fe"),
  ("Santa Maria"),
  ("Santa Monica"),
  ("Santa Rosa"),
  ("Savoy"),
  ("Scenic Oaks"),
  ("Schertz"),
  ("Schulenburg"),
  ("Scissors"),
  ("Scotland"),
  ("Scottsville"),
  ("Seabrook"),
  ("Seadrift"),
  ("Seagoville"),
  ("Seagraves"),
  ("Sealy"),
  ("Sebastian"),
  ("Seguin"),
  ("Selma"),
  ("Seminole"),
  ("Serenada"),
  ("Seth Ward"),
  ("Seven Oaks"),
  ("Seven Points"),
  ("Seymour"),
  ("Shady Hollow"),
  ("Shady Shores"),
  ("Shallowater"),
  ("Shamrock"),
  ("Shavano Park"),
  ("Sheldon"),
  ("Shenandoah"),
  ("Shepherd"),
  ("Sherman"),
  ("Shiner"),
  ("Shoreacres"),
  ("Sienna Plantation"),
  ("Sierra Blanca"),
  ("Siesta Shores"),
  ("Silsbee"),
  ("Silverton"),
  ("Simonton"),
  ("Sinton"),
  ("Skellytown"),
  ("Skidmore"),
  ("Slaton"),
  ("Smiley"),
  ("Smithville"),
  ("Smyer"),
  ("Snook"),
  ("Snyder"),
  ("Socorro"),
  ("Solis"),
  ("Somerset"),
  ("Somerville"),
  ("Sonora"),
  ("Sour Lake"),
  ("South Alamo"),
  ("South Fork Estates"),
  ("South Houston"),
  ("Southlake"),
  ("Southmayd"),
  ("South Mountain"),
  ("South Padre Island"),
  ("South Point"),
  ("Southside Place"),
  ("South Toledo Bend"),
  ("Spade"),
  ("Sparks"),
  ("Spearman"),
  ("Splendora"),
  ("Spofford"),
  ("Spring"),
  ("Spring Garden-Terra Verde"),
  ("Springlake"),
  ("Springtown"),
  ("Spring Valley"),
  ("Spur"),
  ("Stafford"),
  ("Stagecoach"),
  ("Stamford"),
  ("Stanton"),
  ("Star Harbor"),
  ("Stephenville"),
  ("Sterling City"),
  ("Stinnett"),
  ("Stockdale"),
  ("Stonewall"),
  ("Stowell"),
  ("Stratford"),
  ("Strawn"),
  ("Streetman"),
  ("Study Butte-Terlingua"),
  ("Sudan"),
  ("Sugar Land"),
  ("Sullivan City"),
  ("Sulphur Springs"),
  ("Sundown"),
  ("Sunnyvale"),
  ("Sunray"),
  ("Sunrise Beach Village"),
  ("Sunset"),
  ("Sunset Valley"),
  ("Sun Valley"),
  ("Surfside Beach"),
  ("Sweeny"),
  ("Sweetwater"),
  ("Taft"),
  ("Taft Southwest"),
  ("Tahoka"),
  ("Talco"),
  ("Talty"),
  ("Tatum"),
  ("Taylor"),
  ("Taylor Lake Village"),
  ("Teague"),
  ("Tehuacana"),
  ("Temple"),
  ("Tenaha"),
  ("Terrell"),
  ("Terrell Hills"),
  ("Texarkana"),
  ("Texas City"),
  ("Texhoma"),
  ("Texline"),
  ("The Colony"),
  ("The Hills"),
  ("The Woodlands"),
  ("Thompsons"),
  ("Thorndale"),
  ("Thornton"),
  ("Thorntonville"),
  ("Thrall"),
  ("Three Rivers"),
  ("Throckmorton"),
  ("Tierra Bonita"),
  ("Tierra Grande"),
  ("Tiki Island"),
  ("Timbercreek Canyon"),
  ("Timberwood Park"),
  ("Timpson"),
  ("Tioga"),
  ("Tira"),
  ("Toco"),
  ("Todd Mission"),
  ("Tolar"),
  ("Tomball"),
  ("Tom Bean"),
  ("Tool"),
  ("Tornillo"),
  ("Toyah"),
  ("Tradewinds"),
  ("Trent"),
  ("Trenton"),
  ("Trinidad"),
  ("Trinity"),
  ("Trophy Club"),
  ("Troup"),
  ("Troy"),
  ("Tuleta"),
  ("Tulia"),
  ("Tulsita"),
  ("Turkey"),
  ("Tuscola"),
  ("Tye"),
  ("Tyler"),
  ("Tynan"),
  ("Uhland"),
  ("Uncertain"),
  ("Union Grove"),
  ("Universal City"),
  ("University Park"),
  ("Utopia"),
  ("Uvalde"),
  ("Uvalde Estates"),
  ("Valentine"),
  ("Valley Mills"),
  ("Valley View"),
  ("Val Verde Park"),
  ("Van"),
  ("Van Alstyne"),
  ("Vanderbilt"),
  ("Van Horn"),
  ("Van Vleck"),
  ("Vega"),
  ("Venus"),
  ("Vernon"),
  ("Victoria"),
  ("Vidor"),
  ("Villa del Sol"),
  ("Villa Pancho"),
  ("Villa Verde"),
  ("Vinton"),
  ("Waco"),
  ("Waelder"),
  ("Wake Village"),
  ("Waller"),
  ("Wallis"),
  ("Walnut Springs"),
  ("Warren City"),
  ("Waskom"),
  ("Watauga"),
  ("Waxahachie"),
  ("Weatherford"),
  ("Webster"),
  ("Weimar"),
  ("Weinert"),
  ("Weir"),
  ("Wellington"),
  ("Wellman"),
  ("Wells"),
  ("Wells Branch"),
  ("Weslaco"),
  ("West"),
  ("Westbrook"),
  ("West Columbia"),
  ("Westdale"),
  ("Westlake"),
  ("West Lake Hills"),
  ("West Livingston"),
  ("Westminster"),
  ("West Odessa"),
  ("Weston"),
  ("West Orange"),
  ("Westover Hills"),
  ("West Pearsall"),
  ("West Sharyland"),
  ("West Tawakoni"),
  ("West University Place"),
  ("Westway"),
  ("Westworth Village"),
  ("Wharton"),
  ("Wheeler"),
  ("White Deer"),
  ("Whiteface"),
  ("Whitehouse"),
  ("White Oak"),
  ("Whitesboro"),
  ("White Settlement"),
  ("Whitewright"),
  ("Whitney"),
  ("Wichita Falls"),
  ("Wickett"),
  ("Wild Peach Village"),
  ("Willamar"),
  ("Willis"),
  ("Willow Park"),
  ("Wills Point"),
  ("Wilmer"),
  ("Wilson"),
  ("Wimberley"),
  ("Windcrest"),
  ("Windemere"),
  ("Windom"),
  ("Windthorst"),
  ("Winfield"),
  ("Wink"),
  ("Winnie"),
  ("Winnsboro"),
  ("Winona"),
  ("Winters"),
  ("Wixon Valley"),
  ("Wolfe City"),
  ("Wolfforth"),
  ("Woodbranch"),
  ("Woodcreek"),
  ("Woodloch"),
  ("Woodsboro"),
  ("Woodson"),
  ("Woodville"),
  ("Woodway"),
  ("Wortham"),
  ("Wyldwood"),
  ("Wylie"),
  ("Yantis"),
  ("Yoakum"),
  ("Yorktown"),
  ("Yznaga"),
  ("Zapata"),
  ("Zapata Ranch"),
  ("Zavalla"),
  ("Zuehl"),
  ("Alpine"),
  ("Alta"),
  ("Altamont"),
  ("Alton"),
  ("Amalga"),
  ("American Fork"),
  ("Aneth"),
  ("Annabella"),
  ("Antimony"),
  ("Aurora"),
  ("Avon"),
  ("Ballard"),
  ("Bear River City"),
  ("Beaver"),
  ("Benjamin"),
  ("Benson"),
  ("Bicknell"),
  ("Big Water"),
  ("Blanding"),
  ("Bluff"),
  ("Bluffdale"),
  ("Boulder"),
  ("Bountiful"),
  ("Brian Head"),
  ("Brigham City"),
  ("Cache"),
  ("Cannonville"),
  ("Canyon Rim"),
  ("Castle Dale"),
  ("Castle Valley"),
  ("Cedar City"),
  ("Cedar Fort"),
  ("Cedar Hills"),
  ("Centerfield"),
  ("Centerville"),
  ("Charleston"),
  ("Circleville"),
  ("Clarkston"),
  ("Clawson"),
  ("Clearfield"),
  ("Cleveland"),
  ("Clinton"),
  ("Coalville"),
  ("Corinne"),
  ("Cornish"),
  ("Cottonwood Heights"),
  ("Cottonwood West"),
  ("Cove"),
  ("Daniel"),
  ("Delta"),
  ("Deweyville"),
  ("Draper"),
  ("Duchesne"),
  ("Dugway"),
  ("Eagle Mountain"),
  ("East Carbon"),
  ("East Millcreek"),
  ("Elberta"),
  ("Elk Ridge"),
  ("Elmo"),
  ("Elsinore"),
  ("Elwood"),
  ("Emery"),
  ("Enoch"),
  ("Enterprise"),
  ("Ephraim"),
  ("Erda"),
  ("Escalante"),
  ("Eureka"),
  ("Fairview"),
  ("Farmington"),
  ("Farr West"),
  ("Fayette"),
  ("Ferron"),
  ("Fielding"),
  ("Fillmore"),
  ("Fort Duchesne"),
  ("Fountain Green"),
  ("Francis"),
  ("Fruit Heights"),
  ("Garden"),
  ("Garden City"),
  ("Garland"),
  ("Genola"),
  ("Glendale"),
  ("Glenwood"),
  ("Goshen"),
  ("Granite"),
  ("Grantsville"),
  ("Green River"),
  ("Gunnison"),
  ("Halchita"),
  ("Halls Crossing"),
  ("Harrisville"),
  ("Hatch"),
  ("Heber"),
  ("Helper"),
  ("Henefer"),
  ("Henrieville"),
  ("Herriman"),
  ("Highland"),
  ("Hildale"),
  ("Hinckley"),
  ("Holden"),
  ("Holladay"),
  ("Honeyville"),
  ("Hooper"),
  ("Howell"),
  ("Huntington"),
  ("Huntsville"),
  ("Hurricane"),
  ("Hyde Park"),
  ("Hyrum"),
  ("Ivins"),
  ("Joseph"),
  ("Junction"),
  ("Kamas"),
  ("Kanab"),
  ("Kanarraville"),
  ("Kanosh"),
  ("Kaysville"),
  ("Kearns"),
  ("Kingston"),
  ("Koosharem"),
  ("Lake Shore"),
  ("Laketown"),
  ("La Sal"),
  ("La Verkin"),
  ("Layton"),
  ("Leamington"),
  ("Leeds"),
  ("Lehi"),
  ("Levan"),
  ("Lewiston"),
  ("Lindon"),
  ("Little Cottonwood Creek Valley"),
  ("Loa"),
  ("Logan"),
  ("Lyman"),
  ("Lynndyl"),
  ("Maeser"),
  ("Magna"),
  ("Manila"),
  ("Manti"),
  ("Mantua"),
  ("Mapleton"),
  ("Marriott-Slaterville"),
  ("Marysvale"),
  ("Mayfield"),
  ("Meadow"),
  ("Mendon"),
  ("Mexican Hat"),
  ("Midvale"),
  ("Midway"),
  ("Milford"),
  ("Millcreek"),
  ("Millville"),
  ("Minersville"),
  ("Moab"),
  ("Mona"),
  ("Monroe"),
  ("Montezuma Creek"),
  ("Monticello"),
  ("Morgan"),
  ("Moroni"),
  ("Mount Olympus"),
  ("Mount Pleasant"),
  ("Murray"),
  ("Myton"),
  ("Naples"),
  ("Navajo Mountain"),
  ("Neola"),
  ("Nephi"),
  ("New Harmony"),
  ("Newton"),
  ("Nibley"),
  ("North Logan"),
  ("North Ogden"),
  ("North Salt Lake"),
  ("North Snyderville Basin"),
  ("Oak City"),
  ("Oakley"),
  ("Ogden"),
  ("Oljato-Monument Valley"),
  ("Ophir"),
  ("Oquirrh"),
  ("Orangeville"),
  ("Orderville"),
  ("Orem"),
  ("Palmyra"),
  ("Panguitch"),
  ("Paradise"),
  ("Paragonah"),
  ("Park City"),
  ("Parowan"),
  ("Payson"),
  ("Perry"),
  ("Peter"),
  ("Plain City"),
  ("Pleasant Grove"),
  ("Pleasant View"),
  ("Plymouth"),
  ("Portage"),
  ("Price"),
  ("Providence"),
  ("Provo"),
  ("Randlett"),
  ("Randolph"),
  ("Redmond"),
  ("Richfield"),
  ("Richmond"),
  ("Riverdale"),
  ("River Heights"),
  ("Riverside"),
  ("Riverton"),
  ("Rockville"),
  ("Rocky Ridge"),
  ("Roosevelt"),
  ("Roy"),
  ("Rush Valley"),
  ("St. George"),
  ("Salem"),
  ("Salina"),
  ("Salt Lake City"),
  ("Samak"),
  ("Sandy"),
  ("Santa Clara"),
  ("Santaquin"),
  ("Saratoga Springs"),
  ("Scipio"),
  ("Scofield"),
  ("Sigurd"),
  ("Smithfield"),
  ("Snowville"),
  ("South Jordan"),
  ("South Ogden"),
  ("South Salt Lake"),
  ("South Snyderville Basin"),
  ("South Weber"),
  ("South Willard"),
  ("Spanish Fork"),
  ("Spanish Valley"),
  ("Spring City"),
  ("Springdale"),
  ("Spring Lake"),
  ("Springville"),
  ("Stansbury Park"),
  ("Sterling"),
  ("Stockton"),
  ("Summit Park"),
  ("Sunnyside"),
  ("Sunset"),
  ("Syracuse"),
  ("Tabiona"),
  ("Taylorsville"),
  ("Timber Lakes"),
  ("Tooele"),
  ("Toquerville"),
  ("Torrey"),
  ("Tremonton"),
  ("Trenton"),
  ("Tropic"),
  ("Tselakai Dezza"),
  ("Uintah"),
  ("Vernal"),
  ("Vernon"),
  ("Vineyard"),
  ("Virgin"),
  ("Wales"),
  ("Wallsburg"),
  ("Washington"),
  ("Washington Terrace"),
  ("Wellington"),
  ("Wellsville"),
  ("Wendover"),
  ("West Bountiful"),
  ("West Haven"),
  ("West Jordan"),
  ("West Mountain"),
  ("West Point"),
  ("West Valley City"),
  ("White City"),
  ("White Mesa"),
  ("Whiterocks"),
  ("Willard"),
  ("Woodland"),
  ("Woodland Hills"),
  ("Woodruff"),
  ("Woods Cross"),
  ("Albany"),
  ("Alburg"),
  ("Arlington"),
  ("Barre"),
  ("Barton"),
  ("Bellows Falls"),
  ("Bennington"),
  ("Bradford"),
  ("Brandon"),
  ("Brattleboro"),
  ("Burlington"),
  ("Cabot"),
  ("Cambridge"),
  ("Chester-Chester Depot"),
  ("Derby Center"),
  ("Derby Line"),
  ("Enosburg Falls"),
  ("Essex Junction"),
  ("Fair Haven"),
  ("Graniteville-East Barre"),
  ("Hyde Park"),
  ("Island Pond"),
  ("Jacksonville"),
  ("Jeffersonville"),
  ("Jericho"),
  ("Johnson"),
  ("Ludlow"),
  ("Lyndonville"),
  ("Manchester"),
  ("Manchester Center"),
  ("Marshfield"),
  ("Middlebury"),
  ("Milton"),
  ("Montpelier"),
  ("Morrisville"),
  ("Newbury"),
  ("Newfane"),
  ("Newport"),
  ("North Bennington"),
  ("Northfield"),
  ("North Troy"),
  ("North Westminster"),
  ("Old Bennington"),
  ("Orleans"),
  ("Perkinsville"),
  ("Poultney"),
  ("Rutland"),
  ("St. Albans"),
  ("St. Johnsbury"),
  ("Saxtons River"),
  ("South Barre"),
  ("South Burlington"),
  ("South Shaftsbury"),
  ("Springfield"),
  ("Swanton"),
  ("Vergennes"),
  ("Wallingford"),
  ("Waterbury"),
  ("Wells River"),
  ("West Brattleboro"),
  ("West Burke"),
  ("Westminster"),
  ("West Rutland"),
  ("White River Junction"),
  ("Wilder"),
  ("Winooski"),
  ("Woodstock"),
  ("Abingdon"),
  ("Accomac"),
  ("Adwolf"),
  ("Alberta"),
  ("Alexandria"),
  ("Altavista"),
  ("Amherst"),
  ("Annandale"),
  ("Appalachia"),
  ("Appomattox"),
  ("Aquia Harbour"),
  ("Arlington"),
  ("Ashland"),
  ("Atkins"),
  ("Bailey's Crossroads"),
  ("Bassett"),
  ("Basye-Bryce Mountain"),
  ("Bedford"),
  ("Belle Haven"),
  ("Belle Haven"),
  ("Bellwood"),
  ("Bensley"),
  ("Berryville"),
  ("Big Stone Gap"),
  ("Blacksburg"),
  ("Blackstone"),
  ("Bloxom"),
  ("Bluefield"),
  ("Blue Ridge"),
  ("Bon Air"),
  ("Boones Mill"),
  ("Bowling Green"),
  ("Boyce"),
  ("Boydton"),
  ("Boykins"),
  ("Branchville"),
  ("Bridgewater"),
  ("Bristol"),
  ("Broadway"),
  ("Brodnax"),
  ("Brookneal"),
  ("Buchanan"),
  ("Buena Vista"),
  ("Bull Run"),
  ("Burke"),
  ("Burkeville"),
  ("Cana"),
  ("Cape Charles"),
  ("Capron"),
  ("Castlewood"),
  ("Cave Spring"),
  ("Cedar Bluff"),
  ("Centreville"),
  ("Chamberlayne"),
  ("Chantilly"),
  ("Charlotte Court House"),
  ("Charlottesville"),
  ("Chase City"),
  ("Chatham"),
  ("Chatmoss"),
  ("Cheriton"),
  ("Chesapeake"),
  ("Chester"),
  ("Chesterfield Court House"),
  ("Chilhowie"),
  ("Chincoteague"),
  ("Christiansburg"),
  ("Claremont"),
  ("Clarksville"),
  ("Claypool Hill"),
  ("Cleveland"),
  ("Clifton"),
  ("Clifton Forge"),
  ("Clinchco"),
  ("Clinchport"),
  ("Clintwood"),
  ("Cloverdale"),
  ("Coeburn"),
  ("Collinsville"),
  ("Colonial Beach"),
  ("Colonial Heights"),
  ("Columbia"),
  ("Courtland"),
  ("Covington"),
  ("Craigsville"),
  ("Crewe"),
  ("Crimora"),
  ("Crozet"),
  ("Culpeper"),
  ("Dahlgren"),
  ("Dale City"),
  ("Daleville"),
  ("Damascus"),
  ("Danville"),
  ("Dayton"),
  ("Dendron"),
  ("Dillwyn"),
  ("Dooms"),
  ("Drakes Branch"),
  ("Dryden"),
  ("Dublin"),
  ("Duffield"),
  ("Dumbarton"),
  ("Dumfries"),
  ("Dungannon"),
  ("Dunn Loring"),
  ("East Highland Park"),
  ("Eastville"),
  ("Edinburg"),
  ("Elkton"),
  ("Elliston-Lafayette"),
  ("Emory-Meadow View"),
  ("Emporia"),
  ("Ettrick"),
  ("Ewing"),
  ("Exmore"),
  ("Fairfax"),
  ("Fairlawn"),
  ("Fairview Beach"),
  ("Falls Church"),
  ("Falmouth"),
  ("Fancy Gap"),
  ("Farmville"),
  ("Ferrum"),
  ("Fieldale"),
  ("Fincastle"),
  ("Fishersville"),
  ("Floyd"),
  ("Forest"),
  ("Fort Belvoir"),
  ("Fort Chiswell"),
  ("Fort Hunt"),
  ("Fort Lee"),
  ("Franconia"),
  ("Franklin"),
  ("Fredericksburg"),
  ("Fries"),
  ("Front Royal"),
  ("Gainesville"),
  ("Galax"),
  ("Gate City"),
  ("Glade Spring"),
  ("Glasgow"),
  ("Glen Allen"),
  ("Glen Lyn"),
  ("Gloucester Courthouse"),
  ("Gloucester Point"),
  ("Gordonsville"),
  ("Goshen"),
  ("Great Falls"),
  ("Greenville"),
  ("Gretna"),
  ("Grottoes"),
  ("Groveton"),
  ("Grundy"),
  ("Halifax"),
  ("Hallwood"),
  ("Hamilton"),
  ("Hampden Sydney"),
  ("Hampton"),
  ("Harrisonburg"),
  ("Haymarket"),
  ("Haysi"),
  ("Herndon"),
  ("Highland Springs"),
  ("Hillsboro"),
  ("Hillsville"),
  ("Hollins"),
  ("Honaker"),
  ("Hopewell"),
  ("Horse Pasture"),
  ("Huntington"),
  ("Hurt"),
  ("Hybla Valley"),
  ("Idylwood"),
  ("Independence"),
  ("Iron Gate"),
  ("Irvington"),
  ("Ivor"),
  ("Jarratt"),
  ("Jefferson"),
  ("Jolivue"),
  ("Jonesville"),
  ("Keller"),
  ("Kenbridge"),
  ("Keokee"),
  ("Keysville"),
  ("Kilmarnock"),
  ("La Crosse"),
  ("Lake Barcroft"),
  ("Lake Monticello"),
  ("Lake Ridge"),
  ("Lakeside"),
  ("Laurel"),
  ("Laurel Park"),
  ("Lawrenceville"),
  ("Laymantown"),
  ("Lebanon"),
  ("Leesburg"),
  ("Lexington"),
  ("Lincolnia"),
  ("Linton Hall"),
  ("Loch Lomond"),
  ("Lorton"),
  ("Louisa"),
  ("Lovettsville"),
  ("Low Moor"),
  ("Luray"),
  ("Lynchburg"),
  ("Lyndhurst"),
  ("McKenney"),
  ("McLean"),
  ("Madison"),
  ("Madison Heights"),
  ("Manassas"),
  ("Manassas Park"),
  ("Mantua"),
  ("Marion"),
  ("Martinsville"),
  ("Massanutten"),
  ("Matoaca"),
  ("Max Meadows"),
  ("Mechanicsville"),
  ("Melfa"),
  ("Merrifield"),
  ("Merrimac"),
  ("Middleburg"),
  ("Middletown"),
  ("Mineral"),
  ("Montclair"),
  ("Monterey"),
  ("Montrose"),
  ("Montross"),
  ("Mount Crawford"),
  ("Mount Jackson"),
  ("Mount Vernon"),
  ("Narrows"),
  ("Nassawadox"),
  ("New Castle"),
  ("Newington"),
  ("New Market"),
  ("Newport News"),
  ("Newsoms"),
  ("Nickelsville"),
  ("Nokesville"),
  ("Norfolk"),
  ("North Shore"),
  ("North Springfield"),
  ("Norton"),
  ("Oak Level"),
  ("Oakton"),
  ("Occoquan"),
  ("Onancock"),
  ("Onley"),
  ("Orange"),
  ("Painter"),
  ("Pamplin City"),
  ("Parksley"),
  ("Patrick Springs"),
  ("Pearisburg"),
  ("Pembroke"),
  ("Penhook"),
  ("Pennington Gap"),
  ("Petersburg"),
  ("Phenix"),
  ("Pimmit Hills"),
  ("Pocahontas"),
  ("Poquoson"),
  ("Port Royal"),
  ("Portsmouth"),
  ("Pound"),
  ("Pulaski"),
  ("Purcellville"),
  ("Quantico"),
  ("Quantico Station"),
  ("Radford"),
  ("Raven"),
  ("Remington"),
  ("Reston"),
  ("Rich Creek"),
  ("Richlands"),
  ("Richmond"),
  ("Ridgeway"),
  ("Roanoke"),
  ("Rocky Mount"),
  ("Rose Hill"),
  ("Rose Hill"),
  ("Round Hill"),
  ("Rural Retreat"),
  ("Rushmere"),
  ("Rustburg"),
  ("St. Charles"),
  ("St. Paul"),
  ("Salem"),
  ("Saltville"),
  ("Sandy Level"),
  ("Saxis"),
  ("Scottsburg"),
  ("Scottsville"),
  ("Selma"),
  ("Seven Corners"),
  ("Shawsville"),
  ("Shenandoah"),
  ("Sherando"),
  ("Short Pump"),
  ("Smithfield"),
  ("South Boston"),
  ("South Hill"),
  ("Spotsylvania Courthouse"),
  ("Springfield"),
  ("Stanardsville"),
  ("Stanley"),
  ("Stanleytown"),
  ("Staunton"),
  ("Stephens City"),
  ("Stony Creek"),
  ("Strasburg"),
  ("Stuart"),
  ("Stuarts Draft"),
  ("Sudley"),
  ("Suffolk"),
  ("Sugar Grove"),
  ("Surry"),
  ("Tangier"),
  ("Tappahannock"),
  ("Tazewell"),
  ("The Plains"),
  ("Timberlake"),
  ("Timberville"),
  ("Toms Brook"),
  ("Triangle"),
  ("Troutdale"),
  ("Troutville"),
  ("Tuckahoe"),
  ("Tysons Corner"),
  ("Union Hall"),
  ("Urbanna"),
  ("Vansant"),
  ("Verona"),
  ("Victoria"),
  ("Vienna"),
  ("Villa Heights"),
  ("Vinton"),
  ("Virgilina"),
  ("Virginia Beach"),
  ("Wachapreague"),
  ("Wakefield"),
  ("Warrenton"),
  ("Warsaw"),
  ("Washington"),
  ("Waverly"),
  ("Waynesboro"),
  ("Weber City"),
  ("West Gate"),
  ("Westlake Corner"),
  ("West Point"),
  ("West Springfield"),
  ("Weyers Cave"),
  ("White Stone"),
  ("Williamsburg"),
  ("Winchester"),
  ("Windsor"),
  ("Wise"),
  ("Wolf Trap"),
  ("Woodbridge"),
  ("Woodlawn"),
  ("Woodstock"),
  ("Wyndham"),
  ("Wytheville"),
  ("Yorkshire"),
  ("Yorktown"),
  ("Aberdeen"),
  ("Aberdeen Gardens"),
  ("Acme"),
  ("Ahtanum"),
  ("Airway Heights"),
  ("Albion"),
  ("Alderwood Manor"),
  ("Alger"),
  ("Algona"),
  ("Allyn-Grapeview"),
  ("Almira"),
  ("Amboy"),
  ("Ames Lake"),
  ("Anacortes"),
  ("Arlington"),
  ("Arlington Heights"),
  ("Artondale"),
  ("Ashford"),
  ("Asotin"),
  ("Auburn"),
  ("Ault Field"),
  ("Bainbridge Island"),
  ("Bangor Trident Base"),
  ("Banks Lake South"),
  ("Barberton"),
  ("Baring"),
  ("Basin City"),
  ("Battle Ground"),
  ("Bay Center"),
  ("Bay View"),
  ("Beaux Arts Village"),
  ("Bellevue"),
  ("Bell Hill"),
  ("Bellingham"),
  ("Benton City"),
  ("Bickleton"),
  ("Big Lake"),
  ("Bingen"),
  ("Birch Bay"),
  ("Black Diamond"),
  ("Blaine"),
  ("Blyn"),
  ("Bonney Lake"),
  ("Bothell"),
  ("Brady"),
  ("Bremerton"),
  ("Brewster"),
  ("Bridgeport"),
  ("Brier"),
  ("Brinnon"),
  ("Brush Prairie"),
  ("Bryn Mawr-Skyway"),
  ("Buckley"),
  ("Bucoda"),
  ("Burbank"),
  ("Burien"),
  ("Burlington"),
  ("Camano"),
  ("Camas"),
  ("Carbonado"),
  ("Carlsborg"),
  ("Carnation"),
  ("Carson River Valley"),
  ("Cascade-Fairwood"),
  ("Cascade Valley"),
  ("Cashmere"),
  ("Castle Rock"),
  ("Cathan"),
  ("Cathcart"),
  ("Cathlamet"),
  ("Centerville"),
  ("Centralia"),
  ("Central Park"),
  ("Chehalis"),
  ("Chehalis Village"),
  ("Chelan"),
  ("Cheney"),
  ("Cherry Grove"),
  ("Chewelah"),
  ("Chinook"),
  ("Clarkston"),
  ("Clarkston Heights-Vineland"),
  ("Clear Lake"),
  ("Cle Elum"),
  ("Clinton"),
  ("Clyde Hill"),
  ("Cohassett Beach"),
  ("Colfax"),
  ("College Place"),
  ("Colton"),
  ("Colville"),
  ("Conconully"),
  ("Concrete"),
  ("Connell"),
  ("Conway"),
  ("Copalis Beach"),
  ("Cosmopolis"),
  ("Cottage Lake"),
  ("Coulee City"),
  ("Coulee Dam"),
  ("Country Homes"),
  ("Coupeville"),
  ("Covington"),
  ("Creston"),
  ("Cusick"),
  ("Custer"),
  ("Dallesport"),
  ("Darrington"),
  ("Davenport"),
  ("Dayton"),
  ("Deer Park"),
  ("Deming"),
  ("Desert Aire"),
  ("Des Moines"),
  ("Dishman"),
  ("Dixie"),
  ("Dollar Corner"),
  ("DuPont"),
  ("Duvall"),
  ("East Cathlamet"),
  ("Eastgate"),
  ("East Hill-Meridian"),
  ("Easton"),
  ("East Port Orchard"),
  ("East Renton Highlands"),
  ("East Wenatchee"),
  ("East Wenatchee Bench"),
  ("Eatonville"),
  ("Echo Lake"),
  ("Edgewood"),
  ("Edison"),
  ("Edmonds"),
  ("Elbe"),
  ("Electric City"),
  ("Elk Plain"),
  ("Ellensburg"),
  ("Elma"),
  ("Elmer City"),
  ("Endicott"),
  ("Entiat"),
  ("Enumclaw"),
  ("Ephrata"),
  ("Erlands Point-Kitsap Lake"),
  ("Eschbach"),
  ("Esperance"),
  ("Everett"),
  ("Everson"),
  ("Fairchild AFB"),
  ("Fairfield"),
  ("Fairwood"),
  ("Fall City"),
  ("Farmington"),
  ("Federal Way"),
  ("Felida"),
  ("Ferndale"),
  ("Fife"),
  ("Finley"),
  ("Fircrest"),
  ("Five Corners"),
  ("Fords Prairie"),
  ("Forks"),
  ("Fort Lewis"),
  ("Fox Island"),
  ("Frederickson"),
  ("Freeland"),
  ("Friday Harbor"),
  ("Garfield"),
  ("Garrett"),
  ("Geneva"),
  ("George"),
  ("Gig Harbor"),
  ("Glacier"),
  ("Gleed"),
  ("Gold Bar"),
  ("Goldendale"),
  ("Graham"),
  ("Grand Coulee"),
  ("Grand Mound"),
  ("Grandview"),
  ("Granger"),
  ("Granite Falls"),
  ("Grayland"),
  ("Green Acres"),
  ("Greenwater"),
  ("Hamilton"),
  ("Harrah"),
  ("Harrington"),
  ("Hartline"),
  ("Hatton"),
  ("Hazel Dell North"),
  ("Hazel Dell South"),
  ("Highland"),
  ("Hobart"),
  ("Hockinson"),
  ("Hoquiam"),
  ("Humptulips"),
  ("Hunts Point"),
  ("Ilwaco"),
  ("Inchelium"),
  ("Index"),
  ("Indianola"),
  ("Inglewood-Finn Hill"),
  ("Ione"),
  ("Issaquah"),
  ("John Sam Lake"),
  ("Jordan Road-Canyon Creek"),
  ("Junction City"),
  ("Kahlotus"),
  ("Kalama"),
  ("Kelso"),
  ("Kendall"),
  ("Kenmore"),
  ("Kennewick"),
  ("Kent"),
  ("Kettle Falls"),
  ("Kingsgate"),
  ("Kingston"),
  ("Kirkland"),
  ("Kittitas"),
  ("Klickitat"),
  ("Krupp"),
  ("La Center"),
  ("Lacey"),
  ("La Conner"),
  ("La Crosse"),
  ("Lake Bosworth"),
  ("Lake Cavanaugh"),
  ("Lake Forest Park"),
  ("Lake Goodwin"),
  ("Lake Ketchum"),
  ("Lakeland North"),
  ("Lakeland South"),
  ("Lake McMurray"),
  ("Lake Marcel-Stillwater"),
  ("Lake Morton-Berrydale"),
  ("Lake Roesiger"),
  ("Lake Shore"),
  ("Lake Stevens"),
  ("Lakeview"),
  ("Lakewood"),
  ("Lamont"),
  ("Langley"),
  ("Latah"),
  ("Lea Hill"),
  ("Leavenworth"),
  ("Lebam"),
  ("Lewisville"),
  ("Liberty Lake"),
  ("Lind"),
  ("Lochsloy"),
  ("Long Beach"),
  ("Longview"),
  ("Longview Heights"),
  ("Lyle"),
  ("Lyman"),
  ("Lynden"),
  ("Lynnwood"),
  ("Mabton"),
  ("McChord AFB"),
  ("McCleary"),
  ("Machias"),
  ("Malden"),
  ("Malone-Porter"),
  ("Maltby"),
  ("Manchester"),
  ("Mansfield"),
  ("Maple Falls"),
  ("Maple Heights-Lake Desire"),
  ("Maple Valley"),
  ("Marblemount"),
  ("Marcus"),
  ("Marietta-Alderwood"),
  ("Markham"),
  ("Marrowstone"),
  ("Martha Lake"),
  ("Maryhill"),
  ("Marysville"),
  ("Mattawa"),
  ("May Creek"),
  ("Meadow Glade"),
  ("Medical Lake"),
  ("Medina"),
  ("Mercer Island"),
  ("Mesa"),
  ("Metaline"),
  ("Metaline Falls"),
  ("Midland"),
  ("Mill Creek"),
  ("Mill Plain"),
  ("Millwood"),
  ("Milton"),
  ("Minnehaha"),
  ("Mirrormont"),
  ("Moclips"),
  ("Monroe"),
  ("Montesano"),
  ("Morton"),
  ("Moses Lake"),
  ("Moses Lake North"),
  ("Mossyrock"),
  ("Mountlake Terrace"),
  ("Mount Vernon"),
  ("Mount Vista"),
  ("Moxee"),
  ("Mukilteo"),
  ("Naches"),
  ("Napavine"),
  ("Naselle"),
  ("Navy Yard City"),
  ("Neah Bay"),
  ("Neilton"),
  ("Nespelem"),
  ("Nespelem Community"),
  ("Newcastle"),
  ("Newport"),
  ("Nisqually Indian Community"),
  ("Nooksack"),
  ("Normandy Park"),
  ("North Bend"),
  ("North Bonneville"),
  ("North Creek"),
  ("North Marysville"),
  ("North Omak"),
  ("Northport"),
  ("North Stanwood"),
  ("North Sultan"),
  ("Northwest Snohomish"),
  ("North Yelm"),
  ("Oakesdale"),
  ("Oak Harbor"),
  ("Oakville"),
  ("Ocean City"),
  ("Ocean Park"),
  ("Ocean Shores"),
  ("Odessa"),
  ("Okanogan"),
  ("Olympia"),
  ("Omak"),
  ("Opportunity"),
  ("Orchards"),
  ("Oroville"),
  ("Orting"),
  ("Oso"),
  ("Othello"),
  ("Otis Orchards-East Farms"),
  ("Oyehut-Hogans Corner"),
  ("Pacific"),
  ("Paine Field-Lake Stickney"),
  ("Palouse"),
  ("Parkland"),
  ("Parkwood"),
  ("Pasco"),
  ("Pateros"),
  ("Peaceful Valley"),
  ("Pe Ell"),
  ("Picnic Point-North Lynnwood"),
  ("Pomeroy"),
  ("Port Angeles"),
  ("Port Angeles East"),
  ("Port Hadlock-Irondale"),
  ("Port Ludlow"),
  ("Port Orchard"),
  ("Port Townsend"),
  ("Poulsbo"),
  ("Prairie Ridge"),
  ("Prescott"),
  ("Priest Point"),
  ("Prosser"),
  ("Pullman"),
  ("Puyallup"),
  ("Quilcene"),
  ("Quincy"),
  ("Rainier"),
  ("Ravensdale"),
  ("Raymond"),
  ("Reardan"),
  ("Redmond"),
  ("Renton"),
  ("Republic"),
  ("Richland"),
  ("Ridgefield"),
  ("Ritzville"),
  ("Riverbend"),
  ("River Road"),
  ("Riverside"),
  ("Riverton-Boulevard Park"),
  ("Rochester"),
  ("Rockford"),
  ("Rock Island"),
  ("Rockport"),
  ("Ronald"),
  ("Roosevelt"),
  ("Rosalia"),
  ("Roslyn"),
  ("Roy"),
  ("Royal City"),
  ("Ruston"),
  ("St. John"),
  ("Salmon Creek"),
  ("Sammamish"),
  ("Satsop"),
  ("Satus"),
  ("SeaTac"),
  ("Seattle"),
  ("Seattle Hill-Silver Firs"),
  ("Sedro-Woolley"),
  ("Selah"),
  ("Sequim"),
  ("Shaker Church"),
  ("Shelton"),
  ("Shoreline"),
  ("Silvana"),
  ("Silverdale"),
  ("Skokomish"),
  ("Skykomish"),
  ("Smokey Point"),
  ("Snohomish"),
  ("Snoqualmie"),
  ("Snoqualmie Pass"),
  ("Soap Lake"),
  ("South Bend"),
  ("South Cle Elum"),
  ("South Hill"),
  ("South Prairie"),
  ("South Wenatchee"),
  ("Spanaway"),
  ("Spangle"),
  ("Spokane"),
  ("Sprague"),
  ("Springdale"),
  ("Stanwood"),
  ("Starbuck"),
  ("Startup"),
  ("Steilacoom"),
  ("Stevenson"),
  ("Stimson Crossing"),
  ("Sudden Valley"),
  ("Sultan"),
  ("Sumas"),
  ("Summit"),
  ("Summitview"),
  ("Sumner"),
  ("Sunnyside"),
  ("Sunnyslope"),
  ("Suquamish"),
  ("Tacoma"),
  ("Taholah"),
  ("Tanglewilde-Thompson Place"),
  ("Tanner"),
  ("Tekoa"),
  ("Tenino"),
  ("Terrace Heights"),
  ("Thorp"),
  ("Three Lakes"),
  ("Tieton"),
  ("Tokeland"),
  ("Toledo"),
  ("Tonasket"),
  ("Toppenish"),
  ("Touchet"),
  ("Town and Country"),
  ("Tracyton"),
  ("Trentwood"),
  ("Trout Lake"),
  ("Tukwila"),
  ("Tulalip Bay"),
  ("Tumwater"),
  ("Twisp"),
  ("Union Gap"),
  ("Union Hill-Novelty Hill"),
  ("Uniontown"),
  ("University Place"),
  ("Vader"),
  ("Vancouver"),
  ("Vantage"),
  ("Vashon"),
  ("Venersborg"),
  ("Veradale"),
  ("Verlot"),
  ("Waitsburg"),
  ("Walla Walla"),
  ("Walla Walla East"),
  ("Waller"),
  ("Wallula"),
  ("Walnut Grove"),
  ("Wapato"),
  ("Warden"),
  ("Warm Beach"),
  ("Washougal"),
  ("Washtucna"),
  ("Waterville"),
  ("Waverly"),
  ("Weallup Lake"),
  ("Wenatchee"),
  ("West Clarkston-Highland"),
  ("West Lake Sammamish"),
  ("West Lake Stevens"),
  ("West Longview"),
  ("West Pasco"),
  ("Westport"),
  ("West Richland"),
  ("West Side Highway"),
  ("West Valley"),
  ("West Wenatchee"),
  ("White Center"),
  ("White Salmon"),
  ("White Swan"),
  ("Wilbur"),
  ("Wilkeson"),
  ("Wilson Creek"),
  ("Winlock"),
  ("Winthrop"),
  ("Wishram"),
  ("Woodinville"),
  ("Woodland"),
  ("Woods Creek"),
  ("Woodway"),
  ("Yacolt"),
  ("Yakima"),
  ("Yarrow Point"),
  ("Yelm"),
  ("Zillah"),
  ("Addison (Webster Springs)"),
  ("Albright"),
  ("Alderson"),
  ("Alum Creek"),
  ("Amherstdale-Robinette"),
  ("Anawalt"),
  ("Anmoore"),
  ("Ansted"),
  ("Athens"),
  ("Auburn"),
  ("Bancroft"),
  ("Barboursville"),
  ("Barrackville"),
  ("Bath (Berkeley Springs)"),
  ("Bayard"),
  ("Beaver"),
  ("Beckley"),
  ("Beech Bottom"),
  ("Belington"),
  ("Belle"),
  ("Belmont"),
  ("Benwood"),
  ("Bethany"),
  ("Bethlehem"),
  ("Beverly"),
  ("Blacksville"),
  ("Blennerhassett"),
  ("Bluefield"),
  ("Boaz"),
  ("Bolivar"),
  ("Bradley"),
  ("Bradshaw"),
  ("Bramwell"),
  ("Brandonville"),
  ("Bridgeport"),
  ("Brookhaven"),
  ("Bruceton Mills"),
  ("Buckhannon"),
  ("Buffalo"),
  ("Burnsville"),
  ("Cairo"),
  ("Camden-on-Gauley"),
  ("Cameron"),
  ("Capon Bridge"),
  ("Carpendale"),
  ("Cassville"),
  ("Cedar Grove"),
  ("Ceredo"),
  ("Chapmanville"),
  ("Charleston"),
  ("Charles Town"),
  ("Chattaroy"),
  ("Cheat Lake"),
  ("Chesapeake"),
  ("Chester"),
  ("Clarksburg"),
  ("Clay"),
  ("Clearview"),
  ("Clendenin"),
  ("Coal City"),
  ("Coal Fork"),
  ("Corporation of Ranson"),
  ("Cowen"),
  ("Crab Orchard"),
  ("Craigsville"),
  ("Cross Lanes"),
  ("Culloden"),
  ("Daniels"),
  ("Danville"),
  ("Davis"),
  ("Davy"),
  ("Delbarton"),
  ("Despard"),
  ("Dunbar"),
  ("Durbin"),
  ("East Bank"),
  ("Eleanor"),
  ("Elizabeth"),
  ("Elk Garden"),
  ("Elkins"),
  ("Elkview"),
  ("Ellenboro"),
  ("Enterprise"),
  ("Fairlea"),
  ("Fairmont"),
  ("Fairview"),
  ("Falling Spring"),
  ("Farmington"),
  ("Fayetteville"),
  ("Flatwoods"),
  ("Flemington"),
  ("Follansbee"),
  ("Fort Ashby"),
  ("Fort Gay"),
  ("Franklin"),
  ("Friendly"),
  ("Gary"),
  ("Gassaway"),
  ("Gauley Bridge"),
  ("Gilbert"),
  ("Gilbert Creek"),
  ("Glasgow"),
  ("Glen Dale"),
  ("Glenville"),
  ("Grafton"),
  ("Grantsville"),
  ("Grant Town"),
  ("Granville"),
  ("Hambleton"),
  ("Hamlin"),
  ("Handley"),
  ("Harman"),
  ("Harpers Ferry"),
  ("Harrisville"),
  ("Hartford City"),
  ("Harts"),
  ("Hedgesville"),
  ("Henderson"),
  ("Hendricks"),
  ("Hillsboro"),
  ("Hinton"),
  ("Holden"),
  ("Hooverson Heights"),
  ("Hundred"),
  ("Huntington"),
  ("Hurricane"),
  ("Huttonsville"),
  ("Iaeger"),
  ("Inwood"),
  ("Jane Lew"),
  ("Jefferson"),
  ("Junior"),
  ("Kenova"),
  ("Kermit"),
  ("Keyser"),
  ("Keystone"),
  ("Kimball"),
  ("Kingwood"),
  ("Leon"),
  ("Lester"),
  ("Lewisburg"),
  ("Littleton"),
  ("Logan"),
  ("Lost Creek"),
  ("Lubeck"),
  ("Lumberport"),
  ("Mabscott"),
  ("MacArthur"),
  ("McMechen"),
  ("Madison"),
  ("Mallory"),
  ("Man"),
  ("Mannington"),
  ("Marlinton"),
  ("Marmet"),
  ("Martinsburg"),
  ("Mason"),
  ("Masontown"),
  ("Matewan"),
  ("Matoaka"),
  ("Meadow Bridge"),
  ("Middlebourne"),
  ("Mill Creek"),
  ("Milton"),
  ("Mineralwells"),
  ("Mitchell Heights"),
  ("Monongah"),
  ("Montcalm"),
  ("Montgomery"),
  ("Montrose"),
  ("Moorefield"),
  ("Morgantown"),
  ("Moundsville"),
  ("Mount Gay-Shamrock"),
  ("Mount Hope"),
  ("Mullens"),
  ("Newburg"),
  ("New Cumberland"),
  ("Newell"),
  ("New Haven"),
  ("New Martinsville"),
  ("Nitro"),
  ("Northfork"),
  ("North Hills"),
  ("Nutter Fort"),
  ("Oak Hill"),
  ("Oakvale"),
  ("Oceana"),
  ("Paden City"),
  ("Parkersburg"),
  ("Parsons"),
  ("Paw Paw"),
  ("Pax"),
  ("Pea Ridge"),
  ("Pennsboro"),
  ("Petersburg"),
  ("Peterstown"),
  ("Philippi"),
  ("Piedmont"),
  ("Pinch"),
  ("Pine Grove"),
  ("Pineville"),
  ("Piney View"),
  ("Pleasant Valley"),
  ("Poca"),
  ("Point Pleasant"),
  ("Powellton"),
  ("Pratt"),
  ("Princeton"),
  ("Prosperity"),
  ("Pullman"),
  ("Quinwood"),
  ("Rainelle"),
  ("Ravenswood"),
  ("Red Jacket"),
  ("Reedsville"),
  ("Reedy"),
  ("Rhodell"),
  ("Richwood"),
  ("Ridgeley"),
  ("Ripley"),
  ("Rivesville"),
  ("Romney"),
  ("Ronceverte"),
  ("Rowlesburg"),
  ("Rupert"),
  ("St. Albans"),
  ("St. Marys"),
  ("Salem"),
  ("Sand Fork"),
  ("Shady Spring"),
  ("Shepherdstown"),
  ("Shinnston"),
  ("Sissonville"),
  ("Sistersville"),
  ("Smithers"),
  ("Smithfield"),
  ("Sophia"),
  ("South Charleston"),
  ("Spencer"),
  ("Stanaford"),
  ("Star City"),
  ("Stonewood"),
  ("Summersville"),
  ("Sutton"),
  ("Switzer"),
  ("Sylvester"),
  ("Teays Valley"),
  ("Terra Alta"),
  ("Thomas"),
  ("Thurmond"),
  ("Tornado"),
  ("Triadelphia"),
  ("Tunnelton"),
  ("Union"),
  ("Valley Grove"),
  ("Vienna"),
  ("War"),
  ("Wardensville"),
  ("Washington"),
  ("Wayne"),
  ("Weirton"),
  ("Welch"),
  ("Wellsburg"),
  ("West Hamlin"),
  ("West Liberty"),
  ("West Logan"),
  ("West Milford"),
  ("Weston"),
  ("Westover"),
  ("West Union"),
  ("Wheeling"),
  ("Whitehall"),
  ("White Sulphur Springs"),
  ("Whitesville"),
  ("Wiley Ford"),
  ("Williamson"),
  ("Williamstown"),
  ("Windsor Heights"),
  ("Winfield"),
  ("Womelsdorf (Coalton)"),
  ("Worthington"),
  ("Abbotsford"),
  ("Adams"),
  ("Adell"),
  ("Albany"),
  ("Algoma"),
  ("Allouez"),
  ("Alma"),
  ("Alma Center"),
  ("Almena"),
  ("Almond"),
  ("Altoona"),
  ("Amery"),
  ("Amherst"),
  ("Amherst Junction"),
  ("Aniwa"),
  ("Antigo"),
  ("Appleton"),
  ("Arcadia"),
  ("Arena"),
  ("Argyle"),
  ("Arlington"),
  ("Arpin"),
  ("Ashland"),
  ("Ashwaubenon"),
  ("Athens"),
  ("Auburndale"),
  ("Augusta"),
  ("Avoca"),
  ("Bagley"),
  ("Baldwin"),
  ("Balsam Lake"),
  ("Bangor"),
  ("Baraboo"),
  ("Barneveld"),
  ("Barron"),
  ("Bay City"),
  ("Bayfield"),
  ("Bayside"),
  ("Bear Creek"),
  ("Beaver Dam"),
  ("Belgium"),
  ("Bell Center"),
  ("Belleville"),
  ("Bellevue Town"),
  ("Belmont"),
  ("Beloit"),
  ("Benton"),
  ("Berlin"),
  ("Big Bend"),
  ("Big Falls"),
  ("Birchwood"),
  ("Birnamwood"),
  ("Biron"),
  ("Black Creek"),
  ("Black Earth"),
  ("Black River Falls"),
  ("Blair"),
  ("Blanchardville"),
  ("Bloomer"),
  ("Bloomington"),
  ("Blue Mounds"),
  ("Blue River"),
  ("Boaz"),
  ("Bohners Lake"),
  ("Bonduel"),
  ("Boscobel"),
  ("Bowler"),
  ("Boyceville"),
  ("Boyd"),
  ("Brandon"),
  ("Brice Prairie"),
  ("Brillion"),
  ("Brodhead"),
  ("Brokaw"),
  ("Brookfield"),
  ("Brooklyn"),
  ("Brown Deer"),
  ("Browns Lake"),
  ("Brownsville"),
  ("Browntown"),
  ("Bruce"),
  ("Buffalo City"),
  ("Burlington"),
  ("Butler"),
  ("Butternut"),
  ("Cadott"),
  ("Cambria"),
  ("Cambridge"),
  ("Cameron"),
  ("Campbellsport"),
  ("Camp Douglas"),
  ("Camp Lake"),
  ("Cascade"),
  ("Casco"),
  ("Cashton"),
  ("Cassville"),
  ("Catawba"),
  ("Cazenovia"),
  ("Cecil"),
  ("Cedarburg"),
  ("Cedar Grove"),
  ("Centuria"),
  ("Chain O' Lakes-King"),
  ("Chaseburg"),
  ("Chenequa"),
  ("Chetek"),
  ("Chief Lake"),
  ("Chilton"),
  ("Chippewa Falls"),
  ("Clayton"),
  ("Clear Lake"),
  ("Cleveland"),
  ("Clinton"),
  ("Clintonville"),
  ("Clyman"),
  ("Cobb"),
  ("Cochrane"),
  ("Colby"),
  ("Coleman"),
  ("Colfax"),
  ("Coloma"),
  ("Columbus"),
  ("Combined Locks"),
  ("Como"),
  ("Conrath"),
  ("Coon Valley"),
  ("Cornell"),
  ("Cottage Grove"),
  ("Couderay"),
  ("Crandon"),
  ("Crivitz"),
  ("Cross Plains"),
  ("Cuba City"),
  ("Cudahy"),
  ("Cumberland"),
  ("Curtiss"),
  ("Dallas"),
  ("Dane"),
  ("Darien"),
  ("Darlington"),
  ("Deerfield"),
  ("Deer Park"),
  ("DeForest"),
  ("Delafield"),
  ("Delavan"),
  ("Delavan Lake"),
  ("Denmark"),
  ("De Pere"),
  ("De Soto"),
  ("Dickeyville"),
  ("Dodgeville"),
  ("Dorchester"),
  ("Dousman"),
  ("Downing"),
  ("Doylestown"),
  ("Dresser"),
  ("Durand"),
  ("Eagle"),
  ("Eagle Lake"),
  ("Eagle River"),
  ("Eastman"),
  ("East Troy"),
  ("Eau Claire"),
  ("Eden"),
  ("Edgar"),
  ("Edgerton"),
  ("Egg Harbor"),
  ("Eland"),
  ("Elderon"),
  ("Eleva"),
  ("Elkhart Lake"),
  ("Elkhorn"),
  ("Elk Mound"),
  ("Ellsworth"),
  ("Elm Grove"),
  ("Elmwood"),
  ("Elmwood Park"),
  ("Elroy"),
  ("Embarrass"),
  ("Endeavor"),
  ("Ephraim"),
  ("Ettrick"),
  ("Evansville"),
  ("Evergreen"),
  ("Exeland"),
  ("Fairchild"),
  ("Fairwater"),
  ("Fall Creek"),
  ("Fall River"),
  ("Fennimore"),
  ("Fenwood"),
  ("Ferryville"),
  ("Fitchburg"),
  ("Fond du Lac"),
  ("Fontana-on-Geneva Lake"),
  ("Footville"),
  ("Forestville"),
  ("Fort Atkinson"),
  ("Fountain City"),
  ("Fox Lake"),
  ("Fox Point"),
  ("Francis Creek"),
  ("Franklin"),
  ("Franksville"),
  ("Frederic"),
  ("Fredonia"),
  ("Fremont"),
  ("French Island"),
  ("Friendship"),
  ("Friesland"),
  ("Galesville"),
  ("Gays Mills"),
  ("Genoa"),
  ("Genoa City"),
  ("Germantown"),
  ("Gillett"),
  ("Gilman"),
  ("Glenbeulah"),
  ("Glendale"),
  ("Glen Flora"),
  ("Glenwood City"),
  ("Grafton"),
  ("Granton"),
  ("Grantsburg"),
  ("Gratiot"),
  ("Green Bay"),
  ("Greendale"),
  ("Greenfield"),
  ("Green Lake"),
  ("Greenwood"),
  ("Gresham"),
  ("Hales Corners"),
  ("Hammond"),
  ("Hancock"),
  ("Hartford"),
  ("Hartland"),
  ("Hatley"),
  ("Haugen"),
  ("Hawkins"),
  ("Hayward"),
  ("Hazel Green"),
  ("Hebron"),
  ("Helenville"),
  ("Hewitt"),
  ("Highland"),
  ("Hilbert"),
  ("Hillsboro"),
  ("Hixton"),
  ("Hollandale"),
  ("Holmen"),
  ("Horicon"),
  ("Hortonville"),
  ("Howard"),
  ("Howards Grove"),
  ("Hudson"),
  ("Hurley"),
  ("Hustisford"),
  ("Hustler"),
  ("Independence"),
  ("Ingram"),
  ("Iola"),
  ("Iron Ridge"),
  ("Ironton"),
  ("Ixonia"),
  ("Jackson"),
  ("Janesville"),
  ("Jefferson"),
  ("Johnson Creek"),
  ("Junction City"),
  ("Juneau"),
  ("Kaukauna"),
  ("Kekoskee"),
  ("Kellnersville"),
  ("Kendall"),
  ("Kennan"),
  ("Kenosha"),
  ("Keshena"),
  ("Kewaskum"),
  ("Kewaunee"),
  ("Kiel"),
  ("Kimberly"),
  ("Kingston"),
  ("Knapp"),
  ("Kohler"),
  ("Lac du Flambeau"),
  ("Lac La Belle"),
  ("La Crosse"),
  ("Ladysmith"),
  ("La Farge"),
  ("Lake Delton"),
  ("Lake Geneva"),
  ("Lake Koshkonong"),
  ("Lake Lac La Belle"),
  ("Lake Mills"),
  ("Lake Nebagamon"),
  ("Lake Ripley"),
  ("Lake Shangrila"),
  ("Lake Wazeecha"),
  ("Lake Wisconsin"),
  ("Lake Wissota"),
  ("Lancaster"),
  ("Lannon"),
  ("La Valle"),
  ("Legend Lake"),
  ("Lena"),
  ("Lime Ridge"),
  ("Linden"),
  ("Little Chute"),
  ("Little Round Lake"),
  ("Livingston"),
  ("Lodi"),
  ("Loganville"),
  ("Lohrville"),
  ("Lomira"),
  ("Lone Rock"),
  ("Lowell"),
  ("Loyal"),
  ("Lublin"),
  ("Luck"),
  ("Luxemburg"),
  ("Lyndon Station"),
  ("Lynxville"),
  ("McFarland"),
  ("Madison"),
  ("Maiden Rock"),
  ("Manawa"),
  ("Manitowoc"),
  ("Maple Bluff"),
  ("Marathon City"),
  ("Maribel"),
  ("Marinette"),
  ("Marion"),
  ("Markesan"),
  ("Marquette"),
  ("Marshall"),
  ("Marshfield"),
  ("Mason"),
  ("Mattoon"),
  ("Mauston"),
  ("Mayville"),
  ("Mazomanie"),
  ("Medford"),
  ("Mellen"),
  ("Melrose"),
  ("Melvina"),
  ("Menasha"),
  ("Menomonee Falls"),
  ("Menomonie"),
  ("Mequon"),
  ("Merrill"),
  ("Merrillan"),
  ("Merrimac"),
  ("Merton"),
  ("Middleton"),
  ("Middle Village"),
  ("Milladore"),
  ("Milltown"),
  ("Milton"),
  ("Milwaukee"),
  ("Mineral Point"),
  ("Minong"),
  ("Mishicot"),
  ("Mondovi"),
  ("Monona"),
  ("Monroe"),
  ("Montello"),
  ("Montfort"),
  ("Monticello"),
  ("Montreal"),
  ("Mosinee"),
  ("Mount Calvary"),
  ("Mount Hope"),
  ("Mount Horeb"),
  ("Mount Sterling"),
  ("Mukwonago"),
  ("Muscoda"),
  ("Muskego"),
  ("Nashotah"),
  ("Necedah"),
  ("Neenah"),
  ("Neillsville"),
  ("Nekoosa"),
  ("Nelson"),
  ("Nelsonville"),
  ("Neopit"),
  ("Neosho"),
  ("Neshkoro"),
  ("New Auburn"),
  ("New Berlin"),
  ("Newburg"),
  ("New Glarus"),
  ("New Holstein"),
  ("New Lisbon"),
  ("New London"),
  ("New Post"),
  ("New Richmond"),
  ("Niagara"),
  ("Nichols"),
  ("North Bay"),
  ("North Fond du Lac"),
  ("North Freedom"),
  ("North Hudson"),
  ("North Prairie"),
  ("Norwalk"),
  ("Oak Creek"),
  ("Oakdale"),
  ("Oakfield"),
  ("Oconomowoc"),
  ("Oconomowoc Lake"),
  ("Oconto"),
  ("Oconto Falls"),
  ("Odanah"),
  ("Ogdensburg"),
  ("Okauchee Lake"),
  ("Oliver"),
  ("Omro"),
  ("Onalaska"),
  ("Oneida"),
  ("Ontario"),
  ("Oostburg"),
  ("Oregon"),
  ("Orfordville"),
  ("Osceola"),
  ("Oshkosh"),
  ("Osseo"),
  ("Owen"),
  ("Oxford"),
  ("Paddock Lake"),
  ("Palmyra"),
  ("Pardeeville"),
  ("Park Falls"),
  ("Park Ridge"),
  ("Patch Grove"),
  ("Pell Lake"),
  ("Pepin"),
  ("Peshtigo"),
  ("Pewaukee"),
  ("Pewaukee"),
  ("Phillips"),
  ("Pigeon Falls"),
  ("Pittsville"),
  ("Plain"),
  ("Plainfield"),
  ("Platteville"),
  ("Pleasant Prairie"),
  ("Plover"),
  ("Plum City"),
  ("Plymouth"),
  ("Poplar"),
  ("Portage"),
  ("Port Edwards"),
  ("Port Washington"),
  ("Potosi"),
  ("Potter"),
  ("Potter Lake"),
  ("Pound"),
  ("Powers Lake"),
  ("Poynette"),
  ("Prairie du Chien"),
  ("Prairie du Sac"),
  ("Prairie Farm"),
  ("Prentice"),
  ("Prescott"),
  ("Princeton"),
  ("Pulaski"),
  ("Racine"),
  ("Radisson"),
  ("Randolph"),
  ("Random Lake"),
  ("Readstown"),
  ("Redgranite"),
  ("Reedsburg"),
  ("Reedsville"),
  ("Reeseville"),
  ("Reserve"),
  ("Rewey"),
  ("Rhinelander"),
  ("Rib Lake"),
  ("Rib Mountain"),
  ("Rice Lake"),
  ("Richland Center"),
  ("Ridgeland"),
  ("Ridgeway"),
  ("Rio"),
  ("Ripon"),
  ("River Falls"),
  ("River Hills"),
  ("Roberts"),
  ("Rochester"),
  ("Rockdale"),
  ("Rockland"),
  ("Rock Springs"),
  ("Rome"),
  ("Rosendale"),
  ("Rosholt"),
  ("Rothschild"),
  ("Rudolph"),
  ("St. Cloud"),
  ("St. Croix Falls"),
  ("St. Francis"),
  ("St. Nazianz"),
  ("Sauk City"),
  ("Saukville"),
  ("Scandinavia"),
  ("Schofield"),
  ("Seymour"),
  ("Seymour"),
  ("Sharon"),
  ("Shawano"),
  ("Sheboygan"),
  ("Sheboygan Falls"),
  ("Sheldon"),
  ("Shell Lake"),
  ("Sherwood"),
  ("Shiocton"),
  ("Shorewood"),
  ("Shorewood Hills"),
  ("Shullsburg"),
  ("Silver Lake"),
  ("Siren"),
  ("Sister Bay"),
  ("Slinger"),
  ("Soldiers Grove"),
  ("Solon Springs"),
  ("Somerset"),
  ("South Milwaukee"),
  ("South Wayne"),
  ("Sparta"),
  ("Spencer"),
  ("Spooner"),
  ("Spring Green"),
  ("Spring Valley"),
  ("Stanley"),
  ("Star Prairie"),
  ("Stetsonville"),
  ("Steuben"),
  ("Stevens Point"),
  ("Stockbridge"),
  ("Stockholm"),
  ("Stoddard"),
  ("Stoughton"),
  ("Stratford"),
  ("Strum"),
  ("Sturgeon Bay"),
  ("Sturtevant"),
  ("Sullivan"),
  ("Sun Prairie"),
  ("Superior"),
  ("Superior"),
  ("Suring"),
  ("Sussex"),
  ("Tainter Lake"),
  ("Taylor"),
  ("Tennyson"),
  ("Theresa"),
  ("Thiensville"),
  ("Thorp"),
  ("Tigerton"),
  ("Tomah"),
  ("Tomahawk"),
  ("Tony"),
  ("Trempealeau"),
  ("Turtle Lake"),
  ("Twin Lakes"),
  ("Two Rivers"),
  ("Union Center"),
  ("Union Grove"),
  ("Unity"),
  ("Valders"),
  ("Verona"),
  ("Vesper"),
  ("Viola"),
  ("Viroqua"),
  ("Waldo"),
  ("Wales"),
  ("Walworth"),
  ("Warrens"),
  ("Washburn"),
  ("Waterford"),
  ("Waterford North"),
  ("Waterloo"),
  ("Watertown"),
  ("Waukesha"),
  ("Waunakee"),
  ("Waupaca"),
  ("Waupun"),
  ("Wausau"),
  ("Wausaukee"),
  ("Wautoma"),
  ("Wauwatosa"),
  ("Wauzeka"),
  ("Webster"),
  ("West Allis"),
  ("West Baraboo"),
  ("West Bend"),
  ("Westby"),
  ("Westfield"),
  ("West Milwaukee"),
  ("Weston"),
  ("West Salem"),
  ("Weyauwega"),
  ("Weyerhaeuser"),
  ("Wheeler"),
  ("Whitefish Bay"),
  ("Whitehall"),
  ("White Lake"),
  ("Whitelaw"),
  ("Whitewater"),
  ("Whiting"),
  ("Wild Rose"),
  ("Williams Bay"),
  ("Wilson"),
  ("Wilton"),
  ("Wind Lake"),
  ("Wind Point"),
  ("Windsor"),
  ("Winneconne"),
  ("Winter"),
  ("Wisconsin Dells"),
  ("Wisconsin Rapids"),
  ("Withee"),
  ("Wittenberg"),
  ("Wonewoc"),
  ("Woodman"),
  ("Woodville"),
  ("Wrightstown"),
  ("Wyeville"),
  ("Wyocena"),
  ("Yuba"),
  ("Zoar"),
  ("Afton"),
  ("Airport Road"),
  ("Albany"),
  ("Albin"),
  ("Alcova"),
  ("Alpine"),
  ("Alpine Northeast"),
  ("Alpine Northwest"),
  ("Alta"),
  ("Antelope Hills"),
  ("Antelope Valley-Crestview"),
  ("Arapahoe"),
  ("Arrowhead Springs"),
  ("Arvada"),
  ("Atlantic City"),
  ("Auburn"),
  ("Baggs"),
  ("Bairoil"),
  ("Bar Nunn"),
  ("Basin"),
  ("Bedford"),
  ("Bessemer Bend"),
  ("Big Horn"),
  ("Big Piney"),
  ("Bondurant"),
  ("Boulder"),
  ("Boulder Flats"),
  ("Brookhurst"),
  ("Buffalo"),
  ("Burlington"),
  ("Burns"),
  ("Byron"),
  ("Calpet"),
  ("Carter"),
  ("Casper"),
  ("Casper Mountain"),
  ("Centennial"),
  ("Cheyenne"),
  ("Chugcreek"),
  ("Chugwater"),
  ("Clearmont"),
  ("Clearview Acres"),
  ("Cody"),
  ("Cokeville"),
  ("Cora"),
  ("Cowley"),
  ("Crowheart"),
  ("Daniel"),
  ("Dayton"),
  ("Deaver"),
  ("Diamondville"),
  ("Dixon"),
  ("Douglas"),
  ("Dubois"),
  ("East Thermopolis"),
  ("Eden"),
  ("Edgerton"),
  ("Elk Mountain"),
  ("Esterbrook"),
  ("Ethete"),
  ("Etna"),
  ("Evanston"),
  ("Evansville"),
  ("Fairview"),
  ("Farson"),
  ("Fontenelle"),
  ("Fort Bridger"),
  ("Fort Laramie"),
  ("Fort Washakie"),
  ("Fox Farm-College"),
  ("Frannie"),
  ("Garland"),
  ("Gillette"),
  ("Glendo"),
  ("Glenrock"),
  ("Grand Encampment"),
  ("Granger"),
  ("Green River"),
  ("Greybull"),
  ("Grover"),
  ("Guernsey"),
  ("Hanna"),
  ("Hartrandt"),
  ("Hartville"),
  ("Hawk Springs"),
  ("Hill View Heights"),
  ("Hoback"),
  ("Homa Hills"),
  ("Hudson"),
  ("Hulett"),
  ("Huntley"),
  ("Hyattville"),
  ("Jackson"),
  ("James Town"),
  ("Jeffrey City"),
  ("Johnstown"),
  ("Kaycee"),
  ("Kemmerer"),
  ("Kirby"),
  ("La Barge"),
  ("La Grange"),
  ("Lakeview North"),
  ("Lance Creek"),
  ("Lander"),
  ("Laramie"),
  ("Lingle"),
  ("Little America"),
  ("Lonetree"),
  ("Lost Springs"),
  ("Lovell"),
  ("Lucerne"),
  ("Lusk"),
  ("Lyman"),
  ("McKinnon"),
  ("Mc Nutt"),
  ("Manderson"),
  ("Manville"),
  ("Marbleton"),
  ("Meadow Acres"),
  ("Meadow Lark Lake"),
  ("Medicine Bow"),
  ("Meeteetse"),
  ("Midwest"),
  ("Mills"),
  ("Moorcroft"),
  ("Moose Wilson Road"),
  ("Mountain View"),
  ("Mountain View"),
  ("Newcastle"),
  ("North Rock Springs"),
  ("Oakley"),
  ("Opal"),
  ("Osage"),
  ("Owl Creek"),
  ("Parkman"),
  ("Pavillion"),
  ("Pine Bluffs"),
  ("Pinedale"),
  ("Pine Haven"),
  ("Point of Rocks"),
  ("Powder River"),
  ("Powell"),
  ("Purple Sage"),
  ("Rafter J Ranch"),
  ("Ralston"),
  ("Ranchester"),
  ("Ranchettes"),
  ("Rawlins"),
  ("Red Butte"),
  ("Reliance"),
  ("Riverside"),
  ("Riverton"),
  ("Robertson"),
  ("Rock River"),
  ("Rock Springs"),
  ("Rolling Hills"),
  ("Saratoga"),
  ("Sheridan"),
  ("Shoshoni"),
  ("Sinclair"),
  ("Slater"),
  ("Sleepy Hollow"),
  ("Smoot"),
  ("South Flat"),
  ("South Greeley"),
  ("South Park"),
  ("Star Valley Ranch"),
  ("Story"),
  ("Sundance"),
  ("Superior"),
  ("Sweeney Ranch"),
  ("Table Rock"),
  ("Taylor"),
  ("Ten Sleep"),
  ("Teton Village"),
  ("Thayne"),
  ("The Buttes"),
  ("Thermopolis"),
  ("Torrington"),
  ("Turnerville"),
  ("Upton"),
  ("Van Tassell"),
  ("Veteran"),
  ("Vista West"),
  ("Wamsutter"),
  ("Warren AFB"),
  ("Washakie Ten"),
  ("Washam"),
  ("West River"),
  ("Westview Circle"),
  ("Wheatland"),
  ("Wilson"),
  ("Winchester"),
  ("Woods Landing-Jelm"),
  ("Worland"),
  ("Wright"),
  ("Yoder"),
  ("Y-O Ranch"),
  ("Aceitunas"),
  ("Adjuntas zona"),
  ("Aguada zona"),
  ("Aguadilla zona"),
  ("Aguas Buenas zona"),
  ("Aguas Claras"),
  ("Aguilita"),
  ("Aibonito zona"),
  ("A�asco zona"),
  ("Animas"),
  ("Ant�n Ru�z"),
  ("Arecibo zona"),
  ("Arroyo zona"),
  ("Bairoa"),
  ("Bajadero"),
  ("Bajandas"),
  ("Barahona"),
  ("Barceloneta zona"),
  ("Barranquitas zona"),
  ("Bartolo"),
  ("Bayam�n zona"),
  ("Bayam�n"),
  ("Ben�tez"),
  ("Betances"),
  ("Boqueron"),
  ("Boquer�n"),
  ("Bre�as"),
  ("Buena Vista"),
  ("B�falo"),
  ("Cab�n"),
  ("Cabo Rojo zona"),
  ("Cacao"),
  ("Caguas zona"),
  ("Campanilla"),
  ("Campo Rico"),
  ("Camuy zona"),
  ("Candelaria"),
  ("Candelaria Arenas"),
  ("Candelero Arriba"),
  ("Can�vanas zona"),
  ("Capitanejo"),
  ("Carolina zona"),
  ("Carrizales"),
  ("Cata�o zona"),
  ("Cayey zona"),
  ("Cayuco"),
  ("Ceiba zona"),
  ("Ceiba"),
  ("Celada"),
  ("Central Aguirre"),
  ("Ciales zona"),
  ("Cidra zona"),
  ("Coamo zona"),
  ("Coco"),
  ("Comer�o zona"),
  ("Comunas"),
  ("Coqu�"),
  ("Coraz�n"),
  ("Corcovado"),
  ("Corozal zona"),
  ("Coto Laurel"),
  ("Coto Norte"),
  ("Culebra zona"),
  ("Daguao"),
  ("Dorado zona"),
  ("Duque"),
  ("El Mang�"),
  ("El Negro"),
  ("El Ojo"),
  ("Emajagua"),
  ("Esperanza"),
  ("Espino"),
  ("Fajardo zona"),
  ("Florida zona"),
  ("Fr�nquez"),
  ("Fuig"),
  ("Galateo"),
  ("Garrochales"),
  ("G. L. Garc�a"),
  ("Gu�nica zona"),
  ("Guayabal"),
  ("Guayama zona"),
  ("Guayanilla zona"),
  ("Guaynabo zona"),
  ("Gurabo zona"),
  ("Hatillo zona"),
  ("Hato Arriba"),
  ("Hato Candal"),
  ("Hormigueros zona"),
  ("H. Rivera Col�n"),
  ("Humacao zona"),
  ("Imb�ry"),
  ("Indios"),
  ("Ingenio"),
  ("Isabela zona"),
  ("Jagual"),
  ("Jauca"),
  ("Jayuya zona"),
  ("Jobos"),
  ("Juana D�az zona"),
  ("Juncal"),
  ("Juncos zona"),
  ("La Alianza"),
  ("La Dolores"),
  ("La Fermina"),
  ("Lajas zona"),
  ("La Luisa"),
  ("Lamboglia"),
  ("La Parguera"),
  ("La Playa"),
  ("La Plena"),
  ("Lares zona"),
  ("Las Mar�as"),
  ("Las Mar�as zona"),
  ("Las Ochenta"),
  ("Las Ollas"),
  ("Las Piedras zona"),
  ("Levittown"),
  ("Liborio Negr�n Torres"),
  ("Lluveras"),
  ("Lo�za zona"),
  ("Lomas"),
  ("Los Llanos"),
  ("Luis Llor�ns Torres"),
  ("Luis M. Cintr�n"),
  ("Luquillo zona"),
  ("Luyando"),
  ("Magas Arriba"),
  ("Manat� zona"),
  ("Mar�a Antonia"),
  ("Mariano Col�n"),
  ("Maricao zona"),
  ("Martorell"),
  ("Marue�o"),
  ("Maunabo zona"),
  ("Mayag�ez zona"),
  ("Miranda"),
  ("Moca zona"),
  ("Monserrate"),
  ("Monte Grande"),
  ("Mora"),
  ("Morovis zona"),
  ("Mucarabones"),
  ("Naguabo zona"),
  ("Naranjito zona"),
  ("Olimpo"),
  ("Orocovis zona"),
  ("P�jaros"),
  ("Pajonal"),
  ("Palmarejo"),
  ("Palmarejo"),
  ("Palmas"),
  ("Palmer"),
  ("Palomas"),
  ("Palomas"),
  ("Palo Seco"),
  ("Parcelas La Milagrosa"),
  ("Parcelas Nuevas"),
  ("Parcelas Pe�uelas"),
  ("Pastos"),
  ("Patillas zona"),
  ("Pe�a Pobre"),
  ("Pe�uelas zona"),
  ("Piedra Gorda"),
  ("Playa Fortuna"),
  ("Playita"),
  ("Playita"),
  ("Playita Cortada"),
  ("Pole Ojea"),
  ("Ponce zona"),
  ("Potala Pastillo"),
  ("Pueblito del R�o"),
  ("Puerto Real"),
  ("Punta Santiago"),
  ("Quebrada"),
  ("Quebradillas zona"),
  ("Rafael Cap�"),
  ("Rafael Gonz�lez"),
  ("Rafael Hern�ndez"),
  ("Ramos"),
  ("Rinc�n zona"),
  ("R�o Blanco"),
  ("R�o Ca�as Abajo"),
  ("R�o Grande zona"),
  ("R�o Lajas"),
  ("Roosevelt Roads"),
  ("Rosa S�nchez"),
  ("Sabana"),
  ("Sabana Eneas"),
  ("Sabana Grande zona"),
  ("Sabana Hoyos"),
  ("Sabana Seca"),
  ("Salinas zona"),
  ("San Antonio"),
  ("San Antonio"),
  ("San Antonio"),
  ("San Germ�n zona"),
  ("San Isidro"),
  ("San Jos�"),
  ("San Juan zona"),
  ("San Lorenzo zona"),
  ("San Sebasti�n zona"),
  ("Santa B�rbara"),
  ("Santa Clara"),
  ("Santa Isabel zona"),
  ("Santo Domingo"),
  ("Stella"),
  ("Su�rez"),
  ("Tallaboa"),
  ("Tallaboa Alta"),
  ("Tiburones"),
  ("Tierras Nuevas Poniente"),
  ("Toa Alta zona"),
  ("Toa Baja zona"),
  ("Trujillo Alto zona"),
  ("Utuado zona"),
  ("V�zquez"),
  ("Vega Alta zona"),
  ("Vega Baja zona"),
  ("Vieques"),
  ("Vieques zona"),
  ("Villalba zona"),
  ("Yabucoa zona"),
  ("Yauco zona"),
  ("Yaurel")
);
CreateDict(
    "name" => "location/cities.dict",
    "table" => "location/cities.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/continent.dict'
CreateTable(
  "location/continent.dict__TABLE",
  ("entry" => "Text"),
  ("North America"),
  ("South America"),
  ("Antarctica"),
  ("Africa"),
  ("Europe"),
  ("Asia"),
  ("Eurasia"),
  ("Afro-Eurasia"),
  ("Australia"),
  ("Oceania")
);
CreateDict(
    "name" => "location/continent.dict",
    "table" => "location/continent.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/countries.dict'
CreateTable(
  "location/countries.dict__TABLE",
  ("entry" => "Text"),
  ("ABU DHABI"),
  ("ADMIRALTY ISLANDS"),
  ("AFGHANISTAN"),
  ("AITUTAKI"),
  ("AJMAN"),
  ("ALAND ISLAND"),
  ("ALBANIA"),
  ("ALBERTA"),
  ("ALDERNEY"),
  ("ALGERIA"),
  ("ALHUCEMAS"),
  ("ALOFI ISLAND"),
  ("AMERICAN SAMOA"),
  ("ANDAMAN ISLANDS"),
  ("ANDORRA"),
  ("ANGOLA"),
  ("ANGUILLA"),
  ("ANJOUAN"),
  ("ANNOBON ISLAND"),
  ("ANTIGUA"),
  ("ANTIGUA AND BARBUDA"),
  ("ARGENTINA"),
  ("ARMENIA"),
  ("ARUBA"),
  ("ASCENSION"),
  ("ASTYPALAIA"),
  ("ATAFU"),
  ("ATIU"),
  ("AUSTRALIA"),
  ("AUSTRIA"),
  ("AVARUA"),
  ("AZERBAIJAN"),
  ("AZORES"),
  ("BAHAMAS"),
  ("BAHRAIN"),
  ("BALEARIC ISLANDS"),
  ("BALUCHISTAN"),
  ("BANGLADESH"),
  ("BANKS ISLAND"),
  ("BARBADOS"),
  ("BARBUDA"),
  ("BARTHELEMY"),
  ("BELARUS"),
  ("BELGIUM"),
  ("BELIZE"),
  ("BENIN"),
  ("BERMUDA"),
  ("BHUTAN"),
  ("BISMARK ARCHIPELAGO"),
  ("BOLIVIA"),
  ("BONAIRE"),
  ("BORABORA"),
  ("BORNEO"),
  ("BOSNIA-HERZEGOVINA"),
  ("BOTSWANA"),
  ("BOUGAINVILLE"),
  ("BOURBON"),
  ("BRAZIL"),
  ("BRITISH COLUMBIA"),
  ("BRITISH GUIANA"),
  ("BRITISH HONDURAS"),
  ("BRITISH VIRGIN ISLANDS"),
  ("BRUNEI DARUSSALAM"),
  ("BUKA"),
  ("BULGARIA"),
  ("BURKINA FASO"),
  ("BURMA"),
  ("BURUNDI"),
  ("CAICOS ISLANDS"),
  ("CAMBODIA"),
  ("CAMEROON"),
  ("CANADA"),
  ("CANARY ISLANDS"),
  ("CANTON ISLAND"),
  ("CAPE VERDE"),
  ("CAYMAN ISLANDS"),
  ("CENTRAL AFRICAN REPUBLIC"),
  ("CEUTA"),
  ("CEYLON"),
  ("CHAD"),
  ("CHAFERINAS ISLANDS"),
  ("CHALKI"),
  ("CHANNEL ISLANDS"),
  ("CHILE"),
  ("CHINA"),
  ("CHRISTIANSTED"),
  ("CHRISTMAS ISLAND"),
  ("CHRISTMAS ISLAND"),
  ("CHUUK"),
  ("COCOS ISLAND"),
  ("COLOMBIA"),
  ("COMOROS"),
  ("CONGO"),
  ("CONGO"),
  ("COOK ISLANDS"),
  ("CORISCO ISLAND"),
  ("CORSICA"),
  ("COSTA RICA"),
  ("COTE D’IVOIRE"),
  ("CRETE"),
  ("CROATIA"),
  ("CUBA"),
  ("CUMINO ISLAND"),
  ("CURACAO"),
  ("CYJRENAICA"),
  ("CYPRUS"),
  ("CZECH REPUBLIC"),
  ("DAHOMEY"),
  ("DAMAO"),
  ("DANGER ISLANDS"),
  ("DENMARK"),
  ("DESIRADE ISLAND"),
  ("DIU"),
  ("DJIBOUTI"),
  ("DODECANESE ISLANDS"),
  ("DOHA"),
  ("DOMINICA"),
  ("DOMINICAN REPUBLIC"),
  ("DUBAI"),
  ("EAST TIMOR"),
  ("EBEYE"),
  ("ECUADOR"),
  ("EGYPT"),
  ("EIRE"),
  ("EL SALVADOR"),
  ("ELLICE ISLANDS"),
  ("ELOBEY ISLANDS"),
  ("ENDERBURY ISLAND"),
  ("ENGLAND"),
  ("EQUATORIAL GUINEA"),
  ("ERITREA"),
  ("ESTONIA"),
  ("ETHIOPIA"),
  ("FAKAOFO"),
  ("FALKLAND ISLANDS"),
  ("FANNING ISLAND"),
  ("FAROE ISLANDS"),
  ("FERNANDO PO"),
  ("FEZZAN"),
  ("FIJI"),
  ("FINLAND"),
  ("FORMOSA"),
  ("FRANCE"),
  ("FREDERIKSTED"),
  ("FRENCH GUIANA"),
  ("FRENCH OCEANIA"),
  ("FRENCH POLYNESIA"),
  ("FRENCH SOMALILAND"),
  ("FRENCH TERRITORY OF THE AFARS AND ISSAS"),
  ("FRENCH WEST INDIES"),
  ("FRENCH WEST INDIES"),
  ("FRIENDLY ISLANDS"),
  ("FUJAIRAH"),
  ("FUTUNA"),
  ("GABON"),
  ("GAMBIA"),
  ("GAMBIER"),
  ("GEORGIA"),
  ("GERMANY"),
  ("GHANA"),
  ("GIBRALTAR"),
  ("GILBERT ISLANDS"),
  ("GOA"),
  ("GOZO ISLAND"),
  ("GRAND COMORO"),
  ("GREAT BRITAIN AND NORTHERN IRELAND"),
  ("GREECE"),
  ("GREENLAND"),
  ("GRENADA"),
  ("GRENADINES"),
  ("GUADELOUPE"),
  ("GUAM"),
  ("GUATEMALA"),
  ("GUERNSEY"),
  ("NORTHERN IRELAND)"),
  ("GUINEA"),
  ("GUINEA–BISSAU"),
  ("GUYANA"),
  ("HAINAN ISLAND"),
  ("HAITI"),
  ("HASHEMITE KINGDOM"),
  ("HERVEY"),
  ("HIVAOA"),
  ("HOLLAND"),
  ("HONDURAS"),
  ("HONG KONG"),
  ("HUAHINE"),
  ("HUAN ISLAND"),
  ("HUNGARY"),
  ("ICELAND"),
  ("INDIA"),
  ("INDONESIA"),
  ("IRAN"),
  ("IRAQ"),
  ("IRELAND"),
  ("IRIAN BARAT"),
  ("ISLE OF MAN"),
  ("ISLE OF PINES"),
  ("ISLE OF PINES"),
  ("ISRAEL"),
  ("ISSAS"),
  ("ITALY"),
  ("IVORY COAST"),
  ("JAMAICA"),
  ("JAPAN"),
  ("JERSEY"),
  ("NORTHERN IRELAND)"),
  ("JOHORE"),
  ("JORDAN"),
  ("KALYMNOS"),
  ("KAMPUCHEA"),
  ("KARPATHOS"),
  ("KASSOS"),
  ("KASTELLORIZON"),
  ("KAZAKHSTAN"),
  ("KEDAH"),
  ("KEELING ISLANDS"),
  ("KELANTAN"),
  ("KENYA"),
  ("KINGSHILL"),
  ("KIRIBATI"),
  ("KOREA"),
  ("KOREA"),
  ("KOROR"),
  ("KOS"),
  ("KOSOVO"),
  ("KOSRAE"),
  ("KOWLOON"),
  ("KUWAIT"),
  ("KWAJALEIN"),
  ("KYRGYZSTAN"),
  ("LABRADOR"),
  ("LABUAN"),
  ("LAOS"),
  ("LATVIA"),
  ("LEBANON"),
  ("LEIPSOS"),
  ("LEROS"),
  ("LES SAINTS ISLAND"),
  ("LESOTHO"),
  ("LIBERIA"),
  ("LIBYA"),
  ("LIECHTENSTEIN"),
  ("LITHUANIA"),
  ("LORD HOWE ISLAND"),
  ("LOYALTY ISLANDS"),
  ("LUXEMBOURG"),
  ("MACAO"),
  ("MACAU"),
  ("MACEDONIA"),
  ("MADAGASCAR"),
  ("MADEIRA ISLANDS"),
  ("MAJURO"),
  ("MALACCA"),
  ("MALAGASY REPUBLIC"),
  ("MALAWI"),
  ("MALAYA"),
  ("MALAYSIA"),
  ("MALDIVES"),
  ("MALI"),
  ("MALTA"),
  ("MANAHIKI"),
  ("MANCHURIA"),
  ("MANITOBA"),
  ("MANUA ISLANDS"),
  ("UNITED STATES"),
  ("MARIE GALANTE"),
  ("MARQUESAS ISLANDS"),
  ("MARSHALL ISLANDS"),
  ("UNITED STATES"),
  ("MARTINIQUE"),
  ("MAURITANIA"),
  ("MAURITIUS"),
  ("MAYOTTE"),
  ("MELILLA"),
  ("MEXICO"),
  ("MICRONESIA"),
  ("UNITED STATES"),
  ("MIQUELON"),
  ("MOHELI"),
  ("MOLDOVA"),
  ("MONACO"),
  ("MONGOLIA"),
  ("MONTENEGRO"),
  ("MONTSERRAT"),
  ("MOOREA"),
  ("MOROCCO"),
  ("MOZAMBIQUE"),
  ("MUSCAT"),
  ("MYANMAR"),
  ("NAMIBIA"),
  ("NANSIL ISLANDS"),
  ("NAURU"),
  ("NEGRI SEMBILAN"),
  ("NEPAL"),
  ("NETHERLANDS"),
  ("NETHERLANDS ANTILLES"),
  ("NETHERLANDS WEST INDIES"),
  ("NEVIS"),
  ("NEW BRITAIN"),
  ("NEW BRUNSWICK"),
  ("NEW CALEDONIA"),
  ("NEW HANOVER"),
  ("NEW HEBRIDES"),
  ("NEW IRELAND"),
  ("NEW SOUTH WALES"),
  ("NEW ZEALAND"),
  ("NEWFOUNDLAND"),
  ("NICARAGUA"),
  ("NIGER"),
  ("NIGERIA"),
  ("NISSIROS"),
  ("NIUE"),
  ("NORFOLK ISLAND"),
  ("NORTH BORNEO"),
  ("NORTH KOREA"),
  ("REPUBLIC OF)"),
  ("NORTHERN IRELAND"),
  ("NORTHERN MARIANA ISLANDS"),
  ("UNITED STATES"),
  ("NORTHWEST TERRITORY"),
  ("NORWAY"),
  ("NOVA SCOTIA"),
  ("NUKAHIVA"),
  ("NUKUNONU"),
  ("NYASALAND"),
  ("OCEAN ISLAND"),
  ("OKINAWA"),
  ("OMAN"),
  ("ONTARIO"),
  ("PAGO PAGO"),
  ("PAHANG"),
  ("PAKISTAN"),
  ("PALAU"),
  ("PALMERSTON"),
  ("PANAMA"),
  ("PAPUA NEW GUINEA"),
  ("PARAGUAY"),
  ("PARRY"),
  ("PATMOS"),
  ("PEMBA"),
  ("PENANG"),
  ("PENGHU ISLANDS"),
  ("PENON DE VELEZ DE LA GOMERA"),
  ("PENRHYN"),
  ("PERAK"),
  ("PERLIS"),
  ("PERSIA"),
  ("PERU"),
  ("PESCADORES ISLANDS"),
  ("PETITE TERRE"),
  ("PHILIPPINES"),
  ("PITCAIRN ISLAND"),
  ("POHNPEI"),
  ("POLAND"),
  ("PORTUGAL"),
  ("PRINCE EDWARD ISLAND"),
  ("PROVINCE WELLESLEY"),
  ("PUERTO RICO"),
  ("PUKAPUKA"),
  ("QATAR"),
  ("QUEBEC"),
  ("QUEENSLAND"),
  ("QUEMOY"),
  ("RAIATEA"),
  ("RAKAANGA"),
  ("RAPA"),
  ("RAROTONGA"),
  ("RAS AL KAIMAH"),
  ("REDONDA"),
  ("REUNION"),
  ("RHODESIA"),
  ("RIO MUNI"),
  ("RODOS"),
  ("RODRIGUES"),
  ("ROMANIA"),
  ("ROTA"),
  ("UNITED STATES"),
  ("RUSSIA"),
  ("RWANDA"),
  ("SABA"),
  ("SABAH"),
  ("SAINT BARTHELEMY"),
  ("SAINT BARTHOLOMEW"),
  ("SAINT CHRISTOPHER AND NEVIS"),
  ("SAINT CROIX"),
  ("UNITED STATES"),
  ("SAINT EUSTATIUS"),
  ("SAINT HELENA"),
  ("SAINT JOHN"),
  ("UNITED STATES"),
  ("SAINT KITTS"),
  ("SAINT LUCIA"),
  ("SAINT MAARTEN"),
  ("SAINT MARTIN"),
  ("SAINT PIERRE AND MIQUELON"),
  ("SAINT THOMAS"),
  ("UNITED STATES"),
  ("SAINT VINCENT AND THE GRENADINES"),
  ("SAINTE MARIE DE MADAGASCAR"),
  ("SAIPAN"),
  ("UNITED STATES"),
  ("SALVADOR"),
  ("SAMOA"),
  ("SAN MARINO"),
  ("SANTA CRUZ ISLANDS"),
  ("SAO TOME AND PRINCIPE"),
  ("SARAWAK"),
  ("SARK"),
  ("NORTHERN IRELAND)"),
  ("SASKATCHEWAN"),
  ("SAUDI ARABIA"),
  ("SAVAGE ISLAND"),
  ("SAVAII ISLAND"),
  ("SCOTLAND"),
  ("SELANGOR"),
  ("SENEGAL"),
  ("SERBIA"),
  ("SEYCHELLES"),
  ("SHARJA"),
  ("SHIKOKU"),
  ("SIAM"),
  ("SIERRA LEONE"),
  ("SIKKIM"),
  ("SINGAPORE"),
  ("SLOVAK REPUBLIC"),
  ("SLOVENIA"),
  ("SOCIETY ISLANDS"),
  ("SOLOMON ISLANDS"),
  ("SOMALI DEMOCRATIC REPUBLIC"),
  ("SOMALIA"),
  ("SOMALILAND"),
  ("SOUTH AFRICA"),
  ("SOUTH AUSTRALIA"),
  ("SOUTH GEORGIA"),
  ("SOUTH KOREA"),
  ("SOUTH–WEST AFRICA"),
  ("SPAIN"),
  ("SPITZBERGEN"),
  ("SRI LANKA"),
  ("SUDAN"),
  ("SURINAME"),
  ("SUWARROW ISLANDS"),
  ("SWAIN’S ISLAND"),
  ("UNITED STATES"),
  ("SWAN ISLANDS"),
  ("SWAZILAND"),
  ("SWEDEN"),
  ("SWITZERLAND"),
  ("SYMI"),
  ("SYRIAN ARAB REPUBLIC"),
  ("TAHAA"),
  ("TAHITI"),
  ("TAIWAN"),
  ("TAJIKISTAN"),
  ("TANZANIA"),
  ("TASMANIA"),
  ("TCHAD"),
  ("THAILAND"),
  ("THURSDAY ISLAND"),
  ("TIBET"),
  ("TILOS"),
  ("TIMOR"),
  ("TINIAN"),
  ("UNITED STATES"),
  ("TOBAGO"),
  ("TOGO"),
  ("TOKELAU"),
  ("TONGA"),
  ("TONGAREVA"),
  ("TORI SHIMA"),
  ("TORRES ISLAND"),
  ("TRANS-JORDAN"),
  ("TRANSKEI"),
  ("TRENGGANU"),
  ("TRINIDAD AND TOBAGO"),
  ("TRIPOLITANIA"),
  ("TRISTAN DA CUNHA"),
  ("TRUCIAL STATES"),
  ("TUAMOTOU"),
  ("TUBUAI"),
  ("TUNISIA"),
  ("TURKEY"),
  ("TURKMENISTAN"),
  ("TURKS AND CAICOS ISLANDS"),
  ("TUTUILA ISLAND"),
  ("UNITED STATES"),
  ("TUVALU"),
  ("UGANDA"),
  ("UKRAINE"),
  ("UMM AL QUAIWAIN"),
  ("UMM SAID"),
  ("UNION GROUP"),
  ("UNITED ARAB EMIRATES"),
  ("UNITED KINGDOM"),
  ("NORTHERN IRELAND"),
  ("UNITED NATIONS"),
  ("UPOLU ISLAND"),
  ("URUGUAY"),
  ("UZBEKISTAN"),
  ("VANUATU"),
  ("VATICAN CITY"),
  ("VENEZUELA"),
  ("VICTORIA"),
  ("VIETNAM"),
  ("VIRGIN ISLANDS"),
  ("VIRGIN ISLANDS"),
  ("WALES"),
  ("WALLIS AND FUTUNA ISLANDS"),
  ("WELLESLEY"),
  ("WEST NEW GUINEA"),
  ("WESTERN AUSTRALIA"),
  ("WESTERN SAMOA"),
  ("YAP"),
  ("YEMEN"),
  ("YUKON TERRITORY"),
  ("ZAFARANI ISLANDS"),
  ("ZAMBIA"),
  ("ZANZIBAR"),
  ("ZIMBABWE")
);
CreateDict(
    "name" => "location/countries.dict",
    "table" => "location/countries.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/stateList.dict'
CreateTable(
  "location/stateList.dict__TABLE",
  ("entry" => "Text"),
  ("AMERICAN SAMOA"),
  ("WEST VIRGINIA"),
  ("OKLAHOMA"),
  ("MARSHALL ISLANDS"),
  ("IOWA"),
  ("NEW MEXICO"),
  ("NEBRASKA"),
  ("NEW HAMPSHIRE"),
  ("PENNSYLVANIA"),
  ("WASHINGTON"),
  ("ARIZONA"),
  ("ARKANSAS"),
  ("HAWAII"),
  ("DELAWARE"),
  ("NEVADA"),
  ("NEW YORK"),
  ("NORTH CAROLINA"),
  ("RHODE ISLAND"),
  ("GEORGIA"),
  ("VIRGIN ISLANDS"),
  ("LOUISIANA"),
  ("SOUTH CAROLINA"),
  ("IDAHO"),
  ("SOUTH DAKOTA"),
  ("MISSOURI"),
  ("MASSACHUSETTS"),
  ("PUERTO RICO"),
  ("INDIANA"),
  ("CONNECTICUT"),
  ("COLORADO"),
  ("TEXAS"),
  ("VERMONT"),
  ("OHIO"),
  ("VIRGINIA"),
  ("FLORIDA"),
  ("CALIFORNIA"),
  ("KANSAS"),
  ("ALABAMA"),
  ("PALAU"),
  ("ILLINOIS"),
  ("ALASKA"),
  ("MINNESOTA"),
  ("MONTANA"),
  ("UTAH"),
  ("MARYLAND"),
  ("GUAM"),
  ("MICHIGAN"),
  ("KENTUCKY"),
  ("TENNESSEE"),
  ("WYOMING"),
  ("NORTH DAKOTA"),
  ("MAINE"),
  ("NORTHERN MARIANA ISLANDS"),
  ("WISCONSIN"),
  ("FEDERATED STATES OF MICRONESIA"),
  ("DISTRICT OF COLUMBIA"),
  ("OREGON"),
  ("MISSISSIPPI"),
  ("NEW JERSEY")
);
CreateDict(
    "name" => "location/stateList.dict",
    "table" => "location/stateList.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'location/stateListAbbrev.dict'
CreateTable(
  "location/stateListAbbrev.dict__TABLE",
  ("entry" => "Text"),
  ("AS"),
  ("WV"),
  ("OK"),
  ("MH"),
  ("IA"),
  ("NM"),
  ("NE"),
  ("NH"),
  ("PA"),
  ("WA"),
  ("AZ"),
  ("AR"),
  ("HI"),
  ("DE"),
  ("NV"),
  ("NY"),
  ("NC"),
  ("RI"),
  ("GA"),
  ("VI"),
  ("LA"),
  ("SC"),
  ("ID"),
  ("SD"),
  ("MO"),
  ("MA"),
  ("PR"),
  ("IN"),
  ("CT"),
  ("CO"),
  ("TX"),
  ("VT"),
  ("OH"),
  ("VA"),
  ("FL"),
  ("CA"),
  ("KS"),
  ("AL"),
  ("PW"),
  ("IL"),
  ("AL"),
  ("MN"),
  ("MT"),
  ("UT"),
  ("MD"),
  ("GU"),
  ("MI"),
  ("KY"),
  ("TN"),
  ("WY"),
  ("ND"),
  ("ME"),
  ("MP"),
  ("WI"),
  ("FM"),
  ("DC"),
  ("OR"),
  ("MS"),
  ("NJ")
);
CreateDict(
    "name" => "location/stateListAbbrev.dict",
    "table" => "location/stateListAbbrev.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'marriage.dict'
CreateTable(
  "marriage.dict__TABLE",
  ("entry" => "Text"),
  ("happy wedding"),
  ("happy weddin"),
  ("happy marriage"),
  ("happy married life"),
  ("happy wedded life"),
  ("congratulations on your"),
  ("congratulations on ur"),
  ("congrats on your"),
  ("congrats on ur"),
  ("congratulations on the wedding"),
  ("congratulations on the weddin"),
  ("congratulations on the marriage"),
  ("congrats on the wedding"),
  ("congrats on the weddin"),
  ("congrats on the marriage"),
  ("anniv"),
  ("anniversary"),
  ("years of marriage"),
  ("yrs of marriage")
);
CreateDict(
    "name" => "marriage.dict",
    "table" => "marriage.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'marriagePhrases.dict'
CreateTable(
  "marriagePhrases.dict__TABLE",
  ("entry" => "Text"),
  ("happy wedding"),
  ("happy wedding day"),
  ("happy weddin"),
  ("happy weddin day"),
  ("happy married life"),
  ("happy wedded life"),
  ("congrats on your wedding"),
  ("congrats on ur wedding"),
  ("congratulations on your wedding"),
  ("congratulations on ur wedding"),
  ("congrats on your marriage"),
  ("congrats on ur marriage"),
  ("congratulations on your marriage"),
  ("congratulations on ur marriage"),
  ("congratulations on the wedding"),
  ("congratulations on the weddin"),
  ("congratulations on the marriage"),
  ("congrats on the wedding"),
  ("congrats on the weddin"),
  ("congrats on the marriage"),
  ("congrats on your own wedding"),
  ("congrats on ur own wedding"),
  ("congrats on your own weddin"),
  ("congrats on ur own weddin"),
  ("congrats on your recent wedding"),
  ("congrats on ur recent wedding"),
  ("congrats on your recent weddin"),
  ("congrats on ur recent weddin"),
  ("congratulations you got married"),
  ("congratulations u got married"),
  ("congrats you got married"),
  ("congrats u got married")
);
CreateDict(
    "name" => "marriagePhrases.dict",
    "table" => "marriagePhrases.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'mothersDayWishes.dict'
CreateTable(
  "mothersDayWishes.dict__TABLE",
  ("entry" => "Text"),
  ("Happymothersday"),
  ("we are the best moms"),
  ("we are the best mothers"),
  ("happy mother"),
  ("happy mothers"),
  ("happy mommy"),
  ("happy mommys"),
  ("happy mom"),
  ("happy moms"),
  ("happy mum"),
  ("happy mums"),
  ("happy mummy"),
  ("happy mummys"),
  ("happy mommie"),
  ("happy mommies"),
  ("happy momma"),
  ("happy mommas"),
  ("happy first"),
  ("happy second"),
  ("happy third"),
  ("happy fourth"),
  ("happy fifth"),
  ("happy sixth"),
  ("happy seventh"),
  ("happy eighth"),
  ("happy ninth"),
  ("happy tenth"),
  ("Hpymothersday"),
  ("hpy mother"),
  ("hpy mothers"),
  ("hpy mommy"),
  ("hpy mommys"),
  ("hpy mom"),
  ("hpy moms"),
  ("hpy mum"),
  ("hpy mums"),
  ("hpy mummy"),
  ("hpy mummys"),
  ("hpy mommie"),
  ("hpy mommies"),
  ("hpy momma"),
  ("hpy mommas"),
  ("hpy first"),
  ("hpy second"),
  ("hpy third"),
  ("hpy fourth"),
  ("hpy fifth"),
  ("hpy sixth"),
  ("hpy seventh"),
  ("hpy eighth"),
  ("hpy ninth"),
  ("hpy tenth"),
  ("HAPPImothersday"),
  ("HAPPI mother"),
  ("HAPPI mothers"),
  ("HAPPI mommy"),
  ("HAPPI mommys"),
  ("HAPPI mom"),
  ("HAPPI moms"),
  ("HAPPI mum"),
  ("HAPPI mums"),
  ("HAPPI mummy"),
  ("HAPPI mummys"),
  ("HAPPI mommie"),
  ("HAPPI mommies"),
  ("happi momma"),
  ("happi mommas"),
  ("HAPPI first"),
  ("HAPPI second"),
  ("HAPPI third"),
  ("HAPPI fourth"),
  ("HAPPI fifth"),
  ("HAPPI sixth"),
  ("HAPPI seventh"),
  ("HAPPI eighth"),
  ("HAPPI ninth"),
  ("HAPPI tenth"),
  ("HAPImothersday"),
  ("HAPI mother"),
  ("HAPI mothers"),
  ("HAPI mommy"),
  ("HAPI mommys"),
  ("HAPI mom"),
  ("HAPI moms"),
  ("HAPI mum"),
  ("HAPI mums"),
  ("HAPI mummy"),
  ("HAPI mummys"),
  ("HAPI mommie"),
  ("HAPI mommies"),
  ("hapi momma"),
  ("hapi mommas"),
  ("HAPI first"),
  ("HAPI second"),
  ("HAPI third"),
  ("HAPI fourth"),
  ("HAPI fifth"),
  ("HAPI sixth"),
  ("HAPI seventh"),
  ("HAPI eighth"),
  ("HAPI ninth"),
  ("HAPI tenth")
);
CreateDict(
    "name" => "mothersDayWishes.dict",
    "table" => "mothersDayWishes.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'names/AndrogenousFnames.dict'
CreateTable(
  "names/AndrogenousFnames.dict__TABLE",
  ("entry" => "Text"),
  ("aadi"),
  ("aafreen"),
  ("aaron"),
  ("abhaya"),
  ("abiah"),
  ("ada"),
  ("adam"),
  ("adar"),
  ("adarsh"),
  ("adda"),
  ("addie"),
  ("addison"),
  ("adin"),
  ("adrian"),
  ("adrien"),
  ("agnes"),
  ("ailin"),
  ("aja"),
  ("akiva"),
  ("alba"),
  ("albert"),
  ("alex"),
  ("alexander"),
  ("alexis"),
  ("ali"),
  ("alice"),
  ("alivia"),
  ("alix"),
  ("allen"),
  ("allie"),
  ("allison"),
  ("alma"),
  ("alonza"),
  ("alpha"),
  ("alva"),
  ("amal"),
  ("amanda"),
  ("amani"),
  ("amari"),
  ("ambar"),
  ("amber"),
  ("amita"),
  ("amiya"),
  ("amma"),
  ("amulya"),
  ("amy"),
  ("ananda"),
  ("anarghya"),
  ("andra"),
  ("andre"),
  ("andrea"),
  ("andrew"),
  ("angel"),
  ("angela"),
  ("angelo"),
  ("anisa"),
  ("anna"),
  ("annie"),
  ("anthony"),
  ("antonia"),
  ("antonio"),
  ("aphrodite"),
  ("archan"),
  ("archana"),
  ("arian"),
  ("arie"),
  ("ariel"),
  ("arlie"),
  ("armani"),
  ("arthur"),
  ("artie"),
  ("aruna"),
  ("aruni"),
  ("arya"),
  ("asa"),
  ("ashis"),
  ("ashley"),
  ("ashton"),
  ("atmaja"),
  ("aubrey"),
  ("audie"),
  ("audrey"),
  ("augusta"),
  ("augustine"),
  ("austin"),
  ("avery"),
  ("avonaco"),
  ("azaria"),
  ("baby"),
  ("bailey"),
  ("bama"),
  ("barbara"),
  ("barrie"),
  ("beatrice"),
  ("bee"),
  ("bela"),
  ("bell"),
  ("bennie"),
  ("bernice"),
  ("bernie"),
  ("berry"),
  ("bert"),
  ("berth"),
  ("bertha"),
  ("bertie"),
  ("beryl"),
  ("bessie"),
  ("beverly"),
  ("billie"),
  ("billy"),
  ("blair"),
  ("blake"),
  ("blanche"),
  ("bobbie"),
  ("bobby"),
  ("bonnie"),
  ("brandon"),
  ("brandy"),
  ("breandan"),
  ("breen"),
  ("brenda"),
  ("bret"),
  ("brett"),
  ("brian"),
  ("britt"),
  ("brittany"),
  ("brook"),
  ("brynn"),
  ("cacey"),
  ("cai"),
  ("cailin"),
  ("caleb"),
  ("callie"),
  ("cameron"),
  ("campbell"),
  ("camryn"),
  ("carey"),
  ("carl"),
  ("carlin"),
  ("carlos"),
  ("carmel"),
  ("carmen"),
  ("carol"),
  ("carrol"),
  ("carroll"),
  ("carson"),
  ("cary"),
  ("casey"),
  ("cassidy"),
  ("casta"),
  ("cecil"),
  ("chan"),
  ("chandler"),
  ("chandra"),
  ("chang"),
  ("channing"),
  ("chante"),
  ("charles"),
  ("charley"),
  ("charlie"),
  ("charlot"),
  ("chase"),
  ("cheyenne"),
  ("chi"),
  ("chiko"),
  ("chin"),
  ("chong"),
  ("chris"),
  ("christian"),
  ("christie"),
  ("christina"),
  ("christopher"),
  ("christy"),
  ("chung"),
  ("clair"),
  ("claire"),
  ("clara"),
  ("clare"),
  ("clarence"),
  ("claude"),
  ("claudie"),
  ("clay"),
  ("cleo"),
  ("clifford"),
  ("clyde"),
  ("codi"),
  ("cody"),
  ("colby"),
  ("cong"),
  ("connal"),
  ("connie"),
  ("cora"),
  ("corey"),
  ("cori"),
  ("corrin"),
  ("corry"),
  ("cortney"),
  ("cory"),
  ("courtney"),
  ("cris"),
  ("cruz"),
  ("crystal"),
  ("curtis"),
  ("cynthia"),
  ("dai"),
  ("daine"),
  ("dakota"),
  ("daksha"),
  ("dale"),
  ("dalit"),
  ("dallas"),
  ("damaris"),
  ("damien"),
  ("dan"),
  ("dana"),
  ("dani"),
  ("daniel"),
  ("daniele"),
  ("danielle"),
  ("danila"),
  ("dann"),
  ("dannie"),
  ("danya"),
  ("dara"),
  ("darby"),
  ("darcel"),
  ("darcell"),
  ("darcy"),
  ("d'arcy"),
  ("darian"),
  ("darnell"),
  ("daryl"),
  ("davi"),
  ("david"),
  ("davonte"),
  ("dean"),
  ("deandra"),
  ("deborah"),
  ("debra"),
  ("dee"),
  ("delaine"),
  ("delaney"),
  ("dell"),
  ("delmar"),
  ("demetrius"),
  ("dennis"),
  ("denny"),
  ("deon"),
  ("derry"),
  ("devak"),
  ("devan"),
  ("devery"),
  ("devin"),
  ("devon"),
  ("devyn"),
  ("dharma"),
  ("dhwani"),
  ("dima"),
  ("dion"),
  ("dominique"),
  ("dominque"),
  ("domonique"),
  ("donald"),
  ("dong"),
  ("donna"),
  ("donnie"),
  ("dorian"),
  ("dorothy"),
  ("drew"),
  ("dusty"),
  ("dylan"),
  ("earie"),
  ("earlie"),
  ("eddie"),
  ("eden"),
  ("edith"),
  ("edna"),
  ("edward"),
  ("effie"),
  ("eilis"),
  ("elan"),
  ("elia"),
  ("elisha"),
  ("elisheva"),
  ("elizabeth"),
  ("ella"),
  ("ellie"),
  ("ellis"),
  ("elmer"),
  ("elsie"),
  ("elza"),
  ("emanuele"),
  ("emerson"),
  ("emery"),
  ("emma"),
  ("enda"),
  ("ennis"),
  ("enriqueta"),
  ("eri"),
  ("eric"),
  ("erie"),
  ("erin"),
  ("essie"),
  ("estell"),
  ("ethel"),
  ("eugene"),
  ("eunice"),
  ("eva"),
  ("evan"),
  ("evelyn"),
  ("evon"),
  ("falguni"),
  ("fannie"),
  ("farhat"),
  ("farran"),
  ("fay"),
  ("fedya"),
  ("finley"),
  ("fionn"),
  ("firdaus"),
  ("florence"),
  ("frances"),
  ("francis"),
  ("francisco"),
  ("frank"),
  ("frankie"),
  ("fred"),
  ("freddie"),
  ("gabi"),
  ("gabriel"),
  ("gabriele"),
  ("gada"),
  ("gail"),
  ("gajra"),
  ("gale"),
  ("gali"),
  ("ganit"),
  ("ganya"),
  ("garan"),
  ("garland"),
  ("garnet"),
  ("garnett"),
  ("gary"),
  ("gayle"),
  ("gene"),
  ("george"),
  ("georgie"),
  ("gerald"),
  ("germain"),
  ("germaine"),
  ("gerry"),
  ("gertrude"),
  ("gili"),
  ("giyn"),
  ("gladys"),
  ("glenn"),
  ("glynn"),
  ("golden"),
  ("grace"),
  ("gracia"),
  ("gregoria"),
  ("gregory"),
  ("guadalupe"),
  ("guillelmina"),
  ("gulab"),
  ("guri"),
  ("gussie"),
  ("gust"),
  ("gustava"),
  ("gwendelyn"),
  ("gwyn"),
  ("gwynn"),
  ("hadar"),
  ("haley"),
  ("hali"),
  ("hallie"),
  ("ha-neul"),
  ("haripriya"),
  ("harley"),
  ("harlow"),
  ("harold"),
  ("harper"),
  ("harsha"),
  ("haru"),
  ("haruko"),
  ("hayden"),
  ("hazel"),
  ("heather"),
  ("helen"),
  ("henry"),
  ("hester"),
  ("hilary"),
  ("hinto"),
  ("hiroshi"),
  ("hollie"),
  ("hollis"),
  ("holly"),
  ("hong"),
  ("honor"),
  ("honoria"),
  ("honovi"),
  ("hortencia"),
  ("hunter"),
  ("ida"),
  ("ignacia"),
  ("ikshu"),
  ("iliana"),
  ("ilya"),
  ("indra"),
  ("infant"),
  ("inis"),
  ("iona"),
  ("ira"),
  ("irene"),
  ("isha"),
  ("ishana"),
  ("ishrat"),
  ("ivory"),
  ("ivy"),
  ("jace"),
  ("jack"),
  ("jackie"),
  ("jacqueleen"),
  ("jacquelin"),
  ("jade"),
  ("jaden"),
  ("jadyn"),
  ("jae"),
  ("jael"),
  ("jaiden"),
  ("jaidyn"),
  ("jaime"),
  ("jaimie"),
  ("jaira"),
  ("jame"),
  ("james"),
  ("jamey"),
  ("jamie"),
  ("jammie"),
  ("jan"),
  ("janah"),
  ("jani"),
  ("janie"),
  ("jasmin"),
  ("jasmine"),
  ("jason"),
  ("jay"),
  ("jayden"),
  ("jaye"),
  ("jaylen"),
  ("jaylin"),
  ("jayme"),
  ("jean"),
  ("jeffrey"),
  ("jenda"),
  ("jenell"),
  ("jennie"),
  ("jennifer"),
  ("jensen"),
  ("jeremy"),
  ("jerry"),
  ("jesse"),
  ("jessica"),
  ("jessie"),
  ("jesus"),
  ("jewel"),
  ("jewell"),
  ("jimmie"),
  ("jimmy"),
  ("jin"),
  ("joan"),
  ("jodie"),
  ("jody"),
  ("joe"),
  ("joel"),
  ("joey"),
  ("john"),
  ("johnie"),
  ("johnnie"),
  ("johnny"),
  ("jolie"),
  ("jon"),
  ("jonathan"),
  ("jonnie"),
  ("jorah"),
  ("jordan"),
  ("jordyn"),
  ("jose"),
  ("joseph"),
  ("josephine"),
  ("joshua"),
  ("jovan"),
  ("joy"),
  ("joyanna"),
  ("juan"),
  ("jude"),
  ("jule"),
  ("julia"),
  ("julian"),
  ("julio"),
  ("jun"),
  ("june"),
  ("jung"),
  ("justice"),
  ("justin"),
  ("justine"),
  ("kai"),
  ("kaila"),
  ("kaimi"),
  ("kala"),
  ("kalani"),
  ("kali"),
  ("kamari"),
  ("kameron"),
  ("kamlyn"),
  ("kamryn"),
  ("kana"),
  ("kanak"),
  ("kanan"),
  ("kanchan"),
  ("kaori"),
  ("kapila"),
  ("karan"),
  ("karcsi"),
  ("kareen"),
  ("karen"),
  ("kari"),
  ("karl"),
  ("karoly"),
  ("kasey"),
  ("katia"),
  ("kay"),
  ("kayden"),
  ("keely"),
  ("kei"),
  ("keilah"),
  ("keith"),
  ("kelley"),
  ("kelli"),
  ("kelly"),
  ("kelsey"),
  ("kelyn"),
  ("kendal"),
  ("kendall"),
  ("kennedy"),
  ("kenneth"),
  ("kenya"),
  ("kenyatta"),
  ("kerrie"),
  ("kerry"),
  ("kevin"),
  ("kianni"),
  ("kiara"),
  ("kiley"),
  ("kim"),
  ("kimberly"),
  ("kin"),
  ("kiran"),
  ("kirby"),
  ("kohana"),
  ("koi"),
  ("konane"),
  ("kostya"),
  ("kris"),
  ("krishna"),
  ("kristen"),
  ("kristian"),
  ("kristin"),
  ("kuri"),
  ("kyle"),
  ("lacey"),
  ("lacy"),
  ("lalla"),
  ("lane"),
  ("larry"),
  ("larue"),
  ("lashawn"),
  ("laura"),
  ("lauren"),
  ("laurence"),
  ("laurie"),
  ("lavern"),
  ("laverne"),
  ("lavon"),
  ("lavonne"),
  ("lawrence"),
  ("layne"),
  ("lee"),
  ("lei"),
  ("leigh"),
  ("lennie"),
  ("leo"),
  ("leon"),
  ("leone"),
  ("leonore"),
  ("lesley"),
  ("leslie"),
  ("lester"),
  ("lewis"),
  ("lia"),
  ("lian"),
  ("lillian"),
  ("lillie"),
  ("linda"),
  ("lindsay"),
  ("lindsey"),
  ("linnie"),
  ("lisa"),
  ("lise"),
  ("lochan"),
  ("logan"),
  ("lois"),
  ("lola"),
  ("london"),
  ("lonie"),
  ("lonnie"),
  ("loren"),
  ("lorenza"),
  ("lorin"),
  ("lou"),
  ("louie"),
  ("louis"),
  ("louise"),
  ("love"),
  ("lucero"),
  ("lucila"),
  ("luis"),
  ("luka"),
  ("lula"),
  ("lupe"),
  ("luz"),
  ("lynn"),
  ("lyric"),
  ("mabel"),
  ("mackenzie"),
  ("madelon"),
  ("madhu"),
  ("madhur"),
  ("madison"),
  ("mae"),
  ("magan"),
  ("mai"),
  ("maille"),
  ("maisara"),
  ("maitreya"),
  ("mallory"),
  ("man"),
  ("manasi"),
  ("manik"),
  ("marcell"),
  ("margaret"),
  ("maria"),
  ("marian"),
  ("marie"),
  ("mario"),
  ("marion"),
  ("maris"),
  ("marise"),
  ("mark"),
  ("markandeya"),
  ("marley"),
  ("marlin"),
  ("marlo"),
  ("marquise"),
  ("marshall"),
  ("martha"),
  ("martin"),
  ("marty"),
  ("mary"),
  ("matthew"),
  ("mattie"),
  ("maurice"),
  ("maxie"),
  ("maxime"),
  ("may"),
  ("mckinley"),
  ("megha"),
  ("mehul"),
  ("melissa"),
  ("melvin"),
  ("mercer"),
  ("meredith"),
  ("meredydd"),
  ("meridith"),
  ("merla"),
  ("merle"),
  ("merlyn"),
  ("merrill"),
  ("micah"),
  ("michael"),
  ("michal"),
  ("micheal"),
  ("michel"),
  ("michele"),
  ("michelle"),
  ("mickey"),
  ("mieko"),
  ("mika"),
  ("mike"),
  ("miki"),
  ("milagro"),
  ("milan"),
  ("mildred"),
  ("minh"),
  ("minnie"),
  ("misha"),
  ("miska"),
  ("mitchell"),
  ("molli"),
  ("mona"),
  ("montana"),
  ("morcan"),
  ("morgan"),
  ("morgen"),
  ("mychal"),
  ("myrl"),
  ("myrtle"),
  ("nadia"),
  ("nairne"),
  ("nakia"),
  ("nanda"),
  ("nann"),
  ("nara"),
  ("nartan"),
  ("nawaar"),
  ("neelam"),
  ("nellie"),
  ("nery"),
  ("neued"),
  ("nevada"),
  ("nichol"),
  ("nicholas"),
  ("nicky"),
  ("nicole"),
  ("nikki"),
  ("nila"),
  ("noe"),
  ("noel"),
  ("noell"),
  ("nora"),
  ("norman"),
  ("nukpana"),
  ("numbers"),
  ("ocie"),
  ("odell"),
  ("odie"),
  ("ollie"),
  ("opal"),
  ("ora"),
  ("oriel"),
  ("oscar"),
  ("osie"),
  ("ossie"),
  ("otha"),
  ("ozie"),
  ("page"),
  ("paige"),
  ("pamela"),
  ("paris"),
  ("park"),
  ("parker"),
  ("pat"),
  ("patrice"),
  ("patricia"),
  ("patrick"),
  ("patsy"),
  ("paul"),
  ("pavani"),
  ("pavel"),
  ("pavlusha"),
  ("payton"),
  ("paz"),
  ("pearl"),
  ("pearlie"),
  ("perry"),
  ("peter"),
  ("peyton"),
  ("phoenix"),
  ("prem"),
  ("priya"),
  ("quinn"),
  ("rachel"),
  ("raja"),
  ("rajani"),
  ("rajdulari"),
  ("raksha"),
  ("randy"),
  ("rani"),
  ("ranit"),
  ("raven"),
  ("ray"),
  ("raymond"),
  ("reagan"),
  ("rebecca"),
  ("reece"),
  ("reese"),
  ("refugio"),
  ("regan"),
  ("rei"),
  ("reilly"),
  ("rene"),
  ("renny"),
  ("richard"),
  ("ricki"),
  ("rickie"),
  ("rikki"),
  ("riley"),
  ("rio"),
  ("river"),
  ("robbie"),
  ("robbin"),
  ("robert"),
  ("roberto"),
  ("robin"),
  ("roch"),
  ("ronald"),
  ("roni"),
  ("ronnie"),
  ("rory"),
  ("rosario"),
  ("rose"),
  ("roshan"),
  ("rossie"),
  ("rowan"),
  ("roy"),
  ("royce"),
  ("ruby"),
  ("rudy"),
  ("russell"),
  ("ruth"),
  ("ryan"),
  ("rylan"),
  ("rylee"),
  ("sacha"),
  ("sachi"),
  ("sage"),
  ("sam"),
  ("samantha"),
  ("sammie"),
  ("sammy"),
  ("samuel"),
  ("sandra"),
  ("sandy"),
  ("sang"),
  ("santana"),
  ("santos"),
  ("sanya"),
  ("sarah"),
  ("saroj"),
  ("sasha"),
  ("satyaki"),
  ("scott"),
  ("scottie"),
  ("sean"),
  ("shaine"),
  ("shakeel"),
  ("shalin"),
  ("shan"),
  ("shane"),
  ("shannon"),
  ("shanon"),
  ("sharan"),
  ("sharon"),
  ("shaun"),
  ("shawn"),
  ("shawnte"),
  ("shay"),
  ("shayne"),
  ("shea"),
  ("sheetal"),
  ("shekhar"),
  ("shelby"),
  ("shelley"),
  ("shellie"),
  ("shelly"),
  ("sheridan"),
  ("sheron"),
  ("shikha"),
  ("shiloh"),
  ("shino"),
  ("shirley"),
  ("shizue"),
  ("shubha"),
  ("shura"),
  ("shyamal"),
  ("sidney"),
  ("skylar"),
  ("skyler"),
  ("snehal"),
  ("socorro"),
  ("sol"),
  ("somansh"),
  ("somer"),
  ("son"),
  ("soo"),
  ("stacey"),
  ("stacy"),
  ("stephanie"),
  ("stephen"),
  ("stepka"),
  ("steven"),
  ("stevie"),
  ("subhadra"),
  ("subrata"),
  ("suelita"),
  ("sugita"),
  ("sulekh"),
  ("sumitra"),
  ("sun"),
  ("sunanda"),
  ("sung"),
  ("suparna"),
  ("supriya"),
  ("sur"),
  ("susan"),
  ("suzu"),
  ("sydney"),
  ("taima"),
  ("taji"),
  ("takoda"),
  ("tal"),
  ("tammy"),
  ("tamryn"),
  ("tanak"),
  ("tapani"),
  ("taren"),
  ("taryn"),
  ("tasha"),
  ("tate"),
  ("taye"),
  ("tayler"),
  ("taylor"),
  ("teagan"),
  ("tegan"),
  ("terrell"),
  ("terry"),
  ("thanh"),
  ("theo"),
  ("thomas"),
  ("tiffany"),
  ("timothy"),
  ("tina"),
  ("tirtha"),
  ("toby"),
  ("tommie"),
  ("tommy"),
  ("tony"),
  ("tory"),
  ("toshi"),
  ("tovi"),
  ("tracey"),
  ("tracy"),
  ("travis"),
  ("trinidad"),
  ("trinity"),
  ("tristan"),
  ("tristen"),
  ("tristyn"),
  ("troy"),
  ("tyler"),
  ("umrao"),
  ("unknown"),
  ("vajra"),
  ("val"),
  ("valentine"),
  ("van"),
  ("vanya"),
  ("varuna"),
  ("vasilii"),
  ("vasya"),
  ("verdell"),
  ("verna"),
  ("vernell"),
  ("vernie"),
  ("vernon"),
  ("victor"),
  ("vidyut"),
  ("viola"),
  ("virgil"),
  ("vivian"),
  ("walter"),
  ("wesley"),
  ("whitney"),
  ("william"),
  ("willie"),
  ("wyn"),
  ("yael"),
  ("yama"),
  ("yong"),
  ("young"),
  ("yuma"),
  ("yuri"),
  ("zan"),
  ("zayit"),
  ("zhenya"),
  ("zimra"),
  ("zion"),
  ("zuriel")
);
CreateDict(
    "name" => "names/AndrogenousFnames.dict",
    "table" => "names/AndrogenousFnames.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'names/FemaleFnames.dict'
CreateTable(
  "names/FemaleFnames.dict__TABLE",
  ("entry" => "Text"),
  ("aaarti"),
  ("aadila"),
  ("aaida"),
  ("aaisha"),
  ("aaliyah"),
  ("aaltje"),
  ("aamina"),
  ("aanisa"),
  ("aarifa"),
  ("aasima"),
  ("aasiya"),
  ("aatifa"),
  ("aatika"),
  ("aayaat"),
  ("aba"),
  ("abagail"),
  ("abaigael"),
  ("abani"),
  ("abarrane"),
  ("abbey"),
  ("abbie"),
  ("abbigail"),
  ("abby"),
  ("abebi"),
  ("abedabun"),
  ("abeer"),
  ("abegayle"),
  ("abelia"),
  ("abelina"),
  ("abella"),
  ("abena"),
  ("abeni"),
  ("abequa"),
  ("aberfa"),
  ("abertha"),
  ("abetje"),
  ("abha"),
  ("abhilasha"),
  ("abhirati"),
  ("abhy"),
  ("abiageal"),
  ("abichail"),
  ("abie"),
  ("abigail"),
  ("abigale"),
  ("abigayle"),
  ("abira"),
  ("aboil"),
  ("abra"),
  ("abriana"),
  ("abrianna"),
  ("abrielle"),
  ("abrienda"),
  ("abrienne"),
  ("abril"),
  ("acacia"),
  ("acantha"),
  ("aceline"),
  ("achala"),
  ("adah"),
  ("adain"),
  ("adair"),
  ("adaira"),
  ("adairia"),
  ("adalene"),
  ("adalgisa"),
  ("adalia"),
  ("adalicia"),
  ("adalie"),
  ("adaline"),
  ("adaliz"),
  ("adalyn"),
  ("adalynn"),
  ("adamaris"),
  ("adamina"),
  ("adana"),
  ("adara"),
  ("addfwyn"),
  ("addien"),
  ("addiena"),
  ("addisyn"),
  ("addyson"),
  ("adeeba"),
  ("adeen"),
  ("adela"),
  ("adelaida"),
  ("adelaide"),
  ("adelajda"),
  ("adele"),
  ("adelia"),
  ("adelina"),
  ("adeline"),
  ("adelisa"),
  ("adelise"),
  ("adelita"),
  ("adell"),
  ("adella"),
  ("adelle"),
  ("adelyn"),
  ("adelynn"),
  ("ademia"),
  ("adena"),
  ("adene"),
  ("adenydd"),
  ("aderes"),
  ("aderyn"),
  ("adhira"),
  ("adhraaa"),
  ("adie"),
  ("adilene"),
  ("adina"),
  ("adinah"),
  ("adinam"),
  ("adine"),
  ("adishree"),
  ("adison"),
  ("aditi"),
  ("adla"),
  ("adleida"),
  ("adlesha"),
  ("adleta"),
  ("adline"),
  ("admina"),
  ("adoette"),
  ("adolfina"),
  ("adonia"),
  ("adoracion"),
  ("adorlee"),
  ("adreana"),
  ("adreanna"),
  ("adria"),
  ("adriana"),
  ("adriane"),
  ("adrianna"),
  ("adrianne"),
  ("adrie"),
  ("adriene"),
  ("adrienne"),
  ("adrika"),
  ("adrina"),
  ("adsila"),
  ("adviga"),
  ("adya"),
  ("adyna"),
  ("adyson"),
  ("aelan"),
  ("aelwen"),
  ("aelwyd"),
  ("aerona"),
  ("afaaf"),
  ("afanasiia"),
  ("afanasiya"),
  ("afeefa"),
  ("afimia"),
  ("afnaan"),
  ("afonaseva"),
  ("afra"),
  ("afraah"),
  ("africa"),
  ("afrodille"),
  ("afton"),
  ("afyia"),
  ("agacia"),
  ("agafia"),
  ("agafiia"),
  ("agafiya"),
  ("agafokliia"),
  ("agafonika"),
  ("agafya"),
  ("agapiia"),
  ("agasha"),
  ("agashka"),
  ("agata"),
  ("agatha"),
  ("agathe"),
  ("agaton"),
  ("agda"),
  ("agdta"),
  ("aggie"),
  ("aghadreena"),
  ("aghamora"),
  ("aghanashini"),
  ("aghaveagh"),
  ("aghavilla"),
  ("aghna"),
  ("aglaia"),
  ("aglaida"),
  ("aglaya"),
  ("agna"),
  ("agnella"),
  ("agnese"),
  ("agnessa"),
  ("agneta"),
  ("agnete"),
  ("agnia"),
  ("agniia"),
  ("agnus"),
  ("agrafena"),
  ("agrafina"),
  ("agramakova"),
  ("agrata"),
  ("agrima"),
  ("agripena"),
  ("agripina"),
  ("agrippa"),
  ("agrippina"),
  ("agueda"),
  ("agustina"),
  ("ahalya"),
  ("ahana"),
  ("ahava"),
  ("ahelie"),
  ("ahisma"),
  ("ahlaam"),
  ("ahladita"),
  ("ahuda"),
  ("ahuva"),
  ("ai"),
  ("aida"),
  ("aide"),
  ("aidia"),
  ("aiesha"),
  ("aiglentina"),
  ("aigneis"),
  ("aiko"),
  ("aila"),
  ("ailani"),
  ("ailat"),
  ("aileana"),
  ("aileen"),
  ("aileene"),
  ("ailene"),
  ("ailey"),
  ("aili"),
  ("ailia"),
  ("ailis"),
  ("ailisa"),
  ("ailise"),
  ("ailish"),
  ("ailsa"),
  ("ailsie"),
  ("aimara"),
  ("aimee"),
  ("aina"),
  ("ainara"),
  ("aine"),
  ("aingeal"),
  ("ainhoa"),
  ("ainsley"),
  ("aintzane"),
  ("airlia"),
  ("aisha"),
  ("aishani"),
  ("aishwarya"),
  ("aissa"),
  ("aitana"),
  ("aitugan"),
  ("aiya"),
  ("aiyana"),
  ("aiyanna"),
  ("aizdiakova"),
  ("aizza"),
  ("ajala"),
  ("ajanta"),
  ("ajaya"),
  ("akane"),
  ("akeelah"),
  ("akeiyla"),
  ("akela"),
  ("akemi"),
  ("akhila"),
  ("aki"),
  ("akibe"),
  ("akiha"),
  ("akiko"),
  ("akilah"),
  ("akili"),
  ("akillina"),
  ("akina"),
  ("akira"),
  ("akiriya"),
  ("akiulina"),
  ("akriti"),
  ("aksana"),
  ("akshaya"),
  ("akshita"),
  ("aksinya"),
  ("akuro"),
  ("akuti"),
  ("alaina"),
  ("alaine"),
  ("alair"),
  ("alaka"),
  ("alaknanda"),
  ("alala"),
  ("alamea"),
  ("alameda"),
  ("alana"),
  ("alandra"),
  ("alane"),
  ("alani"),
  ("alanis"),
  ("alanna"),
  ("alannah"),
  ("alanza"),
  ("alaqua"),
  ("alasa"),
  ("alastrina"),
  ("alastriona"),
  ("alaula"),
  ("alawa"),
  ("alaya"),
  ("alayna"),
  ("alayne"),
  ("alazne"),
  ("albena"),
  ("alberta"),
  ("albertha"),
  ("albertina"),
  ("albertine"),
  ("albina"),
  ("albinia"),
  ("albinka"),
  ("alcee"),
  ("alcina"),
  ("alcine"),
  ("alcinia"),
  ("alda"),
  ("aldene"),
  ("aldona"),
  ("aldonsa"),
  ("aldonza"),
  ("aldora"),
  ("aleah"),
  ("aleale"),
  ("alease"),
  ("alecia"),
  ("aleece"),
  ("aleen"),
  ("aleena"),
  ("aleeza"),
  ("aleezah"),
  ("alegra"),
  ("alegria"),
  ("aleida"),
  ("aleisha"),
  ("alejandra"),
  ("alejandrina"),
  ("aleksandra"),
  ("alena"),
  ("alene"),
  ("alenka"),
  ("alesha"),
  ("aleshia"),
  ("alesia"),
  ("alessa"),
  ("alessandra"),
  ("alessia"),
  ("aleta"),
  ("aletea"),
  ("aletha"),
  ("alethea"),
  ("alethia"),
  ("aletia"),
  ("aletta"),
  ("alexa"),
  ("alexandr"),
  ("alexandra"),
  ("alexandrea"),
  ("alexandria"),
  ("alexandrine"),
  ("alexcia"),
  ("alexia"),
  ("alexina"),
  ("alexus"),
  ("alexys"),
  ("alfhild"),
  ("alfonsa"),
  ("alfreda"),
  ("alfredia"),
  ("algoma"),
  ("alhertina"),
  ("alhertine"),
  ("alia"),
  ("aliana"),
  ("alica"),
  ("alice noble"),
  ("alicia"),
  ("alida"),
  ("alika"),
  ("alina"),
  ("aline"),
  ("alisa"),
  ("alisanne"),
  ("alise"),
  ("alisha"),
  ("alishia"),
  ("alisia"),
  ("alison"),
  ("alissa"),
  ("alisson"),
  ("alita"),
  ("alitza"),
  ("alixandra"),
  ("aliya"),
  ("aliyah"),
  ("aliyahclaudia"),
  ("aliyn"),
  ("aliyya"),
  ("aliza"),
  ("alizah"),
  ("alize"),
  ("alka"),
  ("alla"),
  ("allaire"),
  ("allana"),
  ("allecra"),
  ("alleen"),
  ("alleffra"),
  ("allegra"),
  ("allena"),
  ("allene"),
  ("allete"),
  ("alline"),
  ("alliss"),
  ("allisson"),
  ("allonia"),
  ("allsun"),
  ("ally"),
  ("allyce"),
  ("allyn"),
  ("allyson"),
  ("allyssa"),
  ("almaasa"),
  ("almas"),
  ("almeda"),
  ("almeta"),
  ("almira"),
  ("almunda"),
  ("almundena"),
  ("almundina"),
  ("aloha"),
  ("alohilani"),
  ("aloise"),
  ("alona"),
  ("alondra"),
  ("alonna"),
  ("alonsa"),
  ("alopa"),
  ("alpa"),
  ("alpana"),
  ("alpina"),
  ("alsatia"),
  ("alta"),
  ("altagracia"),
  ("altha"),
  ("althea"),
  ("altsoba"),
  ("aluma"),
  ("alumit"),
  ("alvarita"),
  ("alvena"),
  ("alvera"),
  ("alverda"),
  ("alverna"),
  ("alverta"),
  ("alvina"),
  ("alvira"),
  ("alvy"),
  ("alyce"),
  ("alycia"),
  ("alys"),
  ("alysa"),
  ("alyse"),
  ("alysha"),
  ("alysia"),
  ("alyson"),
  ("alyss"),
  ("alyssa"),
  ("alyssandra"),
  ("alyssia"),
  ("alyvia"),
  ("alzbeta"),
  ("amaani"),
  ("amabella"),
  ("amabelle"),
  ("amada"),
  ("amadahy"),
  ("amadi"),
  ("amala"),
  ("amalea"),
  ("amalia"),
  ("amalie"),
  ("amalur"),
  ("amalure"),
  ("amara"),
  ("amaranta"),
  ("amarante"),
  ("amaravati"),
  ("amariah"),
  ("amarika"),
  ("amaris"),
  ("amarisa"),
  ("amarise"),
  ("amarissa"),
  ("amata"),
  ("amatullah"),
  ("amaya"),
  ("amayeta"),
  ("amba"),
  ("amber"),
  ("amberly"),
  ("ambika"),
  ("ambra"),
  ("ambre"),
  ("ambrosia"),
  ("ambrosine"),
  ("ambu"),
  ("ambuda"),
  ("ambuja"),
  ("amedee"),
  ("amee"),
  ("ameena"),
  ("ameera"),
  ("amelfa"),
  ("amelia"),
  ("amelie"),
  ("america"),
  ("amhi"),
  ("amhika"),
  ("ami"),
  ("amia"),
  ("amiah"),
  ("amie"),
  ("amiee"),
  ("amina"),
  ("amira"),
  ("amirah"),
  ("amissa"),
  ("amite"),
  ("amitee"),
  ("amitola"),
  ("amity"),
  ("amiyah"),
  ("amla"),
  ("ammie"),
  ("amniyya"),
  ("amoda"),
  ("amodini"),
  ("amor"),
  ("amora"),
  ("amparo"),
  ("ampliia"),
  ("amrapali"),
  ("amrita"),
  ("amritha"),
  ("amritkala"),
  ("amrusha"),
  ("amser"),
  ("amshula"),
  ("amy"),
  ("amya"),
  ("ana"),
  ("anabel"),
  ("anabella"),
  ("anabelle"),
  ("anaclaudia"),
  ("anagha"),
  ("anahi"),
  ("anahita"),
  ("anais"),
  ("anala"),
  ("analee"),
  ("analeigh"),
  ("analena"),
  ("analeticia"),
  ("analia"),
  ("analisa"),
  ("analise"),
  ("anamari"),
  ("anamaria"),
  ("ana maria"),
  ("anamarie"),
  ("anamika"),
  ("anandamayi"),
  ("anandi"),
  ("anandini"),
  ("anandita"),
  ("ananta"),
  ("ananya"),
  ("anarosa"),
  ("anasooya"),
  ("anastacia"),
  ("anastasia"),
  ("anastasiia"),
  ("anastasija"),
  ("anastazja"),
  ("anasuya"),
  ("anat"),
  ("anata"),
  ("anatassia"),
  ("anate"),
  ("anatie"),
  ("anaya"),
  ("anbara"),
  ("ance"),
  ("ancelin"),
  ("ancelina"),
  ("anchal"),
  ("anchita"),
  ("anchoret"),
  ("anda"),
  ("andeana"),
  ("andera"),
  ("andere"),
  ("andie"),
  ("andreana"),
  ("andree"),
  ("andreea"),
  ("andreeva"),
  ("andreiana"),
  ("andria"),
  ("andrievicha"),
  ("andromeda"),
  ("ane"),
  ("anechka"),
  ("aneesa"),
  ("aneko"),
  ("anemone"),
  ("aneska"),
  ("aneta"),
  ("anetta"),
  ("anette"),
  ("anevay"),
  ("anfiia"),
  ("anfoma"),
  ("anfusa"),
  ("anga"),
  ("angana"),
  ("angarika"),
  ("ange"),
  ("angele"),
  ("angelena"),
  ("angeles"),
  ("angeletta"),
  ("angelette"),
  ("angelia"),
  ("angelic"),
  ("angelica"),
  ("angelika"),
  ("angelina"),
  ("angeline"),
  ("angelique"),
  ("angelita"),
  ("angell"),
  ("angella"),
  ("angelyn"),
  ("angeni"),
  ("anghard"),
  ("angie"),
  ("angila"),
  ("angilia"),
  ("angirasa"),
  ("angla"),
  ("angle"),
  ("anglea"),
  ("angusta"),
  ("anh"),
  ("ania"),
  ("anica"),
  ("anice"),
  ("anichka"),
  ("anieli"),
  ("anika"),
  ("aniki"),
  ("aniko"),
  ("anila"),
  ("animaida"),
  ("animaisa"),
  ("anina"),
  ("anindita"),
  ("anisha"),
  ("anisia"),
  ("anisiia"),
  ("anisiya"),
  ("anissa"),
  ("anisya"),
  ("anita"),
  ("anitchka"),
  ("anitia"),
  ("anitra"),
  ("anitsa"),
  ("aniya"),
  ("aniyah"),
  ("anizka"),
  ("anja"),
  ("anjali"),
  ("anjana"),
  ("anjanette"),
  ("anje"),
  ("anjelica"),
  ("anjelika"),
  ("anjelita"),
  ("anju"),
  ("anjushree"),
  ("anjushri"),
  ("anka"),
  ("anke"),
  ("anki"),
  ("ankita"),
  ("ankti"),
  ("anku"),
  ("ann"),
  ("annabel"),
  ("annabell"),
  ("annabella"),
  ("annabellaeden"),
  ("annabelle"),
  ("annabla"),
  ("annalee"),
  ("annalie"),
  ("annaliese"),
  ("annalina"),
  ("annalisa"),
  ("annalise"),
  ("annalisse"),
  ("annamae"),
  ("annamaria"),
  ("annamarie"),
  ("annapurna"),
  ("annastasija"),
  ("anndra"),
  ("anne"),
  ("anneke"),
  ("anneli"),
  ("anneliese"),
  ("annelle"),
  ("annemarie"),
  ("annemieke"),
  ("anner"),
  ("annett"),
  ("annetta"),
  ("annette"),
  ("anne-will"),
  ("annice"),
  ("annika"),
  ("annike"),
  ("annikka"),
  ("annikke"),
  ("annikki"),
  ("annis"),
  ("annita"),
  ("annmarie"),
  ("annora"),
  ("annorah"),
  ("annot"),
  ("annuziata"),
  ("anny"),
  ("annze"),
  ("anora"),
  ("anoushka"),
  ("anshula"),
  ("ansley"),
  ("antara"),
  ("anteia"),
  ("anthea"),
  ("antionette"),
  ("antje"),
  ("antoinette"),
  ("antonetta"),
  ("antonette"),
  ("antonidka"),
  ("antonie"),
  ("antonietta"),
  ("antonina"),
  ("anuhya"),
  ("anumati"),
  ("anunciacion"),
  ("anupama"),
  ("anuprabha"),
  ("anuradha"),
  ("anuragini"),
  ("anurati"),
  ("anusha"),
  ("anushka"),
  ("anushri"),
  ("anusia"),
  ("anuva"),
  ("anwen"),
  ("anwesha"),
  ("anya"),
  ("anyuta"),
  ("anzhela"),
  ("aoibheann"),
  ("aoife"),
  ("aolani"),
  ("apala"),
  ("aparijita"),
  ("aparna"),
  ("apfiia"),
  ("aphra"),
  ("apolinaria"),
  ("apolinariia"),
  ("apollina"),
  ("apolline"),
  ("apolonia"),
  ("apoloniada"),
  ("apolosakifa"),
  ("aponi"),
  ("apoorva"),
  ("april"),
  ("apryl"),
  ("apsara"),
  ("apsaras"),
  ("apurva"),
  ("aqeela"),
  ("aquene"),
  ("aquilina"),
  ("ara"),
  ("arabela"),
  ("arabell"),
  ("arabella"),
  ("arabelle"),
  ("araceli"),
  ("aracelia"),
  ("aracelis"),
  ("aracely"),
  ("aradhana"),
  ("arama"),
  ("araminta"),
  ("araminte"),
  ("arashel"),
  ("arati"),
  ("arcadia"),
  ("arcelia"),
  ("arcene"),
  ("archa"),
  ("archisha"),
  ("archita"),
  ("arcilla"),
  ("ardala"),
  ("ardath"),
  ("ardelia"),
  ("ardell"),
  ("ardella"),
  ("ardelle"),
  ("ardice"),
  ("ardis"),
  ("ardith"),
  ("areille"),
  ("areli"),
  ("arella"),
  ("arely"),
  ("aretha"),
  ("aretina"),
  ("argel"),
  ("argelia"),
  ("argentina"),
  ("argiwyddes"),
  ("argoel"),
  ("argraff"),
  ("aria"),
  ("ariadna"),
  ("ariadne"),
  ("arial"),
  ("ariana"),
  ("ariane"),
  ("arianna"),
  ("arianne"),
  ("arianrhod"),
  ("arianwyn"),
  ("arica"),
  ("aricela"),
  ("aricia"),
  ("aridatha"),
  ("ariela"),
  ("ariele"),
  ("ariella"),
  ("arielle"),
  ("ariellel"),
  ("arin"),
  ("arina"),
  ("arisa"),
  ("ariyne"),
  ("ariyya"),
  ("arizona"),
  ("arjean"),
  ("arkhipa"),
  ("arkhippa"),
  ("arla"),
  ("arlais"),
  ("arlean"),
  ("arleen"),
  ("arlena"),
  ("arlene"),
  ("arleta"),
  ("arleth"),
  ("arletha"),
  ("arletta"),
  ("arlette"),
  ("arlinda"),
  ("arline"),
  ("arliss"),
  ("arly"),
  ("arlyne"),
  ("armanda"),
  ("armandina"),
  ("armelle"),
  ("armena"),
  ("armes"),
  ("armida"),
  ("arminda"),
  ("arnelle"),
  ("arnetta"),
  ("arnette"),
  ("arnita"),
  ("arnwlle"),
  ("aroa"),
  ("arpana"),
  ("arpita"),
  ("arrie"),
  ("arshia"),
  ("artaith"),
  ("artemeva"),
  ("artemiia"),
  ("artemisia"),
  ("arthes"),
  ("artura"),
  ("arundhati"),
  ("arunima"),
  ("arvilla"),
  ("arwa"),
  ("arwydd"),
  ("aryana"),
  ("aryanna"),
  ("arziki"),
  ("asako"),
  ("asami"),
  ("asavari"),
  ("ascencion"),
  ("ascharya"),
  ("aseela"),
  ("aseema"),
  ("asenette"),
  ("asenka"),
  ("asenke"),
  ("asgari"),
  ("asgre"),
  ("asha"),
  ("ashakiran"),
  ("ashalata"),
  ("ashanti"),
  ("ashavari"),
  ("ashely"),
  ("ashima"),
  ("ashira"),
  ("ashlea"),
  ("ashlee"),
  ("ashleigh"),
  ("ashli"),
  ("ashlie"),
  ("ashling"),
  ("ashly"),
  ("ashlyn"),
  ("ashlynn"),
  ("ashna"),
  ("ashtyn"),
  ("ashwini"),
  ("asia"),
  ("asianah"),
  ("asisa"),
  ("asita"),
  ("askitreia"),
  ("askitriia"),
  ("aslesha"),
  ("asley"),
  ("asmaa"),
  ("asmita"),
  ("aspasia"),
  ("aspen"),
  ("assana"),
  ("assane"),
  ("assunta"),
  ("astera"),
  ("astra"),
  ("astri"),
  ("astrid"),
  ("asuncion"),
  ("asya"),
  ("atalaya"),
  ("atalia"),
  ("atalie"),
  ("atara"),
  ("atarah"),
  ("ataret"),
  ("atasi"),
  ("atepa"),
  ("atera"),
  ("ateret"),
  ("atgas"),
  ("atha"),
  ("athaleyah"),
  ("athalia"),
  ("athalie"),
  ("athdara"),
  ("atheer"),
  ("athena"),
  ("atira"),
  ("atiyya"),
  ("atreyi"),
  ("atsuko"),
  ("auberta"),
  ("aubina"),
  ("aubine"),
  ("aubree"),
  ("aubriana"),
  ("aubrie"),
  ("aud"),
  ("audra"),
  ("audrea"),
  ("audria"),
  ("audriana"),
  ("audrianna"),
  ("audrie"),
  ("audrina"),
  ("audry"),
  ("augusteen"),
  ("augustina"),
  ("aulani"),
  ("aundrea"),
  ("aura"),
  ("aurea"),
  ("aurelia"),
  ("aureliana"),
  ("aurkena"),
  ("aurkene"),
  ("aurnia"),
  ("aurora"),
  ("aurore"),
  ("aurorette"),
  ("autumn"),
  ("ava"),
  ("avagail"),
  ("avah"),
  ("avani"),
  ("avanti"),
  ("avantika"),
  ("avasa"),
  ("avatara"),
  ("avdeeva"),
  ("avdiushka"),
  ("avdotia"),
  ("avelina"),
  ("aveline"),
  ("avera"),
  ("averi"),
  ("averie"),
  ("avgusta"),
  ("avichayil"),
  ("avigail"),
  ("avis"),
  ("aviva"),
  ("avivah"),
  ("avivi"),
  ("avivit"),
  ("avonmora"),
  ("avramova"),
  ("avril"),
  ("awaatif"),
  ("awda"),
  ("awel"),
  ("awen"),
  ("awena"),
  ("awenasa"),
  ("awendela"),
  ("awenita"),
  ("awilda"),
  ("awinita"),
  ("axelia"),
  ("axella"),
  ("axelle"),
  ("aya"),
  ("ayako"),
  ("ayala"),
  ("ayalah"),
  ("ayame"),
  ("ayana"),
  ("ayanna"),
  ("ayano"),
  ("ayashe"),
  ("ayesha"),
  ("ayita"),
  ("ayla"),
  ("ayleen"),
  ("aylin"),
  ("ayn"),
  ("ayushmati"),
  ("azalea"),
  ("azalee"),
  ("azariah"),
  ("azeema"),
  ("azeeza"),
  ("azelia"),
  ("azelie"),
  ("aziel"),
  ("aziza"),
  ("azucena"),
  ("azul"),
  ("azura"),
  ("azza"),
  ("azzie"),
  ("babara"),
  ("babette"),
  ("bageshri"),
  ("bahula"),
  ("baialyn"),
  ("baibichia"),
  ("baibre"),
  ("baidehi"),
  ("baijayanthi"),
  ("bailee"),
  ("baisakhi"),
  ("baishali"),
  ("baka"),
  ("bakhteiarova"),
  ("bakul"),
  ("bakula"),
  ("bala"),
  ("balbara"),
  ("balbina"),
  ("ballari"),
  ("bambi"),
  ("banamala"),
  ("banani"),
  ("bandana"),
  ("bandhula"),
  ("bandhura"),
  ("banhi"),
  ("banhishikha"),
  ("banita"),
  ("banon"),
  ("bansari"),
  ("bao"),
  ("bara"),
  ("barabara"),
  ("barb"),
  ("barbar"),
  ("barbera"),
  ("barbie"),
  ("barbra"),
  ("bari"),
  ("barnali"),
  ("barran"),
  ("barsha"),
  ("baruna"),
  ("baruni"),
  ("basabi"),
  ("basanti"),
  ("basha"),
  ("basia"),
  ("basilia"),
  ("bathsheba"),
  ("battseeyon"),
  ("battzion"),
  ("batya"),
  ("baylee"),
  ("baylie"),
  ("bazhena"),
  ("bea"),
  ("beata"),
  ("beate"),
  ("beathas"),
  ("beatris"),
  ("beatrisa"),
  ("beatriz"),
  ("beaulah"),
  ("bebe"),
  ("bebhinn"),
  ("becca"),
  ("becka"),
  ("becki"),
  ("beckie"),
  ("becky"),
  ("bedche"),
  ("behula"),
  ("belda"),
  ("beleka"),
  ("belen"),
  ("belgis"),
  ("belgukovna"),
  ("beli"),
  ("belia"),
  ("belicia"),
  ("belinda"),
  ("belita"),
  ("belka"),
  ("belkis"),
  ("bella"),
  ("bellanca"),
  ("belle"),
  ("bellini"),
  ("belukha"),
  ("belva"),
  ("bena"),
  ("benazir"),
  ("bengta"),
  ("benigna"),
  ("benita"),
  ("benka"),
  ("bente"),
  ("benten"),
  ("berangaria"),
  ("berdie"),
  ("berdine"),
  ("berenice"),
  ("bergitta"),
  ("berit"),
  ("berna"),
  ("bernadea"),
  ("bernadette"),
  ("bernadina"),
  ("bernadine"),
  ("bernarda"),
  ("bernardina"),
  ("bernardine"),
  ("berneen"),
  ("berneice"),
  ("bernelle"),
  ("bernetta"),
  ("bernette"),
  ("bernicia"),
  ("berniece"),
  ("berniss"),
  ("bernita"),
  ("bernyce"),
  ("berta"),
  ("bertena"),
  ("berthe"),
  ("berthog"),
  ("bertille"),
  ("bertrise"),
  ("beruriah"),
  ("bess"),
  ("besse"),
  ("beth"),
  ("bethan"),
  ("bethanee"),
  ("bethani"),
  ("bethanie"),
  ("bethann"),
  ("bethany"),
  ("bethea"),
  ("bethel"),
  ("betheli"),
  ("bethesda"),
  ("bethia"),
  ("bethsaida"),
  ("bethseda"),
  ("bethsheba"),
  ("bethzy"),
  ("betje"),
  ("betrys"),
  ("betsey"),
  ("betsy"),
  ("bette"),
  ("betti"),
  ("bettie"),
  ("bettina"),
  ("bettine"),
  ("betty"),
  ("bettyann"),
  ("bettye"),
  ("beula"),
  ("beulah"),
  ("bev"),
  ("beverlee"),
  ("beverley"),
  ("beyonce"),
  ("bezruchka"),
  ("bezubaia"),
  ("bezui"),
  ("bha"),
  ("bhadra"),
  ("bhadraa"),
  ("bhagiratha"),
  ("bhagirathi"),
  ("bhagwanti"),
  ("bhagya"),
  ("bhagyalakshmi"),
  ("bhagyashree"),
  ("bhagyawati"),
  ("bhairavi"),
  ("bhakti"),
  ("bhamini"),
  ("bhanuja"),
  ("bhanumati"),
  ("bhanupriya"),
  ("bharani"),
  ("bharati"),
  ("bhargavi"),
  ("bhavana"),
  ("bhavani"),
  ("bhavini"),
  ("bhavna"),
  ("bhikkhuni"),
  ("bhilangana"),
  ("bhimadevi"),
  ("bhoomi"),
  ("bhoomika"),
  ("bhu"),
  ("bhudevi"),
  ("bhuvana"),
  ("biana"),
  ("bianca"),
  ("bianka"),
  ("biata"),
  ("bibi"),
  ("bibiana"),
  ("bibishkina"),
  ("bidelia"),
  ("bidina"),
  ("bienvenida"),
  ("biiata"),
  ("bijou"),
  ("billi"),
  ("billye"),
  ("bimala"),
  ("bina"),
  ("binata"),
  ("bindiya"),
  ("bindu"),
  ("binodini"),
  ("binta"),
  ("bipasha"),
  ("birdie"),
  ("birgit"),
  ("birgitta"),
  ("biriuta"),
  ("birtha"),
  ("birtie"),
  ("bisa"),
  ("bishakha"),
  ("bitya"),
  ("blair"),
  ("blaire"),
  ("blanca"),
  ("blanch"),
  ("blanchefleur"),
  ("blandina"),
  ("blanka"),
  ("blasa"),
  ("blausa"),
  ("blenda"),
  ("blodwen"),
  ("blodwyn"),
  ("blondell"),
  ("blondelle"),
  ("blondene"),
  ("blossom"),
  ("bluma"),
  ("bly"),
  ("blyana"),
  ("blythe"),
  ("bo-bae"),
  ("bobbi"),
  ("bobbye"),
  ("bobette"),
  ("bodgana"),
  ("bogdana"),
  ("bogna"),
  ("bogukhvala"),
  ("bogumezt"),
  ("bogumila"),
  ("boguslava"),
  ("bohdana"),
  ("bohgana"),
  ("bohumile"),
  ("boika"),
  ("bok"),
  ("bolanle"),
  ("bolce"),
  ("boldina"),
  ("bolemila"),
  ("boleslava"),
  ("bolgarina"),
  ("bolgarynia"),
  ("bona"),
  ("bong"),
  ("bonita"),
  ("bonni"),
  ("bonny"),
  ("bonny-jean"),
  ("bonny-lee"),
  ("borghild"),
  ("borisova"),
  ("boriuta"),
  ("botilda"),
  ("bozena"),
  ("bozhana"),
  ("bozhitsa"),
  ("bozi"),
  ("bracha"),
  ("brachah"),
  ("bradana"),
  ("braelyn"),
  ("bragina"),
  ("braith"),
  ("branda"),
  ("brande"),
  ("brandee"),
  ("brandi"),
  ("brandie"),
  ("brandye"),
  ("brangwen"),
  ("brangwy"),
  ("branislava"),
  ("branizlawa"),
  ("brann"),
  ("branwen"),
  ("branwenn"),
  ("branwyn"),
  ("bratati"),
  ("bratomila"),
  ("bratromila"),
  ("bratrumila"),
  ("brea"),
  ("breana"),
  ("breann"),
  ("breanna"),
  ("breanne"),
  ("brear"),
  ("brechtje"),
  ("breck"),
  ("bree"),
  ("breeanne"),
  ("breeauna"),
  ("breeda"),
  ("breelyn"),
  ("breena"),
  ("breeon"),
  ("breezy"),
  ("bregus"),
  ("brendalynn"),
  ("brendolyn"),
  ("brenna"),
  ("breona"),
  ("breonia"),
  ("breonna"),
  ("bretta"),
  ("brettany"),
  ("brette"),
  ("breyona"),
  ("bria"),
  ("briallan"),
  ("briallen"),
  ("briana"),
  ("brianda"),
  ("brianna"),
  ("brianne"),
  ("briar"),
  ("brid"),
  ("bride"),
  ("bridget"),
  ("bridgetfernanda"),
  ("bridgett"),
  ("bridgette"),
  ("brie"),
  ("brielle"),
  ("brigette"),
  ("brighid"),
  ("brigid"),
  ("brigida"),
  ("brigidia"),
  ("brigitta"),
  ("brigitte"),
  ("briley"),
  ("brina"),
  ("brinda"),
  ("brinley"),
  ("briona"),
  ("brione"),
  ("brionna"),
  ("brisa"),
  ("brisha"),
  ("brisia"),
  ("brissa"),
  ("bristol"),
  ("britany"),
  ("brite"),
  ("britney"),
  ("britni"),
  ("britny"),
  ("britta"),
  ("brittaney"),
  ("brittani"),
  ("brittanie"),
  ("britteny"),
  ("brittnay"),
  ("brittnee"),
  ("brittney"),
  ("brittni"),
  ("brittnie"),
  ("brittny"),
  ("briza"),
  ("brona"),
  ("bronwen"),
  ("bronwyn"),
  ("brooke"),
  ("brooklyn"),
  ("brooklynn"),
  ("brucie"),
  ("bruna"),
  ("brunella"),
  ("brunetta"),
  ("brunilda"),
  ("bryah"),
  ("bryana"),
  ("bryanna"),
  ("brygid"),
  ("brylee"),
  ("bryn"),
  ("bryna"),
  ("brynda"),
  ("brynlee"),
  ("bryssa"),
  ("buddug"),
  ("budisla"),
  ("budizla"),
  ("budshka"),
  ("budska"),
  ("buena"),
  ("buffy"),
  ("bukhval"),
  ("bula"),
  ("bulah"),
  ("bulbul"),
  ("bulbuli"),
  ("bunme"),
  ("bunny"),
  ("burma"),
  ("butterfly"),
  ("byanca"),
  ("cacia"),
  ("cadee"),
  ("cadence"),
  ("cadencia"),
  ("cadenza"),
  ("cadha"),
  ("cadhla"),
  ("cadi"),
  ("cadie"),
  ("cadwyn"),
  ("cady"),
  ("caethes"),
  ("cafell"),
  ("caffara"),
  ("caffaria"),
  ("cahira"),
  ("cailleach"),
  ("caillic"),
  ("cailyn"),
  ("caimile"),
  ("cait"),
  ("caitie"),
  ("caitlan"),
  ("caitland"),
  ("caitlin"),
  ("caitlinn"),
  ("caitlyn"),
  ("caitlynn"),
  ("caitrin"),
  ("calandra"),
  ("calandre"),
  ("calandria"),
  ("calantha"),
  ("calanthe"),
  ("caldonia"),
  ("caleigh"),
  ("calendre"),
  ("cali"),
  ("calida"),
  ("calina"),
  ("calinda"),
  ("calista"),
  ("callahan"),
  ("callan"),
  ("callee"),
  ("calleigh"),
  ("calli"),
  ("callia"),
  ("callidora"),
  ("calvina"),
  ("calynda"),
  ("cambree"),
  ("cambria"),
  ("camelia"),
  ("camellia"),
  ("cameo"),
  ("cameron"),
  ("cami"),
  ("camie"),
  ("camila"),
  ("camile"),
  ("camilla"),
  ("camille"),
  ("camillei"),
  ("camisha"),
  ("cammeo"),
  ("cammi"),
  ("cammie"),
  ("cammy"),
  ("campbell"),
  ("candace"),
  ("candance"),
  ("candela"),
  ("candelaria"),
  ("candi"),
  ("candice"),
  ("candida"),
  ("candide"),
  ("candie"),
  ("candience"),
  ("candis"),
  ("candra"),
  ("candy"),
  ("candyce"),
  ("caniad"),
  ("cannelita"),
  ("cantrice"),
  ("caoimhe"),
  ("caprice"),
  ("capucina"),
  ("capucine"),
  ("cara"),
  ("caraf"),
  ("caraid"),
  ("caren"),
  ("caress"),
  ("caressa"),
  ("caresse"),
  ("cari"),
  ("caridad"),
  ("carie"),
  ("carilla"),
  ("carin"),
  ("carina"),
  ("carine"),
  ("carisa"),
  ("carissa"),
  ("carita"),
  ("carla"),
  ("carlee"),
  ("carleen"),
  ("carleigh"),
  ("carleigha"),
  ("carlena"),
  ("carlene"),
  ("carletta"),
  ("carley"),
  ("carli"),
  ("carlie"),
  ("carline"),
  ("carlita"),
  ("carlota"),
  ("carlotta"),
  ("carly"),
  ("carlyn"),
  ("carma"),
  ("carman"),
  ("carmela"),
  ("carmelia"),
  ("carmelina"),
  ("carmeline"),
  ("carmelita"),
  ("carmella"),
  ("carmencita"),
  ("carmina"),
  ("carminda"),
  ("carmita"),
  ("carmon"),
  ("carnation"),
  ("carola"),
  ("carolan"),
  ("carolann"),
  ("carole"),
  ("carolee"),
  ("carolena"),
  ("carolin"),
  ("carolina"),
  ("caroline"),
  ("caroll"),
  ("carolyn"),
  ("carolyne"),
  ("carolynn"),
  ("caron"),
  ("carona"),
  ("caroyln"),
  ("carressa"),
  ("carri"),
  ("carrie"),
  ("carrola"),
  ("carry"),
  ("carsandra"),
  ("caryl"),
  ("carylon"),
  ("caryn"),
  ("caryne"),
  ("carys"),
  ("casandra"),
  ("cascadia"),
  ("cascata"),
  ("casee"),
  ("casidhe"),
  ("casie"),
  ("casimira"),
  ("cassandra"),
  ("cassaundra"),
  ("cassey"),
  ("cassi"),
  ("cassia"),
  ("cassie"),
  ("cassondra"),
  ("cassy"),
  ("castalia"),
  ("cat"),
  ("catalin"),
  ("catalina"),
  ("catarina"),
  ("catarinecaterina"),
  ("cataval"),
  ("cateline"),
  ("catelyn"),
  ("caterina"),
  ("cath"),
  ("catharine"),
  ("cathasach"),
  ("catherin"),
  ("catherina"),
  ("catherine"),
  ("cathern"),
  ("catheryn"),
  ("cathey"),
  ("cathi"),
  ("cathie"),
  ("cathleen"),
  ("cathrine"),
  ("cathryn"),
  ("cathy"),
  ("catina"),
  ("catlee"),
  ("catleecatlin"),
  ("catlin"),
  ("catline"),
  ("catlyn"),
  ("catori"),
  ("catreen"),
  ("catrice"),
  ("catrin"),
  ("catrina"),
  ("catrine"),
  ("catrinia"),
  ("catriona"),
  ("catryn"),
  ("cattee"),
  ("cauvery"),
  ("cavana"),
  ("caycee"),
  ("caydence"),
  ("cayla"),
  ("caylee"),
  ("cecelia"),
  ("cecila"),
  ("cecile"),
  ("cecilia"),
  ("cecille"),
  ("cecily"),
  ("cecislava"),
  ("ceire"),
  ("celandia"),
  ("celena"),
  ("celerina"),
  ("celesse"),
  ("celesta"),
  ("celeste"),
  ("celestia"),
  ("celestiel"),
  ("celestina"),
  ("celestine"),
  ("celestyn"),
  ("celestyna"),
  ("celia"),
  ("celie"),
  ("celina"),
  ("celinda"),
  ("celine"),
  ("cella"),
  ("celsa"),
  ("cendrillon"),
  ("cenobia"),
  ("ceola"),
  ("cerelia"),
  ("ceri"),
  ("ceria"),
  ("cericeridwen"),
  ("ceridwen"),
  ("cerise"),
  ("cesara"),
  ("chaba"),
  ("chabah"),
  ("chadna"),
  ("chae"),
  ("chaitali"),
  ("chaitaly"),
  ("chaitan"),
  ("chaka"),
  ("chakori"),
  ("chakrika"),
  ("chalina"),
  ("chamayra"),
  ("chameli"),
  ("champa"),
  ("champabati"),
  ("champakali"),
  ("chamunda"),
  ("chana"),
  ("chanah"),
  ("chanchala"),
  ("chanda"),
  ("chandana"),
  ("chandani"),
  ("chandanika"),
  ("chandi"),
  ("chandika"),
  ("chandni"),
  ("chandrabali"),
  ("chandrabhaga"),
  ("chandrakala"),
  ("chandraki"),
  ("chandrakin"),
  ("chandraleksha"),
  ("chandrani"),
  ("chandrika"),
  ("chandrima"),
  ("chanel"),
  ("chanell"),
  ("chanelle"),
  ("changla"),
  ("changuna"),
  ("chanise"),
  ("chan juan"),
  ("channa"),
  ("channelle"),
  ("chantae"),
  ("chantal"),
  ("chantalle"),
  ("chantay"),
  ("chantel"),
  ("chantell"),
  ("chantelle"),
  ("chantoya"),
  ("chantrell"),
  ("chantrelle"),
  ("chapa"),
  ("chapala"),
  ("chara"),
  ("chardae"),
  ("charee"),
  ("charis"),
  ("charise"),
  ("charisma"),
  ("charissa"),
  ("charisse"),
  ("charita"),
  ("charity"),
  ("charla"),
  ("charlaine"),
  ("charlayne"),
  ("charlee"),
  ("charleen"),
  ("charleena"),
  ("charlena"),
  ("charlene"),
  ("charlesetta"),
  ("charlette"),
  ("charline"),
  ("charlisa"),
  ("charlita"),
  ("charlize"),
  ("charlott"),
  ("charlotta"),
  ("charlotte"),
  ("charlsie"),
  ("charlyn"),
  ("charmain"),
  ("charmaine"),
  ("charmayne"),
  ("charmine"),
  ("charo"),
  ("charolette"),
  ("charu"),
  ("charulata"),
  ("charulekha"),
  ("charumati"),
  ("charuprabha"),
  ("charusheela"),
  ("charvi"),
  ("chasidah"),
  ("chasidy"),
  ("chasity"),
  ("chassidy"),
  ("chastity"),
  ("chasya"),
  ("chatura"),
  ("chau"),
  ("chaunte"),
  ("chauntel"),
  ("chava"),
  ("chavela"),
  ("chavelle"),
  ("chaviva"),
  ("chavive"),
  ("chaya"),
  ("chayka"),
  ("chebotova"),
  ("chedva"),
  ("cheena"),
  ("chekhina"),
  ("chekhyna"),
  ("chela"),
  ("cheliadina"),
  ("chellise"),
  ("chelsea"),
  ("chelsey"),
  ("chelsi"),
  ("chelsie"),
  ("chelsy"),
  ("chemier"),
  ("chemislava"),
  ("chenelle"),
  ("chenka"),
  ("chenoa"),
  ("chephzibah"),
  ("chepi"),
  ("cher"),
  ("chere"),
  ("cheree"),
  ("chereen"),
  ("cherell"),
  ("cherelle"),
  ("cheri"),
  ("cherie"),
  ("cherilyn"),
  ("cherina"),
  ("cherine"),
  ("cherise"),
  ("cherish"),
  ("cherita"),
  ("cherly"),
  ("cherlyn"),
  ("chernavka"),
  ("chernislava"),
  ("chernka"),
  ("cherree"),
  ("cherrelle"),
  ("cherri"),
  ("cherrie"),
  ("cherry"),
  ("cherryl"),
  ("chery"),
  ("cheryl"),
  ("cheryle"),
  ("cheryll"),
  ("chesislava"),
  ("cheyanna"),
  ("cheyanne"),
  ("chhabi"),
  ("chhavvi"),
  ("chhaya"),
  ("chia"),
  ("chiaki"),
  ("chiana"),
  ("chianna"),
  ("chiara"),
  ("chica"),
  ("chicachiquita"),
  ("chickoa"),
  ("chie"),
  ("chieko"),
  ("chika"),
  ("chikako"),
  ("chikuma"),
  ("chilam"),
  ("chimalis"),
  ("chimayi"),
  ("chimere"),
  ("chimislava"),
  ("china"),
  ("chinatsu"),
  ("ching"),
  ("chinmayi"),
  ("chintan"),
  ("chintana"),
  ("chintanika"),
  ("chiona"),
  ("chipo"),
  ("chiquita"),
  ("chisato"),
  ("chiti"),
  ("chitkala"),
  ("chitose"),
  ("chitra"),
  ("chitragandha"),
  ("chitralekha"),
  ("chitrali"),
  ("chitramala"),
  ("chitrangada"),
  ("chitrani"),
  ("chitrarekha"),
  ("chitrita"),
  ("chitsa"),
  ("chiudka"),
  ("chiyeko"),
  ("chiyo"),
  ("chloe"),
  ("chloris"),
  ("cho"),
  ("chobotova"),
  ("cholena"),
  ("chosovi"),
  ("chosposi"),
  ("chrisanna"),
  ("chrisanne"),
  ("chrissa"),
  ("chrissie"),
  ("chrissy"),
  ("christa"),
  ("christal"),
  ("christeen"),
  ("christel"),
  ("christen"),
  ("christena"),
  ("christene"),
  ("christi"),
  ("christia"),
  ("christiana"),
  ("christiane"),
  ("christie"),
  ("christin"),
  ("christine"),
  ("christinia"),
  ("christobel"),
  ("christy"),
  ("chrysann"),
  ("chrystal"),
  ("chrystyna"),
  ("chu"),
  ("chumani"),
  ("chun"),
  ("chyna"),
  ("chynica"),
  ("chynna"),
  ("ciana"),
  ("cianna"),
  ("ciara"),
  ("ciarra"),
  ("ciatlllait"),
  ("cicely"),
  ("cielo"),
  ("ciera"),
  ("ciernislava"),
  ("cierra"),
  ("ciji"),
  ("cinda"),
  ("cinderella"),
  ("cindi"),
  ("cindie"),
  ("cindy"),
  ("cinnamon"),
  ("cinthia"),
  ("cinzia"),
  ("cionnaye"),
  ("cipriana"),
  ("cira"),
  ("circe"),
  ("ciri"),
  ("citlali"),
  ("citlalli"),
  ("claral"),
  ("clareta"),
  ("claretha"),
  ("claretta"),
  ("clarette"),
  ("claribel"),
  ("clarice"),
  ("clariee"),
  ("clarinda"),
  ("clarine"),
  ("claris"),
  ("clarisa"),
  ("clariss"),
  ("clarissa"),
  ("clarissaivy"),
  ("clarisse"),
  ("clarita"),
  ("classie"),
  ("claudette"),
  ("claudia"),
  ("claudina"),
  ("claudine"),
  ("clavdia"),
  ("clelia"),
  ("clella"),
  ("clemance"),
  ("clemence"),
  ("clemencia"),
  ("clementina"),
  ("clementine"),
  ("clemmie"),
  ("cleocliantha"),
  ("cleona"),
  ("cleonie"),
  ("cleopatra"),
  ("cleora"),
  ("cleotilde"),
  ("cleta"),
  ("clodagh"),
  ("clodia"),
  ("clodovea"),
  ("cloe"),
  ("clora"),
  ("clorinda"),
  ("clotilde"),
  ("cochava"),
  ("cocheta"),
  ("coco"),
  ("codee"),
  ("coira"),
  ("coleen"),
  ("colene"),
  ("coleta"),
  ("coletta"),
  ("colette"),
  ("colina"),
  ("colleen"),
  ("collen"),
  ("collena"),
  ("collene"),
  ("colletta"),
  ("collette"),
  ("colmcilla"),
  ("columbine"),
  ("comfort"),
  ("comforte"),
  ("comyna"),
  ("concepcion"),
  ("concepta"),
  ("conception"),
  ("concetta"),
  ("concha"),
  ("conchetta"),
  ("conchita"),
  ("conchobara"),
  ("conchobarra"),
  ("conchobarre"),
  ("congalie"),
  ("connelly"),
  ("conshita"),
  ("consolacion"),
  ("consolata"),
  ("constance"),
  ("constancia"),
  ("constansie"),
  ("constantia"),
  ("constantina"),
  ("constanza"),
  ("constanzie"),
  ("consuela"),
  ("consuelo"),
  ("contessa"),
  ("contina"),
  ("cora"),
  ("coraima"),
  ("coral"),
  ("coralee"),
  ("coralie"),
  ("coraly"),
  ("corazana"),
  ("corazon"),
  ("corda"),
  ("cordelia"),
  ("cordia"),
  ("cordie"),
  ("coreen"),
  ("coreene"),
  ("corene"),
  ("coretta"),
  ("corette"),
  ("coriann"),
  ("corianne"),
  ("corie"),
  ("corina"),
  ("corine"),
  ("corinna"),
  ("corinne"),
  ("corisa"),
  ("corliss"),
  ("cornelia"),
  ("corona"),
  ("correen"),
  ("correena"),
  ("corri"),
  ("corrianna"),
  ("corrianne"),
  ("corrie"),
  ("corrina"),
  ("corrine"),
  ("corrinne"),
  ("corsen"),
  ("cosette"),
  ("cosima"),
  ("courtlyn"),
  ("cozzie"),
  ("cragen"),
  ("creiddylad"),
  ("creissant"),
  ("creola"),
  ("crescent"),
  ("cressida"),
  ("crisann"),
  ("crisanna"),
  ("criselda"),
  ("crissa"),
  ("crissie"),
  ("crissy"),
  ("crista"),
  ("cristal"),
  ("cristen"),
  ("cristi"),
  ("cristie"),
  ("cristin"),
  ("cristina"),
  ("cristine"),
  ("cristy"),
  ("crotilda"),
  ("crwys"),
  ("crysta"),
  ("crystle"),
  ("cuc"),
  ("cullodena"),
  ("cullodina"),
  ("cullodina isobel"),
  ("cumania"),
  ("cumina"),
  ("cybille"),
  ("cydney"),
  ("cyiarra"),
  ("cymreiges"),
  ("cynara"),
  ("cyndi"),
  ("cyndy"),
  ("cyntia"),
  ("cyrilla"),
  ("cyrstal"),
  ("cythia"),
  ("cyzarine"),
  ("czarina"),
  ("czeimislawa"),
  ("daba"),
  ("dacia"),
  ("dae"),
  ("dael"),
  ("daere"),
  ("daeshanda"),
  ("daeshawna"),
  ("daeshona"),
  ("daeva"),
  ("dafne"),
  ("daganya"),
  ("daganyah"),
  ("dagmar"),
  ("dagny"),
  ("dahlia"),
  ("dahna"),
  ("dahnya"),
  ("daija"),
  ("daijah"),
  ("daina"),
  ("daisey"),
  ("daisha"),
  ("daisi"),
  ("daisy"),
  ("daja"),
  ("dakini"),
  ("dakota"),
  ("dakshata"),
  ("dakshayani"),
  ("dakshina"),
  ("dalene"),
  ("dalia"),
  ("daliah"),
  ("dalida"),
  ("dalila"),
  ("dalis"),
  ("daliunda"),
  ("daliyah"),
  ("dallas"),
  ("dallis"),
  ("daloris"),
  ("dama"),
  ("damara"),
  ("damayanti"),
  ("damia"),
  ("damiana"),
  ("damiane"),
  ("damini"),
  ("damita"),
  ("dana"),
  ("danae"),
  ("daneen"),
  ("danele"),
  ("danelle"),
  ("danette"),
  ("dania"),
  ("danica"),
  ("daniela"),
  ("daniell"),
  ("daniella"),
  ("danika"),
  ("danille"),
  ("danilova"),
  ("danit"),
  ("danita"),
  ("danna"),
  ("dannette"),
  ("dannielle"),
  ("danuta"),
  ("dany"),
  ("danyel"),
  ("danyell"),
  ("danyelle"),
  ("daphine"),
  ("daphna"),
  ("daphnah"),
  ("daphne"),
  ("daracha"),
  ("darah"),
  ("darcelle"),
  ("darcey"),
  ("darchelle"),
  ("darci"),
  ("darcia"),
  ("darcie"),
  ("dareen"),
  ("darerca"),
  ("daria"),
  ("dariana"),
  ("darice"),
  ("darika"),
  ("darina"),
  ("darissa"),
  ("daritsa"),
  ("darja"),
  ("darla"),
  ("darleen"),
  ("darlena"),
  ("darlene"),
  ("darline"),
  ("daromila"),
  ("darpana"),
  ("darra"),
  ("darrah"),
  ("darshana"),
  ("darshwana"),
  ("daru"),
  ("darya"),
  ("dasha"),
  ("dashawna"),
  ("dashay"),
  ("dasia"),
  ("datja"),
  ("dava"),
  ("daveney"),
  ("davida"),
  ("davina"),
  ("davinah"),
  ("davine"),
  ("davinia"),
  ("davitah"),
  ("davite"),
  ("davyd"),
  ("davyzha"),
  ("davyzheia"),
  ("dawn"),
  ("dawna"),
  ("dawne"),
  ("da-xia"),
  ("daya"),
  ("dayamayee"),
  ("dayami"),
  ("dayana"),
  ("dayanara"),
  ("dayanita"),
  ("dayita"),
  ("dayla"),
  ("dayle"),
  ("dayna"),
  ("dayo"),
  ("daysi"),
  ("deadra"),
  ("deana"),
  ("deandrea"),
  ("deane"),
  ("deann"),
  ("deanna"),
  ("deanne"),
  ("dearbhail"),
  ("deasia"),
  ("deb"),
  ("debara"),
  ("debbi"),
  ("debbie"),
  ("debbra"),
  ("debby"),
  ("debera"),
  ("debi"),
  ("debora"),
  ("debrah"),
  ("debralee"),
  ("debroah"),
  ("de-celle"),
  ("decla"),
  ("deda"),
  ("dede"),
  ("dedenia"),
  ("dedra"),
  ("dedre"),
  ("deeann"),
  ("deeanna"),
  ("deeba"),
  ("deedee"),
  ("deedra"),
  ("deejay"),
  ("deena"),
  ("deepa"),
  ("deepabali"),
  ("deepali"),
  ("deepamala"),
  ("deepanwita"),
  ("deepaprabha"),
  ("deepashikha"),
  ("deepavali"),
  ("deepika"),
  ("deepta"),
  ("deepti"),
  ("deeptikana"),
  ("deeptimoyee"),
  ("deetta"),
  ("deianira"),
  ("deidra"),
  ("deidre"),
  ("deiene"),
  ("deikun"),
  ("deina"),
  ("deirdra"),
  ("deirdre"),
  ("deisha"),
  ("deja"),
  ("dejah"),
  ("deka"),
  ("dekava"),
  ("dekhova"),
  ("delana"),
  ("delcie"),
  ("delcine"),
  ("delena"),
  ("delfina"),
  ("delia"),
  ("delicia"),
  ("delight"),
  ("delila"),
  ("delilah"),
  ("delinda"),
  ("delisa"),
  ("de-lisha"),
  ("delit"),
  ("della"),
  ("dellar"),
  ("dellie"),
  ("delma"),
  ("delmara"),
  ("delmare"),
  ("delmy"),
  ("delois"),
  ("deloise"),
  ("delora"),
  ("deloras"),
  ("delores"),
  ("deloris"),
  ("delorse"),
  ("delpha"),
  ("delphia"),
  ("delphine"),
  ("delsie"),
  ("delta"),
  ("delu"),
  ("demetra"),
  ("demetria"),
  ("demetrice"),
  ("demi"),
  ("demidova"),
  ("dena"),
  ("denae"),
  ("denali"),
  ("deneen"),
  ("denelle"),
  ("denese"),
  ("denice"),
  ("denicha"),
  ("deniece"),
  ("denine"),
  ("denisa"),
  ("denise"),
  ("denisha"),
  ("denissa"),
  ("denisse"),
  ("denita"),
  ("denna"),
  ("dennise"),
  ("de-nossis"),
  ("denyse"),
  ("deonna"),
  ("dera"),
  ("deretka"),
  ("derforgal"),
  ("derforgala"),
  ("derora"),
  ("derorice"),
  ("derorit"),
  ("derska"),
  ("derval"),
  ("dervilia"),
  ("dervla"),
  ("dervorgilla"),
  ("derwen"),
  ("derzhena"),
  ("derzhka"),
  ("desa"),
  ("desarae"),
  ("desaree"),
  ("desdemona"),
  ("desha"),
  ("deshawna"),
  ("desideria"),
  ("desirae"),
  ("desirat"),
  ("desire"),
  ("desiree"),
  ("despa"),
  ("despina"),
  ("desreta"),
  ("dessa"),
  ("dessie"),
  ("desta"),
  ("destanee"),
  ("destany"),
  ("destina"),
  ("destine"),
  ("destinee"),
  ("destiney"),
  ("destini"),
  ("destinie"),
  ("destiny"),
  ("detana"),
  ("detava"),
  ("detra"),
  ("deva"),
  ("devahuti"),
  ("devaki"),
  ("devamatar"),
  ("devana"),
  ("devaney"),
  ("devangana"),
  ("devanie"),
  ("devanna"),
  ("devany"),
  ("devasree"),
  ("devayani"),
  ("devenny"),
  ("devent"),
  ("devera"),
  ("devi"),
  ("devika"),
  ("devinee"),
  ("devisha"),
  ("devka"),
  ("devnet"),
  ("devochka"),
  ("devochkina"),
  ("devon"),
  ("devona"),
  ("devondra"),
  ("devonna"),
  ("devonne"),
  ("devony"),
  ("devora"),
  ("devorah"),
  ("devoria"),
  ("devorit"),
  ("devra"),
  ("devri"),
  ("devyani"),
  ("devynn"),
  ("de-wanda"),
  ("deyanira"),
  ("dezirae"),
  ("deziree"),
  ("dhanashri"),
  ("dhanishta"),
  ("dhanya"),
  ("dhanyata"),
  ("dhara"),
  ("dharani"),
  ("dharini"),
  ("dharitri"),
  ("dhatri"),
  ("dhriti"),
  ("dhvani"),
  ("dia"),
  ("diahann"),
  ("diahna"),
  ("diamanta"),
  ("diamond"),
  ("dian"),
  ("diana"),
  ("diandra"),
  ("diane"),
  ("diann"),
  ("dianna"),
  ("diannah"),
  ("dianne"),
  ("dianthe"),
  ("diarria"),
  ("dicie"),
  ("dicra"),
  ("didina"),
  ("diedra"),
  ("diedre"),
  ("diega"),
  ("dierdre"),
  ("difyr"),
  ("digna"),
  ("dikana"),
  ("diksha"),
  ("dilber"),
  ("dilshad"),
  ("dilys"),
  ("dimitra"),
  ("dimple"),
  ("dimut"),
  ("dina"),
  ("dinah"),
  ("dinara"),
  ("dinora"),
  ("dinorah"),
  ("dione"),
  ("dionis"),
  ("dionisa"),
  ("dionna"),
  ("dionne"),
  ("dior"),
  ("disa"),
  ("disha"),
  ("dita"),
  ("diti"),
  ("div"),
  ("divina"),
  ("divsha"),
  ("divshah"),
  ("divya"),
  ("dixie"),
  ("diya"),
  ("diza"),
  ("djuana"),
  ("djuna"),
  ("dmitreeva"),
  ("dmitrieva"),
  ("dmitrovna"),
  ("dobegneva"),
  ("dobislava"),
  ("dobka"),
  ("dobra"),
  ("dobrava"),
  ("dobreva"),
  ("dobromila"),
  ("dobroslava"),
  ("dobrowest"),
  ("dobryna"),
  ("docia"),
  ("doda"),
  ("dodie"),
  ("doireann"),
  ("dollie"),
  ("dolly"),
  ("dolores"),
  ("doloris"),
  ("dolorita"),
  ("domaslava"),
  ("domenica"),
  ("dominga"),
  ("dominica"),
  ("dominika"),
  ("domitila"),
  ("domka"),
  ("domna"),
  ("domnika"),
  ("domnikiia"),
  ("domnina"),
  ("domona"),
  ("dona"),
  ("donata"),
  ("donatella"),
  ("dondrea"),
  ("donella"),
  ("donelle"),
  ("donetta"),
  ("donette"),
  ("donielle"),
  ("donisha"),
  ("donita"),
  ("donna"),
  ("donnalee"),
  ("donnalyn"),
  ("donna-marie"),
  ("donnetta"),
  ("donnette"),
  ("donni"),
  ("donoma"),
  ("donya"),
  ("doon"),
  ("dora"),
  ("dorathy"),
  ("dorbeta"),
  ("dorcas"),
  ("dore"),
  ("doreatha"),
  ("doreen"),
  ("dorene"),
  ("doretha"),
  ("dorethea"),
  ("doretta"),
  ("dori"),
  ("doria"),
  ("dorie"),
  ("dorinda"),
  ("dorine"),
  ("doris"),
  ("dorit"),
  ("dorla"),
  ("doroata"),
  ("dorofeia"),
  ("dorotea"),
  ("doroteia"),
  ("doroteya"),
  ("dorotha"),
  ("dorothea"),
  ("dorris"),
  ("dorsey"),
  ("dorte"),
  ("dortha"),
  ("dorthea"),
  ("dorthey"),
  ("dorthy"),
  ("dory"),
  ("doshie"),
  ("dosya"),
  ("dot"),
  ("dottie"),
  ("dotty"),
  ("dounia"),
  ("dovie"),
  ("downeti"),
  ("downett"),
  ("doyel"),
  ("dozene"),
  ("dozhene"),
  ("draginia"),
  ("dragomira"),
  ("dragoslawa"),
  ("dragushla"),
  ("draia"),
  ("draupadi"),
  ("dreama"),
  ("dreena"),
  ("drema"),
  ("drew"),
  ("drga"),
  ("drina"),
  ("drinaduena"),
  ("drisana"),
  ("dristi"),
  ("drosida"),
  ("drucilla"),
  ("drusilla"),
  ("druzhinina"),
  ("drysi"),
  ("duana"),
  ("duayna"),
  ("dubhain"),
  ("dubheasa"),
  ("dubrava"),
  ("dubravka"),
  ("duchess"),
  ("duena"),
  ("dukine"),
  ("dukinea"),
  ("duklida"),
  ("dulari"),
  ("dulce"),
  ("dulcea"),
  ("dulcie"),
  ("dulcina"),
  ("dulcinea"),
  ("dulcinia"),
  ("dung"),
  ("dunya"),
  ("dunyasha"),
  ("durba"),
  ("durga"),
  ("durva"),
  ("duscha"),
  ("dusha"),
  ("dusti"),
  ("dusya"),
  ("duvessa"),
  ("dvora"),
  ("dwan"),
  ("dwana"),
  ("dwipavati"),
  ("dyan"),
  ("dyana"),
  ("dyani"),
  ("dyann"),
  ("dyanna"),
  ("dylis"),
  ("dyllis"),
  ("dymphna"),
  ("dympna"),
  ("dyna"),
  ("dynah"),
  ("eabha"),
  ("eadan"),
  ("ealga"),
  ("earie"),
  ("earlean"),
  ("earleen"),
  ("earlena"),
  ("earlene"),
  ("earlina"),
  ("earline"),
  ("earnestine"),
  ("eartha"),
  ("easter"),
  ("eathel"),
  ("eavan"),
  ("ebba"),
  ("ebere"),
  ("eboni"),
  ("ebonie"),
  ("ebony"),
  ("ebony joyce"),
  ("ebrill"),
  ("ecatarina"),
  ("ecatrinna"),
  ("ecchumati"),
  ("echiko"),
  ("echo"),
  ("eda"),
  ("edan"),
  ("edana"),
  ("edda"),
  ("edeen"),
  ("edelmira"),
  ("edena"),
  ("edenia"),
  ("edie"),
  ("edina"),
  ("edine"),
  ("edita"),
  ("editta"),
  ("edmee"),
  ("edmonia"),
  ("edra"),
  ("edrea"),
  ("edria"),
  ("edris"),
  ("edviga"),
  ("edviva"),
  ("edwina"),
  ("edyta"),
  ("edyth"),
  ("edythe"),
  ("eeva"),
  ("efa"),
  ("efdokia"),
  ("effimia"),
  ("efimia"),
  ("efiopskaia"),
  ("efrasiia"),
  ("efrosenia"),
  ("efrossina"),
  ("eglantina"),
  ("eglantine"),
  ("eheubryd"),
  ("ehtel"),
  ("eibhlhin"),
  ("eiko"),
  ("eila"),
  ("eileen"),
  ("eileene"),
  ("eilena"),
  ("eilene"),
  ("eilinora"),
  ("eilwen"),
  ("eily"),
  ("eir"),
  ("eira"),
  ("eirene"),
  ("eiric"),
  ("eirica"),
  ("eirlys"),
  ("eistir"),
  ("eithna"),
  ("eithne"),
  ("ekaparana"),
  ("ekata"),
  ("ekatarina"),
  ("ekaterina"),
  ("ekatrinna"),
  ("ekavali"),
  ("ekta"),
  ("ektaa"),
  ("ekzuperiia"),
  ("ela"),
  ("elacha"),
  ("eladia"),
  ("elaina"),
  ("elaine"),
  ("elana"),
  ("elane"),
  ("elanor"),
  ("elayna"),
  ("elayne"),
  ("elba"),
  ("elberta"),
  ("elbertina"),
  ("elda"),
  ("eldora"),
  ("eleadora"),
  ("eleanor"),
  ("eleanora"),
  ("eleanore"),
  ("elease"),
  ("eleasha"),
  ("electa"),
  ("electra"),
  ("eleena"),
  ("eleesha"),
  ("elektra"),
  ("elen"),
  ("elena"),
  ("elene"),
  ("eleni"),
  ("elenor"),
  ("elenora"),
  ("elenore"),
  ("elenya"),
  ("eleonor"),
  ("eleonora"),
  ("eleonore"),
  ("eleora"),
  ("elesha"),
  ("eleta"),
  ("elfreda"),
  ("elfrieda"),
  ("elfriede"),
  ("elga"),
  ("elgiva"),
  ("eliaksha"),
  ("eliana"),
  ("eliane"),
  ("elianna"),
  ("elicia"),
  ("elida"),
  ("elidia"),
  ("elienor"),
  ("elikapeka"),
  ("elikonida"),
  ("elin"),
  ("elina"),
  ("eline"),
  ("elinor"),
  ("elinore"),
  ("eliora"),
  ("elisa"),
  ("elisabet"),
  ("elisabeth"),
  ("elisamarie"),
  ("elisava"),
  ("elisavet"),
  ("elisaveta"),
  ("elise"),
  ("elishia"),
  ("elissa"),
  ("elita"),
  ("eliylw"),
  ("eliz"),
  ("eliza"),
  ("elizabet"),
  ("elizabetta"),
  ("elizarova"),
  ("elizaveta"),
  ("elizbeth"),
  ("elizebeth"),
  ("elka"),
  ("elke"),
  ("ellaine"),
  ("ellamae"),
  ("ellan"),
  ("ellar"),
  ("ellayne"),
  ("elle"),
  ("elleen"),
  ("ellen"),
  ("ellena"),
  ("ellesha"),
  ("elli"),
  ("elliana"),
  ("ellice"),
  ("ellina"),
  ("ellinor"),
  ("ellora"),
  ("elly"),
  ("ellyn"),
  ("elma"),
  ("elmira"),
  ("elna"),
  ("elnora"),
  ("elodia"),
  ("elois"),
  ("eloisa"),
  ("eloise"),
  ("eloisee"),
  ("elonka"),
  ("elora"),
  ("elouise"),
  ("els"),
  ("elsa"),
  ("elsbeth"),
  ("else"),
  ("elspeth"),
  ("elsy"),
  ("elta"),
  ("elva"),
  ("elvera"),
  ("elvia"),
  ("elvie"),
  ("elvina"),
  ("elvinia"),
  ("elvira"),
  ("elvita"),
  ("elwanda"),
  ("elwira"),
  ("elwyn"),
  ("elyse"),
  ("elyssa"),
  ("elzbeta"),
  ("elzbieta"),
  ("elzhbeta"),
  ("elzira"),
  ("ema"),
  ("ember"),
  ("emelda"),
  ("emele"),
  ("emelia"),
  ("emelie"),
  ("emelina"),
  ("emeline"),
  ("emely"),
  ("emerald"),
  ("emeraude"),
  ("emerita"),
  ("emesta"),
  ("emi"),
  ("emiko"),
  ("emilee"),
  ("emilia"),
  ("emilie"),
  ("emily"),
  ("emmalee"),
  ("emmaline"),
  ("emmalyn"),
  ("emmanuella"),
  ("emmanuelle"),
  ("emmeline"),
  ("emmer"),
  ("emmie"),
  ("emmuna"),
  ("emmy"),
  ("emogene"),
  ("emunah"),
  ("ena"),
  ("enakshi"),
  ("enat"),
  ("enatennis"),
  ("encarnacion"),
  ("endora"),
  ("enedina"),
  ("eneida"),
  ("eneuawg"),
  ("enfys"),
  ("engracia"),
  ("enid"),
  ("enit"),
  ("ennafa"),
  ("enola"),
  ("enrhydreg"),
  ("enrica"),
  ("enrichetta"),
  ("enriqua"),
  ("enya"),
  ("enye"),
  ("epestemiia"),
  ("epifania"),
  ("epikhariia"),
  ("epistima"),
  ("era"),
  ("erdudvyl"),
  ("erela"),
  ("erelah"),
  ("erendira"),
  ("erendiria"),
  ("eres"),
  ("eretiia"),
  ("erica"),
  ("ericka"),
  ("erika"),
  ("eriko"),
  ("erina"),
  ("erinn"),
  ("erith"),
  ("eritha"),
  ("erlene"),
  ("erlina"),
  ("erlinda"),
  ("erline"),
  ("erma"),
  ("ermelinda"),
  ("erminia"),
  ("ermolina"),
  ("erna"),
  ("ernesta"),
  ("ernestina"),
  ("ernestine"),
  ("erotiida"),
  ("erskina"),
  ("ertugana"),
  ("erykah"),
  ("eryn"),
  ("erzsebet"),
  ("esha"),
  ("eshana"),
  ("eshita"),
  ("esineeva"),
  ("eskama"),
  ("eskame"),
  ("esma"),
  ("esme"),
  ("esmeralda"),
  ("esmeraude"),
  ("esmerelda"),
  ("esperanza"),
  ("essence"),
  ("esta"),
  ("estebana"),
  ("estee"),
  ("estefana"),
  ("estefani"),
  ("estefania"),
  ("estefany"),
  ("estela"),
  ("estelita"),
  ("estella"),
  ("estelle"),
  ("estephanie"),
  ("ester"),
  ("esteva"),
  ("esther"),
  ("estralita"),
  ("estrela"),
  ("estrella"),
  ("estrellita"),
  ("esyilt"),
  ("eszter"),
  ("etain"),
  ("etana"),
  ("etel"),
  ("etenia"),
  ("etha"),
  ("ethelene"),
  ("ethelyn"),
  ("ether"),
  ("ethna"),
  ("ethyl"),
  ("etilka"),
  ("etna"),
  ("etney"),
  ("etsuko"),
  ("etta"),
  ("ettie"),
  ("euafina"),
  ("eudocia"),
  ("eudora"),
  ("eufemia"),
  ("eugena"),
  ("eugenia"),
  ("eugenie"),
  ("euiko"),
  ("eula"),
  ("eulah"),
  ("eulalia"),
  ("eulalie"),
  ("eun"),
  ("euna"),
  ("euphemia"),
  ("euprakseia"),
  ("eupraksiia"),
  ("eura"),
  ("eurneid"),
  ("eurolwvn"),
  ("eusebia"),
  ("eustolia"),
  ("euzebia"),
  ("eva"),
  ("evacska"),
  ("evadine"),
  ("evadne"),
  ("evaline"),
  ("evalisse"),
  ("evalyn"),
  ("evangelia"),
  ("evangelina"),
  ("evangeline"),
  ("evanna"),
  ("evanova"),
  ("eva-yolanda"),
  ("evdokeia"),
  ("evdokia"),
  ("evdokiia"),
  ("evdokiya"),
  ("evdokseia"),
  ("evdoksiia"),
  ("eve"),
  ("eveleen"),
  ("evelia"),
  ("evelien"),
  ("evelin"),
  ("evelina"),
  ("eveline"),
  ("evelyne"),
  ("evelynn"),
  ("evette"),
  ("evfaliia"),
  ("evfrasiia"),
  ("evfroseniia"),
  ("evfrosinya"),
  ("evgenia"),
  ("evgeniia"),
  ("evgeniya"),
  ("evgenya"),
  ("evginia"),
  ("evguenia"),
  ("evia"),
  ("eviana"),
  ("evie"),
  ("evike"),
  ("evina"),
  ("evita"),
  ("evonna"),
  ("evonne"),
  ("evony"),
  ("evpraksi"),
  ("evpraksiia"),
  ("evrosena"),
  ("evseevskaia"),
  ("evsegniia"),
  ("evseveia"),
  ("evseviia"),
  ("evstoliia"),
  ("evtropiia"),
  ("ewa"),
  ("exaltacion"),
  ("exie"),
  ("eyana"),
  ("eyota"),
  ("eyslk"),
  ("ezmeralda"),
  ("ezola"),
  ("fabia"),
  ("fabiana"),
  ("fabienne"),
  ("fabiola"),
  ("fadhila"),
  ("fae"),
  ("faiga"),
  ("faina"),
  ("fainche"),
  ("fairy"),
  ("faith"),
  ("faiza"),
  ("faizah"),
  ("fajah"),
  ("fajyaz"),
  ("fakeeha"),
  ("fala"),
  ("falala"),
  ("faline"),
  ("fallon"),
  ("fallyn"),
  ("falon"),
  ("fanaila"),
  ("fanchon"),
  ("fanchone"),
  ("fanetta"),
  ("fanette"),
  ("fang"),
  ("fang yin"),
  ("fanny"),
  ("fantina"),
  ("fantine"),
  ("fanya"),
  ("faqueza"),
  ("faraah"),
  ("farah"),
  ("fareeda"),
  ("farha"),
  ("farhaana"),
  ("faria"),
  ("farida"),
  ("farrah"),
  ("faseeha"),
  ("fateena"),
  ("fat'hiyaa"),
  ("fatianova"),
  ("fatima"),
  ("fatimah"),
  ("faun"),
  ("fauna"),
  ("faunia"),
  ("fausta"),
  ("faustina"),
  ("faustine"),
  ("faviola"),
  ("favor"),
  ("favsta"),
  ("fawiza"),
  ("fawn"),
  ("fawnia"),
  ("fawqiyya"),
  ("fawzaana"),
  ("fawzia"),
  ("fayanna"),
  ("faye"),
  ("fayette"),
  ("fayina"),
  ("fayme"),
  ("fayola"),
  ("fealty"),
  ("fearchara"),
  ("fearcharia"),
  ("fedelma"),
  ("fedia"),
  ("fedka"),
  ("fedkina"),
  ("fedora"),
  ("fedoritsa"),
  ("fedorka"),
  ("fedorova"),
  ("fedosia"),
  ("fedosiia"),
  ("fedosya"),
  ("fedotia"),
  ("fedotiia"),
  ("feechi"),
  ("feenat"),
  ("feia"),
  ("feiniia"),
  ("fekla"),
  ("feklitsa"),
  ("fela"),
  ("felecia"),
  ("felica"),
  ("felice"),
  ("felicia"),
  ("felicidad"),
  ("felicienne"),
  ("felicita"),
  ("felicitas"),
  ("felicity"),
  ("felicity katelynn"),
  ("felipa"),
  ("felisa"),
  ("felisha"),
  ("felka"),
  ("femke"),
  ("fen"),
  ("fenella"),
  ("feng"),
  ("fenia"),
  ("feodora"),
  ("feodosia"),
  ("feodosiia"),
  ("feoduliia"),
  ("feofana"),
  ("feoklita"),
  ("feoktista"),
  ("feona"),
  ("feonilla"),
  ("feopimta"),
  ("feopista"),
  ("feopistiia"),
  ("feozva"),
  ("ferfufiia"),
  ("fermina"),
  ("fern"),
  ("fernanda"),
  ("fernande"),
  ("ferne"),
  ("ferufa"),
  ("fesalonikiia"),
  ("fetenia"),
  ("fetinia"),
  ("fetiniia"),
  ("fevronia"),
  ("ffanci"),
  ("ffraid"),
  ("fia"),
  ("fiachina"),
  ("fiachra"),
  ("fiammetta"),
  ("fianait"),
  ("fidda"),
  ("fidela"),
  ("fidelia"),
  ("fidelina"),
  ("fidelma"),
  ("fifi"),
  ("fifine"),
  ("fifna"),
  ("fifne"),
  ("fikra"),
  ("fikriyya"),
  ("filicia"),
  ("filikitata"),
  ("filipa"),
  ("filipina"),
  ("filippa"),
  ("filippiia"),
  ("filitsata"),
  ("filofei"),
  ("filofinaia"),
  ("filomena"),
  ("filonilla"),
  ("fimochka"),
  ("fina"),
  ("fineena"),
  ("finella"),
  ("finna"),
  ("finnea"),
  ("finola"),
  ("fiona"),
  ("fionna"),
  ("fionnghuala"),
  ("fionnuala"),
  ("fiorella"),
  ("fiorenza"),
  ("firoza"),
  ("firtha"),
  ("fiva"),
  ("fiveia"),
  ("flaca"),
  ("flanna"),
  ("flannery"),
  ("flavia"),
  ("fleta"),
  ("fleur"),
  ("fleurette"),
  ("flo"),
  ("flor"),
  ("flora"),
  ("floramaria"),
  ("florance"),
  ("florencia"),
  ("florene"),
  ("florentina"),
  ("florenza"),
  ("floressa"),
  ("floretta"),
  ("flori"),
  ("floria"),
  ("floriana"),
  ("florida"),
  ("florie"),
  ("florinda"),
  ("florine"),
  ("florinia"),
  ("florita"),
  ("florrie"),
  ("flossie"),
  ("floy"),
  ("foimina"),
  ("fokina"),
  ("fomina"),
  ("fonda"),
  ("fontanne"),
  ("foolan"),
  ("foolwati"),
  ("forba"),
  ("forbia"),
  ("fortuna"),
  ("fotina"),
  ("fotiniia"),
  ("fovro"),
  ("fovroneia"),
  ("fran"),
  ("france"),
  ("francelle"),
  ("francena"),
  ("francene"),
  ("francesca"),
  ("franchesca"),
  ("francie"),
  ("francille"),
  ("francina"),
  ("francine"),
  ("francisca"),
  ("franciszka"),
  ("francoise"),
  ("fransisca"),
  ("freda"),
  ("fredda"),
  ("frederica"),
  ("fredericka"),
  ("fredia"),
  ("fredricka"),
  ("fredrika"),
  ("freeda"),
  ("freida"),
  ("freira"),
  ("freja"),
  ("frescura"),
  ("freya"),
  ("frida"),
  ("frieda"),
  ("frolova"),
  ("frona"),
  ("fronie"),
  ("frosiniia"),
  ("fruma"),
  ("fuaada"),
  ("fujiko"),
  ("fulki"),
  ("fullara"),
  ("fulvia"),
  ("fumi"),
  ("fumie"),
  ("fumiki"),
  ("fumiko"),
  ("fusae"),
  ("fuyuko"),
  ("fyfa"),
  ("fynballa"),
  ("gabby"),
  ("gabriela"),
  ("gabriella"),
  ("gabrielle"),
  ("gaby"),
  ("gadina"),
  ("gaenor"),
  ("gaerwen"),
  ("gaetana"),
  ("gaetane"),
  ("gafna"),
  ("gaho"),
  ("gaianiia"),
  ("gaille"),
  ("gaira"),
  ("gaitha"),
  ("gajagamini"),
  ("gala"),
  ("galatee"),
  ("galena"),
  ("galenia"),
  ("galenka"),
  ("galia"),
  ("galiana"),
  ("galice"),
  ("galila"),
  ("galilah"),
  ("galilahi"),
  ("galilea"),
  ("galina"),
  ("galine"),
  ("galit"),
  ("galla"),
  ("gallia"),
  ("galochka"),
  ("galya"),
  ("galyna"),
  ("gamana"),
  ("gambhiri"),
  ("gana"),
  ("gananiia"),
  ("gandaza"),
  ("gandhali"),
  ("gandhari"),
  ("ganesa"),
  ("ganet"),
  ("ganga"),
  ("gangika"),
  ("gangotri"),
  ("ganice"),
  ("ganna"),
  ("gara"),
  ("garabina"),
  ("garabine"),
  ("garaitz"),
  ("garati"),
  ("garbina"),
  ("garbine"),
  ("gardenia"),
  ("gargi"),
  ("garia"),
  ("garima"),
  ("garudagarudi"),
  ("gasha"),
  ("gaspara"),
  ("gatha"),
  ("gatita"),
  ("gauhar"),
  ("gaura"),
  ("gauri"),
  ("gaurika"),
  ("gautami"),
  ("gavenia"),
  ("gavina"),
  ("gavra"),
  ("gavriella"),
  ("gavrila"),
  ("gavrilla"),
  ("gay"),
  ("gayatri"),
  ("gaye"),
  ("gayla"),
  ("gaylene"),
  ("gaynell"),
  ("gaynelle"),
  ("gayora"),
  ("gazala"),
  ("gazit"),
  ("gearldine"),
  ("geavonna"),
  ("gechina"),
  ("geela"),
  ("geena"),
  ("geeta"),
  ("geeti"),
  ("geetika"),
  ("gefen"),
  ("gelasia"),
  ("gelilah"),
  ("gelisa"),
  ("gella"),
  ("gema"),
  ("gemma"),
  ("gemmei"),
  ("gen"),
  ("gena"),
  ("generosa"),
  ("genesis"),
  ("genessa"),
  ("geneva"),
  ("genevalisse"),
  ("geneve"),
  ("genevie"),
  ("genevieve"),
  ("genevive"),
  ("genevra"),
  ("genevre"),
  ("genia"),
  ("genie"),
  ("genisa"),
  ("genisia"),
  ("genivee"),
  ("genka"),
  ("genna"),
  ("gennie"),
  ("genny"),
  ("genoveva"),
  ("geona"),
  ("geonna"),
  ("georgann"),
  ("georgeann"),
  ("georgeanna"),
  ("georgene"),
  ("georgetta"),
  ("georgette"),
  ("georgia"),
  ("georgiana"),
  ("georgiann"),
  ("georgianna"),
  ("georgianne"),
  ("georgieva"),
  ("georgina"),
  ("georgine"),
  ("georgitte"),
  ("geovana"),
  ("geraldene"),
  ("geraldine"),
  ("geralyn"),
  ("gerd"),
  ("gerda"),
  ("geri"),
  ("germaine"),
  ("germana"),
  ("gerree"),
  ("gerri"),
  ("gertha"),
  ("gertie"),
  ("gertrud"),
  ("gertruda"),
  ("gertrudes"),
  ("gertrudis"),
  ("gertude"),
  ("geva"),
  ("gezana"),
  ("ghaada"),
  ("ghaaliba"),
  ("ghaaliya"),
  ("ghaaziya"),
  ("ghaidaa"),
  ("ghalyela"),
  ("ghazaala"),
  ("ghislaine"),
  ("ghita"),
  ("ghuzaila"),
  ("gia"),
  ("giada"),
  ("giana"),
  ("gianara"),
  ("gianina"),
  ("gianna"),
  ("giannina"),
  ("gidget"),
  ("gigi"),
  ("gila"),
  ("gilah"),
  ("gilal"),
  ("gilala"),
  ("gilana"),
  ("gilbarta"),
  ("gilberte"),
  ("gilda"),
  ("gilia"),
  ("gilit"),
  ("gillian"),
  ("gilma"),
  ("gin"),
  ("gina"),
  ("ginata"),
  ("ginechka"),
  ("ginette"),
  ("ginevra"),
  ("ginger"),
  ("ginko"),
  ("ginny"),
  ("giolla"),
  ("giordana"),
  ("giovana"),
  ("giovanna"),
  ("girija"),
  ("gisa"),
  ("gisela"),
  ("gisele"),
  ("gisella"),
  ("giselle"),
  ("gisselle"),
  ("gita"),
  ("gitanjali"),
  ("gitika"),
  ("gittel"),
  ("giuditta"),
  ("giulia"),
  ("giuliana"),
  ("giurgevaia"),
  ("giuseppina"),
  ("giynna"),
  ("giza"),
  ("gizela"),
  ("gizheurann"),
  ("gizla"),
  ("gjertrud"),
  ("gladis"),
  ("glady"),
  ("glafira"),
  ("glain favorites"),
  ("glan"),
  ("glasha"),
  ("glaw"),
  ("glayds"),
  ("glebovicha"),
  ("gleda"),
  ("glenda"),
  ("glendora"),
  ("glenna"),
  ("glennie"),
  ("glennis"),
  ("glenys"),
  ("glikeriia"),
  ("glikeriya"),
  ("glinda"),
  ("gliona"),
  ("gloria"),
  ("glory"),
  ("glukeriia"),
  ("glukheria"),
  ("glyn"),
  ("glynae"),
  ("glynda"),
  ("glynis"),
  ("glynnis"),
  ("gnishilda"),
  ("gobinet"),
  ("gobnait"),
  ("gobnat"),
  ("godava"),
  ("godavari"),
  ("goewin"),
  ("golda"),
  ("goldia"),
  ("goldie"),
  ("goleuddydd"),
  ("golindukha"),
  ("goltiaeva"),
  ("golubitsa"),
  ("gomati"),
  ("gool"),
  ("gopa"),
  ("gopi"),
  ("gopika"),
  ("gorasgwrn"),
  ("gorawen"),
  ("gordana"),
  ("gordania"),
  ("gordislava"),
  ("gorislava"),
  ("gormghlaith"),
  ("gormley"),
  ("gormly"),
  ("gorochana"),
  ("gorshedna"),
  ("gostena"),
  ("gostenia"),
  ("gostiata"),
  ("gostimira"),
  ("gota"),
  ("gotilda"),
  ("goulislava"),
  ("govdela"),
  ("govindi"),
  ("gracelyn"),
  ("gracie"),
  ("graciela"),
  ("gracilyn"),
  ("graina"),
  ("grainne"),
  ("gratia"),
  ("gratiana"),
  ("gravriia"),
  ("grayce"),
  ("grazia"),
  ("grazina"),
  ("grazinia"),
  ("grazyna"),
  ("grear"),
  ("grecia"),
  ("greer"),
  ("grekina"),
  ("grekinia"),
  ("grekyna"),
  ("greta"),
  ("gretchen"),
  ("gretchen l"),
  ("gretta"),
  ("gricelda"),
  ("grietjegriseldis"),
  ("grifina"),
  ("grigoreva"),
  ("grigorevna"),
  ("grigorieva"),
  ("grisel"),
  ("griselda"),
  ("grishilde"),
  ("grizel"),
  ("grizela"),
  ("grizelda"),
  ("groza"),
  ("gruba"),
  ("grunya"),
  ("grusha"),
  ("grushilda"),
  ("guanina"),
  ("gubnat"),
  ("gudrun"),
  ("guenevere"),
  ("guiditta"),
  ("guillermina"),
  ("guinevere"),
  ("guiseppina"),
  ("guliana"),
  ("gulielma"),
  ("gunilla"),
  ("gunjana"),
  ("gunjita"),
  ("gunna"),
  ("gunnhild"),
  ("gunwanti"),
  ("gurice"),
  ("gurit"),
  ("gurjari"),
  ("gusta"),
  ("gutka"),
  ("gwaeddan"),
  ("gwanwyn"),
  ("gwen"),
  ("gwenabwy"),
  ("gwenda"),
  ("gwendi"),
  ("gwendolen"),
  ("gwendoline"),
  ("gwendolyn"),
  ("gwener"),
  ("gweneth"),
  ("gwenhwyvar"),
  ("gwenifer"),
  ("gwenledyr"),
  ("gwenllian"),
  ("gwenn"),
  ("gwenna"),
  ("gwennalarch"),
  ("gwennan"),
  ("gwenyth"),
  ("gwladys"),
  ("gwylan"),
  ("gwyndolen"),
  ("gwyndolyn"),
  ("gwynedd"),
  ("gwyn es"),
  ("gwyneth"),
  ("gwynne"),
  ("gyanada"),
  ("haafiza"),
  ("haajara"),
  ("haakima"),
  ("haala"),
  ("haamida"),
  ("haaniya"),
  ("haaritha"),
  ("haazima"),
  ("habeeba"),
  ("habiba"),
  ("habika"),
  ("hachi"),
  ("hada"),
  ("hadara"),
  ("hadarah"),
  ("hadassah"),
  ("hadbaaa"),
  ("hadeel"),
  ("hadiya"),
  ("hadiyya"),
  ("hadley"),
  ("hae"),
  ("hafiza"),
  ("hafsa"),
  ("hafwen"),
  ("haiba"),
  ("haibaa"),
  ("haifaaa"),
  ("hailee"),
  ("hailey"),
  ("hailie"),
  ("haimati"),
  ("haimavati"),
  ("hakeema"),
  ("haldis"),
  ("haleema"),
  ("haleigh"),
  ("halette"),
  ("halia"),
  ("halie"),
  ("halima"),
  ("halina"),
  ("halle"),
  ("halley"),
  ("halona"),
  ("halyna"),
  ("hama"),
  ("hamaama"),
  ("hamda"),
  ("hamdoona"),
  ("hameeda"),
  ("hamna"),
  ("hamsa"),
  ("han"),
  ("hana"),
  ("hanaaa"),
  ("hanaan"),
  ("hanae"),
  ("hanako"),
  ("hang"),
  ("hanh"),
  ("haniko"),
  ("hanima"),
  ("hanita"),
  ("haniyya"),
  ("hanna"),
  ("hannah"),
  ("hannalee"),
  ("hanne"),
  ("hannela"),
  ("hannele"),
  ("hannelore"),
  ("hanoona"),
  ("hanrietta"),
  ("hanriette"),
  ("hansa"),
  ("hansika"),
  ("hansini"),
  ("hanzila"),
  ("hara"),
  ("harathi"),
  ("harimanti"),
  ("harinakshi"),
  ("harini"),
  ("harita"),
  ("hariti"),
  ("harmony"),
  ("harriet"),
  ("harriett"),
  ("harrietta"),
  ("harriette"),
  ("harshada"),
  ("harshini"),
  ("harukichi"),
  ("harumi"),
  ("hasana"),
  ("haseena"),
  ("hasina"),
  ("hasita"),
  ("hasnaa"),
  ("hassie"),
  ("hasumati"),
  ("hateya"),
  ("hatsue"),
  ("hatsuyo"),
  ("hattie"),
  ("haukea"),
  ("hausis"),
  ("hausisse"),
  ("hava"),
  ("haven"),
  ("hawraa"),
  ("haya"),
  ("haydee"),
  ("haylee"),
  ("hayleigh"),
  ("hayley"),
  ("haylie"),
  ("hazeela"),
  ("hazle"),
  ("hea"),
  ("heaven"),
  ("heba"),
  ("hedda"),
  ("hedia"),
  ("hedva"),
  ("hedvige"),
  ("hedwig"),
  ("hedwighelena"),
  ("hedy"),
  ("hedya"),
  ("hee"),
  ("heera"),
  ("hege"),
  ("hehewuti"),
  ("hei"),
  ("heide"),
  ("heidi"),
  ("heidy"),
  ("heike"),
  ("helaine"),
  ("helena"),
  ("helene"),
  ("helenka"),
  ("helga"),
  ("hellen"),
  ("heloise"),
  ("helsa"),
  ("hema"),
  ("hemangi"),
  ("hemangini"),
  ("hemanti"),
  ("hemavati"),
  ("hemlata"),
  ("hena"),
  ("hendrika"),
  ("heniuta"),
  ("henka"),
  ("henley"),
  ("hennessy"),
  ("henretta"),
  ("henrietta"),
  ("henriette"),
  ("henrika"),
  ("hephzibah"),
  ("hepsiba"),
  ("hepzibeth"),
  ("hera"),
  ("heriberto"),
  ("herlinda"),
  ("herma"),
  ("hermelinda"),
  ("hermila"),
  ("hermina"),
  ("hermine"),
  ("herminia"),
  ("herta"),
  ("hertha"),
  ("hessie"),
  ("hetal"),
  ("hettie"),
  ("heulwens"),
  ("hiba"),
  ("hide"),
  ("hideko"),
  ("hiedi"),
  ("hien"),
  ("hija"),
  ("hikaru"),
  ("hikma"),
  ("hila"),
  ("hilaire"),
  ("hilaria"),
  ("hilda"),
  ("hilde"),
  ("hildegard"),
  ("hildegarde"),
  ("hildred"),
  ("hildur"),
  ("hillary"),
  ("hilma"),
  ("hilmiyya"),
  ("hima"),
  ("himagouri"),
  ("himani"),
  ("himma"),
  ("hina"),
  ("hinda"),
  ("hindola"),
  ("hinezka"),
  ("hinica"),
  ("hiolair"),
  ("hiral"),
  ("hiranmayi"),
  ("hirkani"),
  ("hiroe"),
  ("hiroko"),
  ("hiromi"),
  ("hisa"),
  ("hisae"),
  ("hisako"),
  ("hisano"),
  ("hishma"),
  ("hisolda"),
  ("hissa"),
  ("hita"),
  ("hitomi"),
  ("hitomo"),
  ("hitoshi"),
  ("hiwaaya"),
  ("hiya"),
  ("hoa"),
  ("hodawa"),
  ("holda"),
  ("holley"),
  ("holli"),
  ("holly"),
  ("honami"),
  ("honey"),
  ("honna"),
  ("honora"),
  ("honore"),
  ("hoor"),
  ("hope"),
  ("hora"),
  ("horina"),
  ("hortense"),
  ("hortensia"),
  ("hortenspa"),
  ("hosanna"),
  ("hosche"),
  ("hoshi"),
  ("hoshie"),
  ("hoshiko"),
  ("hoshiyo"),
  ("hostena"),
  ("hruoza"),
  ("hsiu"),
  ("huan yue"),
  ("huda"),
  ("hue"),
  ("huette"),
  ("hugette"),
  ("huguetta"),
  ("hui"),
  ("hui ying"),
  ("hujja"),
  ("hulda"),
  ("huldah"),
  ("humaina"),
  ("humaira"),
  ("humita"),
  ("huong"),
  ("hurit"),
  ("husna"),
  ("husniyya"),
  ("huwaida"),
  ("hwa"),
  ("hyacinth"),
  ("hyancinthe"),
  ("hye"),
  ("hyo"),
  ("hyon"),
  ("hypatia"),
  ("hyun"),
  ("iadviga"),
  ("iakova"),
  ("iakovleva"),
  ("iakovlevskaia"),
  ("iakun"),
  ("iakunova"),
  ("iakunovaia"),
  ("ianevaia"),
  ("ianisha"),
  ("ianishe"),
  ("ianka"),
  ("ianthe"),
  ("iarche"),
  ("iarena"),
  ("iarina"),
  ("iarogned"),
  ("iaroia"),
  ("iarokhna"),
  ("iaroslava"),
  ("iarshek"),
  ("iasynia"),
  ("ibernia"),
  ("ibtisaama"),
  ("ichi"),
  ("icie"),
  ("icy"),
  ("idalia"),
  ("idalyz"),
  ("ide"),
  ("ideh"),
  ("idell"),
  ("idella"),
  ("idola"),
  ("idonia"),
  ("idra"),
  ("iekika"),
  ("ieliaia"),
  ("ierne"),
  ("iesha"),
  ("ieshia"),
  ("iev"),
  ("ievlia"),
  ("iffat"),
  ("ifrosenia"),
  ("ignateva"),
  ("ignatevskaia"),
  ("igoshkova"),
  ("iha"),
  ("ihina"),
  ("iia"),
  ("ikaia"),
  ("ikia"),
  ("iku"),
  ("ikue"),
  ("ikuko"),
  ("ila"),
  ("ilah"),
  ("ilana"),
  ("ilane"),
  ("ilanit"),
  ("ilariia"),
  ("ilda"),
  ("ileana"),
  ("ileen"),
  ("ilene"),
  ("ilhaam"),
  ("ilia"),
  ("ilida"),
  ("ilina"),
  ("illa"),
  ("illishaimelda"),
  ("ilona"),
  ("ilori"),
  ("ilse"),
  ("iluminada"),
  ("ilyssa"),
  ("ima"),
  ("imala"),
  ("iman"),
  ("imani"),
  ("imelda"),
  ("imena"),
  ("imke"),
  ("immaculada"),
  ("imogen"),
  ("imogene"),
  ("imtinaan"),
  ("ina"),
  ("inaaya"),
  ("inari"),
  ("inayat"),
  ("indeg"),
  ("indi"),
  ("india"),
  ("indira"),
  ("indrakshi"),
  ("indrani"),
  ("indrasena"),
  ("indrayani"),
  ("indu"),
  ("induja"),
  ("indukala"),
  ("indulala"),
  ("induleksh"),
  ("induma"),
  ("indumati"),
  ("indumukhi"),
  ("inell"),
  ("ines"),
  ("inesinez"),
  ("inessa"),
  ("inez"),
  ("inga"),
  ("ingalill"),
  ("inge"),
  ("ingeborg"),
  ("ingegard"),
  ("inger"),
  ("inghean"),
  ("inghinn"),
  ("ingri"),
  ("ingrid"),
  ("ingvil"),
  ("ingvild"),
  ("ingvill"),
  ("iniga"),
  ("iniko"),
  ("inkena"),
  ("inna"),
  ("inocencia"),
  ("inoceneia"),
  ("inocenta"),
  ("inoke"),
  ("inoue"),
  ("insaaf"),
  ("intisaar"),
  ("ioanna"),
  ("iokina"),
  ("iola"),
  ("iolana"),
  ("iolani"),
  ("iona"),
  ("ionanna"),
  ("ione"),
  ("iorwen"),
  ("iosifova"),
  ("iovilla"),
  ("ipo"),
  ("ipsa"),
  ("ipsita"),
  ("iraida"),
  ("irati"),
  ("iratze"),
  ("iravati"),
  ("ireland"),
  ("irena"),
  ("iria"),
  ("iridian"),
  ("irina"),
  ("irinia"),
  ("irinka"),
  ("iris"),
  ("irisa"),
  ("irish"),
  ("irma"),
  ("irmgard"),
  ("irodia"),
  ("irodiia"),
  ("irune"),
  ("irus"),
  ("isa"),
  ("isabeau"),
  ("isabel"),
  ("isabela"),
  ("isabell"),
  ("isabella"),
  ("isabelle"),
  ("isabis"),
  ("isadora"),
  ("isadorer"),
  ("isako"),
  ("isakova"),
  ("isamar"),
  ("isaura"),
  ("ise"),
  ("iseabal"),
  ("isela"),
  ("ishani"),
  ("ishika"),
  ("ishita"),
  ("ishwari"),
  ("isi"),
  ("isibeal"),
  ("isidora"),
  ("isidra"),
  ("isis"),
  ("isla"),
  ("isleen"),
  ("islene"),
  ("ismaela"),
  ("ismagrad"),
  ("isobel"),
  ("isoke"),
  ("isolda"),
  ("isolde"),
  ("israa"),
  ("istas"),
  ("ita"),
  ("italia"),
  ("itka"),
  ("itsaso"),
  ("itsuko"),
  ("ituha"),
  ("itxaro"),
  ("itzel"),
  ("itzel kira"),
  ("iudita"),
  ("iuliana"),
  ("iuliania"),
  ("iulianiia"),
  ("iuliia"),
  ("iulita"),
  ("iulitta"),
  ("iuniia"),
  ("iurevna"),
  ("iustina"),
  ("iva"),
  ("ivana"),
  ("ivane"),
  ("ivanna"),
  ("ivanova"),
  ("ivanovskaia"),
  ("ivelisse"),
  ("iveska"),
  ("ivette"),
  ("ivey"),
  ("ivonne"),
  ("ivria"),
  ("iwalani"),
  ("iwona"),
  ("iyana"),
  ("iyanna"),
  ("izabella"),
  ("izabelle"),
  ("izar"),
  ("izarra"),
  ("izarre"),
  ("izazkun"),
  ("izett"),
  ("izetta"),
  ("iziaslava"),
  ("izmaragd"),
  ("izola"),
  ("izora"),
  ("izso"),
  ("izumi"),
  ("izusa"),
  ("izza"),
  ("jaantje"),
  ("jabeen"),
  ("ja'breic"),
  ("jacalyn"),
  ("jacelyn"),
  ("jacey"),
  ("ja-cheyla"),
  ("jacinda"),
  ("jacinta"),
  ("jacinthe"),
  ("jack-ee"),
  ("jackeline"),
  ("jackelyn"),
  ("jacki"),
  ("jacklyn"),
  ("jackqueline"),
  ("jaclyn"),
  ("jacoba"),
  ("jacqualine"),
  ("jacque"),
  ("jacqueline"),
  ("jacquelyn"),
  ("jacquelyne"),
  ("jacquelynn"),
  ("jacquelynne"),
  ("jacquenetta"),
  ("jacquenette"),
  ("jacquetta"),
  ("jacqui"),
  ("jacquie"),
  ("jacquiline"),
  ("jacquline"),
  ("jacqulyn"),
  ("jada"),
  ("jadeeda"),
  ("jadwiga"),
  ("jadzia"),
  ("jaeda"),
  ("jaelyn"),
  ("jaelynn"),
  ("jaen"),
  ("jaffa"),
  ("jafit"),
  ("jafita"),
  ("jagadamba"),
  ("jaganmata"),
  ("jagriti"),
  ("jahanara"),
  ("jaheel"),
  ("jahia"),
  ("jahnavi"),
  ("jaida"),
  ("jailah"),
  ("jailene"),
  ("jailyn"),
  ("jai'lysa"),
  ("jaime"),
  ("jaimee"),
  ("jaimelynn"),
  ("jaimi"),
  ("jaimie"),
  ("jaina"),
  ("jaine"),
  ("jaione"),
  ("jaishree"),
  ("jaisudha"),
  ("jaisyn"),
  ("jai-vonna"),
  ("jaiwanti"),
  ("jajuan"),
  ("jakayla"),
  ("jakinda"),
  ("jakoba"),
  ("jakobah"),
  ("jalabala"),
  ("jaladhija"),
  ("jalaja"),
  ("jaleasa"),
  ("jaleela"),
  ("jaleesa"),
  ("jalicia"),
  ("jalisa"),
  ("ja-lisa"),
  ("jalissa"),
  ("jaliyah"),
  ("jalyn"),
  ("jalynn"),
  ("jama"),
  ("jamee"),
  ("jameela"),
  ("jamelia"),
  ("jamey"),
  ("jami"),
  ("jamia"),
  ("jamie"),
  ("jamielee"),
  ("jamika"),
  ("jamila"),
  ("jamilyn"),
  ("jamini"),
  ("jamison"),
  ("jamiya"),
  ("jamna"),
  ("jamuna"),
  ("jamya"),
  ("jana"),
  ("janae"),
  ("janaki"),
  ("janalee"),
  ("janalyn"),
  ("janani"),
  ("janay"),
  ("janceena"),
  ("jane"),
  ("janean"),
  ("janecska"),
  ("janee"),
  ("janeen"),
  ("janeka"),
  ("janel"),
  ("janell"),
  ("janella"),
  ("janelle"),
  ("janene"),
  ("janessa"),
  ("janet"),
  ("janeth"),
  ("janett"),
  ("janetta"),
  ("janette"),
  ("janey"),
  ("janhavi"),
  ("jania"),
  ("janiah"),
  ("janica"),
  ("janice"),
  ("janiece"),
  ("janina"),
  ("janine"),
  ("janis"),
  ("janisa"),
  ("janise"),
  ("janita"),
  ("janiya"),
  ("janiyah"),
  ("janka"),
  ("jann"),
  ("janna"),
  ("jannah"),
  ("jannalee"),
  ("jannat"),
  ("janne"),
  ("jannet"),
  ("janneth"),
  ("jannette"),
  ("jannie"),
  ("janny"),
  ("jans"),
  ("jansje"),
  ("january"),
  ("janyce"),
  ("ja'quaelah"),
  ("jaquelin"),
  ("jaquelina"),
  ("jaqueline"),
  ("jaquelyn"),
  ("jaquenette"),
  ("jaquetta"),
  ("jardena"),
  ("jarena"),
  ("jarene"),
  ("jarita"),
  ("jarohna"),
  ("jarrika"),
  ("jarvia"),
  ("jasia"),
  ("jaslene"),
  ("jaslyn"),
  ("jasmeen"),
  ("jasmeka"),
  ("jasmyn"),
  ("jasmyne"),
  ("jasoda"),
  ("jasodhara"),
  ("jasone"),
  ("jasra"),
  ("jatara"),
  ("jataria"),
  ("jatoria"),
  ("jaunita"),
  ("javier"),
  ("javiera"),
  ("javina"),
  ("jawhara"),
  ("jaya"),
  ("jayalakshmi"),
  ("jayalalita"),
  ("jayamala"),
  ("jayani"),
  ("jayanti"),
  ("jayantika"),
  ("jayaprada"),
  ("jayashree"),
  ("jayashri"),
  ("jayati"),
  ("jaycee"),
  ("jaycie"),
  ("jayda"),
  ("jayde"),
  ("jayita"),
  ("jayla"),
  ("jaylah"),
  ("jaylee"),
  ("jayleen"),
  ("jaylene"),
  ("jaylyn"),
  ("jaylynn"),
  ("jaymee"),
  ("jaymie"),
  ("jayna"),
  ("jayne"),
  ("jaynie"),
  ("jazlene"),
  ("jazlyn"),
  ("jazlynn"),
  ("jazmin"),
  ("jazmine"),
  ("jazmyn"),
  ("jazmyne"),
  ("jazzmine"),
  ("jazzmyn"),
  ("jean"),
  ("jeana"),
  ("jeane"),
  ("jeanee"),
  ("jeanelle"),
  ("jeanene"),
  ("jeanett"),
  ("jeanetta"),
  ("jeanette"),
  ("jeanice"),
  ("jeanie"),
  ("jeanina"),
  ("jeanine"),
  ("jeanmarie"),
  ("jeanna"),
  ("jeanne"),
  ("jeannetta"),
  ("jeannette"),
  ("jeannie"),
  ("jeannine"),
  ("jeelaan"),
  ("jeena"),
  ("jeeval"),
  ("jeevana"),
  ("jeevankala"),
  ("jeevanlata"),
  ("jeevika"),
  ("jeffie"),
  ("jehane"),
  ("jekaterina"),
  ("jelan"),
  ("jelena"),
  ("jelizaveta"),
  ("jemima"),
  ("jemimah"),
  ("jemina"),
  ("jen"),
  ("jena"),
  ("jenae"),
  ("jendayi"),
  ("jene"),
  ("jenee"),
  ("jenelle"),
  ("jenette"),
  ("jeneva"),
  ("jeni"),
  ("jenica"),
  ("jenice"),
  ("jenifer"),
  ("jeniffer"),
  ("jenilee"),
  ("jenina"),
  ("jenine"),
  ("jenis"),
  ("jenise"),
  ("jenna"),
  ("jennefer"),
  ("jennell"),
  ("jennette"),
  ("jenni"),
  ("jennifer"),
  ("jenniffer"),
  ("jennine"),
  ("jenny"),
  ("jensina"),
  ("jensine"),
  ("jeraldine"),
  ("jeremia"),
  ("jeri"),
  ("jerica"),
  ("jerilyn"),
  ("jerlene"),
  ("jerrely"),
  ("jerri"),
  ("jerrica"),
  ("jerrie"),
  ("jerusha"),
  ("jesenia"),
  ("jesica"),
  ("jessamina"),
  ("jessamine"),
  ("jessamyn"),
  ("jessenia"),
  ("jessi"),
  ("jessia"),
  ("jessica"),
  ("jessika"),
  ("jestina"),
  ("jestine"),
  ("jesusa"),
  ("jesusita"),
  ("jetashri"),
  ("jetta"),
  ("jettie"),
  ("jevdokija"),
  ("jezebel"),
  ("jezreel"),
  ("jharna"),
  ("jhilmil"),
  ("jhinuk"),
  ("jia li"),
  ("jiang li"),
  ("jiao"),
  ("jigya"),
  ("jill"),
  ("jillian"),
  ("jimena"),
  ("jina"),
  ("jineen"),
  ("jinelle"),
  ("jing"),
  ("jinny"),
  ("jitka"),
  ("jivanta"),
  ("joakima"),
  ("joana"),
  ("joane"),
  ("joanie"),
  ("joanka"),
  ("joann"),
  ("joanna"),
  ("joanne"),
  ("joannie"),
  ("joaquina"),
  ("joaquine"),
  ("jobina"),
  ("jocelin"),
  ("jocelina"),
  ("joceline"),
  ("jocelyn"),
  ("jocelyne"),
  ("jocelynn"),
  ("jochebed"),
  ("joda"),
  ("jodee"),
  ("jodi"),
  ("joeann"),
  ("joeliyn"),
  ("joell"),
  ("joella"),
  ("joelle"),
  ("joellen"),
  ("joelliana"),
  ("joelliane"),
  ("joetta"),
  ("joette"),
  ("johana"),
  ("johanna"),
  ("johannah"),
  ("johanne"),
  ("johna"),
  ("johnda"),
  ("johnetta"),
  ("johnette"),
  ("johnna"),
  ("johnsie"),
  ("johyna"),
  ("joi"),
  ("joia"),
  ("joie"),
  ("joka"),
  ("joke"),
  ("jokina"),
  ("jokine"),
  ("jola"),
  ("jolanda"),
  ("jolanta"),
  ("jolee"),
  ("joleen"),
  ("joleigh"),
  ("jolene"),
  ("jolette"),
  ("joli"),
  ("jolien"),
  ("joline"),
  ("jolyn"),
  ("jolynn"),
  ("jomayra"),
  ("jona"),
  ("jonati"),
  ("jone"),
  ("jonell"),
  ("jonelle"),
  ("jong"),
  ("joni"),
  ("jonie"),
  ("jonina"),
  ("jonna"),
  ("joo-eun"),
  ("jora"),
  ("jordana"),
  ("jordane"),
  ("jordin"),
  ("jordynn"),
  ("jorja"),
  ("jorun"),
  ("joruri"),
  ("josalyn"),
  ("josalynn"),
  ("joscelyn"),
  ("josebe"),
  ("josee"),
  ("josefa"),
  ("josefina"),
  ("josefine"),
  ("joselin"),
  ("joseline"),
  ("joselyn"),
  ("josepha"),
  ("josephe"),
  ("josephina"),
  ("josette"),
  ("joshita"),
  ("josie"),
  ("josiephine"),
  ("josilyn"),
  ("joslin"),
  ("joslyn"),
  ("josphine"),
  ("jossie"),
  ("josune"),
  ("journey"),
  ("jovana"),
  ("jovanna"),
  ("jovena"),
  ("jovina"),
  ("jovita"),
  ("jowaki"),
  ("joxepa"),
  ("joya"),
  ("joyann"),
  ("joyanne"),
  ("joyce"),
  ("joycelyn"),
  ("joye"),
  ("joyelle"),
  ("joy lydia"),
  ("jozlyn"),
  ("jozsa"),
  ("juana"),
  ("juandalynn"),
  ("juanetta"),
  ("juanisha"),
  ("juanita"),
  ("juci"),
  ("jucika"),
  ("judeana"),
  ("judeena"),
  ("judi"),
  ("judie"),
  ("judit"),
  ("judith"),
  ("juditha"),
  ("judy"),
  ("juhaina"),
  ("juhi"),
  ("jui"),
  ("juily"),
  ("julee"),
  ("juleen"),
  ("julene"),
  ("juli"),
  ("juliana"),
  ("juliane"),
  ("juliann"),
  ("julianna"),
  ("julianne"),
  ("julie"),
  ("julieann"),
  ("julienne"),
  ("juliet"),
  ("julieta"),
  ("julietta"),
  ("juliette"),
  ("julina"),
  ("julisa"),
  ("julissa"),
  ("julita"),
  ("jumaana"),
  ("jumaima"),
  ("jun"),
  ("junie"),
  ("junita"),
  ("junko"),
  ("juri"),
  ("justa"),
  ("justeen"),
  ("justina"),
  ("justyne"),
  ("jutka"),
  ("jutta"),
  ("juwairiya"),
  ("j'vonte'"),
  ("jyoti"),
  ("jyotibala"),
  ("jyotika"),
  ("jyotirmoyee"),
  ("jyotis"),
  ("jyotishmati"),
  ("jyotsna"),
  ("kaandra"),
  ("kaatima"),
  ("kaazima"),
  ("kabeera"),
  ("kabira"),
  ("kace"),
  ("kacey"),
  ("kacha"),
  ("kache"),
  ("kachina"),
  ("kachka"),
  ("kaci"),
  ("kacie"),
  ("kacy"),
  ("kadambari"),
  ("kadambini"),
  ("kadence"),
  ("kadija"),
  ("kadijah"),
  ("kadiri"),
  ("kadisha"),
  ("kadru"),
  ("kady"),
  ("kaede"),
  ("kaela"),
  ("kaelyn"),
  ("kaelynn"),
  ("kafi"),
  ("kagami"),
  ("kahori"),
  ("kaia"),
  ("kaialani"),
  ("kaida"),
  ("kailani"),
  ("kailasa"),
  ("kailee"),
  ("kailey"),
  ("kailyn"),
  ("kainda"),
  ("kaishori"),
  ("kaitlan"),
  ("kaitleen"),
  ("kaitlin"),
  ("kaitlyn"),
  ("kaitlynn"),
  ("kaiya"),
  ("kaiyokameko"),
  ("kaja"),
  ("kajal"),
  ("kajjali"),
  ("kajsa"),
  ("kakali"),
  ("kakalina"),
  ("kakawangwa"),
  ("kala"),
  ("kalama"),
  ("kalanidhi"),
  ("kalanie"),
  ("kalavati"),
  ("kalea"),
  ("kaleen"),
  ("kaleena"),
  ("kalei"),
  ("kaleigh"),
  ("kalena"),
  ("kalene"),
  ("kaleria"),
  ("kaleriia"),
  ("kaley"),
  ("kali"),
  ("kalia"),
  ("kalie"),
  ("kalika"),
  ("kalina"),
  ("kalinda"),
  ("kalindi"),
  ("kalinna"),
  ("kalisa"),
  ("kalise"),
  ("kalisfena"),
  ("kalisha"),
  ("kaliska"),
  ("kalista"),
  ("kalitina"),
  ("kaliyah"),
  ("kalli"),
  ("kallie"),
  ("kallisfeniia"),
  ("kallista"),
  ("kallol"),
  ("kallyn"),
  ("kaloni"),
  ("kalpana"),
  ("kalpita"),
  ("kalyani"),
  ("kalyn"),
  ("kalynda"),
  ("kam"),
  ("kamakshi"),
  ("kamala"),
  ("kamalakshi"),
  ("kamalika"),
  ("kamalini"),
  ("kamalkali"),
  ("kamana"),
  ("kamea"),
  ("kameela"),
  ("kamenka"),
  ("kameo"),
  ("kameron"),
  ("kami"),
  ("kamila"),
  ("kamilah"),
  ("kamilia"),
  ("kamilla"),
  ("kamille"),
  ("kamillra"),
  ("kamini"),
  ("kamle"),
  ("kammi"),
  ("kammie"),
  ("kamna"),
  ("kamora"),
  ("kamya"),
  ("kanaka"),
  ("kanakabati"),
  ("kanaklata"),
  ("kanakpriya"),
  ("kananbala"),
  ("kanchana"),
  ("kanchi"),
  ("kandace"),
  ("kandaza"),
  ("kandi"),
  ("kandice"),
  ("kandis"),
  ("kandra"),
  ("kandy"),
  ("kaneasha"),
  ("kaneko"),
  ("kanesha"),
  ("kani"),
  ("kanika"),
  ("kanisha"),
  ("kanita"),
  ("kankana"),
  ("kanta"),
  ("kantha"),
  ("kanti"),
  ("kanya"),
  ("kaoru"),
  ("kaorukasuga"),
  ("kapetolina"),
  ("kapotakshi"),
  ("kaptelina"),
  ("kara"),
  ("karabi"),
  ("karah"),
  ("kareema"),
  ("kareen"),
  ("karelma"),
  ("karena"),
  ("karey"),
  ("karie"),
  ("karima"),
  ("karin"),
  ("karina"),
  ("karine"),
  ("karinna"),
  ("karis"),
  ("karisa"),
  ("karishma"),
  ("karissa"),
  ("karka"),
  ("karla"),
  ("karlee"),
  ("karleen"),
  ("karlene"),
  ("karley"),
  ("karli"),
  ("karlie"),
  ("karlotta"),
  ("karly"),
  ("karlyn"),
  ("karma"),
  ("karmelita"),
  ("karmen"),
  ("karmia"),
  ("karmina"),
  ("karmit"),
  ("karmiti"),
  ("karol"),
  ("karole"),
  ("karolina"),
  ("karoline"),
  ("karolyn"),
  ("karon"),
  ("karpova"),
  ("karpovskaia"),
  ("karren"),
  ("karri"),
  ("karrie"),
  ("karrine"),
  ("karry"),
  ("karsyn"),
  ("karuna"),
  ("karunamayi"),
  ("kary"),
  ("karyl"),
  ("karyme"),
  ("karyn"),
  ("karyna"),
  ("karysha"),
  ("kasa"),
  ("kasandra"),
  ("ka-sean"),
  ("kasha"),
  ("kashawn"),
  ("kashi"),
  ("kashka"),
  ("kashmira"),
  ("kasi"),
  ("kasia"),
  ("kasie"),
  ("kasienka"),
  ("kasinda"),
  ("kaska"),
  ("kasmira"),
  ("kassandra"),
  ("kassia"),
  ("kassidy"),
  ("kassie"),
  ("kasturi"),
  ("kata"),
  ("katalena"),
  ("katanyna"),
  ("katareena"),
  ("katarina"),
  ("kate"),
  ("kateena"),
  ("katelin"),
  ("katelyn"),
  ("katelyn miah"),
  ("katelynn"),
  ("katerina"),
  ("katerine"),
  ("katerinka"),
  ("kathaleen"),
  ("katharina"),
  ("katharine"),
  ("katharyn"),
  ("kathe"),
  ("katheleen"),
  ("katherin"),
  ("katherina"),
  ("katherine"),
  ("kathern"),
  ("katheryn"),
  ("kathey"),
  ("kathi"),
  ("kathie"),
  ("kathleen"),
  ("kathleena"),
  ("kathlene"),
  ("kathline"),
  ("kathlyn"),
  ("kathlynn"),
  ("kathrin"),
  ("kathrine"),
  ("kathryn"),
  ("kathryne"),
  ("kathy"),
  ("kathyrn"),
  ("kati"),
  ("katiana"),
  ("katie"),
  ("katina"),
  ("katine"),
  ("katinka"),
  ("katiya"),
  ("katja"),
  ("katlin"),
  ("katlina"),
  ("katlyn"),
  ("katlynn"),
  ("katreen"),
  ("katreena"),
  ("katrene"),
  ("katria"),
  ("katriane"),
  ("katrice"),
  ("katriel"),
  ("katrien"),
  ("katrina"),
  ("katrine"),
  ("katrusha"),
  ("katrya"),
  ("katryn"),
  ("katryna"),
  ("katsue"),
  ("katsuko"),
  ("katsumi"),
  ("kattie"),
  ("kattrina"),
  ("kattryna"),
  ("katunia"),
  ("katuscha"),
  ("katy"),
  ("katya"),
  ("katyayani"),
  ("katyenka"),
  ("katyushka"),
  ("katyuska"),
  ("kaumudi"),
  ("kaushalya"),
  ("kaveri"),
  ("kavindra"),
  ("kavita"),
  ("kawena"),
  ("kawkab"),
  ("kawthar"),
  ("kaya"),
  ("kayce"),
  ("kaycee"),
  ("kaydence"),
  ("kaye"),
  ("kayla"),
  ("kaylah"),
  ("kaylan"),
  ("kaylee"),
  ("kayleen"),
  ("kayleigh"),
  ("kaylen"),
  ("kaylene"),
  ("kayley"),
  ("kayli"),
  ("kaylie"),
  ("kaylin"),
  ("kaylyn"),
  ("kaylynn"),
  ("kayoko"),
  ("kazdoia"),
  ("kazia"),
  ("kazue"),
  ("kazuko"),
  ("kazumi"),
  ("k'brianey"),
  ("kea"),
  ("keala"),
  ("keana"),
  ("keandra"),
  ("keanna"),
  ("keara"),
  ("kearney"),
  ("keavy"),
  ("kecia"),
  ("keegsquaw"),
  ("keeley"),
  ("keelyn"),
  ("keena"),
  ("keenat"),
  ("keertana"),
  ("keesha"),
  ("keezheekoni"),
  ("kefira"),
  ("keiana"),
  ("keiki"),
  ("keiko"),
  ("keila"),
  ("keilani"),
  ("keira"),
  ("keisha"),
  ("keitha"),
  ("keiyanai"),
  ("keiyn"),
  ("kekepania"),
  ("kelcie"),
  ("kelcy"),
  ("kelemon"),
  ("keli"),
  ("kelilah"),
  ("kelis"),
  ("kelle"),
  ("kellee"),
  ("kelleigh"),
  ("kellie"),
  ("kellsey"),
  ("kellyanne"),
  ("kellye"),
  ("kellyn"),
  ("kelsea"),
  ("kelsee"),
  ("kelsi"),
  ("kelsie"),
  ("kelula"),
  ("kemberly"),
  ("kemena"),
  ("kemina"),
  ("kena"),
  ("kenda"),
  ("kendra"),
  ("kendria"),
  ("kenia"),
  ("kenisha"),
  ("kenley"),
  ("kenna"),
  ("kennedi"),
  ("kenya"),
  ("kenyetta"),
  ("kenzie"),
  ("kenzy"),
  ("keola"),
  ("keona"),
  ("kera"),
  ("keran"),
  ("kerani"),
  ("keren"),
  ("keri"),
  ("keriana"),
  ("keriann"),
  ("kerianna"),
  ("kerianne"),
  ("kerilyn"),
  ("kerkira"),
  ("kerra"),
  ("kerri"),
  ("kerrianne"),
  ("kerrin"),
  ("kerstin"),
  ("kesar"),
  ("kesara"),
  ("kesare"),
  ("kesari"),
  ("kesava"),
  ("kesha"),
  ("keshi"),
  ("keshia"),
  ("keshika"),
  ("keshila"),
  ("keshini"),
  ("kesia"),
  ("ketaki"),
  ("ketana"),
  ("ketura"),
  ("keturah"),
  ("ketzia"),
  ("keva"),
  ("kevay"),
  ("keya"),
  ("keyla"),
  ("keyna"),
  ("kezia"),
  ("keziah"),
  ("khaalida"),
  ("khadeeja"),
  ("khadijah"),
  ("khaira"),
  ("khairiya"),
  ("khaleela"),
  ("khalilah"),
  ("kharesa"),
  ("khariessa"),
  ("kharitaniia"),
  ("kharitina"),
  ("kharitona"),
  ("kharitonova"),
  ("khasa"),
  ("khawla"),
  ("kheoniia"),
  ("khianna"),
  ("khioniia"),
  ("khloe"),
  ("khlopyreva"),
  ("khovra"),
  ("khrana"),
  ("khrisiia"),
  ("khristeen"),
  ("khristen"),
  ("khristianova"),
  ("khristin"),
  ("khristina"),
  ("khristine"),
  ("khristyana"),
  ("khristyna"),
  ("khrstina"),
  ("khryssa"),
  ("khrystina"),
  ("khrystyn"),
  ("khrystyna"),
  ("khrystyne"),
  ("khulood"),
  ("khvalibud"),
  ("khyati"),
  ("khynika"),
  ("kia"),
  ("kiahna"),
  ("kiana"),
  ("kiandra"),
  ("kiandria"),
  ("kiani"),
  ("kianna"),
  ("kiarra"),
  ("kiauna"),
  ("kiaya"),
  ("kiba"),
  ("kichi"),
  ("kiele"),
  ("kiera"),
  ("kierra"),
  ("kiersten"),
  ("kiesha"),
  ("kifaaya"),
  ("kigva"),
  ("kiki"),
  ("kikiliia"),
  ("kiko"),
  ("kilenya"),
  ("kilikeia"),
  ("kilikiia"),
  ("kimama"),
  ("kimaya"),
  ("kimber"),
  ("kimberely"),
  ("kimberlee"),
  ("kimberley"),
  ("kimberli"),
  ("kimberlie"),
  ("kimberly"),
  ("kimberlyn"),
  ("kimberly paige"),
  ("kimbery"),
  ("kimbra"),
  ("kimi"),
  ("kimie"),
  ("kimiko"),
  ("kimimela"),
  ("kimora"),
  ("kina"),
  ("kinaana"),
  ("kindra"),
  ("kineks"),
  ("kinipela"),
  ("kinley"),
  ("kinnat"),
  ("kinneret"),
  ("kinnette"),
  ("kinsey"),
  ("kinsley"),
  ("kinuko"),
  ("kinuye"),
  ("kinuyo"),
  ("kioko"),
  ("kiona"),
  ("kionah"),
  ("kioni"),
  ("kionia"),
  ("kionna"),
  ("kiprilla"),
  ("kira"),
  ("kiraanna"),
  ("kiranmala"),
  ("kirati"),
  ("kiri"),
  ("kiriakiia"),
  ("kiriena"),
  ("kirilla"),
  ("kirilovskaia"),
  ("kirima"),
  ("kirsi"),
  ("kirsten"),
  ("kirstie"),
  ("kirstin"),
  ("kirtana"),
  ("kirti"),
  ("kisa"),
  ("kisha"),
  ("kishanda"),
  ("kishawn"),
  ("kishi"),
  ("kishori"),
  ("kiska"),
  ("kit"),
  ("kita"),
  ("kitsa"),
  ("kittiana"),
  ("kittie"),
  ("kitty"),
  ("kiuprila"),
  ("kiuriakiia"),
  ("kiva"),
  ("kivi"),
  ("kiwidinok"),
  ("kiya"),
  ("kiyana"),
  ("kiyo"),
  ("kiyoko"),
  ("kiyomi"),
  ("kiza"),
  ("kizzie"),
  ("kizzy"),
  ("klara"),
  ("klasha"),
  ("klavdiia"),
  ("kleopatra"),
  ("kloe"),
  ("klychikha"),
  ("knikki"),
  ("kochava"),
  ("kochiyo"),
  ("kogorshed"),
  ("koia"),
  ("koika"),
  ("koiso"),
  ("koken"),
  ("kokila"),
  ("koko"),
  ("kokyangwuti"),
  ("koleyna"),
  ("kolina"),
  ("kolomianka"),
  ("kolonda"),
  ("komachi"),
  ("komal"),
  ("komala"),
  ("kona"),
  ("konchaka"),
  ("konchasha"),
  ("konkordiia"),
  ("konstantiia"),
  ("konstiantina"),
  ("konstiantinova"),
  ("kora"),
  ("koretskaia"),
  ("kori"),
  ("korina"),
  ("korotkaia"),
  ("korotkova"),
  ("korotsek"),
  ("korotskovaia"),
  ("kortney"),
  ("kosa"),
  ("kosenila"),
  ("kostenka"),
  ("kostyusha"),
  ("kotik"),
  ("koto"),
  ("kourtney"),
  ("kovan"),
  ("kovana"),
  ("kowan"),
  ("koyana"),
  ("koyel"),
  ("kozma"),
  ("kozmina"),
  ("krabava"),
  ("krandasi"),
  ("kranti"),
  ("krasa"),
  ("kraystal"),
  ("krestiia"),
  ("k'rin"),
  ("kripa"),
  ("krishnaa"),
  ("krishnakali"),
  ("krislyn"),
  ("krissy"),
  ("krista"),
  ("kristabelle"),
  ("kristal"),
  ("kristan"),
  ("kristeen"),
  ("kristel"),
  ("kristi"),
  ("kristianna"),
  ("kristie"),
  ("kristina"),
  ("kristine"),
  ("kristle"),
  ("kristy"),
  ("kristyn"),
  ("kriti"),
  ("krittika"),
  ("krivulinaia"),
  ("krodha"),
  ("krunevichovna"),
  ("krupa"),
  ("krushka"),
  ("krysta"),
  ("krystal"),
  ("krysten"),
  ("krystin"),
  ("krystina"),
  ("krystka"),
  ("krystle"),
  ("krystyn"),
  ("krystyna"),
  ("ksafipa"),
  ("ksana"),
  ("ksanfippa"),
  ("ksanochka"),
  ("ksena"),
  ("ksenia"),
  ("kseniia"),
  ("kseniya"),
  ("ksenya"),
  ("kshama"),
  ("kshanika"),
  ("kshtovtovna"),
  ("ksnia"),
  ("ksniatintsa"),
  ("kudra"),
  ("kulthum"),
  ("kum"),
  ("kumari"),
  ("kumi"),
  ("kumiko"),
  ("kumkum"),
  ("kumud"),
  ("kumuda"),
  ("kumudavati"),
  ("kumudini"),
  ("kuna"),
  ("kunda"),
  ("kundanika"),
  ("kunegundy"),
  ("kunei"),
  ("kuni"),
  ("kunie"),
  ("kunigunde"),
  ("kuniko"),
  ("kunjal"),
  ("kunjalata"),
  ("kunjana"),
  ("kunka"),
  ("kunko"),
  ("kunku"),
  ("kuntal"),
  ("kuntala"),
  ("kunti"),
  ("kuntse"),
  ("kura"),
  ("kurangi"),
  ("kuriana"),
  ("kushala"),
  ("kusum"),
  ("kusuma"),
  ("kusumanjali"),
  ("kusumavati"),
  ("kusumita"),
  ("kusumlata"),
  ("kuwanlelenta"),
  ("kuwanyamtiwa"),
  ("kuwanyauma"),
  ("kuznetsova"),
  ("kvasena"),
  ("kvetava"),
  ("kwanita"),
  ("kya"),
  ("kyara"),
  ("kyla"),
  ("kylah"),
  ("kylee"),
  ("kyleigh"),
  ("kylene"),
  ("kylie"),
  ("kym"),
  ("kymberly"),
  ("kynthia"),
  ("kyoko"),
  ("kyon"),
  ("kyong"),
  ("kyra"),
  ("kyrie"),
  ("kyung"),
  ("kzhna"),
  ("laabha"),
  ("laaiqa"),
  ("laalamani"),
  ("laasya"),
  ("labangalata"),
  ("labeeba"),
  ("labhaoise"),
  ("laboni"),
  ("lace"),
  ("lacee"),
  ("lacene"),
  ("lachelle"),
  ("laci"),
  ("laciann"),
  ("lacie"),
  ("lacienega"),
  ("lacina"),
  ("lacrasha"),
  ("lacrecia"),
  ("lacresha"),
  ("lacresia"),
  ("lacricia"),
  ("lacrishia"),
  ("lacyann"),
  ("lada"),
  ("ladaishia"),
  ("la-dale"),
  ("ladawn"),
  ("ladawnah"),
  ("ladona"),
  ("ladonna"),
  ("ladonne"),
  ("lady"),
  ("lael"),
  ("laetitia"),
  ("la-fara"),
  ("lahela"),
  ("lahoma"),
  ("lai"),
  ("laia"),
  ("laikina"),
  ("laila"),
  ("lailah"),
  ("laili"),
  ("lailie"),
  ("laine"),
  ("lainey"),
  ("lainie"),
  ("lair"),
  ("laire"),
  ("laisha"),
  ("lajila"),
  ("lajja"),
  ("lajjawati"),
  ("lajonel"),
  ("lajuana"),
  ("la-juana"),
  ("lajuanna"),
  ("lajwanti"),
  ("lajwati"),
  ("lakasha"),
  ("lakeesha"),
  ("lakeisha"),
  ("lakeitha"),
  ("laken"),
  ("lakendra"),
  ("lakendria"),
  ("lakenya"),
  ("lakesha"),
  ("lakeshia"),
  ("laketta"),
  ("la-keysha"),
  ("lakia"),
  ("lakiesha"),
  ("lakisha"),
  ("lakita"),
  ("lakitia"),
  ("lakresha"),
  ("laksha"),
  ("lakshana"),
  ("lakshmi"),
  ("lakshmishree"),
  ("lakshya"),
  ("lakya"),
  ("lakyta"),
  ("lala"),
  ("lalan"),
  ("lalana"),
  ("lalasa"),
  ("lali"),
  ("lalia"),
  ("lalima"),
  ("laline"),
  ("lalita"),
  ("lalitamohana"),
  ("lalitha"),
  ("lamesha"),
  ("lameshia"),
  ("lamonica"),
  ("lan"),
  ("lana"),
  ("lanai"),
  ("lanassa"),
  ("landa"),
  ("landra"),
  ("landrada"),
  ("lanecia"),
  ("la-neesa"),
  ("la-neisha"),
  ("la-neishah"),
  ("lanell"),
  ("lanelle"),
  ("lanette"),
  ("laney"),
  ("lang"),
  ("lani"),
  ("lanie"),
  ("lanita"),
  ("lanka"),
  ("lannie"),
  ("lanora"),
  ("lanza"),
  ("laquanda"),
  ("laqueinta"),
  ("laquenetta"),
  ("laquetta"),
  ("laquinda"),
  ("laquita"),
  ("laquitta"),
  ("lara"),
  ("larae"),
  ("la'rae"),
  ("larah"),
  ("laraine"),
  ("laree"),
  ("lareina"),
  ("laren"),
  ("larena"),
  ("larhonda"),
  ("la-rhonda"),
  ("lari"),
  ("laria"),
  ("larina"),
  ("larisa"),
  ("larissa"),
  ("larita"),
  ("larochka"),
  ("laronda"),
  ("larra"),
  ("larraine"),
  ("larunda"),
  ("laryssa"),
  ("lasandra"),
  ("lashanda"),
  ("lashandra"),
  ("lashane"),
  ("lashanna"),
  ("lashaun"),
  ("lashaunda"),
  ("lashaune"),
  ("lashaunta"),
  ("la'shawn"),
  ("lashawna"),
  ("lashawnda"),
  ("lashay"),
  ("lashell"),
  ("lashon"),
  ("lashona"),
  ("lashonda"),
  ("la-shonna"),
  ("lashunda"),
  ("la-sondra"),
  ("lasonya"),
  ("lassie"),
  ("lata"),
  ("lataesha"),
  ("latakara"),
  ("latangi"),
  ("latanna"),
  ("latanya"),
  ("latarsha"),
  ("latasha"),
  ("latashia"),
  ("latasia"),
  ("lataya"),
  ("lateasia"),
  ("lateefa"),
  ("lateefah"),
  ("la-teesha"),
  ("lateia"),
  ("lateica"),
  ("latesha"),
  ("latha"),
  ("latia"),
  ("laticia"),
  ("la-ticia"),
  ("latifah"),
  ("latika"),
  ("latina"),
  ("latisha"),
  ("latitia"),
  ("latoiya"),
  ("latona"),
  ("latondra"),
  ("latonia"),
  ("latonna"),
  ("latonya"),
  ("latore"),
  ("latoria"),
  ("latorray"),
  ("latosha"),
  ("latoya"),
  ("latoyia"),
  ("latreece"),
  ("latreese"),
  ("latrice"),
  ("la-trice"),
  ("latricia"),
  ("latrina"),
  ("latrisha"),
  ("latskaia"),
  ("launa"),
  ("lauralee"),
  ("lauran"),
  ("laurana"),
  ("laure"),
  ("laureen"),
  ("laurel"),
  ("laurena"),
  ("laurencia"),
  ("laurene"),
  ("lauretta"),
  ("laurette"),
  ("lauri"),
  ("laurice"),
  ("laurinda"),
  ("laurine"),
  ("laurita"),
  ("lauryn"),
  ("lavada"),
  ("lavali"),
  ("lavanya"),
  ("lavelle"),
  ("lavenia"),
  ("lavera"),
  ("lavergne"),
  ("lavern"),
  ("laverna"),
  ("la-verne"),
  ("lavernia"),
  ("laveta"),
  ("lavette"),
  ("lavina"),
  ("lavinia"),
  ("la-von"),
  ("lavona"),
  ("lavonda"),
  ("lavone"),
  ("lavonia"),
  ("lavonn"),
  ("lavonna"),
  ("lavonne"),
  ("lawana"),
  ("lawanda"),
  ("la-wanda"),
  ("la'wanda"),
  ("lawanna"),
  ("layaali"),
  ("laycie"),
  ("layla"),
  ("laylah"),
  ("laylie"),
  ("layna"),
  ("lea"),
  ("leah"),
  ("leahonia"),
  ("leala"),
  ("lealia"),
  ("lean"),
  ("leana"),
  ("leandra"),
  ("leann"),
  ("leanna"),
  ("leanne"),
  ("leanora"),
  ("leatha"),
  ("leatrice"),
  ("lechsinska"),
  ("lecia"),
  ("leda"),
  ("ledah"),
  ("leeann"),
  ("leeanna"),
  ("leeanne"),
  ("leela"),
  ("leelamayee"),
  ("leelavati"),
  ("leena"),
  ("leesa"),
  ("legarre"),
  ("lehana"),
  ("leia"),
  ("leida"),
  ("leigha"),
  ("leighann"),
  ("leighton"),
  ("leiko"),
  ("leila"),
  ("leilani"),
  ("leira"),
  ("leire"),
  ("leisa"),
  ("leisha"),
  ("leka"),
  ("lekha"),
  ("lekisha"),
  ("lela"),
  ("lelah"),
  ("lelar"),
  ("lelia"),
  ("lelik"),
  ("lemuela"),
  ("lena"),
  ("lene"),
  ("lenina"),
  ("lenita"),
  ("lenmana"),
  ("lenna"),
  ("lenochka"),
  ("lenora"),
  ("lenore"),
  ("lenusy"),
  ("lenusya"),
  ("leola"),
  ("leoma"),
  ("leona"),
  ("leonarda"),
  ("leonda"),
  ("leondra"),
  ("leondrea"),
  ("leonela"),
  ("leonelle"),
  ("leonia"),
  ("leonida"),
  ("leonie"),
  ("leonila"),
  ("leonilla"),
  ("leonor"),
  ("leonora"),
  ("leonteva"),
  ("leontina"),
  ("leontine"),
  ("leontyne"),
  ("leopolda"),
  ("leora"),
  ("leota"),
  ("leotie"),
  ("lepa"),
  ("lequoia"),
  ("lera"),
  ("lerinda"),
  ("lerka"),
  ("lesa"),
  ("lesha"),
  ("lesham"),
  ("lesia"),
  ("leslee"),
  ("lesli"),
  ("leslie"),
  ("lesly"),
  ("lessie"),
  ("leta"),
  ("letha"),
  ("leticia"),
  ("letisha"),
  ("letitia"),
  ("letizia"),
  ("letje"),
  ("letreece"),
  ("lettie"),
  ("letty"),
  ("letya"),
  ("leva"),
  ("levane"),
  ("levia"),
  ("levina"),
  ("lewanna"),
  ("lexi"),
  ("lexie"),
  ("lexine"),
  ("lexis"),
  ("lexus"),
  ("leya"),
  ("leyla"),
  ("leyna"),
  ("lezlie"),
  ("liadan"),
  ("liana"),
  ("liane"),
  ("lianne"),
  ("liba"),
  ("libania"),
  ("libba"),
  ("libbie"),
  ("libby"),
  ("liberty"),
  ("librada"),
  ("libusa"),
  ("lida"),
  ("liddie"),
  ("lidena"),
  ("lidia"),
  ("lidiia"),
  ("lidija"),
  ("lidiy"),
  ("lidiya"),
  ("lidka"),
  ("lidmila"),
  ("lidocha"),
  ("lidochka"),
  ("liealia"),
  ("lieba"),
  ("lien"),
  ("liesbet"),
  ("liese"),
  ("lieselotte"),
  ("liesheth"),
  ("ligia"),
  ("li hua"),
  ("likla"),
  ("lila"),
  ("lilac"),
  ("lilah"),
  ("lili"),
  ("lilia"),
  ("lilian"),
  ("liliana"),
  ("liliane"),
  ("lilianna"),
  ("lilie"),
  ("liliha"),
  ("lilith"),
  ("lilka"),
  ("lilla"),
  ("lilli"),
  ("lillia"),
  ("lilliam"),
  ("lilliana"),
  ("lillianna"),
  ("lilly"),
  ("lilo"),
  ("liluye"),
  ("lily"),
  ("lilyan"),
  ("lilyana"),
  ("lilyanna"),
  ("lilybet"),
  ("li mei"),
  ("li ming"),
  ("lin"),
  ("lina"),
  ("li na"),
  ("lindsay"),
  ("lindsy"),
  ("lindy"),
  ("linette"),
  ("ling"),
  ("linh"),
  ("linn"),
  ("linnea"),
  ("linnealisa"),
  ("linsey"),
  ("lin yao"),
  ("liolya"),
  ("liona"),
  ("liora"),
  ("lioslaith"),
  ("lipa"),
  ("lipi"),
  ("lipika"),
  ("li qin"),
  ("liriene"),
  ("lirienne"),
  ("lirit"),
  ("lirita"),
  ("li rong"),
  ("lisabet"),
  ("lisabeth"),
  ("lisabette"),
  ("lisandra"),
  ("lisanka"),
  ("lisavet"),
  ("lisaveta"),
  ("lisbet"),
  ("lisbeth"),
  ("lisbetliv"),
  ("liseetsa"),
  ("liseli"),
  ("lisette"),
  ("lisha"),
  ("lishka"),
  ("lisil"),
  ("liska"),
  ("lisotianka"),
  ("lissa"),
  ("lissandra"),
  ("lissette"),
  ("lita"),
  ("littie"),
  ("litzy"),
  ("liuba"),
  ("liubchanina"),
  ("liubka"),
  ("liubokhna"),
  ("liubone"),
  ("liubusha"),
  ("liudena"),
  ("liudmila"),
  ("liunharda"),
  ("liutarda"),
  ("liutsilla"),
  ("livana"),
  ("livia"),
  ("li wei"),
  ("lixue"),
  ("liz"),
  ("liza"),
  ("lizabeta"),
  ("lizabeth"),
  ("lizandra"),
  ("lizanka"),
  ("lizbet"),
  ("lizbeth"),
  ("lizeth"),
  ("lizette"),
  ("lizzette"),
  ("lizzie"),
  ("ljudmila"),
  ("ljudmilla"),
  ("llesenia"),
  ("lluvia"),
  ("llysha"),
  ("loan"),
  ("lochana"),
  ("lockie"),
  ("lodoiska"),
  ("logestilla"),
  ("logistilla"),
  ("loida"),
  ("loise"),
  ("lokelani"),
  ("loleta"),
  ("lolita"),
  ("lolitta"),
  ("lolya"),
  ("loma"),
  ("lomahongva"),
  ("lomasi"),
  ("lona"),
  ("londa"),
  ("londyn"),
  ("loni"),
  ("lonna"),
  ("lopa"),
  ("lopamudra"),
  ("lora"),
  ("loraina"),
  ("loraine"),
  ("loralee"),
  ("lorayne"),
  ("lorda"),
  ("lore"),
  ("lorean"),
  ("loree"),
  ("loreen"),
  ("lorelai"),
  ("lorelei"),
  ("lorena"),
  ("lorene"),
  ("loreta"),
  ("loretta"),
  ("lorette"),
  ("loretto"),
  ("lori"),
  ("loria"),
  ("loriann"),
  ("lorie"),
  ("lorilee"),
  ("lorina"),
  ("lorinda"),
  ("lorine"),
  ("loris"),
  ("lorita"),
  ("lorna"),
  ("lorraina"),
  ("lorraine"),
  ("lorretta"),
  ("lorri"),
  ("lorriane"),
  ("lorrie"),
  ("lorrine"),
  ("lory"),
  ("lossie"),
  ("lotta"),
  ("lottie"),
  ("lotye"),
  ("louann"),
  ("louanne"),
  ("louella"),
  ("louetta"),
  ("louisa"),
  ("loura"),
  ("lourdes"),
  ("louredes"),
  ("lourie"),
  ("louvenia"),
  ("lovella"),
  ("lovetta"),
  ("lovie"),
  ("lovina"),
  ("lovisa"),
  ("lowri"),
  ("loyce"),
  ("l'tanga"),
  ("luana"),
  ("luann"),
  ("luanna"),
  ("luanne"),
  ("luba"),
  ("lubaaba"),
  ("lubachitsa"),
  ("lubmila"),
  ("lubmilla"),
  ("lubna"),
  ("lubohna"),
  ("lubov"),
  ("lubusha"),
  ("lucena"),
  ("lucette"),
  ("luci"),
  ("lucia"),
  ("luciana"),
  ("lucianna"),
  ("lucie"),
  ("lucienne"),
  ("lucile"),
  ("lucilla"),
  ("lucille"),
  ("lucina"),
  ("lucinda"),
  ("lucita"),
  ("lucja"),
  ("lucrece"),
  ("lucrecia"),
  ("lucretia"),
  ("lucrezia"),
  ("lucy"),
  ("lucyna"),
  ("luda"),
  ("ludie"),
  ("ludiia"),
  ("ludivina"),
  ("ludka"),
  ("ludmia"),
  ("ludmila"),
  ("ludmilla"),
  ("ludomia"),
  ("lue"),
  ("luella"),
  ("luetta"),
  ("luighseach"),
  ("luisa"),
  ("luise"),
  ("luiza"),
  ("lukeria"),
  ("lukerina"),
  ("lukerya"),
  ("lukiia"),
  ("lukina"),
  ("lukiria"),
  ("lukoianova"),
  ("lulu"),
  ("luna"),
  ("lundy"),
  ("lunetta"),
  ("lunette"),
  ("lupita"),
  ("lur"),
  ("lura"),
  ("lurlene"),
  ("lurline"),
  ("lutfiyya"),
  ("lutie"),
  ("luvenia"),
  ("luvina"),
  ("luvinia"),
  ("luyu"),
  ("luz rosa"),
  ("lvovicha"),
  ("lyalechka"),
  ("lyalya"),
  ("lybed"),
  ("lyda"),
  ("lydia"),
  ("lydie"),
  ("lyeta"),
  ("lyla"),
  ("lylah"),
  ("lyn"),
  ("lynda"),
  ("lyndia"),
  ("lyndsay"),
  ("lyndsey"),
  ("lynell"),
  ("lynelle"),
  ("lynessa"),
  ("lyneth"),
  ("lynetta"),
  ("lynette"),
  ("lynna"),
  ("lynne"),
  ("lynnet"),
  ("lynnette"),
  ("lynsey"),
  ("lyonette"),
  ("lyra"),
  ("lysandra"),
  ("lyuba"),
  ("lyubochka"),
  ("lyubonka"),
  ("lyubov"),
  ("lyudmila"),
  ("lyudmilla"),
  ("lyuha"),
  ("lyutsiana"),
  ("maajida"),
  ("maanasa"),
  ("maanika"),
  ("maariya"),
  ("maartje"),
  ("maazina"),
  ("mab"),
  ("mabbina"),
  ("mabelle"),
  ("mabinty"),
  ("mable"),
  ("mabli"),
  ("mabyn"),
  ("macee"),
  ("macey"),
  ("macha"),
  ("machara"),
  ("machele"),
  ("machelle"),
  ("machi"),
  ("machiko"),
  ("machko"),
  ("machna"),
  ("maci"),
  ("macie"),
  ("mackenzie"),
  ("macy"),
  ("mada"),
  ("madailein"),
  ("madalen"),
  ("madalena"),
  ("madalene"),
  ("madaline"),
  ("madalyn"),
  ("madalynn"),
  ("maddelena"),
  ("maddie"),
  ("maddison"),
  ("maddy"),
  ("madeeha"),
  ("madeira"),
  ("madel"),
  ("madelaine"),
  ("madeleina"),
  ("madeleine"),
  ("madelena"),
  ("madelene"),
  ("madelina"),
  ("madeline"),
  ("madelyn"),
  ("madelynn"),
  ("madena"),
  ("madge"),
  ("madhavi"),
  ("madhavilata"),
  ("madhubala"),
  ("madhuchanda"),
  ("madhuksara"),
  ("madhulata"),
  ("madhulekha"),
  ("madhulika"),
  ("madhumalati"),
  ("madhumati"),
  ("madhunisha"),
  ("madhura"),
  ("madhuri"),
  ("madhurima"),
  ("madhushri"),
  ("madia"),
  ("madie"),
  ("madilyn"),
  ("madilynn"),
  ("madina"),
  ("madirakshi"),
  ("madisen"),
  ("madisyn"),
  ("madlyn"),
  ("madoka"),
  ("madolen"),
  ("madonna"),
  ("madre"),
  ("madri"),
  ("madrona"),
  ("madyson"),
  ("madzeija"),
  ("mae"),
  ("maegan"),
  ("maeko"),
  ("maela"),
  ("maelee"),
  ("maelynn"),
  ("maemi"),
  ("maeryn"),
  ("maeve"),
  ("mafalda"),
  ("magali"),
  ("magaly"),
  ("magalys"),
  ("magana"),
  ("magaret"),
  ("magda"),
  ("magdala"),
  ("magdalen"),
  ("magdalena"),
  ("magdalene"),
  ("magdalina"),
  ("magen"),
  ("magena"),
  ("maggie"),
  ("magmeteva"),
  ("magnolia"),
  ("mahaa"),
  ("mahadevi"),
  ("mahagauri"),
  ("mahajabeen"),
  ("mahal"),
  ("mahala"),
  ("mahalakshmi"),
  ("mahalia"),
  ("mahamari"),
  ("mahamaya"),
  ("mahasweta"),
  ("mahati"),
  ("mahbooba"),
  ("mahdeeya"),
  ("mahdhoodha"),
  ("mahesa"),
  ("maheshvari"),
  ("mahfoodha"),
  ("mahi"),
  ("mahijuba"),
  ("mahika"),
  ("mahila"),
  ("mahima"),
  ("mahina"),
  ("mahmooda"),
  ("mahogony"),
  ("mahola"),
  ("mahua"),
  ("mai"),
  ("maia"),
  ("maialen"),
  ("maible"),
  ("maida"),
  ("maidel"),
  ("maighdlin"),
  ("maiko"),
  ("maile"),
  ("mailsi"),
  ("maimoona"),
  ("maina"),
  ("maiolaine"),
  ("mair"),
  ("maira"),
  ("maire"),
  ("mairead"),
  ("mairi"),
  ("mairia"),
  ("mairona"),
  ("mairwen"),
  ("maisha"),
  ("maisie"),
  ("maite"),
  ("maitea"),
  ("maithili"),
  ("maiti"),
  ("maitilda"),
  ("maitilde"),
  ("maitreyi"),
  ("maitri"),
  ("maive"),
  ("maiya"),
  ("maizah"),
  ("maj"),
  ("maja"),
  ("majdiyya"),
  ("majeeda"),
  ("majella"),
  ("majori"),
  ("majorie"),
  ("makaila"),
  ("makala"),
  ("makana"),
  ("makaramalini"),
  ("makayla"),
  ("makeda"),
  ("makelina"),
  ("makena"),
  ("makenna"),
  ("makenzie"),
  ("makhna"),
  ("maki"),
  ("makiko"),
  ("makkitotosimew"),
  ("mako"),
  ("makrina"),
  ("makshi"),
  ("maksimina"),
  ("maksimova"),
  ("mala"),
  ("malak"),
  ("malana"),
  ("malania"),
  ("malashree"),
  ("malati"),
  ("malavika"),
  ("malaya"),
  ("malcah"),
  ("maleah"),
  ("maleeha"),
  ("maleeka"),
  ("malena"),
  ("malene"),
  ("malha"),
  ("mali"),
  ("malia"),
  ("maliah"),
  ("malika"),
  ("malin"),
  ("malina"),
  ("malinda"),
  ("malini"),
  ("malisa"),
  ("malissa"),
  ("malita"),
  ("maliusha"),
  ("maliuta"),
  ("maliyah"),
  ("malka"),
  ("malkah"),
  ("mallaidh"),
  ("mallie"),
  ("mallika"),
  ("mallorie"),
  ("malmuira"),
  ("malmuirie"),
  ("malona"),
  ("malonia"),
  ("malorie"),
  ("malti"),
  ("maluchka"),
  ("malusha"),
  ("malvina"),
  ("mamata"),
  ("mamelfa"),
  ("mami"),
  ("mamie"),
  ("mamika"),
  ("mamiko"),
  ("mammie"),
  ("man"),
  ("mana"),
  ("manaahil"),
  ("manaal"),
  ("manaara"),
  ("manali"),
  ("manami"),
  ("manana"),
  ("manasa"),
  ("manda"),
  ("mandakini"),
  ("mandakranta"),
  ("mandara"),
  ("mandaraa"),
  ("mandarmalika"),
  ("mandi"),
  ("mandie"),
  ("mandira"),
  ("mandisa"),
  ("mandy"),
  ("manechka"),
  ("manette"),
  ("mangala"),
  ("mangena"),
  ("mangla"),
  ("manideepa"),
  ("manie"),
  ("manikuntala"),
  ("manimala"),
  ("manimekhala"),
  ("manina"),
  ("manini"),
  ("manisha"),
  ("manjari"),
  ("manjira"),
  ("manjistha"),
  ("manju"),
  ("manjubala"),
  ("manjula"),
  ("manjulika"),
  ("manjusha"),
  ("manjushri"),
  ("manjusri"),
  ("manjyot"),
  ("manka"),
  ("manmayi"),
  ("manoela"),
  ("manon"),
  ("manorama"),
  ("manoranjana"),
  ("manuela"),
  ("manuelita"),
  ("manushri"),
  ("many"),
  ("manya"),
  ("mao"),
  ("maola"),
  ("maoli"),
  ("maple"),
  ("mar"),
  ("mara"),
  ("maragaret"),
  ("maragret"),
  ("marala"),
  ("maralah"),
  ("marana"),
  ("maranda"),
  ("marcail"),
  ("marcela"),
  ("marcelene"),
  ("marcelina"),
  ("marceline"),
  ("marcella"),
  ("marcelle"),
  ("marcellia"),
  ("marcene"),
  ("marchelle"),
  ("marci"),
  ("marcia"),
  ("marcie"),
  ("marcy"),
  ("mardea"),
  ("mardell"),
  ("mardiyya"),
  ("marea"),
  ("maredud"),
  ("maree"),
  ("mareli"),
  ("marella"),
  ("marely"),
  ("marelys"),
  ("maremiana"),
  ("maren"),
  ("marfa"),
  ("marfutka"),
  ("marg"),
  ("margareta"),
  ("margarete"),
  ("margarett"),
  ("margaretta"),
  ("margarette"),
  ("margarita"),
  ("margarite"),
  ("margart"),
  ("margaux"),
  ("marge"),
  ("margeaux"),
  ("marged"),
  ("margene"),
  ("margeret"),
  ("margert"),
  ("margery"),
  ("marget"),
  ("margherita"),
  ("margie"),
  ("margisia"),
  ("margit"),
  ("margita"),
  ("margo"),
  ("margorie"),
  ("margot"),
  ("margred"),
  ("margret"),
  ("margrete"),
  ("margrett"),
  ("marguerita"),
  ("marguerite"),
  ("margurite"),
  ("margy"),
  ("marhta"),
  ("mari"),
  ("maria"),
  ("maria del carmen"),
  ("mariah"),
  ("mariam"),
  ("mariamne"),
  ("mariana"),
  ("mariane"),
  ("marianela"),
  ("mariann"),
  ("marianna"),
  ("marianne"),
  ("marianskaia"),
  ("maribel"),
  ("maribella"),
  ("maribelle"),
  ("maribeth"),
  ("marica"),
  ("maricel"),
  ("maricela"),
  ("maricelia"),
  ("maricella"),
  ("maricha"),
  ("marichi"),
  ("marichinich"),
  ("maricruz"),
  ("maridel"),
  ("marieke"),
  ("mariel"),
  ("mariela"),
  ("mariele"),
  ("mariella"),
  ("marielle"),
  ("marien"),
  ("marietta"),
  ("mariette"),
  ("marigold"),
  ("mariia"),
  ("marika"),
  ("mariken"),
  ("mariko"),
  ("marilee"),
  ("marilla"),
  ("marilou"),
  ("marilu"),
  ("marily"),
  ("marilyn"),
  ("marilynn"),
  ("marimiana"),
  ("marin"),
  ("marina"),
  ("marinda"),
  ("marine"),
  ("marinka"),
  ("marinochka"),
  ("marinskaia"),
  ("marionilla"),
  ("mariquita"),
  ("marisa"),
  ("marisela"),
  ("marisha"),
  ("mariska"),
  ("marisol"),
  ("marissa"),
  ("marit"),
  ("marita"),
  ("maritanna"),
  ("maritsa"),
  ("maritza"),
  ("marivel"),
  ("mariyah"),
  ("marjaana"),
  ("marjan"),
  ("marjani"),
  ("marjka"),
  ("marjolaina"),
  ("marjon"),
  ("marjorie"),
  ("marjory"),
  ("marka"),
  ("marketta"),
  ("markiana"),
  ("markita"),
  ("marla"),
  ("marlana"),
  ("marlee"),
  ("marleen"),
  ("marleigh"),
  ("marlen"),
  ("marlena"),
  ("marlene"),
  ("marlie"),
  ("marlina"),
  ("marline"),
  ("marlyn"),
  ("marlys"),
  ("marna"),
  ("marni"),
  ("marnie"),
  ("marnina"),
  ("marnita"),
  ("marous"),
  ("marquerite"),
  ("marquesa"),
  ("marquetta"),
  ("marquilla"),
  ("marquisa"),
  ("marquisha"),
  ("marquita"),
  ("marquitta"),
  ("marry"),
  ("marsha"),
  ("marta"),
  ("marte"),
  ("marteena"),
  ("martemianova"),
  ("marth"),
  ("marthe"),
  ("marthine"),
  ("marti"),
  ("martika"),
  ("martina"),
  ("martine"),
  ("maru"),
  ("marufa"),
  ("marulia"),
  ("marusya"),
  ("marva"),
  ("marveille"),
  ("marvel"),
  ("marvela"),
  ("marvella"),
  ("marvelle"),
  ("marvis"),
  ("marwa"),
  ("marx"),
  ("marya"),
  ("maryalice"),
  ("maryam"),
  ("maryann"),
  ("maryanna"),
  ("maryanne"),
  ("marybelle"),
  ("marybeth"),
  ("maryellen"),
  ("maryetta"),
  ("maryjane"),
  ("maryjo"),
  ("maryl"),
  ("maryland"),
  ("marylee"),
  ("marylin"),
  ("maryln"),
  ("marylou"),
  ("marylouise"),
  ("marylyn"),
  ("marylynn"),
  ("maryrose"),
  ("maryse"),
  ("marysia"),
  ("maryvonne"),
  ("marzooqa"),
  ("masae"),
  ("masako"),
  ("mascha"),
  ("masha"),
  ("mashenka"),
  ("masia"),
  ("mas'ooda"),
  ("masroora"),
  ("massima"),
  ("mastoora"),
  ("masumi"),
  ("matana"),
  ("matangi"),
  ("matea"),
  ("mateja"),
  ("materia"),
  ("matfeitsa"),
  ("matha"),
  ("mathea"),
  ("mathia"),
  ("mathilda"),
  ("mathilde"),
  ("matia"),
  ("matilda"),
  ("matilde"),
  ("matrena"),
  ("matrika"),
  ("matrona"),
  ("matruna"),
  ("matryoshka"),
  ("matsu"),
  ("matsuko"),
  ("mattea"),
  ("matthea"),
  ("matthia"),
  ("mattie"),
  ("matty"),
  ("matxalen"),
  ("matyidy"),
  ("maud"),
  ("maude"),
  ("maudie"),
  ("maura"),
  ("maureen"),
  ("maurelle"),
  ("maurina"),
  ("maurine"),
  ("maurita"),
  ("maurizia"),
  ("maurya"),
  ("mausi"),
  ("mausumi"),
  ("mava"),
  ("mavis"),
  ("mavise"),
  ("mavra"),
  ("mawhiba"),
  ("mawzoona"),
  ("maxima"),
  ("maximina"),
  ("maxine"),
  ("may"),
  ("maya"),
  ("mayah"),
  ("mayako"),
  ("maybell"),
  ("maybelle"),
  ("maye"),
  ("maygan"),
  ("mayme"),
  ("maymie"),
  ("mayo"),
  ("mayoko"),
  ("mayola"),
  ("mayra"),
  ("mayra-liz"),
  ("mayu"),
  ("mayuka"),
  ("mayukhi"),
  ("mayuko"),
  ("mayumi"),
  ("mayura"),
  ("mayuri"),
  ("mayyaada"),
  ("mazcho"),
  ("mazeeda"),
  ("mazel"),
  ("mazie"),
  ("mckayla"),
  ("mckenna"),
  ("mckenzie"),
  ("mea"),
  ("meadhbh"),
  ("meadow"),
  ("meagan"),
  ("meaghan"),
  ("mearr"),
  ("mechelle"),
  ("meda"),
  ("medha"),
  ("medini"),
  ("mee"),
  ("meeda"),
  ("meeghan"),
  ("meena"),
  ("meenakshi"),
  ("meera"),
  ("meg"),
  ("megan"),
  ("megara"),
  ("megdn"),
  ("meggan"),
  ("meghamala"),
  ("meghan"),
  ("meghana"),
  ("meghann"),
  ("megu"),
  ("megumi"),
  ("mehadi"),
  ("mehal"),
  ("mehbooba"),
  ("meher"),
  ("meheytabel"),
  ("mehitahelle"),
  ("mehjibin"),
  ("mehrunissa"),
  ("mei"),
  ("meimele"),
  ("meira"),
  ("mekhala"),
  ("mela"),
  ("melaina"),
  ("melaine"),
  ("melanctha"),
  ("melanee"),
  ("melangell"),
  ("melani"),
  ("melania"),
  ("melanie"),
  ("melaniia"),
  ("melany"),
  ("melba"),
  ("melcia"),
  ("melda"),
  ("melea"),
  ("meletina"),
  ("melia"),
  ("melida"),
  ("melina"),
  ("melinda"),
  ("melisa"),
  ("melisande"),
  ("melisenda"),
  ("melissia"),
  ("melita"),
  ("melitina"),
  ("meliza"),
  ("melka"),
  ("mellie"),
  ("mellisa"),
  ("mellissa"),
  ("melodee"),
  ("melodi"),
  ("melodie"),
  ("melody"),
  ("melonie"),
  ("melony"),
  ("melosa"),
  ("melosia"),
  ("melusina"),
  ("melva"),
  ("melvina"),
  ("melynda"),
  ("memdi"),
  ("mena"),
  ("menachema"),
  ("menachemah"),
  ("menaka"),
  ("mendi"),
  ("mendy"),
  ("menora"),
  ("menshikova"),
  ("meoquanee"),
  ("mercede"),
  ("mercedes"),
  ("mercedez"),
  ("merci"),
  ("mercia"),
  ("mercy"),
  ("meredith stella"),
  ("mererid"),
  ("mergivana"),
  ("meri"),
  ("merideth"),
  ("merilyn"),
  ("merissa"),
  ("merkureva"),
  ("merlene"),
  ("merna"),
  ("merri"),
  ("merrie"),
  ("merrilee"),
  ("merry"),
  ("merryl"),
  ("mertie"),
  ("meryl"),
  ("meta"),
  ("metta"),
  ("mettabel"),
  ("mettie"),
  ("mia"),
  ("miah"),
  ("miakoda"),
  ("mica"),
  ("micaela"),
  ("mical"),
  ("micayla"),
  ("micha"),
  ("michaela"),
  ("michaele"),
  ("michaelina"),
  ("michaeline"),
  ("michaelyn"),
  ("michalin"),
  ("micheala"),
  ("michela"),
  ("michelina"),
  ("micheline"),
  ("michell"),
  ("michella"),
  ("michi"),
  ("michie"),
  ("michiko"),
  ("micki"),
  ("mickie"),
  ("micol"),
  ("micole"),
  ("midori"),
  ("miesha"),
  ("miette"),
  ("mieze"),
  ("migdalia"),
  ("migisi"),
  ("mignon"),
  ("mignonette"),
  ("miguelina"),
  ("miho"),
  ("mihoko"),
  ("miiko"),
  ("mikaela"),
  ("mikaila"),
  ("mikala"),
  ("mikalah"),
  ("mikayla"),
  ("mikele"),
  ("mikhaila"),
  ("mikhailova"),
  ("miki"),
  ("mikil"),
  ("mikitina"),
  ("mikki"),
  ("mikula"),
  ("mikulina"),
  ("mila"),
  ("milagritos"),
  ("milagros"),
  ("milagrosa"),
  ("milakhna"),
  ("milana"),
  ("milata"),
  ("milava"),
  ("milcah"),
  ("milda"),
  ("milehva"),
  ("milekha"),
  ("milena"),
  ("milenia"),
  ("milesa"),
  ("mileva"),
  ("miley"),
  ("mili"),
  ("miliani"),
  ("miliia"),
  ("milika"),
  ("miliko"),
  ("milissa"),
  ("militsa"),
  ("milka"),
  ("milleise"),
  ("millicent"),
  ("millicente"),
  ("millie"),
  ("milly"),
  ("milohna"),
  ("milokhna"),
  ("miloslava"),
  ("miloushka"),
  ("miluska"),
  ("mimi"),
  ("min"),
  ("mina"),
  ("minako"),
  ("minal"),
  ("minati"),
  ("minda"),
  ("mindi"),
  ("mindy"),
  ("mineko"),
  ("minerva"),
  ("minetta"),
  ("minette"),
  ("ming"),
  ("minka"),
  ("minna"),
  ("minnah"),
  ("mino"),
  ("minodora"),
  ("minowa"),
  ("minta"),
  ("minya"),
  ("mio"),
  ("mira"),
  ("mirabel"),
  ("mirabella"),
  ("mirabelle"),
  ("miracle"),
  ("miranda"),
  ("mirari"),
  ("mireia"),
  ("mireille"),
  ("mirella"),
  ("miren"),
  ("mirena"),
  ("mireya"),
  ("miri"),
  ("miriah"),
  ("miriam"),
  ("mirian"),
  ("mirielle"),
  ("mirit"),
  ("mirium"),
  ("mirla"),
  ("mirna"),
  ("mironova"),
  ("miropiia"),
  ("miroslava"),
  ("mirozlava"),
  ("mirra"),
  ("mirta"),
  ("mirtha"),
  ("misa"),
  ("misako"),
  ("misato"),
  ("misbaah"),
  ("mishon"),
  ("miss"),
  ("missouri"),
  ("missy"),
  ("misti"),
  ("mistico"),
  ("mistie"),
  ("mistique"),
  ("misty"),
  ("mita"),
  ("mitali"),
  ("mitamona"),
  ("mitrodora"),
  ("mitsu"),
  ("mitsue"),
  ("mitsuko"),
  ("mitsuyo"),
  ("mittie"),
  ("mitzi"),
  ("mitzie"),
  ("miwako"),
  ("miya"),
  ("miyako"),
  ("miyo"),
  ("miyoko"),
  ("miyoshi"),
  ("mizinovskaia"),
  ("mizuki"),
  ("mlada"),
  ("moa"),
  ("moana"),
  ("moanna"),
  ("modesta"),
  ("modeste"),
  ("modlen"),
  ("moesha"),
  ("mohana"),
  ("mohini"),
  ("mohisha"),
  ("moibeal"),
  ("moiko"),
  ("moina"),
  ("moira"),
  ("moire"),
  ("moireach"),
  ("molara"),
  ("mollie"),
  ("molly"),
  ("momoko"),
  ("monaique"),
  ("monalisa"),
  ("monca"),
  ("monet"),
  ("monette"),
  ("monica"),
  ("monika"),
  ("moniqua"),
  ("monique"),
  ("monita"),
  ("monnie"),
  ("monserrat"),
  ("monserrate"),
  ("moon"),
  ("mora"),
  ("morava"),
  ("morawa"),
  ("moreen"),
  ("morela"),
  ("morella"),
  ("morgaine"),
  ("morgana"),
  ("morgann"),
  ("morgant"),
  ("morgayne"),
  ("moria"),
  ("moriah"),
  ("morice"),
  ("moriel"),
  ("morisa"),
  ("morise"),
  ("morissa"),
  ("morit"),
  ("morna"),
  ("morrin"),
  ("morvudd"),
  ("morwen"),
  ("morwenna"),
  ("morwyn"),
  ("moselle"),
  ("mossie"),
  ("mounya"),
  ("mousia"),
  ("moya"),
  ("moyna"),
  ("mozell"),
  ("mozella"),
  ("mozelle"),
  ("mozyr"),
  ("mridula"),
  ("mriganayani"),
  ("mrinal"),
  ("mrinali"),
  ("mrinalini"),
  ("mrinmayi"),
  ("mstislava"),
  ("mstislavliaia"),
  ("muadhnait"),
  ("mubaaraka"),
  ("mubeena"),
  ("mudra"),
  ("mudri"),
  ("mudrika"),
  ("mufeeda"),
  ("mufliha"),
  ("mugdha"),
  ("muhjar"),
  ("mu'hsina"),
  ("mui"),
  ("muira"),
  ("muire"),
  ("muireann"),
  ("muirgheal"),
  ("muirne"),
  ("mujaahida"),
  ("mukta"),
  ("mukti"),
  ("mukula"),
  ("mukulita"),
  ("mulan"),
  ("mumina"),
  ("mu'mina"),
  ("mumtaaza"),
  ("muna"),
  ("muneefa"),
  ("muneera"),
  ("muniia"),
  ("munisa"),
  ("muniya"),
  ("muntaha"),
  ("muoi"),
  ("mura"),
  ("murel"),
  ("muriel"),
  ("muroniia"),
  ("musetta"),
  ("musette"),
  ("musfira"),
  ("musheera"),
  ("mushtaaqa"),
  ("mutee'a"),
  ("mutsuko"),
  ("mutsumi"),
  ("muza"),
  ("muzaina"),
  ("muzna"),
  ("mya"),
  ("myah"),
  ("mychele"),
  ("mychelle"),
  ("myesha"),
  ("myfanawy"),
  ("myla"),
  ("mylandra"),
  ("mylee"),
  ("mylie"),
  ("myma"),
  ("myong"),
  ("myra"),
  ("myranda"),
  ("myriam"),
  ("myrla"),
  ("myrle"),
  ("myrna"),
  ("myrra"),
  ("myrta"),
  ("myrtice"),
  ("myrtie"),
  ("myrtis"),
  ("myshka"),
  ("myslna"),
  ("mystique"),
  ("mythili"),
  ("mythily"),
  ("myung"),
  ("naadiya"),
  ("naafoora"),
  ("naaifa"),
  ("naaila"),
  ("naamah"),
  ("naamit"),
  ("naava"),
  ("naavah"),
  ("naaz"),
  ("nabeeha"),
  ("nabeela"),
  ("nachni"),
  ("nada"),
  ("nadeek"),
  ("nadeekovaia"),
  ("nadeen"),
  ("nadeera"),
  ("nadejda"),
  ("nadene"),
  ("nadenka"),
  ("nadheera"),
  ("nadie"),
  ("nadine"),
  ("nadira"),
  ("nadiya"),
  ("nadiyya"),
  ("nadja"),
  ("nadjenka"),
  ("nadya"),
  ("nadyenka"),
  ("nadysha"),
  ("nadyuiska"),
  ("nadzia"),
  ("naeva"),
  ("nafeesa"),
  ("nagina"),
  ("naglaya"),
  ("nahla"),
  ("naho"),
  ("nahoko"),
  ("naiara"),
  ("naida"),
  ("nailah"),
  ("nailea"),
  ("naima"),
  ("naina"),
  ("nainsi"),
  ("nairna"),
  ("nairne"),
  ("naiya"),
  ("naja"),
  ("najaat"),
  ("najeeba"),
  ("najeema"),
  ("najiyya"),
  ("najlaa"),
  ("najma"),
  ("najwa"),
  ("nakeisha"),
  ("nakesha"),
  ("na'kesha"),
  ("nakheel"),
  ("nakida"),
  ("nakisha"),
  ("nakita"),
  ("nalani"),
  ("nalanie"),
  ("nalda"),
  ("nalini"),
  ("nallely"),
  ("nam"),
  ("nameera"),
  ("nami"),
  ("namid"),
  ("namie"),
  ("namika"),
  ("namiko"),
  ("namita"),
  ("namiyo"),
  ("namrata"),
  ("nan"),
  ("nana"),
  ("nanako"),
  ("nanami"),
  ("nancee"),
  ("nancey"),
  ("nanci"),
  ("nancie"),
  ("nancsi"),
  ("nancy"),
  ("nandana"),
  ("nandika"),
  ("nandini"),
  ("nandita"),
  ("nanelia"),
  ("nanelle"),
  ("nanette"),
  ("nani"),
  ("nanine"),
  ("nanna"),
  ("nannette"),
  ("nannie"),
  ("nanny"),
  ("nanon"),
  ("nao"),
  ("naoko"),
  ("naoma"),
  ("naomi"),
  ("naora"),
  ("napua"),
  ("naqaa"),
  ("naqiyya"),
  ("narayani"),
  ("narcisa"),
  ("narcisse"),
  ("narella"),
  ("nari"),
  ("nariko"),
  ("narkissa"),
  ("narmada"),
  ("narois"),
  ("narumi"),
  ("nascha"),
  ("naseeba"),
  ("naseefa"),
  ("naseema"),
  ("naseen"),
  ("naseera"),
  ("nashawn"),
  ("nashawna"),
  ("nashota"),
  ("nasnan"),
  ("nasreen"),
  ("nastasia"),
  ("nastasich"),
  ("nastasiia"),
  ("nastasja"),
  ("nastassia"),
  ("nastenka"),
  ("nastia"),
  ("nastiona"),
  ("nastionka"),
  ("nastiusha"),
  ("nastka"),
  ("nasya"),
  ("nata"),
  ("natacha"),
  ("natachia"),
  ("natacia"),
  ("natala"),
  ("natalee"),
  ("natalia"),
  ("natalie"),
  ("natalii"),
  ("nataliia"),
  ("natalja"),
  ("natalka"),
  ("nataly"),
  ("natalya"),
  ("natane"),
  ("natania"),
  ("nataniella"),
  ("natascha"),
  ("natasha"),
  ("natashenka"),
  ("natashia"),
  ("natasia"),
  ("natassia"),
  ("natesa"),
  ("nathaira"),
  ("nathalee"),
  ("nathalia"),
  ("nathalie"),
  ("nathaly"),
  ("nathania"),
  ("nathara"),
  ("nathasha"),
  ("natia"),
  ("natisha"),
  ("natividad"),
  ("natosha"),
  ("natsuko"),
  ("natsumi"),
  ("natuche"),
  ("natun"),
  ("nauka"),
  ("nautica"),
  ("navaneeta"),
  ("naveena"),
  ("navit"),
  ("nawaal"),
  ("nawfa"),
  ("nawwaara"),
  ("nayana"),
  ("nayantara"),
  ("nayara"),
  ("nayeli"),
  ("nayely"),
  ("nayoko"),
  ("naysa"),
  ("nazarova"),
  ("nazeeha"),
  ("nazeema"),
  ("nazima"),
  ("nazmiyya"),
  ("nea"),
  ("neala"),
  ("nebracha"),
  ("nebraga"),
  ("nechama"),
  ("necie"),
  ("necole"),
  ("neda"),
  ("nedana"),
  ("nedelia"),
  ("nediva"),
  ("nedivah"),
  ("nedra"),
  ("neeharika"),
  ("neeja"),
  ("neela"),
  ("neelabja"),
  ("neelakshi"),
  ("neelanjana"),
  ("neelkamal"),
  ("neeltje"),
  ("neely"),
  ("neema"),
  ("neena"),
  ("neepa"),
  ("neeraja"),
  ("neeta"),
  ("neeti"),
  ("neha"),
  ("nehal"),
  ("nehama"),
  ("neida"),
  ("neiva"),
  ("nekana"),
  ("nekane"),
  ("nekrasa"),
  ("nekrasia"),
  ("nelda"),
  ("nelia"),
  ("nelida"),
  ("neliuba"),
  ("nelka"),
  ("nell"),
  ("nella"),
  ("nelle"),
  ("nelly"),
  ("nemilka"),
  ("nemka"),
  ("nena"),
  ("nene"),
  ("nenita"),
  ("neola"),
  ("neoma"),
  ("neomi"),
  ("neonila"),
  ("neorah"),
  ("nerea"),
  ("nereida"),
  ("neria"),
  ("nerissa"),
  ("nerita"),
  ("nerys"),
  ("nesdits"),
  ("nesha"),
  ("nessa"),
  ("nessia"),
  ("nesy"),
  ("neta"),
  ("netis"),
  ("netka"),
  ("netra"),
  ("netravati"),
  ("netta"),
  ("nettie"),
  ("neva"),
  ("nevaeh"),
  ("neve"),
  ("neveah"),
  ("neviah"),
  ("neza"),
  ("nezhatok"),
  ("nezhdakha"),
  ("nezhka"),
  ("nga"),
  ("ngan"),
  ("ngoc"),
  ("nguyet"),
  ("nia"),
  ("nicanora"),
  ("nicci"),
  ("nichelle"),
  ("nichole"),
  ("nicholle"),
  ("nicia"),
  ("nicki"),
  ("nickie"),
  ("nickole"),
  ("nicol"),
  ("nicola"),
  ("nicolasa"),
  ("nicolette"),
  ("nicolle"),
  ("nida"),
  ("nidhi"),
  ("nidia"),
  ("nidra"),
  ("niesha"),
  ("nieve"),
  ("nieves"),
  ("nifantova"),
  ("nighean"),
  ("nighinn"),
  ("niharika"),
  ("nijlon"),
  ("nika"),
  ("nikhita"),
  ("niki"),
  ("nikia"),
  ("nikiforova"),
  ("nikita"),
  ("nikitina"),
  ("nikkya"),
  ("nikkylia"),
  ("nikole"),
  ("nikolena"),
  ("nikolina"),
  ("niksha"),
  ("nilasha"),
  ("nilaya"),
  ("nilda"),
  ("nileen"),
  ("nili"),
  ("nilima"),
  ("niloufer"),
  ("nilsa"),
  ("nimfodora"),
  ("nin"),
  ("nina"),
  ("ninacska"),
  ("ninel"),
  ("ninette"),
  ("ninfa"),
  ("ninockha"),
  ("ninon"),
  ("ninotchka"),
  ("nipa"),
  ("nira"),
  ("niral"),
  ("niranjana"),
  ("niria"),
  ("nirit"),
  ("nirmala"),
  ("nirmayi"),
  ("nirupa"),
  ("nirupama"),
  ("nirveli"),
  ("nisha"),
  ("nishi"),
  ("nishithini"),
  ("nishtha"),
  ("nisi"),
  ("nisma"),
  ("nita"),
  ("nitara"),
  ("nitasha"),
  ("nitca"),
  ("niti"),
  ("nittawosew"),
  ("nituna"),
  ("nitya"),
  ("nityapriya"),
  ("nitza"),
  ("nitzana"),
  ("nitzanah"),
  ("nivedita"),
  ("nivritti"),
  ("nixie"),
  ("nixzaliz"),
  ("niyati"),
  ("nizana"),
  ("noa"),
  ("nobuko"),
  ("noelani"),
  ("noele"),
  ("noelia"),
  ("noella"),
  ("noelle"),
  ("noemi"),
  ("noemie"),
  ("noga"),
  ("nohealani"),
  ("nohely"),
  ("nohemi"),
  ("nokomis"),
  ("nola"),
  ("nolcha"),
  ("noma"),
  ("nomi"),
  ("nona"),
  ("nonie"),
  ("nonna"),
  ("noopur"),
  ("noor"),
  ("noora"),
  ("nooriyya"),
  ("noorjehan"),
  ("nora"),
  ("norah"),
  ("norberta"),
  ("nordica"),
  ("noreen"),
  ("noreena"),
  ("norene"),
  ("nori"),
  ("norie"),
  ("noriko"),
  ("norine"),
  ("norma"),
  ("nostasia"),
  ("nova"),
  ("novella"),
  ("novia"),
  ("noy"),
  ("nozomi"),
  ("nuala"),
  ("nubia"),
  ("nuha"),
  ("nu'ma"),
  ("numees"),
  ("nuna"),
  ("nunekhiia"),
  ("nupura"),
  ("nureet"),
  ("nuria"),
  ("nurit"),
  ("nurita"),
  ("nusa"),
  ("nusaiba"),
  ("nusi"),
  ("nusrat"),
  ("nutan"),
  ("nuttah"),
  ("nuzha"),
  ("nya"),
  ("nyah"),
  ("nyasia"),
  ("nydia"),
  ("nyesha"),
  ("nyla"),
  ("nylah"),
  ("nynette"),
  ("nyoko"),
  ("nyree"),
  ("nyura"),
  ("nyusha"),
  ("oba"),
  ("obdulia"),
  ("obelia"),
  ("obrezkova"),
  ("oceane"),
  ("ochiyo"),
  ("octavia"),
  ("oda"),
  ("odahingum"),
  ("odalis"),
  ("odalys"),
  ("odanda"),
  ("odeda"),
  ("odede"),
  ("odeletta"),
  ("odelette"),
  ("odelia"),
  ("odera"),
  ("odessa"),
  ("odetta"),
  ("odette"),
  ("odigitriia"),
  ("odila"),
  ("odile"),
  ("odilia"),
  ("odintsova"),
  ("odra"),
  ("ofce"),
  ("ofelia"),
  ("ofimia"),
  ("ofira"),
  ("ofra"),
  ("ogafia"),
  ("ogafitsa"),
  ("ogashka"),
  ("ogin"),
  ("ografena"),
  ("ogrifina"),
  ("ogrofena"),
  ("ogrufena"),
  ("ogrufina"),
  ("oharu"),
  ("oihane"),
  ("oiwyna"),
  ("ojal"),
  ("ojaswini"),
  ("okalani"),
  ("oki"),
  ("okichi"),
  ("okiku"),
  ("okinfieva"),
  ("oksana"),
  ("oksanochka"),
  ("okseniia"),
  ("oksinia"),
  ("oksiutka"),
  ("oktyabrina"),
  ("okulina"),
  ("ola"),
  ("olademis"),
  ("olathe"),
  ("olava"),
  ("olechka"),
  ("oleksandra"),
  ("olena"),
  ("olene"),
  ("olenitsa"),
  ("olenka"),
  ("olesia"),
  ("oleta"),
  ("olevia"),
  ("olfereva"),
  ("olga"),
  ("olginitsa"),
  ("olgirdovna"),
  ("olgov"),
  ("oliana"),
  ("olimpia"),
  ("olimpiada"),
  ("olina"),
  ("olinda"),
  ("oline"),
  ("olisa"),
  ("olisava"),
  ("oliva"),
  ("olive"),
  ("olivera"),
  ("oliveria"),
  ("olivia"),
  ("olkha"),
  ("olwen"),
  ("olwina"),
  ("olwyn"),
  ("olya"),
  ("olympe"),
  ("olympia"),
  ("olzhbeta"),
  ("oma"),
  ("omah"),
  ("omana"),
  ("omat"),
  ("omega"),
  ("omelfa"),
  ("omette"),
  ("omie"),
  ("ominotago"),
  ("omitsu"),
  ("ona"),
  ("onaona"),
  ("onawa"),
  ("ondreiana"),
  ("oneida"),
  ("oni"),
  ("onida"),
  ("onie"),
  ("onit"),
  ("onita"),
  ("onora"),
  ("onoslava"),
  ("ontonia"),
  ("ontsiforova"),
  ("ontsyforova"),
  ("oona"),
  ("oonagh"),
  ("ootadabun"),
  ("opa"),
  ("ophelia"),
  ("ophelie"),
  ("ophira"),
  ("ophra"),
  ("ophrah"),
  ("oprah"),
  ("oprosiniia"),
  ("orah"),
  ("oralee"),
  ("orali"),
  ("oralia"),
  ("orane"),
  ("ordena"),
  ("orenda"),
  ("orenka"),
  ("oretha"),
  ("orghlaith"),
  ("oria"),
  ("oriana"),
  ("orida"),
  ("orina"),
  ("orinda"),
  ("orino"),
  ("orla"),
  ("orlaith"),
  ("orlantha"),
  ("orlee"),
  ("orlena"),
  ("orlenda"),
  ("orlene"),
  ("orli"),
  ("orlina"),
  ("orlitza"),
  ("ornella"),
  ("ornetta"),
  ("orpah"),
  ("orpha"),
  ("orquidea"),
  ("orquidia"),
  ("orsha"),
  ("orshinaia"),
  ("ortemeva"),
  ("orva"),
  ("orya"),
  ("orzora"),
  ("orzsebet"),
  ("osana"),
  ("osane"),
  ("osipova"),
  ("osliabia"),
  ("ostafia"),
  ("ostankova"),
  ("ostashkova"),
  ("osyenya"),
  ("otelia"),
  ("otilia"),
  ("otsu"),
  ("otsune"),
  ("ottavia"),
  ("ottie"),
  ("ottilie"),
  ("otylia"),
  ("ouida"),
  ("ova"),
  ("ovdeeva"),
  ("ovdiukha"),
  ("ovdokea"),
  ("ovdotia"),
  ("ovdotitsa"),
  ("ovtsa"),
  ("owena"),
  ("oxana"),
  ("ozell"),
  ("ozella"),
  ("pabla"),
  ("paciencia"),
  ("padma"),
  ("padmaja"),
  ("padmajai"),
  ("padmakali"),
  ("padmal"),
  ("padmalaya"),
  ("padmalochana"),
  ("padmavati"),
  ("padmini"),
  ("paili"),
  ("paisley"),
  ("paityn"),
  ("pakhi"),
  ("pakshi"),
  ("pakuna"),
  ("pakwa"),
  ("paladia"),
  ("palasha"),
  ("palba"),
  ("palila"),
  ("pall"),
  ("pallavi"),
  ("pallavini"),
  ("palma"),
  ("palmira"),
  ("paloma"),
  ("pam"),
  ("pamala"),
  ("pamelia"),
  ("pamella"),
  ("pamila"),
  ("pamula"),
  ("pamuy"),
  ("panchali"),
  ("pandara"),
  ("pandita"),
  ("pandora"),
  ("panfilova"),
  ("pankaja lotus"),
  ("panna"),
  ("pansemna"),
  ("pansy"),
  ("panthea"),
  ("pantislava"),
  ("pantyslawa"),
  ("panya"),
  ("paola"),
  ("papina"),
  ("paquita"),
  ("paraaha"),
  ("paralee"),
  ("parama"),
  ("parameshwari"),
  ("paramita"),
  ("paramona"),
  ("parasha"),
  ("parasia"),
  ("paraskova"),
  ("paraskovga"),
  ("paraskovgiia"),
  ("paraskovia"),
  ("paraskoviia"),
  ("parbarti"),
  ("pari"),
  ("paridhi"),
  ("parinita"),
  ("parnal"),
  ("parnashri"),
  ("parnella"),
  ("parni"),
  ("parnik"),
  ("parnika"),
  ("paroskova"),
  ("parthenia"),
  ("parthivi"),
  ("particia"),
  ("parul"),
  ("parvani"),
  ("parvati"),
  ("parveen"),
  ("pascala"),
  ("pascale"),
  ("pascaline"),
  ("pasclina"),
  ("pasha"),
  ("pastora"),
  ("pasty"),
  ("patience"),
  ("patmanjari"),
  ("patralekha"),
  ("patria"),
  ("patrica"),
  ("patrina"),
  ("patrizia"),
  ("patrova"),
  ("patti"),
  ("pattie"),
  ("patty"),
  ("paula"),
  ("paulene"),
  ("pauletta"),
  ("paulette"),
  ("paulina"),
  ("pauline"),
  ("paulita"),
  ("pauwau"),
  ("pavana"),
  ("pavati"),
  ("pavla"),
  ("pavlova"),
  ("pavloveia"),
  ("payal"),
  ("payoja"),
  ("payten"),
  ("paza"),
  ("pazia"),
  ("pazice"),
  ("pazit"),
  ("pchuneia"),
  ("pearle"),
  ("pearlene"),
  ("pearline"),
  ("pearly"),
  ("pechta"),
  ("pedra"),
  ("peg"),
  ("peggie"),
  ("peggy"),
  ("pei"),
  ("pelaga"),
  ("pelageia"),
  ("pelageya"),
  ("pelagia"),
  ("pelagiia"),
  ("penarddun"),
  ("penelope"),
  ("penina"),
  ("peninah"),
  ("penney"),
  ("penni"),
  ("pennie"),
  ("penny"),
  ("pensee"),
  ("peony"),
  ("pepin"),
  ("pepita"),
  ("pepper"),
  ("perchta"),
  ("peredeslava"),
  ("perfecta"),
  ("perke"),
  ("perkhta"),
  ("perkhte"),
  ("perla"),
  ("pernilla"),
  ("perpetuia"),
  ("persephone"),
  ("persis"),
  ("perzsi"),
  ("perzsike"),
  ("peta"),
  ("petra"),
  ("petrina"),
  ("petronela"),
  ("petronella"),
  ("petronila"),
  ("petrova"),
  ("petrovna"),
  ("petsa"),
  ("petunia"),
  ("peza"),
  ("phebe"),
  ("phedra"),
  ("pheodora"),
  ("phiala"),
  ("philana"),
  ("philippa"),
  ("phillipa"),
  ("phillis"),
  ("philomena"),
  ("phiroza"),
  ("phoebe"),
  ("phoena"),
  ("phoolan"),
  ("phung"),
  ("phuong"),
  ("phylicia"),
  ("phylis"),
  ("phyliss"),
  ("phyllis"),
  ("pia"),
  ("piama"),
  ("piedad"),
  ("piera"),
  ("pierretta"),
  ("pierrette"),
  ("pietra"),
  ("piina"),
  ("piki"),
  ("pilar"),
  ("pilialoha"),
  ("pilis"),
  ("piminova"),
  ("ping"),
  ("pinga"),
  ("pingala"),
  ("pinkie"),
  ("piper"),
  ("pippa"),
  ("pirueva"),
  ("pishachi"),
  ("pithasthana"),
  ("pitina"),
  ("pival"),
  ("piyali"),
  ("placenta"),
  ("placida"),
  ("plakida"),
  ("platonida"),
  ("pleasance"),
  ("pok"),
  ("pokinaria"),
  ("poladia"),
  ("polazhitsa"),
  ("polia"),
  ("polikseniia"),
  ("polikwaptiwa"),
  ("polinaria"),
  ("poliuzhaia"),
  ("poll"),
  ("pollie"),
  ("polly"),
  ("poloma"),
  ("poloneika"),
  ("polotsk"),
  ("polotska"),
  ("poloudnitsa"),
  ("polovinova"),
  ("pomnislavka"),
  ("pompliia"),
  ("ponaria"),
  ("pooja"),
  ("poonam"),
  ("poorbi"),
  ("poornima"),
  ("poorvi"),
  ("popliia"),
  ("popova"),
  ("poppy"),
  ("poroskova"),
  ("porsche"),
  ("porsha"),
  ("portia"),
  ("poushali"),
  ("poved"),
  ("powaqa"),
  ("prabha"),
  ("prabhati"),
  ("prachi"),
  ("pradeepta"),
  ("pragati"),
  ("pragya"),
  ("pragyaparamita"),
  ("pragyawati"),
  ("prama"),
  ("pramada"),
  ("pramila"),
  ("pramiti"),
  ("pramlocha"),
  ("pranati"),
  ("prapti"),
  ("prarthana"),
  ("prashansa"),
  ("prashanti"),
  ("praskovja"),
  ("praskovya"),
  ("pratibha"),
  ("pratigya"),
  ("pratima"),
  ("pratishtha"),
  ("prebrana"),
  ("precious"),
  ("predslava"),
  ("predyslava"),
  ("preeti"),
  ("preia"),
  ("preksedys"),
  ("prema"),
  ("premala"),
  ("premila"),
  ("premislava"),
  ("prepedigna"),
  ("prerana"),
  ("presencia"),
  ("presley"),
  ("presta"),
  ("presthlava"),
  ("preyasi"),
  ("priba"),
  ("pribyslava"),
  ("pricilla"),
  ("priia"),
  ("prikseda"),
  ("primavera"),
  ("princess"),
  ("priscila"),
  ("priscilla"),
  ("priskilla"),
  ("priskula"),
  ("prita"),
  ("pritha"),
  ("priti"),
  ("pritika"),
  ("pritikana"),
  ("pritilata"),
  ("priyadarshini"),
  ("priyal"),
  ("priyam"),
  ("priyamvada"),
  ("priyanka"),
  ("proksha"),
  ("proniakina"),
  ("prosdoka"),
  ("proskudiia"),
  ("providencia"),
  ("prudence"),
  ("prudencia"),
  ("prunella"),
  ("prunellie"),
  ("przhibislava"),
  ("przybyslawa"),
  ("puebla"),
  ("puja"),
  ("pujita"),
  ("pukhleriia"),
  ("pules"),
  ("pulkheriia"),
  ("puloma"),
  ("puna"),
  ("punam"),
  ("punarnava"),
  ("punita"),
  ("punita pure"),
  ("punthali"),
  ("pura"),
  ("pureza"),
  ("purisima"),
  ("purnima"),
  ("purva"),
  ("purvaja"),
  ("pushpa"),
  ("pushpanjali"),
  ("pushpita"),
  ("pusti"),
  ("puteshineia"),
  ("putok"),
  ("putokoveia"),
  ("putul"),
  ("qaaida"),
  ("qamraaa"),
  ("qeturah"),
  ("qiana"),
  ("qiao"),
  ("qing yuan"),
  ("qisma"),
  ("quana"),
  ("quanesha"),
  ("quanesia"),
  ("quansha"),
  ("quarrtulain"),
  ("quasar"),
  ("queen"),
  ("queenie"),
  ("queisha"),
  ("querida"),
  ("questa"),
  ("quiana"),
  ("quinta"),
  ("quyen"),
  ("raabia"),
  ("raabiya"),
  ("raadiya"),
  ("raafida"),
  ("raaida"),
  ("raakhi"),
  ("raananah"),
  ("raaniya"),
  ("rabah"),
  ("rabdaa"),
  ("rabia"),
  ("raca"),
  ("rachael"),
  ("rachal"),
  ("rachana"),
  ("racheal"),
  ("rachele"),
  ("rachell"),
  ("rachelle"),
  ("rachita"),
  ("rachna"),
  ("racquel"),
  ("rada"),
  ("radha"),
  ("radhika"),
  ("radia"),
  ("radivilovna"),
  ("radiyya"),
  ("radka"),
  ("rado"),
  ("radok"),
  ("radokhna"),
  ("radokovaia"),
  ("radonia"),
  ("radosha"),
  ("radoslava"),
  ("radosta"),
  ("radoste"),
  ("radozte"),
  ("radslava"),
  ("radwa"),
  ("rae"),
  ("raeann"),
  ("raechel"),
  ("raegan"),
  ("raelene"),
  ("raelyn"),
  ("raelynn"),
  ("rafaela"),
  ("rafeeda"),
  ("rafeeqa"),
  ("rafela"),
  ("rafiya"),
  ("ragini"),
  ("ragneda"),
  ("ragnhildrakel"),
  ("ragosna"),
  ("raguel"),
  ("raheema"),
  ("rahel"),
  ("rahil"),
  ("rahma"),
  ("raicheal"),
  ("raicho"),
  ("raihaana"),
  ("raimunda"),
  ("raina"),
  ("raisa"),
  ("raison"),
  ("raissa"),
  ("raita"),
  ("raiza"),
  ("raizel"),
  ("rajalakshmi"),
  ("rajanigandha"),
  ("rajata"),
  ("rajeshwari"),
  ("rajhans"),
  ("rajkumari"),
  ("rajna"),
  ("rajnandhini"),
  ("rajni"),
  ("rajshri"),
  ("raka"),
  ("rakel"),
  ("rakesha"),
  ("rakhi"),
  ("rakhiel"),
  ("raku"),
  ("rama"),
  ("ramani"),
  ("rambha"),
  ("ramerra"),
  ("rameshwari"),
  ("ramira"),
  ("ramita"),
  ("ramla"),
  ("ramona"),
  ("ramonita"),
  ("ramya"),
  ("ramza"),
  ("ramziyya"),
  ("ran"),
  ("rana"),
  ("ranae"),
  ("randa"),
  ("randee"),
  ("randi"),
  ("rane"),
  ("ranee"),
  ("rangana"),
  ("rania"),
  ("ranice"),
  ("ranita"),
  ("ranjana"),
  ("ranjini"),
  ("ranjita"),
  ("raoghnailt"),
  ("raonaid"),
  ("raphaela"),
  ("raphaella"),
  ("raquel"),
  ("rashaa"),
  ("rashawn"),
  ("ra'shawn"),
  ("rasheba"),
  ("rasheeda"),
  ("rasheeqa"),
  ("rashi"),
  ("rashida"),
  ("rashmi"),
  ("rashmika"),
  ("rashona"),
  ("rasia"),
  ("rasika"),
  ("rasine"),
  ("rasna"),
  ("rathnait"),
  ("rathtyen"),
  ("rati"),
  ("ratka"),
  ("ratna"),
  ("ratnabala"),
  ("ratnabali"),
  ("ratnajyouti"),
  ("ratnalekha"),
  ("ratnali"),
  ("ratnamala"),
  ("ratnangi"),
  ("ratnaprabha"),
  ("ratnapriya"),
  ("ratnavali"),
  ("ratslava"),
  ("ravati"),
  ("raven"),
  ("raviprabha"),
  ("rawda"),
  ("raya"),
  ("raye"),
  ("rayhelle"),
  ("raylene"),
  ("raymonde"),
  ("rayna"),
  ("rayne"),
  ("rayyana"),
  ("razeena"),
  ("razi"),
  ("raziya"),
  ("rea"),
  ("reanna"),
  ("reatha"),
  ("reba"),
  ("rebbeca"),
  ("rebbecca"),
  ("rebeca"),
  ("rebecka"),
  ("rebekah"),
  ("rebekkah"),
  ("rechkina"),
  ("reda"),
  ("redonna"),
  ("reema"),
  ("reena"),
  ("refugia"),
  ("regena"),
  ("regenia"),
  ("regina"),
  ("regine"),
  ("reginia"),
  ("reia"),
  ("reicza"),
  ("reiko"),
  ("reina"),
  ("reine"),
  ("reita"),
  ("rekha"),
  ("relyea"),
  ("rema"),
  ("remedios"),
  ("remi"),
  ("remona"),
  ("rena"),
  ("renada"),
  ("renae"),
  ("renata"),
  ("renate"),
  ("renatta"),
  ("renay"),
  ("renda"),
  ("renea"),
  ("renee"),
  ("renell"),
  ("renetta"),
  ("renita"),
  ("renna"),
  ("renu"),
  ("renuka"),
  ("resaunna"),
  ("resham"),
  ("re'shaun"),
  ("reshaunda"),
  ("reshawnda"),
  ("reshma"),
  ("reshmi"),
  ("reshunda"),
  ("ressie"),
  ("reta"),
  ("retha"),
  ("retta"),
  ("reuel"),
  ("reva"),
  ("revati"),
  ("reveka"),
  ("reya"),
  ("reyna"),
  ("reynalda"),
  ("rhan"),
  ("rhawn"),
  ("rhea"),
  ("rheba"),
  ("rhedyn"),
  ("rhiain"),
  ("rhian"),
  ("rhianna"),
  ("rhiannon"),
  ("rhianwen"),
  ("rhianwyn"),
  ("rhoda"),
  ("rhona"),
  ("rhonda"),
  ("rhonwen"),
  ("rhoslyn"),
  ("rhosyn"),
  ("ria"),
  ("rianna"),
  ("rica"),
  ("ricadonna"),
  ("ricarda"),
  ("richa"),
  ("richael"),
  ("richca"),
  ("richelle"),
  ("richica"),
  ("richika"),
  ("richikha"),
  ("richtca"),
  ("richza"),
  ("riddhi"),
  ("rie"),
  ("rieko"),
  ("rif'a"),
  ("rifqa"),
  ("rigmora"),
  ("rihaab"),
  ("rihanna"),
  ("riju"),
  ("rijuta"),
  ("rika"),
  ("rikako"),
  ("riksa"),
  ("riku"),
  ("rilla"),
  ("rima"),
  ("rimona"),
  ("rina"),
  ("rinako"),
  ("rini"),
  ("rinna"),
  ("rinnah"),
  ("rioghnach"),
  ("riona"),
  ("ripsimia"),
  ("risa"),
  ("risako"),
  ("rishika"),
  ("rishona"),
  ("rislava"),
  ("rita"),
  ("riti"),
  ("ritsuko"),
  ("ritu"),
  ("riva"),
  ("rive"),
  ("rivka"),
  ("riya"),
  ("roana"),
  ("robbi"),
  ("robbyn"),
  ("robena"),
  ("roberta"),
  ("robina"),
  ("robinetta"),
  ("robinette"),
  ("robyn"),
  ("rocellie"),
  ("rochel"),
  ("rochell"),
  ("rochelle"),
  ("rocio"),
  ("roderica"),
  ("roderiga"),
  ("roesia"),
  ("rogned"),
  ("rohais"),
  ("rohana"),
  ("rohini"),
  ("roial"),
  ("rois"),
  ("roja"),
  ("roksana"),
  ("rolanda"),
  ("rolande"),
  ("roldana"),
  ("rolynda"),
  ("roma"),
  ("romaine"),
  ("romana"),
  ("romanovna"),
  ("romelia"),
  ("romi"),
  ("romia"),
  ("romona"),
  ("rona"),
  ("ronda"),
  ("ronella"),
  ("ronelle"),
  ("rong"),
  ("ronia"),
  ("ronice"),
  ("ronit"),
  ("ronli"),
  ("ronna"),
  ("ronni"),
  ("ronnie"),
  ("rosa"),
  ("rosalba"),
  ("rosalee"),
  ("rosalia"),
  ("rosalie"),
  ("rosalina"),
  ("rosalind"),
  ("rosalinda"),
  ("rosalinde"),
  ("rosaline"),
  ("rosalva"),
  ("rosalyn"),
  ("rosamar"),
  ("rosamaria"),
  ("rosamond"),
  ("rosamonde"),
  ("rosana"),
  ("rosann"),
  ("rosanna"),
  ("rosanne"),
  ("rosaria"),
  ("rosaura"),
  ("roscislawa"),
  ("rose"),
  ("roseann"),
  ("roseanna"),
  ("roseanne"),
  ("roselee"),
  ("roselia"),
  ("roseline"),
  ("rosella"),
  ("roselle"),
  ("roselyn"),
  ("rosemarie"),
  ("rosemary"),
  ("rosena"),
  ("rosenda"),
  ("rosetta"),
  ("rosette"),
  ("rosey"),
  ("roshawna"),
  ("roshni"),
  ("rosia"),
  ("rosie"),
  ("rosina"),
  ("rosine"),
  ("rosio"),
  ("rosita"),
  ("rosiyn"),
  ("roslava"),
  ("roslyn"),
  ("rossana"),
  ("rossitza"),
  ("rostislava"),
  ("rosy"),
  ("roux"),
  ("rowena"),
  ("roxana"),
  ("roxane"),
  ("roxann"),
  ("roxanna"),
  ("roxanne"),
  ("roxie"),
  ("roxy"),
  ("royale"),
  ("roz"),
  ("roza"),
  ("rozalia"),
  ("rozamond"),
  ("rozanne"),
  ("rozella"),
  ("rozene"),
  ("rozgneda"),
  ("rozhneva"),
  ("rozyuka"),
  ("ruana"),
  ("rubaina"),
  ("rubi"),
  ("rubie"),
  ("rubye"),
  ("ruchi"),
  ("ruchira"),
  ("rudrani"),
  ("rudrapriya"),
  ("rufa"),
  ("rufina"),
  ("rui"),
  ("rujuta"),
  ("rukma"),
  ("rukmini"),
  ("ruksana"),
  ("rulza"),
  ("ruma"),
  ("rumaana"),
  ("rumiko"),
  ("rupa"),
  ("rupali"),
  ("rupashi"),
  ("rupashri"),
  ("ruqayya"),
  ("ruri"),
  ("ruriko"),
  ("rusa"),
  ("rusna"),
  ("ruta"),
  ("rutaiba"),
  ("rutha"),
  ("ruthann"),
  ("ruthanne"),
  ("ruthe"),
  ("ruthie"),
  ("ruwaida"),
  ("ryann"),
  ("ryleigh"),
  ("rylie"),
  ("ryo"),
  ("ryoko"),
  ("ryska"),
  ("saabiqa"),
  ("saabira"),
  ("saafiyya"),
  ("saahira"),
  ("saajida"),
  ("saaliha"),
  ("saalima"),
  ("saamiqa"),
  ("saamyya"),
  ("saara"),
  ("saba"),
  ("sabaaha"),
  ("sabana"),
  ("sabeeha"),
  ("sabeeka"),
  ("sabia"),
  ("sabina"),
  ("sabine"),
  ("sabiyya"),
  ("sable"),
  ("sabra"),
  ("sabreen"),
  ("sabrina"),
  ("sabriyya"),
  ("sachi"),
  ("sachiko"),
  ("sachita"),
  ("sada"),
  ("sadaf"),
  ("sadako"),
  ("sade"),
  ("sadeeda"),
  ("sadeeqa"),
  ("sadgati"),
  ("sadguna"),
  ("sadhan"),
  ("sadhana"),
  ("sadhbba"),
  ("sadhbh"),
  ("sadhika"),
  ("sadhvi"),
  ("sadie"),
  ("sadiqua"),
  ("sadye"),
  ("sae"),
  ("saeeda"),
  ("saeko"),
  ("saeran"),
  ("saeth"),
  ("safaaa"),
  ("safara"),
  ("saffir"),
  ("safia"),
  ("safiyya"),
  ("safwa"),
  ("saga"),
  ("sagarika"),
  ("saguna"),
  ("sahana"),
  ("sahar"),
  ("saheli"),
  ("sahheeda"),
  ("sahiba"),
  ("sahila"),
  ("sahkyo"),
  ("sahla"),
  ("sahsha"),
  ("sai"),
  ("saidah"),
  ("saige"),
  ("saito"),
  ("sajaa"),
  ("sajala"),
  ("sajiyya"),
  ("sajni"),
  ("sakamae"),
  ("sakari"),
  ("sakeena"),
  ("sakhi"),
  ("saki"),
  ("sakiko"),
  ("sakina"),
  ("sakra"),
  ("sakue"),
  ("sakujna"),
  ("sakuko"),
  ("sakura"),
  ("sakurako"),
  ("sakuro"),
  ("salali"),
  ("salbatora"),
  ("saleema"),
  ("salena"),
  ("salene"),
  ("salihah"),
  ("salila"),
  ("salima"),
  ("salina"),
  ("salley"),
  ("sallie"),
  ("sally"),
  ("salma"),
  ("saloma"),
  ("salome"),
  ("salvadora"),
  ("salvatora"),
  ("salwa"),
  ("sama"),
  ("samara"),
  ("samarina"),
  ("samata"),
  ("samatha"),
  ("sameeha"),
  ("sameena"),
  ("sameera"),
  ("samella"),
  ("samhita"),
  ("samicah"),
  ("samidha"),
  ("samiksha"),
  ("samira"),
  ("samit"),
  ("samita"),
  ("samiyah"),
  ("sampada"),
  ("sampatti"),
  ("sampriti"),
  ("samraa"),
  ("samuela"),
  ("samvarta"),
  ("sana"),
  ("sanaa"),
  ("sanaaa"),
  ("sanad"),
  ("sanai"),
  ("sanako"),
  ("sananda"),
  ("sancha"),
  ("sanchali"),
  ("sanchaya"),
  ("sanchita"),
  ("sancia"),
  ("sanda"),
  ("sandee"),
  ("sandhaya"),
  ("sandhya"),
  ("sandi"),
  ("sandie"),
  ("sandrine"),
  ("sangita"),
  ("saniya"),
  ("saniyah"),
  ("sanjana"),
  ("sanjivani"),
  ("sanjna"),
  ("sanjuana"),
  ("sanjuanita"),
  ("sanjukta"),
  ("sanjula"),
  ("sanjushree"),
  ("sankul"),
  ("sannidhi"),
  ("sanora"),
  ("sanskriti"),
  ("santa"),
  ("santawana"),
  ("santayani"),
  ("santianna"),
  ("santina"),
  ("sanvali"),
  ("sanwari"),
  ("sany"),
  ("sanyakta"),
  ("sanyukta"),
  ("saori"),
  ("saparna"),
  ("saphala"),
  ("sapna"),
  ("sapozhnika"),
  ("sapphira"),
  ("sapphire"),
  ("saquina"),
  ("sara"),
  ("sarada"),
  ("sarahi"),
  ("sarai"),
  ("saraid"),
  ("sarakshi"),
  ("sarala"),
  ("sarama"),
  ("saran"),
  ("saranya"),
  ("sarasa"),
  ("sarasi"),
  ("sarasvati"),
  ("saraswati"),
  ("saravati"),
  ("saray"),
  ("sarayu"),
  ("sarbani"),
  ("sarea"),
  ("sarff"),
  ("sari"),
  ("sariah"),
  ("sarika"),
  ("sarina"),
  ("sarisha"),
  ("sarit"),
  ("sarita"),
  ("sarjana"),
  ("saroja"),
  ("sarojini"),
  ("saruprani"),
  ("saryu"),
  ("sascha"),
  ("sashah"),
  ("sashana"),
  ("sashenka"),
  ("sashi"),
  ("sashia"),
  ("sashka"),
  ("sasilvia"),
  ("saskia"),
  ("sasmita"),
  ("sata"),
  ("sati"),
  ("satin"),
  ("satinka"),
  ("satoko"),
  ("satomi"),
  ("satu"),
  ("saturnina"),
  ("satya"),
  ("satyarupa"),
  ("satyavati"),
  ("sau"),
  ("saudamini"),
  ("saumya"),
  ("saundra"),
  ("saura"),
  ("sausha"),
  ("savana"),
  ("savanah"),
  ("savanna"),
  ("savannah"),
  ("savarna"),
  ("savastian"),
  ("savastianova"),
  ("savita"),
  ("savitari seema"),
  ("savitashri"),
  ("savitri"),
  ("sawada"),
  ("sawako"),
  ("sawini"),
  ("saya"),
  ("sayeeda"),
  ("sayo"),
  ("sayoko"),
  ("sayuri"),
  ("sbyslava"),
  ("scarlet"),
  ("scarlett"),
  ("schlomit"),
  ("schmetterling"),
  ("scota"),
  ("seana"),
  ("seanna"),
  ("searlait"),
  ("season"),
  ("sebastiana"),
  ("sebastiene"),
  ("sebrina"),
  ("secoiya"),
  ("see"),
  ("seema"),
  ("seemanti"),
  ("seemantini"),
  ("seerat"),
  ("segulah"),
  ("segunda"),
  ("sei"),
  ("seiko"),
  ("seina"),
  ("sejal"),
  ("seka"),
  ("seki"),
  ("sela"),
  ("selah"),
  ("sele"),
  ("selena"),
  ("selene"),
  ("seleta"),
  ("selianka"),
  ("selima"),
  ("selina"),
  ("selivankov"),
  ("selivankova"),
  ("selma"),
  ("semadar"),
  ("semanti"),
  ("semenova"),
  ("semenovskaia"),
  ("semira"),
  ("semislava"),
  ("sen"),
  ("sena"),
  ("senaida"),
  ("senalda"),
  ("senia"),
  ("senny"),
  ("senona"),
  ("senta"),
  ("september"),
  ("sequoia"),
  ("serafima"),
  ("serafina"),
  ("serafine"),
  ("seraphina"),
  ("seraphine"),
  ("serefina"),
  ("seren"),
  ("serena"),
  ("serenity"),
  ("serilda"),
  ("serina"),
  ("serita"),
  ("setsuko"),
  ("sevastianiia"),
  ("sevastiiana"),
  ("sevati"),
  ("severina"),
  ("sevilla"),
  ("sevita"),
  ("sevti"),
  ("sfandra"),
  ("sha"),
  ("shaafia"),
  ("shaahida"),
  ("shaahira"),
  ("shaakira"),
  ("shaamila"),
  ("shabab"),
  ("shabalini"),
  ("shabana"),
  ("shabari"),
  ("shabeeba"),
  ("shabnum"),
  ("shachi"),
  ("shada"),
  ("shadhaa"),
  ("shae"),
  ("shaelan"),
  ("shafaaa"),
  ("shafee'a"),
  ("shafeeqa"),
  ("shagufta"),
  ("shahaada"),
  ("shahaama"),
  ("shaheena"),
  ("shaheera"),
  ("shahla"),
  ("shaibya"),
  ("shaila"),
  ("shaili"),
  ("shaimaaa"),
  ("shaina"),
  ("shajee'a"),
  ("shakambari"),
  ("shakeela"),
  ("shakeia"),
  ("shakeina"),
  ("shakia"),
  ("shakina"),
  ("shakini"),
  ("shakira"),
  ("shakita"),
  ("shakoora"),
  ("shakra"),
  ("shakti"),
  ("shakuntala"),
  ("shala"),
  ("shalaka"),
  ("shalanda"),
  ("shalesia"),
  ("shalini"),
  ("shalmali"),
  ("shalom"),
  ("shalon"),
  ("shalonda"),
  ("shalonna"),
  ("shama"),
  ("sham'a"),
  ("shamaail"),
  ("shambhavi"),
  ("shamecca"),
  ("shameema"),
  ("shameena"),
  ("shameka"),
  ("shamika"),
  ("shamim"),
  ("shamira"),
  ("shamita"),
  ("shampa"),
  ("shana"),
  ("shanae"),
  ("shanata"),
  ("shanda"),
  ("shandee"),
  ("shandi"),
  ("shandra"),
  ("shandrice"),
  ("shaneka"),
  ("shanel"),
  ("shanell"),
  ("shanelle"),
  ("shanequa"),
  ("shanessa"),
  ("shaneta"),
  ("shani"),
  ("shania"),
  ("shanice"),
  ("shaniece"),
  ("shanika"),
  ("shaniqua"),
  ("shanise"),
  ("shanish"),
  ("shanita"),
  ("shaniya"),
  ("shankari"),
  ("shankhamala"),
  ("shanna"),
  ("shannan"),
  ("shannel"),
  ("shannen"),
  ("shanta"),
  ("shantae"),
  ("shantair"),
  ("shantala"),
  ("shantay"),
  ("shantaya"),
  ("shante"),
  ("shantel"),
  ("shantell"),
  ("shantelle"),
  ("shantese"),
  ("shantewa"),
  ("shanti"),
  ("shantice"),
  ("shanton"),
  ("shantory"),
  ("shapa"),
  ("shaqeeqa"),
  ("shaquana"),
  ("shaquand"),
  ("shaquita"),
  ("shara"),
  ("sharada"),
  ("sharadini"),
  ("sharama"),
  ("sharanya"),
  ("sharda"),
  ("shardae"),
  ("sharday"),
  ("sharde"),
  ("sharee"),
  ("shareefa"),
  ("shareese"),
  ("sharell"),
  ("sharen"),
  ("shari"),
  ("sharice"),
  ("sharie"),
  ("sharika"),
  ("sharilyn"),
  ("sharis"),
  ("sharise"),
  ("sharisha"),
  ("sharita"),
  ("sharla"),
  ("sharleen"),
  ("sharlene"),
  ("sharmaine"),
  ("sharmila"),
  ("sharmistha"),
  ("sharne"),
  ("sharolyn"),
  ("sharonda"),
  ("sharri"),
  ("sharrita"),
  ("sharron"),
  ("sharvani"),
  ("sharvari"),
  ("sharyl"),
  ("sharyn"),
  ("shasa"),
  ("shasha"),
  ("shashawn"),
  ("shashi"),
  ("shashibala"),
  ("shashini"),
  ("shashirekha"),
  ("shasta"),
  ("shasti"),
  ("shaswati"),
  ("shatara"),
  ("shatarupa"),
  ("shatoya"),
  ("shauna"),
  ("shaunda"),
  ("shaundra"),
  ("shaunika"),
  ("shaunna"),
  ("shaunta"),
  ("shaunte"),
  ("shavon"),
  ("shavonda"),
  ("shavonne"),
  ("shawana"),
  ("shawanda"),
  ("shawanna"),
  ("shawna"),
  ("shawnda"),
  ("shawndriell"),
  ("shawnee"),
  ("shawnika"),
  ("shawnna"),
  ("shawnta"),
  ("shawntea"),
  ("shayla"),
  ("shaylee"),
  ("shayna"),
  ("shcastna"),
  ("shchastna"),
  ("sheba"),
  ("shedra"),
  ("sheela"),
  ("sheelah"),
  ("sheena"),
  ("sheera"),
  ("shefali"),
  ("shefalika"),
  ("sheila"),
  ("sheilah"),
  ("shejali"),
  ("shekeia"),
  ("shela"),
  ("shelah"),
  ("shelba"),
  ("shelbi"),
  ("shelbie"),
  ("shelia"),
  ("shella"),
  ("shelli"),
  ("shelovlevaya"),
  ("shemeka"),
  ("shemika"),
  ("shena"),
  ("shenice"),
  ("shenika"),
  ("shenita"),
  ("shenna"),
  ("shera"),
  ("sherece"),
  ("sheree"),
  ("shereece"),
  ("shereen"),
  ("sherell"),
  ("sheri"),
  ("sherice"),
  ("sherie"),
  ("sherika"),
  ("sherill"),
  ("sherilyn"),
  ("sherine"),
  ("sherise"),
  ("sherita"),
  ("sherlene"),
  ("sherley"),
  ("sherly"),
  ("sherlyn"),
  ("sherrell"),
  ("sherri"),
  ("sherrie"),
  ("sherril"),
  ("sherrill"),
  ("sherron"),
  ("sherry"),
  ("sherryl"),
  ("shery"),
  ("sheryl"),
  ("sheryll"),
  ("sheshebens"),
  ("shevanti"),
  ("sheyla"),
  ("shianne"),
  ("shibani"),
  ("shiela"),
  ("shige"),
  ("shika"),
  ("shikia"),
  ("shikita"),
  ("shila"),
  ("shilavati(a river"),
  ("shilpa"),
  ("shilpita"),
  ("shima"),
  ("shin"),
  ("shina"),
  ("shinjini"),
  ("shinobu"),
  ("shioko"),
  ("shiori"),
  ("shipra"),
  ("shira"),
  ("shirely"),
  ("shiri"),
  ("shiriaeva"),
  ("shirin"),
  ("shirl"),
  ("shirlee"),
  ("shirleen"),
  ("shirlene"),
  ("shirly"),
  ("shishirkana"),
  ("shitala"),
  ("shiuli"),
  ("shivangi"),
  ("shivani"),
  ("shizu"),
  ("shizue"),
  ("shizuka"),
  ("shizuko"),
  ("shkonka"),
  ("shobha"),
  ("shobhana"),
  ("shobhita"),
  ("shobhna"),
  ("shobi"),
  ("shoken"),
  ("shoko"),
  ("shona"),
  ("shonda"),
  ("shondra"),
  ("shonelle"),
  ("shonna"),
  ("shonta"),
  ("shontal"),
  ("shontaya"),
  ("shontecia"),
  ("shorashi"),
  ("shoshana"),
  ("shoshanah"),
  ("shrabana"),
  ("shraddha"),
  ("shradhdha"),
  ("shravana"),
  ("shravani"),
  ("shravanti"),
  ("shravasti"),
  ("shree"),
  ("shreela"),
  ("shreemayi"),
  ("shreeparna"),
  ("shreya"),
  ("shreyashi"),
  ("shri"),
  ("shridevi"),
  ("shridula"),
  ("shrigauri"),
  ("shrigeeta"),
  ("shrijani"),
  ("shrikirti"),
  ("shrikumari"),
  ("shrilata"),
  ("shrilekha"),
  ("shrimati"),
  ("shrimayi"),
  ("shrivalli"),
  ("shruti"),
  ("shu"),
  ("shuang"),
  ("shubhada"),
  ("shubhangi"),
  ("shubhra"),
  ("shuchismita"),
  ("shuchita"),
  ("shu fang"),
  ("shukla"),
  ("shukriyya"),
  ("shukti"),
  ("shulka"),
  ("shuman"),
  ("shushanika"),
  ("shvakova"),
  ("shweta"),
  ("shyama"),
  ("shyamala"),
  ("shyamali"),
  ("shyamalika"),
  ("shyamalima"),
  ("shyamangi"),
  ("shyamari"),
  ("shyamasri"),
  ("shyamlata"),
  ("shyann"),
  ("shyanne"),
  ("shyla"),
  ("sian"),
  ("siany"),
  ("siarah"),
  ("sibani"),
  ("sibeal"),
  ("sibyl"),
  ("sibyla"),
  ("sibylla"),
  ("siddeeqa"),
  ("siddheshwari"),
  ("siddhi"),
  ("siddhima"),
  ("sidonia"),
  ("sidonie"),
  ("sidorova"),
  ("siena"),
  ("sienna"),
  ("sierra"),
  ("signe"),
  ("signilda"),
  ("sigrid"),
  ("sihu"),
  ("sika"),
  ("sikata"),
  ("sikta"),
  ("silana"),
  ("sile"),
  ("sileas"),
  ("silva"),
  ("silvana"),
  ("silvia"),
  ("sima"),
  ("simbra"),
  ("simona"),
  ("simone"),
  ("simonne"),
  ("simran"),
  ("simrit"),
  ("sina"),
  ("sindhu"),
  ("sindy"),
  ("sine"),
  ("sinead"),
  ("sineidin"),
  ("sinklitikiia"),
  ("sinopa"),
  ("sinsapa"),
  ("siny"),
  ("siobhan"),
  ("sioned"),
  ("sira"),
  ("sireen"),
  ("sirena"),
  ("sisika"),
  ("sister"),
  ("sita"),
  ("sitaara"),
  ("sitara"),
  ("siu"),
  ("siuiunbek"),
  ("siuiunbeka"),
  ("siuiunbuka"),
  ("siunbek"),
  ("siunbeka"),
  ("siusan"),
  ("sive"),
  ("sixta"),
  ("siya"),
  ("skameikina"),
  ("skena"),
  ("skonka"),
  ("sky"),
  ("skye"),
  ("skyla"),
  ("slaine"),
  ("slainie"),
  ("slania"),
  ("slanie"),
  ("slany"),
  ("slava"),
  ("slavna"),
  ("sloan"),
  ("sloane"),
  ("slyvia"),
  ("smaram"),
  ("smils"),
  ("smina"),
  ("smirenka"),
  ("smita"),
  ("smrita"),
  ("smriti"),
  ("snana"),
  ("snanduliia"),
  ("sneh"),
  ("sneha"),
  ("snehalata"),
  ("snigdha"),
  ("snigurka"),
  ("sobina"),
  ("sofeia"),
  ("sofia"),
  ("sofie"),
  ("sofiia"),
  ("sofiya"),
  ("sohalia"),
  ("sohni"),
  ("soila"),
  ("sokanon"),
  ("sokw"),
  ("solaina"),
  ("solaine"),
  ("solana"),
  ("solange"),
  ("soledad"),
  ("soledada"),
  ("solveig"),
  ("solymar"),
  ("soma"),
  ("somalakshmi"),
  ("somatra"),
  ("sommer"),
  ("sona"),
  ("sonakshi"),
  ("sonal"),
  ("sonali"),
  ("sonaya"),
  ("sondra"),
  ("sonechka"),
  ("sonel"),
  ("song"),
  ("sonia"),
  ("sonika"),
  ("sonja"),
  ("sonji"),
  ("sonnenschein"),
  ("sonora"),
  ("sonya"),
  ("sonyuru"),
  ("sonyusha"),
  ("sonyushka"),
  ("sook"),
  ("sooleawa"),
  ("soon"),
  ("soorat"),
  ("sophi"),
  ("sophia"),
  ("sophie"),
  ("sophronia"),
  ("sora"),
  ("soraya"),
  ("sorcha"),
  ("soroka"),
  ("sosanna"),
  ("sosfena"),
  ("sosipatra"),
  ("soumya"),
  ("sourabhi"),
  ("soyala"),
  ("sparkle"),
  ("spasenieva"),
  ("spera"),
  ("speranza"),
  ("spitoslava"),
  ("spitsislava"),
  ("spring"),
  ("sreedevi"),
  ("sridevi"),
  ("sristi"),
  ("stacee"),
  ("staci"),
  ("stacia"),
  ("stacie"),
  ("stana"),
  ("stanislava"),
  ("stanka"),
  ("stansie"),
  ("star"),
  ("starla"),
  ("starr"),
  ("starsha"),
  ("stasia"),
  ("stasy"),
  ("stasya"),
  ("stavita"),
  ("stefani"),
  ("stefania"),
  ("stefanida"),
  ("stefanidka"),
  ("stefanie"),
  ("stefanova"),
  ("stefany"),
  ("stefanya"),
  ("steffanie"),
  ("stella"),
  ("stepanida"),
  ("stepanie"),
  ("stepanova"),
  ("stephaine"),
  ("stephane"),
  ("stephani"),
  ("stephania"),
  ("stephanie"),
  ("stephany"),
  ("stephenie"),
  ("stephine"),
  ("stephnie"),
  ("stephonjia"),
  ("stesha"),
  ("stina"),
  ("stolma"),
  ("stolpolcha"),
  ("stopolcha"),
  ("stormy"),
  ("stranizlava"),
  ("stratka"),
  ("strezhena"),
  ("strezhislava"),
  ("strezislava"),
  ("struana"),
  ("stuti"),
  ("suanne"),
  ("subarna"),
  ("subha"),
  ("subhaga"),
  ("subhagya"),
  ("subhan"),
  ("subhashini"),
  ("subhuja"),
  ("suchandra"),
  ("sucharita"),
  ("sucheta"),
  ("suchi"),
  ("suchira"),
  ("suchita"),
  ("suchitra"),
  ("sudakshima"),
  ("sudarshana"),
  ("sudeepa"),
  ("sudeepta"),
  ("sudehna"),
  ("sudekhna"),
  ("sudeshna"),
  ("sudevi"),
  ("sudha"),
  ("sudhamayi"),
  ("sudhira"),
  ("sudie"),
  ("sudila"),
  ("sudipta"),
  ("sudipti"),
  ("sue"),
  ("sueann"),
  ("suellen"),
  ("sugouri"),
  ("suhaa"),
  ("suhaad"),
  ("suhag"),
  ("suhaila"),
  ("suhasini"),
  ("suhina"),
  ("suhrita"),
  ("sui"),
  ("sujala"),
  ("sujata"),
  ("sujaya"),
  ("suk"),
  ("sukaina"),
  ("sukanya"),
  ("sukeshi"),
  ("sukey"),
  ("suki"),
  ("suko"),
  ("sukriti"),
  ("suksma"),
  ("sukumari"),
  ("sula"),
  ("sulabha"),
  ("sulakshana"),
  ("sulalita"),
  ("sulama"),
  ("sulema"),
  ("sulislava"),
  ("suloch"),
  ("sulochana"),
  ("sultana"),
  ("sulwyn"),
  ("sumaita"),
  ("sumana"),
  ("sumanolata"),
  ("sumati"),
  ("sumayya"),
  ("sumbula"),
  ("sumedha"),
  ("sumi"),
  ("sumie"),
  ("sumiko"),
  ("sumita"),
  ("summer"),
  ("sumorokova"),
  ("sunandini"),
  ("sunandita"),
  ("sunayana"),
  ("sunayani"),
  ("sundari"),
  ("sunday"),
  ("sundha"),
  ("sundus"),
  ("suneeti"),
  ("sunetra"),
  ("sunila"),
  ("sunita"),
  ("suniti"),
  ("sunki"),
  ("sunklitikiia"),
  ("sunni"),
  ("sunny"),
  ("sunshine"),
  ("suprabha"),
  ("supriti"),
  ("surabhi"),
  ("suraksha"),
  ("surama"),
  ("suranjana"),
  ("suravinda"),
  ("surekha"),
  ("surina"),
  ("surotama"),
  ("suruchi"),
  ("surupa"),
  ("suryakanti"),
  ("susana"),
  ("susane"),
  ("susann"),
  ("susanna"),
  ("susannah"),
  ("susanne"),
  ("sushama"),
  ("sushanti"),
  ("sushila"),
  ("sushma"),
  ("sushmita"),
  ("sushobhana"),
  ("susie"),
  ("susita"),
  ("susmita"),
  ("susy"),
  ("sutanuka"),
  ("sutapa"),
  ("suvarna"),
  ("suvarnaprabha"),
  ("suvarnarekha"),
  ("suvarnmala"),
  ("suzan"),
  ("suzann"),
  ("suzanna"),
  ("suzannah"),
  ("suzanne"),
  ("suzelly"),
  ("suzette"),
  ("suzi"),
  ("suzie"),
  ("suzue"),
  ("suzuki"),
  ("suzuko"),
  ("suzy"),
  ("svakhna"),
  ("svatata"),
  ("svatava"),
  ("svatochna"),
  ("svatohna"),
  ("sveisla"),
  ("sveta"),
  ("svetlana"),
  ("svetocha"),
  ("svetokhna"),
  ("sviatata"),
  ("sviatokhna"),
  ("sviatoslava"),
  ("svoda"),
  ("swaantje"),
  ("swachnina"),
  ("swagata"),
  ("swaha"),
  ("swapna"),
  ("swapnali"),
  ("swapnasundari"),
  ("swarnalata"),
  ("swarupa"),
  ("swasti"),
  ("swatawa"),
  ("swati"),
  ("sweta"),
  ("sybil"),
  ("syble"),
  ("sybylla"),
  ("sydelle"),
  ("sydnee"),
  ("sydni"),
  ("sydnie"),
  ("sylvia"),
  ("sylvie"),
  ("sylwia"),
  ("symislava"),
  ("symone"),
  ("synnove"),
  ("synthia"),
  ("syp"),
  ("sypovaia"),
  ("syreeta"),
  ("taaliba"),
  ("taamira"),
  ("tabassum"),
  ("tabatha"),
  ("tabetha"),
  ("tabita"),
  ("tabitha"),
  ("tablita"),
  ("tabora"),
  ("taborri"),
  ("tacha"),
  ("tachell"),
  ("tachia"),
  ("tachiana"),
  ("tachianna"),
  ("tacincala"),
  ("tadako"),
  ("tadi"),
  ("tadita"),
  ("tae"),
  ("tahaani"),
  ("taheisha"),
  ("tahiyya"),
  ("tahki"),
  ("tahleela"),
  ("tahlia"),
  ("tahn"),
  ("tahna"),
  ("tahnia"),
  ("tahniya"),
  ("tahnya"),
  ("tahsha"),
  ("tai"),
  ("taidula"),
  ("taifa"),
  ("taina"),
  ("taini"),
  ("tainn"),
  ("taipa"),
  ("taisha"),
  ("taishineia"),
  ("taisiia"),
  ("taja"),
  ("ta-ja'e"),
  ("tajuana"),
  ("taka"),
  ("takako"),
  ("takala"),
  ("takara"),
  ("takecia"),
  ("takeisha"),
  ("takira"),
  ("takisha"),
  ("takiyah"),
  ("takola"),
  ("tala"),
  ("talaith"),
  ("talar"),
  ("talasia"),
  ("taleisha"),
  ("talia"),
  ("taliah"),
  ("talicia"),
  ("ta-lisa"),
  ("talisha"),
  ("talitha"),
  ("taliyah"),
  ("tallis"),
  ("tallulah"),
  ("talor"),
  ("talora"),
  ("talori"),
  ("talya"),
  ("tam"),
  ("tama"),
  ("tamae"),
  ("tamafune"),
  ("tamah"),
  ("tamaki"),
  ("tamala"),
  ("tamali"),
  ("tamalika"),
  ("tamami"),
  ("tamanna"),
  ("tamar"),
  ("tamara"),
  ("tamarah"),
  ("tamary"),
  ("tamasa"),
  ("tamasi"),
  ("tamatha"),
  ("tambra"),
  ("tambura"),
  ("tameca"),
  ("tamecia"),
  ("tameema"),
  ("tameika"),
  ("tameka"),
  ("tamekia"),
  ("tamela"),
  ("tamera"),
  ("tamesha"),
  ("tami"),
  ("tamia"),
  ("tamica"),
  ("tamie"),
  ("tamika"),
  ("tamiko"),
  ("tamila"),
  ("tamisha"),
  ("tamitha"),
  ("tamiyo"),
  ("tamma"),
  ("tammara"),
  ("tammera"),
  ("tammi"),
  ("tammie"),
  ("tamohara"),
  ("tamra"),
  ("tamya"),
  ("tana"),
  ("tanalia"),
  ("tanasha"),
  ("t'anay"),
  ("tanaya"),
  ("tandi"),
  ("tandra"),
  ("tandula"),
  ("tandy"),
  ("tanea"),
  ("tanechka"),
  ("taneka"),
  ("tanesa"),
  ("tanesha"),
  ("taneya"),
  ("tangela"),
  ("tanginika"),
  ("tangwen"),
  ("tania"),
  ("tanija"),
  ("tanika"),
  ("taniko"),
  ("tanima"),
  ("tanis"),
  ("tanish"),
  ("tanisha"),
  ("tanita"),
  ("taniya"),
  ("taniyah"),
  ("tanja"),
  ("tanka"),
  ("tanmaya"),
  ("tanna"),
  ("tannia"),
  ("tannis"),
  ("tannishtha"),
  ("tanniya"),
  ("tannya"),
  ("tanseem"),
  ("tansho"),
  ("tansy"),
  ("tanu"),
  ("tanuja"),
  ("tanuka"),
  ("tanushri"),
  ("tanvi"),
  ("tany"),
  ("tanya"),
  ("tapasi"),
  ("tapati"),
  ("tapi"),
  ("tapti"),
  ("taqiyya"),
  ("tara"),
  ("tarah"),
  ("taraji"),
  ("taraka"),
  ("tarakeshwari"),
  ("tarakini"),
  ("tarala"),
  ("tarana"),
  ("tarangini"),
  ("tarannum"),
  ("taree"),
  ("tareefa"),
  ("tari"),
  ("tarian"),
  ("tarika"),
  ("tarini"),
  ("tarisai"),
  ("tarjani"),
  ("tarra"),
  ("tarren"),
  ("tarsha"),
  ("taru"),
  ("tarulata"),
  ("taruni"),
  ("tarunika"),
  ("tarunima"),
  ("tasenka"),
  ("tashana"),
  ("tashaonda"),
  ("tashelle"),
  ("tashia"),
  ("tashiana"),
  ("tashianna"),
  ("tashina"),
  ("tashira"),
  ("tashiya"),
  ("tasia"),
  ("tasiya"),
  ("tasneem"),
  ("tassa"),
  ("tasya"),
  ("tata"),
  ("tatia"),
  ("tatiana"),
  ("tatianka"),
  ("tatianna"),
  ("tatiiana"),
  ("tatini"),
  ("tatjana"),
  ("tatsa"),
  ("tatum"),
  ("tatyana"),
  ("tatyanna"),
  ("tauni"),
  ("taunia"),
  ("taunya"),
  ("taura"),
  ("tavia"),
  ("tavlunbeka"),
  ("tawana"),
  ("tawanda"),
  ("tawanna"),
  ("tawfeeqa"),
  ("tawheeda"),
  ("tawna"),
  ("tawnee"),
  ("tawney"),
  ("tawni"),
  ("tawnia"),
  ("tawnie"),
  ("tawny"),
  ("tawnya"),
  ("taya"),
  ("tayanita"),
  ("tayen"),
  ("tayla"),
  ("taylah"),
  ("tayna"),
  ("tayshia"),
  ("tayyiba"),
  ("tazanna"),
  ("tazia"),
  ("tea"),
  ("teamhair"),
  ("teana"),
  ("teela"),
  ("teena"),
  ("teertha"),
  ("teesta"),
  ("teha"),
  ("tehya"),
  ("tehzeeb"),
  ("teige"),
  ("teisha"),
  ("teja"),
  ("tejana"),
  ("tejaswi"),
  ("tejaswini"),
  ("tekeysia"),
  ("tekh"),
  ("tekha"),
  ("tekla"),
  ("tekli"),
  ("tekusa"),
  ("teleisia"),
  ("teleri"),
  ("telma"),
  ("telyn"),
  ("tema"),
  ("teme"),
  ("temeka"),
  ("temika"),
  ("temima"),
  ("temina"),
  ("temira"),
  ("tempeste"),
  ("tempie"),
  ("temple"),
  ("tena"),
  ("tendai"),
  ("tenesha"),
  ("tenika"),
  ("tenisha"),
  ("tennie"),
  ("tennille"),
  ("teodora"),
  ("teodory"),
  ("teodozji"),
  ("teofila"),
  ("teona"),
  ("tequila"),
  ("tera"),
  ("terceira"),
  ("tereasa"),
  ("teresa"),
  ("terese"),
  ("teresia"),
  ("teresina"),
  ("teresita"),
  ("teressa"),
  ("teri"),
  ("terica"),
  ("terina"),
  ("terisa"),
  ("terra"),
  ("terresa"),
  ("terri"),
  ("terrie"),
  ("terrilyn"),
  ("terrwyn"),
  ("teruyo"),
  ("terza"),
  ("tesha"),
  ("tesheia"),
  ("teshka"),
  ("tesia"),
  ("tess"),
  ("tessa"),
  ("tessie"),
  ("tetka"),
  ("teva"),
  ("tevkel"),
  ("tferianka"),
  ("thaabita"),
  ("thaamira"),
  ("thadina"),
  ("thadine"),
  ("thaimy"),
  ("thais"),
  ("thalia"),
  ("thamra"),
  ("thanaa"),
  ("thao"),
  ("tharwa"),
  ("thasha"),
  ("thea"),
  ("theda"),
  ("thelma"),
  ("theodora"),
  ("theola"),
  ("thera"),
  ("theresa"),
  ("therese"),
  ("theresia"),
  ("theressa"),
  ("thersa"),
  ("thi"),
  ("thirza"),
  ("thomasa"),
  ("thomasena"),
  ("thomasin"),
  ("thomasina"),
  ("thomasine"),
  ("thomsina"),
  ("thora"),
  ("thresa"),
  ("thu"),
  ("thumri"),
  ("thuy"),
  ("tia"),
  ("tiaga"),
  ("tiana"),
  ("tianna"),
  ("tiara"),
  ("tiarra"),
  ("tiberia"),
  ("tien"),
  ("tiera"),
  ("tierney"),
  ("tierra"),
  ("tiesha"),
  ("tifany"),
  ("tiffaney"),
  ("tiffani"),
  ("tiffanie"),
  ("tiffany"),
  ("tiffiny"),
  ("tiffney"),
  ("tijuana"),
  ("tikva"),
  ("tilaka"),
  ("tilda"),
  ("tilde"),
  ("tillie"),
  ("tilly"),
  ("tilottama"),
  ("timandra"),
  ("timika"),
  ("timila"),
  ("timothea"),
  ("tindra"),
  ("tinecia"),
  ("tinesha"),
  ("ting"),
  ("tinisha"),
  ("tiny"),
  ("tiponi"),
  ("tiponya"),
  ("tipper"),
  ("tira"),
  ("tirza"),
  ("tirzah"),
  ("tisa"),
  ("tish"),
  ("tisha"),
  ("tishka"),
  ("tishkina"),
  ("titania"),
  ("titiksha"),
  ("titka"),
  ("tiutcheva"),
  ("tiva"),
  ("tivona"),
  ("tiyah"),
  ("t'kelah"),
  ("toba"),
  ("tobi"),
  ("tobie"),
  ("tobit"),
  ("toccara"),
  ("toi"),
  ("toibe"),
  ("toireasa"),
  ("toki"),
  ("tokie"),
  ("tokiko"),
  ("tokiyo"),
  ("toku"),
  ("tolinka"),
  ("tolla"),
  ("tomasa"),
  ("tomasina"),
  ("tomasine"),
  ("tomeka"),
  ("tomi"),
  ("tomika"),
  ("tomiko"),
  ("tomila"),
  ("tomislava"),
  ("tommye"),
  ("tomoe"),
  ("tomoko"),
  ("tomomi"),
  ("tona"),
  ("tonasha"),
  ("tonaya"),
  ("tonda"),
  ("tonechka"),
  ("tonette"),
  ("toni"),
  ("tonia"),
  ("tonie"),
  ("tonisha"),
  ("tonita"),
  ("tonja"),
  ("tonniya"),
  ("tonnya"),
  ("tonya"),
  ("topanga"),
  ("tora"),
  ("toral"),
  ("toreth"),
  ("torey"),
  ("tori"),
  ("torie"),
  ("torlan"),
  ("torokanova"),
  ("torra"),
  ("torree"),
  ("torri"),
  ("torrie"),
  ("tory"),
  ("tosha"),
  ("toshelle"),
  ("toshia"),
  ("toshiana"),
  ("toshie"),
  ("toshiko"),
  ("totsi"),
  ("tova"),
  ("tovah"),
  ("tove"),
  ("towanda"),
  ("toya"),
  ("toyoko"),
  ("tracee"),
  ("traci"),
  ("tracia"),
  ("tracie"),
  ("trae"),
  ("tralena"),
  ("tran"),
  ("traneise"),
  ("trang"),
  ("tranquilla"),
  ("travia"),
  ("traviata"),
  ("treasa"),
  ("treasure"),
  ("treena"),
  ("treina"),
  ("treise"),
  ("trella"),
  ("tremelle"),
  ("trena"),
  ("tresa"),
  ("tressa"),
  ("tressie"),
  ("tretiakovskaia"),
  ("treva"),
  ("tricia"),
  ("tridhara"),
  ("triguna"),
  ("triguni"),
  ("trikaya"),
  ("trilby"),
  ("trillare"),
  ("trilochana"),
  ("trina"),
  ("trinayani"),
  ("trinetra"),
  ("trinetta"),
  ("trinette"),
  ("trinh"),
  ("trinika"),
  ("trinique"),
  ("triparna"),
  ("tripta"),
  ("tripti"),
  ("tripurasundari"),
  ("tripuri"),
  ("trish"),
  ("trisha"),
  ("trishala"),
  ("trishna"),
  ("trisna"),
  ("trista"),
  ("triveni"),
  ("triyama"),
  ("troika"),
  ("trpena"),
  ("truda"),
  ("trudi"),
  ("trudie"),
  ("trudy"),
  ("trufena"),
  ("trula"),
  ("trupti"),
  ("trusha"),
  ("tsaritsa"),
  ("tsifira"),
  ("tsuki"),
  ("tsukiyama"),
  ("tsuya"),
  ("tsvetkova"),
  ("tuhfa"),
  ("tuhina"),
  ("tula"),
  ("tulaiha"),
  ("tulasi"),
  ("tulia"),
  ("tulika"),
  ("tullia"),
  ("tulna"),
  ("tulsi"),
  ("turfa"),
  ("tusharkana"),
  ("tusti"),
  ("tutana"),
  ("tuva"),
  ("tuwa"),
  ("tuyet"),
  ("tvoislava"),
  ("tvoyzlava"),
  ("twana"),
  ("twanda"),
  ("twanna"),
  ("twila"),
  ("twyla"),
  ("tya"),
  ("tyaishia"),
  ("tychell"),
  ("tye"),
  ("tyesha"),
  ("tyisha"),
  ("tylena"),
  ("tyneice"),
  ("tynisha"),
  ("tyonna"),
  ("tyra"),
  ("tyshell"),
  ("tzilla"),
  ("tzippa"),
  ("tzivia"),
  ("tziyona"),
  ("tzzipporah"),
  ("ualentina"),
  ("udaya"),
  ("udita"),
  ("uditi"),
  ("uirko"),
  ("ujas"),
  ("ujjala"),
  ("ujjanini"),
  ("ujjwala"),
  ("ujwala"),
  ("ula"),
  ("ulana"),
  ("ulani"),
  ("uleia"),
  ("ulen'ka"),
  ("ulia"),
  ("uliaanitsa"),
  ("uliana"),
  ("ulianiia"),
  ("ulianka"),
  ("ulianushka"),
  ("uliasha"),
  ("ulicia"),
  ("uliiana"),
  ("ulita"),
  ("ulka"),
  ("ulla"),
  ("ulrika"),
  ("ulrike"),
  ("ulupi"),
  ("ulva"),
  ("ulyaa"),
  ("ulyana"),
  ("uma"),
  ("umaima"),
  ("umaira"),
  ("ume"),
  ("umeka"),
  ("umeko"),
  ("umika"),
  ("ummu kulthoom"),
  ("una"),
  ("unefiia"),
  ("unique"),
  ("unity"),
  ("unka"),
  ("unnati"),
  ("unna woman"),
  ("uny"),
  ("upala"),
  ("upama"),
  ("upasana"),
  ("upritsa"),
  ("ura"),
  ("urako"),
  ("uriana"),
  ("urice"),
  ("urit"),
  ("urja"),
  ("urmi"),
  ("urmil"),
  ("urmila"),
  ("urmimala"),
  ("urna"),
  ("urshila"),
  ("urshita"),
  ("ursula"),
  ("ursulina"),
  ("urvashi"),
  ("urvasi"),
  ("urvi"),
  ("urwa"),
  ("usha"),
  ("ushakiran"),
  ("ushas"),
  ("ushashi"),
  ("ushma"),
  ("usoa"),
  ("usri"),
  ("ustenia"),
  ("ustiniia"),
  ("uta"),
  ("utako"),
  ("ute"),
  ("utpala"),
  ("utpalini"),
  ("utsa"),
  ("uttara"),
  ("uzziye"),
  ("vac"),
  ("vach"),
  ("vada"),
  ("vadit"),
  ("vafara"),
  ("vagdevi"),
  ("vahini"),
  ("vaidehi"),
  ("vaijayanti"),
  ("vaijayantimala"),
  ("vairocana"),
  ("vaishali"),
  ("vaishavi"),
  ("vaishnodevi"),
  ("vakhneva"),
  ("vakhtina"),
  ("vala"),
  ("valarie"),
  ("valda"),
  ("valencia"),
  ("valene"),
  ("valenta"),
  ("valentina"),
  ("valeraine"),
  ("valere"),
  ("valeri"),
  ("valeria"),
  ("valerie"),
  ("valery"),
  ("vallari"),
  ("vallerie"),
  ("valli"),
  ("vallie"),
  ("vallika"),
  ("valmai"),
  ("valorie"),
  ("valrie"),
  ("valya"),
  ("vanadurga"),
  ("vanaja"),
  ("vanamala"),
  ("vanani"),
  ("vanda"),
  ("vandana"),
  ("vanesa"),
  ("vanessa"),
  ("vanetta"),
  ("vanhi"),
  ("vanhishikha"),
  ("vani"),
  ("vania"),
  ("vanita"),
  ("vanmala"),
  ("vanmra"),
  ("vanna"),
  ("vannesa"),
  ("vannessa"),
  ("vanora"),
  ("vantrice"),
  ("vara"),
  ("varada"),
  ("varana"),
  ("varaza"),
  ("varda"),
  ("vardit"),
  ("vared"),
  ("varenka"),
  ("vari"),
  ("varija"),
  ("varka"),
  ("varouna"),
  ("varsha"),
  ("varsonofia"),
  ("vartsislava"),
  ("varunani"),
  ("varuni"),
  ("varushka"),
  ("varvara"),
  ("varya"),
  ("varyusha"),
  ("vasanta"),
  ("vasanti"),
  ("vasavi"),
  ("vashti"),
  ("vasileva"),
  ("vasilevna"),
  ("vasilevskaia"),
  ("vasilida"),
  ("vasilievaia"),
  ("vasiliki"),
  ("vasilina"),
  ("vasilisa"),
  ("vasilissa"),
  ("vasilista"),
  ("vasisa"),
  ("vassa"),
  ("vassie"),
  ("vassillissa"),
  ("vasudha"),
  ("vasudhara"),
  ("vasumati"),
  ("vasundhara"),
  ("vatsala"),
  ("vaviia"),
  ("vayu"),
  ("veda"),
  ("vedas"),
  ("vedetta"),
  ("vedette"),
  ("vedi"),
  ("vedika"),
  ("vedvalli"),
  ("veena"),
  ("veenapani"),
  ("vega"),
  ("vela"),
  ("velda"),
  ("velena"),
  ("velia"),
  ("velika"),
  ("velislava"),
  ("vella"),
  ("velma"),
  ("velva"),
  ("velvet"),
  ("vema"),
  ("vena"),
  ("venay"),
  ("venessa"),
  ("venetta"),
  ("venice"),
  ("venita"),
  ("vennie"),
  ("ventana"),
  ("ventseslava"),
  ("ventura"),
  ("venus"),
  ("veola"),
  ("vera"),
  ("verda"),
  ("verdad"),
  ("verdi"),
  ("verdie"),
  ("verena"),
  ("vergie"),
  ("verla"),
  ("verlene"),
  ("verlie"),
  ("verline"),
  ("vernetta"),
  ("vernia"),
  ("vernice"),
  ("vernita"),
  ("verochka"),
  ("verona"),
  ("veronica"),
  ("veronika"),
  ("veronikeia"),
  ("veronique"),
  ("vershina"),
  ("versie"),
  ("vertie"),
  ("vertise"),
  ("veruschka"),
  ("vesna"),
  ("vesta"),
  ("veta"),
  ("vetenega"),
  ("vetravati"),
  ("veva"),
  ("veveia"),
  ("vevila"),
  ("vevina"),
  ("viachenega"),
  ("vibha"),
  ("vibhavari"),
  ("vibhuti"),
  ("vicenta"),
  ("vickey"),
  ("vicki"),
  ("vickie"),
  ("vicky"),
  ("victoria"),
  ("victorina"),
  ("victorine"),
  ("vida"),
  ("vidette"),
  ("vidhut"),
  ("vidula"),
  ("vidya"),
  ("vidyul"),
  ("viera"),
  ("vignetta"),
  ("vignette"),
  ("vijaya"),
  ("vijayalakshmi"),
  ("vijeta"),
  ("vijul"),
  ("vika"),
  ("vikashenka"),
  ("viki"),
  ("vikki"),
  ("viktoria"),
  ("viktoriya"),
  ("vila"),
  ("vilasini"),
  ("vilena"),
  ("vilenina"),
  ("vilhelmina"),
  ("vilina"),
  ("villetta"),
  ("villette"),
  ("vilma"),
  ("vilna"),
  ("vimala"),
  ("vina"),
  ("vinanti"),
  ("vinata"),
  ("vinaya"),
  ("vincenza"),
  ("vindhya"),
  ("vineeta"),
  ("vinita"),
  ("vinnie"),
  ("vinoda"),
  ("vinodini"),
  ("violet"),
  ("violeta"),
  ("violetta"),
  ("violette"),
  ("viollette"),
  ("vionaika"),
  ("vipasa"),
  ("vipula"),
  ("vira"),
  ("virata"),
  ("virdie"),
  ("virgen"),
  ("virgia"),
  ("virgie"),
  ("virgina"),
  ("virginia"),
  ("viridiana"),
  ("virineia"),
  ("vironikiia"),
  ("visala"),
  ("vishakha"),
  ("vishala"),
  ("vishalakshi"),
  ("vishaya"),
  ("vishemila"),
  ("vishnumaya"),
  ("vishnupriya"),
  ("vita"),
  ("vitalya"),
  ("vitasa"),
  ("vitko"),
  ("vitla"),
  ("vitoslava"),
  ("vittoria"),
  ("viva"),
  ("vivan"),
  ("viveka"),
  ("viviana"),
  ("viviane"),
  ("vivien"),
  ("vivienne"),
  ("vivika"),
  ("vivka"),
  ("vlada"),
  ("vladaia"),
  ("vladilena"),
  ("vladilenaova"),
  ("vladimira"),
  ("vladisava"),
  ("vladka"),
  ("vladlena"),
  ("vlaikha"),
  ("vlastika"),
  ("vlcena"),
  ("vlschet"),
  ("vogna"),
  ("voina"),
  ("voislava"),
  ("volante"),
  ("voleta"),
  ("voletta"),
  ("volodimerna"),
  ("volotka"),
  ("volotkoveia"),
  ("volotok"),
  ("voncile"),
  ("vonda"),
  ("vondra"),
  ("vonetta"),
  ("vonnie"),
  ("vontriece"),
  ("voyzlava"),
  ("vrajabala"),
  ("vrata"),
  ("vratislava"),
  ("vrinda"),
  ("vritti"),
  ("vrkhuslava"),
  ("vrotsislava"),
  ("vrsanka"),
  ("vrunda"),
  ("vseslava"),
  ("vukosava"),
  ("vukoslava"),
  ("vyesna"),
  ("vysheslava"),
  ("vyshia"),
  ("waajida"),
  ("wadee'a"),
  ("wadha"),
  ("wafaaa"),
  ("waheeba"),
  ("waheeda"),
  ("wai"),
  ("wajdiyya"),
  ("wajeeha"),
  ("wakanda"),
  ("wakeisha"),
  ("waki"),
  ("waleeda"),
  ("waleska"),
  ("waliyya"),
  ("waltraud"),
  ("wamika"),
  ("wamil"),
  ("wan"),
  ("wanda"),
  ("wandalyn"),
  ("waneesa"),
  ("waneta"),
  ("wanetta"),
  ("wanita"),
  ("wannon"),
  ("warda"),
  ("wardiyya"),
  ("warvara"),
  ("waseema"),
  ("waseme"),
  ("wasmaaa"),
  ("wattan"),
  ("wauna"),
  ("wava"),
  ("wazuka"),
  ("wei"),
  ("welislawa"),
  ("wen"),
  ("wenda"),
  ("wende"),
  ("wendi"),
  ("wendie"),
  ("wendolyn"),
  ("wendy"),
  ("wenona"),
  ("weronikia"),
  ("whitley"),
  ("whoopi"),
  ("wicapiwakan"),
  ("widdad"),
  ("wierga"),
  ("wiesje"),
  ("wikimak"),
  ("wikitoria"),
  ("wikolia"),
  ("wikta"),
  ("wiktorja"),
  ("wilda"),
  ("wilhelmina"),
  ("wilhemina"),
  ("willa"),
  ("willena"),
  ("willene"),
  ("willetta"),
  ("willette"),
  ("willia"),
  ("williemae"),
  ("willodean"),
  ("willow"),
  ("wilma"),
  ("wilma form"),
  ("windy"),
  ("winema"),
  ("winifred"),
  ("winnie"),
  ("winnifred"),
  ("winola"),
  ("winona"),
  ("winter"),
  ("wira"),
  ("wirke"),
  ("wissa"),
  ("witoslava"),
  ("wiwka"),
  ("wladyka"),
  ("woina"),
  ("wonda"),
  ("wrata"),
  ("wratislava"),
  ("wrocislawa"),
  ("wuti"),
  ("wyanet"),
  ("wygenia"),
  ("wynda"),
  ("wyndolyn"),
  ("wynell"),
  ("wynne"),
  ("wynnifred"),
  ("wynona"),
  ("xalbadora"),
  ("xalvadora"),
  ("xandra"),
  ("xaviera"),
  ("xaviere"),
  ("xavierra"),
  ("xavierre"),
  ("xena"),
  ("xenia"),
  ("xevera"),
  ("xeveria"),
  ("xhosa"),
  ("xia"),
  ("xia he"),
  ("xiang"),
  ("xiao"),
  ("xiao chen"),
  ("xiao hong"),
  ("ximena"),
  ("xin qian"),
  ("xiomara"),
  ("xiomarys"),
  ("xiu"),
  ("xiu juan"),
  ("xochitl"),
  ("xuan"),
  ("xue"),
  ("xue fang"),
  ("xuxa"),
  ("xylia"),
  ("xylina"),
  ("xylona"),
  ("yaakove"),
  ("yaasmeen"),
  ("yaasmeena"),
  ("yachi"),
  ("yachne"),
  ("yadira"),
  ("yadra"),
  ("yae"),
  ("yaeko"),
  ("yaffa"),
  ("yaffit"),
  ("yahaira"),
  ("yaineris"),
  ("yaira"),
  ("yaiza"),
  ("yajaira"),
  ("yakira"),
  ("yaksha"),
  ("yalena"),
  ("yalenchka"),
  ("yalens"),
  ("yalgonata"),
  ("yamilet"),
  ("yamilex"),
  ("yamin"),
  ("yamini"),
  ("yamka"),
  ("yamuna"),
  ("yamune"),
  ("yan"),
  ("yana"),
  ("yanamaria"),
  ("yanamarie"),
  ("yaneisy"),
  ("yanely"),
  ("yang"),
  ("yanika"),
  ("yanira"),
  ("yanire"),
  ("yan yan"),
  ("yara"),
  ("yardenah"),
  ("yareli"),
  ("yaretzi"),
  ("yaritza"),
  ("yarkona"),
  ("yashaswini"),
  ("yashawini"),
  ("yashila"),
  ("yashira"),
  ("yashoda"),
  ("yasiman"),
  ("yasmeen"),
  ("yasmin"),
  ("yasmina"),
  ("yasmine"),
  ("yasu"),
  ("yasuko"),
  ("yatee"),
  ("yauvani"),
  ("yavonna"),
  ("yavonne"),
  ("yawna"),
  ("yayoi"),
  ("yazmin"),
  ("ydel"),
  ("yedid"),
  ("yedidah"),
  ("yee"),
  ("yehudit"),
  ("yekaterina"),
  ("yelena"),
  ("yelina"),
  ("yelizavetam"),
  ("yelysaveta"),
  ("yemena"),
  ("yen"),
  ("yepa"),
  ("yer"),
  ("yesenia"),
  ("yesmina"),
  ("yessenia"),
  ("yessica"),
  ("yetsye"),
  ("yetta"),
  ("yeva"),
  ("yevdokiya"),
  ("yevette"),
  ("yevfrosinya"),
  ("yevgenya"),
  ("yevon"),
  ("yevunye"),
  ("yi jie"),
  ("yi min"),
  ("ying"),
  ("yitta"),
  ("yi ze"),
  ("yizel"),
  ("ynes"),
  ("ynez"),
  ("yoana"),
  ("yocheved"),
  ("yodo"),
  ("yogenya"),
  ("yogini"),
  ("yogita"),
  ("yojana"),
  ("yoki"),
  ("yoko"),
  ("yoland"),
  ("yolanda"),
  ("yolanda-abigail"),
  ("yolande"),
  ("yolando"),
  ("yolanthe"),
  ("yolonda"),
  ("yon"),
  ("yona"),
  ("yonaidys"),
  ("yonina"),
  ("yoninah"),
  ("yonita"),
  ("yordana"),
  ("yori"),
  ("yoriko"),
  ("yosdalkis"),
  ("yoseba"),
  ("yosebe"),
  ("yoselin"),
  ("yosepha"),
  ("yosephina"),
  ("yoshe"),
  ("yoshi"),
  ("yoshie"),
  ("yoshike"),
  ("yoshiko"),
  ("yoshino"),
  ("youlanda"),
  ("yovanka"),
  ("yovela"),
  ("ysabel"),
  ("ysabelle"),
  ("ysbail"),
  ("yseult"),
  ("yuette"),
  ("yue wan"),
  ("yue yan"),
  ("yue ying"),
  ("yue you"),
  ("yuhudit"),
  ("yui"),
  ("yu jie"),
  ("yuk"),
  ("yuka"),
  ("yukako"),
  ("yukari"),
  ("yuki"),
  ("yukiko"),
  ("yukiyo"),
  ("yuko"),
  ("yulanda"),
  ("yulenka"),
  ("yulia"),
  ("yuliana"),
  ("yulianiya"),
  ("yulika"),
  ("yulisa"),
  ("yulissa"),
  ("yuliy"),
  ("yuliya"),
  ("yulya"),
  ("yumako"),
  ("yumaris"),
  ("yumi"),
  ("yumiko"),
  ("yun"),
  ("yung"),
  ("yuonne"),
  ("yuricema"),
  ("yuridia"),
  ("yuriko"),
  ("yusmara"),
  ("yusuke"),
  ("yuta"),
  ("yuvati"),
  ("yvette"),
  ("yvone"),
  ("yvonna"),
  ("yvonne"),
  ("zaahira"),
  ("zaaida"),
  ("zabana"),
  ("zabela"),
  ("zabia"),
  ("zacharee"),
  ("zada"),
  ("zadie"),
  ("zahar"),
  ("zahara"),
  ("zahavah"),
  ("zahra"),
  ("zahraaa"),
  ("zaida"),
  ("zaide"),
  ("zaierra"),
  ("zainab"),
  ("zaira"),
  ("zaitoona"),
  ("zakharia"),
  ("zakharieva"),
  ("zakharina"),
  ("zakia"),
  ("zakiyya"),
  ("zalia"),
  ("zalika"),
  ("zaltana"),
  ("zambda"),
  ("zamiatina"),
  ("zamora"),
  ("zana"),
  ("zandra"),
  ("zaneta"),
  ("zanetta"),
  ("zanita"),
  ("zaniyah"),
  ("zanna"),
  ("zanns"),
  ("zanta"),
  ("zanthe"),
  ("zapopa"),
  ("zara"),
  ("zarah"),
  ("zarahlinda"),
  ("zaria"),
  ("zariah"),
  ("zarina"),
  ("zarine"),
  ("zarita"),
  ("zaritsa"),
  ("zarqaa"),
  ("zasha"),
  ("zavidovicha"),
  ("zaviera"),
  ("zavorokhina"),
  ("zaza"),
  ("zazu"),
  ("zbina"),
  ("zbinka"),
  ("zbiska"),
  ("zbynek"),
  ("zbynko"),
  ("zbyshka"),
  ("zdena"),
  ("zdeslava"),
  ("zdislava"),
  ("zdzislaba"),
  ("zeanes"),
  ("zebina"),
  ("zeena"),
  ("zeenat"),
  ("zefjm"),
  ("zehava"),
  ("zehave"),
  ("zehavi"),
  ("zehavit"),
  ("zehira"),
  ("zehuva"),
  ("zekia"),
  ("zelda"),
  ("zelia"),
  ("zelinda"),
  ("zella"),
  ("zelma"),
  ("zelpha"),
  ("zemira"),
  ("zemirah"),
  ("zemora"),
  ("zena"),
  ("zenaida"),
  ("zenaide"),
  ("zenalisa"),
  ("zenechka"),
  ("zenia"),
  ("zenobia"),
  ("zenochka"),
  ("zeny"),
  ("zenya"),
  ("zera"),
  ("zerlinda"),
  ("zeruah"),
  ("zethel"),
  ("zetta"),
  ("zettica"),
  ("zettie"),
  ("zeva"),
  ("zevida"),
  ("zhane"),
  ("zhanna"),
  ("zhdana"),
  ("zhen"),
  ("zhena"),
  ("zhen juan"),
  ("zhi"),
  ("zhirava"),
  ("zhivana"),
  ("zhona"),
  ("zhonka"),
  ("zia"),
  ("ziahon"),
  ("zibia"),
  ("zibiah"),
  ("zihna"),
  ("zila"),
  ("zilla"),
  ("zillah"),
  ("zima"),
  ("zina"),
  ("zinaida"),
  ("zinerva"),
  ("zinoviia"),
  ("ziona"),
  ("zipporah"),
  ("zisel"),
  ("zita"),
  ("zitkala"),
  ("zitkalasa"),
  ("ziva"),
  ("zlhna"),
  ("znata"),
  ("zocha"),
  ("zoe"),
  ("zoey"),
  ("zofeia"),
  ("zofia"),
  ("zoheret"),
  ("zoia"),
  ("zoie"),
  ("zoika"),
  ("zoila"),
  ("zola"),
  ("zoleen"),
  ("zona"),
  ("zonda"),
  ("zonia"),
  ("zonta"),
  ("zora"),
  ("zoraida"),
  ("zoya"),
  ("zoyenka"),
  ("ztrezena"),
  ("zubaida"),
  ("zudora"),
  ("zuhaira"),
  ("zuhra"),
  ("zuhriyaa"),
  ("zula"),
  ("zuleika"),
  ("zulema"),
  ("zulfa"),
  ("zulma"),
  ("zumac"),
  ("zumruda"),
  ("zuri"),
  ("zuria"),
  ("zurie"),
  ("zurina"),
  ("zurine"),
  ("zuzanny"),
  ("zuzela"),
  ("zvatata"),
  ("zvenislava"),
  ("zyta"),
  ("zytka")
);
CreateDict(
    "name" => "names/FemaleFnames.dict",
    "table" => "names/FemaleFnames.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'names/MaleFnames.dict'
CreateTable(
  "names/MaleFnames.dict__TABLE",
  ("entry" => "Text"),
  ("aabdeen"),
  ("aabha"),
  ("aabharan"),
  ("aabheer"),
  ("aabher"),
  ("aabid"),
  ("aad"),
  ("aadam"),
  ("aadarsh"),
  ("aaden"),
  ("aadesh"),
  ("aadhishankar"),
  ("aadhunik"),
  ("aadil"),
  ("aadinath"),
  ("aaditey"),
  ("aagney"),
  ("aahlaad"),
  ("aahlaadith"),
  ("aahwaanith"),
  ("aaish"),
  ("aakanksh"),
  ("aakar"),
  ("aakash"),
  ("aakesh"),
  ("aakif"),
  ("aalam"),
  ("aalap"),
  ("aalok"),
  ("aamir"),
  ("aamod"),
  ("aandaleeb"),
  ("aaqil"),
  ("aarav"),
  ("aarif"),
  ("aashish"),
  ("aasim"),
  ("aatif"),
  ("aatish"),
  ("aayid"),
  ("abarron"),
  ("abba"),
  ("abbaad"),
  ("abbaas"),
  ("abderus"),
  ("abdiel"),
  ("abdul"),
  ("abdullah"),
  ("abdur"),
  ("abdus"),
  ("abdut"),
  ("abe"),
  ("abel"),
  ("abelando"),
  ("abelardo"),
  ("abell"),
  ("aberthol"),
  ("aberto"),
  ("abhay"),
  ("abhayananda"),
  ("abhayaprada"),
  ("abheek"),
  ("abhibhava"),
  ("abhichandra"),
  ("abhidi"),
  ("abhihita"),
  ("abhijat"),
  ("abhijaya"),
  ("abhijit"),
  ("abhijvala"),
  ("abhilash"),
  ("abhimand"),
  ("abhimani"),
  ("abhimanyu"),
  ("abhimanyusuta"),
  ("abhimoda"),
  ("abhinabhas"),
  ("abhinanda"),
  ("abhinandana"),
  ("abhinatha"),
  ("abhinav"),
  ("abhinava"),
  ("abhirup"),
  ("abhishek"),
  ("abhisoka"),
  ("abhisumat"),
  ("abhisyanta"),
  ("abhivira"),
  ("abhra"),
  ("abhrakasin"),
  ("abhyagni"),
  ("abhyudaya"),
  ("abhyudita"),
  ("abida"),
  ("abiel"),
  ("abijah"),
  ("abimbola"),
  ("abimelech"),
  ("abioye"),
  ("abir"),
  ("abiram"),
  ("abisha"),
  ("abjayoni"),
  ("abjit"),
  ("able"),
  ("abner"),
  ("abood"),
  ("abooksigun"),
  ("abraham"),
  ("abram"),
  ("abramo"),
  ("abran"),
  ("absalom"),
  ("absolan"),
  ("absolom"),
  ("absyrtus"),
  ("abukcheech"),
  ("abyad"),
  ("abydos"),
  ("acaryatanaya"),
  ("acastus"),
  ("ace"),
  ("acel"),
  ("achak"),
  ("achal"),
  ("achalapati"),
  ("achalendra"),
  ("achalesvara"),
  ("achanda"),
  ("acharya"),
  ("acharyanandana"),
  ("acharyasuta"),
  ("achates"),
  ("achelous"),
  ("acheron"),
  ("achilles"),
  ("achindra"),
  ("achintya"),
  ("achir"),
  ("achlys"),
  ("achyut"),
  ("achyuta"),
  ("achyutaraya"),
  ("acie"),
  ("acim"),
  ("acrisius"),
  ("actaeon"),
  ("acteon"),
  ("adahy"),
  ("adalarasu"),
  ("adalberto"),
  ("adamson"),
  ("adan"),
  ("adare"),
  ("addai"),
  ("addam"),
  ("addolgar"),
  ("adeeb"),
  ("adegoke"),
  ("adelbert"),
  ("adelfried"),
  ("adelino"),
  ("adelio"),
  ("adelphos"),
  ("aden"),
  ("aderet"),
  ("adesh"),
  ("adham"),
  ("adharma"),
  ("adhik"),
  ("adhikara"),
  ("adhipa"),
  ("adhita"),
  ("adi"),
  ("adikavi"),
  ("adil"),
  ("adinath"),
  ("adir"),
  ("adit"),
  ("aditeya"),
  ("aditya"),
  ("adityanandana"),
  ("adityavardhana"),
  ("adiv"),
  ("adlai"),
  ("adler"),
  ("adley"),
  ("adli"),
  ("admes"),
  ("admetus"),
  ("admiral"),
  ("admon"),
  ("adnaan"),
  ("adniel"),
  ("adok"),
  ("adolf"),
  ("adolfo"),
  ("adolph"),
  ("adolphus"),
  ("adon"),
  ("adonai"),
  ("adonis"),
  ("adrain"),
  ("adras"),
  ("adrastos"),
  ("adrastus"),
  ("adri"),
  ("adriano"),
  ("adric"),
  ("adriel"),
  ("adrik"),
  ("adripathi"),
  ("adriyel"),
  ("advent"),
  ("adwaita"),
  ("adway"),
  ("adwr"),
  ("aeacus"),
  ("aedan"),
  ("aedd"),
  ("aeetes"),
  ("aegeus"),
  ("aegis"),
  ("aegisthus"),
  ("aegyptus"),
  ("aeneas"),
  ("aengus"),
  ("aeolus"),
  ("aesculapius"),
  ("aeson"),
  ("aetos"),
  ("afal"),
  ("afeef"),
  ("afolabi"),
  ("aftab"),
  ("agamedes"),
  ("agamemnon"),
  ("agape"),
  ("agasti"),
  ("agastya"),
  ("agatone"),
  ("ager"),
  ("agha"),
  ("aghaderg"),
  ("aghamore"),
  ("agharna"),
  ("aghat"),
  ("aghy"),
  ("agneya"),
  ("agni"),
  ("agnikumara"),
  ("agnimukha"),
  ("agniprava"),
  ("agostino"),
  ("agrican"),
  ("agrim"),
  ("agriya"),
  ("agustin"),
  ("ahab"),
  ("ahanu"),
  ("ahiga"),
  ("ahjaja"),
  ("ahmad"),
  ("ahmed"),
  ("ahmik"),
  ("ahote"),
  ("ahren"),
  ("ahriman"),
  ("ahsalom"),
  ("ahsan"),
  ("ahtunowhiho"),
  ("aibne"),
  ("aidan"),
  ("aiden"),
  ("aidrian"),
  ("aidyn"),
  ("aijaz"),
  ("ail"),
  ("ailbert"),
  ("ailean"),
  ("ailein"),
  ("ailfrid"),
  ("aillig"),
  ("aiman"),
  ("aimon"),
  ("aindreas"),
  ("aindriu"),
  ("ainesh"),
  ("airavata"),
  ("aitan"),
  ("ajamil"),
  ("ajatashatru"),
  ("ajax"),
  ("ajay"),
  ("ajeet"),
  ("ajendra"),
  ("ajinkya"),
  ("ajit"),
  ("ajitabh"),
  ("ajitesh"),
  ("ajmal"),
  ("ajou"),
  ("akahito"),
  ("akalmash"),
  ("akamu"),
  ("akando"),
  ("akash"),
  ("akbar"),
  ("ake"),
  ("akecheta"),
  ("akeem"),
  ("akeno"),
  ("akhil"),
  ("akhilendra"),
  ("akhilesh"),
  ("aki"),
  ("akiba"),
  ("akihiro"),
  ("akihisa"),
  ("akihito"),
  ("akikazu"),
  ("akil"),
  ("akim"),
  ("akinari"),
  ("akinori"),
  ("akio"),
  ("akir"),
  ("akira"),
  ("akmal"),
  ("akoni"),
  ("akram"),
  ("akroor"),
  ("aksel"),
  ("akshan"),
  ("akshar"),
  ("akshat"),
  ("akshath"),
  ("akshay"),
  ("akshit"),
  ("akshobhya"),
  ("akub"),
  ("akul"),
  ("akule"),
  ("alagan"),
  ("alagarasu"),
  ("alain"),
  ("alam"),
  ("alamgir"),
  ("alan"),
  ("alano"),
  ("alanzo"),
  ("alaric"),
  ("alarico"),
  ("alasd"),
  ("alasdair"),
  ("alastair"),
  ("alawi"),
  ("alawn"),
  ("albanwr"),
  ("albaric"),
  ("alberto"),
  ("albin"),
  ("alcander"),
  ("alcinoos"),
  ("alcinous"),
  ("alcnaeon"),
  ("alcyoneus"),
  ("alddes"),
  ("alden"),
  ("alder"),
  ("aldo"),
  ("aldon"),
  ("aldous"),
  ("aldrich"),
  ("aldrick"),
  ("alec"),
  ("aleck"),
  ("aleem"),
  ("alejandro"),
  ("alek"),
  ("aleksander"),
  ("aleksandr"),
  ("aleksi"),
  ("aleksis"),
  ("aleksy"),
  ("aleron"),
  ("alessandro"),
  ("alexande"),
  ("alexandras"),
  ("alexandre"),
  ("alexandro"),
  ("alexandros"),
  ("alexandrukas"),
  ("alexei"),
  ("alexio"),
  ("alexzander"),
  ("alf"),
  ("alfie"),
  ("alfonso"),
  ("alfonzo"),
  ("alford"),
  ("alfred"),
  ("alfredo"),
  ("algernon"),
  ("algot"),
  ("algrenon"),
  ("alhad"),
  ("alhan"),
  ("alijah"),
  ("alik"),
  ("alim"),
  ("alistair"),
  ("alistaire"),
  ("alister"),
  ("allan"),
  ("allister"),
  ("almandeto"),
  ("almon"),
  ("alo"),
  ("aloeus"),
  ("aloin"),
  ("alois"),
  ("alok"),
  ("aloke"),
  ("alon"),
  ("alonso"),
  ("alonzo"),
  ("aloyoshenka"),
  ("aloysha"),
  ("aloysius"),
  ("alpheus"),
  ("alphonse"),
  ("alphonso"),
  ("alphonsus"),
  ("alpin"),
  ("alrigo"),
  ("alrik"),
  ("alroy"),
  ("altair"),
  ("alter"),
  ("alton"),
  ("aluin"),
  ("aluino"),
  ("alvah"),
  ("alvan"),
  ("alvar"),
  ("alvaro"),
  ("alvie"),
  ("alvin"),
  ("alvino"),
  ("alvis"),
  ("alwan"),
  ("alwin"),
  ("alwyn"),
  ("amaan"),
  ("amaanath"),
  ("amaanullah"),
  ("amadeo"),
  ("amadi"),
  ("amado"),
  ("amadom"),
  ("amalendu"),
  ("amalesh"),
  ("aman"),
  ("amane"),
  ("amaoebus"),
  ("amar"),
  ("amare"),
  ("amarion"),
  ("amartya"),
  ("amasa"),
  ("amathaon"),
  ("amaud"),
  ("amaury"),
  ("ambarish"),
  ("ambrocio"),
  ("ambrose"),
  ("ambrosi"),
  ("ambrosio"),
  ("ambrosius"),
  ("ambrus"),
  ("ambuj"),
  ("ameen"),
  ("ameer"),
  ("amerawdwr"),
  ("ameretat"),
  ("ames"),
  ("ameya"),
  ("amhar"),
  ("amhlaoibh"),
  ("amhuinn"),
  ("amichai"),
  ("amiel"),
  ("amikam"),
  ("amil"),
  ("amin"),
  ("amir"),
  ("amiram"),
  ("amish"),
  ("amit"),
  ("amitabh"),
  ("amitabha"),
  ("amitava"),
  ("amitbikram"),
  ("amitesh"),
  ("amiti"),
  ("amitiyoti"),
  ("amitrasudan"),
  ("amjad"),
  ("amlan"),
  ("amlankusum"),
  ("amlawdd"),
  ("ammaar"),
  ("ammar"),
  ("ammi"),
  ("ammitai"),
  ("ammon"),
  ("amnchadh"),
  ("amnon"),
  ("amo"),
  ("amod"),
  ("amogh"),
  ("amoha"),
  ("amol"),
  ("amoldo"),
  ("amolik"),
  ("amon"),
  ("amos"),
  ("amou"),
  ("amoux"),
  ("amphiaraus"),
  ("amphion"),
  ("amphitryon"),
  ("ampyx"),
  ("amram"),
  ("amren"),
  ("amrit"),
  ("amru"),
  ("amycus"),
  ("amynedd"),
  ("amyneddgar"),
  ("anadi"),
  ("anakausuen"),
  ("anakoni"),
  ("anal"),
  ("analu"),
  ("anamitra"),
  ("anand"),
  ("ananga"),
  ("ananmaya"),
  ("anant"),
  ("anantram"),
  ("anarawd"),
  ("anas"),
  ("anastagio"),
  ("anastasio"),
  ("anastasios"),
  ("anastasius"),
  ("anasztaz"),
  ("anatol"),
  ("anatole"),
  ("anatoli"),
  ("anatolii"),
  ("anatolijus"),
  ("anatolio"),
  ("anbarasu"),
  ("anbessa"),
  ("anbu"),
  ("anbuchelvan"),
  ("anbumadi"),
  ("anbuselvan"),
  ("ancaeus"),
  ("ancel"),
  ("anchises"),
  ("ancil"),
  ("anders"),
  ("anderson"),
  ("andino"),
  ("andnej"),
  ("andon"),
  ("andor"),
  ("andrae"),
  ("andras"),
  ("andreas"),
  ("andrei"),
  ("andreo"),
  ("andres"),
  ("andreus"),
  ("andrew"),
  ("andries"),
  ("androgeus"),
  ("androu"),
  ("andrusha"),
  ("andrya"),
  ("andrzej"),
  ("andy"),
  ("anfernee"),
  ("anfri"),
  ("angad"),
  ("angada"),
  ("angamuthu"),
  ("angawdd"),
  ("angelino"),
  ("angelito"),
  ("anghrist"),
  ("angor"),
  ("angus"),
  ("anibal"),
  ("anier"),
  ("anil"),
  ("animish"),
  ("anirudh"),
  ("anirudhha"),
  ("anirvan"),
  ("anish"),
  ("aniteja"),
  ("anjasa"),
  ("anjum"),
  ("anjuman"),
  ("ankit"),
  ("ankur"),
  ("ankush"),
  ("anlon"),
  ("anmol"),
  ("annnees"),
  ("anoki"),
  ("anoop"),
  ("ansel"),
  ("ansell"),
  ("anselmo"),
  ("ansgar"),
  ("anshu"),
  ("anshul"),
  ("anshuman"),
  ("anshumat"),
  ("anson"),
  ("anstice"),
  ("anstiss"),
  ("antaeus"),
  ("antares"),
  ("anteros"),
  ("anthone"),
  ("anthoney"),
  ("anthony"),
  ("antiere"),
  ("antilochus"),
  ("antinko"),
  ("antinous"),
  ("antione"),
  ("antiphates"),
  ("antoine"),
  ("anton"),
  ("antone"),
  ("antonino"),
  ("antony"),
  ("antosha"),
  ("antwain"),
  ("antwan"),
  ("antwon"),
  ("anugya"),
  ("anuha"),
  ("anuj"),
  ("anunay"),
  ("anup"),
  ("anupam"),
  ("anuraag"),
  ("anurag"),
  ("anuttam"),
  ("anwar"),
  ("anwas"),
  ("anwell"),
  ("anwil"),
  ("anwill"),
  ("anwir"),
  ("anwyl"),
  ("anwyll"),
  ("anynnawg"),
  ("anyon"),
  ("anzai"),
  ("aoidh"),
  ("aonghas"),
  ("aonghus"),
  ("apenimon"),
  ("apevan"),
  ("apharry"),
  ("aphowell"),
  ("apiatan"),
  ("apmaddock"),
  ("apollo"),
  ("apoloniusz"),
  ("aponivi"),
  ("apoorva"),
  ("apostolos"),
  ("apowen"),
  ("apparajito"),
  ("aprhys"),
  ("aproderick"),
  ("apu"),
  ("apurva"),
  ("aqeel"),
  ("aquila"),
  ("aquilino"),
  ("arafaat"),
  ("aralt"),
  ("aram"),
  ("aramis"),
  ("aranck"),
  ("arata"),
  ("arav"),
  ("aravali"),
  ("aray"),
  ("arber"),
  ("arcadicus"),
  ("arcas"),
  ("arcenio"),
  ("arch"),
  ("archaimbaud"),
  ("archambault"),
  ("archard"),
  ("archemorus"),
  ("archenhaud"),
  ("archer"),
  ("archibald"),
  ("archibaldo"),
  ("archie"),
  ("archit"),
  ("arcus"),
  ("ardagh"),
  ("ardal"),
  ("arden"),
  ("ardhendu"),
  ("ardkill"),
  ("ardon"),
  ("ardwyad"),
  ("ares"),
  ("arghya"),
  ("argiwydd"),
  ("argo"),
  ("argos"),
  ("argus"),
  ("argyle"),
  ("arhab"),
  ("ari"),
  ("aribert"),
  ("aric"),
  ("arihant"),
  ("arijit"),
  ("arindam"),
  ("arinori"),
  ("arion"),
  ("aristaeus"),
  ("aristo"),
  ("aristotle"),
  ("aritomo"),
  ("arivalagan"),
  ("arivali"),
  ("arivarasu"),
  ("arivoli"),
  ("arivuchelvan"),
  ("arivumadhi"),
  ("arivunambi"),
  ("arjan"),
  ("arjen"),
  ("arjit"),
  ("arjun"),
  ("arka"),
  ("arkaan"),
  ("arlan"),
  ("arland"),
  ("arlando"),
  ("arlen"),
  ("arley"),
  ("arlin"),
  ("arlo"),
  ("arman"),
  ("armand"),
  ("armande"),
  ("armandek"),
  ("armando"),
  ("armanno"),
  ("armen"),
  ("armin"),
  ("armon"),
  ("armond"),
  ("armondo"),
  ("armstrong"),
  ("arnaldo"),
  ("arnan"),
  ("arnaud"),
  ("arnav"),
  ("arne"),
  ("arnel"),
  ("arnesh"),
  ("arnie"),
  ("arnold"),
  ("arnoldo"),
  ("arnon"),
  ("arnulfo"),
  ("aroghetto"),
  ("arokya"),
  ("aron"),
  ("aroon"),
  ("arregaithel"),
  ("arrigo"),
  ("arron"),
  ("arsen"),
  ("arsenio"),
  ("arshad"),
  ("art"),
  ("artair"),
  ("artemas"),
  ("artemesio"),
  ("artemus"),
  ("arther"),
  ("arthwr"),
  ("artis"),
  ("artur"),
  ("arturo"),
  ("artus"),
  ("arul"),
  ("arulchelvan"),
  ("arulselvan"),
  ("arumugan"),
  ("arun"),
  ("arvad"),
  ("arval"),
  ("arvel"),
  ("arvid"),
  ("arvil"),
  ("arvind"),
  ("arvinda"),
  ("aryaman"),
  ("aryan"),
  ("arye"),
  ("aryeh"),
  ("asad"),
  ("asaf"),
  ("asao"),
  ("asaph"),
  ("asbjørn"),
  ("ascalaphus"),
  ("aseel"),
  ("aseem"),
  ("asgar"),
  ("asghar"),
  ("asher"),
  ("ashihei"),
  ("ashkii"),
  ("ashok"),
  ("ashoka"),
  ("ashqar"),
  ("ashraf"),
  ("ashu"),
  ("ashur"),
  ("ashutosh"),
  ("ashwatthama"),
  ("ashwin"),
  ("asija"),
  ("asim"),
  ("asit"),
  ("asklepios"),
  ("askook"),
  ("aslam"),
  ("aslesh"),
  ("asmar"),
  ("asopus"),
  ("assan"),
  ("asura"),
  ("atal"),
  ("atanu"),
  ("atasuke"),
  ("athamas"),
  ("athan"),
  ("athanasios"),
  ("athanasius"),
  ("atharvan"),
  ("athdar"),
  ("athiya"),
  ("atlas"),
  ("atle"),
  ("atma"),
  ("atmajyoti"),
  ("atman"),
  ("atmananda"),
  ("atralarasu"),
  ("atre"),
  ("atreus"),
  ("atshushi"),
  ("atsumichi"),
  ("atsumori"),
  ("atsutane"),
  ("atticus"),
  ("attis"),
  ("atul atulya"),
  ("aubin"),
  ("aubry"),
  ("audley"),
  ("audric"),
  ("august"),
  ("augustin"),
  ("augustus"),
  ("augustyn"),
  ("auhert"),
  ("auley"),
  ("aurek"),
  ("aureli"),
  ("aureliano"),
  ("aurélien"),
  ("aurelio"),
  ("aurelius"),
  ("auriville"),
  ("austen"),
  ("auston"),
  ("austyn"),
  ("auther"),
  ("authur"),
  ("autolycus"),
  ("autry"),
  ("avadhesh"),
  ("avanindra"),
  ("avanish"),
  ("avaon"),
  ("avatar"),
  ("avel"),
  ("avenall"),
  ("aveneil"),
  ("avenelle"),
  ("avent"),
  ("avernus"),
  ("avi"),
  ("avichai"),
  ("avidan"),
  ("avidor"),
  ("aviel"),
  ("avigdor"),
  ("avikshit"),
  ("avimelech"),
  ("avinash"),
  ("avinoam"),
  ("aviram"),
  ("avisha"),
  ("avishai"),
  ("avital"),
  ("aviv"),
  ("avkash"),
  ("avner"),
  ("avniel"),
  ("avraham"),
  ("avsalom"),
  ("avshalom"),
  ("awad"),
  ("awan"),
  ("awf"),
  ("awn"),
  ("awni"),
  ("awstin"),
  ("axel"),
  ("ayaan"),
  ("ayawamat"),
  ("aydan"),
  ("ayden"),
  ("aydin"),
  ("ayodhya"),
  ("ayog"),
  ("ayokunle"),
  ("ayush"),
  ("ayyappa"),
  ("ayyoob"),
  ("azarious"),
  ("azaryah"),
  ("azaryahu"),
  ("azeez"),
  ("azhaar"),
  ("azhar"),
  ("azibo"),
  ("azmi"),
  ("azriel"),
  ("azubuike"),
  ("azumamaro"),
  ("azzaam"),
  ("azzam"),
  ("baahir"),
  ("baaqir"),
  ("baasim"),
  ("babajide"),
  ("babatunde"),
  ("babyboy"),
  ("bac"),
  ("baccaus"),
  ("baccus"),
  ("badal"),
  ("badan"),
  ("badden"),
  ("baddon"),
  ("badr"),
  ("badraan"),
  ("badri"),
  ("badrinath"),
  ("badriprasad"),
  ("badruddeen"),
  ("bae"),
  ("baeddan"),
  ("baen"),
  ("baheej"),
  ("bahubali"),
  ("bahuleya"),
  ("baigh"),
  ("baiko"),
  ("bailoch"),
  ("bairei"),
  ("bajrang"),
  ("bakar"),
  ("bakin"),
  ("balaaditya"),
  ("balachandra"),
  ("balagopal"),
  ("balagovind"),
  ("balahadra"),
  ("balaji"),
  ("balakrishna"),
  ("balamani"),
  ("balamohan"),
  ("balaram"),
  ("balarama"),
  ("balasi"),
  ("balbir"),
  ("baldasarre"),
  ("baldassario"),
  ("balder"),
  ("baldev"),
  ("baldur"),
  ("baldwin"),
  ("balfour"),
  ("balgair"),
  ("balgaire"),
  ("bali"),
  ("balin"),
  ("balram"),
  ("baltasar"),
  ("baltsaros"),
  ("balvindra"),
  ("balwant"),
  ("banan"),
  ("banbhan"),
  ("banbihari"),
  ("bandar"),
  ("bandhu"),
  ("bandhul"),
  ("bankebihari"),
  ("bankim"),
  ("bankimchandra"),
  ("bansi"),
  ("bansilal"),
  ("banys"),
  ("baptiste"),
  ("barak"),
  ("baram"),
  ("barclay"),
  ("barday"),
  ("barend"),
  ("barid"),
  ("baridbaran"),
  ("barindra"),
  ("barna"),
  ("barnabas"),
  ("barnabe"),
  ("barnabebarnaby"),
  ("barnaby"),
  ("barney"),
  ("barnie"),
  ("baron"),
  ("barrak"),
  ("barram"),
  ("barrett"),
  ("barrington"),
  ("barris"),
  ("barron"),
  ("barry"),
  ("bart"),
  ("bartel"),
  ("barth"),
  ("bartholomeus"),
  ("bartholomew"),
  ("bartlett"),
  ("bartley"),
  ("barto"),
  ("bartoli"),
  ("bartolo"),
  ("bartolome"),
  ("barton"),
  ("bartt"),
  ("baruch"),
  ("barun"),
  ("basanta"),
  ("basheer"),
  ("bashir"),
  ("basho"),
  ("basil"),
  ("basile"),
  ("basilio"),
  ("basistha"),
  ("bassaam"),
  ("bassil"),
  ("baste"),
  ("bastiaan"),
  ("bastien"),
  ("basudha"),
  ("baucis"),
  ("baxter"),
  ("bay"),
  ("bayard"),
  ("baylen"),
  ("bayley"),
  ("bazyli"),
  ("beal"),
  ("beale"),
  ("beall"),
  ("beamard"),
  ("bearnard"),
  ("beartlaidh"),
  ("beathan"),
  ("beau"),
  ("beaufort"),
  ("beauregard"),
  ("beauvais"),
  ("beckett"),
  ("beckham"),
  ("beda"),
  ("bedwyr"),
  ("bedyw"),
  ("beinvenido"),
  ("beiste"),
  ("belimawr"),
  ("bellamy"),
  ("bellerophon"),
  ("belton"),
  ("beltran"),
  ("bemabe"),
  ("bembe"),
  ("bemossed"),
  ("bemus"),
  ("ben"),
  ("ben-ami"),
  ("bendek"),
  ("bendigeidfran"),
  ("bendyk"),
  ("benedetto"),
  ("benedict"),
  ("benedicto"),
  ("benedictson"),
  ("benedikt"),
  ("benen"),
  ("beniamino"),
  ("benigno"),
  ("benito"),
  ("benjamen"),
  ("benjamin"),
  ("benji"),
  ("benjiman"),
  ("benjiro"),
  ("benjy"),
  ("benkamin"),
  ("benkei"),
  ("bennett"),
  ("benny"),
  ("benoni"),
  ("benroy"),
  ("benson"),
  ("bentley"),
  ("benton"),
  ("benzion"),
  ("beolagh"),
  ("berakhiah"),
  ("berg"),
  ("bergen"),
  ("berko"),
  ("bernado"),
  ("bernard"),
  ("bernardo"),
  ("berny"),
  ("bertil"),
  ("berto"),
  ("bertram"),
  ("bertrand"),
  ("bertrando"),
  ("berwyn"),
  ("betzalel"),
  ("bevan"),
  ("bevaun"),
  ("beven"),
  ("bevin"),
  ("bevis"),
  ("bevyn"),
  ("bhadrak"),
  ("bhadraksh"),
  ("bhaga"),
  ("bhagirath"),
  ("bhagwandas"),
  ("bhagwant"),
  ("bhagyaraj"),
  ("bhaic"),
  ("bhairav"),
  ("bhajan"),
  ("bhaltair"),
  ("bhanu"),
  ("bhanudas"),
  ("bhanuprasad"),
  ("bharadwaj"),
  ("bharat"),
  ("bhargava"),
  ("bhaskar"),
  ("bhaumik"),
  ("bhavata"),
  ("bhavesh"),
  ("bhikkhu"),
  ("bhim"),
  ("bhima"),
  ("bhishma"),
  ("bhooshan"),
  ("bhooshit"),
  ("bhradain"),
  ("bhraghad"),
  ("bhreac"),
  ("bhric"),
  ("bhrij"),
  ("bhudev"),
  ("bhupen"),
  ("bhupendra"),
  ("bhushan"),
  ("bhuvan"),
  ("bhuvanesh"),
  ("biaiardo"),
  ("bialas"),
  ("bialy"),
  ("biast"),
  ("bibek"),
  ("bibhas"),
  ("bibhavasu"),
  ("bidziil"),
  ("bikram"),
  ("bilaal"),
  ("bilagaana"),
  ("bilal"),
  ("bill"),
  ("bilva"),
  ("bimal"),
  ("bimisi"),
  ("binah"),
  ("bindusar"),
  ("binyamin"),
  ("bipin"),
  ("birger"),
  ("birr"),
  ("bishop"),
  ("bishr"),
  ("bishvajit"),
  ("bitasok"),
  ("biton"),
  ("bjorn"),
  ("björn"),
  ("bjørn"),
  ("blaine"),
  ("blair"),
  ("blais"),
  ("blaisdell"),
  ("blaise"),
  ("blaize"),
  ("blake"),
  ("blanco"),
  ("blane"),
  ("blane camshron"),
  ("blaney"),
  ("blar"),
  ("blas"),
  ("blase"),
  ("blathaon"),
  ("blathma"),
  ("blayne"),
  ("blayze"),
  ("blaze"),
  ("bleidd"),
  ("blian"),
  ("boas"),
  ("boaz"),
  ("bob"),
  ("bodaway"),
  ("bode"),
  ("bodhan"),
  ("bodhi"),
  ("bogdan"),
  ("bogdashha"),
  ("bogumil"),
  ("boguslaw"),
  ("bohdan"),
  ("bokkai"),
  ("bolodenka"),
  ("bongani"),
  ("bonifacio"),
  ("bonifaco"),
  ("bonifacy"),
  ("booker"),
  ("boone"),
  ("boreas"),
  ("borg"),
  ("boris"),
  ("borya"),
  ("boryenka"),
  ("borys"),
  ("boryslaw"),
  ("bosede"),
  ("boston"),
  ("botan"),
  ("bothain"),
  ("bothan"),
  ("boudhayan"),
  ("bowen"),
  ("bowie"),
  ("boyce"),
  ("boyd"),
  ("brac"),
  ("brad"),
  ("bradaigh"),
  ("braddon"),
  ("braden"),
  ("bradford"),
  ("bradley"),
  ("bradly"),
  ("bradon"),
  ("bradwen"),
  ("bradwr"),
  ("brady"),
  ("bradyn"),
  ("braeden"),
  ("braedon"),
  ("braen"),
  ("brahma"),
  ("brahmabrata"),
  ("brahmadutt"),
  ("brahman"),
  ("brahmaputra"),
  ("braiden"),
  ("brain"),
  ("bram"),
  ("bran"),
  ("brandan"),
  ("branden"),
  ("brander"),
  ("brandin"),
  ("brando"),
  ("brandt"),
  ("brandyn"),
  ("brannan"),
  ("brannen"),
  ("brannon"),
  ("branson"),
  ("brant"),
  ("brantley"),
  ("braoin"),
  ("brasidas"),
  ("brathach"),
  ("bratindra"),
  ("braulio"),
  ("braxton"),
  ("brayan"),
  ("brayden"),
  ("braydon"),
  ("braylen"),
  ("braylon"),
  ("breac"),
  ("breasal"),
  ("brendan"),
  ("brenden"),
  ("brendon"),
  ("brends"),
  ("brenn"),
  ("brennan"),
  ("brennen"),
  ("brennon"),
  ("brent"),
  ("brenton"),
  ("breslin"),
  ("bretton"),
  ("brian"),
  ("briareus"),
  ("brice"),
  ("bridger"),
  ("brien"),
  ("brijesh"),
  ("brijmohan"),
  ("brion"),
  ("britton"),
  ("broc"),
  ("brochan"),
  ("brock"),
  ("broden"),
  ("broderic"),
  ("broderick"),
  ("brodie"),
  ("brodric"),
  ("brodrick"),
  ("brody"),
  ("broehain"),
  ("brogan"),
  ("bronson"),
  ("brooks"),
  ("brown"),
  ("bruce"),
  ("brunelle"),
  ("bruno"),
  ("bryan"),
  ("bryant"),
  ("bryce"),
  ("brycen"),
  ("brygus"),
  ("bryne"),
  ("bryon"),
  ("brys"),
  ("bryson"),
  ("bryton"),
  ("buck"),
  ("bud"),
  ("buddhadev"),
  ("buddhadeva"),
  ("buddie"),
  ("buddy"),
  ("budhil"),
  ("buford"),
  ("buinton"),
  ("buiron"),
  ("buncho"),
  ("bunjiro"),
  ("bunrakuken"),
  ("bunzo"),
  ("burcet"),
  ("burdett"),
  ("burdette"),
  ("burel"),
  ("burhaan"),
  ("burian"),
  ("burke"),
  ("burl"),
  ("burley"),
  ("burnaby"),
  ("burnett"),
  ("burney"),
  ("burr"),
  ("burt"),
  ("burton"),
  ("busby"),
  ("bussho"),
  ("busta"),
  ("buster"),
  ("butades"),
  ("butch"),
  ("butler"),
  ("bwich"),
  ("byme"),
  ("byrd"),
  ("byron"),
  ("cacanisius"),
  ("cace"),
  ("cadarn"),
  ("cadawg"),
  ("cadby"),
  ("caddoc"),
  ("caddock"),
  ("cade"),
  ("cadel"),
  ("cadell"),
  ("cadellin"),
  ("caden"),
  ("cadman"),
  ("cadmon"),
  ("cadmus"),
  ("cadwallen"),
  ("cadwgawn"),
  ("cadwr"),
  ("cadwy"),
  ("cadyryeith"),
  ("cael"),
  ("caerau"),
  ("caerllion"),
  ("caesare"),
  ("cahir"),
  ("caiden"),
  ("cailean"),
  ("cailin"),
  ("caillen"),
  ("cain"),
  ("caiseal"),
  ("caith"),
  ("cal"),
  ("caladh"),
  ("calan"),
  ("calbert"),
  ("calbhach"),
  ("calcas"),
  ("calchas"),
  ("calder"),
  ("cale"),
  ("caledvwich"),
  ("caley"),
  ("calisto"),
  ("callough"),
  ("callum"),
  ("calum"),
  ("calvagh"),
  ("calvin"),
  ("calvino"),
  ("caly"),
  ("cam"),
  ("cambeul"),
  ("camdan"),
  ("camden"),
  ("camdin"),
  ("camdyn"),
  ("camedyr"),
  ("cameron"),
  ("camhlaidh"),
  ("camilo"),
  ("campbell"),
  ("campbellcamron"),
  ("camren"),
  ("camron"),
  ("camshron"),
  ("canard"),
  ("canice"),
  ("cannon"),
  ("cant"),
  ("canute"),
  ("canyon"),
  ("caolaidhe"),
  ("caolan"),
  ("capaneus"),
  ("caradawg"),
  ("caradoc"),
  ("caradog"),
  ("carel"),
  ("carleton"),
  ("carlino"),
  ("carlo"),
  ("carlomagno"),
  ("carlton"),
  ("carmelo"),
  ("carmi"),
  ("carmine"),
  ("carne"),
  ("carnell"),
  ("carney"),
  ("carolos"),
  ("carolus"),
  ("carr"),
  ("carraig"),
  ("carsen"),
  ("carter"),
  ("carthach"),
  ("carthage"),
  ("cartier"),
  ("carvell"),
  ("cas"),
  ("case"),
  ("caseareo"),
  ("casen"),
  ("cash"),
  ("cashel"),
  ("casim"),
  ("casimer"),
  ("casimir"),
  ("casimiro"),
  ("casnar"),
  ("cason"),
  ("casper"),
  ("cass"),
  ("cassian"),
  ("cassius"),
  ("casswallawn"),
  ("castor"),
  ("caswallon"),
  ("catahecassa"),
  ("cathal"),
  ("cavan"),
  ("cavin"),
  ("cawley"),
  ("cawrdav"),
  ("cayden"),
  ("ceallach"),
  ("cearbhall"),
  ("ceard"),
  ("ceardach"),
  ("cearnach"),
  ("ceasar"),
  ("cecilio"),
  ("cecrops"),
  ("cedric"),
  ("cedrick"),
  ("cedrik"),
  ("cedro"),
  ("ceithin"),
  ("celeus"),
  ("cenon"),
  ("cephalus"),
  ("cepheus"),
  ("cerbeius"),
  ("cesar"),
  ("cesare"),
  ("cesario"),
  ("cesaro"),
  ("cetus"),
  ("ceyx"),
  ("chace"),
  ("chad"),
  ("chadd"),
  ("chadrick"),
  ("chadwick"),
  ("chagai"),
  ("chaim"),
  ("chait"),
  ("chaitanya"),
  ("chakor"),
  ("chakra"),
  ("chakrapani"),
  ("chakshu"),
  ("chalmer"),
  ("chalmers"),
  ("chaman"),
  ("chamanlal"),
  ("champak"),
  ("chanan"),
  ("chance"),
  ("chanchal"),
  ("chandak"),
  ("chandaka"),
  ("chandan"),
  ("chander"),
  ("chandrachur"),
  ("chandrahas"),
  ("chandrak"),
  ("chandrakanta"),
  ("chandrakishore"),
  ("chandrakumar"),
  ("chandramohan"),
  ("chandran"),
  ("chandranath"),
  ("chandraraj"),
  ("chandrashekhar"),
  ("chandresh"),
  ("chane"),
  ("chaney"),
  ("chankoowashtay"),
  ("chanler"),
  ("channon"),
  ("chano"),
  ("chanoch"),
  ("chapal"),
  ("chapin"),
  ("chappel"),
  ("chappell"),
  ("charan"),
  ("charanjit"),
  ("charlton"),
  ("charro"),
  ("charudutta"),
  ("charybdis"),
  ("chas"),
  ("chaschunka"),
  ("cha'tima"),
  ("chattan"),
  ("chaturbhuj"),
  ("chaunce"),
  ("chauncey"),
  ("chauncy"),
  ("chavez"),
  ("chaviv"),
  ("chavivi"),
  ("chayim"),
  ("chayne"),
  ("chayo"),
  ("chayton"),
  ("chaz"),
  ("che"),
  ("chen"),
  ("cheney"),
  ("cheng"),
  ("chepe"),
  ("cherokee"),
  ("cheslav"),
  ("chesley"),
  ("chesmu"),
  ("chester"),
  ("chet"),
  ("chetan"),
  ("chetana"),
  ("cheval"),
  ("chevalier"),
  ("chevell"),
  ("cheveyo"),
  ("chevy"),
  ("cheyne"),
  ("chhandak"),
  ("chico"),
  ("chidambar"),
  ("chidananda"),
  ("chidi"),
  ("chidubem"),
  ("chiemeka"),
  ("chikafusa"),
  ("chikao"),
  ("chike"),
  ("chima"),
  ("chinja"),
  ("chinmay"),
  ("chinmayananda"),
  ("chintamani"),
  ("chip"),
  ("chirag"),
  ("chiram"),
  ("chiranjeev"),
  ("chirantan"),
  ("chirayu"),
  ("chisholm"),
  ("chitrabhanu"),
  ("chitraksh"),
  ("chitral"),
  ("chitrarath"),
  ("chitrasen"),
  ("chitta"),
  ("chittaprasad"),
  ("chittaranjan"),
  ("chittaswarup"),
  ("chittesh"),
  ("chiumbo"),
  ("chiyses"),
  ("chochmo"),
  ("chochokpi"),
  ("chochuschuvio"),
  ("chogan"),
  ("chojiro"),
  ("chomei"),
  ("choncey"),
  ("choni"),
  ("choovio"),
  ("choviohoya"),
  ("chowilawu"),
  ("christ"),
  ("christan"),
  ("christian"),
  ("christiano"),
  ("christie"),
  ("christien"),
  ("christion"),
  ("christoffer"),
  ("christofor"),
  ("christop"),
  ("christoper"),
  ("christoph"),
  ("christophe"),
  ("christopher"),
  ("christophoros"),
  ("christos"),
  ("christy"),
  ("chruse"),
  ("chrysostom"),
  ("chuchip"),
  ("chuck"),
  ("chudamani"),
  ("chuichi"),
  ("chul"),
  ("chunta"),
  ("cian"),
  ("cianan"),
  ("ciar"),
  ("ciaran"),
  ("ciarrai"),
  ("cibor"),
  ("cicero"),
  ("ciceron"),
  ("cid"),
  ("cidro"),
  ("cillian"),
  ("cimon"),
  ("cinneide"),
  ("cionaodh"),
  ("cipriano"),
  ("ciqala"),
  ("cirilo"),
  ("cirio"),
  ("ciro"),
  ("cirocco"),
  ("cisco"),
  ("ciyde"),
  ("ciywd"),
  ("claas"),
  ("clach"),
  ("clancy"),
  ("clarance"),
  ("clark"),
  ("clarnce"),
  ("claud"),
  ("claudio"),
  ("claudios"),
  ("claus"),
  ("clayton"),
  ("cleavant"),
  ("cleavon"),
  ("cleit"),
  ("clem"),
  ("clement"),
  ("clemente"),
  ("clendon"),
  ("clennan"),
  ("cleobis"),
  ("cleon"),
  ("clester"),
  ("cletus"),
  ("cleve"),
  ("cleveland"),
  ("cleytus"),
  ("cliff"),
  ("clifton"),
  ("clint"),
  ("clinton"),
  ("clio"),
  ("clodoveo"),
  ("clourindo"),
  ("clovis"),
  ("cloyd"),
  ("clud"),
  ("cluny"),
  ("clust"),
  ("clyde"),
  ("cnychwr"),
  ("coburn"),
  ("coby"),
  ("coch"),
  ("cochise"),
  ("cochlain"),
  ("cocytus"),
  ("codell"),
  ("codey"),
  ("codie"),
  ("coed"),
  ("coen"),
  ("coeus"),
  ("cohen"),
  ("coilin"),
  ("coillcumhann"),
  ("coinneach"),
  ("coire"),
  ("coireall"),
  ("colan"),
  ("colbert"),
  ("colbey"),
  ("cole"),
  ("coleman"),
  ("coleton"),
  ("colin"),
  ("colla"),
  ("collie"),
  ("collin"),
  ("collins"),
  ("collis"),
  ("colm"),
  ("colonel"),
  ("colquhoun"),
  ("colt"),
  ("colten"),
  ("colter"),
  ("colton"),
  ("colum"),
  ("columbus"),
  ("colyn"),
  ("coman"),
  ("comhghan"),
  ("comyn"),
  ("conaire"),
  ("conal"),
  ("conall"),
  ("conan"),
  ("conchobhar"),
  ("condela"),
  ("conlan"),
  ("conleth"),
  ("conley"),
  ("conn"),
  ("connacht"),
  ("connell"),
  ("conner"),
  ("connor"),
  ("conny"),
  ("conor"),
  ("conorcony"),
  ("conrad"),
  ("conrado"),
  ("constantin"),
  ("constantine"),
  ("constantino"),
  ("conway"),
  ("cony conyn"),
  ("conyn"),
  ("cooper"),
  ("corban"),
  ("corben"),
  ("corbett"),
  ("corbin"),
  ("corby"),
  ("corbyn"),
  ("cordaro"),
  ("cordell"),
  ("cordero"),
  ("corey"),
  ("coridan"),
  ("corin"),
  ("cormac"),
  ("cormack"),
  ("cormic"),
  ("cormick"),
  ("cornelio"),
  ("cornelious"),
  ("cornelius"),
  ("cornell"),
  ("cornia"),
  ("corradeo"),
  ("corrado"),
  ("corran"),
  ("corren"),
  ("correy"),
  ("cort"),
  ("cortez"),
  ("cortland"),
  ("corvin"),
  ("corwin"),
  ("cory"),
  ("corybantes"),
  ("corydon"),
  ("cos"),
  ("cosmas"),
  ("cosmo"),
  ("cottus"),
  ("coty"),
  ("court"),
  ("courtenay"),
  ("courtland"),
  ("courtnay"),
  ("coy"),
  ("coyan"),
  ("coyne"),
  ("craddock"),
  ("cradoe"),
  ("craig"),
  ("crannog"),
  ("crawford"),
  ("crayton"),
  ("creedon"),
  ("creighton"),
  ("creon"),
  ("crespin"),
  ("cretien"),
  ("crevan"),
  ("crist"),
  ("cristian"),
  ("cristiano"),
  ("cristobal"),
  ("cristofer"),
  ("cristofor"),
  ("cristoforo"),
  ("criston"),
  ("cristophe"),
  ("cristopher"),
  ("cristos"),
  ("cristoval"),
  ("cronus"),
  ("cruadhlaoich"),
  ("cruim"),
  ("ctesippus"),
  ("cuanaic"),
  ("cuartio"),
  ("cuarto"),
  ("cubert"),
  ("cuinn"),
  ("culhwch"),
  ("cullen"),
  ("cullo"),
  ("culvanawd"),
  ("cumhea"),
  ("curcio"),
  ("curley"),
  ("currito"),
  ("curro"),
  ("curt"),
  ("curtice"),
  ("curtiss"),
  ("custenhin"),
  ("cycnus"),
  ("cymry"),
  ("cynbal"),
  ("cynbel"),
  ("cyprian"),
  ("cyr"),
  ("cyrano"),
  ("cyrek"),
  ("cyril"),
  ("cyrus"),
  ("cyryl"),
  ("cystennin"),
  ("czar"),
  ("czeslaw"),
  ("czesŌaw"),
  ("daamir"),
  ("daawood"),
  ("dabeet"),
  ("dabi"),
  ("dace"),
  ("dacey"),
  ("dacian"),
  ("dacio"),
  ("daedalus"),
  ("daeg"),
  ("daegan"),
  ("daemon"),
  ("daevin"),
  ("daevon"),
  ("dafydd"),
  ("dag"),
  ("dagan"),
  ("dagen"),
  ("dagobert"),
  ("dagon"),
  ("dahy"),
  ("daibheid"),
  ("daif"),
  ("daifallah"),
  ("daileass"),
  ("daimh"),
  ("daimhin"),
  ("daire"),
  ("daisetsu"),
  ("daisuke"),
  ("daithi"),
  ("dajon"),
  ("da-jon"),
  ("dajuan"),
  ("da-juan"),
  ("dakarai"),
  ("dakoda"),
  ("dakotah"),
  ("dakshesh"),
  ("dalan"),
  ("daleel"),
  ("dallan"),
  ("dalldav"),
  ("dallen"),
  ("dallin"),
  ("dallon"),
  ("dalon"),
  ("dalton"),
  ("dalvin"),
  ("damae"),
  ("damalis"),
  ("daman"),
  ("damarco"),
  ("damarcus"),
  ("damari"),
  ("damario"),
  ("damarion"),
  ("damaskenos"),
  ("damaskinos"),
  ("damason"),
  ("damen"),
  ("dameon"),
  ("damian"),
  ("damiano"),
  ("damion"),
  ("damocles"),
  ("damodar"),
  ("damon"),
  ("damond"),
  ("damone"),
  ("danaus"),
  ("danby"),
  ("dandrae"),
  ("dandras"),
  ("dandre"),
  ("d'andre"),
  ("d'andrea"),
  ("dane"),
  ("daned"),
  ("danel"),
  ("danell"),
  ("dangelo"),
  ("d'angelo"),
  ("danial"),
  ("daniel"),
  ("danil"),
  ("danilo"),
  ("danjuro"),
  ("danniell"),
  ("danno"),
  ("dannon"),
  ("danny"),
  ("dantae"),
  ("dante"),
  ("d'ante"),
  ("dantel"),
  ("danton"),
  ("d'anton"),
  ("dantrell"),
  ("danyl"),
  ("daquain"),
  ("daquan"),
  ("dar"),
  ("darach"),
  ("daragh"),
  ("darcio"),
  ("dardanus"),
  ("dareau"),
  ("darel"),
  ("darell"),
  ("daren"),
  ("daric"),
  ("darick"),
  ("dariel"),
  ("dariell"),
  ("darien"),
  ("darik"),
  ("darin"),
  ("dario"),
  ("darion"),
  ("darius"),
  ("dariusz"),
  ("darnay"),
  ("darnel"),
  ("darold"),
  ("daron"),
  ("darpak"),
  ("darpan"),
  ("darragh"),
  ("darrel"),
  ("darrell"),
  ("darren"),
  ("darrian"),
  ("darrick"),
  ("darrien"),
  ("darrin"),
  ("darrion"),
  ("darrius"),
  ("darroll"),
  ("darron"),
  ("darry"),
  ("darryl"),
  ("darryle"),
  ("darryll"),
  ("darryn"),
  ("darshan"),
  ("dartagnan"),
  ("daruka"),
  ("darvell"),
  ("darvin"),
  ("darwin"),
  ("dary"),
  ("daryle"),
  ("daryn"),
  ("dasan"),
  ("dasdasa"),
  ("dash"),
  ("dasharath"),
  ("dashawn"),
  ("da-shawn"),
  ("dashiell"),
  ("dasras"),
  ("dasya"),
  ("dattatreya"),
  ("daulton"),
  ("dauntay"),
  ("daunte"),
  ("davante"),
  ("dave"),
  ("davet"),
  ("davey"),
  ("davian"),
  ("david"),
  ("davide"),
  ("davie"),
  ("davies"),
  ("davin"),
  ("davion"),
  ("davis"),
  ("davon"),
  ("davonta"),
  ("davy"),
  ("davyn"),
  ("dawayne"),
  ("dawid"),
  ("dawson"),
  ("dax"),
  ("daxton"),
  ("dayanand"),
  ("daymon"),
  ("dayne"),
  ("dayton"),
  ("dayu"),
  ("deacon"),
  ("deaengelo"),
  ("deaglan"),
  ("deandrae"),
  ("deandre"),
  ("deangelo"),
  ("de-angelo"),
  ("deante"),
  ("dearg"),
  ("deaundra"),
  ("deaven"),
  ("debashis"),
  ("debashish"),
  ("declan"),
  ("dedrian"),
  ("dedric"),
  ("dedrick"),
  ("deegan"),
  ("deelon"),
  ("deen"),
  ("deenabandhu"),
  ("deep"),
  ("deepak"),
  ("deepan"),
  ("deepankar"),
  ("deependra"),
  ("deependu"),
  ("deepesh"),
  ("deepit"),
  ("deeptanshu"),
  ("deeptendu"),
  ("deeptiman"),
  ("deeptimoy"),
  ("deion"),
  ("deiphobus"),
  ("dejohn"),
  ("de-john"),
  ("dejon"),
  ("dejuan"),
  ("deke"),
  ("dekel"),
  ("dekle"),
  ("del"),
  ("delancy"),
  ("delane"),
  ("delano"),
  ("delbert"),
  ("delbin"),
  ("delford"),
  ("delling"),
  ("delmer"),
  ("delmon"),
  ("delmont"),
  ("delmore"),
  ("delon"),
  ("delondelonn"),
  ("delonn"),
  ("delray"),
  ("delrick"),
  ("delrico"),
  ("delron"),
  ("delroy"),
  ("delsin"),
  ("delton"),
  ("delvin"),
  ("delwin"),
  ("delwyn"),
  ("demaine"),
  ("demarco"),
  ("demarcus"),
  ("demario"),
  ("demarion"),
  ("demery"),
  ("demetre"),
  ("demetri"),
  ("demetric"),
  ("demetrios"),
  ("demian"),
  ("demitri"),
  ("demitrius"),
  ("demodocus"),
  ("demogorgon"),
  ("demond"),
  ("demonde"),
  ("demont"),
  ("demonte"),
  ("demophon"),
  ("demoritus"),
  ("de-morris"),
  ("demothi"),
  ("demyan"),
  ("denbe"),
  ("denes"),
  ("denis"),
  ("dennard"),
  ("dennet"),
  ("dennie"),
  ("denver"),
  ("denys"),
  ("denzel"),
  ("denzell"),
  ("deo"),
  ("deole"),
  ("deondre"),
  ("deonta"),
  ("deontae"),
  ("deonte"),
  ("deoradhain"),
  ("dequain"),
  ("dequan"),
  ("dereck"),
  ("derek"),
  ("derell"),
  ("dereon"),
  ("deric"),
  ("derick"),
  ("derik"),
  ("dermod"),
  ("dermot"),
  ("deron"),
  ("de'ron"),
  ("derrall"),
  ("derrek"),
  ("derrell"),
  ("derrick"),
  ("derrill"),
  ("derwin"),
  ("desean"),
  ("deshane"),
  ("de'shane"),
  ("deshaun"),
  ("deshawn"),
  ("desi"),
  ("desiderio"),
  ("desmond"),
  ("destan"),
  ("destin"),
  ("deston"),
  ("destrey"),
  ("destrie"),
  ("destry"),
  ("deucalion"),
  ("dev"),
  ("devabrata"),
  ("devadas"),
  ("devadutt"),
  ("devain"),
  ("devajyoti"),
  ("deval"),
  ("devanand"),
  ("devang"),
  ("devante"),
  ("devarsi"),
  ("devaughn"),
  ("devdas"),
  ("devdutta"),
  ("de'vegas"),
  ("deven"),
  ("devendra"),
  ("deveral"),
  ("devere"),
  ("devereau"),
  ("devereaux"),
  ("deverel"),
  ("deverell"),
  ("deverick"),
  ("deverril"),
  ("devesh"),
  ("deveshwar"),
  ("devilal"),
  ("devine"),
  ("deviprasad"),
  ("dev kumar"),
  ("devland"),
  ("devlin"),
  ("devlon"),
  ("devlyn"),
  ("devnarayan"),
  ("devnath"),
  ("devondre"),
  ("devonta"),
  ("devontae"),
  ("devonte"),
  ("devraj"),
  ("devry"),
  ("dewain"),
  ("dewan"),
  ("dewayne"),
  ("dewei"),
  ("dewey"),
  ("dewi"),
  ("dewitt"),
  ("dexter"),
  ("dhaafir"),
  ("dhaahir"),
  ("dhaakir"),
  ("dhaki"),
  ("dhananjay"),
  ("dhanesh"),
  ("dhanraj"),
  ("dhansukh"),
  ("dhanvant"),
  ("dharanidhar"),
  ("dhareef"),
  ("dharmadas"),
  ("dharmadev"),
  ("dharmanand"),
  ("dharmendra"),
  ("dharmendu"),
  ("dharmesh"),
  ("dharmpal"),
  ("dharmveer"),
  ("dhaval"),
  ("dhawal"),
  ("dheeman"),
  ("dheemant"),
  ("dheer"),
  ("dheerendra"),
  ("dhenuka"),
  ("dhiraj"),
  ("dhiren"),
  ("dhirendra"),
  ("dhoire"),
  ("dhritiman"),
  ("dhruv"),
  ("dhruva"),
  ("dhumavarna"),
  ("dhyanesh"),
  ("diallo"),
  ("diandre"),
  ("diarmuid"),
  ("dichali"),
  ("dick"),
  ("dickie"),
  ("didier"),
  ("didrik"),
  ("diego"),
  ("dieter"),
  ("digamber"),
  ("digon"),
  ("dijon"),
  ("dilan"),
  ("dilawar"),
  ("dilip"),
  ("dillan"),
  ("dillard"),
  ("dillen"),
  ("dillie"),
  ("dillion"),
  ("dillon"),
  ("dillus"),
  ("dimitri"),
  ("dimitrios"),
  ("dinanath"),
  ("dinar"),
  ("dindayal"),
  ("dinesh"),
  ("dinkar"),
  ("dino"),
  ("diokles"),
  ("diomedes"),
  ("diondre"),
  ("dionizy"),
  ("dionte"),
  ("dionysios"),
  ("dionysius"),
  ("dionysus"),
  ("dirck"),
  ("dirk"),
  ("diron"),
  ("dirrnyg"),
  ("divakar"),
  ("divyanga"),
  ("divyendu"),
  ("divyesh"),
  ("dix"),
  ("dixon"),
  ("d'lon"),
  ("d'marco"),
  ("d'marcus"),
  ("d'marreio"),
  ("dobieslaw"),
  ("dobry"),
  ("doc"),
  ("dock"),
  ("doctor"),
  ("dodek"),
  ("dohosan"),
  ("doi"),
  ("doire"),
  ("dokuohtei"),
  ("dolan"),
  ("dolf"),
  ("doll"),
  ("dolphus"),
  ("domenic"),
  ("domenico"),
  ("domhnull"),
  ("domingo"),
  ("dominic"),
  ("dominick"),
  ("dominik"),
  ("don"),
  ("donahue"),
  ("donal"),
  ("donald"),
  ("donall"),
  ("donat"),
  ("donatello"),
  ("donatien"),
  ("donato"),
  ("donavan"),
  ("donavon"),
  ("dondre"),
  ("donel"),
  ("donell"),
  ("donn"),
  ("donnachadh"),
  ("donnchadh"),
  ("donne"),
  ("donnel"),
  ("donnell"),
  ("donny"),
  ("donovan"),
  ("donta"),
  ("dontae"),
  ("donte"),
  ("dontrell"),
  ("donzel"),
  ("doppo"),
  ("dor"),
  ("doran"),
  ("dorek"),
  ("doren"),
  ("dorion"),
  ("doron"),
  ("doroteo"),
  ("dorrance"),
  ("dorrel"),
  ("dorrell"),
  ("dorren"),
  ("dorrin"),
  ("dorsey"),
  ("doug"),
  ("dougal"),
  ("doughall"),
  ("douglas"),
  ("douglas goraidh"),
  ("douglass"),
  ("dour"),
  ("dov"),
  ("dover"),
  ("dovev"),
  ("doyle"),
  ("draco"),
  ("drago"),
  ("drake"),
  ("drakon"),
  ("draven"),
  ("drem"),
  ("dremidydd"),
  ("dru"),
  ("druce"),
  ("drudwas"),
  ("drummand"),
  ("drummond"),
  ("drupad"),
  ("druson"),
  ("drych"),
  ("drystan"),
  ("dryw"),
  ("drywsone"),
  ("d'sean"),
  ("d'shaun"),
  ("duach"),
  ("duane"),
  ("duante"),
  ("duardo"),
  ("duarte"),
  ("duayne"),
  ("dubal"),
  ("dubh"),
  ("dubhglas"),
  ("dudley"),
  ("duff"),
  ("duhkha"),
  ("duke"),
  ("dulal"),
  ("dumont"),
  ("duncan"),
  ("dunixi"),
  ("dunmor"),
  ("dunmore"),
  ("duran"),
  ("durand"),
  ("durango"),
  ("duranjaya"),
  ("durant"),
  ("durante"),
  ("dureau"),
  ("durell"),
  ("durjaya"),
  ("duron"),
  ("durrant"),
  ("durrell"),
  ("durvasas"),
  ("durward"),
  ("dushkriti"),
  ("dushyanta"),
  ("dustan"),
  ("dustin"),
  ("dustyn"),
  ("duval"),
  ("duwayne"),
  ("dwain"),
  ("dwaine"),
  ("dwaipayan"),
  ("dwane"),
  ("dwayne"),
  ("dwight"),
  ("dwijaraj"),
  ("dwijendra"),
  ("dwijesh"),
  ("dwyane"),
  ("dwyer"),
  ("dyami"),
  ("dyaus"),
  ("dyllan"),
  ("dyllon"),
  ("dylon"),
  ("dymas"),
  ("dyvynarth"),
  ("dyvyr"),
  ("dywel"),
  ("eachan"),
  ("eachann"),
  ("eagan"),
  ("eagon"),
  ("eames"),
  ("eamon"),
  ("ean"),
  ("eanruig"),
  ("earc"),
  ("earie"),
  ("earl"),
  ("earle"),
  ("early"),
  ("earnan"),
  ("earnest"),
  ("earwin"),
  ("earwine"),
  ("eason"),
  ("easton"),
  ("eban"),
  ("eben"),
  ("ebenezer"),
  ("eber"),
  ("eberhard"),
  ("ebizo"),
  ("edd"),
  ("eddy"),
  ("eder"),
  ("edern"),
  ("edgar"),
  ("edgard"),
  ("edgardo"),
  ("edgerin"),
  ("edik"),
  ("edison"),
  ("edmon"),
  ("edmond"),
  ("edmondo"),
  ("edmund"),
  ("edmundo"),
  ("edmyg"),
  ("edoardo"),
  ("eduard"),
  ("eduardo"),
  ("edvard"),
  ("edvin"),
  ("edward"),
  ("edwardo"),
  ("edwin"),
  ("edwyn"),
  ("efraim"),
  ("efrain"),
  ("efran"),
  ("efrat"),
  ("efrayim"),
  ("efrem"),
  ("efren"),
  ("efron"),
  ("efterpi"),
  ("egan"),
  ("egbert"),
  ("egidio"),
  ("egidius"),
  ("egiodeo"),
  ("egon"),
  ("egor"),
  ("ehud"),
  ("eichi"),
  ("eichiro"),
  ("eiddoel"),
  ("eien"),
  ("eiichi"),
  ("eiji"),
  ("eijiro"),
  ("eikichi"),
  ("eiladar"),
  ("eilig"),
  ("eimar"),
  ("eimhin"),
  ("einar"),
  ("einian"),
  ("einion"),
  ("eirik"),
  ("eisaku"),
  ("eisen"),
  ("eishi"),
  ("eisuke"),
  ("eitan"),
  ("eitoku"),
  ("eizan"),
  ("eizo"),
  ("ekadanta"),
  ("ekalavya"),
  ("ekalinga"),
  ("ekambar"),
  ("ekanath"),
  ("ekanga"),
  ("ekewaka"),
  ("ekiken"),
  ("eknath"),
  ("ekram"),
  ("ekwueme"),
  ("elam"),
  ("elazar"),
  ("elazaro"),
  ("elbanco"),
  ("elbert"),
  ("elden"),
  ("elder"),
  ("eldon"),
  ("eldred"),
  ("eldrick"),
  ("eldridge"),
  ("eldwin"),
  ("eleazar"),
  ("eleftherios"),
  ("elek"),
  ("elequemedo"),
  ("eleutherios"),
  ("elex"),
  ("elgin"),
  ("elhanan"),
  ("eli"),
  ("elian"),
  ("elias"),
  ("eliazar"),
  ("elie"),
  ("elieis"),
  ("eliezer"),
  ("eliga"),
  ("eligah"),
  ("elige"),
  ("elihu"),
  ("elija"),
  ("elijah"),
  ("eliot"),
  ("eliott"),
  ("eliseo"),
  ("elishama"),
  ("elisheba"),
  ("eljah"),
  ("elkanah"),
  ("ellery"),
  ("elliot"),
  ("elliotemil"),
  ("elliott"),
  ("ellsworth"),
  ("elmo"),
  ("elmore"),
  ("eloy"),
  ("elphin"),
  ("elrad"),
  ("elroy"),
  ("elsu"),
  ("elton"),
  ("eluwilussit"),
  ("elvin"),
  ("elvio"),
  ("elvis"),
  ("elwin"),
  ("elwood"),
  ("ely"),
  ("elzie"),
  ("emanuel"),
  ("emeka"),
  ("emesto"),
  ("emhyr"),
  ("emil"),
  ("emile"),
  ("emiliano"),
  ("emilio"),
  ("emiyn"),
  ("emlyn"),
  ("emmanuel"),
  ("emmanuele"),
  ("emmet"),
  ("emmett"),
  ("emmilian"),
  ("emmit"),
  ("emmitt"),
  ("emory"),
  ("emrys"),
  ("enapay"),
  ("enar"),
  ("enceladus"),
  ("endre"),
  ("endymion"),
  ("enea"),
  ("eneas"),
  ("enitan"),
  ("enkoodabaoo"),
  ("ennosuke"),
  ("enoch"),
  ("enos"),
  ("enrico"),
  ("enrique"),
  ("enyeto"),
  ("enzo"),
  ("eoghan"),
  ("eoin"),
  ("epeius"),
  ("ephraim"),
  ("ephram"),
  ("ephrem"),
  ("ephriam"),
  ("ephron"),
  ("eran"),
  ("erasmo"),
  ("erasmus"),
  ("erbin"),
  ("ercwiff"),
  ("erebus"),
  ("erechtheus"),
  ("erek"),
  ("ergyryad"),
  ("erich"),
  ("erichthonius"),
  ("erick"),
  ("erik"),
  ("eriq"),
  ("eriyn"),
  ("erlend"),
  ("erling"),
  ("ermanno"),
  ("ermid"),
  ("ernard"),
  ("ernest"),
  ("ernesto"),
  ("ernie"),
  ("ernst"),
  ("eron"),
  ("errapel"),
  ("errol"),
  ("erroll"),
  ("erskine"),
  ("eru"),
  ("erubiel"),
  ("ervan"),
  ("ervin"),
  ("erwin"),
  ("erwyn"),
  ("eryi"),
  ("eryk"),
  ("erymanthus"),
  ("erysichthon"),
  ("eryx"),
  ("esau"),
  ("esdras"),
  ("esequiel"),
  ("eshkol"),
  ("eshwar"),
  ("eskil"),
  ("espen"),
  ("esra"),
  ("estanislao"),
  ("este"),
  ("esteban"),
  ("estefan"),
  ("estel"),
  ("estevan"),
  ("estevao"),
  ("estevon"),
  ("eston"),
  ("etan"),
  ("etchemin"),
  ("eteocles"),
  ("ethan"),
  ("ethen"),
  ("etienne"),
  ("etlelooaat"),
  ("etor"),
  ("etsuya"),
  ("ettore"),
  ("etu"),
  ("euan"),
  ("eubuleus"),
  ("eudav"),
  ("eugen"),
  ("eugenio"),
  ("eugenios"),
  ("eugenius"),
  ("eulogio"),
  ("eumaeus"),
  ("eupeithes"),
  ("euphrosyne"),
  ("eurus"),
  ("euryalus"),
  ("eurylochus"),
  ("eurymachus"),
  ("eurypylus"),
  ("eurystheus"),
  ("euryton"),
  ("eus"),
  ("eusebio"),
  ("eusebius"),
  ("eustace"),
  ("eustachy"),
  ("eustatius"),
  ("eustis"),
  ("evan"),
  ("evander"),
  ("evann"),
  ("evans"),
  ("evarado"),
  ("even"),
  ("everardo"),
  ("everett"),
  ("everette"),
  ("everhart"),
  ("evert"),
  ("evgenii"),
  ("evin"),
  ("evoy"),
  ("evrawg"),
  ("evyn"),
  ("evzen"),
  ("ewald"),
  ("ewan"),
  ("ewell"),
  ("ewen"),
  ("ewing"),
  ("eyal"),
  ("eyou"),
  ("eytan"),
  ("ezechiel"),
  ("ezekiel"),
  ("ezequiel"),
  ("ezhno"),
  ("ezra"),
  ("ezrah"),
  ("faadi"),
  ("faadil"),
  ("faai"),
  ("faaid"),
  ("faaiq"),
  ("faalih"),
  ("faaris"),
  ("faarooq"),
  ("faas"),
  ("faatih"),
  ("faatin"),
  ("fabi"),
  ("fabian"),
  ("fabiano"),
  ("fabien"),
  ("fabio"),
  ("fabrizio"),
  ("faddei"),
  ("fadey"),
  ("fadeyka"),
  ("fahd"),
  ("faheem"),
  ("fahey"),
  ("fahmi"),
  ("fahroni"),
  ("fahy"),
  ("fai"),
  ("faing"),
  ("faisal"),
  ("faiyaz"),
  ("faiz"),
  ("falak"),
  ("fane"),
  ("fanibhusan"),
  ("fanindra"),
  ("fanish"),
  ("fanishwar"),
  ("fanuco"),
  ("faolan"),
  ("faraj"),
  ("farajallah"),
  ("faraji"),
  ("faraz"),
  ("fardoragh"),
  ("fareed"),
  ("farhaan"),
  ("farhad"),
  ("farid"),
  ("farlan"),
  ("farlane"),
  ("faro"),
  ("farokh"),
  ("faron"),
  ("farrell"),
  ("farris"),
  ("fate"),
  ("fateen"),
  ("fateh"),
  ("fat'hi"),
  ("fatik"),
  ("faust"),
  ("faustino"),
  ("fausto"),
  ("fawwaaz"),
  ("fawz"),
  ("fawzi"),
  ("fayard"),
  ("fayyaad"),
  ("feandan"),
  ("fearchar"),
  ("federico"),
  ("fedor"),
  ("fedyenka"),
  ("feivel"),
  ("felan"),
  ("feleti"),
  ("feliciano"),
  ("felicio"),
  ("feliks"),
  ("felipe"),
  ("felippe"),
  ("felix"),
  ("felton"),
  ("femi"),
  ("feo"),
  ("feodor"),
  ("feodras"),
  ("fercos"),
  ("ferdinand"),
  ("ferdinando"),
  ("fergus"),
  ("fermin"),
  ("fernand"),
  ("fernando"),
  ("ferrell"),
  ("ferric"),
  ("ferris"),
  ("fferyll"),
  ("fflergant"),
  ("fflewdwr"),
  ("ffodor"),
  ("ffowc"),
  ("fibh"),
  ("fico"),
  ("fidel"),
  ("fidele"),
  ("fidelio"),
  ("fie"),
  ("fikri"),
  ("filiberto"),
  ("filip"),
  ("filippo"),
  ("filips"),
  ("finbar"),
  ("fineen"),
  ("finian"),
  ("finlay"),
  ("finn"),
  ("finnegan"),
  ("finnin"),
  ("fionan"),
  ("fiorello"),
  ("firoz"),
  ("firth"),
  ("fisher"),
  ("fitz"),
  ("fitzgerald"),
  ("fitzhugh"),
  ("fjodor"),
  ("flaco"),
  ("flavio"),
  ("flawiusz"),
  ("fleming"),
  ("fletcher"),
  ("flinn"),
  ("flint"),
  ("flip"),
  ("floinn"),
  ("florencio"),
  ("florentino"),
  ("florian"),
  ("florinio"),
  ("florus"),
  ("floyd"),
  ("flyn"),
  ("flynn"),
  ("fnam"),
  ("foma"),
  ("fontaine"),
  ("fontana"),
  ("fontane"),
  ("fontayne"),
  ("fonteyne"),
  ("forbes"),
  ("ford"),
  ("forest"),
  ("forrest"),
  ("fortun"),
  ("fortune"),
  ("foster"),
  ("foy"),
  ("fraco"),
  ("francesco"),
  ("franco"),
  ("francois"),
  ("frandszk"),
  ("franklin"),
  ("franklyn"),
  ("franky"),
  ("franz"),
  ("frasco"),
  ("frascuelo"),
  ("fraser"),
  ("frashegird"),
  ("frasier"),
  ("frazer"),
  ("frazier"),
  ("freddy"),
  ("fredek"),
  ("frederic"),
  ("frederick"),
  ("frederico"),
  ("fredric"),
  ("fredrick"),
  ("fredrik"),
  ("fredy"),
  ("freeman"),
  ("freman"),
  ("fremont"),
  ("french"),
  ("fresco"),
  ("frisco"),
  ("fritz"),
  ("frode"),
  ("fryderyk"),
  ("fuaad"),
  ("fujimaro"),
  ("fujio"),
  ("fukusaburu"),
  ("fulgencio"),
  ("fulop"),
  ("fulton"),
  ("fumiaki"),
  ("fumihiko"),
  ("fumihiro"),
  ("fumimaro"),
  ("fumio"),
  ("fungai"),
  ("furman"),
  ("furqaan"),
  ("fychan"),
  ("fyodor"),
  ("fyrsil"),
  ("gaagii"),
  ("gabai"),
  ("gabe"),
  ("gabino"),
  ("gabor"),
  ("gabrian"),
  ("gabrielo"),
  ("gabrio"),
  ("gace"),
  ("gad"),
  ("gadhi"),
  ("gadhra"),
  ("gael"),
  ("gaelan"),
  ("gaetan"),
  ("gaetano"),
  ("gagan"),
  ("gaganvihari"),
  ("gage"),
  ("gaho"),
  ("gaige"),
  ("gaile"),
  ("gaillard"),
  ("gair"),
  ("gaius"),
  ("gajanan"),
  ("gajanand"),
  ("gajendra"),
  ("gal"),
  ("galan"),
  ("galen"),
  ("galeno"),
  ("galinthias"),
  ("galtem"),
  ("galterio"),
  ("galtero"),
  ("galvin"),
  ("galyn"),
  ("gamaliel"),
  ("ganapati"),
  ("ganaraj"),
  ("gandharva"),
  ("gandhik"),
  ("ganesh"),
  ("gangadhar"),
  ("gangadutt"),
  ("gangesh"),
  ("gangeya"),
  ("gangol"),
  ("gannon"),
  ("ganymede"),
  ("gara"),
  ("garanhon"),
  ("garanwyn"),
  ("garcia"),
  ("gard"),
  ("gardiner"),
  ("gare"),
  ("garen"),
  ("gareth"),
  ("garett"),
  ("garfield"),
  ("garin"),
  ("garion"),
  ("garlan"),
  ("garlen"),
  ("garlyn"),
  ("garnell"),
  ("garner"),
  ("garnoc"),
  ("garnock"),
  ("garon"),
  ("garren"),
  ("garret"),
  ("garreth"),
  ("garrett"),
  ("garrick"),
  ("garrin"),
  ("garrison"),
  ("garritt"),
  ("garron"),
  ("garry"),
  ("garth"),
  ("garuda"),
  ("garvan"),
  ("garve"),
  ("garvin"),
  ("garwyli"),
  ("gascon"),
  ("gaspar"),
  ("gaspard"),
  ("gaston"),
  ("gauge"),
  ("gaurang"),
  ("gaurav"),
  ("gaurinath"),
  ("gautam"),
  ("gauthier"),
  ("gautier"),
  ("gav"),
  ("gavan"),
  ("gaven"),
  ("gavi"),
  ("gavin"),
  ("gavino"),
  ("gavrel"),
  ("gavrie"),
  ("gavriel"),
  ("gavril"),
  ("gavrilovich"),
  ("gavyn"),
  ("gawain"),
  ("gawen"),
  ("gawyn"),
  ("gaylon"),
  ("gaylord"),
  ("gearld"),
  ("gearoid"),
  ("gedaliah"),
  ("gedalya"),
  ("gedalyahu"),
  ("gedeon"),
  ("geert"),
  ("geet"),
  ("geffrey"),
  ("gekko"),
  ("gelasius"),
  ("gempachi"),
  ("genaro"),
  ("general"),
  ("generosb"),
  ("gengyo"),
  ("genichi"),
  ("genjo"),
  ("gennadi"),
  ("gennai"),
  ("gennosuke"),
  ("genpaku"),
  ("geo"),
  ("geoff"),
  ("geoffrey"),
  ("geomar"),
  ("georberismael"),
  ("georg"),
  ("georges"),
  ("georgio"),
  ("geovani"),
  ("geovanni"),
  ("geovanny"),
  ("geovany"),
  ("gerain"),
  ("geraint"),
  ("geraldo"),
  ("geralt"),
  ("gerard"),
  ("gerardo"),
  ("gerek"),
  ("geremia"),
  ("gerhard"),
  ("gerik"),
  ("german"),
  ("germano"),
  ("gerodi"),
  ("geron"),
  ("geronimo"),
  ("geroy"),
  ("gerrard"),
  ("gerrit"),
  ("gerritt"),
  ("gersham"),
  ("gershom"),
  ("gervasio"),
  ("gervaso"),
  ("gerwazy"),
  ("gesshin"),
  ("gezane"),
  ("ghaali"),
  ("ghaalib"),
  ("ghaamid"),
  ("ghaazi"),
  ("ghana"),
  ("ghanashyam"),
  ("ghassaan"),
  ("giacomo"),
  ("gian"),
  ("giancarlo"),
  ("giannes"),
  ("gianni"),
  ("gidayu"),
  ("gideon"),
  ("gifford"),
  ("gihei"),
  ("giichi"),
  ("gijs"),
  ("gil"),
  ("gilbert"),
  ("gilberto"),
  ("gilead"),
  ("giles"),
  ("gill"),
  ("gillermo"),
  ("gilles"),
  ("gilli"),
  ("gilon"),
  ("gilvaethwy"),
  ("ginebra"),
  ("ginessa"),
  ("gino"),
  ("giomar"),
  ("giorgio"),
  ("giovani"),
  ("giovanni"),
  ("giovanny"),
  ("giovany"),
  ("giovonni"),
  ("giri"),
  ("giridari"),
  ("giridhar"),
  ("girik"),
  ("girilal"),
  ("girindra"),
  ("giriraj"),
  ("girish"),
  ("girisha"),
  ("gitana"),
  ("gitano"),
  ("giuliano"),
  ("giulio"),
  ("giuseppe"),
  ("giynn"),
  ("glaleanna"),
  ("glaucus"),
  ("gleis"),
  ("glen"),
  ("glendon"),
  ("glew"),
  ("glinyeu"),
  ("glover"),
  ("gnegon"),
  ("gobrwy"),
  ("godalupe"),
  ("godewyn"),
  ("godfredo"),
  ("godfrey"),
  ("godofredo"),
  ("godrell"),
  ("goebel"),
  ("goemon"),
  ("gofraidh"),
  ("gokul"),
  ("gombei"),
  ("gonkuro"),
  ("gonnohyoe"),
  ("gonshiro"),
  ("gonzalo"),
  ("gopal"),
  ("gopan"),
  ("gopesh"),
  ("gopichand"),
  ("goraidh"),
  ("gorakh"),
  ("goran"),
  ("gorane"),
  ("gordain"),
  ("gordan"),
  ("gordon"),
  ("goreu"),
  ("gorge"),
  ("gormant"),
  ("goro"),
  ("gorrie"),
  ("gorry"),
  ("gorsedd"),
  ("gosheven"),
  ("gothfraidh"),
  ("gottfried"),
  ("gotthard"),
  ("gottlieb"),
  ("gotzone"),
  ("gourishankar"),
  ("govan"),
  ("govannon"),
  ("govind"),
  ("govinda"),
  ("gow"),
  ("gowan"),
  ("gower"),
  ("gowyr"),
  ("graciana"),
  ("graciano"),
  ("grady"),
  ("graeae"),
  ("graeme"),
  ("graham"),
  ("graig"),
  ("grant"),
  ("granville"),
  ("granwen"),
  ("gray"),
  ("grayson"),
  ("greagoir"),
  ("green"),
  ("greg"),
  ("greger"),
  ("gregg"),
  ("greggory"),
  ("gregoire"),
  ("gregoly"),
  ("gregor"),
  ("gregori"),
  ("gregorie"),
  ("gregorio"),
  ("gregorior"),
  ("gregos"),
  ("greid"),
  ("grenville"),
  ("greyson"),
  ("griff"),
  ("griffen"),
  ("griffeth"),
  ("griffin"),
  ("griffith"),
  ("grigor"),
  ("grigori"),
  ("grigorii"),
  ("grigorov"),
  ("grioghar"),
  ("grioghar hagan"),
  ("griorgair"),
  ("grisha"),
  ("grosvenor"),
  ("grover"),
  ("gruddyeu"),
  ("gruev"),
  ("gruffen"),
  ("gruffin"),
  ("gruffudd"),
  ("gruffyn"),
  ("grufydd"),
  ("gryphin"),
  ("gryphon"),
  ("grzegorz"),
  ("gualterio"),
  ("gualtier"),
  ("gualtiero"),
  ("guang"),
  ("gudakesha"),
  ("guffd"),
  ("guglielmo"),
  ("guido"),
  ("guifford"),
  ("guilio"),
  ("guillaume"),
  ("guillermo"),
  ("gulfam"),
  ("gulzar"),
  ("gulzarilal"),
  ("gumwant"),
  ("gunaratna"),
  ("gunjan"),
  ("gunn"),
  ("gunnar"),
  ("gunner"),
  ("gupil"),
  ("gur"),
  ("gurbachan"),
  ("gurcharan"),
  ("gurdayal"),
  ("gurdeep"),
  ("gurion"),
  ("gurmeet"),
  ("gurnam"),
  ("gurney"),
  ("gurpreet"),
  ("gursharan"),
  ("guru"),
  ("gurudas"),
  ("gurudutt"),
  ("gus"),
  ("gusg"),
  ("guss"),
  ("gustaf"),
  ("gustav"),
  ("gustave"),
  ("gustavo"),
  ("guthrie"),
  ("guy"),
  ("guyapi"),
  ("guyton"),
  ("gwakhmai"),
  ("gwalchmei"),
  ("gwalhaved"),
  ("gwallawg"),
  ("gwallter"),
  ("gwandoya"),
  ("gwarthegydd"),
  ("gwawl"),
  ("gwayne"),
  ("gweir"),
  ("gwenwynwyn"),
  ("gwern"),
  ("gwernach"),
  ("gwevyl"),
  ("gwilenhin"),
  ("gwilym"),
  ("gwitart"),
  ("gwrddywal"),
  ("gwres"),
  ("gwyddawg"),
  ("gwydion"),
  ("gwydre"),
  ("gwydyon"),
  ("gwyngad"),
  ("gwyr"),
  ("gwystyl"),
  ("gwythyr"),
  ("gyan"),
  ("gyes"),
  ("gyoergy"),
  ("gyokusho"),
  ("gyorgy"),
  ("gyukudo"),
  ("gyuri"),
  ("haafil"),
  ("haajid"),
  ("haakon"),
  ("haamid"),
  ("haani"),
  ("haarith"),
  ("haaroon"),
  ("haashid"),
  ("haashim"),
  ("haatim"),
  ("haavard"),
  ("haazim"),
  ("habib"),
  ("hachemon"),
  ("hachigoro"),
  ("hachiro"),
  ("haden"),
  ("hael"),
  ("haemon"),
  ("hafiz"),
  ("hahkethomemah"),
  ("hahn"),
  ("hahneehakan"),
  ("hai"),
  ("haidar"),
  ("haiden"),
  ("haitham"),
  ("hajime"),
  ("hakam"),
  ("hakeem"),
  ("hakim"),
  ("håkon"),
  ("hakuseki"),
  ("hal"),
  ("halim"),
  ("halirrhothius"),
  ("hall"),
  ("halvard"),
  ("ham"),
  ("hamad"),
  ("hamdaan"),
  ("hamdi"),
  ("hamid"),
  ("hamilton"),
  ("hamir"),
  ("hamish"),
  ("hamood"),
  ("hamp"),
  ("hampton"),
  ("hampus"),
  ("hamza"),
  ("hanan"),
  ("hananel"),
  ("haneef"),
  ("hania"),
  ("hank"),
  ("hanlala"),
  ("hannibal"),
  ("hans"),
  ("hansen"),
  ("hanshiro"),
  ("hanson"),
  ("hanuman"),
  ("hanumant"),
  ("harailt"),
  ("harald"),
  ("haranobu"),
  ("harbin"),
  ("harcourt"),
  ("hardik"),
  ("hardouin"),
  ("hardy"),
  ("hareem"),
  ("harekrishna"),
  ("harel"),
  ("harendra"),
  ("haresh"),
  ("hari"),
  ("haridas"),
  ("harigopal"),
  ("harihar"),
  ("harilal"),
  ("harinarayan"),
  ("hariom"),
  ("hariprasad"),
  ("hariram"),
  ("harischandra"),
  ("harish"),
  ("harishankar"),
  ("harishchandra"),
  ("haritbaran"),
  ("harjeet"),
  ("harkahome"),
  ("harkrishna"),
  ("harlan"),
  ("harland"),
  ("harman"),
  ("harmen"),
  ("harmendra"),
  ("harmon"),
  ("haroon"),
  ("harrell"),
  ("harris"),
  ("harrison"),
  ("harrod"),
  ("harry"),
  ("harsh"),
  ("harshad"),
  ("harshal"),
  ("harshavardhan"),
  ("harshit"),
  ("harshita"),
  ("harshul"),
  ("harshvardhan"),
  ("haru"),
  ("haruhiko"),
  ("haruhiro"),
  ("haruki"),
  ("harumi"),
  ("harunobu"),
  ("harvey"),
  ("harvie"),
  ("hasan"),
  ("hashmat"),
  ("hasin"),
  ("hasit"),
  ("haskel"),
  ("haskell"),
  ("hassan"),
  ("hassun"),
  ("hastiin"),
  ("hastimukha"),
  ("hastin"),
  ("hati"),
  ("håvard"),
  ("hawiovi"),
  ("hay"),
  ("hayato"),
  ("haye"),
  ("hayes"),
  ("hayward"),
  ("haywood"),
  ("hayyim"),
  ("hazm"),
  ("heammawihio"),
  ("heath"),
  ("heber"),
  ("hector"),
  ("hedeon"),
  ("heer"),
  ("heihachiro"),
  ("heiji"),
  ("heikichi"),
  ("heilyn"),
  ("heinrich"),
  ("heizo"),
  ("hekli"),
  ("helaku"),
  ("helge"),
  ("heller"),
  ("helmer"),
  ("helmut"),
  ("helmuth"),
  ("helushka"),
  ("hem"),
  ("hemachandra"),
  ("hemadri"),
  ("hemakuta"),
  ("hemamdar"),
  ("heman"),
  ("hemang"),
  ("hemanga"),
  ("hemant"),
  ("hemanta"),
  ("hemaraj"),
  ("hemendra"),
  ("hemendu"),
  ("henbeddestyr"),
  ("henderson"),
  ("henery"),
  ("henning"),
  ("henri"),
  ("henrick"),
  ("henrik"),
  ("henriqua"),
  ("henryk"),
  ("henwas"),
  ("henwyneb"),
  ("heraclio"),
  ("heramba"),
  ("herb"),
  ("herbert"),
  ("heriberto"),
  ("herman"),
  ("hermann"),
  ("hermon"),
  ("hermosa"),
  ("hernan"),
  ("hernandez"),
  ("hernando"),
  ("herold"),
  ("herschel"),
  ("hershel"),
  ("herve"),
  ("heskovizenako"),
  ("hesutu"),
  ("hevataneo"),
  ("hevovitastamiutsto"),
  ("heyward"),
  ("hezekiah"),
  ("hiamovi"),
  ("hibbaan"),
  ("hidalgo"),
  ("hideaki"),
  ("hidehira"),
  ("hidekazu"),
  ("hideki"),
  ("hidemichi"),
  ("hideo"),
  ("hidetada"),
  ("hidetora"),
  ("hidetoshi"),
  ("hidetsugu"),
  ("hideyori"),
  ("hideyoshi"),
  ("hieremias"),
  ("hieronim"),
  ("higashikuni"),
  ("hikaru"),
  ("hikosaburo"),
  ("hikozaemon"),
  ("hilaal"),
  ("hilario"),
  ("hillard"),
  ("hillel"),
  ("hilliard"),
  ("hilmar"),
  ("hilmi"),
  ("hilton"),
  ("himachal"),
  ("himadri"),
  ("himaghna"),
  ("himanshu"),
  ("himmat"),
  ("himnish"),
  ("hipolito"),
  ("hiram"),
  ("hiranmay"),
  ("hiranya"),
  ("hiranyagarbha"),
  ("hirendra"),
  ("hiresh"),
  ("hiro"),
  ("hiroaki"),
  ("hirobumi"),
  ("hirofumi"),
  ("hiroharu"),
  ("hirohisa"),
  ("hiroji"),
  ("hirokazu"),
  ("hirokichi"),
  ("hirokumi"),
  ("hiroshige"),
  ("hirotada"),
  ("hirotaka"),
  ("hirotsugu"),
  ("hiroya"),
  ("hiroyasu"),
  ("hiroyuki"),
  ("hisahsi"),
  ("hisaki"),
  ("hisamitsu"),
  ("hisanobu"),
  ("hisashi"),
  ("hisato"),
  ("hisayuki"),
  ("hishaam"),
  ("hitendra"),
  ("hitomaro"),
  ("hitoshi"),
  ("hjalmar"),
  ("hjalmer"),
  ("hobart"),
  ("hobert"),
  ("hobson"),
  ("hod"),
  ("hogai"),
  ("hoitsu"),
  ("hokichi"),
  ("hokusai"),
  ("holden"),
  ("holleb"),
  ("homer"),
  ("honani"),
  ("honaw"),
  ("honi"),
  ("honon"),
  ("honoratas"),
  ("honorato"),
  ("honzo"),
  ("horace"),
  ("horacio"),
  ("horado"),
  ("horiuchi"),
  ("hosea"),
  ("hoseaiakovos"),
  ("hoshi"),
  ("hoshiko"),
  ("hosie"),
  ("hotah"),
  ("hototo"),
  ("houston"),
  ("howahkan"),
  ("howard"),
  ("howel"),
  ("howell"),
  ("howi"),
  ("hoyt"),
  ("hriday"),
  ("hridayesh"),
  ("hridaynath"),
  ("hrishikesh"),
  ("huabwy"),
  ("huarwar"),
  ("hubert"),
  ("hudhaifa"),
  ("hudson"),
  ("hueil"),
  ("huey"),
  ("hugh"),
  ("hughie"),
  ("hugo"),
  ("humaid"),
  ("humaidaan"),
  ("humberto"),
  ("hung"),
  ("huraira"),
  ("huritt"),
  ("hurley"),
  ("husaam"),
  ("husain"),
  ("huslu"),
  ("husni"),
  ("hussain"),
  ("huw"),
  ("huy"),
  ("hydd"),
  ("hyman"),
  ("hyobe"),
  ("hyosuke"),
  ("hyotaru"),
  ("hyun-ki"),
  ("hyun-shik"),
  ("iago"),
  ("iain"),
  ("iakopa"),
  ("iakovos"),
  ("ian"),
  ("iaokim"),
  ("iau"),
  ("ibhanan"),
  ("ibrahim"),
  ("ichabod"),
  ("ichibei"),
  ("ichiro"),
  ("ichisake"),
  ("ichiyo"),
  ("ichizo"),
  ("iddawg"),
  ("iddig"),
  ("idoia"),
  ("idrees"),
  ("idris"),
  ("idurre"),
  ("iemitsu"),
  ("iemochi"),
  ("ienobu"),
  ("iesada"),
  ("ieshige"),
  ("ietsuna"),
  ("ieyasu"),
  ("ieyoshi"),
  ("igasho"),
  ("ignace"),
  ("ignacio"),
  ("ignado"),
  ("ignatius"),
  ("ignazio"),
  ("igone"),
  ("igor"),
  ("igoryok"),
  ("ihaab"),
  ("iham"),
  ("ihit"),
  ("ike"),
  ("ikemoto"),
  ("ikerne"),
  ("ikki"),
  ("ikku"),
  ("ikram"),
  ("ilario"),
  ("ileanna"),
  ("ilesh"),
  ("ilianajairo"),
  ("ilias"),
  ("illanipi"),
  ("illias"),
  ("illya"),
  ("ilyaas"),
  ("imaad"),
  ("imamu"),
  ("iman"),
  ("imanol"),
  ("imaran"),
  ("immanuel"),
  ("imraan"),
  ("imre"),
  ("imtiaz"),
  ("incendio"),
  ("indeever"),
  ("inder"),
  ("indivar"),
  ("indradutt"),
  ("indrajeet"),
  ("indrajit"),
  ("indrakanta"),
  ("indraneel"),
  ("indubhushan"),
  ("induhasan"),
  ("indukanta"),
  ("indulal"),
  ("indushekhar"),
  ("inejiro"),
  ("inerney"),
  ("inesh"),
  ("ingemar"),
  ("ingvar"),
  ("iniss"),
  ("innes"),
  ("innis"),
  ("innocenzio"),
  ("inocencio"),
  ("inocente"),
  ("intekhab"),
  ("inteus"),
  ("inys"),
  ("ioakim"),
  ("ioan"),
  ("iokua"),
  ("ionnes"),
  ("iorwerth"),
  ("iosep"),
  ("ioseph"),
  ("iov"),
  ("ippei"),
  ("iqbal"),
  ("iram"),
  ("irfaan"),
  ("irfan"),
  ("irshaad"),
  ("irvin"),
  ("irving"),
  ("irwin"),
  ("isaac"),
  ("isaak"),
  ("isaakios"),
  ("isaam"),
  ("isadore"),
  ("isadoro"),
  ("isai"),
  ("isaiah"),
  ("isaias"),
  ("isak"),
  ("isamu"),
  ("isao"),
  ("isar"),
  ("isdel"),
  ("iseabail"),
  ("isei"),
  ("ishaan"),
  ("ishaaq"),
  ("ishan"),
  ("ishmael"),
  ("ishvara"),
  ("ishwar"),
  ("isiah"),
  ("isidore"),
  ("isidoro"),
  ("isidro"),
  ("isingoma"),
  ("ismad"),
  ("ismaeel"),
  ("ismael"),
  ("ismail"),
  ("isom"),
  ("isoruko"),
  ("isoshi"),
  ("israel"),
  ("isreal"),
  ("issac"),
  ("istaqa"),
  ("istu"),
  ("iswara"),
  ("itai"),
  ("ittamar"),
  ("iustig"),
  ("ivan"),
  ("ivano"),
  ("ivar"),
  ("iven"),
  ("iver"),
  ("ivor"),
  ("ivrit"),
  ("iwan"),
  ("iwane"),
  ("iwao"),
  ("ixaka"),
  ("iyaad"),
  ("iye"),
  ("izaak"),
  ("izaiah"),
  ("izayah"),
  ("izek"),
  ("izhar"),
  ("izo"),
  ("izreal"),
  ("izumo"),
  ("izzaddeen"),
  ("izzat"),
  ("izzy"),
  ("jaabir"),
  ("jaad"),
  ("jaadallah"),
  ("jaap"),
  ("jaarallah"),
  ("jaasim"),
  ("jaasir"),
  ("jabari"),
  ("jabbar"),
  ("jabin"),
  ("jacan"),
  ("jacek"),
  ("jacinto"),
  ("jackie"),
  ("jackson"),
  ("jacky"),
  ("jacob"),
  ("jacobe"),
  ("jacobo"),
  ("jacoby"),
  ("jacot"),
  ("jacoury"),
  ("jacques"),
  ("jacquez"),
  ("jacy"),
  ("jader"),
  ("jadiel"),
  ("jadon"),
  ("jaeden"),
  ("jaedon"),
  ("jaedyn"),
  ("jaegar"),
  ("jafar"),
  ("jag"),
  ("jagadbandu"),
  ("jagadeep"),
  ("jagadhidh"),
  ("jagadish"),
  ("jagajeet"),
  ("jagajeevan"),
  ("jaganmay"),
  ("jagannath"),
  ("jagat"),
  ("jagger"),
  ("jagjeevan"),
  ("jagmohan"),
  ("jago"),
  ("jahan"),
  ("jaheem"),
  ("jaheim"),
  ("jahiem"),
  ("jahir"),
  ("jahnu"),
  ("jahquil"),
  ("jahsiiyah"),
  ("jaichand"),
  ("jaidayal"),
  ("jaidev"),
  ("jaigopal"),
  ("jaikrishna"),
  ("jaime"),
  ("jaimejairo"),
  ("jaimenacho"),
  ("jaimini"),
  ("jainarayan"),
  ("jaipal"),
  ("jair"),
  ("jairaj"),
  ("jairo"),
  ("jairus"),
  ("jaisal"),
  ("jaisukh"),
  ("jaivin"),
  ("jaiwant"),
  ("jajuan"),
  ("jake"),
  ("jakeem"),
  ("jakob"),
  ("jakobe"),
  ("jakobjan"),
  ("jakome"),
  ("jakub"),
  ("jakuchu"),
  ("jalaal"),
  ("jalal"),
  ("jaleel"),
  ("jalen"),
  ("jalendu"),
  ("jalil"),
  ("jalon"),
  ("jamaal"),
  ("jamaall"),
  ("jam,aan"),
  ("jamaar"),
  ("jamal"),
  ("jamar"),
  ("jamarco"),
  ("jamarcus"),
  ("jamari"),
  ("jamarion"),
  ("jamarr"),
  ("jambha"),
  ("jambhala"),
  ("jameel"),
  ("jamel"),
  ("jamero"),
  ("james"),
  ("jameson"),
  ("jamian"),
  ("jamie"),
  ("jamiel"),
  ("jamil"),
  ("jamin"),
  ("jamir"),
  ("jamison"),
  ("jamon"),
  ("jan"),
  ("janak"),
  ("janamejay"),
  ("janard"),
  ("janardan"),
  ("jancsi"),
  ("janek"),
  ("janile"),
  ("jankia"),
  ("janko"),
  ("jannes"),
  ("janos"),
  ("jantje"),
  ("januarius"),
  ("janusz"),
  ("japa"),
  ("japendra"),
  ("japesh"),
  ("japhet"),
  ("japheth"),
  ("jaquan"),
  ("jaques"),
  ("jaquez"),
  ("jaquin"),
  ("jarad"),
  ("jarah"),
  ("jared"),
  ("jareer"),
  ("jarek"),
  ("jarel"),
  ("jarell"),
  ("jaren"),
  ("jaret"),
  ("jarett"),
  ("jariath"),
  ("jaric"),
  ("jarini"),
  ("jarmarr"),
  ("jarod"),
  ("jaron"),
  ("ja-ron"),
  ("jarosŌaw"),
  ("jarrad"),
  ("jarred"),
  ("jarrell"),
  ("jarret"),
  ("jarrett"),
  ("jarrick"),
  ("jarrod"),
  ("jarvis"),
  ("jasbeer"),
  ("jascha"),
  ("jase"),
  ("jasen"),
  ("jasha"),
  ("jashan"),
  ("jasiah"),
  ("jason"),
  ("jasoor"),
  ("jaspal"),
  ("jasper"),
  ("jasraj"),
  ("jasveer"),
  ("jaswant"),
  ("jatan"),
  ("jatin"),
  ("jaumar"),
  ("javan"),
  ("javas"),
  ("javed"),
  ("javen"),
  ("javier"),
  ("javiero"),
  ("javion"),
  ("javon"),
  ("javonte"),
  ("jawaad"),
  ("jawahar"),
  ("jawhar"),
  ("jax"),
  ("jaxen"),
  ("jaxon"),
  ("jaxson"),
  ("jaxton"),
  ("jayadeep"),
  ("jayaditya"),
  ("jayant"),
  ("jayashekhar"),
  ("jayce"),
  ("jaycob"),
  ("jaydan"),
  ("jaydin"),
  ("jaydon"),
  ("jaylan"),
  ("jaylon"),
  ("jaymes"),
  ("jaymin"),
  ("jayson"),
  ("jaysukh"),
  ("jayvion"),
  ("jayvon"),
  ("jeanbaptiste"),
  ("jeb"),
  ("jebediah"),
  ("jed"),
  ("jedadiah"),
  ("jedaiah"),
  ("jedd"),
  ("jedediah"),
  ("jedi"),
  ("jediah"),
  ("jedidiah"),
  ("jedrek"),
  ("jedrick"),
  ("jedrik"),
  ("jedrus"),
  ("jeemutbahan"),
  ("jeevan"),
  ("jeff"),
  ("jefferey"),
  ("jefferson"),
  ("jeffery"),
  ("jeffry"),
  ("jehangir"),
  ("jehoichin"),
  ("jehu"),
  ("jeirgif"),
  ("jelani"),
  ("jelle"),
  ("jem"),
  ("jemal"),
  ("jemarcus"),
  ("jengo"),
  ("jennings"),
  ("jens"),
  ("jeny"),
  ("jeoffroi"),
  ("jephtah"),
  ("jerad"),
  ("jerah"),
  ("jerald"),
  ("jeraldo"),
  ("jeramiah"),
  ("jeramie"),
  ("jeramy"),
  ("jerard"),
  ("jerardo"),
  ("jere"),
  ("jered"),
  ("jerel"),
  ("jereme"),
  ("jeremey"),
  ("jeremi"),
  ("jeremiah"),
  ("jeremias"),
  ("jeremie"),
  ("jeriah"),
  ("jerico"),
  ("jerimiah"),
  ("jerimy"),
  ("jermain"),
  ("jermaine"),
  ("jermey"),
  ("jermija"),
  ("jerod"),
  ("jerold"),
  ("jerom"),
  ("jerome"),
  ("jeromy"),
  ("jeron"),
  ("jeronimo"),
  ("jerrad"),
  ("jerrah"),
  ("jerrald"),
  ("jerrell"),
  ("jerrick"),
  ("jerrod"),
  ("jerrold"),
  ("jerzy"),
  ("jesiah"),
  ("jesper"),
  ("jess"),
  ("jessan"),
  ("jessey"),
  ("jesstin"),
  ("jessy"),
  ("jestin"),
  ("jeston"),
  ("jesus-ernesto"),
  ("jethro"),
  ("jett"),
  ("jevon"),
  ("jhoomer"),
  ("jignesh"),
  ("jihaad"),
  ("jihan"),
  ("jim"),
  ("jimar"),
  ("jimarcus"),
  ("jinendra"),
  ("jinzaburo"),
  ("jiro"),
  ("jishnu"),
  ("jitendra"),
  ("jivin"),
  ("jivitesh"),
  ("jiyaad"),
  ("jnyandeep"),
  ("jnyaneshwar"),
  ("joachim"),
  ("joakim"),
  ("joaquin"),
  ("job"),
  ("jobe"),
  ("joben"),
  ("joby"),
  ("jocheved"),
  ("jock"),
  ("joed"),
  ("joel"),
  ("joen"),
  ("joesph"),
  ("joginder"),
  ("jogindra"),
  ("jograj"),
  ("johan"),
  ("johathan"),
  ("john"),
  ("johnathan"),
  ("johnathon"),
  ("johney"),
  ("johnn"),
  ("johnpaul"),
  ("john-paul"),
  ("johnson"),
  ("johny"),
  ("joji"),
  ("jokin"),
  ("jokkum"),
  ("jolice"),
  ("jolon"),
  ("jomar"),
  ("jomei"),
  ("jomo"),
  ("jon"),
  ("jonah"),
  ("jonam"),
  ("jonas"),
  ("jonatan"),
  ("jonathon"),
  ("jones"),
  ("jonn"),
  ("jonny"),
  ("joo-chan"),
  ("joop"),
  ("joosef"),
  ("jopie"),
  ("joram"),
  ("jordain"),
  ("jordan"),
  ("jordell"),
  ("jorden"),
  ("jordi"),
  ("jordon"),
  ("jordy"),
  ("jore"),
  ("jorell"),
  ("jorge"),
  ("jørgen"),
  ("jori"),
  ("jorie"),
  ("jorim"),
  ("joris"),
  ("jory"),
  ("joseba"),
  ("josef"),
  ("joselito"),
  ("joseluis"),
  ("josep"),
  ("joseph"),
  ("josephus"),
  ("josh"),
  ("josha"),
  ("joshua"),
  ("joshuah"),
  ("joshwa"),
  ("josiah"),
  ("josias"),
  ("jospeh"),
  ("joss"),
  ("josu"),
  ("josue"),
  ("josuke"),
  ("jotaro"),
  ("jotham"),
  ("jou"),
  ("jouke"),
  ("jourdaine"),
  ("jourdan"),
  ("jourdon"),
  ("jov"),
  ("jovani"),
  ("jovanni"),
  ("jovanny"),
  ("jovany"),
  ("jÓzef"),
  ("joziah"),
  ("juan"),
  ("juan-carlos"),
  ("juanito"),
  ("juaquine"),
  ("jubair"),
  ("jubal"),
  ("jud"),
  ("judah"),
  ("judas"),
  ("judd"),
  ("judean"),
  ("judge"),
  ("judson"),
  ("juelz"),
  ("jugnu"),
  ("juha"),
  ("juichi"),
  ("jukka"),
  ("jules"),
  ("juliano"),
  ("julien"),
  ("julio"),
  ("julious"),
  ("julius"),
  ("jullien"),
  ("jumail"),
  ("junaid"),
  ("junichi"),
  ("junichiro"),
  ("junien"),
  ("junior"),
  ("junious"),
  ("junius"),
  ("junji"),
  ("junnosuke"),
  ("junzo"),
  ("jurg"),
  ("juriaan"),
  ("juro"),
  ("jurobei"),
  ("jurre"),
  ("jusal"),
  ("jussi"),
  ("justen"),
  ("justino"),
  ("juston"),
  ("justus"),
  ("justyn"),
  ("juwan"),
  ("juzaburo"),
  ("juzo"),
  ("jyotichandra"),
  ("jyotiprakash"),
  ("jyotiranjan"),
  ("jyotirdhar"),
  ("jyotirmoy"),
  ("jyotish"),
  ("kaalim"),
  ("kaamil"),
  ("kaarim"),
  ("kaarle"),
  ("kaarlo"),
  ("kabandha"),
  ("kabeer"),
  ("kabir"),
  ("kachada"),
  ("kade"),
  ("kadeem"),
  ("kadema"),
  ("kaden"),
  ("kadin"),
  ("kado"),
  ("kadonomaro"),
  ("kadyn"),
  ("kaeden"),
  ("kael"),
  ("kaemon"),
  ("kafu"),
  ("kaga"),
  ("kagehisa"),
  ("kagetoki"),
  ("kageyasu"),
  ("kahlil"),
  ("kahoku"),
  ("kai"),
  ("kaiden"),
  ("kaii"),
  ("kailas"),
  ("kailash"),
  ("kailashchandra"),
  ("kailashnath"),
  ("kaimana"),
  ("kaipo"),
  ("kajetan"),
  ("kajika"),
  ("kakar"),
  ("kaklin"),
  ("kakuei"),
  ("kakuzo"),
  ("kalari"),
  ("kalash"),
  ("kalb"),
  ("kale"),
  ("kaleb"),
  ("kaleem"),
  ("kalel"),
  ("kalen"),
  ("kaleo"),
  ("kalicharan"),
  ("kalidas"),
  ("kalimohan"),
  ("kalipada"),
  ("kaliranjan"),
  ("kalki"),
  ("kalkin"),
  ("kalle"),
  ("kalman"),
  ("kalvin"),
  ("kalyan"),
  ("kam"),
  ("kamaal"),
  ("kamaaluddeen"),
  ("kamadev"),
  ("kamal"),
  ("kamalakar"),
  ("kamalapati"),
  ("kamalesh"),
  ("kamalnayan"),
  ("kamatari"),
  ("kamau"),
  ("kamden"),
  ("kameel"),
  ("kameron"),
  ("kami kanaka"),
  ("kamil"),
  ("kamlesh"),
  ("kamod; kambodi"),
  ("kamraj; kamesh; kameshwar"),
  ("kamran"),
  ("kamren"),
  ("kamron"),
  ("kan"),
  ("kanaan"),
  ("kanad"),
  ("kanbe"),
  ("kandarpa"),
  ("kane"),
  ("kaneie"),
  ("kanezane"),
  ("kanha"),
  ("kanhaiya"),
  ("kaniel"),
  ("kanishka"),
  ("kanjiro"),
  ("kanko"),
  ("kannon"),
  ("kano"),
  ("kanoa"),
  ("kansuke"),
  ("kantaro"),
  ("kantilal"),
  ("kantimoy"),
  ("kanu"),
  ("kanvar"),
  ("kanwal"),
  ("kanwaljeet"),
  ("kanwalkishore"),
  ("kanye"),
  ("kanzaburo"),
  ("kaoru"),
  ("kapil"),
  ("kapish"),
  ("kapono"),
  ("karam"),
  ("kåre"),
  ("kareem"),
  ("karel"),
  ("karim"),
  ("karl"),
  ("karlens"),
  ("karlis"),
  ("karlitis"),
  ("karlus"),
  ("karmel"),
  ("karna"),
  ("karolek"),
  ("karson"),
  ("kartar"),
  ("karter"),
  ("kartik"),
  ("kartikeya"),
  ("karunakar"),
  ("karunamay"),
  ("karunashankar"),
  ("kasen"),
  ("kash"),
  ("kashif"),
  ("kashinath"),
  ("kashiprasad"),
  ("kashyap"),
  ("kason"),
  ("kaspar"),
  ("kasper"),
  ("kata"),
  ("katai"),
  ("katheer"),
  ("kathir; kadir"),
  ("kato"),
  ("katsuhiko"),
  ("katsuhito"),
  ("katsumi"),
  ("katsumoto"),
  ("katsunan"),
  ("katsunosuki"),
  ("katsuyoshi"),
  ("katsuyuki"),
  ("katzumi"),
  ("kausar"),
  ("kaushal"),
  ("kaushik"),
  ("kaustav"),
  ("kaustubh"),
  ("kavan"),
  ("kaven"),
  ("kavi"),
  ("kaviraj"),
  ("kavon"),
  ("kawanari"),
  ("kay"),
  ("kaynard"),
  ("kayson"),
  ("kaz"),
  ("kazimierz"),
  ("kazmer"),
  ("kazu"),
  ("kazuhiko"),
  ("kazuhiro"),
  ("kazuki"),
  ("kazuko"),
  ("kazuma"),
  ("kazunori"),
  ("kazuo"),
  ("kazushi"),
  ("kazushige"),
  ("kazutoshi"),
  ("kazuyuki"),
  ("keagan"),
  ("keahi"),
  ("kealan"),
  ("keallach"),
  ("kealy"),
  ("kean"),
  ("keanan"),
  ("keandre"),
  ("keanu"),
  ("keaton"),
  ("kedar"),
  ("kedarnath"),
  ("kedem"),
  ("keegan"),
  ("keenan"),
  ("keene"),
  ("keenen"),
  ("keenon"),
  ("kegan"),
  ("kei"),
  ("keifer"),
  ("keiji"),
  ("keiki"),
  ("keion"),
  ("keir"),
  ("keiran"),
  ("keishi"),
  ("keisuke"),
  ("keita"),
  ("keitaro"),
  ("keith"),
  ("keizo"),
  ("kekoa"),
  ("kelan"),
  ("kelby"),
  ("kele"),
  ("kelii"),
  ("kellan"),
  ("kellen"),
  ("kelton"),
  ("kelvin"),
  ("keme"),
  ("kemen"),
  ("ken"),
  ("kenan"),
  ("kenard"),
  ("kenaz"),
  ("kendell"),
  ("kendrew"),
  ("kendric"),
  ("kendrick"),
  ("kendrik"),
  ("kendrix"),
  ("keneth"),
  ("kenichi"),
  ("kenji"),
  ("kenjiro"),
  ("kenkichi"),
  ("kenko"),
  ("kenn"),
  ("kennan"),
  ("kenneth"),
  ("kenney"),
  ("kennith"),
  ("kennon"),
  ("kennth"),
  ("kenny"),
  ("kenrick"),
  ("kenrik"),
  ("kensaku"),
  ("kenshin"),
  ("kent"),
  ("kentaro"),
  ("kenton"),
  ("kenyata"),
  ("kenyon"),
  ("kenzaburo"),
  ("kenzan"),
  ("kenzie"),
  ("kenzo"),
  ("keoki"),
  ("keon"),
  ("keoni"),
  ("kerk"),
  ("kerman"),
  ("kermichi"),
  ("kermit"),
  ("kerrigan"),
  ("kerwin"),
  ("kerwyn"),
  ("kesegowaase"),
  ("keshaun"),
  ("keshav"),
  ("keshawn"),
  ("kesin"),
  ("ketan"),
  ("kevalkishore"),
  ("kevalkumar"),
  ("kevan"),
  ("keven"),
  ("keveon"),
  ("kevinn"),
  ("kevion"),
  ("kevis"),
  ("kevon"),
  ("kevron"),
  ("kevyn"),
  ("keyair"),
  ("keyon"),
  ("keyshawn"),
  ("keyur"),
  ("kgosi"),
  ("khaalid"),
  ("khadim"),
  ("khairi"),
  ("khajit"),
  ("khaleefa"),
  ("khaleel"),
  ("khalid"),
  ("khalil"),
  ("khamisi"),
  ("khari"),
  ("khazana"),
  ("khemchand"),
  ("khemprakash"),
  ("khiry"),
  ("khushal"),
  ("kian"),
  ("kibwe"),
  ("kichibei"),
  ("kichisaburo"),
  ("kiefer"),
  ("kiel"),
  ("kiemon"),
  ("kienan"),
  ("kieran"),
  ("kiernan"),
  ("kieron"),
  ("kieth"),
  ("kiichi"),
  ("kijuro"),
  ("kikaku"),
  ("kikugoro"),
  ("kikunojo"),
  ("kile"),
  ("kilian"),
  ("killian"),
  ("kilydd"),
  ("kimball"),
  ("kimbel"),
  ("kimble"),
  ("kimi"),
  ("kiminobu"),
  ("kimitada"),
  ("kimo"),
  ("king"),
  ("kingo"),
  ("kingston"),
  ("kinji"),
  ("kinmochi"),
  ("kinney"),
  ("kinney murdock"),
  ("kinnojo"),
  ("kinnon"),
  ("kinnosuke"),
  ("kinny"),
  ("kinsella"),
  ("kinshuk"),
  ("kintan"),
  ("kinte"),
  ("kinzo"),
  ("kioshi"),
  ("kip"),
  ("kipp"),
  ("kiranmay"),
  ("kiril"),
  ("kirill"),
  ("kirit"),
  ("kirk"),
  ("kirt"),
  ("kirtikumar"),
  ("kisho"),
  ("kishore"),
  ("kishorekumar"),
  ("kitahachi"),
  ("kitchi"),
  ("kiyoemon"),
  ("kiyohira"),
  ("kiyohisa"),
  ("kiyomasu"),
  ("kiyomori"),
  ("kiyonaga"),
  ("kiyonobu"),
  ("kiyonori"),
  ("kiyoshi"),
  ("kiyotaka"),
  ("kjell"),
  ("klas"),
  ("kliment"),
  ("knoton"),
  ("knox"),
  ("knut"),
  ("knute"),
  ("koan"),
  ("kobe"),
  ("kobo"),
  ("koby"),
  ("koda"),
  ("kody"),
  ("koen"),
  ("koenraad"),
  ("koetsu"),
  ("kofi"),
  ("kohei"),
  ("koichi"),
  ("koin"),
  ("koji"),
  ("kojiro"),
  ("kojo"),
  ("kojuro"),
  ("kokan"),
  ("kokei"),
  ("koki"),
  ("kokushi"),
  ("kolby"),
  ("kole"),
  ("kolichiyaw"),
  ("kolten"),
  ("kolton"),
  ("konala"),
  ("kong"),
  ("konner"),
  ("konnor"),
  ("konosuke"),
  ("konoye"),
  ("konrad"),
  ("konstancji"),
  ("konstantin"),
  ("konstantine"),
  ("konyo"),
  ("korbin"),
  ("kordal"),
  ("kordell"),
  ("korechika"),
  ("korekiyo"),
  ("korenaga"),
  ("korey"),
  ("korin"),
  ("kory"),
  ("koryusai"),
  ("kosaku"),
  ("kosami"),
  ("koshiro"),
  ("kosho"),
  ("kosumi"),
  ("kotari"),
  ("kotaro"),
  ("koto"),
  ("kotori"),
  ("koyo"),
  ("kozue"),
  ("kraig"),
  ("kripal"),
  ("krish"),
  ("krishanu"),
  ("krishnachandra"),
  ("krishnadeva"),
  ("krishnakanta"),
  ("krishnakumar"),
  ("krishnala"),
  ("krishnamurari"),
  ("krishnamurthy"),
  ("krishnaroop"),
  ("krishnendu"),
  ("kristion"),
  ("kristofer"),
  ("kristoffer"),
  ("kristopher"),
  ("kritanta"),
  ("krzysztof"),
  ("kshaunish"),
  ("kuan-yin"),
  ("kuber"),
  ("kuberchand"),
  ("kuckunniwi"),
  ("kuemon"),
  ("kularanjan"),
  ("kulbhushan"),
  ("kuldeep"),
  ("kuma"),
  ("kumanosuke"),
  ("kumar"),
  ("kumara"),
  ("kunal"),
  ("kundan"),
  ("kundanlal"),
  ("kuniaki"),
  ("kunihiko"),
  ("kunimatsu"),
  ("kunimichi"),
  ("kunio"),
  ("kunisada"),
  ("kunitaro"),
  ("kuniyoshi"),
  ("kuniyuki"),
  ("kunja"),
  ("kunjabihari"),
  ("kunta"),
  ("kuper"),
  ("kurt"),
  ("kurtis"),
  ("kuruk"),
  ("kush"),
  ("kushal"),
  ("kusumakar"),
  ("kwadwo"),
  ("kwahu"),
  ("kwaku"),
  ("kwame"),
  ("kwamie"),
  ("kwan"),
  ("kwasi"),
  ("kwatoko"),
  ("kyan"),
  ("kye"),
  ("kylan"),
  ("kylar"),
  ("kyledyr"),
  ("kylen"),
  ("kyler"),
  ("kymani"),
  ("kynan"),
  ("kyndmryn"),
  ("kynedyr"),
  ("kynlas"),
  ("kynon"),
  ("kynwal"),
  ("kynwyl"),
  ("kyoden"),
  ("kyoichi"),
  ("kyoji"),
  ("kyoshi"),
  ("kyran"),
  ("kyree"),
  ("kyrell"),
  ("kyson"),
  ("kyuichi"),
  ("kyushichi"),
  ("kyuso"),
  ("kyuwa"),
  ("kywrkh"),
  ("laban"),
  ("labeeb"),
  ("lachlan"),
  ("la-corey"),
  ("ladarius"),
  ("ladrus"),
  ("lafayette"),
  ("lagan"),
  ("laine"),
  ("lais"),
  ("laiurenty"),
  ("lakeland"),
  ("lakshman"),
  ("lakshmana"),
  ("lakshmibanta"),
  ("lakshmidhar"),
  ("lakshmigopal"),
  ("lakshmikanta"),
  ("lal"),
  ("lalit"),
  ("lalitaditya"),
  ("lalitchandra"),
  ("lalitkishore"),
  ("lalitkumar"),
  ("lalitmohan"),
  ("lalo"),
  ("lalor"),
  ("lamar"),
  ("lamarcus"),
  ("lamark"),
  ("lamarr"),
  ("lambert"),
  ("lambodar"),
  ("lamont"),
  ("lamonte"),
  ("lance"),
  ("lancelin"),
  ("lancelot"),
  ("landan"),
  ("landen"),
  ("landers"),
  ("landin"),
  ("landis"),
  ("landon"),
  ("landyn"),
  ("langley"),
  ("l'angley"),
  ("langundo"),
  ("lankesh"),
  ("lanny"),
  ("lansa"),
  ("lany"),
  ("lanzo"),
  ("lapidos"),
  ("lapidoth"),
  ("lapu"),
  ("laquan"),
  ("laramie"),
  ("laran"),
  ("laren"),
  ("larent"),
  ("larice"),
  ("larmar"),
  ("laron"),
  ("la-ron"),
  ("lars"),
  ("larz"),
  ("lasalle"),
  ("lasean"),
  ("lasil"),
  ("lason"),
  ("latafat"),
  ("lathan"),
  ("latif"),
  ("latimer"),
  ("latrell"),
  ("latrivis"),
  ("launcelot"),
  ("laurens"),
  ("laurent"),
  ("laurente"),
  ("lauritz"),
  ("lauro"),
  ("lav"),
  ("lavan"),
  ("lavar"),
  ("lavaughan"),
  ("lavernus"),
  ("lawerence"),
  ("lawson"),
  ("lawton"),
  ("layton"),
  ("lazar"),
  ("lazaro"),
  ("lazarus"),
  ("lazzaro"),
  ("leal"),
  ("leander"),
  ("leandre"),
  ("leandro"),
  ("leathan"),
  ("leb"),
  ("ledell"),
  ("lee-ron"),
  ("leeroy"),
  ("legget"),
  ("leif"),
  ("leith"),
  ("leland"),
  ("lem"),
  ("lemar"),
  ("lemarr"),
  ("lemmie"),
  ("lemon"),
  ("lemuel"),
  ("len"),
  ("lenard"),
  ("lennard"),
  ("lennart"),
  ("lenno"),
  ("lennon"),
  ("lennox"),
  ("lenny"),
  ("leocadie"),
  ("leod"),
  ("leodegrance"),
  ("leonard"),
  ("leonardo"),
  ("leonce"),
  ("leonel"),
  ("leonidas"),
  ("leonide"),
  ("leonides"),
  ("leopold"),
  ("leopoldo"),
  ("leroi"),
  ("leron"),
  ("leroux"),
  ("leroy"),
  ("les"),
  ("leslie"),
  ("less"),
  ("leszek"),
  ("lev"),
  ("levar"),
  ("le-vaughan"),
  ("leveret"),
  ("leverett"),
  ("levey"),
  ("levi"),
  ("levka"),
  ("levon"),
  ("levy"),
  ("lew"),
  ("lewellyn"),
  ("lewi"),
  ("leyti"),
  ("liam"),
  ("liang"),
  ("lige"),
  ("liko"),
  ("lincoln"),
  ("lindsay"),
  ("lino"),
  ("linton"),
  ("linus"),
  ("linwood"),
  ("lionel"),
  ("lionell"),
  ("liron"),
  ("lisandro"),
  ("lisle"),
  ("liuz"),
  ("liwanu"),
  ("llacheu"),
  ("llara"),
  ("llassar"),
  ("llawr"),
  ("llevelys"),
  ("lleweliyn"),
  ("llewellyn"),
  ("llewelyn"),
  ("lloyd"),
  ("lludd"),
  ("llundein"),
  ("llwybyr"),
  ("llwyd"),
  ("llwydeu"),
  ("llwyr"),
  ("llyn"),
  ("llyr"),
  ("llyweilun"),
  ("lobo"),
  ("logan"),
  ("logen"),
  ("lohitaksha"),
  ("lok"),
  ("lokesh"),
  ("loknath"),
  ("lokni"),
  ("lokprakash"),
  ("lokranjan"),
  ("loman"),
  ("lon"),
  ("lonato"),
  ("lonell"),
  ("long"),
  ("lonnell"),
  ("lonny"),
  ("lonzo"),
  ("lootah"),
  ("loran"),
  ("lorcan"),
  ("lorens"),
  ("lorenz"),
  ("lorenzo"),
  ("loring"),
  ("lorne"),
  ("lornell"),
  ("lot"),
  ("lothair"),
  ("louvel"),
  ("lovell"),
  ("lowe"),
  ("lowell"),
  ("loy"),
  ("loyal"),
  ("loyd"),
  ("lubomir"),
  ("luboslaw"),
  ("luc"),
  ("luca"),
  ("lucan"),
  ("lucas"),
  ("lucca"),
  ("lucian"),
  ("luciano"),
  ("lucien"),
  ("lucio"),
  ("lucious"),
  ("lucius"),
  ("ludano"),
  ("ludo"),
  ("ludovic"),
  ("ludvig"),
  ("ludvik"),
  ("ludwig"),
  ("ludwik"),
  ("lug"),
  ("luigi"),
  ("luis-fernando"),
  ("lujan"),
  ("lukas"),
  ("lukasz"),
  ("luke"),
  ("lukyan"),
  ("lun"),
  ("lundie"),
  ("lundy"),
  ("lunn"),
  ("luqmaan"),
  ("lusila"),
  ("luster"),
  ("lutfi"),
  ("luthais"),
  ("luther"),
  ("luwai"),
  ("lyall"),
  ("lyam"),
  ("lydell"),
  ("lyel"),
  ("lyle"),
  ("lyman"),
  ("lyndon"),
  ("lynwood"),
  ("lyron"),
  ("maahir"),
  ("maaiz"),
  ("maa'iz"),
  ("maajid"),
  ("maarten"),
  ("maazin"),
  ("mabon"),
  ("mabsant"),
  ("mabuchi"),
  ("mac"),
  ("macario"),
  ("macauley"),
  ("mace"),
  ("macerio"),
  ("machakw"),
  ("machau"),
  ("machk"),
  ("machum"),
  ("maciej"),
  ("mack"),
  ("macsen"),
  ("madaleno"),
  ("madan"),
  ("madangopal"),
  ("madawc"),
  ("madawg"),
  ("madden"),
  ("maddoc"),
  ("maddock"),
  ("maddockson"),
  ("maddocson"),
  ("maddog"),
  ("maddox"),
  ("maddux"),
  ("madesio"),
  ("madhav"),
  ("madhava"),
  ("madhavdas"),
  ("madhuk"),
  ("madhukanta"),
  ("madhukar"),
  ("madhup"),
  ("madhusudan"),
  ("madhusudhana"),
  ("madoc"),
  ("madog"),
  ("mads"),
  ("mael"),
  ("maeleachlainn"),
  ("maelgwyn"),
  ("maelisa"),
  ("maelwys"),
  ("magbei"),
  ("magnar"),
  ("magnus"),
  ("magobei"),
  ("magohachi"),
  ("mahabahu"),
  ("mahabala"),
  ("mahadev"),
  ("mahadevs"),
  ("mahakala"),
  ("mahaniya"),
  ("mahavir"),
  ("mahboob"),
  ("mahdi"),
  ("maheepati"),
  ("mahendra"),
  ("mahesh"),
  ("maheshwar"),
  ("mahfooz"),
  ("mahieu"),
  ("mahin"),
  ("mahindra"),
  ("mahipal"),
  ("mahish"),
  ("mahkah"),
  ("mahlon"),
  ("mahmood"),
  ("mahmud"),
  ("mahpee"),
  ("mahtab"),
  ("mahuroos"),
  ("maichail"),
  ("mailhairer"),
  ("mainak"),
  ("mainchin"),
  ("maisoon"),
  ("majdi"),
  ("major"),
  ("makai"),
  ("makaio"),
  ("makan"),
  ("makani"),
  ("makarand"),
  ("makhi"),
  ("makis"),
  ("makkapitew"),
  ("makolm"),
  ("makoto"),
  ("maks"),
  ("maksim"),
  ("maksimillian"),
  ("maksym"),
  ("maksymilian"),
  ("makya"),
  ("mal"),
  ("malachi"),
  ("malachy"),
  ("malajit"),
  ("malakai"),
  ("malaki"),
  ("malay"),
  ("malcolm"),
  ("malcom"),
  ("male"),
  ("maleko"),
  ("malik"),
  ("malleville"),
  ("mallolwch"),
  ("malo"),
  ("malvin"),
  ("mamadou"),
  ("mamdooh"),
  ("mamoon"),
  ("mamoru"),
  ("manabu"),
  ("manas"),
  ("manasses"),
  ("manav"),
  ("manavendra"),
  ("manawydan"),
  ("mancel"),
  ("mandar"),
  ("mandeep"),
  ("mandek"),
  ("mandel"),
  ("mandhatri"),
  ("mane"),
  ("manendra"),
  ("manford"),
  ("manfred"),
  ("mangal"),
  ("mangesh"),
  ("mani"),
  ("manibhushan"),
  ("manindra"),
  ("maniram"),
  ("manish"),
  ("manishankar"),
  ("manjeet"),
  ("manjit"),
  ("manmatha"),
  ("manmohan"),
  ("manneville"),
  ("mannie"),
  ("mannix"),
  ("mannuss"),
  ("manny"),
  ("mano"),
  ("manobu"),
  ("manohar"),
  ("manoj"),
  ("manolito"),
  ("manolo"),
  ("manoranjan"),
  ("manprasad"),
  ("mansoor"),
  ("mansukh"),
  ("mantel"),
  ("mantotohpa"),
  ("manu"),
  ("manual"),
  ("manuel"),
  ("manuelo"),
  ("manus"),
  ("manville"),
  ("manzo"),
  ("maolmuire"),
  ("maolruadhan"),
  ("maonaigh"),
  ("marc"),
  ("marcas"),
  ("marceau"),
  ("marcel"),
  ("marcelino"),
  ("marcello"),
  ("marcellus"),
  ("marcelo"),
  ("march"),
  ("marchello"),
  ("marciano"),
  ("marcin"),
  ("marcinek"),
  ("marcio"),
  ("marco"),
  ("marcos"),
  ("marcus"),
  ("mardav"),
  ("mareechi"),
  ("marek"),
  ("mareo"),
  ("maresuke"),
  ("margarito"),
  ("mariano"),
  ("marihito"),
  ("marius"),
  ("mariusz"),
  ("markel"),
  ("markell"),
  ("markey"),
  ("marko"),
  ("markov"),
  ("markus"),
  ("markusmatteus"),
  ("marlon"),
  ("marmion"),
  ("marnin"),
  ("marnix"),
  ("maro"),
  ("maron"),
  ("ma,roof"),
  ("marq"),
  ("marque"),
  ("marques"),
  ("marquez"),
  ("marquis"),
  ("marsh"),
  ("marshal"),
  ("mart"),
  ("martand"),
  ("martanda"),
  ("martel"),
  ("martell"),
  ("martez"),
  ("martin"),
  ("martinez"),
  ("martino"),
  ("martinus"),
  ("marut"),
  ("maruti"),
  ("marvin"),
  ("marwaan"),
  ("marzooq"),
  ("masaaki"),
  ("masafumi"),
  ("masaharu"),
  ("masahide"),
  ("masahiko"),
  ("masahiro"),
  ("masakado"),
  ("masakazu"),
  ("masaki"),
  ("masamba"),
  ("masami"),
  ("masamichi"),
  ("masamune"),
  ("masanobu"),
  ("masanori"),
  ("masao"),
  ("masaru"),
  ("masashi"),
  ("masashige"),
  ("masatake"),
  ("masato"),
  ("masayoshi"),
  ("masayuki"),
  ("masazumi"),
  ("mashai"),
  ("mashal"),
  ("mashashi"),
  ("mashiro"),
  ("masichuvio"),
  ("maska"),
  ("maslin"),
  ("mason"),
  ("masood"),
  ("masselin"),
  ("massimo"),
  ("masson"),
  ("mastoor"),
  ("masu"),
  ("masuhiro"),
  ("masujiro"),
  ("masutaro"),
  ("mat"),
  ("matabei"),
  ("matai"),
  ("matashichi"),
  ("matchitehew"),
  ("mate"),
  ("mateo"),
  ("mateusz"),
  ("math"),
  ("mathe"),
  ("mathew"),
  ("mathews"),
  ("mathias"),
  ("matias"),
  ("matoskah"),
  ("matro"),
  ("mats"),
  ("matsendra"),
  ("matsu"),
  ("matsudaira"),
  ("matsuo"),
  ("matsusuke"),
  ("matsuta"),
  ("matsuyo"),
  ("matsya"),
  ("matt"),
  ("matteo"),
  ("matthew"),
  ("matthias"),
  ("matthieu"),
  ("matthijs"),
  ("mattias"),
  ("matunaagd"),
  ("matvey"),
  ("matwau"),
  ("matyas"),
  ("matysh"),
  ("matz"),
  ("maughold"),
  ("maureo"),
  ("mauricio"),
  ("maurilio"),
  ("maurio"),
  ("maurizio"),
  ("mauro"),
  ("maury"),
  ("maurycy"),
  ("mauty"),
  ("maverick"),
  ("mawdood"),
  ("mawrth"),
  ("max"),
  ("maxence"),
  ("maxim"),
  ("maximilian"),
  ("maximiliano"),
  ("maximillian"),
  ("maximino"),
  ("maximo"),
  ("maximus"),
  ("maxwell"),
  ("maxx"),
  ("mayank"),
  ("mayanka"),
  ("mayer"),
  ("mayhew"),
  ("mayir"),
  ("maynard"),
  ("mayne"),
  ("maynor"),
  ("mayur"),
  ("mazablaska"),
  ("mazeed"),
  ("mccoy"),
  ("meade"),
  ("meadhra"),
  ("meara"),
  ("mearl"),
  ("medyr"),
  ("megedagik"),
  ("megh"),
  ("meghashyam"),
  ("meghdutt"),
  ("meghnad"),
  ("mehboob"),
  ("mehdi"),
  ("mehmood"),
  ("mehtar"),
  ("meiji"),
  ("meilseoir"),
  ("meilyg"),
  ("meir"),
  ("mekhi"),
  ("mel"),
  ("melchior"),
  ("melchoir"),
  ("mele"),
  ("melisizwe"),
  ("melker"),
  ("melrone"),
  ("melton"),
  ("melville"),
  ("melvyn"),
  ("memphis"),
  ("menachem"),
  ("menassah"),
  ("mendel"),
  ("menw"),
  ("mercher"),
  ("merlin"),
  ("merlion"),
  ("merrick"),
  ("merritt"),
  ("merton"),
  ("mervin"),
  ("mervyn"),
  ("merwyn"),
  ("mesha"),
  ("messiah"),
  ("meturato"),
  ("meurig"),
  ("meyer"),
  ("michael"),
  ("michail"),
  ("michale"),
  ("michaŌ"),
  ("micheal"),
  ("michelangelo"),
  ("michihiro"),
  ("michinaga"),
  ("michinori"),
  ("michio"),
  ("michizane"),
  ("michon"),
  ("mick"),
  ("micky"),
  ("mieczysŌaw"),
  ("miguel"),
  ("miguelangel"),
  ("mihaly"),
  ("mihangel"),
  ("mihir"),
  ("mikael"),
  ("mikal"),
  ("mikasi"),
  ("mikel"),
  ("mikhail"),
  ("mikhalis"),
  ("mikhos"),
  ("mikio"),
  ("mikkel"),
  ("mikolai"),
  ("mikolaj"),
  ("mil"),
  ("milap"),
  ("milburn"),
  ("milek"),
  ("miles"),
  ("milford"),
  ("milind"),
  ("millard"),
  ("miller"),
  ("milo"),
  ("milton"),
  ("milun"),
  ("mingan"),
  ("minninnewah"),
  ("minor"),
  ("minoru"),
  ("mio"),
  ("miqdaad"),
  ("miqdaam"),
  ("miquel"),
  ("miron"),
  ("mirosŌaw"),
  ("mirza"),
  ("misael"),
  ("misal"),
  ("misao"),
  ("misfar"),
  ("mishaari"),
  ("mishe"),
  ("misi"),
  ("misu"),
  ("mitch"),
  ("mitchel"),
  ("mitchell"),
  ("mitesh"),
  ("mithil"),
  ("mithilesh"),
  ("mithra"),
  ("mithun"),
  ("mito"),
  ("mitra"),
  ("mitsuharu"),
  ("mitsuhide"),
  ("mitsukuni"),
  ("mitsunari"),
  ("mitsuo"),
  ("mitsuoki"),
  ("mitsuzuka"),
  ("mitul"),
  ("miyazaki"),
  ("miyoko"),
  ("mobumasu"),
  ("mochihito"),
  ("mochni"),
  ("modesto"),
  ("moesen"),
  ("moeshe"),
  ("mogue"),
  ("mohajit"),
  ("mohak"),
  ("mohal"),
  ("mohamad"),
  ("mohamed"),
  ("mohammad"),
  ("mohammed"),
  ("mohan"),
  ("mohin"),
  ("mohit"),
  ("mohita"),
  ("mohnish"),
  ("mohul"),
  ("moises"),
  ("mojag"),
  ("mokatavatah"),
  ("moketoveto"),
  ("moki"),
  ("mokichi"),
  ("mokovaoto"),
  ("mokuami"),
  ("molan"),
  ("molimo"),
  ("momoru"),
  ("mongwau"),
  ("monish"),
  ("monroe"),
  ("mons"),
  ("montae"),
  ("montague"),
  ("montaigu"),
  ("montaine"),
  ("montaro"),
  ("montay"),
  ("monte"),
  ("montego"),
  ("montel"),
  ("montell"),
  ("montenegro"),
  ("montes"),
  ("montez"),
  ("montgomery"),
  ("montrel"),
  ("montrell"),
  ("montrelle"),
  ("monty"),
  ("monzaemon"),
  ("moody"),
  ("moor"),
  ("moore"),
  ("moosha"),
  ("morain"),
  ("moran"),
  ("morcar"),
  ("mordecai"),
  ("mordechai"),
  ("mordwywr"),
  ("morell"),
  ("moren"),
  ("morgannwg"),
  ("moriarty"),
  ("morie"),
  ("morihiro"),
  ("morimasa"),
  ("morio"),
  ("moriz"),
  ("morogh"),
  ("moromao"),
  ("moronobu"),
  ("morris"),
  ("morrison"),
  ("morrison murdock"),
  ("morrissey"),
  ("morthwyl"),
  ("mortimer"),
  ("morton"),
  ("morvran"),
  ("mose"),
  ("moses"),
  ("moshe"),
  ("mosheh"),
  ("mosi"),
  ("motavato"),
  ("motega"),
  ("moti"),
  ("motilal"),
  ("motka"),
  ("motoichi"),
  ("motoki"),
  ("motonobu"),
  ("motoshige"),
  ("mototsune"),
  ("motoyasu"),
  ("motoyuki"),
  ("moulik"),
  ("mriganka"),
  ("mrigankamouli"),
  ("mrigankasekhar"),
  ("mrigendra"),
  ("mrigesh"),
  ("mrityunjay"),
  ("muaaid"),
  ("mu,aawiya"),
  ("muammar"),
  ("muata"),
  ("mubarak"),
  ("mubashshir"),
  ("mudita"),
  ("mudrik"),
  ("mufeed"),
  ("muhaajir"),
  ("muhamad"),
  ("muhammad"),
  ("muhsin"),
  ("muhyddeen"),
  ("muircheartaigh"),
  ("muireadhach"),
  ("mujahid"),
  ("mukarram"),
  ("mukesh"),
  ("mukhtaar"),
  ("mukki"),
  ("mukonry"),
  ("muktananda"),
  ("mukul"),
  ("mukunda"),
  ("mukut"),
  ("mulcahy"),
  ("mulkraj"),
  ("mumtaz"),
  ("mundhir"),
  ("mundy"),
  ("muneeb"),
  ("muneef"),
  ("muneer"),
  ("munemitsu"),
  ("munemori"),
  ("munenori"),
  ("muneyaki"),
  ("muni"),
  ("munjid"),
  ("munoto"),
  ("munsif"),
  ("muntasir"),
  ("muraco"),
  ("murad"),
  ("murai"),
  ("muralidhar"),
  ("muralimanohar"),
  ("murari"),
  ("murarilal"),
  ("murchadh"),
  ("murphy"),
  ("murray"),
  ("murry"),
  ("murshid"),
  ("murtaugh"),
  ("musaaid"),
  ("mus'ab"),
  ("musaddiq"),
  ("mushanokoji"),
  ("musheer"),
  ("mushtaaq"),
  ("muslih"),
  ("muslim"),
  ("mustaba"),
  ("mustafa"),
  ("mutammam"),
  ("mutasim"),
  ("mu'taz"),
  ("muthanna"),
  ("mutlaq"),
  ("mutsohito"),
  ("muzammil"),
  ("mykel"),
  ("myles"),
  ("myrddin"),
  ("myrick"),
  ("myron"),
  ("naadir"),
  ("naaif"),
  ("naaji"),
  ("naal"),
  ("naalnish"),
  ("naaman"),
  ("naasif"),
  ("naasiruddeen"),
  ("naazil"),
  ("naazim"),
  ("nab"),
  ("nabarun"),
  ("nabeeh"),
  ("nabeel"),
  ("nabendu"),
  ("nabhi"),
  ("nachiketa"),
  ("nachman"),
  ("nachton"),
  ("nadav"),
  ("nadeem"),
  ("nadheer"),
  ("nadir"),
  ("nadiv"),
  ("naftali"),
  ("naftalie"),
  ("naganori"),
  ("nagendra"),
  ("nagesh"),
  ("nahcomence"),
  ("nahele"),
  ("nahiossi"),
  ("nahum"),
  ("nahusha"),
  ("nairit"),
  ("nairne"),
  ("naishadh"),
  ("naizen"),
  ("najee"),
  ("najeeb"),
  ("najeem"),
  ("nakamaro"),
  ("nakazo"),
  ("nakshatra"),
  ("nakul"),
  ("naldo"),
  ("nalin"),
  ("nalinaksha"),
  ("naman"),
  ("namboku"),
  ("namdev"),
  ("nampo"),
  ("nanak"),
  ("nand"),
  ("nandan"),
  ("nandi"),
  ("nandin"),
  ("nantai"),
  ("naoaki"),
  ("naofumi"),
  ("naohiro"),
  ("naoki"),
  ("naoko"),
  ("naomhan"),
  ("naomichi"),
  ("naonobu"),
  ("naosuke"),
  ("naotau"),
  ("naoya"),
  ("naozane"),
  ("napayshni"),
  ("napoleon"),
  ("narahari"),
  ("narahiko"),
  ("naraka"),
  ("narasimha"),
  ("narayan"),
  ("narayana"),
  ("narendra"),
  ("naresh"),
  ("narhari"),
  ("nari"),
  ("nariaki"),
  ("nariakira"),
  ("narihari"),
  ("narihira"),
  ("nario"),
  ("narmad"),
  ("narottam"),
  ("narsimha"),
  ("naruhiko"),
  ("naseem"),
  ("naseer"),
  ("nash"),
  ("nashat"),
  ("nasir"),
  ("nassaar"),
  ("nastas"),
  ("nat"),
  ("natal"),
  ("natalio"),
  ("natanael"),
  ("nataniel"),
  ("nate"),
  ("natesh"),
  ("nathair"),
  ("nathan"),
  ("nathanael"),
  ("nathanial"),
  ("nathaniel"),
  ("nathannathaniel"),
  ("nathen"),
  ("nathrach"),
  ("nathraichean"),
  ("natraj"),
  ("natrick"),
  ("natsu"),
  ("natsume"),
  ("natsuo"),
  ("natwar"),
  ("naughton"),
  ("naum"),
  ("naval"),
  ("navaneet"),
  ("navarro"),
  ("naveen"),
  ("navin"),
  ("navnit"),
  ("navrang"),
  ("navroz"),
  ("naw"),
  ("nawat"),
  ("nawf"),
  ("nawfal"),
  ("nawkaw"),
  ("nayan"),
  ("nayati"),
  ("nazmi"),
  ("neakail"),
  ("neal"),
  ("neason"),
  ("neb"),
  ("nechemya"),
  ("nechtan"),
  ("ned"),
  ("neel"),
  ("neeladri"),
  ("neelambar"),
  ("neelanjan"),
  ("neelesh"),
  ("neelkanta"),
  ("neelkanth"),
  ("neelmadhav"),
  ("neelmani"),
  ("neelotpal"),
  ("neeraf"),
  ("neeraj"),
  ("neeshaan"),
  ("nehemiah"),
  ("nehru"),
  ("neifion"),
  ("neil"),
  ("neilan"),
  ("neill"),
  ("neka"),
  ("nelek"),
  ("nels"),
  ("nelson"),
  ("nemesio"),
  ("neo"),
  ("nero"),
  ("neron"),
  ("nerth"),
  ("nerthach"),
  ("nessan"),
  ("nesto"),
  ("nestor"),
  ("nethanel"),
  ("neto"),
  ("neuveville"),
  ("nevan"),
  ("neville"),
  ("nevyn"),
  ("newell"),
  ("newiyn"),
  ("newlin"),
  ("newt"),
  ("newton"),
  ("newyddilyn"),
  ("niall"),
  ("nibaw"),
  ("nibodh"),
  ("nicanor"),
  ("niccolo"),
  ("nichiren"),
  ("nicholaus"),
  ("nick"),
  ("nicklaus"),
  ("nickolas"),
  ("nico"),
  ("nicolaas"),
  ("nicolai"),
  ("nicolas"),
  ("nicoli"),
  ("nicolo"),
  ("nidhish"),
  ("nigam"),
  ("nigan"),
  ("nigel"),
  ("niguel"),
  ("nihal"),
  ("nihar"),
  ("niichaad"),
  ("niket"),
  ("nikhat"),
  ("nikhil"),
  ("nikhilesh"),
  ("nikiti"),
  ("nikko"),
  ("niklas"),
  ("niko"),
  ("nikodem"),
  ("nikolai"),
  ("nikolas"),
  ("nikolaus"),
  ("nikunj"),
  ("nikunja"),
  ("nilay"),
  ("nilesh"),
  ("nils"),
  ("nimai"),
  ("nimish"),
  ("nimrod"),
  ("ninad"),
  ("ninsei"),
  ("niou"),
  ("nipun"),
  ("nirad"),
  ("niraj"),
  ("nirajit"),
  ("niramay"),
  ("niramitra"),
  ("niranjan"),
  ("nirav"),
  ("nirbhay"),
  ("nirijhar"),
  ("nirmal"),
  ("nirmalya"),
  ("nirmit"),
  ("nirmohi"),
  ("nirupam"),
  ("nirvan"),
  ("nischal"),
  ("nishad"),
  ("nishanath"),
  ("nishant"),
  ("nishesh"),
  ("nishikanta"),
  ("nishit"),
  ("nishita"),
  ("nishith"),
  ("nishok"),
  ("nissho"),
  ("nissim"),
  ("nissyen"),
  ("niteesh"),
  ("nitesh"),
  ("nitin"),
  ("nitis"),
  ("nitish"),
  ("nityagopal"),
  ("nityanand"),
  ("nityananda"),
  ("nityasundar"),
  ("nivrutti"),
  ("nixkamich"),
  ("niyol"),
  ("nizaam"),
  ("nizaar"),
  ("nkosana"),
  ("nnamdi"),
  ("noach"),
  ("noah"),
  ("noahnorrece"),
  ("noak"),
  ("noam"),
  ("noble"),
  ("noboru"),
  ("nobuatsu"),
  ("nobuharu"),
  ("nobuhiko"),
  ("nobuhisa"),
  ("nobuhito"),
  ("nobukazu"),
  ("nobuo"),
  ("noburo"),
  ("nobusuke"),
  ("nobuyoki"),
  ("nobuyori"),
  ("nobuyoshi"),
  ("nodin"),
  ("nolan"),
  ("noland"),
  ("nolen"),
  ("nolyn"),
  ("noori"),
  ("nootau"),
  ("norbert"),
  ("norberto"),
  ("noreis"),
  ("nori"),
  ("noriaki"),
  ("norice"),
  ("norihide"),
  ("norihisa"),
  ("norinaga"),
  ("norio"),
  ("norishige"),
  ("noritada"),
  ("noritoshi"),
  ("noriyori"),
  ("noriyuki"),
  ("norm"),
  ("normand"),
  ("normando"),
  ("norogumi"),
  ("norrece"),
  ("norris"),
  ("norval"),
  ("nosh"),
  ("noshi"),
  ("nouel"),
  ("nripa"),
  ("nripendra"),
  ("nripesh"),
  ("nu'maan"),
  ("numair"),
  ("nuri"),
  ("nynnyaw"),
  ("oakley"),
  ("obadiah"),
  ("obediah"),
  ("obie"),
  ("ochieng"),
  ("octave"),
  ("octavio"),
  ("octavius"),
  ("ocunnowhurst"),
  ("oda"),
  ("odakota"),
  ("odanodan"),
  ("oded"),
  ("odgar"),
  ("odhran"),
  ("odin"),
  ("odis"),
  ("odo"),
  ("odran"),
  ("odus"),
  ("oengus"),
  ("ofer"),
  ("ofydd"),
  ("ogai"),
  ("ogaleesha"),
  ("ogilhinn"),
  ("ogilvie"),
  ("ogilvy"),
  ("ohanko"),
  ("ohanzee"),
  ("ohcumgache"),
  ("ohitekah"),
  ("oidhche"),
  ("oisin"),
  ("ojas"),
  ("okakura"),
  ("okey"),
  ("okhmhaka"),
  ("okitsugu"),
  ("okura"),
  ("okyoito"),
  ("olabode"),
  ("olaf"),
  ("olan"),
  ("ole"),
  ("oleg"),
  ("olen"),
  ("oles"),
  ("olezka"),
  ("olie"),
  ("olin"),
  ("oliver"),
  ("oliverio"),
  ("oliverios"),
  ("olivier"),
  ("olle"),
  ("olof"),
  ("olufemi"),
  ("olujimi"),
  ("olukayode"),
  ("olwydd"),
  ("omanand"),
  ("omar"),
  ("omari"),
  ("omarion"),
  ("omarr"),
  ("omawnakw"),
  ("omeet"),
  ("omer"),
  ("omet"),
  ("omezo"),
  ("omja"),
  ("omkar"),
  ("omparkash"),
  ("omprakash"),
  ("omrao; umrao"),
  ("omri"),
  ("omswaroop"),
  ("ondyaw"),
  ("oneal"),
  ("onfroi"),
  ("oniji"),
  ("onille"),
  ("onofre"),
  ("ony"),
  ("onzi"),
  ("oojam"),
  ("oorjit"),
  ("oral"),
  ("oran"),
  ("orel"),
  ("orell"),
  ("oren"),
  ("ori"),
  ("orie"),
  ("orin"),
  ("orinosuke"),
  ("orion"),
  ("oris"),
  ("orlan"),
  ("orland"),
  ("orlando"),
  ("orlin"),
  ("orlo"),
  ("orlondo"),
  ("ornice"),
  ("oro"),
  ("orpheus"),
  ("orrel"),
  ("orrie"),
  ("orrin"),
  ("orsino"),
  ("orson"),
  ("orval"),
  ("orvelle"),
  ("orvil"),
  ("orville"),
  ("osamu"),
  ("osbaldo"),
  ("osip"),
  ("osjami"),
  ("oskar"),
  ("osman; usman"),
  ("ossian"),
  ("osvaldo"),
  ("oswald"),
  ("oswaldo"),
  ("oswallt"),
  ("oswardo"),
  ("otaktay"),
  ("otho"),
  ("otieno"),
  ("otilio"),
  ("otis"),
  ("otoahhastis"),
  ("otoahnacto"),
  ("otojiro"),
  ("ottis"),
  ("otto"),
  ("Ōukasz"),
  ("ouray"),
  ("ourson"),
  ("ovadiah"),
  ("ovadya"),
  ("oved"),
  ("ovid"),
  ("ovidio"),
  ("owain"),
  ("owein"),
  ("owen"),
  ("owin"),
  ("owyn"),
  ("owynn"),
  ("ozi"),
  ("ozzi"),
  ("ozzie"),
  ("paavan"),
  ("pabiyan"),
  ("pablo"),
  ("pacho"),
  ("pachu'a"),
  ("paco"),
  ("pacorro"),
  ("padgett"),
  ("padman"),
  ("padmanabh"),
  ("padmanabha"),
  ("padmapati"),
  ("padraic"),
  ("padraig"),
  ("padriac"),
  ("padric"),
  ("padrig"),
  ("padruig"),
  ("paget"),
  ("pahana"),
  ("paien"),
  ("paki"),
  ("pål"),
  ("palak"),
  ("palash"),
  ("palashkusum"),
  ("palashranjan"),
  ("palban"),
  ("palben"),
  ("pallab"),
  ("pallaton"),
  ("pallav"),
  ("palmer"),
  ("paltel"),
  ("palti"),
  ("panchanan"),
  ("panchika"),
  ("pancho"),
  ("pandhari"),
  ("pandu"),
  ("panduranga"),
  ("pani"),
  ("panini"),
  ("pankaj"),
  ("pannalal"),
  ("pannoowau"),
  ("pany"),
  ("paolo"),
  ("parag"),
  ("parakram"),
  ("param"),
  ("paramananda"),
  ("paramartha"),
  ("paramesh"),
  ("paramhansa"),
  ("paramjeet"),
  ("paranjay"),
  ("parantapa"),
  ("parashar"),
  ("parashuram"),
  ("parasmani"),
  ("paravasu"),
  ("parees"),
  ("paresh"),
  ("parfait"),
  ("parijat"),
  ("pariket"),
  ("parikshit"),
  ("parindra"),
  ("paritosh"),
  ("parkash"),
  ("parlan"),
  ("parmameshwar"),
  ("parnad"),
  ("parnel"),
  ("parnell"),
  ("parrish"),
  ("partha"),
  ("parthapratim"),
  ("parvatinandan"),
  ("parvesh"),
  ("pascal"),
  ("pascual"),
  ("pasqual"),
  ("pasquale"),
  ("patakin"),
  ("patamon"),
  ("patanjali"),
  ("pathik"),
  ("pathin"),
  ("paton"),
  ("patralika"),
  ("patric"),
  ("patriciopatrido"),
  ("patrik"),
  ("patrizio"),
  ("patryk"),
  ("patwin"),
  ("pauel"),
  ("paulino"),
  ("paulo"),
  ("pavak"),
  ("pavan"),
  ("pavanjit"),
  ("pavipv"),
  ("pavit"),
  ("pavitra"),
  ("pavlik"),
  ("pavlo"),
  ("pavlushka"),
  ("pavlya"),
  ("pawel"),
  ("pawelek"),
  ("paweŌ"),
  ("pawl"),
  ("paxton"),
  ("payas"),
  ("payat"),
  ("payatt"),
  ("payod"),
  ("paytah"),
  ("payton"),
  ("pearce"),
  ("pearson"),
  ("peder"),
  ("pedr"),
  ("pedro"),
  ("peeyush"),
  ("peissawg"),
  ("pekelo"),
  ("pembroke"),
  ("penilyn"),
  ("penn"),
  ("penrod"),
  ("penvro"),
  ("pepe"),
  ("pepillo"),
  ("pepperell"),
  ("peppin"),
  ("peppino"),
  ("per"),
  ("perceval"),
  ("percival"),
  ("percy"),
  ("peredur"),
  ("pernell"),
  ("perren"),
  ("perrin"),
  ("perryn"),
  ("pesach"),
  ("pessach"),
  ("pete"),
  ("petenka"),
  ("petrov"),
  ("petter"),
  ("petya"),
  ("peverell"),
  ("peyton"),
  ("phalguni"),
  ("phanindra"),
  ("phelan"),
  ("phenil"),
  ("pherson"),
  ("phil"),
  ("philip"),
  ("philippe"),
  ("phillip"),
  ("phillipe"),
  ("phineas"),
  ("pierce"),
  ("piero"),
  ("pierpont"),
  ("pierre"),
  ("pierrepont"),
  ("piers"),
  ("pieter"),
  ("pietrek"),
  ("pietro"),
  ("pim"),
  ("pinak"),
  ("pinaki"),
  ("pink"),
  ("pinkney"),
  ("pio"),
  ("piotr"),
  ("piperel"),
  ("pippin"),
  ("pippino"),
  ("pirmohammed"),
  ("pirro"),
  ("pitamaha"),
  ("pitambar"),
  ("pitar"),
  ("pitri"),
  ("piyush"),
  ("placido"),
  ("plat"),
  ("platon"),
  ("platt"),
  ("pleas"),
  ("pleasant"),
  ("plys"),
  ("pomeroy"),
  ("pommelraie"),
  ("ponce"),
  ("poojan"),
  ("poojit"),
  ("poorna"),
  ("poornachandra"),
  ("porfirio"),
  ("porfiro"),
  ("porter"),
  ("porteur"),
  ("portier"),
  ("poshita"),
  ("powa"),
  ("powell"),
  ("powwaw"),
  ("prabal"),
  ("prabhakar"),
  ("prabhas"),
  ("prabhat"),
  ("prabhav"),
  ("prabir"),
  ("prabodh"),
  ("prabodhan"),
  ("prabuddha"),
  ("prachur"),
  ("pradeep"),
  ("pradnesh"),
  ("pradosh"),
  ("pradyot"),
  ("pradyumna"),
  ("praful"),
  ("prafulla"),
  ("pragun"),
  ("prahlad"),
  ("prajeet"),
  ("prajesh"),
  ("prajin"),
  ("prajit"),
  ("prakash"),
  ("prakat"),
  ("prakriti"),
  ("pralay"),
  ("pramath"),
  ("pramesh"),
  ("pramit"),
  ("pramod"),
  ("pran"),
  ("pranav"),
  ("pranay"),
  ("pranet"),
  ("pranit"),
  ("pranjal"),
  ("pranjivan"),
  ("pransukh"),
  ("prasad"),
  ("prasanna"),
  ("prasata"),
  ("prasenjit"),
  ("prasham"),
  ("prashant"),
  ("prashanta"),
  ("prasoon"),
  ("prasun"),
  ("pratap"),
  ("prateek"),
  ("prateep"),
  ("prateet"),
  ("pratik"),
  ("pratiti"),
  ("pratosh"),
  ("pratul"),
  ("praval"),
  ("pravar"),
  ("praveen"),
  ("praver"),
  ("pravir"),
  ("prayag"),
  ("preece"),
  ("preetish"),
  ("premal"),
  ("premanand"),
  ("premendra"),
  ("preruet"),
  ("preston"),
  ("prewitt"),
  ("price"),
  ("primeiro"),
  ("primo"),
  ("prince"),
  ("priour"),
  ("pritam"),
  ("prithu"),
  ("prithvi"),
  ("prithvijaj"),
  ("prithviraj"),
  ("priyabrata"),
  ("priyamkara"),
  ("priyaranjan"),
  ("prospero"),
  ("pruet"),
  ("pruie"),
  ("pruitt"),
  ("pryce"),
  ("pryderi"),
  ("prydwen"),
  ("pryor"),
  ("przemek"),
  ("przemo"),
  ("przemyslaw"),
  ("przemysŌaw"),
  ("pueblo"),
  ("pujit"),
  ("pukhraj"),
  ("pulak"),
  ("pulakesh"),
  ("pulastya"),
  ("pulin"),
  ("pulish"),
  ("pumeet"),
  ("pundarik"),
  ("puneet"),
  ("punit"),
  ("punyabrata"),
  ("punyasloka"),
  ("purandar"),
  ("puranjay"),
  ("purdy"),
  ("purnanada"),
  ("purnendu"),
  ("puru"),
  ("purujit"),
  ("purumitra"),
  ("pururava"),
  ("purushottam"),
  ("pushkar"),
  ("pushpak"),
  ("puskara"),
  ("puw"),
  ("pwyll"),
  ("pyarelal"),
  ("pyaremohan"),
  ("pyotr"),
  ("pyrs"),
  ("qaaid"),
  ("qaasim"),
  ("qais"),
  ("qaletaqa"),
  ("qochatarowtag"),
  ("quaid"),
  ("quamar"),
  ("quany"),
  ("quarrie"),
  ("quasim"),
  ("quennel"),
  ("quent"),
  ("quentin"),
  ("quenton"),
  ("quentrell"),
  ("queran"),
  ("quesnel"),
  ("quigley"),
  ("quin"),
  ("quincey"),
  ("quincy"),
  ("quinlan"),
  ("quinn"),
  ("quint"),
  ("quinten"),
  ("quintin"),
  ("quinto"),
  ("quinton"),
  ("quintrell"),
  ("quique"),
  ("quito"),
  ("quraish"),
  ("qutb"),
  ("qutub"),
  ("raadi"),
  ("raafi"),
  ("raaid"),
  ("raaji"),
  ("raakaan"),
  ("raamiz"),
  ("raanan"),
  ("raashid"),
  ("rabi"),
  ("rachard"),
  ("radd"),
  ("radhakanta"),
  ("radhakrishna"),
  ("radhavallabh"),
  ("radheshyam"),
  ("radheya"),
  ("radoslaw"),
  ("radwan"),
  ("rae"),
  ("raekwon"),
  ("rafael"),
  ("rafaele"),
  ("rafaello"),
  ("rafal"),
  ("rafaŌ"),
  ("rafe"),
  ("rafeeq"),
  ("raffaello"),
  ("raghav"),
  ("raghavendra"),
  ("raghnall"),
  ("raghu"),
  ("raghunandan"),
  ("raghunath"),
  ("raghupati"),
  ("raghuvir"),
  ("ragnar"),
  ("rahas"),
  ("raheem"),
  ("rahman"),
  ("rahsaan"),
  ("rahul"),
  ("rai"),
  ("raiden"),
  ("raidon"),
  ("raighne"),
  ("raihaan"),
  ("raimond"),
  ("raimondo"),
  ("raimundo"),
  ("rainger"),
  ("rainier"),
  ("raj"),
  ("rajaa"),
  ("rajab"),
  ("rajam"),
  ("rajan"),
  ("rajanikant"),
  ("rajanikanta"),
  ("rajarshi"),
  ("rajas"),
  ("rajat"),
  ("rajatshubhra"),
  ("rajeev"),
  ("rajendra"),
  ("rajendrakumar"),
  ("rajendramohan"),
  ("rajesh"),
  ("raji"),
  ("rajit"),
  ("rajiv"),
  ("rajivlochan"),
  ("rajivnayan"),
  ("rajkumar"),
  ("rajmund"),
  ("rajnish"),
  ("rajrishi"),
  ("rajyeshwar"),
  ("rakeem"),
  ("rakesh"),
  ("rakshasa"),
  ("raktavira"),
  ("raktim"),
  ("raleigh"),
  ("ralph"),
  ("ram"),
  ("ramakanta"),
  ("ramalaan"),
  ("raman"),
  ("ramanuja"),
  ("ramashray"),
  ("ramavatar"),
  ("ramchandra"),
  ("ramell"),
  ("ramesh"),
  ("rameshwar"),
  ("ramirez"),
  ("ramiro"),
  ("ramkishore"),
  ("ramkrishna"),
  ("ramkumar"),
  ("rammohan"),
  ("ramnath"),
  ("ramon"),
  ("ramond"),
  ("ramone"),
  ("ramprasad"),
  ("rampratap"),
  ("ramratan"),
  ("ramsay"),
  ("ramsey"),
  ("ramswaroop"),
  ("ramzey"),
  ("ramzi"),
  ("ranajay"),
  ("ranajit"),
  ("ranald"),
  ("rand"),
  ("randal"),
  ("randall"),
  ("randel"),
  ("randell"),
  ("randhir"),
  ("randle"),
  ("randolph"),
  ("ranen"),
  ("rangan"),
  ("ranganath"),
  ("ranger"),
  ("ranier"),
  ("ranjan"),
  ("ranjeet"),
  ("ranjit"),
  ("ranon"),
  ("ransom"),
  ("raoul"),
  ("raphael"),
  ("raquan"),
  ("rasaraj"),
  ("rasbihari"),
  ("rasesh"),
  ("rashaad"),
  ("rashaan"),
  ("rashad"),
  ("rashan"),
  ("rashard"),
  ("rashawn"),
  ("rasheed"),
  ("rasheeq"),
  ("rashmil"),
  ("rasik"),
  ("rasmus"),
  ("rasul"),
  ("ratan"),
  ("ratannabha"),
  ("rathin"),
  ("ratish"),
  ("ratnakar"),
  ("ratul"),
  ("raul"),
  ("raulo"),
  ("ravana"),
  ("ravi"),
  ("ravid"),
  ("ravikiran"),
  ("ravinandan"),
  ("ravindra"),
  ("ravishu"),
  ("ray"),
  ("rayan"),
  ("rayce"),
  ("rayder"),
  ("raydon"),
  ("rayford"),
  ("raylen"),
  ("rayman"),
  ("raymon"),
  ("raymone"),
  ("raymund"),
  ("raymundo"),
  ("raynard"),
  ("raynell"),
  ("rayshawn"),
  ("rayyaan"),
  ("raza"),
  ("razak"),
  ("razan"),
  ("razeen"),
  ("reade"),
  ("rebanta"),
  ("rechavia"),
  ("redd"),
  ("redmond"),
  ("reed"),
  ("rees"),
  ("reggie"),
  ("reggis"),
  ("reginal"),
  ("reginald"),
  ("regis"),
  ("rehman"),
  ("rehmat"),
  ("reid"),
  ("reidar"),
  ("reidel"),
  ("reijiro"),
  ("reinaldo"),
  ("reizo"),
  ("remi"),
  ("remington"),
  ("remy"),
  ("ren"),
  ("renaldo"),
  ("renard"),
  ("renato"),
  ("renau"),
  ("renfrew"),
  ("renjiro"),
  ("renne"),
  ("rennie"),
  ("reno"),
  ("renzo"),
  ("reshay"),
  ("reuben"),
  ("reuhen"),
  ("reule"),
  ("reve"),
  ("rex"),
  ("rey"),
  ("reydel"),
  ("reyes"),
  ("reymond"),
  ("reymundo"),
  ("reynaldo"),
  ("reynard"),
  ("reynardo"),
  ("reynold"),
  ("rhashan"),
  ("rheged"),
  ("rhett"),
  ("rhinffrew"),
  ("rhioganedd"),
  ("rhisiart"),
  ("rhobert"),
  ("rhun"),
  ("rhuvawn"),
  ("rhyawdd"),
  ("rhychdir"),
  ("rhyd"),
  ("rhys"),
  ("riagan"),
  ("rian"),
  ("ric"),
  ("ricard"),
  ("ricardo"),
  ("riccardo"),
  ("ricco"),
  ("rice"),
  ("rich"),
  ("richardo"),
  ("richei"),
  ("richie"),
  ("richmond"),
  ("rick"),
  ("rickey"),
  ("ricky"),
  ("rico"),
  ("rida"),
  ("riddhiman"),
  ("ridge"),
  ("ridwaan"),
  ("rifaah"),
  ("rifat"),
  ("rigoberto"),
  ("rijul"),
  ("rikard"),
  ("rikiya"),
  ("rikyu"),
  ("rinaldo"),
  ("ringo"),
  ("rinji"),
  ("rintaro"),
  ("riobard"),
  ("rion"),
  ("riordain"),
  ("riordan"),
  ("ripudaman"),
  ("rique"),
  ("rishabh"),
  ("rishi"),
  ("rishikesh"),
  ("ritchie"),
  ("ritter"),
  ("rituparan"),
  ("rituraj"),
  ("ritvik"),
  ("riyaal"),
  ("riyaz"),
  ("rizvan"),
  ("rkuemon"),
  ("roane"),
  ("roano"),
  ("roark"),
  ("rob"),
  ("robaire"),
  ("robb"),
  ("robby"),
  ("robert"),
  ("roberto"),
  ("rob roy"),
  ("robt"),
  ("robun"),
  ("rocco"),
  ("rochak"),
  ("rochan"),
  ("roche"),
  ("rock"),
  ("rocke"),
  ("rocky"),
  ("rod"),
  ("rodas"),
  ("roddy"),
  ("rodel"),
  ("rodell"),
  ("roderic"),
  ("roderick"),
  ("roderigo"),
  ("rodger"),
  ("rodney"),
  ("rodolfo"),
  ("rodric"),
  ("rodrick"),
  ("rodrigo"),
  ("roel"),
  ("rogan"),
  ("rogelio"),
  ("roger"),
  ("rogers"),
  ("rogny"),
  ("rohan"),
  ("rohanlal"),
  ("rohit"),
  ("rohitasva"),
  ("roi"),
  ("roibin"),
  ("roka"),
  ("roku"),
  ("roland"),
  ("rolando"),
  ("roldan"),
  ("rolf"),
  ("rolla"),
  ("rollan"),
  ("rolland"),
  ("rollie"),
  ("rollin"),
  ("rollo"),
  ("romain"),
  ("roman"),
  ("romano"),
  ("romello"),
  ("romeo"),
  ("rommel"),
  ("romney"),
  ("romochka"),
  ("romon"),
  ("romone"),
  ("romy"),
  ("ron"),
  ("ronak"),
  ("ronald"),
  ("ronaldo"),
  ("ronan"),
  ("rondall"),
  ("rondy"),
  ("ronin"),
  ("ronny"),
  ("roosevelt"),
  ("roque"),
  ("rorey"),
  ("rorke"),
  ("rorry"),
  ("rosanjin"),
  ("roscoe"),
  ("roselin"),
  ("rosendo"),
  ("rosevelt"),
  ("ross"),
  ("rossiter"),
  ("rosston"),
  ("roth"),
  ("rousse"),
  ("roussel"),
  ("rousset"),
  ("rousskin"),
  ("rouvin"),
  ("rowen"),
  ("rowin"),
  ("rowland"),
  ("rowyn"),
  ("roy"),
  ("royal"),
  ("royan"),
  ("royden"),
  ("r'phael"),
  ("ruadhagan"),
  ("ruadhan"),
  ("ruaidhri"),
  ("ruairi"),
  ("ruanaidh"),
  ("ruarc"),
  ("ruark"),
  ("rube"),
  ("ruben"),
  ("rubin"),
  ("ruchir"),
  ("rudolf"),
  ("rudolph"),
  ("rudra"),
  ("rueban"),
  ("rueben"),
  ("ruelle"),
  ("ruff"),
  ("ruffe"),
  ("rufin"),
  ("rufio"),
  ("rufo"),
  ("rufus"),
  ("ruggero"),
  ("ruggiero"),
  ("rui"),
  ("rujul"),
  ("rule"),
  ("rumenea"),
  ("rune"),
  ("rupak"),
  ("rupert"),
  ("rupesh"),
  ("rupin"),
  ("rurik"),
  ("rush"),
  ("rushdi"),
  ("rushe"),
  ("rushil"),
  ("rushkin"),
  ("russ"),
  ("russel"),
  ("rust"),
  ("rustin"),
  ("rustom"),
  ("rusty"),
  ("rutajit"),
  ("rutger"),
  ("rutujit"),
  ("ruwaid"),
  ("ryder"),
  ("ryker"),
  ("ryland"),
  ("ryley"),
  ("ryn"),
  ("ryne"),
  ("ryo"),
  ("ryobe"),
  ("ryoichi"),
  ("ryoko"),
  ("ryoma"),
  ("ryon"),
  ("ryosei"),
  ("ryozo"),
  ("ryszard"),
  ("ryu"),
  ("ryuichi"),
  ("ryunosuke"),
  ("ryushi"),
  ("ryutaro"),
  ("ryuzaburo"),
  ("ryzard"),
  ("saabiq"),
  ("saabir"),
  ("saadiq"),
  ("saadya"),
  ("saahir"),
  ("saajid"),
  ("saalih"),
  ("saalim"),
  ("saami"),
  ("saamir"),
  ("sabaah"),
  ("sabastian"),
  ("saber"),
  ("sabino"),
  ("sabri"),
  ("saburo"),
  ("sacchidananda"),
  ("sachet"),
  ("sachetan"),
  ("sachin"),
  ("sachio"),
  ("sachit"),
  ("sad"),
  ("sadaharu"),
  ("sadahige"),
  ("sadakuno"),
  ("sadanand"),
  ("sadanobu"),
  ("sadao"),
  ("sadashiva"),
  ("sadatake"),
  ("sadayoshi"),
  ("sadeepan"),
  ("sadi"),
  ("sadiq"),
  ("sadoon"),
  ("sadwm"),
  ("saeed"),
  ("saemon"),
  ("saer"),
  ("safar"),
  ("safwaan"),
  ("sagar"),
  ("sagun"),
  ("sahaj"),
  ("sahale"),
  ("sahan"),
  ("sahas"),
  ("sahdev"),
  ("sahib"),
  ("sahil"),
  ("sahir"),
  ("sahl"),
  ("saif"),
  ("saikaku"),
  ("sainath"),
  ("saionji"),
  ("saipraasad"),
  ("saipratap"),
  ("saith"),
  ("sajag"),
  ("sajal"),
  ("sajan"),
  ("saka"),
  ("sakeen"),
  ("sakeri"),
  ("saket"),
  ("sakima"),
  ("sakutaro"),
  ("sal"),
  ("salaah"),
  ("salaman"),
  ("salamon"),
  ("salarjung"),
  ("salbatore"),
  ("saleel"),
  ("saleem"),
  ("saleet"),
  ("salil"),
  ("salim"),
  ("salmaan"),
  ("salmalin"),
  ("salomon"),
  ("salvador"),
  ("salvadore"),
  ("salvatore"),
  ("salvatorio"),
  ("salvino"),
  ("samantaka"),
  ("samar"),
  ("samarendra"),
  ("samarendu"),
  ("samarjit"),
  ("samarth"),
  ("samba"),
  ("sambaran"),
  ("sambhav"),
  ("sambhddha"),
  ("sambit"),
  ("sameen"),
  ("sameer"),
  ("samendra"),
  ("samir"),
  ("samiran"),
  ("samoel"),
  ("sampat"),
  ("sampson"),
  ("samrat"),
  ("samson"),
  ("samual"),
  ("samudra"),
  ("samudragupta"),
  ("samudrasen"),
  ("samyak"),
  ("sanabhi"),
  ("sanam"),
  ("sanat"),
  ("sanatan"),
  ("sanchay"),
  ("sanchit"),
  ("sancho"),
  ("sandananda"),
  ("sandeep"),
  ("sandeepen"),
  ("sander"),
  ("sanders"),
  ("sandro"),
  ("sandy"),
  ("saneatsu"),
  ("sanetomo"),
  ("sanford"),
  ("sani"),
  ("sanjay"),
  ("sanjiro"),
  ("sanjiv"),
  ("sanjivan"),
  ("sanjog"),
  ("sanjuro"),
  ("sankalpa"),
  ("sankara"),
  ("sankarshan"),
  ("sanket"),
  ("sanobar"),
  ("sanraku"),
  ("sanson"),
  ("santiago"),
  ("santino"),
  ("santo"),
  ("santosh"),
  ("sanwariya"),
  ("sanyog"),
  ("sanzo"),
  ("saood"),
  ("sapan"),
  ("saqr"),
  ("saquib"),
  ("sarad"),
  ("saral"),
  ("sarang"),
  ("saras"),
  ("sarasija"),
  ("sarasvat"),
  ("sarat"),
  ("sarbajit"),
  ("sarfaraz"),
  ("sargent"),
  ("sartaj"),
  ("sarthak"),
  ("sarup"),
  ("sarvadaman"),
  ("sarvesh"),
  ("sarwar"),
  ("sashreek"),
  ("sasson"),
  ("satindra"),
  ("satish"),
  ("satordi"),
  ("satoru"),
  ("satoshi"),
  ("satrijit"),
  ("saturnin"),
  ("satvamohan"),
  ("satyajit"),
  ("satyakam"),
  ("satyamurty"),
  ("satyanarayan"),
  ("satyankar"),
  ("satyaprakash"),
  ("satyapriya"),
  ("satyasheel"),
  ("satyavan"),
  ("satyavrat"),
  ("satyavrata"),
  ("satyendra"),
  ("saubhari"),
  ("saul"),
  ("saurabh"),
  ("saurav"),
  ("sauville"),
  ("savar"),
  ("saville"),
  ("savino"),
  ("savion"),
  ("savitendra"),
  ("savon"),
  ("sawan"),
  ("sawao"),
  ("sawyer"),
  ("sayam"),
  ("sayed"),
  ("sayer"),
  ("sayers"),
  ("sayon"),
  ("sayre"),
  ("sayres"),
  ("schmaiah"),
  ("schmuel"),
  ("schuyler"),
  ("sciymgeour"),
  ("scot"),
  ("scott"),
  ("scottie"),
  ("scotty"),
  ("seafra"),
  ("seafraid"),
  ("seaghda"),
  ("seamus"),
  ("sean"),
  ("seanan"),
  ("searbhreathach"),
  ("searlas"),
  ("searle"),
  ("searlus"),
  ("sebastian"),
  ("sebastiano"),
  ("sebastien"),
  ("sebastion"),
  ("sedrick"),
  ("seemanta"),
  ("sefu"),
  ("segenam"),
  ("segundo"),
  ("seibei"),
  ("seiesnsui"),
  ("seignour"),
  ("seihachi"),
  ("seiho"),
  ("seiichi"),
  ("seiji"),
  ("seika"),
  ("seiki"),
  ("sein"),
  ("seinosuke"),
  ("seireadan"),
  ("seiryo"),
  ("seishiro"),
  ("seishisai"),
  ("seison"),
  ("seitaro"),
  ("seith"),
  ("sekien"),
  ("sel"),
  ("selyf"),
  ("selyv"),
  ("semaj"),
  ("semyon"),
  ("sen"),
  ("senajit"),
  ("seneca"),
  ("senen"),
  ("senet"),
  ("senichi"),
  ("senior"),
  ("sennet"),
  ("senon"),
  ("senzo"),
  ("seosamh"),
  ("seosaph"),
  ("serafim"),
  ("serafin"),
  ("seraphim"),
  ("serek"),
  ("serge"),
  ("sergei"),
  ("sergio"),
  ("sergiusz"),
  ("serguei"),
  ("seriozha"),
  ("seriozhenka"),
  ("sessue"),
  ("set"),
  ("seth"),
  ("setsigurd"),
  ("settan"),
  ("seung"),
  ("sevak"),
  ("sevastian"),
  ("severin"),
  ("severo"),
  ("sevrin"),
  ("seward"),
  ("sewati"),
  ("seweryn"),
  ("seymour"),
  ("shaafi"),
  ("shaaheen"),
  ("shaahir"),
  ("shaakir"),
  ("shaamikh"),
  ("shaamil"),
  ("shaan"),
  ("shabaan"),
  ("shachin"),
  ("shachindra"),
  ("shad"),
  ("shadab"),
  ("shaddaad"),
  ("shadrach"),
  ("shafeeq"),
  ("shaheed"),
  ("shaheen"),
  ("shaheer"),
  ("shahid"),
  ("shailendra"),
  ("shailesh"),
  ("shaiming"),
  ("shain"),
  ("shaistakhan"),
  ("shaitan"),
  ("shaka"),
  ("shakib"),
  ("shaktar"),
  ("shaktidhar"),
  ("shakunt"),
  ("shakyasinha"),
  ("shalya"),
  ("shaman"),
  ("shamar"),
  ("shamba"),
  ("shambhu"),
  ("shameek"),
  ("shameem"),
  ("shami"),
  ("shamindra"),
  ("shams"),
  ("shamshu; shamshad"),
  ("shamus"),
  ("shandar"),
  ("shandon"),
  ("shandrel"),
  ("shandy"),
  ("shankar"),
  ("shankara"),
  ("shankha"),
  ("shanley"),
  ("shanmuga"),
  ("shanmukha"),
  ("shann"),
  ("shantanu"),
  ("shantashil"),
  ("shantie"),
  ("shantimay"),
  ("shantinath"),
  ("shantiprakash"),
  ("shantipriya"),
  ("shaqeeq"),
  ("shaquan"),
  ("shaquille"),
  ("sharad"),
  ("sharadchandra"),
  ("sharadindu"),
  ("sharaf"),
  ("sharaku"),
  ("sharang"),
  ("shardul"),
  ("sharif"),
  ("shariq"),
  ("shashank"),
  ("shashanka"),
  ("shashee"),
  ("shashenka"),
  ("shashibhushan"),
  ("shashida"),
  ("shashidhar"),
  ("shashikant"),
  ("shashikiran"),
  ("shashimohan"),
  ("shashishekhar"),
  ("shashwat"),
  ("shatrughan"),
  ("shatrughna"),
  ("shatrujit"),
  ("shatrunjay"),
  ("shattesh"),
  ("shauden"),
  ("shaughn"),
  ("shaukat"),
  ("shaunak"),
  ("shaundre"),
  ("shaw"),
  ("shawe"),
  ("shawnn"),
  ("shawqi"),
  ("shaye"),
  ("shaylon"),
  ("shedrick"),
  ("sheik"),
  ("sheil"),
  ("sheldon"),
  ("shelomo"),
  ("shelton"),
  ("shem"),
  ("shemar"),
  ("shemus"),
  ("shen"),
  ("sheng"),
  ("sherman"),
  ("sherwin"),
  ("sherwood"),
  ("shesh"),
  ("shesha"),
  ("shet"),
  ("shetan"),
  ("shevantilal"),
  ("shey"),
  ("shiba"),
  ("shichirobei"),
  ("shigeaki"),
  ("shigekazu"),
  ("shigeki"),
  ("shigeko"),
  ("shigemasa"),
  ("shigematsu"),
  ("shigemori"),
  ("shigenaga"),
  ("shigenobu"),
  ("shigeru"),
  ("shigetaka"),
  ("shigetoki"),
  ("shigochiyo"),
  ("shihaab"),
  ("shihei"),
  ("shihi"),
  ("shijo"),
  ("shikhar"),
  ("shiki"),
  ("shiko"),
  ("shilah"),
  ("shilo"),
  ("shimei"),
  ("shimpei"),
  ("shimshon"),
  ("shing"),
  ("shingen"),
  ("shinichi"),
  ("shinji"),
  ("shinkichi"),
  ("shinobu"),
  ("shinrikiyaru"),
  ("shinsaku"),
  ("shinsui"),
  ("shintaro"),
  ("shinzaburo"),
  ("shinzo"),
  ("shirai"),
  ("shiriki"),
  ("shirish"),
  ("shiro"),
  ("shiromani"),
  ("shirosama"),
  ("shirshirchandra"),
  ("shishir"),
  ("shishirkumar"),
  ("shishupal"),
  ("shiv"),
  ("shiva"),
  ("shivakumar"),
  ("shivendra"),
  ("shivendu"),
  ("shivesh"),
  ("shivlal"),
  ("shivraj"),
  ("shivshankar"),
  ("shiye"),
  ("shizhe'e"),
  ("shlomo"),
  ("sho"),
  ("shobhan"),
  ("shoda"),
  ("shogo"),
  ("shohei"),
  ("shoichi"),
  ("shoin"),
  ("shoji"),
  ("shojiro"),
  ("shoko"),
  ("shon"),
  ("shonn"),
  ("shoorsen"),
  ("shoraku"),
  ("shosuke"),
  ("shotaro"),
  ("shoyo"),
  ("shozaburo"),
  ("shozo"),
  ("shravan"),
  ("shravankumar"),
  ("shrenik"),
  ("shreshta"),
  ("shreyas"),
  ("shridhar"),
  ("shrigopal"),
  ("shrihari"),
  ("shrikanta"),
  ("shrikrishna"),
  ("shrikumar"),
  ("shrinath"),
  ("shrinivas"),
  ("shripad"),
  ("shripal"),
  ("shripati"),
  ("shriram"),
  ("shriranga"),
  ("shrish"),
  ("shrivatsa"),
  ("shriyans"),
  ("shuaib"),
  ("shubhang"),
  ("shubhankar"),
  ("shubhashis"),
  ("shubhendu"),
  ("shubhranshu"),
  ("shuddhashil"),
  ("shudra"),
  ("shuichi"),
  ("shujaa"),
  ("shuji"),
  ("shukishi"),
  ("shuko"),
  ("shukri"),
  ("shulabh"),
  ("shumei"),
  ("shumkichi"),
  ("shun"),
  ("shuncho"),
  ("shun⊙en"),
  ("shungyosai"),
  ("shunichi"),
  ("shunji"),
  ("shunko"),
  ("shunmyo"),
  ("shunsen"),
  ("shunsho"),
  ("shunso"),
  ("shunsuke"),
  ("shuraih"),
  ("shurik"),
  ("shurochka"),
  ("shusake"),
  ("shusaku"),
  ("shusui"),
  ("shuzo"),
  ("shvetang"),
  ("shvetank"),
  ("shyam"),
  ("shyamsundar"),
  ("shyheim"),
  ("siarl"),
  ("siawn"),
  ("sicheii"),
  ("sid"),
  ("siddeeqi"),
  ("siddhanta"),
  ("siddharth"),
  ("siddhartha"),
  ("siddheshwar"),
  ("sidell"),
  ("sidqi"),
  ("siencyn"),
  ("sigurd"),
  ("sigvard"),
  ("sike"),
  ("sik'is"),
  ("sikyahonaw"),
  ("sikyatavo"),
  ("silas"),
  ("silmi"),
  ("silvain"),
  ("silverio"),
  ("silvestre"),
  ("silvino"),
  ("silvio"),
  ("sim"),
  ("simao"),
  ("simba"),
  ("simcha"),
  ("simen"),
  ("simeon"),
  ("simon"),
  ("simson"),
  ("sinai"),
  ("sincere"),
  ("sinclair"),
  ("sinclaire"),
  ("sindre"),
  ("sinjin"),
  ("sinnoch"),
  ("sinon"),
  ("siomon"),
  ("sion"),
  ("sior"),
  ("siraaj"),
  ("siraj"),
  ("sirajuddeen"),
  ("sitakanta"),
  ("sitanshu"),
  ("sitikantha"),
  ("sivan"),
  ("sivanta"),
  ("siwili"),
  ("sizwe"),
  ("skah"),
  ("skanda"),
  ("skene"),
  ("skip"),
  ("slade"),
  ("slavik"),
  ("sloan"),
  ("smarajit"),
  ("smaran"),
  ("smith"),
  ("smokey"),
  ("smritiman"),
  ("snehanshn"),
  ("snehin"),
  ("sŌawomir"),
  ("soetsu"),
  ("sofu"),
  ("soh"),
  ("sohail"),
  ("soham"),
  ("sohan"),
  ("sohil"),
  ("soichiro"),
  ("sojuro"),
  ("solomon"),
  ("som"),
  ("somendra"),
  ("somerville"),
  ("someshwar"),
  ("somnath"),
  ("songaa"),
  ("sonny"),
  ("sopan"),
  ("sorai"),
  ("sorel"),
  ("soren"),
  ("sorrell"),
  ("sosa"),
  ("soseki"),
  ("soshitsu"),
  ("soshu"),
  ("sosuke"),
  ("sotan"),
  ("sotaro"),
  ("sotatsu"),
  ("souley"),
  ("soumil"),
  ("soumyakanti"),
  ("sourabh"),
  ("sourish"),
  ("sowi'ngwa"),
  ("sozen"),
  ("sozui"),
  ("spencer"),
  ("spenser"),
  ("spike"),
  ("spiro"),
  ("spurgeon"),
  ("srijan"),
  ("srikant"),
  ("srinivas"),
  ("sriram"),
  ("ssekien"),
  ("staffan"),
  ("stan"),
  ("stanford"),
  ("stanislaw"),
  ("stanislov"),
  ("stanisŌaw"),
  ("stanley"),
  ("stanton"),
  ("steadman"),
  ("stefan"),
  ("stefano"),
  ("steffan"),
  ("steffen"),
  ("steffon"),
  ("stein"),
  ("sten"),
  ("stephan"),
  ("stephano"),
  ("stephon"),
  ("sterlin"),
  ("sterling"),
  ("stetson"),
  ("stevan"),
  ("steve"),
  ("stewart"),
  ("stian"),
  ("stig"),
  ("stille"),
  ("stone"),
  ("stoney"),
  ("storm"),
  ("strom"),
  ("struan"),
  ("stuart"),
  ("sual"),
  ("subal"),
  ("subaru"),
  ("subash"),
  ("subbarao"),
  ("subhan"),
  ("subhash"),
  ("subhi"),
  ("subinay"),
  ("subodh"),
  ("suchir"),
  ("sucki"),
  ("sudama"),
  ("sudarshan"),
  ("sudeep"),
  ("sudesh"),
  ("sudesha"),
  ("sudeva"),
  ("sudhakar"),
  ("sudhamay"),
  ("sudhanshu"),
  ("sudhanssu"),
  ("sudhi"),
  ("sudhindra"),
  ("sudhir"),
  ("sudhish"),
  ("suezo"),
  ("sufyaan"),
  ("sugata"),
  ("sugimoto"),
  ("sugreev"),
  ("sugriva"),
  ("sugyn"),
  ("suhaib"),
  ("suhail"),
  ("suhas"),
  ("suhrid"),
  ("suhrit"),
  ("sujan"),
  ("sujash"),
  ("sujay"),
  ("sujit"),
  ("sukant"),
  ("sukanta"),
  ("sukejuro"),
  ("sukenobu"),
  ("sukesh"),
  ("suketsune"),
  ("suketu"),
  ("sukeyasu"),
  ("sukhamay"),
  ("sukhdev"),
  ("sukrit"),
  ("sukumar"),
  ("sulaimaan"),
  ("sulalit"),
  ("sullivan"),
  ("sulochan"),
  ("sultan"),
  ("sulya"),
  ("sulyen"),
  ("suman"),
  ("sumant"),
  ("sumanta"),
  ("sumantra"),
  ("sumarville"),
  ("sumeet"),
  ("sumio"),
  ("sumit"),
  ("sumiteru"),
  ("sumitomo"),
  ("sumner"),
  ("sunasi"),
  ("sundar"),
  ("sunil"),
  ("sunirmal"),
  ("sunreet"),
  ("suprakash"),
  ("supratik"),
  ("supratim"),
  ("suraj"),
  ("surajit"),
  ("suranjan"),
  ("surdeep"),
  ("suren"),
  ("suresh"),
  ("surya"),
  ("suryabhan"),
  ("suryakant"),
  ("suryakanta"),
  ("suryashankar"),
  ("sushanta"),
  ("sushil"),
  ("sushobhan"),
  ("sushrut"),
  ("sushruta"),
  ("susumu"),
  ("sutej"),
  ("suvan"),
  ("suvimal"),
  ("suvrata"),
  ("suwailim"),
  ("suyash"),
  ("svein"),
  ("sven"),
  ("svend"),
  ("sverre"),
  ("swagat"),
  ("swami"),
  ("swaminath"),
  ("swapan"),
  ("swapnil"),
  ("swaraj"),
  ("swarup"),
  ("swayambhu"),
  ("swetaketu"),
  ("syamantak"),
  ("syd"),
  ("syed"),
  ("sying"),
  ("sylas"),
  ("sylvan"),
  ("sylvester"),
  ("symeon"),
  ("syvwkh"),
  ("szczepan"),
  ("taaha"),
  ("taahir"),
  ("taaj"),
  ("taajuddeen"),
  ("taalib"),
  ("taamir"),
  ("taariq"),
  ("taaveti"),
  ("taavi"),
  ("tab"),
  ("taber"),
  ("tabito"),
  ("tabor"),
  ("tad"),
  ("tadahisa"),
  ("tadakuni"),
  ("tadamasa"),
  ("tadamichi"),
  ("tadao"),
  ("tadashi"),
  ("tadasu"),
  ("tadasuke"),
  ("tadataka"),
  ("tadayoshi"),
  ("tadayuki"),
  ("tadd"),
  ("tadeo"),
  ("tadeusz"),
  ("tadhg"),
  ("tadiyuki"),
  ("tafari"),
  ("taffy"),
  ("tag"),
  ("tage"),
  ("taheiji"),
  ("tahir"),
  ("tahj"),
  ("tahkeome"),
  ("tahmelapachme"),
  ("taicligh"),
  ("taikan"),
  ("taillefer"),
  ("taiseer"),
  ("taisho"),
  ("taisuke"),
  ("tait"),
  ("taizeen"),
  ("taj"),
  ("tajdar"),
  ("tajo"),
  ("takaaki"),
  ("takafumi"),
  ("takahashi"),
  ("takahiro"),
  ("takakazu"),
  ("takamasa"),
  ("takamori"),
  ("takamuku"),
  ("takanibu"),
  ("takanobu"),
  ("takanori"),
  ("takao"),
  ("takashi"),
  ("takauji"),
  ("takayuki"),
  ("takechi"),
  ("takehide"),
  ("takeichi"),
  ("takeji"),
  ("takejiro"),
  ("takenao"),
  ("takeo"),
  ("takeru"),
  ("takeshi"),
  ("takesi"),
  ("taki"),
  ("takiji"),
  ("takshaka"),
  ("takuboku"),
  ("takuji"),
  ("takuma"),
  ("takuro"),
  ("takuya"),
  ("talaal"),
  ("talan"),
  ("talat"),
  ("talbot"),
  ("talehot"),
  ("talen"),
  ("talha"),
  ("talib"),
  ("taliesin"),
  ("talin"),
  ("talleen"),
  ("tallie"),
  ("talmadge"),
  ("talmai"),
  ("talon"),
  ("talyessin"),
  ("tamal"),
  ("tamas"),
  ("tamasaburo"),
  ("tamasine"),
  ("tameem"),
  ("tameron"),
  ("tameyoshi"),
  ("tamkinat"),
  ("tammaam"),
  ("tamonash"),
  ("tamotsu"),
  ("tamuramaro"),
  ("tanay"),
  ("tandu"),
  ("taneli"),
  ("tangakwunu"),
  ("tango"),
  ("tanjiro"),
  ("tanmay"),
  ("tanner"),
  ("tanosuke"),
  ("tanuj"),
  ("tanveer"),
  ("tanyu"),
  ("tanzan"),
  ("tapan"),
  ("tapas"),
  ("tapasendra"),
  ("tapasranjan"),
  ("tapomay"),
  ("taqi"),
  ("tarachand"),
  ("tarak"),
  ("tarakeshwar"),
  ("taraknath"),
  ("taral"),
  ("taran"),
  ("tarang"),
  ("taranga"),
  ("taraprashad"),
  ("tareef"),
  ("tarik"),
  ("tariq"),
  ("tarit"),
  ("taro"),
  ("taroemon"),
  ("tarozaemon"),
  ("tarran"),
  ("tarrant"),
  ("tarun"),
  ("taruntapan"),
  ("tashiaki"),
  ("tashiro"),
  ("tasuku"),
  ("tasunke"),
  ("tathagata"),
  ("tatsui"),
  ("tatsukichi"),
  ("tatsuya"),
  ("tatsuzo"),
  ("taurean"),
  ("taurino"),
  ("tauro"),
  ("taurus"),
  ("tausiq"),
  ("tavares"),
  ("tavaris"),
  ("taveon"),
  ("tavey"),
  ("tavian"),
  ("tavin"),
  ("tavio"),
  ("tavion"),
  ("tavis"),
  ("tavish"),
  ("tavon"),
  ("tawfeeq"),
  ("tawheed"),
  ("tayib"),
  ("taylan"),
  ("tayshaun"),
  ("taysuke"),
  ("tayyib"),
  ("teaghue"),
  ("teague"),
  ("tearlach"),
  ("ted"),
  ("teddy"),
  ("teerth"),
  ("teerthankar"),
  ("teetonka"),
  ("teiji"),
  ("teijo"),
  ("teika"),
  ("teiljo"),
  ("teinosuke"),
  ("teithi"),
  ("tej"),
  ("tejano"),
  ("tejas"),
  ("tejeshwar"),
  ("tejomay"),
  ("tekkan"),
  ("telek"),
  ("telfer"),
  ("telfor"),
  ("telford"),
  ("telfour"),
  ("telly"),
  ("telutci"),
  ("tenshin"),
  ("teo"),
  ("teodor"),
  ("teodoro"),
  ("teofilo"),
  ("teos"),
  ("teppo"),
  ("terance"),
  ("terao"),
  ("terciero"),
  ("teregud"),
  ("terell"),
  ("terence"),
  ("teris"),
  ("teriuihi"),
  ("terrance"),
  ("terrence"),
  ("terrill"),
  ("terris"),
  ("terriss"),
  ("terumoto"),
  ("teruo"),
  ("tessai"),
  ("tetsu"),
  ("tetsuhiko"),
  ("tetsui"),
  ("tetsunori"),
  ("tetsuo"),
  ("tetsuya"),
  ("tetsuyuki"),
  ("tetsuzan"),
  ("tevin"),
  ("tevis"),
  ("tewdwr"),
  ("teyo"),
  ("thaamir"),
  ("thaaqib"),
  ("thad"),
  ("thaddeus"),
  ("thakur"),
  ("thane"),
  ("theadore"),
  ("theobold"),
  ("theodore"),
  ("theron"),
  ("therron"),
  ("thibaud"),
  ("thieny"),
  ("thierry"),
  ("thiery"),
  ("thijmen"),
  ("thijs"),
  ("thoki"),
  ("thoma"),
  ("thor"),
  ("thornton"),
  ("thulani"),
  ("thurman"),
  ("thurston"),
  ("tibault"),
  ("tiberio"),
  ("tier"),
  ("tiernan"),
  ("tighe"),
  ("tihkoosue"),
  ("tilak"),
  ("tillman"),
  ("tim"),
  ("timin"),
  ("timir"),
  ("timirbaran"),
  ("timmie"),
  ("timmothy"),
  ("timmy"),
  ("timo"),
  ("timoteo"),
  ("timotheus"),
  ("tino"),
  ("tion"),
  ("titir"),
  ("tito"),
  ("titus"),
  ("tobe"),
  ("tobei"),
  ("tobiah"),
  ("tobias"),
  ("tobin"),
  ("tocho"),
  ("tod"),
  ("todd"),
  ("todney"),
  ("togai"),
  ("togquos"),
  ("tohaku"),
  ("tohias"),
  ("tohopka"),
  ("tohy"),
  ("toichi"),
  ("toin"),
  ("toju"),
  ("tokaji"),
  ("tokala"),
  ("toki"),
  ("tokichiro"),
  ("tokimasa"),
  ("tokimune"),
  ("tokugawa"),
  ("tokuhei"),
  ("tokuma"),
  ("tokutomi"),
  ("tolek"),
  ("tolenka"),
  ("toli"),
  ("tollie"),
  ("tolya"),
  ("tom"),
  ("toma"),
  ("tomas"),
  ("tomasz"),
  ("tomek"),
  ("tomeo"),
  ("tomie"),
  ("tomiichi"),
  ("tomiji"),
  ("tomislaw"),
  ("tommaso"),
  ("tomoaki"),
  ("tomohiko"),
  ("tomokazu"),
  ("tomomi"),
  ("tomos"),
  ("tomoyuki"),
  ("ton"),
  ("toney"),
  ("tonio"),
  ("tooantuh"),
  ("tor"),
  ("toraidio"),
  ("torajiro"),
  ("toran"),
  ("torazo"),
  ("tore"),
  ("torean"),
  ("toren"),
  ("torence"),
  ("torey"),
  ("torgny"),
  ("toriano"),
  ("torin"),
  ("torio"),
  ("torion"),
  ("torkel"),
  ("tormaigh"),
  ("tormey"),
  ("toro"),
  ("torran"),
  ("torrance"),
  ("torrans"),
  ("torre"),
  ("torrence"),
  ("torrey"),
  ("torrian"),
  ("torrie"),
  ("torry"),
  ("torsten"),
  ("toru"),
  ("toryn"),
  ("toshan"),
  ("toshiaki"),
  ("toshiharu"),
  ("toshikasu"),
  ("toshikazu"),
  ("toshiki"),
  ("toshikuni"),
  ("toshimichi"),
  ("toshinobu"),
  ("toshiro"),
  ("toshitsugu"),
  ("toshiyuki"),
  ("toson"),
  ("tosya"),
  ("totoya"),
  ("toussnint"),
  ("toyoaki"),
  ("toyoharu"),
  ("toyokazu"),
  ("toyokuni"),
  ("toyonobu"),
  ("toyoshige"),
  ("toyotomi"),
  ("toyozo"),
  ("trace"),
  ("trae"),
  ("trahaym"),
  ("trahern"),
  ("traigh"),
  ("trailokva"),
  ("tramaine"),
  ("trambak"),
  ("travanis"),
  ("travaughn"),
  ("traveon"),
  ("travers"),
  ("travion"),
  ("travon"),
  ("trayvon"),
  ("tre"),
  ("treabhar"),
  ("treacy"),
  ("treasach"),
  ("treasigh"),
  ("trece"),
  ("trejean"),
  ("tremain"),
  ("tremaine"),
  ("tremayne"),
  ("tremen"),
  ("trent"),
  ("trenten"),
  ("trenton"),
  ("treshaun"),
  ("trevan"),
  ("trevelian"),
  ("trevelyan"),
  ("treven"),
  ("trever"),
  ("treves"),
  ("trevian"),
  ("trevin"),
  ("trevion"),
  ("trevls"),
  ("trevon"),
  ("trevonn"),
  ("trevor"),
  ("trevyn"),
  ("trey"),
  ("treyton"),
  ("treyvon"),
  ("tribhuvan"),
  ("tridib"),
  ("trigun"),
  ("trilochan"),
  ("trilok"),
  ("trilokesh"),
  ("tringad"),
  ("tripada"),
  ("tripp"),
  ("tripurari"),
  ("trishanku"),
  ("tristian"),
  ("tristin"),
  ("triston"),
  ("tristram"),
  ("trivikram"),
  ("trone"),
  ("troyes"),
  ("trumaine"),
  ("truman"),
  ("trynt"),
  ("trystan"),
  ("tsidhqiyah"),
  ("tsugahara"),
  ("tsugiharu"),
  ("tsuginori"),
  ("tsugumichi"),
  ("tsukasa"),
  ("tsumemasa"),
  ("tsunayoshi"),
  ("tsuneari"),
  ("tsuneo"),
  ("tsunesaburo"),
  ("tsuneyo"),
  ("tsuramatsu"),
  ("tsurayaki"),
  ("tsuruki"),
  ("tsutomu"),
  ("tsuyoshi"),
  ("tuan"),
  ("tuari"),
  ("tucker"),
  ("tudor"),
  ("tufail"),
  ("tufan"),
  ("tuhin"),
  ("tuhinsurra"),
  ("tukaram"),
  ("tuketu"),
  ("tulasidas"),
  ("tulio"),
  ("tulsidas"),
  ("tungar"),
  ("tungesh"),
  ("tupac"),
  ("tupi"),
  ("turell"),
  ("turi"),
  ("turki"),
  ("turner"),
  ("tushar"),
  ("tusharkanti"),
  ("tusharsuvra"),
  ("tusya"),
  ("tutyahu"),
  ("tuvya"),
  ("twain"),
  ("twm"),
  ("twrgadarn"),
  ("tyagraja"),
  ("tyce"),
  ("tye"),
  ("tyeis"),
  ("tyeson"),
  ("tyjon"),
  ("tylor"),
  ("tynan"),
  ("tyquan"),
  ("tyreck"),
  ("tyree"),
  ("tyreece"),
  ("tyreek"),
  ("tyreese"),
  ("tyrek"),
  ("tyreke"),
  ("tyrel"),
  ("tyrell"),
  ("tyrelle"),
  ("tyrese"),
  ("tyrik"),
  ("tyrin"),
  ("tyriq"),
  ("tyrique"),
  ("tyron"),
  ("tyrone"),
  ("tyronne"),
  ("tyrus"),
  ("tyshawn"),
  ("tyson"),
  ("tywysog"),
  ("tzadok"),
  ("tzefanyah"),
  ("tzefanyahu"),
  ("tzion"),
  ("tziyon"),
  ("tzuriel"),
  ("tzvi"),
  ("uaid"),
  ("ualtar"),
  ("ubaida"),
  ("uchdryd"),
  ("udar"),
  ("uday"),
  ("udayachal"),
  ("udayan"),
  ("uddhar"),
  ("uddhav"),
  ("udeep"),
  ("udit"),
  ("udo"),
  ("udyam"),
  ("udyan"),
  ("ugo"),
  ("uilleam"),
  ("uisdean"),
  ("uja"),
  ("ujagar"),
  ("ujala"),
  ("ujesh"),
  ("ujwal"),
  ("ukon"),
  ("ukyo"),
  ("ulbrecht"),
  ("ulf"),
  ("ulhas"),
  ("ulises"),
  ("ulrich"),
  ("ulysses"),
  ("umair"),
  ("umakant"),
  ("umanand"),
  ("umanant"),
  ("umang"),
  ("umaprasad"),
  ("umar"),
  ("umashankar"),
  ("umberto"),
  ("umed"),
  ("umesh"),
  ("unais"),
  ("ungus"),
  ("unkei"),
  ("unmesh"),
  ("unnamed"),
  ("unnat"),
  ("upagupta"),
  ("upamanyu"),
  ("upendra"),
  ("uqbah"),
  ("urban"),
  ("urbano"),
  ("uri"),
  ("uriah"),
  ("urie"),
  ("uriel"),
  ("urijah"),
  ("urjita"),
  ("usaama"),
  ("ushakanta"),
  ("uso"),
  ("ustin"),
  ("utaemon"),
  ("utamara"),
  ("utamuro"),
  ("utanka"),
  ("utathya"),
  ("utemaro"),
  ("uthmaa"),
  ("utkarsh"),
  ("utkarsha"),
  ("utpal"),
  ("utsav"),
  ("uttam"),
  ("uttar"),
  ("uttiya"),
  ("uwais"),
  ("uzochi"),
  ("uzumati"),
  ("uzziah"),
  ("uzziel"),
  ("vachan"),
  ("vachaspati"),
  ("vachel"),
  ("vaddon"),
  ("vadim"),
  ("vadin"),
  ("vaibhav"),
  ("vaijnath"),
  ("vail"),
  ("vaiveahtoish"),
  ("vajradhar"),
  ("vajramani"),
  ("vajrapani"),
  ("valente"),
  ("valentin"),
  ("valentino"),
  ("valerii"),
  ("valerik"),
  ("valerio"),
  ("valfrid"),
  ("valiant"),
  ("valin"),
  ("vallabh"),
  ("vallis"),
  ("vallois"),
  ("valmik"),
  ("valmiki"),
  ("valter"),
  ("vaman"),
  ("vamsi"),
  ("vanajit"),
  ("vance"),
  ("vandan"),
  ("vanechka"),
  ("vaninath"),
  ("vanyusha"),
  ("vardan"),
  ("varden"),
  ("vardhaman"),
  ("vardon"),
  ("varen"),
  ("varick"),
  ("varij"),
  ("varindra"),
  ("varun"),
  ("vas"),
  ("vasant"),
  ("vasava"),
  ("vaschel"),
  ("vashan"),
  ("vashon"),
  ("vasily"),
  ("vasin"),
  ("vasistha"),
  ("vassi"),
  ("vassily"),
  ("vasu"),
  ("vasudev"),
  ("vasuki"),
  ("vasuman"),
  ("vatsal"),
  ("vaughan"),
  ("vaughn"),
  ("vayle"),
  ("ved"),
  ("vedanga"),
  ("vedavrata"),
  ("vedmohan"),
  ("vedprakash"),
  ("veer"),
  ("veera"),
  ("vegar"),
  ("vegard"),
  ("venamin"),
  ("veni"),
  ("veniamin"),
  ("venimadhav"),
  ("venjamin"),
  ("verddun"),
  ("verel"),
  ("vern"),
  ("vernay"),
  ("verne"),
  ("verner"),
  ("verney"),
  ("verrall"),
  ("verrell"),
  ("verrill"),
  ("veryl"),
  ("vester"),
  ("veto"),
  ("vibhas"),
  ("vibhat"),
  ("vibhishan"),
  ("vibhu"),
  ("vibishana"),
  ("vic"),
  ("vicente"),
  ("vick"),
  ("vicq"),
  ("victoriano"),
  ("victorino"),
  ("victorio"),
  ("victoro"),
  ("vidal"),
  ("videl"),
  ("vidur"),
  ("vidyacharan"),
  ("vidyadhar"),
  ("vidyaranya"),
  ("vidyasagar"),
  ("viggo"),
  ("vighnesh"),
  ("vignesh"),
  ("vihanga"),
  ("viho"),
  ("vijanyendra"),
  ("vijay"),
  ("vijendra"),
  ("vikas"),
  ("vikesh"),
  ("vikram"),
  ("vikramaditya"),
  ("vikramajit"),
  ("vikramendra"),
  ("vikrant"),
  ("vikranta"),
  ("viktor"),
  ("vilas"),
  ("vilhelm"),
  ("vilok"),
  ("vilokan"),
  ("vimal"),
  ("vinay"),
  ("vinayak"),
  ("vince"),
  ("vincent"),
  ("vincente"),
  ("vincenzio"),
  ("vincenzo"),
  ("vineet"),
  ("vinesh"),
  ("vinod"),
  ("vinson"),
  ("vipan"),
  ("vipin"),
  ("viplab"),
  ("viplav"),
  ("vipponah"),
  ("vipra"),
  ("vipul"),
  ("vir"),
  ("viraj"),
  ("viral"),
  ("virat"),
  ("virendra"),
  ("viresh"),
  ("virgilio"),
  ("virgle"),
  ("virochan"),
  ("visha"),
  ("vishal"),
  ("vishesh"),
  ("vishnu"),
  ("vishon"),
  ("vishram"),
  ("vishva"),
  ("vishvajit"),
  ("vishvakarma"),
  ("vishvatma"),
  ("vishwambhar"),
  ("vishwamitra"),
  ("vishwanath"),
  ("vishwas"),
  ("vishwesh"),
  ("vismay"),
  ("viswanath"),
  ("viswas"),
  ("vitale"),
  ("vitaliy"),
  ("vitenka"),
  ("vithala"),
  ("vito"),
  ("vitthal"),
  ("vittorio"),
  ("vivek"),
  ("vivekananda"),
  ("vladik"),
  ("vladilen"),
  ("vladislav"),
  ("vladmir"),
  ("vladmiri"),
  ("vladya"),
  ("vohkinne"),
  ("voistitoevitz"),
  ("volody"),
  ("von"),
  ("vonn"),
  ("vontell"),
  ("vrajakishore"),
  ("vrajamohan"),
  ("vrajanadan"),
  ("vrajesh"),
  ("vrishin"),
  ("vrishni"),
  ("vritra"),
  ("vyacheslav"),
  ("vyasa"),
  ("vychan"),
  ("vyomesh"),
  ("waail"),
  ("waatiq"),
  ("waddaah"),
  ("wade"),
  ("wadu"),
  ("wahab"),
  ("wahanassatta"),
  ("wahchinksapa"),
  ("wahchintonka"),
  ("wahkan"),
  ("wajdi"),
  ("wajeeb"),
  ("wajeeh"),
  ("wajidali"),
  ("wakiza"),
  ("waldemar"),
  ("waldo"),
  ("waleed"),
  ("walerian"),
  ("waleron"),
  ("wali"),
  ("waljan"),
  ("walker"),
  ("wallace"),
  ("wally"),
  ("walt"),
  ("walton"),
  ("waman"),
  ("wamblee"),
  ("wambleesha"),
  ("wanageeska"),
  ("wanahton"),
  ("wanikiy"),
  ("waotaka"),
  ("wapi"),
  ("waquini"),
  ("ward"),
  ("wardell"),
  ("warner"),
  ("warrane"),
  ("warren"),
  ("warwick"),
  ("waseef"),
  ("waseem"),
  ("wash"),
  ("washi"),
  ("washichi"),
  ("washington"),
  ("watson"),
  ("waverly"),
  ("wayan"),
  ("wayde"),
  ("waylon"),
  ("wayman"),
  ("waymon"),
  ("wayne"),
  ("weayaya"),
  ("webb"),
  ("webster"),
  ("wekesa"),
  ("weldon"),
  ("wellington"),
  ("wematin"),
  ("wemilat"),
  ("wendell"),
  ("werner"),
  ("wes"),
  ("west"),
  ("westin"),
  ("westley"),
  ("weston"),
  ("wevers"),
  ("wheeler"),
  ("wiatt"),
  ("wicasa"),
  ("wicus"),
  ("wienczyslaw"),
  ("wiesŌaw"),
  ("wikvaya"),
  ("wilber"),
  ("wilbert"),
  ("wilbur"),
  ("wilburn"),
  ("wiley"),
  ("wilford"),
  ("wilfred"),
  ("wilfredo"),
  ("wilfrid"),
  ("wilhelm"),
  ("will"),
  ("willam"),
  ("willard"),
  ("willem"),
  ("william"),
  ("williams"),
  ("willian"),
  ("willis"),
  ("willy"),
  ("wilmer"),
  ("wilson"),
  ("wilton"),
  ("wimor"),
  ("wincent"),
  ("windell"),
  ("winfield"),
  ("winford"),
  ("winfred"),
  ("winn"),
  ("winston"),
  ("winton"),
  ("wisaam"),
  ("wit"),
  ("wmffre"),
  ("wŌadysŌaw"),
  ("wohehiv"),
  ("wojciech"),
  ("wokaihwokomas"),
  ("wolfgang"),
  ("wong"),
  ("woodrow"),
  ("woody"),
  ("worth"),
  ("wouter"),
  ("wren"),
  ("wuyi"),
  ("wyatt"),
  ("wyclef"),
  ("wylie"),
  ("wynn"),
  ("wynono"),
  ("xabat"),
  ("xalbador"),
  ("xalvador"),
  ("xander"),
  ("xavier"),
  ("xever"),
  ("ximen"),
  ("ximon"),
  ("ximun"),
  ("xiomar"),
  ("xzavier"),
  ("yaakov"),
  ("yaaseen"),
  ("yaasir"),
  ("yachi"),
  ("yadav"),
  ("yadavendra"),
  ("yadid"),
  ("yadiel"),
  ("yadunandan"),
  ("yadunath"),
  ("yaduraj"),
  ("yaduvir"),
  ("ya'eesh"),
  ("yagil"),
  ("yagna"),
  ("yago"),
  ("yahir"),
  ("yaholo"),
  ("yahto"),
  ("yahya"),
  ("yahyaa"),
  ("yaichiro"),
  ("yair"),
  ("yaj"),
  ("yajat"),
  ("yajirobei"),
  ("yajnadhar"),
  ("yajnarup"),
  ("yajnesh"),
  ("yakamochi"),
  ("yakov"),
  ("yakumo"),
  ("yale"),
  ("yamahil"),
  ("yamajit"),
  ("yamal"),
  ("yaman"),
  ("yamato"),
  ("yamir"),
  ("yancy"),
  ("yandel"),
  ("yanis"),
  ("yanisin"),
  ("yannis"),
  ("yaphet"),
  ("ya'qoob"),
  ("yardane"),
  ("yarema"),
  ("yaremka"),
  ("yaron"),
  ("yas"),
  ("yasaar"),
  ("yash"),
  ("yasha"),
  ("yashas"),
  ("yashodev"),
  ("yashodhan"),
  ("yashodhara"),
  ("yashpal"),
  ("yashwant"),
  ("yasir"),
  ("yasotaro"),
  ("yasuhide"),
  ("yasuhiko"),
  ("yasuhiro"),
  ("yasujiro"),
  ("yasukazu"),
  ("yasunari"),
  ("yasunobu"),
  ("yasuo"),
  ("yasuoka"),
  ("yasushi"),
  ("yasutake"),
  ("yasutoki"),
  ("yasuyuki"),
  ("yataro"),
  ("yatin"),
  ("yatindra"),
  ("yatish"),
  ("yatsuhiro"),
  ("yavin"),
  ("yayin"),
  ("yazeed"),
  ("yedidiah"),
  ("yedidyah"),
  ("yeeshai"),
  ("yefrem"),
  ("yehoash"),
  ("yehonadov"),
  ("yehoshua"),
  ("yehuda"),
  ("yehudah"),
  ("yehudi"),
  ("yeijiro"),
  ("yemane"),
  ("yerachmiel"),
  ("yered"),
  ("yerik"),
  ("yerucham"),
  ("yeshaya"),
  ("yevgeni"),
  ("yiftach"),
  ("yigil"),
  ("yigol"),
  ("yiska"),
  ("yisreal"),
  ("yissachar"),
  ("yitro"),
  ("yitzchak"),
  ("yngve"),
  ("ynilo"),
  ("yodo"),
  ("yoel"),
  ("yogendra"),
  ("yogesh"),
  ("yogi"),
  ("yohachi"),
  ("yohann"),
  ("yoichi"),
  ("yoichibei"),
  ("yonah"),
  ("yoonus"),
  ("yoosuf"),
  ("yoriie"),
  ("yorikane"),
  ("yoringa"),
  ("yoritoki"),
  ("yoritomo"),
  ("yoriyoshi"),
  ("yoriyuki"),
  ("yosai"),
  ("yosef"),
  ("yosefu"),
  ("yoshi"),
  ("yoshiaga"),
  ("yoshiaki"),
  ("yoshida"),
  ("yoshifumi"),
  ("yoshifusa"),
  ("yoshihide"),
  ("yoshihiro"),
  ("yoshihisa"),
  ("yoshihito"),
  ("yoshii"),
  ("yoshiiku"),
  ("yoshikazu"),
  ("yoshiki"),
  ("yoshimasa"),
  ("yoshimatsu"),
  ("yoshimi"),
  ("yoshimitsu"),
  ("yoshimochi"),
  ("yoshimune"),
  ("yoshinaka"),
  ("yoshino"),
  ("yoshinobu"),
  ("yoshinori"),
  ("yoshio"),
  ("yoshisada"),
  ("yoshitaka"),
  ("yoshitake"),
  ("yoshiteru"),
  ("yoshitoki"),
  ("yoshitomo"),
  ("yoshitora"),
  ("yoshitoshi"),
  ("yoshitsune"),
  ("yoshiyuki"),
  ("yoson"),
  ("yosuke"),
  ("yozo"),
  ("ysberin"),
  ("yudhajit"),
  ("yudhisthir"),
  ("yudishtra"),
  ("yugandhar"),
  ("yugoro"),
  ("yuichi"),
  ("yuifum"),
  ("yuji"),
  ("yujiro"),
  ("yuki"),
  ("yukichi"),
  ("yukinaga"),
  ("yukio"),
  ("yuko"),
  ("yul"),
  ("yunosuke"),
  ("yura"),
  ("yurem"),
  ("yurii"),
  ("yurik"),
  ("yurochka"),
  ("yusef"),
  ("yushiro"),
  ("yusri"),
  ("yusuf"),
  ("yusuke"),
  ("yutaka"),
  ("yuval"),
  ("yuvaraj"),
  ("yuvraj"),
  ("yuyutsu"),
  ("yves"),
  ("yvet"),
  ("yvon"),
  ("zaahid"),
  ("zaahir"),
  ("zaaid"),
  ("zaamil"),
  ("zacarias"),
  ("zacchaeus"),
  ("zach"),
  ("zachaios"),
  ("zachariah"),
  ("zacharias"),
  ("zachary"),
  ("zachely"),
  ("zachery"),
  ("zack"),
  ("zackary"),
  ("zackery"),
  ("zadok"),
  ("zaghlool"),
  ("zaid"),
  ("zaidaan"),
  ("zaiden"),
  ("zain"),
  ("zainuddeen"),
  ("zaire"),
  ("zakariyya"),
  ("zakary"),
  ("zaki"),
  ("zalman"),
  ("zameel"),
  ("zamir"),
  ("zander"),
  ("zane"),
  ("zani"),
  ("zarad"),
  ("zared"),
  ("zarek"),
  ("zavad"),
  ("zavier"),
  ("zavion"),
  ("zayden"),
  ("zayne"),
  ("zayyaan"),
  ("zbigniew"),
  ("zchon"),
  ("zdzisŌaw"),
  ("zeb"),
  ("zebadiah"),
  ("zebediah"),
  ("zebulon"),
  ("zebulun"),
  ("zechariah"),
  ("zed"),
  ("zedekiah"),
  ("zeeman"),
  ("zeffross"),
  ("zeke"),
  ("zelig"),
  ("zenko"),
  ("zeno"),
  ("zephan"),
  ("zephaniah"),
  ("zeshaun"),
  ("zeshin"),
  ("zeshon"),
  ("zevulun"),
  ("zhenechka"),
  ("zhorah"),
  ("ziv"),
  ("ziven"),
  ("zivon"),
  ("ziyaad"),
  ("zohar"),
  ("zollie"),
  ("zory"),
  ("zubair"),
  ("zuberi"),
  ("zubin"),
  ("zufar"),
  ("zuhair"),
  ("zuraara"),
  ("zuriel"),
  ("zygmunt"),
  ("zyshonne")
);
CreateDict(
    "name" => "names/MaleFnames.dict",
    "table" => "names/MaleFnames.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'names/country.dict'
CreateTable(
  "names/country.dict__TABLE",
  ("entry" => "Text"),
  ("Afghanistan"),
  ("Albania"),
  ("Algeria"),
  ("Andorra"),
  ("Angola"),
  ("Antigua and Barbuda"),
  ("Argentina"),
  ("Armenia"),
  ("Australia"),
  ("Austria"),
  ("Azerbaijan"),
  ("Bahamas"),
  ("Bahrain"),
  ("Bangladesh"),
  ("Barbados"),
  ("Belarus"),
  ("Belgium"),
  ("Belize"),
  ("Benin"),
  ("Bhutan"),
  ("Bolivia"),
  ("Bosnia and Herzegovina"),
  ("Botswana"),
  ("Brazil"),
  ("Brazzaville"),
  ("Britain"),
  ("Brunei"),
  ("Bulgaria"),
  ("Burkina Faso"),
  ("Burundi"),
  ("Côte d'Ivoire"),
  ("Cambodia"),
  ("Cameroon"),
  ("Canada"),
  ("Cape Verde"),
  ("Central African Republic"),
  ("Chad"),
  ("Chile"),
  ("China"),
  ("Colombia"),
  ("Comoros"),
  ("Congo"),
  ("Costa Rica"),
  ("Croatia"),
  ("Cuba"),
  ("Cyprus"),
  ("Czech Republic"),
  ("Denmark"),
  ("Djibouti"),
  ("Dominica"),
  ("Dominican Republic"),
  ("East Timor"),
  ("Ecuador"),
  ("Egypt"),
  ("El Salvador"),
  ("Equatorial Guinea"),
  ("Eritrea"),
  ("Estonia"),
  ("Ethiopia"),
  ("Fiji"),
  ("Finland"),
  ("France"),
  ("Gabon"),
  ("Gambia"),
  ("Georgia"),
  ("Germany"),
  ("Ghana"),
  ("Greece"),
  ("Grenada"),
  ("Guatemala"),
  ("Guinea"),
  ("Guinea-Bissau"),
  ("Guyana"),
  ("Haiti"),
  ("Honduras"),
  ("Hungary"),
  ("Iceland"),
  ("India"),
  ("Indonesia"),
  ("Iran"),
  ("Iraq"),
  ("Ireland"),
  ("Israel"),
  ("Italy"),
  ("Jamaica"),
  ("Japan"),
  ("Jordan"),
  ("Kazakhstan"),
  ("Kenya"),
  ("Kiribati"),
  ("Korea, North"),
  ("North Korea"),
  ("Korea, South"),
  ("South Korea"),
  ("Kuwait"),
  ("Kyrgyzstan"),
  ("Laos"),
  ("Latvia"),
  ("Lebanon"),
  ("Lesotho"),
  ("Liberia"),
  ("Libya"),
  ("Liechtenstein"),
  ("Lithuania"),
  ("Luxembourg"),
  ("Macedonia"),
  ("Madagascar"),
  ("Malawi"),
  ("Malaysia"),
  ("Maldives"),
  ("Mali"),
  ("Malta"),
  ("Marshall Islands"),
  ("Mauritania"),
  ("Mauritius"),
  ("Mexico"),
  ("Micronesia"),
  ("Moldova"),
  ("Monaco"),
  ("Mongolia"),
  ("Morocco"),
  ("Mozambique"),
  ("Myanmar"),
  ("Namibia"),
  ("Nauru"),
  ("Nepal"),
  ("Netherlands"),
  ("New Zealand"),
  ("Nicaragua"),
  ("Niger"),
  ("Nigeria"),
  ("Norway"),
  ("Oman"),
  ("Pakistan"),
  ("Palau"),
  ("Panama"),
  ("Papua New Guinea"),
  ("Paraguay"),
  ("Peru"),
  ("Philippines"),
  ("Poland"),
  ("Portugal"),
  ("Puerto Rico"),
  ("Qatar"),
  ("Romania"),
  ("Russia"),
  ("Rwanda"),
  ("Saint Kitts and Nevis"),
  ("Saint Lucia"),
  ("Saint Vincent and The Grenadines"),
  ("Samoa"),
  ("San Marino"),
  ("Sao Tome and Principe"),
  ("Saudi Arabia"),
  ("Senegal"),
  ("Serbia and Montenegro"),
  ("Seychelles"),
  ("Sierra Leone"),
  ("Singapore"),
  ("Slovakia"),
  ("Slovenia"),
  ("Solomon Islands"),
  ("Somalia"),
  ("South Africa"),
  ("Spain"),
  ("Sri Lanka"),
  ("Sudan"),
  ("Suriname"),
  ("Swaziland"),
  ("Sweden"),
  ("Switzerland"),
  ("Syria"),
  ("Taiwan"),
  ("Tajikistan"),
  ("Tanzania"),
  ("Thailand"),
  ("Timor Timur"),
  ("Togo"),
  ("Tonga"),
  ("Trinidad and Tobago"),
  ("Tunisia"),
  ("Turkey"),
  ("Turkmenistan"),
  ("Tuvalu"),
  ("U.S."),
  ("U.S.A."),
  ("Uganda"),
  ("Ukraine"),
  ("United Arab Emirates"),
  ("United Kingdom"),
  ("United States"),
  ("United States of America"),
  ("Uruguay"),
  ("Uzbekistan"),
  ("Vanuatu"),
  ("Vatican City"),
  ("Venezuela"),
  ("Vietnam"),
  ("Virgin Islands"),
  ("Western Sahara"),
  ("Yemen"),
  ("Zambia"),
  ("Zimbabwe")
);
CreateDict(
    "name" => "names/country.dict",
    "table" => "names/country.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'names/firstName.dict'
CreateTable(
  "names/firstName.dict__TABLE",
  ("entry" => "Text"),
  ("Maria Del Carmen")
);
CreateDict(
    "name" => "names/firstName.dict",
    "table" => "names/firstName.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'names/lastName.dict'
CreateTable(
  "names/lastName.dict__TABLE",
  ("entry" => "Text"),
  ("De Albuquerque"),
  ("Da S Albuquerque"),
  ("Alva Santander")
);
CreateDict(
    "name" => "names/lastName.dict",
    "table" => "names/lastName.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'names/nationality.dict'
CreateTable(
  "names/nationality.dict__TABLE",
  ("entry" => "Text"),
  ("Afghan"),
  ("Albanian"),
  ("Algerian"),
  ("Andorran"),
  ("Angolan"),
  ("Antiguans"),
  ("Barbudans"),
  ("Argentine"),
  ("Argentinean"),
  ("Armenian"),
  ("Australian"),
  ("Ozzie"),
  ("Aussie"),
  ("Austrian"),
  ("Azerbaijani"),
  ("Bahamian"),
  ("Bahraini"),
  ("Bangladeshi"),
  ("Barbadian"),
  ("Bajuns"),
  ("Belarusian"),
  ("Belgian"),
  ("Belizean"),
  ("Beninese"),
  ("Bhutanese"),
  ("Bolivian"),
  ("Bosnian"),
  ("Herzegovinian"),
  ("Motswana"),
  ("Batswana"),
  ("Brazilian"),
  ("Bruneian"),
  ("Bulgarian"),
  ("Burkinabe"),
  ("Burundian"),
  ("Cambodian"),
  ("Cameroonian"),
  ("Canadian"),
  ("Cape Verdian"),
  ("Cape Verdean"),
  ("Central\tAfrican"),
  ("Chadian"),
  ("Chilean"),
  ("Chinese"),
  ("Colombian"),
  ("Comoran"),
  ("Congolese"),
  ("Congolese"),
  ("Costa Rican"),
  ("Ivorian"),
  ("Croat"),
  ("Croatian"),
  ("Cuban"),
  ("Cypriot"),
  ("Czech"),
  ("Dane"),
  ("Danish"),
  ("Djibouti"),
  ("Dominican"),
  ("East Timorese"),
  ("Ecuadorean"),
  ("Egyptian"),
  ("Salvadoran"),
  ("Equatorial Guinean"),
  ("Equatoguinean"),
  ("Eritrean"),
  ("Estonian"),
  ("Ethiopian"),
  ("Fijian"),
  ("Finn"),
  ("Finnish"),
  ("French"),
  ("Gabonese"),
  ("Gambian"),
  ("Georgian"),
  ("German"),
  ("Ghanaian"),
  ("Greek"),
  ("Grenadian"),
  ("Grenadan"),
  ("Guatemalan"),
  ("Guinean"),
  ("Guinea-Bissauan"),
  ("Guyanese"),
  ("Haitian"),
  ("Honduran"),
  ("Hungarian"),
  ("Icelander"),
  ("Indian"),
  ("Indonesian"),
  ("Iranian"),
  ("Iraqi"),
  ("Irish"),
  ("Israeli"),
  ("Italian"),
  ("Jamaican"),
  ("Japanese"),
  ("Jordanian"),
  ("Kazakhstani"),
  ("Kenyan"),
  ("I-Kiribati"),
  ("North Korean"),
  ("South Korean"),
  ("Kuwaiti"),
  ("Kyrgyz"),
  ("Kirghiz"),
  ("Lao"),
  ("Laotian"),
  ("Latvian"),
  ("Lebanese"),
  ("Mosotho"),
  ("Basotho"),
  ("Liberian"),
  ("Libyan"),
  ("Liechtensteiner"),
  ("Lithuanian"),
  ("Luxembourger"),
  ("Macedonian"),
  ("Malagasy"),
  ("Malawian"),
  ("Malaysian"),
  ("Maldivan"),
  ("Malian"),
  ("Maltese"),
  ("Marshallese"),
  ("Mauritanian"),
  ("Mauritian"),
  ("Mexican"),
  ("Micronesian"),
  ("Moldovan"),
  ("Monegasque"),
  ("Monacan"),
  ("Mongolian"),
  ("Moroccan"),
  ("Mozambican"),
  ("Burmese"),
  ("Myanmarese"),
  ("Namibian"),
  ("Nauruan"),
  ("Nepalese"),
  ("Netherlander"),
  ("Hollander"),
  ("Dutch"),
  ("New\tZealander"),
  ("Kiwi"),
  ("Nicaraguan"),
  ("Nigerien"),
  ("Nigerian"),
  ("Norwegian"),
  ("Omani"),
  ("Pakistani"),
  ("Palauan"),
  ("Panamanian"),
  ("Papua New Guinean"),
  ("Paraguayan"),
  ("Peruvian"),
  ("Filipino"),
  ("Philippine"),
  ("Pole"),
  ("Polish"),
  ("Portuguese"),
  ("Qatari"),
  ("Romanian"),
  ("Russian"),
  ("Rwandan"),
  ("Kittian"),
  ("Nevisian"),
  ("Saint Lucian"),
  ("Samoan"),
  ("Sammarinese"),
  ("San\tMarinese"),
  ("Sao\tTomean"),
  ("Saudi"),
  ("Saudi Arabian"),
  ("Senegalese"),
  ("Serbian"),
  ("Montenegrin"),
  ("Seychellois"),
  ("Sierra Leonean"),
  ("Singaporean"),
  ("Slovak"),
  ("Slovakian"),
  ("Slovene"),
  ("Slovenian"),
  ("Solomon\tIslander"),
  ("Somali"),
  ("South African"),
  ("Spaniard"),
  ("Spanish"),
  ("Sri\tLankan"),
  ("Sudanese"),
  ("Surinamer"),
  ("Swazi"),
  ("Swede"),
  ("Swedish"),
  ("Swiss"),
  ("Syrian"),
  ("Taiwanese"),
  ("Tajik"),
  ("Tadzhik"),
  ("Tanzanian"),
  ("Thai"),
  ("Togolese"),
  ("Tongan"),
  ("Trinidadian"),
  ("Tobagonian"),
  ("Tunisian"),
  ("Turk"),
  ("Turkish"),
  ("Turkmen"),
  ("Turkmens"),
  ("Tuvaluan"),
  ("Ugandan"),
  ("Ukrainian"),
  ("Emirian"),
  ("Briton"),
  ("British"),
  ("Scot"),
  ("Northern Irish"),
  ("American"),
  ("Uruguayan"),
  ("Uzbek"),
  ("Uzbekistani"),
  ("Ni-Vanuatu"),
  ("Venezuelan"),
  ("Vietnamese"),
  ("Yemeni"),
  ("Yemenite"),
  ("Zambian"),
  ("Zimbabwean")
);
CreateDict(
    "name" => "names/nationality.dict",
    "table" => "names/nationality.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'names/nationality_plural.dict'
CreateTable(
  "names/nationality_plural.dict__TABLE",
  ("entry" => "Text"),
  ("Afghans"),
  ("Afrikaners"),
  ("Albanians"),
  ("Algerians"),
  ("Americans"),
  ("Andorrans"),
  ("Angolans"),
  ("Argentines"),
  ("Armenians"),
  ("Aromanians"),
  ("Arubans"),
  ("Australians"),
  ("Indigenous Australians"),
  ("Austrians"),
  ("Azeris"),
  ("Bahamians"),
  ("Bahrainis"),
  ("Balochi"),
  ("Bangladeshis"),
  ("Barbadians"),
  ("Belarusians"),
  ("Belgians"),
  ("Belizeans"),
  ("Boers"),
  ("Bosnians"),
  ("Brazilians"),
  ("Bretons"),
  ("British"),
  ("British Virgin Islanders"),
  ("Bulgarians"),
  ("Burkinabès"),
  ("Burundians"),
  ("Cambodians"),
  ("Cameroonians"),
  ("Canadians"),
  ("Catalans"),
  ("Cape Verdeans"),
  ("Chadians"),
  ("Chileans"),
  ("Chinese"),
  ("Colombians"),
  ("Comorians"),
  ("Congolese"),
  ("Croatians"),
  ("Cubans"),
  ("Cypriots"),
  ("Turkish Cypriots"),
  ("Czechs"),
  ("Danes"),
  ("Dominicans"),
  ("Dutch"),
  ("East Timorese"),
  ("Ecuadorians"),
  ("Egyptians"),
  ("Emiratis"),
  ("English"),
  ("Eritreans"),
  ("Estonians"),
  ("Ethiopians"),
  ("Finns"),
  ("Finnish Swedish"),
  ("Fijians"),
  ("Filipinos"),
  ("French citizens"),
  ("Georgians"),
  ("Germans"),
  ("Baltic Germans"),
  ("Ghanaians"),
  ("Gibraltar"),
  ("Greeks"),
  ("Grenadians"),
  ("Guatemalans"),
  ("Guianese"),
  ("Guineans"),
  ("Guinea-Bissau nationals"),
  ("Guyanese"),
  ("Haitians"),
  ("Hondurans"),
  ("Hongkongers"),
  ("Hungarians"),
  ("Icelanders"),
  ("Indians"),
  ("Indians by state"),
  ("Non-resident Indians"),
  ("Indonesians"),
  ("Iranians"),
  ("Iraqis"),
  ("Irish"),
  ("Israelis"),
  ("Italians"),
  ("Ivoirians"),
  ("Jamaicans"),
  ("Japanese"),
  ("Jordanians"),
  ("Kazakhs"),
  ("Kenyans"),
  ("Koreans"),
  ("Kosovo Albanians"),
  ("Kuwaitis"),
  ("Lao"),
  ("Latvians"),
  ("Lebanese"),
  ("Liberians"),
  ("Libyans"),
  ("Liechtensteiners"),
  ("Lithuanians"),
  ("Luxembourgers"),
  ("Macedonians"),
  ("Malawians"),
  ("Malaysians"),
  ("Maldivians"),
  ("Malians"),
  ("Maltese"),
  ("Manx"),
  ("Mauritians"),
  ("Mexicans"),
  ("Moldovans"),
  ("Moroccans"),
  ("Montenegrins"),
  ("Namibians"),
  ("Nepalese"),
  ("New Zealanders"),
  ("Nicaraguans"),
  ("Nigeriens"),
  ("Nigerians"),
  ("Norwegians"),
  ("Pakistanis"),
  ("Palauans"),
  ("Palestinians"),
  ("Panamanians"),
  ("Papua New Guineans"),
  ("Paraguayans"),
  ("Peruvians"),
  ("Poles"),
  ("Portuguese"),
  ("Punjabi"),
  ("Puerto Ricans"),
  ("Quebecers"),
  ("Réunionnais"),
  ("Romanians"),
  ("Russians"),
  ("Baltic Russians"),
  ("Rwandans"),
  ("Salvadorans"),
  ("São Tomé and Príncipe"),
  ("Saudis"),
  ("Scots"),
  ("Senegalese"),
  ("Serbs"),
  ("Sicilians"),
  ("Sierra Leoneans"),
  ("Singaporeans"),
  ("Slovaks"),
  ("Slovenes"),
  ("Somalis"),
  ("South Africans"),
  ("Spanish"),
  ("Sri Lankans"),
  ("Sudanese"),
  ("Swedes"),
  ("Swiss"),
  ("Syrians"),
  ("Taiwanese"),
  ("Tanzanians"),
  ("Thais"),
  ("Tibetans"),
  ("Tobagonians"),
  ("Trinidadians"),
  ("Turks"),
  ("Tuvaluans"),
  ("Ugandans"),
  ("Ukrainians"),
  ("Uruguayans"),
  ("Venezuelans"),
  ("Vietnamese"),
  ("Welsh"),
  ("Yemenis"),
  ("Zambians"),
  ("Zimbabweans"),
  ("African Americans"),
  ("Afrikaners"),
  ("Andalusians"),
  ("Assyrians"),
  ("Basques"),
  ("Bengalis"),
  ("Berbers"),
  ("Boers"),
  ("Cajuns"),
  ("Catalans"),
  ("Chuvash"),
  ("Corsicans"),
  ("Hutus"),
  ("Igbo"),
  ("Inuit"),
  ("Javanese"),
  ("Jews"),
  ("Karen"),
  ("Kurdish"),
  ("Kurds"),
  ("Macedonians"),
  ("Malays"),
  ("Māori"),
  ("Native Americans"),
  ("Roma"),
  ("Samis"),
  ("Sardinians"),
  ("Silesians"),
  ("Syriacs"),
  ("Tamils"),
  ("Tatars"),
  ("Tutsis"),
  ("Zulus")
);
CreateDict(
    "name" => "names/nationality_plural.dict",
    "table" => "names/nationality_plural.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'names/timeZone.dict'
CreateTable(
  "names/timeZone.dict__TABLE",
  ("entry" => "Text"),
  ("a.m."),
  ("p.m."),
  ("a.m"),
  ("p.m"),
  ("am"),
  ("pm"),
  ("GMT"),
  ("gmt"),
  ("G.M.T"),
  ("g.m.t"),
  ("G.M.T."),
  ("g.m.t.")
);
CreateDict(
    "name" => "names/timeZone.dict",
    "table" => "names/timeZone.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'names/wkday.dict'
CreateTable(
  "names/wkday.dict__TABLE",
  ("entry" => "Text"),
  ("monday"),
  ("mon"),
  ("tuesday"),
  ("tue"),
  ("tues"),
  ("wednesday"),
  ("wed"),
  ("thursday"),
  ("thu"),
  ("thur"),
  ("thurs"),
  ("friday"),
  ("fri"),
  ("saturday"),
  ("sat"),
  ("sunday"),
  ("sun")
);
CreateDict(
    "name" => "names/wkday.dict",
    "table" => "names/wkday.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'negate.dict'
CreateTable(
  "negate.dict__TABLE",
  ("entry" => "Text"),
  ("aint"),
  ("ain't"),
  ("arent"),
  ("aren't"),
  ("cannot"),
  ("cant"),
  ("can't"),
  ("couldnt"),
  ("couldn't"),
  ("didnt"),
  ("didn't"),
  ("doesnt"),
  ("doesn't"),
  ("dont"),
  ("don't"),
  ("hadnt"),
  ("hadn't"),
  ("hasnt"),
  ("hasn't"),
  ("havent"),
  ("haven't"),
  ("instead of"),
  ("isnt"),
  ("isn't"),
  ("mustnt"),
  ("must'nt"),
  ("mustn't"),
  ("neednt"),
  ("need'nt"),
  ("needn't"),
  ("negat*"),
  ("neither"),
  ("never"),
  ("no"),
  ("nobod*"),
  ("none"),
  ("nope"),
  ("nor"),
  ("not"),
  ("nt"),
  ("nothing"),
  ("nowhere"),
  ("oughtnt"),
  ("ought'nt"),
  ("oughtn't"),
  ("shant"),
  ("shan't"),
  ("shouldnt"),
  ("should'nt"),
  ("shouldn't"),
  ("uhuh"),
  ("wasnt"),
  ("wasn't"),
  ("weren't"),
  ("without"),
  ("wont"),
  ("won't"),
  ("wouldnt"),
  ("wouldn't")
);
CreateDict(
    "name" => "negate.dict",
    "table" => "negate.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'prepositions.dict'
CreateTable(
  "prepositions.dict__TABLE",
  ("entry" => "Text"),
  ("aboard"),
  ("about"),
  ("above"),
  ("across"),
  ("after"),
  ("against"),
  ("along"),
  ("amid"),
  ("among"),
  ("anti"),
  ("around"),
  ("as"),
  ("at"),
  ("before"),
  ("behind"),
  ("below"),
  ("beneath"),
  ("beside"),
  ("besides"),
  ("between"),
  ("beyond"),
  ("but"),
  ("by"),
  ("concerning"),
  ("considering"),
  ("despite"),
  ("down"),
  ("during"),
  ("except"),
  ("excepting"),
  ("excluding"),
  ("following"),
  ("for"),
  ("from"),
  ("in"),
  ("inside"),
  ("into"),
  ("like"),
  ("minus"),
  ("near"),
  ("of"),
  ("off"),
  ("on"),
  ("onto"),
  ("opposite"),
  ("outside"),
  ("over"),
  ("past"),
  ("per"),
  ("plus"),
  ("regarding"),
  ("round"),
  ("save"),
  ("since"),
  ("than"),
  ("through"),
  ("to"),
  ("toward"),
  ("towards"),
  ("under"),
  ("underneath"),
  ("unlike"),
  ("until"),
  ("up"),
  ("upon"),
  ("versus"),
  ("via"),
  ("with"),
  ("within"),
  ("without")
);
CreateDict(
    "name" => "prepositions.dict",
    "table" => "prepositions.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'properAdjectives.dict'
CreateTable(
  "properAdjectives.dict__TABLE",
  ("entry" => "Text"),
  ("American"),
  ("Asian"),
  ("Australian"),
  ("Canadian"),
  ("Catholic"),
  ("Chinese"),
  ("European"),
  ("French"),
  ("Indian"),
  ("Italian"),
  ("Japanese"),
  ("Jewish"),
  ("Latino"),
  ("Lutheran"),
  ("Mexican"),
  ("Russian")
);
CreateDict(
    "name" => "properAdjectives.dict",
    "table" => "properAdjectives.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/CanYouQuestion.dict'
CreateTable(
  "purchases/CanYouQuestion.dict__TABLE",
  ("entry" => "Text"),
  ("can you"),
  ("can u"),
  ("can anyone"),
  ("can any1"),
  ("can he"),
  ("could you"),
  ("could u"),
  ("could anyone"),
  ("could any1"),
  ("could anybody"),
  ("you have"),
  ("do you"),
  ("do u"),
  ("anyone has"),
  ("any1 has")
);
CreateDict(
    "name" => "purchases/CanYouQuestion.dict",
    "table" => "purchases/CanYouQuestion.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/IPron.dict'
CreateTable(
  "purchases/IPron.dict__TABLE",
  ("entry" => "Text"),
  ("some1"),
  ("any1"),
  ("any0ne"),
  ("s0meb0dy"),
  ("anybody"),
  ("anyone"),
  ("anything"),
  ("everybody"),
  ("everyone"),
  ("everything"),
  ("nobody"),
  ("other"),
  ("others"),
  ("somebody"),
  ("some one"),
  ("someone"),
  ("something"),
  ("somewhere"),
  ("that"),
  ("thatd"),
  ("that'd"),
  ("thatll"),
  ("that'll"),
  ("thats"),
  ("that's"),
  ("those"),
  ("what"),
  ("whatever"),
  ("whats"),
  ("what's"),
  ("which"),
  ("whichever"),
  ("who"),
  ("whod"),
  ("who'd"),
  ("wholl"),
  ("who'll"),
  ("whom"),
  ("whose"),
  ("him"),
  ("her"),
  ("them"),
  ("he'd"),
  ("hed"),
  ("she'd"),
  ("shed"),
  ("shes"),
  ("hes"),
  ("people"),
  ("us"),
  ("friend"),
  ("husband"),
  ("wife"),
  ("hubbie"),
  ("son"),
  ("daughter"),
  ("daddy"),
  ("lad"),
  ("bf"),
  ("BOY"),
  ("BROTHER"),
  ("DAD"),
  ("DUDE"),
  ("FATHER"),
  ("GRANDDAD"),
  ("GRANDPA"),
  ("GRANDSON"),
  ("HUSBAND"),
  ("man"),
  ("men"),
  ("NEPHEW"),
  ("SON"),
  ("STEPFAT"),
  ("UNCLE"),
  ("gentleman"),
  ("bloke"),
  ("chap"),
  ("male"),
  ("gent"),
  ("fella"),
  ("dude"),
  ("Mr."),
  ("beau"),
  ("boyfriend"),
  ("papa"),
  ("sir"),
  ("bridegroom"),
  ("groom"),
  ("hubby"),
  ("fraternity"),
  ("prince"),
  ("seamstress"),
  ("damsel"),
  ("lady"),
  ("AUNT"),
  ("DAUGHTER"),
  ("GRANDDAU"),
  ("GRANDM"),
  ("MOM"),
  ("MOMMA"),
  ("MOMMY"),
  ("MOMS"),
  ("MOTHER"),
  ("MUM"),
  ("MUM'S"),
  ("MUMMY"),
  ("MUMS"),
  ("NIECE"),
  ("SISTER"),
  ("STEPMOT"),
  ("WIFE"),
  ("WIVE"),
  ("Ms."),
  ("Mrs."),
  ("aunty"),
  ("auntie"),
  ("gentlewoman"),
  ("girl"),
  ("gal"),
  ("gf"),
  ("girlfriend"),
  ("grandmother"),
  ("matron"),
  ("bride"),
  ("woman"),
  ("women"),
  ("diva"),
  ("sum1")
);
CreateDict(
    "name" => "purchases/IPron.dict",
    "table" => "purchases/IPron.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/ProblematicPhrases.dict'
CreateTable(
  "purchases/ProblematicPhrases.dict__TABLE",
  ("entry" => "Text"),
  ("take"),
  ("going home"),
  ("going to bed"),
  ("off to bed"),
  ("going to home"),
  ("off to home"),
  ("get home"),
  ("get into"),
  ("get rid of"),
  ("get on"),
  ("get off"),
  ("order of"),
  ("put on"),
  ("get in"),
  ("get out"),
  ("get into"),
  ("get onto"),
  ("get outta"),
  ("get to"),
  ("got in"),
  ("got out"),
  ("got on"),
  ("got off"),
  ("got into"),
  ("got outta"),
  ("get home"),
  ("got home"),
  ("get to bed"),
  ("go to bed"),
  ("need to watch"),
  ("want to watch"),
  ("going to watch"),
  ("gotto watch"),
  ("got to watch")
);
CreateDict(
    "name" => "purchases/ProblematicPhrases.dict",
    "table" => "purchases/ProblematicPhrases.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/SarcasmsInIntent.dict'
CreateTable(
  "purchases/SarcasmsInIntent.dict__TABLE",
  ("entry" => "Text"),
  ("SERIOUSLY"),
  ("Who needs"),
  ("is like"),
  ("wishing"),
  ("for real"),
  ("looking like"),
  ("why would"),
  ("i think"),
  ("lol"),
  ("find that"),
  ("i wish"),
  ("i swear"),
  ("like damn"),
  ("why in the hell would I"),
  ("why in the hell"),
  ("commercial"),
  ("makes me want to"),
  ("may be I should"),
  ("i think i need to"),
  ("i think i should"),
  ("butt in gear"),
  ("butt in action"),
  ("i guess"),
  ("already")
);
CreateDict(
    "name" => "purchases/SarcasmsInIntent.dict",
    "table" => "purchases/SarcasmsInIntent.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/StandAloneIntents.dict'
CreateTable(
  "purchases/StandAloneIntents.dict__TABLE",
  ("entry" => "Text"),
  ("looking for"),
  ("lookin for"),
  ("planning"),
  ("want"),
  ("need"),
  ("have to have"),
  ("in the market for"),
  ("hunt"),
  ("afford"),
  ("what kind of"),
  ("interested in"),
  ("decided on"),
  ("decided about"),
  ("deciding on"),
  ("deciding about"),
  ("looking at"),
  ("lookin at"),
  ("thinking of"),
  ("thinkin of"),
  ("thinkin about"),
  ("thinking about")
);
CreateDict(
    "name" => "purchases/StandAloneIntents.dict",
    "table" => "purchases/StandAloneIntents.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/StandAloneTransaction.dict'
CreateTable(
  "purchases/StandAloneTransaction.dict__TABLE",
  ("entry" => "Text"),
  ("buying"),
  ("buy"),
  ("find"),
  ("shop for"),
  ("transact"),
  ("order"),
  ("purchase")
);
CreateDict(
    "name" => "purchases/StandAloneTransaction.dict",
    "table" => "purchases/StandAloneTransaction.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/article.dict'
CreateTable(
  "purchases/article.dict__TABLE",
  ("entry" => "Text"),
  ("a"),
  ("an"),
  ("the"),
  ("da"),
  ("this"),
  ("dis"),
  ("that"),
  ("dat"),
  ("these"),
  ("dese"),
  ("those"),
  ("any"),
  ("some")
);
CreateDict(
    "name" => "purchases/article.dict",
    "table" => "purchases/article.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/brands.dict'
CreateTable(
  "purchases/brands.dict__TABLE",
  ("entry" => "Text"),
  ("Crate & Barrel"),
  ("1&1"),
  ("1000Bulbs.com"),
  ("101inks.com"),
  ("121TIME"),
  ("123 Refills"),
  ("123Inkjets.com"),
  ("123Print"),
  ("1800 Baskets.com"),
  ("1-800 CONTACTS"),
  ("1800Flowers.com"),
  ("1-800-GET-LENS"),
  ("1800Lighting.com"),
  ("1-800-PetMeds"),
  ("1-800-Postcards"),
  ("1st Wishes"),
  ("1StopCamera.com"),
  ("1StopLighting"),
  ("1UnderwearStore"),
  ("21st Century Insurance"),
  ("21st Century Toys"),
  ("24 Hour Fitness"),
  ("2Insure4Less"),
  ("2xist"),
  ("39dollarglasses.com"),
  ("3balls Golf"),
  ("3Com"),
  ("3M"),
  ("4 All Memory"),
  ("4 Seasons Wine"),
  ("4 Wheel Drive Hardware"),
  ("4 Wheel Parts"),
  ("48Hourprint.com"),
  ("49ers Shop"),
  ("4checks.com"),
  ("4inkjets"),
  ("4Luggage.com"),
  ("5.11 Tactical"),
  ("5.11 Tactical Series"),
  ("555 Soul"),
  ("6ave.com"),
  ("6pm.com"),
  ("7 Diamonds"),
  ("7 For All Mankind"),
  ("77Kids"),
  ("80sPurple.com"),
  ("8x8"),
  ("911HealthShop.com"),
  ("A Brief Affair"),
  ("A Matter of Fax"),
  ("A Pea in the Pod"),
  ("A. Byer"),
  ("A. Marinelli"),
  ("A2BTV.com"),
  ("Ab Circle Pro"),
  ("Ab Rocket"),
  ("Abacus 24-7"),
  ("AbeBooks"),
  ("Abe's of Maine"),
  ("ABetterStay.com"),
  ("AboveGroundSwimmingPools.com"),
  ("Abt Electronics"),
  ("Abu Garcia"),
  ("AC Delco"),
  ("AC Furniture"),
  ("AC Lens"),
  ("Acacia"),
  ("Academic Superstore"),
  ("AccentFurnitureDirect.com"),
  ("Access Lighting"),
  ("AccessoryGeeks.com"),
  ("AccStation"),
  ("Accu-Chek"),
  ("AccuQuote"),
  ("ACDSee"),
  ("Ace"),
  ("Ace Hardware"),
  ("AceMagnetics"),
  ("Acer"),
  ("ACherryOnTop.com"),
  ("Acme"),
  ("Acorn"),
  ("Acorn Online"),
  ("Acronis"),
  ("Activa"),
  ("Active and Able"),
  ("Active Ride Shop"),
  ("Active Videos"),
  ("ActiveForever"),
  ("Activision"),
  ("ActivityTableShop.com"),
  ("Adagio Teas"),
  ("Adams Golf"),
  ("ADC"),
  ("Adesso"),
  ("Adidas"),
  ("Adio"),
  ("Adirondackchairs.com"),
  ("AdirondackFurnitureDirect.com"),
  ("Adirondacks-By-Mercantilia"),
  ("Admiral"),
  ("Adobe"),
  ("Adorama"),
  ("Adorn Brides"),
  ("Adrianna Papell"),
  ("Adrienne Vittadini"),
  ("Advance Auto Parts"),
  ("Adventure Harley-Davidson"),
  ("AEM"),
  ("Aerie"),
  ("AeroBed"),
  ("AeroGrow"),
  ("Aeropostale"),
  ("Aerosoles"),
  ("Affliction"),
  ("AffordableFutons.com"),
  ("Afterglow Cosmetics"),
  ("AFX"),
  ("AG Jeans"),
  ("AGA"),
  ("AGiftPersonalized.com"),
  ("Ahava"),
  ("Air & Water"),
  ("Air France"),
  ("Air King"),
  ("Airaid"),
  ("Airborne"),
  ("Aircast"),
  ("Airfare.com"),
  ("Air-O-Swiss"),
  ("Airport Parking Reservations"),
  ("Air-Purifier.com"),
  ("Airwalk"),
  ("AJ Madison"),
  ("Akademiks"),
  ("Alain Mikli"),
  ("Alaska Airlines"),
  ("Alba Botanica"),
  ("ALCO"),
  ("Aldo"),
  ("Alessi"),
  ("Aleve"),
  ("Alex Evenings"),
  ("Alexander Doll Co."),
  ("Alexander McQueen"),
  ("Alfa Romeo"),
  ("Alfani"),
  ("Alford and Hoff"),
  ("Alfred Dunner"),
  ("Alibris"),
  ("All About Dance"),
  ("All Beds Inc."),
  ("All Clad"),
  ("All Modern Lighting"),
  ("All Star"),
  ("All Things Jeep"),
  ("All4Cellular"),
  ("AllAboardToys.com"),
  ("AllBakersRacks.com"),
  ("AllBarstools.com"),
  ("All-Battery.com"),
  ("AllBookshelves.com"),
  ("AllBraidedRugs.com"),
  ("AllBriefcases.com"),
  ("AllChildren'sFurniture.com"),
  ("AllCoffeeTables.com"),
  ("AllCurioCabinets.com"),
  ("AllDataDIY.com"),
  ("Allen Edmonds"),
  ("Allen Schwartz"),
  ("AllEspressoMachines.com"),
  ("AllGreenhouses.com"),
  ("Allied Brass"),
  ("All-Ink.com"),
  ("AllKitchenCarts.com"),
  ("AllLeatherBarstools.com"),
  ("AllMetalBarstools.com"),
  ("AllModern.com"),
  ("AllModernBaby.com"),
  ("AllModernFurniture.com"),
  ("AllModernPet.com"),
  ("AllOutdoorBenches.com"),
  ("AllOutdoorChaiseLounges.com"),
  ("AllOutdoorDining.com"),
  ("Alloy"),
  ("AllPetFurniture.com"),
  ("AllPlatformBeds.com"),
  ("AllPotRacks.com"),
  ("AllRTAFurniture.com"),
  ("AllSandBoxes.com"),
  ("Allstate Insurance"),
  ("Allstate Motor Club"),
  ("AllTVStands.com"),
  ("AllWorkBenches.com"),
  ("Ally Bank"),
  ("Almay"),
  ("Alno"),
  ("Aloft Hotels"),
  ("Alpha Omega Publications"),
  ("Alpina"),
  ("Alpine"),
  ("ALPINESTARS"),
  ("Alsons"),
  ("Altec Lansing"),
  ("Alterna"),
  ("Alternative Apparel"),
  ("Altmans"),
  ("Altra"),
  ("Altrec.com Outdoors"),
  ("Always Fresh"),
  ("Amana"),
  ("Amazing Clubs"),
  ("Amazing Socks"),
  ("Amazon.com"),
  ("Amber Alert GPS"),
  ("Amcor"),
  ("AMD"),
  ("Ameribag"),
  ("AmericaDirect"),
  ("American Apparel"),
  ("American Bible Society"),
  ("American Blinds, Wallpaper & More"),
  ("American Crew"),
  ("American Diabetes Wholesale"),
  ("American Eagle Outfitters"),
  ("American Express"),
  ("American Express Gift Cards"),
  ("American Greetings"),
  ("American Living"),
  ("American Musical Supply"),
  ("American Olean"),
  ("American Passport"),
  ("American Products Company"),
  ("American Racing"),
  ("American Standard"),
  ("American Tea Room"),
  ("AmericaRx.com"),
  ("Ameriglide"),
  ("AmeriMark"),
  ("Amerock"),
  ("Ames"),
  ("Anaconda Sports"),
  ("Anchor Hocking"),
  ("And 1"),
  ("Anderson"),
  ("Anderson Jewelry"),
  ("Anderson's School Spirit"),
  ("Andis"),
  ("Andrew Christian"),
  ("Andrew Marc"),
  ("Andy's Auto Sport"),
  ("Angara.com"),
  ("Angie's List"),
  ("Animal Den"),
  ("Anjolee"),
  ("Ann Taylor LOFT"),
  ("Anne at home"),
  ("Anne Klein"),
  ("Ann's Bridal Bargains"),
  ("Anolon"),
  ("Anonymous Venice"),
  ("Anthony Robbins"),
  ("Antigua"),
  ("Anvil"),
  ("APC (American Power Conversion)"),
  ("Apepazza"),
  ("Aperion Audio"),
  ("ApexBattery"),
  ("APEXi"),
  ("Apilco"),
  ("Apothica"),
  ("Appealing Wedding Bands"),
  ("Applause"),
  ("Apple"),
  ("Apple Bottoms"),
  ("Apple Store"),
  ("Apple Vacations"),
  ("Apples of Gold Jewelry"),
  ("Appleseed's"),
  ("Applian Technologies"),
  ("Aqua Brass"),
  ("Aqua Globes"),
  ("Aqua Lung"),
  ("Aquadis"),
  ("Aqua-Pure"),
  ("AquariumsDirect.com"),
  ("Aquatalia by Marvin K."),
  ("Ara Shoes"),
  ("Arai"),
  ("Aramark"),
  ("Aramis"),
  ("Arche"),
  ("Archives.com"),
  ("Archos"),
  ("ArcSoft"),
  ("Arcteryx"),
  ("Arden B"),
  ("Aria"),
  ("Ariat"),
  ("Ariel"),
  ("Ariens"),
  ("Ariston"),
  ("Arizona"),
  ("Armoires Inc."),
  ("ArmoiresCentral.com"),
  ("Armstrong"),
  ("Arnette"),
  ("Aroma"),
  ("Arrow"),
  ("Arroyo Craftsman"),
  ("Art Hammer Studios"),
  ("Artistic Direct"),
  ("Artistic Sensations"),
  ("Arturo Chiang"),
  ("ASA"),
  ("Ascari"),
  ("Ascend Collection Hotels"),
  ("Ashford"),
  ("Ashley Furniture"),
  ("Ashro.com"),
  ("Ashton-Drake"),
  ("Ashworth"),
  ("Asics"),
  ("Asko"),
  ("Asolo"),
  ("Aspinal of London"),
  ("Aston Martin"),
  ("Astone Fitness"),
  ("Astro Pneumatic"),
  ("Asus"),
  ("At A Glance"),
  ("AT&T"),
  ("AT&T Wireless"),
  ("At-A-Glance"),
  ("ATD American"),
  ("ATG Stores"),
  ("Athena Alexander"),
  ("Athleta"),
  ("ATI"),
  ("Atkins"),
  ("Atlantic"),
  ("Atlas"),
  ("Audemars Piguet"),
  ("Audi"),
  ("Audible"),
  ("Audioquest"),
  ("Audio-Technica"),
  ("Audio-Video-Furniture.com"),
  ("Audiovox"),
  ("Auditionsshoes.com"),
  ("August Silk"),
  ("Auralog"),
  ("Auslogics"),
  ("Austad's Golf"),
  ("Austin Reed"),
  ("Auto Meter"),
  ("Auto Parts Warehouse"),
  ("AutoAnything.com"),
  ("AutoBarn.com"),
  ("Autodesk"),
  ("Autogeek.net"),
  ("AutohausAZ"),
  ("Automotive Concepts"),
  ("Autoparts123.com"),
  ("AutoPartsGIANT.com"),
  ("AutoSport Catalog"),
  ("Autozone"),
  ("Autumn Cashmere"),
  ("Avalanche Publishing"),
  ("Avanquest Software"),
  ("Avanti"),
  ("Avast!"),
  ("AVCarts.com"),
  ("Aveda"),
  ("Aveeno"),
  ("Avent"),
  ("Avenue"),
  ("AVG"),
  ("Avia"),
  ("Avirex"),
  ("Avis Rent A Car"),
  ("Avon"),
  ("Awesome Auger"),
  ("AXE"),
  ("Axiom"),
  ("B&H Photo & Electronics"),
  ("B&M"),
  ("B&T Direct"),
  ("B. MAKOWSKY"),
  ("B2C Jewels"),
  ("Babies Online"),
  ("Babies R Us"),
  ("Babolat"),
  ("Baby Catalog"),
  ("Baby Phat"),
  ("Baby Signs"),
  ("Baby Star"),
  ("Baby Trend"),
  ("Baby Universe"),
  ("BabyAge.com"),
  ("Babybasket.com"),
  ("BabyBecause"),
  ("BabyBrowns.com"),
  ("BabyCarSeats.com"),
  ("BabyCribsPlus.com"),
  ("BabyEarth"),
  ("Babylegs"),
  ("BaByliss"),
  ("Baby's First Book Club"),
  ("babytobee.com"),
  ("bacario"),
  ("Bacco Bucci"),
  ("Bach"),
  ("Bachelorette.com"),
  ("Bachmann"),
  ("Back in the Saddle"),
  ("Back to Basics"),
  ("Back To Basics Toys"),
  ("Backcountry Edge"),
  ("Backcountry.com"),
  ("BackgammonPlus.com"),
  ("Bacn.com"),
  ("BaconFreak.com"),
  ("Baden"),
  ("Badger Basket"),
  ("Badgley Mischka"),
  ("BadmintonSource.com"),
  ("Baffin"),
  ("Baggallini"),
  ("Baghaus"),
  ("Bagsbuy.com"),
  ("BajaBob.com"),
  ("Bake Me A Wish"),
  ("Baker Racks Store"),
  ("BakersRacks.com"),
  ("BakersRacksCollection.com"),
  ("Baldwin Hardware"),
  ("Balenciaga"),
  ("Bali"),
  ("Bally"),
  ("Bally Total Fitness"),
  ("Bally's Atlantic City"),
  ("Bally's Las Vegas"),
  ("Bamboo and Tikis"),
  ("Banana Republic"),
  ("Bancorp Bank"),
  ("Bandolino"),
  ("Bangalla"),
  ("Bank of America Credit Cards"),
  ("BanquetTables.com"),
  ("Bar Tables Inc."),
  ("BarbecueGrillsandMore.com"),
  ("Barbie"),
  ("Barclay"),
  ("Barclay's Wine"),
  ("Bare Escentuals"),
  ("Bare Necessities"),
  ("Barefoot Tess"),
  ("Barelythere"),
  ("Bargain Catalog Outlet"),
  ("Bargain Outfitters"),
  ("BargainStation.com"),
  ("Barnes and Noble"),
  ("Barnes&Noble"),
  ("Barnett"),
  ("Barneys New York"),
  ("Barrons"),
  ("Barse"),
  ("Barstools Co."),
  ("BarStools.com"),
  ("Baseball Rampage"),
  ("Baseball Savings"),
  ("Basic Essentials"),
  ("BasketballGoals.com"),
  ("Baskin Robbins"),
  ("BASS"),
  ("Bass Pro Shops"),
  ("Bates"),
  ("Bath & Body Works"),
  ("Bathroom Furniture Direct"),
  ("BathroomLightingSource.com"),
  ("BathroomVanities.com"),
  ("Batteries.com"),
  ("BatteriesOvernight.com"),
  ("BatteriesPlus.com"),
  ("Battery Heads"),
  ("Bauer"),
  ("Bauerfeind"),
  ("Baume & Mercier"),
  ("Bayer"),
  ("Baymont Inn and Suites"),
  ("BBC"),
  ("BBO Poker Tables"),
  ("BBQGuys.com"),
  ("BBQs Inc."),
  ("BBS"),
  ("BCBG"),
  ("BCBGeneration"),
  ("BCBGirls"),
  ("Be Beautiful"),
  ("BE Haircare"),
  ("Beachbody"),
  ("BeachCamera.com"),
  ("BeachChairs.com"),
  ("Beaches"),
  ("Bealls"),
  ("BeanBagChairsOnline.com"),
  ("BeanBags.com"),
  ("BeanBagSelect.com"),
  ("Bearpaw"),
  ("Beau Rivage"),
  ("Beau Ties Ltd."),
  ("Beauty Bridge"),
  ("Beauty.com"),
  ("BeautyChoice.com"),
  ("BeautyNeeds"),
  ("BeautyTrends"),
  ("bebe"),
  ("bebe.com"),
  ("Becker Surfboards"),
  ("Bed Bath & Beyond"),
  ("BedandBreakfast.com"),
  ("BedBathStore.com"),
  ("Bedding Style"),
  ("BeddingandMore.com"),
  ("BeddingSets.com"),
  ("Bedford Fair Lifestyles"),
  ("Bedlounge"),
  ("BedroomFurniture.com"),
  ("BedroomFurnitureMart.com"),
  ("BedroomFurnitureNmore.com"),
  ("Bedrooms.com"),
  ("BedroomSets.com"),
  ("BedsideTables.com"),
  ("Behringer"),
  ("Belk"),
  ("Belkin"),
  ("Bell"),
  ("Bella Vita"),
  ("Bellacor"),
  ("Bellagio"),
  ("Bellini"),
  ("Bello"),
  ("BeltOutlet.com"),
  ("Belwith Keeler"),
  ("Bemis"),
  ("Ben Franklin Stores"),
  ("Ben Sherman"),
  ("Benches.com"),
  ("Benefit Cosmetics"),
  ("BenQ"),
  ("Bentley"),
  ("Beretta"),
  ("Bergdorf Goodman"),
  ("Bergner's"),
  ("Berkley"),
  ("Berkline"),
  ("Bernardaud"),
  ("Berrett-Koehler"),
  ("Bertazzoni"),
  ("Besa Lighting"),
  ("Best Bully Sticks"),
  ("Best Buy"),
  ("Best Deal Magazines"),
  ("Best Western"),
  ("Bestar"),
  ("BestBathStore.com"),
  ("BestBuyEyeglasses.com"),
  ("BestofVegas.com"),
  ("Betsey Johnson"),
  ("Better World Books"),
  ("BetterCables.com"),
  ("Betty Crocker"),
  ("Betty's Attic"),
  ("Beverly Feldman"),
  ("Beverly Hills Polo"),
  ("Beyond Bikes"),
  ("Beyond the Rack"),
  ("Beyond.com"),
  ("BF Goodrich"),
  ("Bialetti"),
  ("Biblio"),
  ("BIC Warehouse"),
  ("Bidz"),
  ("Big Agnes"),
  ("Big Buddha"),
  ("Big Kmart"),
  ("Big Lots"),
  ("Big Toe Soccer"),
  ("Big Top Cupcake"),
  ("BigAl'sOnline.com"),
  ("BIGDOGS.com"),
  ("Bigelow Chemists"),
  ("BigFitness.net"),
  ("BiggerBooks.com"),
  ("BiggerBras.com"),
  ("bigg's"),
  ("Bigmansland"),
  ("Bike.com"),
  ("BikeBandit.com"),
  ("Bikkembergs"),
  ("Bill Bam's Collectibles"),
  ("Bill Blass"),
  ("Billabong"),
  ("Billion Dollar Babes"),
  ("Bilstein"),
  ("Bi-Mart"),
  ("Binoculars.com"),
  ("BinocularsWorldwide.com"),
  ("Bionaire"),
  ("Biotherm"),
  ("Bird Toy Outlet"),
  ("BirdBaths.com"),
  ("BirdCages.com"),
  ("Birkenstock"),
  ("Birthday Express"),
  ("Birthday in a Box"),
  ("Bisou"),
  ("Bissell"),
  ("Bistro MD"),
  ("BistroSets.com"),
  ("BitDefender"),
  ("BJ's Warehouse"),
  ("BJ's Wholesale Club"),
  ("Black & Decker"),
  ("Black Box"),
  ("Black Diamond"),
  ("Black Expressions Book Club"),
  ("Black Rivet"),
  ("Blackwater Tees"),
  ("Blair.com"),
  ("Blanco"),
  ("Blaupunkt"),
  ("BlendTec"),
  ("Blinds Express"),
  ("BlindSaver.com"),
  ("Blindsgalore"),
  ("Bliss"),
  ("BlissLiving"),
  ("Blizzard Entertainment"),
  ("Bloch"),
  ("Blockbuster"),
  ("Blomberg"),
  ("Blondo"),
  ("Bloom"),
  ("bloomingbulb.com"),
  ("Bloomingdale's"),
  ("Blue Bee"),
  ("Blue Dolphin"),
  ("Blue Man Group"),
  ("Blue Mountain"),
  ("Blue Nile"),
  ("Blue Nile Canada"),
  ("Blue Penguin"),
  ("Bluefly"),
  ("BlueHost"),
  ("Blumarine"),
  ("Blurb.com"),
  ("BMW"),
  ("BoatersWorld.com"),
  ("BoatingSavings.com"),
  ("Bob and Ron's World Wide Stereo"),
  ("Bob Timberlake"),
  ("Bobbi Brown"),
  ("Bobby Jones"),
  ("Boca Java"),
  ("BocceBallSets.com"),
  ("Boden"),
  ("Bodum"),
  ("Body Candy"),
  ("Body Glove"),
  ("Body Solid"),
  ("Bodybuilding.com"),
  ("Bogner"),
  ("Bolle"),
  ("Bombay"),
  ("BombeChestsandMore.com"),
  ("Bonnie Jean"),
  ("Bonsai Boy of New York"),
  ("Bon-Ton"),
  ("BookByte.com"),
  ("Bookcases Inc."),
  ("BookcasesGalore.com"),
  ("BookCloseouts.com"),
  ("BookingBuddy"),
  ("Bookit"),
  ("Book-of-the-Month Club"),
  ("BookRenter.com"),
  ("BOOKSAMILLION.COM"),
  ("Booksfree.com"),
  ("BookSwim"),
  ("Boot Barn"),
  ("Borbet"),
  ("Borders.com"),
  ("Borghese"),
  ("Borla"),
  ("Bosch"),
  ("Boscov's"),
  ("Boscov's Department Stores"),
  ("Bose"),
  ("Boss"),
  ("BOSS Audio Systems"),
  ("Boston Acoustics"),
  ("Boston Globe"),
  ("Boston Store"),
  ("Bostonian"),
  ("Botanic Choice"),
  ("Bottega Veneta"),
  ("Bottle Tops"),
  ("BounceSuperstore.com"),
  ("Bourjois"),
  ("Boutique to You"),
  ("Bowflex"),
  ("Bowflex Home Gyms"),
  ("Bowling Delights"),
  ("BOWMAN"),
  ("Braceshop.com"),
  ("Bradford Exchange Checks"),
  ("Brass Accents"),
  ("Brasstech"),
  ("Bratz"),
  ("Braun"),
  ("Breadman"),
  ("Brecks"),
  ("Breil"),
  ("Breitling"),
  ("Brembo"),
  ("Breville"),
  ("Breyer"),
  ("Brian Tracy International"),
  ("BrickHouse Security"),
  ("Bridal Party Tees"),
  ("Bridgestone"),
  ("BriefcasesandMore.com"),
  ("Briggs and Stratton"),
  ("BrilliantStore.com"),
  ("Brinkmann"),
  ("Bristol"),
  ("Brita"),
  ("Britax"),
  ("Brizo"),
  ("Broan"),
  ("Brocade"),
  ("Broderbund"),
  ("Broil King"),
  ("Bronx"),
  ("Brooke"),
  ("Brooks"),
  ("Brooks Brothers"),
  ("Brookstone"),
  ("Brown Shoe Company"),
  ("Brownells"),
  ("Browning"),
  ("Bruce"),
  ("Bruno Magli"),
  ("Brunswick"),
  ("BrylaneHome"),
  ("BSI"),
  ("BSN"),
  ("Buckle"),
  ("Budget Conferencing"),
  ("Budget Prints"),
  ("Budget Rent A Car"),
  ("Budget Truck Rental"),
  ("Budk.com"),
  ("Buffalo"),
  ("Bugaboo"),
  ("Build A Bear"),
  ("Build.com"),
  ("BuildDirect"),
  ("Builders Edge"),
  ("BuildMyMove.com"),
  ("BulbAmerica.com"),
  ("Bulgari"),
  ("Bulk Office Supplies"),
  ("Bull Outdoor Products"),
  ("Bulova"),
  ("Bumble and bumble"),
  ("Bumpits"),
  ("Bunches of Books"),
  ("Bunk Beds Inc."),
  ("Bunn"),
  ("BunnyBerry"),
  ("Burberry"),
  ("Burke Decor"),
  ("Burton"),
  ("Burts Bees"),
  ("Bush Furniture"),
  ("BushFurnitureCentral.com"),
  ("BushFurnitureCollection.com"),
  ("Bushnell"),
  ("Busted Tees"),
  ("Butler G-U-M"),
  ("Butterfly"),
  ("ButterflyPhoto.com"),
  ("Buy.com"),
  ("BuyCoolShirts.com"),
  ("BuyCostumes.com"),
  ("Buydig"),
  ("BuyEntertainmentCenters.com"),
  ("Buying Bar Stools"),
  ("BuyOnlineNow"),
  ("Buyz.com"),
  ("Bvlgari"),
  ("C & C California"),
  ("Cabelas"),
  ("Cabela's"),
  ("CableOrganizer.com"),
  ("Cables To Go"),
  ("Cadillac"),
  ("Caesars Palace"),
  ("Caesars Palace Atlantic City"),
  ("CafePress"),
  ("Cal Lighting"),
  ("Cal Trend"),
  ("Calendars.com"),
  ("CalFinder.com"),
  ("California Beach Resorts"),
  ("Callaway"),
  ("Callaway Golf"),
  ("Callaway Golf Preowned"),
  ("CallFire"),
  ("Calpak"),
  ("Calphalon"),
  ("Calumet"),
  ("Calvin Klein"),
  ("Calvin Klein Jeans"),
  ("Calvin Klein Underwear"),
  ("Cambio"),
  ("Cambria Cove"),
  ("Cambria Suites Hotels"),
  ("Cambridge Soundworks"),
  ("Camo"),
  ("Campagna"),
  ("Campbell Hausfeld"),
  ("Campbells"),
  ("Camper"),
  ("Camping World"),
  ("Camping.com"),
  ("Campmor"),
  ("Campus Book Rentals"),
  ("Canali"),
  ("Candelabras.com"),
  ("Candle Bay"),
  ("Candlewood Suites"),
  ("Candy"),
  ("Cannon"),
  ("Canon"),
  ("Canon.com"),
  ("CanopyBed.com"),
  ("CanopyCenter.com"),
  ("Canvas on Demand"),
  ("CanvasPress"),
  ("Cap Barbell"),
  ("Caparros"),
  ("Capcom"),
  ("Capel"),
  ("Capezio"),
  ("Capital One"),
  ("Capital One Bank"),
  ("Carbonite"),
  ("Cardinal Industries"),
  ("CardScan"),
  ("Cardstore"),
  ("Care.com"),
  ("Carhartt"),
  ("CARiD"),
  ("Carlisle"),
  ("Carlo Robelli"),
  ("Carlos by Carlos Santana"),
  ("CarlosShoes.com"),
  ("CARLTON"),
  ("Carmel Car and Limousine Service"),
  ("Carmen Marc Valvo"),
  ("Carnal Dammage"),
  ("Carnival Cruise Lines"),
  ("Carol Wior"),
  ("Carolee"),
  ("Carolina Herrera"),
  ("Carolina Panthers"),
  ("Carolina Rustica"),
  ("CarolsDaughter.com"),
  ("CarParts.com"),
  ("CarportsUSA.com"),
  ("CarRentals.com"),
  ("Carrera"),
  ("Carrot Ink"),
  ("Carson Dellosa"),
  ("Carson Pirie Scott"),
  ("Carson-Dellosa"),
  ("Carter Fuel Delivery Products"),
  ("Carters"),
  ("Carter's"),
  ("Cartier"),
  ("Cartridge Zoom"),
  ("CartsAndWagons.com"),
  ("Casablanca"),
  ("Casadei"),
  ("Cascio Interstate Music"),
  ("CaseCrown"),
  ("CaseLogic.com"),
  ("Case-Mate"),
  ("CasesandMore.com"),
  ("Caseworks International"),
  ("Cashmere Boutique"),
  ("Casio"),
  ("Casual Living"),
  ("Casual Male XL"),
  ("Catalog Favorites"),
  ("Caterham"),
  ("Caterpillar"),
  ("Caterpillar.com"),
  ("Catherines"),
  ("CatsPlay.com"),
  ("CB2"),
  ("CBS Sports Store"),
  ("CBS Store"),
  ("CCBerries.com"),
  ("CCM"),
  ("CCS"),
  ("CedarChests.com"),
  ("CedarStore.com"),
  ("CEIVA"),
  ("Celazome Skin"),
  ("CelebrateExpress.com"),
  ("Celestron"),
  ("Celine"),
  ("Cell Hut"),
  ("Cell Phone Shop"),
  ("Cellars Wine Club"),
  ("CellPhoneAccents.com"),
  ("CellPhoneShop"),
  ("Cellular-Blowout.com"),
  ("Cellularfactory.com"),
  ("CellularOutfitter.com"),
  ("CencoPhysics.com"),
  ("CengageBrain.com"),
  ("CenterCaps.net"),
  ("Central Machinery"),
  ("Centrum"),
  ("Century Novelty"),
  ("Cerruti"),
  ("Chaco"),
  ("Chadwicks"),
  ("Chadwick's"),
  ("ChaiseLounges.com"),
  ("ChaiseLoungesandMore.com"),
  ("Champion"),
  ("ChampionsOnDisplay.com"),
  ("Champs Sports"),
  ("ChandelierSource.com"),
  ("Chanel"),
  ("ChangingTableStore.com"),
  ("Chantelle"),
  ("Char-Broil"),
  ("Charisma Brands"),
  ("Charles David"),
  ("Charles Tyrwhitt"),
  ("Charlotte Russe"),
  ("Chase"),
  ("Chase Durer"),
  ("Cheap Monday"),
  ("CheapCaribbean.com"),
  ("CheapOair.com"),
  ("CheapOStay"),
  ("CheapTickets"),
  ("CheckOutStore"),
  ("Checks In The Mail"),
  ("Checks Unlimited"),
  ("Chef Giant"),
  ("Chefs Catalog"),
  ("Chegg.com"),
  ("Chemistry.com"),
  ("Cherokee"),
  ("Cherry Moon Farms"),
  ("CherryBrook"),
  ("Cheryl & Co."),
  ("ChessHouse.com"),
  ("ChessSets.com"),
  ("Chevrolet"),
  ("Chia Pet"),
  ("Chiasso"),
  ("Chic Star"),
  ("Chicago Cutlery"),
  ("Chicago Electric"),
  ("Chicago Pneumatic"),
  ("Chicco"),
  ("chickdowntown.com"),
  ("Chicken Soup for the Soul"),
  ("ChickenCoopSource.com"),
  ("Chico's"),
  ("Chie Mihara"),
  ("Chief"),
  ("ChiefMountsCentral.com"),
  ("Children's Book-of-the-Month Club"),
  ("Children's Chairs"),
  ("Children's Place"),
  ("ChildrensDesks.com"),
  ("ChildrensTablesAndChairs.com"),
  ("Chinese Laundry"),
  ("Chippewa"),
  ("Chloe"),
  ("Chocolate.com"),
  ("ChocolateFountains.com"),
  ("Choice Hotels"),
  ("Chooka"),
  ("Chopard"),
  ("Chris Madden"),
  ("ChristeningShop.com"),
  ("Christian Audigier"),
  ("Christian Bernard"),
  ("Christian Dior"),
  ("Christian Louboutin"),
  ("Christmas Lights, Etc."),
  ("ChristmasLights.com"),
  ("ChristmasTreesGalore.com"),
  ("Christofle"),
  ("Christopher & Banks"),
  ("Chrome Bags"),
  ("Chronicle Books"),
  ("Chrysler"),
  ("Church & Dwight"),
  ("CIBA Vision"),
  ("Cifial"),
  ("Cindy Crawford"),
  ("CinemaNow"),
  ("Circa Shoes"),
  ("Circo"),
  ("Circuit City"),
  ("Circulon"),
  ("Circus Circus Las Vegas"),
  ("Circus Circus Reno"),
  ("Cisco"),
  ("Cisco Home Products"),
  ("Cisco Systems"),
  ("Citi"),
  ("CitiFinancial"),
  ("Citizen"),
  ("Citizens of Humanity"),
  ("Citrix"),
  ("Citroen"),
  ("City Pass"),
  ("CitySights NY"),
  ("CJ Banks"),
  ("Clairol"),
  ("Clarins"),
  ("Clarion"),
  ("Clarion Hotels"),
  ("Clarisonic"),
  ("Clark Color"),
  ("Clarks"),
  ("Classic Brass"),
  ("ClassroomFurnitureDirect.com"),
  ("ClearPlay"),
  ("Cleveland"),
  ("CleverEve.com"),
  ("Clickinks.com"),
  ("ClickN KIDS"),
  ("ClickOn Health"),
  ("ClickTale"),
  ("Clinique"),
  ("Cliphanger"),
  ("ClockStyle.com"),
  ("ClosetOrganizerSource"),
  ("ClothDiapers.com"),
  ("ClotheslineSource.com"),
  ("ClothingWarehouse.com"),
  ("Club Med"),
  ("ClubChairs.com"),
  ("clubfurniture.com"),
  ("Clubs of America"),
  ("ClubsGalore.com"),
  ("Coach"),
  ("Coach USA"),
  ("CoastalContacts.com"),
  ("Coaster Fine Furniture"),
  ("CoatRacks.com"),
  ("CoatRacksandMore.com"),
  ("Cobra"),
  ("Coby"),
  ("Coca-Cola Store"),
  ("Coffee Beanery"),
  ("Coffee Tables Store"),
  ("Coffee.org"),
  ("CoffeeForLess.com"),
  ("CoffeeMakers.com"),
  ("Coffees of Hawaii"),
  ("CoffeeTables.com"),
  ("CoffeeTablesandEndTables.com"),
  ("CoffeeTablesGalore.com"),
  ("Coins of America"),
  ("Coldwater Creek"),
  ("Cole Haan"),
  ("Coleman"),
  ("Colgate Palmolive"),
  ("Colgate-Palmolive"),
  ("Collectables Direct"),
  ("CollectiblesToday"),
  ("Collections Etc."),
  ("Collectors Choice Music"),
  ("CollegeBookRenter.com"),
  ("CollegeJersey.com"),
  ("Colonial Bronze"),
  ("Colonial Candle"),
  ("Colonial Mills"),
  ("Colorful Images"),
  ("Colosseum Athletics"),
  ("Columbia House"),
  ("Columbia Sportswear"),
  ("Combat Optical"),
  ("Combi"),
  ("Comfort Inn"),
  ("Comfort Suites"),
  ("Comfort-Aire"),
  ("ComfortShoeShop.com"),
  ("Comme des Garcons"),
  ("Compact Appliance"),
  ("Compaq"),
  ("CompleteTax"),
  ("CompostBins.com"),
  ("Comp-U-Plus"),
  ("CompUSA"),
  ("Computer Associates"),
  ("ComputerArmoires.com"),
  ("ComputerDesks.com"),
  ("ComputerDesksnMore.com"),
  ("Compuvest"),
  ("Conair"),
  ("Concepts"),
  ("Concord"),
  ("Congoleum"),
  ("Constant Contact"),
  ("Construction Equipment Plus"),
  ("Constructive Playthings"),
  ("Consumers Marine Electonics"),
  ("Contacts America"),
  ("Container Store"),
  ("ContemporaryRugs.com"),
  ("ContentWatch"),
  ("Continental"),
  ("Contour Living"),
  ("Converse"),
  ("ConvertibleCribs.com"),
  ("Coogi"),
  ("Cooking.com"),
  ("Cookware.com"),
  ("Cooler Master"),
  ("Cool-jams Wicking Sleepwear"),
  ("Cooper"),
  ("Cooper Vision"),
  ("Coppertone"),
  ("Core Products"),
  ("Corel"),
  ("Corelle"),
  ("Corner Stork"),
  ("CornholePlus.com"),
  ("Corningware"),
  ("Corolle Dolls"),
  ("Corsa"),
  ("Corso Como"),
  ("Corsos Cookies"),
  ("Corum"),
  ("Corvette"),
  ("Cosabella"),
  ("Cosco"),
  ("Cosme-De.com"),
  ("Cosmetic America"),
  ("Costa Del Mar"),
  ("Costco Wholesale"),
  ("Costume Craze"),
  ("Costume Express"),
  ("Costume SuperCenter"),
  ("CostumeDiscounters.com"),
  ("Coty"),
  ("Country Door"),
  ("Country Life"),
  ("Country Store Catalog"),
  ("CourseSmart"),
  ("CoutureCandy"),
  ("Cover Girl"),
  ("Covercraft"),
  ("Coveroo"),
  ("Coward Shoes"),
  ("CowBoom.com"),
  ("CPO Black and Decker"),
  ("CPO Bosch"),
  ("CPO Bosch Water Heater"),
  ("CPO Bostitch"),
  ("CPO Campbell Hausfeld"),
  ("CPO Commerce"),
  ("CPO Delta Truck Box"),
  ("CPO Delta Woodworking"),
  ("CPO DeWalt"),
  ("CPO Dremel"),
  ("CPO Electrolux"),
  ("CPO Eureka"),
  ("CPO Fein"),
  ("CPO Festool"),
  ("CPO Homelite"),
  ("CPO Hunter Fan"),
  ("CPO Jet"),
  ("CPO Karcher"),
  ("CPO Makita"),
  ("CPO Metabo"),
  ("CPO Milwaukee"),
  ("CPO Panasonic"),
  ("CPO Porter Cable"),
  ("CPO Powermatic"),
  ("CPO Rheem"),
  ("CPO Ridgid"),
  ("CPO Ryobi"),
  ("CPO Senco"),
  ("CPO Skil"),
  ("Crabtree & Evelyn"),
  ("CradlesAndBassinets.com"),
  ("Crafter's Choice"),
  ("Craftmade"),
  ("Craftsman"),
  ("Crayola"),
  ("CrazyforBargains"),
  ("Creative"),
  ("Creative Labs"),
  ("Creative Recreation"),
  ("CreditReport.com"),
  ("CreditReportsandScores.com"),
  ("Crest"),
  ("Cribs.com"),
  ("Cricket Communications"),
  ("Crimson"),
  ("Critic's Choice Video"),
  ("CRL"),
  ("Crock-Pot"),
  ("Crocs"),
  ("Croquet.com"),
  ("Croscill"),
  ("Crosley"),
  ("Crosman"),
  ("Cross"),
  ("Crossings"),
  ("Croton"),
  ("Crown"),
  ("Crown Awards"),
  ("Crown Jewelers"),
  ("Crowne Plaza"),
  ("Crow's Nest Trading"),
  ("Crucial Technology"),
  ("Cruiser Customizing"),
  ("Crutchfield"),
  ("CSGrills.com"),
  ("CSN Armoires"),
  ("CSN Bookcases"),
  ("CSN Ceiling Fans.com"),
  ("CSN Futons"),
  ("CSN Leather"),
  ("CSN Lighting"),
  ("CSN Welders"),
  ("CSNBaby.com"),
  ("CSNbenches.com"),
  ("CSNBunkBeds.com"),
  ("CSNCables.com"),
  ("CSNChairs.com"),
  ("CSNClocks.com"),
  ("CSNDaycareFurniture.com"),
  ("CSNFireplaces.com"),
  ("CSNLibraryFurniture.com"),
  ("CSNMassageChairs.com"),
  ("CSNMattresses.com"),
  ("CSNMirrors.com"),
  ("CSNOffice.com"),
  ("CSNOfficeFurniture.com"),
  ("CSNRugs.com"),
  ("CSNSheds.com"),
  ("CSNSofas.com"),
  ("CSNSupply.com"),
  ("CSNWorldGlobes.com"),
  ("CTA"),
  ("Cuddl Duds"),
  ("Cuisinart"),
  ("Culligan"),
  ("Cultural Elements"),
  ("Curio Cabinets Inc."),
  ("CurlFriends"),
  ("Current Labels"),
  ("CURRENT/ELLIOTT"),
  ("Curt Mfg"),
  ("CushionsGalore.com"),
  ("Cushman's"),
  ("Customized Girl"),
  ("CutesyGirl"),
  ("Cutter & Buck"),
  ("Cutter and Buck"),
  ("Cutters Gloves"),
  ("Cyber Acoustics"),
  ("Cyber Power"),
  ("CyberCuchina.com"),
  ("CyberLink"),
  ("Cymax"),
  ("CymaxBaby.com"),
  ("Cynthia Rowley"),
  ("Dacor"),
  ("Daewoo"),
  ("Daihatsu"),
  ("DailyCheckout.com"),
  ("Daisy Rock"),
  ("Daiwa"),
  ("Dakine"),
  ("Da-Lite"),
  ("Dallas Cowboys"),
  ("Daltile"),
  ("Dalyn"),
  ("Dan Post"),
  ("Dan River"),
  ("Dana Buchman"),
  ("Danby"),
  ("Dancing Deer Baking Co."),
  ("Daniel Green"),
  ("Danner"),
  ("Dan's Chocolates"),
  ("Danskin"),
  ("Danskin Women's Apparel"),
  ("Dansko"),
  ("Danze"),
  ("Dartboards.com"),
  ("Databazaar"),
  ("Date.com"),
  ("David Tate"),
  ("Davidoff"),
  ("Davids Bridal"),
  ("David's Cookies"),
  ("DavisMicro.com"),
  ("Daybeds Inc."),
  ("Daybeds.com"),
  ("Days Inn"),
  ("DaySpring"),
  ("Day-Timer"),
  ("DAZ 3D"),
  ("DBA"),
  ("DBuys"),
  ("DC"),
  ("DC Shoes"),
  ("DCS"),
  ("Dean"),
  ("DEB Shops"),
  ("Decleor"),
  ("Decorative Product Source"),
  ("DecoratorFountains.com"),
  ("Deep Surplus"),
  ("DeepDiscount.com"),
  ("Definitive Technology"),
  ("dELiA*s"),
  ("Dell"),
  ("Dell Financial Services"),
  ("Dell Small Business"),
  ("Dellamoda"),
  ("DeLonghi"),
  ("Delta"),
  ("Deltana"),
  ("DeMarini"),
  ("Demonia"),
  ("Deni"),
  ("Denise Austin"),
  ("Denon"),
  ("Dentalplans.com"),
  ("Dentek"),
  ("Department56corner.com"),
  ("DepartmentofGoods.com"),
  ("Dereon"),
  ("Dermalogica"),
  ("Dermstore"),
  ("Design Toscano"),
  ("Design Within Reach"),
  ("DesignAShirt.com"),
  ("Designer Linens Outlet"),
  ("Designer Style Shop"),
  ("Designers Imports"),
  ("DesignerShoes.com"),
  ("DeskLamps.com"),
  ("Desks Co."),
  ("DeskSetShop.com"),
  ("Despair"),
  ("Destination Lighting"),
  ("Destination Maternity"),
  ("DetailsArt"),
  ("DeVilbiss"),
  ("Devilish Disguise"),
  ("DeWalt"),
  ("Dexclusive"),
  ("Dexter"),
  ("Dezario"),
  ("DHC"),
  ("Diablo"),
  ("Diadora"),
  ("Dial"),
  ("Dial4Limo"),
  ("Diamond Harmony"),
  ("Diamond Nexus Labs"),
  ("Diamond.com"),
  ("Diamonds International"),
  ("DiamondWave"),
  ("Diane Von Furstenberg"),
  ("DiaperBagBoutique.com"),
  ("DiaperBags.com"),
  ("Diapers.com"),
  ("Diba"),
  ("Dick Blick Art"),
  ("Dickies"),
  ("Dickies Girl"),
  ("Dick's Sporting Goods"),
  ("Diesel"),
  ("Diet-to-Go"),
  ("Dilbert Store"),
  ("Dillard's"),
  ("Dimples Baby"),
  ("Dinette.com"),
  ("Dining Tables Store"),
  ("DiningChairs.com"),
  ("DiningRoomsDirect.com"),
  ("DiningSets.com"),
  ("DiningTables.com"),
  ("DinnerPlates.com"),
  ("DinoDirect"),
  ("Direct2Drive"),
  ("Directly Home"),
  ("DirectorsChairs.com"),
  ("DIRECTV"),
  ("Dirt Devil"),
  ("Discount Contact Lenses"),
  ("Discount Dance Supply"),
  ("Discount Golf World"),
  ("Discount Office Items"),
  ("Discount School Supply"),
  ("Discount Tire"),
  ("Discount Tire Direct"),
  ("Discount Watch Store"),
  ("Discounted Newspapers"),
  ("DiscountMags.com"),
  ("Discover"),
  ("Discovery Channel Store"),
  ("Disguise"),
  ("Disk Doctors"),
  ("Disney"),
  ("Disney Book Clubs"),
  ("Disney Movie Club"),
  ("Disney Store"),
  ("DisplayCases.com"),
  ("DivaDiamonds.net"),
  ("Diviene.com"),
  ("DivX"),
  ("DJPremium"),
  ("DKNY"),
  ("D-Link"),
  ("Dockers"),
  ("DocOrtho.com"),
  ("Doctors Best"),
  ("Dodge"),
  ("Dog Beds Store"),
  ("Dog.com"),
  ("Dogeared.com"),
  ("Dogfunk"),
  ("DogHouses.com"),
  ("DogKennels.com"),
  ("DogToys.com"),
  ("Doheny's Water Warehouse"),
  ("Dolce & Gabbana"),
  ("Dolce Vita"),
  ("Dollar Rent A Car"),
  ("Dollar Tree"),
  ("DollarDays.com"),
  ("DollHouse.com"),
  ("DollhousesGalore.com"),
  ("Domestications"),
  ("Donald J Pliner"),
  ("Donna Karan"),
  ("Donna Morgan"),
  ("Donna Ricco"),
  ("Donruss"),
  ("Dooney & Bourke"),
  ("DoorHardwarePlus.com"),
  ("DoormatSource.com"),
  ("Dorman"),
  ("Dot5 Hosting"),
  ("Doubleday"),
  ("Doubleday Large Print"),
  ("Douglas Toys"),
  ("Douwe Egberts"),
  ("Dove"),
  ("DPmotion"),
  ("DR Power Equipment"),
  ("Dr. Leonard's"),
  ("Dr. Martens"),
  ("Dr. Scholls"),
  ("Dr. Scholl's Shoes"),
  ("Dr. Seuss Book Club"),
  ("Drafting Tables Inc."),
  ("DraftingTables.com"),
  ("Draper"),
  ("DreamGear"),
  ("dreamgirl"),
  ("Dreamie"),
  ("Dreamline"),
  ("Dremel"),
  ("Dressers Inc."),
  ("Dressers.com"),
  ("DressGoddess.com"),
  ("Drive Time"),
  ("Driving Comfort"),
  ("DrJays.com"),
  ("drop.io"),
  ("Drs. Foster & Smith"),
  ("drugstore.com"),
  ("Drugstore.com Canada"),
  ("Dsquared2"),
  ("DSW"),
  ("Dual"),
  ("Dualit"),
  ("Ducane"),
  ("Duck Head"),
  ("Duckwall-ALCO Retail Stores"),
  ("Duckwall's"),
  ("Duncraft"),
  ("Dunham's Sports"),
  ("Dunlop"),
  ("DuracellDirect.com"),
  ("Durango"),
  ("Duravit"),
  ("Durex"),
  ("Dutch Gardens"),
  ("DVD Planet"),
  ("DVS Shoe Company"),
  ("Dynomax"),
  ("Dyscern"),
  ("Dyson"),
  ("E*Trade"),
  ("E.L.F. Cosmetics"),
  ("EA Games"),
  ("Eagle"),
  ("Eagle Claw"),
  ("Earphone Solutions"),
  ("Earth"),
  ("EaselSource.com"),
  ("Eastbay.com"),
  ("Eastern Mountain Sports"),
  ("Eastland Shoes"),
  ("Easton"),
  ("Easton Press"),
  ("Eastwood"),
  ("Easy CGI"),
  ("Easy Click Travel"),
  ("Easy Comforts"),
  ("Easy Spirit"),
  ("Easy Street"),
  ("eBags"),
  ("eBatts.com"),
  ("eBay"),
  ("EBC"),
  ("Ebel"),
  ("EBgames.com"),
  ("eBooks.com"),
  ("eCampus.com"),
  ("eCarpetGallery"),
  ("Ecco"),
  ("Echo"),
  ("Eco Vita"),
  ("Ecomelectronics"),
  ("eCost.com"),
  ("Ed Hardy"),
  ("Eddie Bauer"),
  ("Edelbrock"),
  ("eDesignerShop.net"),
  ("EDGE"),
  ("Edge Products"),
  ("Edge Tech"),
  ("EdgeStar"),
  ("eDiets"),
  ("Editors' Closet"),
  ("Edox"),
  ("eDressMe.com"),
  ("Edwin Watts Golf Shops"),
  ("eFaucets"),
  ("eFax"),
  ("Eforcity"),
  ("eGardenBridges.com"),
  ("EGR"),
  ("eHarlequin Books"),
  ("eHarmony"),
  ("eHealthInsurance"),
  ("Eibach"),
  ("Eileen Fisher"),
  ("eImprovement"),
  ("Eject Shoes"),
  ("eKitchenIslands.com"),
  ("El Naturalista"),
  ("Elder-Beerman"),
  ("Electric Fireplaces Direct"),
  ("ElectricFireplaceSource.com"),
  ("ElectricGrillsDirect.com"),
  ("Electrolux"),
  ("Electronic Arts"),
  ("Electronics Expo"),
  ("Elegant Moments"),
  ("Element"),
  ("Element by Westin"),
  ("Elements of Design"),
  ("Elfin"),
  ("Elie Tahari"),
  ("eLightBulbs"),
  ("Elini"),
  ("EliteCarSeats.com"),
  ("Elizabeth Arden"),
  ("Eljer"),
  ("ELK Lighting"),
  ("Elkay"),
  ("Ella Moss"),
  ("Ellen Tracy"),
  ("Ellington"),
  ("Ellusionist.com"),
  ("eMachines"),
  ("eMagazines"),
  ("Embrace"),
  ("Emerica"),
  ("Emerson"),
  ("Emilio Pucci"),
  ("eModa.com"),
  ("Empire"),
  ("EmpireCovers.com"),
  ("Emporio Armani"),
  ("Emtek"),
  ("Emu Australia"),
  ("eMusic.com"),
  ("Encyclopedia Britannica"),
  ("Endless.com"),
  ("EndTables.com"),
  ("Energie"),
  ("Energizer"),
  ("Enfamil"),
  ("Enkei"),
  ("Enterprise"),
  ("Entertainment Book"),
  ("Entertainment Centers Inc."),
  ("EntertainmentEarth.com"),
  ("EntertainmentFurniture.com"),
  ("EntirelyPets"),
  ("Entrepreneur.com"),
  ("Enzo Angiolini"),
  ("Epiphone"),
  ("Epson"),
  ("Equal Exchange"),
  ("Equestrian Collection"),
  ("Equifax"),
  ("Ermenegildo Zegna"),
  ("eRockingHorses.com"),
  ("Ertl"),
  ("Escada"),
  ("Escort"),
  ("ESET"),
  ("eSoccerGoals.com"),
  ("eSource Nutrition"),
  ("ESP"),
  ("Especially Yours"),
  ("ESPN Shop"),
  ("eSportsonline"),
  ("ESPRIT"),
  ("eSpyMall"),
  ("ESQ"),
  ("essentialapparel.com"),
  ("Essie"),
  ("Estee Lauder"),
  ("Estwing"),
  ("Esurance"),
  ("ET2"),
  ("Eternal Sparkles"),
  ("Etienne Aigner"),
  ("Etnies"),
  ("etoys.com"),
  ("Etro"),
  ("Etronics"),
  ("Eureka"),
  ("Euro-Pro"),
  ("EuroStyleLighting.com"),
  ("Evenflo"),
  ("EverBank"),
  ("Everlast"),
  ("Every Air Compressor"),
  ("Every Chandelier"),
  ("Every Espresso Machine"),
  ("Every Faucet"),
  ("Every Generator"),
  ("Every Jewelry Box"),
  ("Every Pressure Washer"),
  ("Every Room Divider"),
  ("Every Slipcover"),
  ("Every Space Heater"),
  ("Every Tool Case"),
  ("Every Vessel Sink"),
  ("Every Wall Clock"),
  ("EveryAtomicClock.com"),
  ("EveryConferenceTable.com"),
  ("EveryFountain.com"),
  ("EveryGameRoom.com"),
  ("EveryHammock.com"),
  ("EveryHomeBar.com"),
  ("EveryKitchenIsland.com"),
  ("EveryLampShade.com"),
  ("EveryRecliner.com"),
  ("EveryRockingChair.com"),
  ("EverySafe.com"),
  ("EverySofa.com"),
  ("Everything Furniture"),
  ("Evisu"),
  ("eVitamins"),
  ("evogear.com"),
  ("eVoice"),
  ("eWatches.com"),
  ("eWineRacks.com"),
  ("Ex Officio"),
  ("Excalibur Cutlery and Gifts"),
  ("Excalibur Hotel & Casino"),
  ("Exclusively Misook"),
  ("Exclusively Weddings"),
  ("Executive Essentials"),
  ("Exercise Bikes Inc."),
  ("ExerciseBikes.com"),
  ("ExOfficio"),
  ("Exotissimo"),
  ("eXpansys"),
  ("Expedia"),
  ("Experian"),
  ("Explorer Pass"),
  ("Exposures"),
  ("Express"),
  ("Expressionery"),
  ("Expressions"),
  ("Extended Stay Hotels"),
  ("Exterior Accents"),
  ("Extreme Dimensions"),
  ("Extreme Halloween Network"),
  ("E-Yearbook"),
  ("EyeBuyDirect.com"),
  ("EZ Combs"),
  ("E-Z Up"),
  ("fabric.com"),
  ("Factoryoutletstore.com"),
  ("Fagor"),
  ("Fairmont Hotels"),
  ("Falken"),
  ("Family Christian Stores"),
  ("Famous Footwear"),
  ("Fandango"),
  ("Fanfire"),
  ("Fanimation"),
  ("Fanmats"),
  ("Fannie May Candies"),
  ("FansEdge"),
  ("Fantasie"),
  ("FantasticFans.com"),
  ("Fanzz.com"),
  ("FAO Schwarz"),
  ("FarberWare"),
  ("Fashion Bed Group"),
  ("Fashion Bug"),
  ("Fashion Specialist"),
  ("FashionPlaytes.com"),
  ("FastFloors"),
  ("FatCow.com"),
  ("Fathead"),
  ("Faucet.com"),
  ("FaucetDirect.com"),
  ("Favor Affair"),
  ("FCLStyle.com"),
  ("Fedders"),
  ("FedEx Office & Print Services"),
  ("Feizy"),
  ("Fellowes"),
  ("Fel-Pro"),
  ("Femail Creations"),
  ("Fender"),
  ("Fendi"),
  ("Fergie"),
  ("FergieShoes.com"),
  ("Fernandes"),
  ("Ferrari"),
  ("Ferret.com"),
  ("Festina"),
  ("Festool"),
  ("Fiat"),
  ("Field And Stream"),
  ("Fiesta"),
  ("FIFA"),
  ("Fiji Water Company LLC"),
  ("Fila"),
  ("FileLater"),
  ("FilingCabinets.com"),
  ("Filofax"),
  ("Final Score"),
  ("Financial Times"),
  ("Fine Art Lamps"),
  ("FineJewelers"),
  ("FineJewelers.com"),
  ("FineLobster.com"),
  ("Fingerhut"),
  ("Finish Line"),
  ("Finn Comfort"),
  ("Fire Magic"),
  ("Firebox.com"),
  ("FirePits.com"),
  ("FirePitsCentral.com"),
  ("Fireplace Screen Shop"),
  ("FireplaceMantels.com"),
  ("FireplaceScreens.com"),
  ("FireplaceToolSource.com"),
  ("Firestone"),
  ("Fisher & Paykel"),
  ("Fisher Price"),
  ("Fisher-Price"),
  ("Fiskars"),
  ("FitFlop"),
  ("Fitness Equipment Superstore"),
  ("FitnessEquipmentandMore.com"),
  ("FitnessEquipmentSelect.com"),
  ("FitnessGearUsa.com"),
  ("Fitz and Floyd"),
  ("Fitzwell"),
  ("Fix It!"),
  ("FixMyComputerDude.com"),
  ("Flamingo Las Vegas"),
  ("Flattenme"),
  ("Flavia"),
  ("Fleer"),
  ("Fleurop.com"),
  ("Flexees"),
  ("FLIES-away"),
  ("Flip"),
  ("Flip camera"),
  ("Flip Video"),
  ("FlirtCatalog.com"),
  ("Flirty Aprons"),
  ("FlooringSelect.com"),
  ("FloorLampsGalore.com"),
  ("Flora2000"),
  ("FloraFlora"),
  ("Floraqueen"),
  ("Florsheim"),
  ("Flower.com"),
  ("FlowerDelivery.com"),
  ("Flowers Across America"),
  ("Flowers Fast"),
  ("FlowerStore.com"),
  ("Flowmaster"),
  ("Fly Flot"),
  ("Fly London"),
  ("FogDog"),
  ("Folgers"),
  ("Folica.com"),
  ("FonduePots.com"),
  ("Fonts.com"),
  ("FoodSaver"),
  ("Foot Action"),
  ("Foot Locker"),
  ("Foot Solutions"),
  ("Football Fanatics"),
  ("FootJoy"),
  ("Footnote"),
  ("FootSmart"),
  ("Footwear Etc."),
  ("Ford"),
  ("Ford Racing"),
  ("Forecast Lighting"),
  ("Formatt Filters"),
  ("Fornarina"),
  ("Forplay"),
  ("ForSaleByOwner.com"),
  ("Forzieri"),
  ("Fossil"),
  ("Fountains By Mercantila"),
  ("Four Points"),
  ("Fox Racing"),
  ("Fox Rent a Car"),
  ("Fox Shop"),
  ("Fragrance House"),
  ("FragranceNet.com"),
  ("FragranceX.com"),
  ("Framburg"),
  ("FramesDirect.com"),
  ("Francesco Biasia"),
  ("Franco Sarto"),
  ("Franklin"),
  ("Franklin Covey"),
  ("Franklin Mint"),
  ("FranklinCovey"),
  ("Fred Meyer"),
  ("Fred Perry"),
  ("Frederick's of Hollywood"),
  ("Free People"),
  ("FreedomVOICE"),
  ("Freestyle"),
  ("French Connection"),
  ("French Toast"),
  ("Freshpair.com"),
  ("FreshTrends"),
  ("Friedrich"),
  ("Frigidaire"),
  ("From You Flowers"),
  ("Frontgate"),
  ("Fruit of the Loom"),
  ("Frye"),
  ("Fry's Marketplace"),
  ("FT Press"),
  ("FTD"),
  ("FTD.com"),
  ("FUBU"),
  ("Fujifilm"),
  ("FUJIFILM SeeHere"),
  ("Fujitsu"),
  ("Functionalab"),
  ("Funjet Vacations"),
  ("Funny T Shirts"),
  ("Furla"),
  ("FurnaceFilters.com"),
  ("Futon USA Inc."),
  ("FutonMattress.com"),
  ("Futuro"),
  ("Fuzion"),
  ("fye"),
  ("Gadget Universe"),
  ("Gaggia"),
  ("Gaiam Americas"),
  ("Gaiam Yoga Club"),
  ("Gallery Collection"),
  ("Gallery Direct"),
  ("Game Tap"),
  ("GameAgent.com"),
  ("GameChairs.com"),
  ("GameChairSelect.com"),
  ("GameFly"),
  ("GameHouse"),
  ("GameMine"),
  ("GamersGate"),
  ("GameStop"),
  ("Gametime"),
  ("Gander Mountain"),
  ("Ganz"),
  ("Gap"),
  ("GarageStorageSource.com"),
  ("Garden.com"),
  ("Gardena"),
  ("Gardeners' Choice"),
  ("Gardener's Supply Company"),
  ("Gardens Alive!"),
  ("GardenStatueShop.com"),
  ("GarmentBags.com"),
  ("Garmin"),
  ("Garnet Hill"),
  ("Garnier"),
  ("Gatco"),
  ("Gateway"),
  ("Gazelle.com"),
  ("GBX"),
  ("GbyGUESS.com"),
  ("GE"),
  ("Gear"),
  ("GEARCOR"),
  ("GearWrench"),
  ("Geeks.com"),
  ("Geico"),
  ("Gemvara"),
  ("Generac"),
  ("General Electric"),
  ("General Tire"),
  ("Generations Network"),
  ("Generic"),
  ("GenericSeeds.com"),
  ("Genetic Denim"),
  ("Geneva"),
  ("Geneve"),
  ("Genie"),
  ("Genuardi's"),
  ("George Foreman"),
  ("Georgia Boot"),
  ("Geox"),
  ("Gerber"),
  ("Get A Room"),
  ("Get Organized"),
  ("getAbstract"),
  ("Getting to Know ... Nature's Children"),
  ("Gettington"),
  ("Getzs.com"),
  ("Gevalia"),
  ("Gevril"),
  ("Ghirardelli"),
  ("Gianfranco Ferre"),
  ("Gianni Versace"),
  ("GiantPartyStore.com"),
  ("GiftBaskets.com"),
  ("Giftcards.com"),
  ("GiftCertificates.com"),
  ("GiftCollector.com"),
  ("GiftsForYouNow.com"),
  ("GiftsWish.com"),
  ("GiftTree"),
  ("Giftwarehouse.com"),
  ("GigaByte"),
  ("GigaGolf"),
  ("G-III"),
  ("Gildan"),
  ("Gilden Tree"),
  ("Gillette"),
  ("Gilligan & OMalley"),
  ("Gimmee Jimmy's Cookies"),
  ("Ginger"),
  ("Ginger Software"),
  ("Ginny's Catalog"),
  ("Giorgio Armani"),
  ("Giorgio Armani Beauty"),
  ("Giorgio Brutini"),
  ("Girard Perregaux"),
  ("Girbaud"),
  ("GirlyChecks.com"),
  ("Giuseppe Zanotti"),
  ("Givenchy"),
  ("Glamorise"),
  ("GlassesShop"),
  ("GlassesUSA.com"),
  ("Global"),
  ("Global Equipment Company"),
  ("GlobalGolf.com"),
  ("GlobalPhoneworks.com"),
  ("Globe"),
  ("Gloria Vanderbilt"),
  ("Glow.com"),
  ("Glyde"),
  ("GMAX"),
  ("GNC"),
  ("GO Airlink NYC"),
  ("Go Card"),
  ("Go Daddy"),
  ("Goalie Monkey"),
  ("Goddess"),
  ("Godinger"),
  ("Godiva"),
  ("Gold Buffalo Tribute Proof"),
  ("Gold Strike Tunica"),
  ("Gold Toe"),
  ("Golden Eagle Coins"),
  ("Golden Rest"),
  ("Golden State Fruit"),
  ("Golds Gym"),
  ("Goldstar"),
  ("Goldwell"),
  ("Goldwing Country"),
  ("Goldyn"),
  ("Golf Card"),
  ("Golf Galaxy"),
  ("Golf Outlets"),
  ("Golf Warehouse"),
  ("Golfballs.com"),
  ("GolfGifts.com"),
  ("Golfsmith"),
  ("GoLite"),
  ("Good N Natural"),
  ("Good Sam Club"),
  ("Goodridge"),
  ("Goodwill Too"),
  ("Goodyear"),
  ("Goody's Family Clothing"),
  ("GOpromos"),
  ("Gordon's Jewelers"),
  ("Gorham"),
  ("GotApparel.com"),
  ("Gotham City Online"),
  ("Gourmet Monthly Clubs"),
  ("GourmetGiftBaskets.com"),
  ("GoVacuum.com"),
  ("GovMint.com"),
  ("Graco"),
  ("Gramicci.com"),
  ("Grand Pineapple Sandals"),
  ("Grand Rapids"),
  ("GrandfatherClocks.com"),
  ("GrandfatherClockSelect.com"),
  ("GrandPointe"),
  ("Grasshoppers"),
  ("Gravis"),
  ("Gravity Defyer"),
  ("Gray Line New York Sightseeing"),
  ("Great American Days"),
  ("Great American Products"),
  ("Great Timing"),
  ("Greatbigcanvas.com"),
  ("GreatHomeBars.com"),
  ("GreatPubTables.com"),
  ("GreatRusticFurniture.com"),
  ("GReddy"),
  ("Greekgear"),
  ("GreenhouseSelect.com"),
  ("Greenlee"),
  ("Greensbury Market"),
  ("Greg Robert Pet Supplies"),
  ("Gregg Homme"),
  ("Griffin"),
  ("GrillGoods.com"),
  ("GrillsDirect.com"),
  ("Grohe"),
  ("Grooming Lounge"),
  ("G-Star"),
  ("Gucci"),
  ("Guerlain"),
  ("Guinness WebStore"),
  ("Guinot"),
  ("Guitar Center"),
  ("Gumpert"),
  ("Gump's San Francisco"),
  ("GunCabinetsAndSafes.com"),
  ("Gund"),
  ("GUNNAR"),
  ("H&R Block"),
  ("H.S. Trask"),
  ("H2O Plus"),
  ("Haband"),
  ("Haflinger"),
  ("Hagen"),
  ("Haggar.com"),
  ("Haier"),
  ("Hale Bob"),
  ("Halex"),
  ("Half.com"),
  ("HalfPriceCostumes.com"),
  ("Halloween Mart"),
  ("HalloweenExpress.com"),
  ("Halls (department store)"),
  ("HallTrees.com"),
  ("Hamilton"),
  ("Hamilton Beach"),
  ("Hammacher Schlemmer"),
  ("Hammocks.com"),
  ("Hammock-Superstore"),
  ("Hampton Bay"),
  ("Hancock Fabrics"),
  ("Handango"),
  ("Handbag Heaven"),
  ("HandHeld Products"),
  ("HandHelditems"),
  ("HandleSets.com"),
  ("HandStands"),
  ("HandTrucks.com"),
  ("Hanes"),
  ("Hankook"),
  ("Hanky Panky"),
  ("Hanna Andersson"),
  ("HANNspree"),
  ("Hansen's Surf"),
  ("Hansgrohe"),
  ("HansonEllis"),
  ("Happy Feet Plus"),
  ("Happy Socks"),
  ("HappyKidsPersonalized.com"),
  ("Harajuku Lovers"),
  ("Harbor Freight Tools"),
  ("Harley Davidson"),
  ("Harman Kardon"),
  ("Harrah's Las Vegas"),
  ("Harrah's Laughlin"),
  ("Harrah's Resort Atlantic City"),
  ("Harry & David"),
  ("Hartstrings"),
  ("Harvard"),
  ("Hasbro"),
  ("Hasselblad"),
  ("Hastings Entertainment"),
  ("Hatley"),
  ("Hats.com"),
  ("Haurex"),
  ("HauteLook"),
  ("Havaianas"),
  ("Haviland"),
  ("Hawaiian Airlines"),
  ("Hawk"),
  ("Hawthorn"),
  ("Hay House"),
  ("Hayward"),
  ("HBO Shop"),
  ("HDOSport.com"),
  ("HeadboardSource.com"),
  ("Headphone Solutions"),
  ("Health O Meter"),
  ("HealthCheckSystems.com"),
  ("HealthMaster"),
  ("Healthrider"),
  ("HearthRugs.com"),
  ("Heartland"),
  ("Heartland America"),
  ("Heater-Home.com"),
  ("HeavyDutyStore.com"),
  ("Heel That Pain"),
  ("Heels"),
  ("Heel-Tastic"),
  ("Helena Rubinstein"),
  ("Hella"),
  ("Hello Direct"),
  ("Hello Kitty"),
  ("Helly Hansen"),
  ("Henckels"),
  ("Henry & June"),
  ("Henry Fields"),
  ("Herberger's"),
  ("HerbsPro.com"),
  ("Hercules"),
  ("Hermes"),
  ("HerRoom"),
  ("Hershey Store"),
  ("Hertz"),
  ("Hessnatur"),
  ("Hewlett-Packard"),
  ("Hexomat"),
  ("Hickory Farms"),
  ("High Point Furniture"),
  ("High Sierra"),
  ("Highland Mint"),
  ("Highlights"),
  ("Hillsdale"),
  ("HillsdaleFurnitureDirect.com"),
  ("Hilti"),
  ("Hilton Hotel"),
  ("Hinkley Lighting"),
  ("HipHopBling.com"),
  ("HipsandCurves.com"),
  ("Hireko Golf"),
  ("HisRoom"),
  ("History"),
  ("History Channel"),
  ("Hitachi"),
  ("Hi-Tec"),
  ("HJC"),
  ("HKS"),
  ("Hobart"),
  ("HobbyTron.com"),
  ("HOBO INTERNATIONAL"),
  ("Hobobags.com"),
  ("Hockey Monkey"),
  ("HockeyNets.com"),
  ("Hohner"),
  ("Holabird Sports"),
  ("Holden"),
  ("Holiday Classics"),
  ("Holiday Decorations Direct"),
  ("Holiday Inn"),
  ("Holiday Inn Express"),
  ("HollywoodToysandCostumes.com"),
  ("Holsted Jewelers"),
  ("Home Click"),
  ("Home Decorating Company"),
  ("Home Decorators Collection"),
  ("Home Depot"),
  ("Home Exchange"),
  ("Home for Exchange"),
  ("Home Gallery Stores"),
  ("Home Goodz"),
  ("Home Improvement Superstore"),
  ("Home Shopping Network"),
  ("Home Styles"),
  ("Home Trends"),
  ("Home Visions"),
  ("HomeAway"),
  ("HomeBars Inc."),
  ("HomeBarSelect.com"),
  ("HomeCenter.com"),
  ("HoMedics"),
  ("HomeEverything.com"),
  ("HomeGain"),
  ("HomeGyms Inc."),
  ("Homelement"),
  ("Homelite"),
  ("Homerun Monkey"),
  ("HomeSafe-Store"),
  ("Homestyle"),
  ("HomeTheaterSeating.com"),
  ("HomeTheaterSeatingSelect.com"),
  ("HON"),
  ("Honda"),
  ("Honest Florist"),
  ("Honeywell"),
  ("Hooked On Phonics"),
  ("Hoorray"),
  ("Hoover"),
  ("Horchow"),
  ("Horizon Fitness"),
  ("Horny Toad Activewear"),
  ("Horse.com"),
  ("HorseLoverZ.com"),
  ("Horton"),
  ("HoseReelSource.com"),
  ("HostGator"),
  ("Hot Tools"),
  ("Hot Topic"),
  ("Hot Wheels"),
  ("Hotel Indigo"),
  ("HotelClub"),
  ("Hotelroom.com"),
  ("Hotels.com"),
  ("HotPlates.com"),
  ("Hotpoint"),
  ("Hot-Tub-Direct"),
  ("HotWaterSource.com"),
  ("Hotwire"),
  ("House of Brides"),
  ("HouseholdAppliances.com"),
  ("Housewares Deals"),
  ("Hoveround"),
  ("Howard Johnson"),
  ("Howard Miller"),
  ("Hoya"),
  ("HP"),
  ("HP"),
  ("HSBC"),
  ("HSBC Direct"),
  ("HTC"),
  ("Hudson Reed"),
  ("Huffy"),
  ("Huggies"),
  ("HughesNet"),
  ("Hugo Boss"),
  ("Human Touch"),
  ("Hummer"),
  ("Huntington Surf & Sport"),
  ("Hurley"),
  ("Hush Puppies"),
  ("Husky"),
  ("Husky Liners"),
  ("Husqvarna"),
  ("Hustler"),
  ("Hyper Wear"),
  ("Hyundai"),
  ("I See Me!"),
  ("Ibanez"),
  ("iBattingCages.com"),
  ("IBM"),
  ("iCarKits.com"),
  ("ICE"),
  ("ICE.com"),
  ("IceJerseys.com"),
  ("ICU Eyewear"),
  ("ID Watchdog"),
  ("iDcow"),
  ("ideeli"),
  ("IdentityGuard"),
  ("IdentityTruth"),
  ("iDogBeds.com"),
  ("iFloor.com"),
  ("Igloo"),
  ("igourmet.com"),
  ("iHome Audio"),
  ("Iittala"),
  ("iLightingSource.com"),
  ("illy caffe"),
  ("Imaginova"),
  ("iMemories"),
  ("Imperial"),
  ("Imperial Palace"),
  ("Impo"),
  ("ImprovementDirect"),
  ("IMSI"),
  ("In An Instant"),
  ("In The Company of Dogs"),
  ("In The Swim"),
  ("INC International Concepts"),
  ("indi Custom Apparel"),
  ("Indi Denim"),
  ("Indigo Books & Music"),
  ("Indochino"),
  ("Infinity"),
  ("Infinity Shoes"),
  ("InflatableTrampolines.com"),
  ("InFocus"),
  ("InformIT"),
  ("ING Direct"),
  ("Ingersoll Rand"),
  ("Inglesina"),
  ("Ingram"),
  ("Inhabit"),
  ("InhabitNY"),
  ("Injen"),
  ("Inkgrabber.com"),
  ("InkjetSuperstore.com"),
  ("InkPlusToner.com"),
  ("InkSmile Cartridge"),
  ("InkSupply.com"),
  ("Innova"),
  ("In-Sink-Erator"),
  ("Inspired Shades"),
  ("Inspired Silver"),
  ("Instant Car Loan.com"),
  ("InstantPresenter"),
  ("Instawares"),
  ("InStep"),
  ("InstrumentPro.com"),
  ("InsureMe"),
  ("Intec"),
  ("Intel"),
  ("InterContinental Hotels & Resorts"),
  ("InterContinental Hotels Group"),
  ("Interform Direct Warehouse Closeouts"),
  ("International Bible Society"),
  ("Intex"),
  ("InTheHoleGolf.com"),
  ("Intuit"),
  ("Intuit Websites"),
  ("Invacare"),
  ("Inversion Table Superstore"),
  ("InversionTables.com"),
  ("Invicta"),
  ("Invitation Consultants"),
  ("Iolo"),
  ("Iomega"),
  ("iPage"),
  ("IPCW"),
  ("iPendantLighting.com"),
  ("iPetDoors.com"),
  ("iPhoneStore.com"),
  ("iPilatesReformers.com"),
  ("iPitchingMachines.com"),
  ("I-play.com"),
  ("iPower"),
  ("iPowerWeb"),
  ("iPrint.com"),
  ("Irish Setter"),
  ("iRiver"),
  ("iRobot"),
  ("I-roc"),
  ("Iron Fist"),
  ("iRoomDividers.com"),
  ("Irregular Choice"),
  ("Irv's Luggage"),
  ("Irwin"),
  ("Irwin Naturals"),
  ("Isaac Mizrahi"),
  ("Isabella Oliver"),
  ("IslandSurf.com"),
  ("Issey Miyake"),
  ("Isuzu"),
  ("Itasca"),
  ("ITCFonts.com"),
  ("iTorches.com"),
  ("iToyBoxes.com"),
  ("iToyStorage.com"),
  ("iTrimming"),
  ("iTunes"),
  ("Ives"),
  ("IvyBlue.com"),
  ("IWC"),
  ("iWin"),
  ("IZOD"),
  ("J Brand"),
  ("J&R"),
  ("J.Renee"),
  ("Jackson"),
  ("Jack in the Box"),
  ("Jaclyn Smith"),
  ("Jacoclothing.com"),
  ("Jacques Lemans"),
  ("Jado"),
  ("Jaeger LeCoultre"),
  ("Jafrum"),
  ("Jaguar"),
  ("Jaipur Rugs"),
  ("Jake Wilson"),
  ("Jakks"),
  ("James Allen"),
  ("James Perse"),
  ("james r. moder"),
  ("Jane Iredale"),
  ("JanSport"),
  ("JBA Headers"),
  ("JBL"),
  ("JBPet.com"),
  ("JC Penney"),
  ("JC Whitney"),
  ("JCPenney"),
  ("JCrew"),
  ("Jean Baptiste"),
  ("Jean M"),
  ("Jean Paul Gaultier"),
  ("Jean-Louis Scherrer"),
  ("Jeep"),
  ("Jeffers Pet"),
  ("Jeffrey Campbell"),
  ("JEGEM.com"),
  ("Jelly Belly"),
  ("Jenn-Air"),
  ("Jennifer Lopez"),
  ("Jenny Craig"),
  ("Jensen"),
  ("JensonUSA"),
  ("Jerry's Artarama"),
  ("Jerzees"),
  ("Jessica London"),
  ("Jessica Simpson"),
  ("Jessica Simpson Collection"),
  ("JetBlue Flights"),
  ("JetBlue Vacations"),
  ("Jewel Elegance"),
  ("Jewelry Armoires Direct"),
  ("Jewelry Discount House"),
  ("Jewelry Vortex"),
  ("JewelryArmoire.com"),
  ("JewelryBoxes.com"),
  ("Jewels For Me"),
  ("Jezebel"),
  ("JibJab"),
  ("Jil Sander"),
  ("Jillian Michaels"),
  ("Jimmy Choo"),
  ("Jitterbug"),
  ("JJ Cole"),
  ("JL Audio"),
  ("JLo"),
  ("Joan & David"),
  ("JoAnn.com"),
  ("JOBY"),
  ("Jockey"),
  ("jockey.com"),
  ("Joe Rocket"),
  ("Joes Jeans"),
  ("Joe's New Balance Outlet"),
  ("Joe's Sports"),
  ("JoggingStroller.com"),
  ("John Deere"),
  ("John Galliano"),
  ("John Varvatos"),
  ("Johnny Was"),
  ("Johnson & Johnson"),
  ("Johnston & Murphy"),
  ("Joico"),
  ("Joie"),
  ("JomaShop"),
  ("Jones New York"),
  ("Jones Soda"),
  ("Jordan"),
  ("Jos. A. Bank"),
  ("Jos. A. Banks"),
  ("Josef Seibel"),
  ("Joseph Abboud"),
  ("Jostens"),
  ("JourneyEd.com"),
  ("Journeys"),
  ("Joy Carpets"),
  ("Joy's Life Diet"),
  ("JP Tods"),
  ("JS Boutique"),
  ("JS Collections"),
  ("JT USA"),
  ("JUARA Skincare"),
  ("Juiceman"),
  ("Juicy Couture"),
  ("Ju-Ju-Be"),
  ("JukeBoxes.com"),
  ("Jules Jurgensen"),
  ("Jumbo"),
  ("Junonia"),
  ("Jupiter Jack"),
  ("Jura-Capresso"),
  ("Just Because Baskets"),
  ("Just Braided Rugs"),
  ("Just Cavalli"),
  ("Just My Size"),
  ("Just Shag Rugs"),
  ("Just Southwestern Rugs"),
  ("Just Wine Racks"),
  ("Just Wool Rugs"),
  ("JustAccentChairs.com"),
  ("JustBathroomCabinets.com"),
  ("JustBathroomFurniture.com"),
  ("JustBookends.com"),
  ("JustCuckooClocks.com"),
  ("JustDaybeds.com"),
  ("JustDoubleStrollers.com"),
  ("JustDownComforters.com"),
  ("JustFilingCabinets.com"),
  ("JustFlowers.com"),
  ("JustFoosballTables.com"),
  ("Justice Design Group"),
  ("JustKidsBeds.com"),
  ("JustKidsRugs.com"),
  ("JustKitchenTablesAndChairs.com"),
  ("JustLenses"),
  ("JustNightstands.com"),
  ("JustNurseryGliders.com"),
  ("JustSleighBeds.com"),
  ("JustStorageBenches.com"),
  ("JustStrollers.com"),
  ("JustVanities.com"),
  ("JustWaterPumps.com"),
  ("JVC"),
  ("K&N"),
  ("K2"),
  ("KaBloom.com"),
  ("Kaenon"),
  ("KAL"),
  ("Kalco"),
  ("Kaleen"),
  ("Kalorik"),
  ("Kamik"),
  ("Kaneesha"),
  ("KangaROOS"),
  ("Kangol"),
  ("Kansas City Steak Company"),
  ("Kaplan"),
  ("Karcher"),
  ("Karen Kane"),
  ("Karen Neuburger"),
  ("Karmaloop"),
  ("Kas"),
  ("Kaspersky Lab"),
  ("Kate Spade"),
  ("Kathy Ireland"),
  ("Kathy Ireland Skincare"),
  ("Kathy Van Zeeland"),
  ("KathyIrelandAir.com"),
  ("KaTom Restaurant Supply"),
  ("Kavu"),
  ("Kawasaki"),
  ("Kay Unger"),
  ("Kaz.com"),
  ("KazooToys.com"),
  ("KD Tools"),
  ("Keds"),
  ("KEEN"),
  ("Keepit"),
  ("KEF"),
  ("Kegerator.com"),
  ("KelleyFurniture.com"),
  ("Kelly Tires"),
  ("Kelty K.I.D.S."),
  ("Kelty Kids"),
  ("KenmarWatches.com"),
  ("Kenmore"),
  ("Kenner"),
  ("Kenneth Cole"),
  ("Kenroy Home"),
  ("Kensington"),
  ("Kenwood"),
  ("Kerastase"),
  ("Kerusso"),
  ("Kettler"),
  ("Keurig"),
  ("Kia"),
  ("Kichler"),
  ("Kicker"),
  ("KidKraft"),
  ("Kidrobot"),
  ("Kids Beds Inc."),
  ("Kids Foot Locker"),
  ("KidSafe"),
  ("KidsFurnitureMart.com"),
  ("Kidsline"),
  ("KidsRugShop.com"),
  ("KidSurplus.com"),
  ("Kiehls"),
  ("Kiehl's"),
  ("Killah"),
  ("Killer Dana"),
  ("Kimberly-Clark"),
  ("Kimlor"),
  ("KimmyShop.com"),
  ("Kinerase"),
  ("King Size Direct"),
  ("King's Discount Stores"),
  ("Kingsley Bates"),
  ("Kingston"),
  ("Kingston Brass"),
  ("Kipling"),
  ("Kirby"),
  ("Kirkland Signature"),
  ("Kirra"),
  ("Kiss My Face"),
  ("Kitchen Aid"),
  ("Kitchen and Much More"),
  ("Kitchen Clocks"),
  ("Kitchen Collection"),
  ("Kitchen Island Inc."),
  ("Kitchen Rugs"),
  ("Kitchen Source"),
  ("Kitchen Universe"),
  ("KitchenAid"),
  ("KitchenSource.com"),
  ("Kiyonna Clothing"),
  ("Klein Tools"),
  ("Klipsch"),
  ("KLM Royal Dutch Airlines"),
  ("Kmart"),
  ("KMS"),
  ("Knetgolf"),
  ("K'NEX"),
  ("Knights Inn"),
  ("Knipex"),
  ("Koa Coffee"),
  ("Kobo"),
  ("Kodak"),
  ("Kodak Gallery"),
  ("Koenigsegg"),
  ("Kohler"),
  ("Kohl's"),
  ("Kona Sports"),
  ("Konami"),
  ("Konica Minolta"),
  ("Konig"),
  ("Koolatron"),
  ("Kool-Vue"),
  ("Kosher.com"),
  ("Koss"),
  ("Kotulas"),
  ("Kraus"),
  ("Krause Books"),
  ("Kroger Marketplace"),
  ("Krups"),
  ("K-Swiss"),
  ("Kuhn Rikon"),
  ("Kumho"),
  ("Kwikset"),
  ("K-Y"),
  ("KYB"),
  ("Kyocera"),
  ("L.A.M.B."),
  ("L.L. Bean"),
  ("L.L.Bean"),
  ("La Canadienne"),
  ("La Cense Beef"),
  ("La Pavoni"),
  ("La Perla"),
  ("La Prairie"),
  ("La Quinta Hotels"),
  ("La Regale"),
  ("LA Sportiva"),
  ("LA to Your Door"),
  ("Lab Series"),
  ("LabelDaddy.com"),
  ("Lacoste"),
  ("Lacrosse Footwear"),
  ("Lacrosse Monkey"),
  ("Lacrosse.com"),
  ("LadderballPlus.com"),
  ("Ladders"),
  ("Lady Foot Locker"),
  ("Laguna Tools"),
  ("Lakai"),
  ("Lakeside Collection"),
  ("Lakewood"),
  ("Lamborghini"),
  ("Lambs & Ivy"),
  ("LampBoutique.com"),
  ("Lamps Plus"),
  ("LampSelect.com"),
  ("LampsGalore.com"),
  ("LAN Airlines"),
  ("Lancaster"),
  ("Lancome"),
  ("Land of Nod"),
  ("Land Rover"),
  ("Lands End"),
  ("Lands' End"),
  ("LandscapeLightingShop.com"),
  ("Lane Bryant"),
  ("Lang"),
  ("Lanzar"),
  ("Lasko"),
  ("Last Call Neiman Marcus"),
  ("Lastminute.com"),
  ("Latico Leathers"),
  ("Latin Percussion"),
  ("Laura Ashley"),
  ("Laura Mercier"),
  ("Lavalife"),
  ("Lavinia Lingerie"),
  ("Lawrence Home Fashions"),
  ("La-Z-Boy"),
  ("LazySusans.com"),
  ("LBL Lighting"),
  ("Le Creuset"),
  ("Le Gourmet Chef"),
  ("Le Meridien"),
  ("Le Mystere"),
  ("Leading Lady"),
  ("Leap Frog"),
  ("Leapfrog.com"),
  ("Leaps and Bounds"),
  ("Learning Curve"),
  ("LeatherSofas.com"),
  ("Lee Jeans"),
  ("Lee Middleton"),
  ("Leg Avenue"),
  ("Legacy Learning Systems"),
  ("Legal Seafood"),
  ("LegalMatch"),
  ("LegalZoom"),
  ("Leggett & Platt"),
  ("LEGO"),
  ("Lehigh Outfitters"),
  ("Leica"),
  ("Leisure"),
  ("Lenmar"),
  ("Lenovo"),
  ("Lenovo Canada"),
  ("Lenox"),
  ("Lens.com"),
  ("LensCrafters"),
  ("Lensmart"),
  ("LensWay"),
  ("LensWorld.com"),
  ("Leonisa"),
  ("Lesro"),
  ("LetsTalk.com"),
  ("Leupold"),
  ("Levi.com"),
  ("Levis"),
  ("Lexmark"),
  ("Lexus"),
  ("Liberty Hardware"),
  ("Lids"),
  ("Liebherr"),
  ("Life Fitness"),
  ("Life Is Good"),
  ("Life Uniform"),
  ("LifeLock"),
  ("LifePhoto.com"),
  ("LifeSource"),
  ("LifeStride"),
  ("LifeStride.com"),
  ("Lifestyle California"),
  ("LifeStyle Solutions"),
  ("Lifetime Sterling"),
  ("LiftChairs.com"),
  ("LiftChairsPlus.com"),
  ("Liftopia"),
  ("Lighter Side Co."),
  ("Lighting"),
  ("Lighting By Gregory"),
  ("LightingCatalog.com"),
  ("LightingDirect.com"),
  ("LightingShowplace.com"),
  ("LightInTheBox.com"),
  ("Lil' Iguana"),
  ("Lilly Pulitzer"),
  ("Lily of France"),
  ("Lilyette"),
  ("Limoges Jewelry"),
  ("Limos.com"),
  ("LimoStars"),
  ("Lincoln"),
  ("Linea Pelle"),
  ("LinenPlace"),
  ("Linens N' Things"),
  ("LinensBargains.com"),
  ("LinenSource"),
  ("Lingerie.com"),
  ("Lingo"),
  ("Linksys"),
  ("Linotype"),
  ("Lip-Ink International"),
  ("Lippincott Williams & Wilkins"),
  ("Lipton"),
  ("Liquidation Channel"),
  ("Listerine"),
  ("Lite Source"),
  ("Little Giant Ladder Systems"),
  ("Little Things Favors"),
  ("Little Tikes"),
  ("Littman Bros."),
  ("Live Nation Merchandise"),
  ("Live Strong Fitness"),
  ("LivingDirect.com"),
  ("LivingRoomsDirect.com"),
  ("LivingXL"),
  ("Liz Claiborne"),
  ("Llewellyn"),
  ("Lloyd Mats"),
  ("Lobini"),
  ("Lobster Gram"),
  ("LOccitane"),
  ("L'Occitane"),
  ("Lock and Mane"),
  ("LockerSupply.com"),
  ("Locman"),
  ("Lodge"),
  ("Loft Beds Inc."),
  ("Logitech"),
  ("LogoArt"),
  ("Logotolltags.com"),
  ("Loiter Apparel and Accessories"),
  ("London Fog"),
  ("Lonely Planet"),
  ("Longchamp"),
  ("Longines"),
  ("Lord & Taylor"),
  ("Lord and Taylor"),
  ("LOreal"),
  ("Lorex"),
  ("Lotto"),
  ("Lotus"),
  ("Louis Vuitton"),
  ("Louisville Slugger"),
  ("Love and Pride"),
  ("LovelySkin.com"),
  ("LoveSac.com"),
  ("Low Energy Systems"),
  ("Lowboz"),
  ("Lowepro"),
  ("Lowe's"),
  ("Lucchese"),
  ("Lucien Piccard"),
  ("Lucky Brand"),
  ("Lucky Brand Jeans"),
  ("Ludwig"),
  ("Luggage Online"),
  ("Luggage Pros"),
  ("Luggage.com"),
  ("Luggageguru.com"),
  ("LuggageGuy.com"),
  ("LuggagePoint.com"),
  ("LuggageSetSelect.com"),
  ("Lugz"),
  ("Lugz Footwear"),
  ("LUISAVIAROMA"),
  ("LuLu.com"),
  ("Lumens.com"),
  ("Luminox"),
  ("Lumosity"),
  ("Lund"),
  ("Luxor"),
  ("Luxury Link"),
  ("LydiasUniforms.com"),
  ("M&J Trimmings"),
  ("MAC"),
  ("Mac Connection"),
  ("MacGregor"),
  ("MackenzieLtd.com"),
  ("Maclaren"),
  ("MaclarenStrollersatCSN.com"),
  ("MacMall"),
  ("MacSpeech"),
  ("MacWare"),
  ("Macy's"),
  ("Mad Catz"),
  ("Madden Girl"),
  ("Magazineline.com"),
  ("MagazineRacks.com"),
  ("Magazines"),
  ("Magazines.com"),
  ("Magellan"),
  ("Magellan's"),
  ("Maggy London"),
  ("Magic Bullet"),
  ("Magic Cabin"),
  ("Magic Chef"),
  ("Magic Jack"),
  ("MAGIX"),
  ("MagMall.com"),
  ("MagnaFlow"),
  ("Magnanni"),
  ("Magnussen Furniture"),
  ("Maidenform"),
  ("MainStay Suites"),
  ("Maisto"),
  ("Majestic"),
  ("Majestic Athletic"),
  ("Makari"),
  ("Make Up For Ever"),
  ("Makita"),
  ("Mandalay Bay"),
  ("Mandarina Duck"),
  ("Mannington"),
  ("Manolo Blahnik"),
  ("Mansfield"),
  ("MantelsDirect.com"),
  ("Mantis Garden Products"),
  ("MapMyFitness.com"),
  ("Maps.com"),
  ("Marantz"),
  ("Marazzi USA"),
  ("Marc Ecko"),
  ("Marc Jacobs"),
  ("Marciano.com"),
  ("Marcos"),
  ("Mares"),
  ("Marine Depot"),
  ("Mark Nason"),
  ("Marmot"),
  ("Marriott International"),
  ("Martha Stewart"),
  ("Martha Stewart for 1-800-Flowers.com"),
  ("Martin & Co."),
  ("Martin Furniture"),
  ("Martinez Valero"),
  ("Marvel"),
  ("Maryland Square"),
  ("Maserati"),
  ("Mason Pearson"),
  ("Mason Shoes"),
  ("Massage Tables Inc."),
  ("MassageChairSelect.com"),
  ("Masseys"),
  ("Massey's Outfitters"),
  ("Masterbeat"),
  ("Masterbuilt"),
  ("Mastercraft"),
  ("Match.com"),
  ("Matchmaker"),
  ("Matisse"),
  ("Matix"),
  ("Matrix"),
  ("Mattel"),
  ("Maui Jim"),
  ("Maurice Lacroix"),
  ("Maurices"),
  ("Mauviel"),
  ("Max Factor"),
  ("Max Mara"),
  ("Max Studio"),
  ("Maxam"),
  ("MaxClarity"),
  ("Maxell"),
  ("Maxfli"),
  ("Maxi Cosi"),
  ("Maxim Lighting"),
  ("maxstudio.com"),
  ("Maxtor"),
  ("Maxxis"),
  ("Maybach"),
  ("Maybelline"),
  ("Mayline"),
  ("MaylineDirect.com"),
  ("Maytag"),
  ("Mazda"),
  ("MB Roadcars"),
  ("MB Wheels"),
  ("MBRP"),
  ("MC Sports"),
  ("McAfee"),
  ("McCulloch"),
  ("McFarlane Toys"),
  ("McGruff SafeGuard"),
  ("MCM Electronics"),
  ("Meade"),
  ("Meaningful Beauty"),
  ("Mecca"),
  ("Medalist.com"),
  ("Medela"),
  ("MediaStorageCenter.com"),
  ("Medic Batteries"),
  ("MedicineCabinetShop.com"),
  ("Medicus"),
  ("Medifast Diet"),
  ("Medline"),
  ("MedScope"),
  ("Mega Bloks"),
  ("Megan Racing"),
  ("Meijer"),
  ("Meinl"),
  ("Melissa & Doug"),
  ("MelissaandDoug.com Educational Toys"),
  ("Melitta"),
  ("Memorex"),
  ("Memory Suppliers"),
  ("Men's Wearhouse"),
  ("Mephisto"),
  ("Mercantila"),
  ("Mercedes-Benz"),
  ("Merola Tile"),
  ("Merona"),
  ("Merrell"),
  ("MetaBank"),
  ("Metabo"),
  ("Metagenics"),
  ("MetalDetectors.com"),
  ("Metra Electronics"),
  ("MetroFax"),
  ("MetroKitchen.com"),
  ("metrostyle"),
  ("Met-Rx"),
  ("Mexicana Air"),
  ("Meyda Tiffany"),
  ("Mezlan"),
  ("MGA Entertainment"),
  ("MGB Diamonds"),
  ("MGM Detroit"),
  ("MGM Las Vegas"),
  ("MGM Store"),
  ("MIA"),
  ("Micargi"),
  ("Michael Antonio"),
  ("Michael Kors"),
  ("Michael Stars"),
  ("Michael Todd Cosmetics"),
  ("Miche Bag"),
  ("Michele Watches"),
  ("Michelin"),
  ("Michigan Bulb"),
  ("Micro Innovations"),
  ("Microlife"),
  ("Microsoft"),
  ("Microsoft Store"),
  ("Microtel Inns & Suites"),
  ("MicrowaveOvens.com"),
  ("Midnight Velvet"),
  ("Mido"),
  ("Miele"),
  ("Mighty Leaf Tea"),
  ("Mighty Mendit"),
  ("Mighty Putty"),
  ("Mikasa"),
  ("Miles Kimball"),
  ("Milly"),
  ("Milton Bradley"),
  ("Milwaukee"),
  ("MindWare"),
  ("Mineral Hygenics"),
  ("MiniTots"),
  ("Minka-Aire"),
  ("Minka-Lavery"),
  ("Minnetonka"),
  ("Mint.com"),
  ("Minted."),
  ("Minton"),
  ("Miracle Blades"),
  ("Miraclesuit"),
  ("Mirage"),
  ("MirrorSource.com"),
  ("Miss Me"),
  ("Miss Sixty"),
  ("Mission Skincare"),
  ("Missoni"),
  ("Mister Steamy"),
  ("MisterArt.com"),
  ("Mitsubishi"),
  ("Mitutoyo"),
  ("Miu Miu"),
  ("MixUnit.com"),
  ("Mizuno"),
  ("MLB.com Shop"),
  ("MLB.tv"),
  ("MMA Overload"),
  ("Mobile Edge"),
  ("Moccasins.com"),
  ("ModaQueen"),
  ("ModCloth"),
  ("Model Power"),
  ("Modells"),
  ("ModelPlanes.com"),
  ("Modern Artisans"),
  ("Modern Bathroom"),
  ("Modern Furniture For Home"),
  ("Modern Furniture Warehouse"),
  ("ModernFurniture.com"),
  ("Moen"),
  ("Moet & Chandon"),
  ("Monessen Hearth Systems"),
  ("moneyclamp.com"),
  ("Mongoose"),
  ("Monroe"),
  ("Monroe and Main"),
  ("Monster"),
  ("Monster Cable"),
  ("Montblanc"),
  ("Monte Carlo"),
  ("Monterey Bay Clothing Company"),
  ("Montgomery Ward"),
  ("Moosejaw"),
  ("Mootsies Tootsies"),
  ("More4kids"),
  ("MoreAccentFurniture.com"),
  ("MoreBarStools.com"),
  ("MoreBeddingSets.com"),
  ("MoreBedroomFurniture.com"),
  ("MoreBookcases.com"),
  ("MoreBunkBeds.com"),
  ("MoreCurioCabinets.com"),
  ("MoreDaybeds.com"),
  ("MoreDiningTables.com"),
  ("MoreEntertainmentCenters.com"),
  ("MoreFilingCabinets.com"),
  ("MoreFirePlaces.com"),
  ("MoreHeadboards.com"),
  ("MoreHome.com"),
  ("MoreKitchenCarts.com"),
  ("MoreMailboxes.com"),
  ("MoreMattresses.com"),
  ("MoreMediaStorage.com"),
  ("MoreMirrors.com"),
  ("MoreOfficeChairs.com"),
  ("MoreOfficeFurniture.com"),
  ("MorePatioUmbrellas.com"),
  ("MoreSaunas.com"),
  ("Moreschi"),
  ("MoreTVStands.com"),
  ("MoreVanities.com"),
  ("MoreWineRacks.com"),
  ("Morgan"),
  ("Morgan Mint"),
  ("Moroso"),
  ("Mortgage Search 123"),
  ("Mosaico Spanish"),
  ("Moschino"),
  ("Mossimo"),
  ("Mossy Oak"),
  ("Motel 6"),
  ("Motherhood Maternity"),
  ("MotorcycleSuperstore.com"),
  ("Motormint"),
  ("Motorola"),
  ("MotoSport"),
  ("Mountain Hardwear"),
  ("Mounted Memories"),
  ("MountsandMore.com"),
  ("Mountzilla.com"),
  ("Movado"),
  ("Movie Poster Shop"),
  ("MovingBoxDelivery.com"),
  ("MovingServiceQuote.com"),
  ("Mozy"),
  ("Mr. Beer"),
  ("Mr. Coffee"),
  ("Mr. Watch"),
  ("M-Rock.com"),
  ("Mrs. Beasley's"),
  ("Mrs. Fields"),
  ("MSD"),
  ("MSI"),
  ("MSR"),
  ("MTD"),
  ("MTX"),
  ("Mucinex"),
  ("MUDD"),
  ("Munchkin"),
  ("Munro"),
  ("murad"),
  ("Murad Skin Care"),
  ("Murray Feiss"),
  ("Muscletech"),
  ("Music123"),
  ("MusicBoxes.com"),
  ("MusicFactoryDirect.com"),
  ("Musicians Friend"),
  ("Musician's Hut"),
  ("Musicnotes.com"),
  ("MusicSpace.com"),
  ("muvee autoProducer"),
  ("Mvelopes"),
  ("Mwave.com"),
  ("My First Steps to Learning"),
  ("My Jewelry Box"),
  ("My Kids Bedding"),
  ("My M&M's"),
  ("My Nursing Uniforms"),
  ("My Twinn"),
  ("My Wedding Favors"),
  ("My Wines Direct"),
  ("my1voice"),
  ("MyCorporation"),
  ("MyCraftivityStore.com"),
  ("MyFax"),
  ("myFICO"),
  ("Myine"),
  ("Myla"),
  ("MyOnlineMedicalSupplies"),
  ("MyOwnLabels.com"),
  ("MyShape"),
  ("MySpiceSage.com"),
  ("Mystery Guild"),
  ("Mystic Monk Coffee"),
  ("MyStrollers.com"),
  ("myvu"),
  ("Namco"),
  ("Namco Bandai"),
  ("Nankang"),
  ("Nannies4Hire"),
  ("Naot"),
  ("NARS Cosmetics"),
  ("NASCAR Superstore"),
  ("Nashbar"),
  ("National Business Furniture"),
  ("National Collector's Mint"),
  ("National Geographic"),
  ("National Pet Pharmacy"),
  ("Native"),
  ("Natori"),
  ("Natrol"),
  ("Natural Advantage"),
  ("Natural Factors"),
  ("Naturalizer"),
  ("Naturals Inc."),
  ("Nature Hills Nursery"),
  ("Nature Made"),
  ("Natures Answer"),
  ("Natures Bounty"),
  ("Natures Gate"),
  ("Natures Jewelry"),
  ("Natures Plus"),
  ("Natures Way"),
  ("Naughty Monkey"),
  ("Nautica"),
  ("Nautilus"),
  ("Navigon"),
  ("NBAStore.com"),
  ("NBC Universal Store"),
  ("NEATO"),
  ("NEC"),
  ("NECA"),
  ("Neckline Slimmer"),
  ("Neckties.com"),
  ("Needabulb.com"),
  ("Neiman Marcus"),
  ("Nero"),
  ("Nespresso"),
  ("Nestle"),
  ("Nestle Waters"),
  ("Net 10 Wireless"),
  ("Netaya.com"),
  ("Netflix"),
  ("Netgear"),
  ("NetQuote"),
  ("Network Solutions"),
  ("Neutrogena"),
  ("New Balance"),
  ("New Bright"),
  ("New Era"),
  ("New York & Company"),
  ("New York Bar Store"),
  ("New York Life"),
  ("New York New York"),
  ("New York Pass"),
  ("New York Times"),
  ("Newegg"),
  ("Newport Brass"),
  ("Newport News"),
  ("Newton Running"),
  ("NEXT Bike"),
  ("Nextar"),
  ("Nextiva"),
  ("Nexxus"),
  ("n-fini Shapewear"),
  ("NFLShop.com"),
  ("NGK"),
  ("NHL Shop"),
  ("Niche Retail Partners"),
  ("Nick Jr. Boost"),
  ("Nicole Miller"),
  ("Nicorette"),
  ("Nifty Products"),
  ("Night Stands Inc."),
  ("Nike"),
  ("Nike.com"),
  ("Nikon"),
  ("Nina"),
  ("Nina Ricci"),
  ("Nine West"),
  ("Nintendo"),
  ("Nioxin"),
  ("Nisim International"),
  ("Nissan"),
  ("Nitro Models RC Planes, Inc."),
  ("Nitro-Pak"),
  ("NitroRCX"),
  ("Nitto"),
  ("Nivea"),
  ("Nixon"),
  ("Noble"),
  ("Nokia"),
  ("Nolan"),
  ("Nordic Ware"),
  ("NordicTrack"),
  ("Nordstrom"),
  ("Nordstrom Rack"),
  ("Norelco"),
  ("Noritake"),
  ("Norman"),
  ("North Face"),
  ("North Style"),
  ("Northern Industrial Tools"),
  ("Northern Tool & Equipment"),
  ("Northland"),
  ("NorthLightShop.com"),
  ("Northline Express"),
  ("Northwest"),
  ("Nostalgia Electrics"),
  ("Not Rated"),
  ("Not Your Daughters Jeans"),
  ("NothingButSoftware.com"),
  ("Novalightingstore.com"),
  ("Novelty"),
  ("Novelty Rugs"),
  ("Novica"),
  ("NowLegal.com"),
  ("NSI"),
  ("Nuance"),
  ("NuddleBlanket.com"),
  ("Nunn Bush"),
  ("Nurse Mates"),
  ("Nutcrackers.com"),
  ("NuTone"),
  ("Nutrisystem"),
  ("NuWave"),
  ("Nuxe"),
  ("NVIDIA"),
  ("NYLA"),
  ("Oakley"),
  ("Oakley Vault"),
  ("OBAGI"),
  ("OBrien"),
  ("Occasions Group"),
  ("Ocean Pacific"),
  ("Oceanic"),
  ("OCInkjet"),
  ("Octo"),
  ("Odyssey"),
  ("Off 5th Saks Fifth Avenue Outlet"),
  ("Offers.com Assorted Giveaways"),
  ("Offers.com Auto & Tools Giveaways"),
  ("Offers.com Beauty Products Giveaways"),
  ("Offers.com Books & Media Giveaways"),
  ("Offers.com Cookbooks Giveaways"),
  ("Offers.com Food & Groceries Giveaways"),
  ("Offers.com Hair Care Giveaways"),
  ("Offers.com Health & Fitness Giveaways"),
  ("Offers.com Home Alarm Quotes"),
  ("Offers.com Home Improvement Giveaways"),
  ("Offers.com Pet Care Giveaways"),
  ("Offers.com Restaurants & Fast Food Giveaways"),
  ("Offers.com Travel Giveaways"),
  ("Office Depot"),
  ("Office Playground"),
  ("Office Star"),
  ("OfficeChairs.com"),
  ("OfficeDesigns.com"),
  ("OfficeFurniture.com"),
  ("OfficeFurnitureNMore.com"),
  ("OfficeMax"),
  ("OFM"),
  ("Ogio"),
  ("Oh Baby"),
  ("OKI Printing Solutions"),
  ("Olay"),
  ("Old Gringo"),
  ("Old Navy"),
  ("Old Pueblo Traders"),
  ("Old Spice"),
  ("Old Town"),
  ("Ole Ole"),
  ("Olga"),
  ("Oliver Peoples"),
  ("Ollie's Bargain Outlet"),
  ("Olympia Sports"),
  ("Olympus"),
  ("Omaha Steaks"),
  ("Omega"),
  ("OmegaStore by NutraOrigin"),
  ("Omron"),
  ("OnCourt OffCourt"),
  ("One Spirit"),
  ("One Step Ahead"),
  ("One Stop Plus"),
  ("OneGreatFamily"),
  ("Oneida"),
  ("ONeill"),
  ("O'Neill"),
  ("OneTouch"),
  ("OneTravel"),
  ("Onex"),
  ("Onkyo"),
  ("Online Fitness"),
  ("Onlineshoes.com"),
  ("OnlineSports.com"),
  ("Only Natural Pet Store"),
  ("OnlyAreaRugs.com"),
  ("OnlyGloves.com"),
  ("OnlyOutdoorFountains.com"),
  ("OnlySlippers.com"),
  ("OnSale"),
  ("Opel"),
  ("OperaGlasses.com"),
  ("OPI"),
  ("Optima"),
  ("Optimum Nutrition"),
  ("optionsXpress"),
  ("Oral-B"),
  ("OrangeOnions.com"),
  ("Orbitz"),
  ("Oreck"),
  ("Oregon"),
  ("Oregon Scientific"),
  ("Organic Bouquet"),
  ("OrganicIndiaUSA.com"),
  ("Organize.com"),
  ("OrGREENic Kitchenware"),
  ("Orient"),
  ("Oriental Trading Company"),
  ("OrientalRugs.com"),
  ("Original Penguin"),
  ("Origins"),
  ("Orion"),
  ("OrionGadgets.com"),
  ("Oris"),
  ("Orlimar"),
  ("OrnamentShop"),
  ("Orvis"),
  ("Oscar De La Renta"),
  ("OshKosh B'gosh"),
  ("Osiris"),
  ("Oster"),
  ("OSullivan"),
  ("OTC"),
  ("Otel.com"),
  ("OtterBox"),
  ("Ottomans.com"),
  ("Ouidad"),
  ("OurDesigns.com"),
  ("OurHubbub"),
  ("OutdoorCarpet.com"),
  ("OutdoorLightingandMore.com"),
  ("OutdoorLightingPlus.com"),
  ("OutdoorPros.com"),
  ("OutdoorRugs.com"),
  ("OutdoorRugShop.com"),
  ("OutInStyle.com"),
  ("Outletbuy.com"),
  ("Ovation"),
  ("Overnight Prints"),
  ("Overstock Drugstore"),
  ("Overstock.com"),
  ("Overtons"),
  ("OZ Racing"),
  ("P.S. from Aeropostale"),
  ("PaceSetter"),
  ("Pacific Coast"),
  ("Pacific Coast Feather Company"),
  ("Pacific Sunwear"),
  ("Pacific Trail"),
  ("PacificGeek"),
  ("PacificPillows.com"),
  ("Paco Rabanne"),
  ("Paderno"),
  ("Pagani"),
  ("Paige Premium Denim"),
  ("Paintball Online"),
  ("PajamaCity"),
  ("Palais Royal"),
  ("Palladium"),
  ("Palm"),
  ("PalmBeachJewelry.com"),
  ("Palmers"),
  ("Palo Alto Software"),
  ("Paltalk Video Chat"),
  ("Pamida"),
  ("Pampers"),
  ("Panasonic"),
  ("Panda Security"),
  ("Pantech"),
  ("Paper Culture"),
  ("Paper Source"),
  ("Paradigm"),
  ("Paragon Sports"),
  ("Parallels"),
  ("ParetoLogic"),
  ("Paris Las Vegas"),
  ("Parisian (Bon-Ton)"),
  ("Park Sleep Fly"),
  ("Parker Brothers"),
  ("Parts Express"),
  ("PartsGeek.com"),
  ("PartStore.com"),
  ("Partstrain.com"),
  ("Patagonia"),
  ("Patchi"),
  ("Patio Heaters Inc."),
  ("Patio Umbrellas by Mercantila"),
  ("PatioFurnitureUSA.com"),
  ("PatioHeatersandMore.com"),
  ("PatioHeaterStore.com"),
  ("PatioUmbrellas.com"),
  ("Patriot Memory"),
  ("Paul Frank"),
  ("Paul Fredrick"),
  ("Paul Mitchell"),
  ("Paula Young"),
  ("Paws Choice"),
  ("Payless Decor"),
  ("Payless Shoes"),
  ("PBS"),
  ("PC Connection"),
  ("PC Mall"),
  ("PC Tools"),
  ("PCMicrostore.com"),
  ("PcPools"),
  ("pcRUSH"),
  ("Peachpit"),
  ("Peapod"),
  ("Pear Tree Greetings"),
  ("Pearl"),
  ("Pearl Izumi"),
  ("Peavey"),
  ("PedEgg"),
  ("PedestalTables.com"),
  ("PediPaws"),
  ("Peebles"),
  ("Peerless"),
  ("Peet's Coffee & Tea"),
  ("Peg Perego"),
  ("Peg-Perego"),
  ("Pelco"),
  ("Pelican"),
  ("Penn"),
  ("Penny Loves Kenny"),
  ("Pentair"),
  ("Pentax"),
  ("PeopleFinders"),
  ("Perfect Brownie"),
  ("Perfectmatch.com"),
  ("Performance Bike"),
  ("Performance Products"),
  ("Perfumania.com"),
  ("Perfume Country"),
  ("Perfume Emporium"),
  ("Perfume Worldwide"),
  ("Perfume.com"),
  ("Pergo"),
  ("Perlina"),
  ("Perodua"),
  ("Perricone"),
  ("Perry Ellis"),
  ("Persol"),
  ("Personal Canvas Art"),
  ("Personal Creations"),
  ("Personal Throws"),
  ("Personal Wine"),
  ("PersonalizationMall.com"),
  ("Pet Food Direct"),
  ("Pet Mountain"),
  ("Pet Street Mall"),
  ("PetCareChoice"),
  ("PetCareRx"),
  ("PetCarriers.com"),
  ("PETCO"),
  ("Petit Bateau"),
  ("Pets Best"),
  ("Pets United"),
  ("Petsafe.net"),
  ("Petscriptions.com"),
  ("Petsmart"),
  ("PetStore.com"),
  ("Peugeot"),
  ("Pex Supply"),
  ("PF Flyers"),
  ("Pfaelzer Brothers"),
  ("Pfaltzgraff"),
  ("Pflueger"),
  ("Phanfare"),
  ("PhantomAlert"),
  ("Phat Campus"),
  ("Phat Farm"),
  ("Phil & Teds"),
  ("Philip Stein"),
  ("Philips"),
  ("Philosophy"),
  ("philosophy.com"),
  ("Phoenix Technologies"),
  ("Phone Power"),
  ("Phone.com"),
  ("PhoneSale.com"),
  ("PhotoWorks.com"),
  ("Phyto"),
  ("PIAA"),
  ("Piaget"),
  ("Picaboo"),
  ("Picnic Tables by Mercantila"),
  ("PicnicTablesDirect.com"),
  ("Picture Evolution"),
  ("PicturesOnGold.com"),
  ("Piercing Pagoda"),
  ("Pierre Cardin"),
  ("Pierre Deux"),
  ("Pikolinos"),
  ("PillowSuperstore.com"),
  ("Pilot"),
  ("Pilot Automotive"),
  ("Pimsleur"),
  ("Pinatas.com"),
  ("Ping"),
  ("Pink Ice"),
  ("Pink Mascara"),
  ("Pinnacle"),
  ("Pinnacle Systems"),
  ("Pioneer"),
  ("Pioneer Linens"),
  ("Piperlime"),
  ("Pirelli"),
  ("Pitney Bowes"),
  ("Pittman & Davis"),
  ("PJ Outlet"),
  ("Planet Blue"),
  ("Planet Hollywood"),
  ("PlanetShoes.com"),
  ("PlantStands.com"),
  ("Platform Bed Inc."),
  ("PlayHouses.com"),
  ("PlayHut"),
  ("PlayKitchens.com"),
  ("Playmates"),
  ("PlayMobil"),
  ("Playskool"),
  ("Playtex"),
  ("PlayThisWay.com"),
  ("Pleaser USA, Inc"),
  ("Plow & Hearth"),
  ("PlumberSurplus.com"),
  ("PNY"),
  ("Poetic Licence"),
  ("Pokemon"),
  ("Polar"),
  ("Polaris"),
  ("Polaroid"),
  ("Police"),
  ("Polk Audio"),
  ("Ponds"),
  ("Pontiac"),
  ("Pool Cleaners Inc."),
  ("Pool Tables by Mercantila"),
  ("PoolCenter.com"),
  ("PoolDawg.com"),
  ("PoolFurniture.com"),
  ("PoolTableLights.com"),
  ("Popcorn Factory"),
  ("PorchSwings.com"),
  ("PorchSwingsandMore.com"),
  ("Porsche"),
  ("Port Authority"),
  ("PortableAirShop.com"),
  ("Porter Cable"),
  ("Porter-Cable"),
  ("Portero"),
  ("PoshTots"),
  ("Posit Science"),
  ("Posture"),
  ("Potpourri Group"),
  ("Potracks Inc."),
  ("PotRacksGalore.com"),
  ("Pottery Barn"),
  ("Pottery Barn Kids"),
  ("Pottery Barn Teen"),
  ("PotteryWheelsAndKilns.com"),
  ("PottingBenches.com"),
  ("Pour La Victoire"),
  ("Powell Furniture"),
  ("Power Pro"),
  ("Power Slot"),
  ("Power Stop"),
  ("Power Systems"),
  ("PowerAcoustik"),
  ("PowWeb Hosting"),
  ("Prada"),
  ("Prana"),
  ("Praxis Language"),
  ("PremierMountsCentral.com"),
  ("PreOwnedAerons.com"),
  ("Prepac"),
  ("Prescriptives"),
  ("Presto"),
  ("Pretty Party Place"),
  ("Price Pfister"),
  ("Priceline"),
  ("Primigi"),
  ("Princess"),
  ("Princess Marina De Bourbon"),
  ("PrintingForLess.com"),
  ("PrintMyRibbon"),
  ("PrintMyThing"),
  ("PrintPlace.com"),
  ("Printronic.com"),
  ("PrintRunner.com"),
  ("Priority Pass"),
  ("Pro Sports Memorabilia"),
  ("Proactiv Solution"),
  ("ProbioticSmart.com"),
  ("ProBoardShop.com"),
  ("Procter & Gamble eStore"),
  ("Proctor Silex"),
  ("ProductExpress.com"),
  ("ProFlowers"),
  ("ProForm"),
  ("ProGolf.com"),
  ("Progress Lighting"),
  ("Progressive Suspension"),
  ("ProHealth"),
  ("Projector Lamp Center"),
  ("ProjectorScreensDirect.com"),
  ("PromGirl.com"),
  ("PROMT"),
  ("Pronto Uomo"),
  ("Property Perfections"),
  ("Propet"),
  ("Protectabed.com"),
  ("Proton"),
  ("PSNE Group"),
  ("PsPrint"),
  ("Public Savings Bank"),
  ("PubSets.com"),
  ("Pugster"),
  ("Pulaski Furniture"),
  ("PullsDirect.com"),
  ("Pulsar"),
  ("Puma"),
  ("Puma.com"),
  ("Punch! Software"),
  ("Punchbowl.com"),
  ("Pur Minerals"),
  ("Pura Lopez"),
  ("Pure Encapsulations"),
  ("PureSight Online Child Safety"),
  ("Puritan's Pride"),
  ("Putco"),
  ("Pyle"),
  ("Pyramid Collection"),
  ("Pyramyd Air"),
  ("PZI Jeans"),
  ("Qantas"),
  ("Quality Inn"),
  ("Quality Paperback"),
  ("Quantum"),
  ("QuickBooks"),
  ("Quicken Loans"),
  ("Quiksilver"),
  ("QuiltRacks.com"),
  ("Quoizel"),
  ("Qupid"),
  ("QVC"),
  ("Qwest"),
  ("RabbitCageSource.com"),
  ("RaceTeamGear"),
  ("Racingone.com"),
  ("RackMounts.com"),
  ("RacksandStands.com"),
  ("RadarBusters.com"),
  ("Radica"),
  ("Radical"),
  ("Radio Flyer"),
  ("RadioShack"),
  ("Rado"),
  ("Raffaello Ties"),
  ("Raffles Hotels & Resorts"),
  ("Raidentech.com"),
  ("Rail Europe"),
  ("RainBarrelSource.com"),
  ("Rainbow Appliance"),
  ("Rainbow Light"),
  ("Ralph Lauren"),
  ("Ramada"),
  ("Rampage"),
  ("Rand McNally"),
  ("Rapala"),
  ("Rasta Imposta"),
  ("Ratfink T-Shirts"),
  ("Ravensburger"),
  ("Rawlings"),
  ("Rawlings Gear"),
  ("Ray Ban"),
  ("Raymond Waites Design"),
  ("Raymond Weil"),
  ("Razor"),
  ("RazorGator"),
  ("RCA"),
  ("Reach"),
  ("Ready Wheels"),
  ("Real Goods Solar"),
  ("RealHog.com"),
  ("RealNetworks"),
  ("RealtyTrac"),
  ("Rebecca Minkoff"),
  ("Rebecca Taylor"),
  ("ReBinder"),
  ("RECARO"),
  ("ReclinersPlus.com"),
  ("Red Carpet Lingerie"),
  ("Red Wing"),
  ("RedEnvelope"),
  ("Redken"),
  ("RedStamp.com"),
  ("Reebok"),
  ("Reebok.com"),
  ("Reed & Barton"),
  ("Reeds Jewelers"),
  ("Reef"),
  ("Refurbdepot.com"),
  ("Register.com"),
  ("REI"),
  ("Relax the Back"),
  ("Remington"),
  ("Remo"),
  ("Renault"),
  ("Rene Furterer"),
  ("RentalCars.com"),
  ("Replay"),
  ("Replens"),
  ("Report"),
  ("Restaurant.com"),
  ("ReStockIt.com"),
  ("Restricted Shoes"),
  ("Resume Rabbit"),
  ("ResumeEdge"),
  ("ResumeZapper"),
  ("Revell"),
  ("Revival Soy"),
  ("ReviverSoft"),
  ("Revlon"),
  ("Revo"),
  ("Rexall Sundown"),
  ("Rhapsody"),
  ("Rheem"),
  ("Rich & Skinny Jeans"),
  ("Richard Solo"),
  ("Ricky's"),
  ("RICO Industries"),
  ("Ricoh"),
  ("Riddell"),
  ("Riddex"),
  ("RideonVehicles.com"),
  ("RIDER"),
  ("Ridgid"),
  ("RidingToys.com"),
  ("Riedel"),
  ("Rieker Antistress"),
  ("RingCentral"),
  ("Rio Grande Games"),
  ("Rio Las Vegas"),
  ("Rip Curl"),
  ("Rite Aid"),
  ("Ritz Camera"),
  ("Riu Hotels & Resorts"),
  ("Rival"),
  ("Road Runner Sports"),
  ("Roam Mobility"),
  ("Roamans"),
  ("Robeez"),
  ("Robert Clergerie"),
  ("Robert Mondavi"),
  ("Robert Wayne"),
  ("Robert Wayne Footwear"),
  ("Roberto Cavalli"),
  ("RoboForm"),
  ("RoC"),
  ("RocaWear"),
  ("Rochester Clothing"),
  ("Rock & Republic"),
  ("Rock and Republic"),
  ("Rock.com"),
  ("RockCreek.com"),
  ("Rocket Dog"),
  ("Rocket Lawyer"),
  ("Rockford Fosgate"),
  ("Rocking Chairs by Mercantila"),
  ("RockingChairs.com"),
  ("Rockler Woodworking and Hardware"),
  ("Rockport"),
  ("RockTumblers.com"),
  ("Rockwell Tools"),
  ("Rocky Mountain ATV/MC"),
  ("Rocky Mountain Trail"),
  ("Rocky Shoes & Boots, Inc."),
  ("Rodeway Inn"),
  ("Roger & Gallet"),
  ("Rohl"),
  ("RokStok"),
  ("Roku"),
  ("Roland"),
  ("Rolex"),
  ("Roller Hockey Monkey"),
  ("Rollerblade"),
  ("RollerSkates.net"),
  ("RollingRazor"),
  ("Rolls-Royce"),
  ("Rolodex"),
  ("Romantic Gowns"),
  ("Romeo & Juliet Couture"),
  ("Romika"),
  ("Ronco"),
  ("Rooms to Go"),
  ("Rooms to Go Kids"),
  ("Roots"),
  ("Ros Hommerson"),
  ("Rosenthal"),
  ("Rosetta Stone"),
  ("RosieHippo.com"),
  ("Rossignol"),
  ("Ross-Simons"),
  ("Roush"),
  ("Rowena's"),
  ("Rowenta"),
  ("Rowing Machines"),
  ("RowNine"),
  ("Roxio"),
  ("Roxy"),
  ("Royal Albert"),
  ("Royal Doulton"),
  ("Royal Elastics"),
  ("Royal Plantations Sandals"),
  ("Royal Robbins"),
  ("Rubbermaid"),
  ("Rubbermaid.com"),
  ("Rug Doctor"),
  ("Rugby by Ralph Lauren"),
  ("Rugman.com"),
  ("RugSale"),
  ("RugShowplace.com"),
  ("Rungreen.com"),
  ("RushMyPassport.com"),
  ("RushMyTravelVisa.com"),
  ("Rusk"),
  ("Russ"),
  ("Russell Athletic"),
  ("RVCA"),
  ("RVCA Official Store"),
  ("Ryka"),
  ("Ryobi"),
  ("S&S Worldwide"),
  ("Saab"),
  ("Saeco"),
  ("Safari"),
  ("Safco"),
  ("SafcoCentral.com"),
  ("SafeCopy"),
  ("Safety 1st"),
  ("Safety First"),
  ("Safety Glasses USA"),
  ("Safeway.com"),
  ("Sag Harbor"),
  ("Sahalie"),
  ("Saks Fifth Avenue"),
  ("Sally Beauty Supply"),
  ("Salomon"),
  ("Salton"),
  ("Salvatore Ferragamo"),
  ("Sam Ash"),
  ("Sam Edelman"),
  ("Sam's Club"),
  ("Samsonite"),
  ("Samsung"),
  ("Samuel Lawrence"),
  ("Sandals"),
  ("SanDisk"),
  ("Sanford"),
  ("Sango"),
  ("Sanitaire"),
  ("Sanuk"),
  ("Sanyo"),
  ("Sargent-Welch"),
  ("Saturn"),
  ("Saucony"),
  ("Sauder"),
  ("Savannah's Candy Kitchen"),
  ("Savile Row Company"),
  ("Savoy House"),
  ("ScanCafe"),
  ("Scandia Down"),
  ("ScanDigital"),
  ("ScanPan"),
  ("Scented Monkey"),
  ("Scentiments"),
  ("Schecter"),
  ("Scheuer Linens"),
  ("Schlage"),
  ("Schleich"),
  ("Scholastic"),
  ("Schonbek"),
  ("SchoolRoomFurniture.com"),
  ("Schutt"),
  ("Schwinn"),
  ("Science Fiction"),
  ("ScienceKit.com"),
  ("Scientifics Online"),
  ("Scooter Store"),
  ("Scooter.com"),
  ("Score"),
  ("Scorpion"),
  ("Scottrade"),
  ("Scotts"),
  ("Scrapbook.com"),
  ("Scrubs & Beyond"),
  ("Scubastore"),
  ("Sculptz"),
  ("Sea Gull"),
  ("Sea of Diamonds"),
  ("Seagate"),
  ("Sealy"),
  ("SealyBedding.com"),
  ("Sean John"),
  ("Sears"),
  ("Sears Canada"),
  ("Sears Essentials"),
  ("Sears Grand"),
  ("Sears Home Improvement"),
  ("Sears Home Services"),
  ("Sears Outlet"),
  ("Sears PartsDirect"),
  ("Sears Portrait Studio"),
  ("Seat"),
  ("Sebago"),
  ("Secondlife.com"),
  ("SecondSpin.com"),
  ("Sector"),
  ("See's Candies"),
  ("Sega"),
  ("Seiko"),
  ("Select Blinds"),
  ("Selmer"),
  ("Senco"),
  ("Sennheiser"),
  ("Sephora"),
  ("Serengeti"),
  ("SerenityHealth"),
  ("Serta"),
  ("ServingTrays.com"),
  ("Sesame Street"),
  ("seven"),
  ("Seventh Avenue"),
  ("Sevylor"),
  ("SewingTableShop.com"),
  ("Seychelles"),
  ("Sferra"),
  ("SFMusicBox.com"),
  ("Shakespeare"),
  ("ShamWow"),
  ("Shape FX"),
  ("Shari's Berries"),
  ("Sharp"),
  ("Sharper Image"),
  ("Shaw"),
  ("Sheer Cover"),
  ("Shelby"),
  ("Shelli Segal"),
  ("Sheplers"),
  ("Sheraton"),
  ("Shermag"),
  ("Sherwood"),
  ("ShiekhShoes.com"),
  ("Shimano"),
  ("ShindigZ"),
  ("Shirley of Hollywood"),
  ("Shiseido"),
  ("ShockHound.com"),
  ("Shockwave"),
  ("Shoebacca"),
  ("Shoebuy.com"),
  ("SHOEI"),
  ("Shoeline.com"),
  ("ShoeMall"),
  ("Shoes for Crews"),
  ("Shoes Under"),
  ("Shoes.com"),
  ("ShoeSale"),
  ("ShoesGotSole.com"),
  ("ShoeSteal.com"),
  ("Shop ABC"),
  ("Shop Family Tree"),
  ("Shop Taste of Home"),
  ("SHOP.COM"),
  ("ShopAdidas.com"),
  ("ShopBathroomLighting.com"),
  ("Shopbop.com"),
  ("ShopEcko.com"),
  ("ShopFloorLamps.com"),
  ("Shopko"),
  ("Shoplet.com"),
  ("ShopNBC"),
  ("ShopOutdoorLighting.com"),
  ("ShoppersChoice.com"),
  ("ShopStyle.com"),
  ("ShopTableLamps.com"),
  ("Shopthelook.net"),
  ("Shop-Vac"),
  ("ShortOrder.com"),
  ("Shoshanna"),
  ("Showboat Atlantic City"),
  ("ShowerCurtainsGalore.com"),
  ("Shu Uemura"),
  ("Shure"),
  ("Shutterfly"),
  ("SideboardsandBuffetsOnline.com"),
  ("Siemens"),
  ("Sierra Designs"),
  ("Sierra Trading Post"),
  ("Sigma"),
  ("SigningTime.com"),
  ("Silhouettes"),
  ("Silicon Mountain"),
  ("Silkflowers.com"),
  ("Silkies"),
  ("Silk'n SensEpil"),
  ("SilkPalms.com"),
  ("Silver Jeans"),
  ("Silvertone"),
  ("Similac"),
  ("Simmons"),
  ("Simms"),
  ("Simple Floors"),
  ("Simple Shoes"),
  ("SimpleTuition"),
  ("Simply Audiobooks"),
  ("SimplyAccentChairs.com"),
  ("SimplyArbors.com"),
  ("SimplyBeds.com"),
  ("SimplyBunkbeds.com"),
  ("SimplyDehumidifiers.com"),
  ("SimplyDesks.com"),
  ("SimplyDogBeds.com"),
  ("SimplyErgonomic.com"),
  ("SimplyFountains.com"),
  ("SimplyHangers.com"),
  ("SimplyKidsBeds.com"),
  ("SimplyLoftBeds.com"),
  ("SimplyMirrors.com"),
  ("SimplyPlanters.com"),
  ("SimplyPlatformBeds.com"),
  ("SimplyTrellises.com"),
  ("SimplyVanities.com"),
  ("Singer"),
  ("Singer22"),
  ("Sirius Satellite Radio"),
  ("Sisley"),
  ("Sitbetter.com"),
  ("SitStay.com"),
  ("SitterCity"),
  ("Six Flags"),
  ("Sizzix"),
  ("SK"),
  ("Skagen"),
  ("SkateStyles.com"),
  ("Skechers"),
  ("Skechers.com"),
  ("Skil"),
  ("SkinCareRx"),
  ("skinID"),
  ("Skinit"),
  ("Skinny Switch Secret"),
  ("SkinStore.com"),
  ("Skis.com"),
  ("Skiset.com"),
  ("SkiTube.com"),
  ("Skoda"),
  ("Skullcandy"),
  ("Skyline"),
  ("SkyMall"),
  ("Slap Chop"),
  ("Slazenger"),
  ("Sleep Inn"),
  ("SleeperSofa.com"),
  ("Sleeptracker"),
  ("SleepyHeads.com"),
  ("SlipCoverShop"),
  ("SmartBargains.com"),
  ("SmartFares"),
  ("Smarthome"),
  ("Smashbox"),
  ("Smashbox Cosmetics"),
  ("Smead"),
  ("Smeg"),
  ("Smilebox"),
  ("SmileMakers"),
  ("Smith & Wesson"),
  ("Smith Micro Software"),
  ("Smith+Noble"),
  ("Smith's Marketplace"),
  ("Smooth Away"),
  ("SmoothFitness.com"),
  ("SmugMug"),
  ("Snapfish"),
  ("Snow Joe"),
  ("SnowShack"),
  ("Snuggie"),
  ("Snuggle"),
  ("Soap.com"),
  ("Soccer.com"),
  ("SoccerGarage.com"),
  ("SodaStream"),
  ("SofaSets.com"),
  ("SofaTables.com"),
  ("Soft Surroundings"),
  ("Softspots"),
  ("Softwalk"),
  ("Solaray"),
  ("SolarLightStore.com"),
  ("Solestruck"),
  ("Soleus"),
  ("Solgar"),
  ("Solid Signal"),
  ("Soma Intimates"),
  ("SonicScrubber.com"),
  ("Sonictoothbrush.com"),
  ("Sonor"),
  ("Sony"),
  ("Sony Ericsson"),
  ("SonyStyle.com"),
  ("Sorel"),
  ("Soundview"),
  ("Source Naturals"),
  ("SousVide Supreme"),
  ("South Beach"),
  ("South Pole"),
  ("South Sea Rattan"),
  ("South Shore"),
  ("Southern Textiles"),
  ("SouthShoreFurnitureDirect.com"),
  ("Southwest Vacations"),
  ("Space Bag"),
  ("Spafinder"),
  ("Spalding"),
  ("SpaLook.com"),
  ("SPAMfighter"),
  ("Spanx"),
  ("Sparco"),
  ("SpareFoot Storage"),
  ("SpeakerStandsOnline.com"),
  ("Specialty Pool Products"),
  ("Specialty Store Services"),
  ("Speed Queen"),
  ("Speedo"),
  ("Speedo USA"),
  ("Spencer Gifts"),
  ("Sperry"),
  ("Spiegel"),
  ("SpinMaster"),
  ("Spirit Vacations"),
  ("SpiritHalloween.com"),
  ("Splendia"),
  ("Splendid"),
  ("Spode"),
  ("Sportcraft"),
  ("Sports Authority"),
  ("Sports Kids"),
  ("Sportsman's Guide"),
  ("SportsMemorabilia.com"),
  ("SportSmith"),
  ("SpottingScopes.com"),
  ("Spreadshirt Designer"),
  ("Spring Hill"),
  ("Spring Step"),
  ("Springmaid"),
  ("Sprint"),
  ("Spy Optics"),
  ("Spyder"),
  ("Spyker"),
  ("Ssangyong"),
  ("SSC"),
  ("Ssense.com"),
  ("St. Johns Bay"),
  ("St. Regis Hotels & Resorts"),
  ("STA Travel"),
  ("StacksandStacks"),
  ("Stacy Adams"),
  ("Staedtler"),
  ("Stage"),
  ("Stage Stores Inc."),
  ("StageLightingUSA.com"),
  ("Stamina Products"),
  ("Stamps.com"),
  ("Standard Process"),
  ("Stanley"),
  ("Stanley-Bostitch"),
  ("Staples"),
  ("Star Costumes"),
  ("Star Registry"),
  ("Star Wars Shop"),
  ("Starbucks Store"),
  ("Starrett"),
  ("StarStruck.com"),
  ("StarTech.com"),
  ("StartLogic"),
  ("StarTrac Fitness Products"),
  ("Staub"),
  ("Stauer"),
  ("Staybridge Suites"),
  ("Stealth Auto"),
  ("Stearns Foster"),
  ("Steel Toe Shoes"),
  ("Steelcase Store"),
  ("stefaniBags"),
  ("Steiff"),
  ("Stein Mart"),
  ("Steiner Sports Memorabilia"),
  ("Steve Madden"),
  ("Steve's Blinds & Wallpaper"),
  ("Stew Leonard's Gift Baskets"),
  ("STI"),
  ("StickerGiant"),
  ("Stiga"),
  ("Stokke"),
  ("Stone Mountain Handbags"),
  ("StoneFly"),
  ("Stonehouse Golf"),
  ("Stonewall Kitchen"),
  ("StorePhotos.com"),
  ("Storm"),
  ("Straight Talk"),
  ("Strap Perfect"),
  ("StrawberryNET.com"),
  ("StreetBeatCustoms.com"),
  ("StreetSideAuto.com"),
  ("Stride Rite"),
  ("StrollerDepot.com"),
  ("Strollers Co."),
  ("Strollers.com"),
  ("Stuart Weitzman"),
  ("StubHub"),
  ("Student Advantage"),
  ("Studio 6"),
  ("StuffedAnimals.com"),
  ("Stuhrling"),
  ("Stumps Prom & Party"),
  ("Style & Co."),
  ("StyleRocket.com"),
  ("Stylin' Trucks"),
  ("StylinOnline"),
  ("Subaru"),
  ("Suburban Extended Stay Hotel"),
  ("Successories.com"),
  ("SugarSync"),
  ("Sumitomo"),
  ("Summer Infant"),
  ("Summers Eve"),
  ("Summit"),
  ("SummitOnline"),
  ("Summitsoft"),
  ("Sun & Ski Sports"),
  ("Sun Diego"),
  ("Sun Jewelry"),
  ("Sun Microsystems"),
  ("Sunbeam"),
  ("Sunbelt Software"),
  ("Sundance Catalog"),
  ("Sundog Eyewear"),
  ("Sunglass Hut"),
  ("Sunpentown"),
  ("Sunsout"),
  ("Suomy"),
  ("Super 8"),
  ("Super Kmart"),
  ("Super Media Store"),
  ("Super Warehouse"),
  ("SuperBiiz"),
  ("Superformance"),
  ("Superior Nut Company"),
  ("SuperJeweler"),
  ("Supermicro"),
  ("Supershoes.com"),
  ("SuperTarget"),
  ("Suppliesplus.com"),
  ("Supra"),
  ("Sur La Table"),
  ("SurfRide.com"),
  ("SurfShelf"),
  ("Surfside Sports"),
  ("SurplusMags"),
  ("Surveillance-Video.com"),
  ("Surya"),
  ("Suunto"),
  ("Suunto Watches"),
  ("Suzi Chin"),
  ("Suzuki"),
  ("Swanson"),
  ("Swanstone"),
  ("Swarovski"),
  ("Swarovski CRYSTALLIZED"),
  ("Swatch"),
  ("Swell"),
  ("Swimline"),
  ("SwimSpot.com"),
  ("Swimsuitsforall.com"),
  ("SwingSetsandMore.com"),
  ("SwingsetSource.com"),
  ("Swing-Set-Superstore"),
  ("Swiss"),
  ("Swiss Army"),
  ("Swiss Colony"),
  ("Swiss Legend"),
  ("Swiss Military"),
  ("Swiss Watch International"),
  ("Swissotel Hotels & Resorts"),
  ("swissoutpost.com"),
  ("Sydney Love"),
  ("Symantec"),
  ("Symbol"),
  ("Szul"),
  ("T.M. Lewin"),
  ("TableTennisZone.com"),
  ("Tactics.com"),
  ("Tadashi"),
  ("Tafford"),
  ("Tag Heuer"),
  ("TailgatingPartySupply.com"),
  ("Takamine"),
  ("Tama"),
  ("Tamiya"),
  ("Tamrac"),
  ("Tamron"),
  ("Tanabe"),
  ("Tanga.com"),
  ("Taradel"),
  ("Target"),
  ("Target Greatland"),
  ("Targus"),
  ("TartBurners.com"),
  ("Taryn Rose"),
  ("TASER"),
  ("Tata"),
  ("TaxACT"),
  ("Taxbrain"),
  ("Taylor Gifts"),
  ("Taylor Made Golf Gear"),
  ("TaylorMade"),
  ("T-Bags"),
  ("TCPGlobal.com"),
  ("Tea Collection"),
  ("Tea Forte"),
  ("TeakFurnitureandMore.com"),
  ("TeakWickerandMore.com"),
  ("Teamstore.com"),
  ("Teavana"),
  ("Tech Craft"),
  ("Tech Depot"),
  ("Techno Marine"),
  ("Ted Baker"),
  ("Tees.com"),
  ("TeesForall.com"),
  ("TEIN"),
  ("Teleflora"),
  ("Telescopes.com"),
  ("TempleStClair.com"),
  ("Tennis Ball Machines Inc."),
  ("Tennis Express"),
  ("Terk"),
  ("Terrain"),
  ("Terrys Village"),
  ("Terry's Village"),
  ("Tesla"),
  ("Test Country"),
  ("Teutonia"),
  ("Teva"),
  ("Texas Hot Rods"),
  ("Texas Instruments"),
  ("TextbookLink.com"),
  ("Textbooks.com"),
  ("TextbookX.com"),
  ("T-Fal"),
  ("The Baby Outlet"),
  ("The Body Shop"),
  ("The Bon-Ton"),
  ("The Cat in the Hat Learning Library"),
  ("The Childrens Place"),
  ("The Childrens Wear Outlet"),
  ("The Class Watch"),
  ("The Comfort Company"),
  ("The Company Store"),
  ("The Crystal Company"),
  ("The First Years"),
  ("The Fruit Company"),
  ("The Furniture Paradise"),
  ("The Good Cook"),
  ("The Great Indoors"),
  ("The Headboard Store"),
  ("The Home Marketplace"),
  ("The J. Peterman Company"),
  ("The Karaoke Channel"),
  ("The Knot Wedding Shop"),
  ("The Limited"),
  ("The Literary Guild"),
  ("The Luxury Collection Hotels & Resorts"),
  ("The Memory Company"),
  ("The New York Times Online Store"),
  ("The North Face"),
  ("The Philadelphia Pass"),
  ("The Sak"),
  ("The Sharper Image"),
  ("The Shelving Store"),
  ("The Singing Machine"),
  ("The Space Store"),
  ("The Stitchery"),
  ("The Street"),
  ("The Trend Boutique"),
  ("The Walking Company"),
  ("The Wall Art Store"),
  ("The Watchery"),
  ("The Wedding Lens"),
  ("The Wine Spies"),
  ("TheAccentChairStore.com"),
  ("TheAmoireStore.com"),
  ("TheCartoonNetworkShop.com"),
  ("TheChinaCabinetStore.com"),
  ("TheCurioCabinetStore.com"),
  ("TheHomeBarStore.com"),
  ("The-House.com"),
  ("TheLightShop.com"),
  ("TheNaturalStore.com"),
  ("TheNerds.net"),
  ("TheNorthFace.com"),
  ("Theory"),
  ("TheOutdoorArtStore.com"),
  ("ThePerfumeSpot.com"),
  ("ThePosterBedStore.com"),
  ("The-Recliner-Store.com"),
  ("Thermador"),
  ("Thermos"),
  ("TheSleighBedStore.com"),
  ("TheSolidWoodStore.com"),
  ("TheTopSecret.com"),
  ("Thierry Mugler"),
  ("Things From Another World"),
  ("Things Remembered"),
  ("Think!"),
  ("ThinkGeek"),
  ("Thomas Pink"),
  ("Thomasville"),
  ("Thompson Cigar"),
  ("Thor"),
  ("THQ"),
  ("Three Dogs Bakery"),
  ("Thrifty"),
  ("TickCo Premium Seating"),
  ("TicketMaster"),
  ("TicketNetwork"),
  ("TicketsNow"),
  ("Ties.com"),
  ("Tiffany"),
  ("TiffanyLampsGalore.com"),
  ("Tiffen"),
  ("Tiger Direct"),
  ("Tiger Supplies"),
  ("TigerGPS.com"),
  ("TIGI"),
  ("Tignanello"),
  ("Tilly's"),
  ("Timberland"),
  ("TimeForMeCatalog.com"),
  ("TimeLife.com"),
  ("TimeToSpa.com"),
  ("Timex"),
  ("TimeZone123"),
  ("Tiny Prints"),
  ("TipToeTurtle.com"),
  ("Tire Rack"),
  ("tires-easy.com"),
  ("Tissot"),
  ("Titan Peeler"),
  ("Titanium Kay"),
  ("Titleist"),
  ("TiVo"),
  ("TJ Formal"),
  ("TKO"),
  ("T-Mobile"),
  ("To Boot New York"),
  ("Toastess"),
  ("Toastmaster"),
  ("ToBeFast.com"),
  ("Tobi"),
  ("ToddlerBeds.com"),
  ("Tog Shop"),
  ("ToiletSeatSource.com"),
  ("Tokico"),
  ("TollFreeForwarding.com"),
  ("Tom Ford"),
  ("Tommy Bahama"),
  ("Tommy Hilfiger"),
  ("TOMS"),
  ("Toms of Maine"),
  ("TOMS Shoes"),
  ("Tomtom"),
  ("TomTom.com"),
  ("Tomy"),
  ("Toner Boss"),
  ("Tony Lama"),
  ("Tony Little"),
  ("Tool King"),
  ("Toolbarn.com"),
  ("ToolboxesDirect.com"),
  ("Top Flite"),
  ("Top of the World"),
  ("Top-Flite"),
  ("Topman"),
  ("TopOneShop.com"),
  ("Topps"),
  ("Topsy Turvy"),
  ("Toro"),
  ("Torrid.com"),
  ("Tory Burch"),
  ("Toshiba"),
  ("Total Gym"),
  ("Total Pet Supply"),
  ("Total Training"),
  ("TotalBedroom.com"),
  ("TotalSheetMusic"),
  ("TotalVac"),
  ("Toto"),
  ("Touch N Brush"),
  ("Touch of Europe"),
  ("Tour Edge"),
  ("Tova"),
  ("TowBehindTubes.com"),
  ("Towle"),
  ("Toy Biz World Wide"),
  ("Toyo"),
  ("Toyota"),
  ("Toys R Us"),
  ("Toys R Us Canada"),
  ("ToysandGamesOnline.com"),
  ("Tracfone Wireless"),
  ("TrackLightingSource.com"),
  ("Tractor Supply Company"),
  ("Tracy Porter"),
  ("Tracy Reese"),
  ("TradeKing"),
  ("TrafficMaster"),
  ("TrailerHitches.com"),
  ("Tramontina"),
  ("Trampoline Parts & Supply"),
  ("Trampolines Inc."),
  ("TrampolinesPlus.com"),
  ("Transcender"),
  ("Transit Museum Store"),
  ("Transparent Language"),
  ("TransUnion"),
  ("TrashCansandMore.com"),
  ("Travel Guard"),
  ("Travelation"),
  ("Travelers"),
  ("Travelocity"),
  ("Travelodge"),
  ("TravelSmith"),
  ("TreadClimber"),
  ("Treadmills Co."),
  ("Trend Micro"),
  ("Trend Times Toys"),
  ("TrendToGo"),
  ("Tretorn"),
  ("TRIA Beauty"),
  ("TriCityNewBalance.com"),
  ("TRIKKE"),
  ("Trina Turk"),
  ("Trinity Road"),
  ("Tripp Lite"),
  ("Trish McEvoy"),
  ("TriSports.com"),
  ("Tropicana Las Vegas"),
  ("Troy-Bilt"),
  ("True Religion"),
  ("True Religion Jeans"),
  ("TRU-FIT"),
  ("TrundleBedsDirect.com"),
  ("Trupanion"),
  ("TrustedID"),
  ("TSCHome.com"),
  ("TSCPets.com"),
  ("TSCToys.com"),
  ("T-shirt Outlet"),
  ("Tsubo"),
  ("TuckerBags.com"),
  ("Tumi"),
  ("TuneUp"),
  ("Tupperware"),
  ("TurboTax"),
  ("TurboTax Canada"),
  ("TurboTorch"),
  ("Turner Licensing"),
  ("TuttleCatalog.com"),
  ("TVR"),
  ("TVStands.com"),
  ("TVTraySource.com"),
  ("Twinlab"),
  ("Ty"),
  ("TYC"),
  ("TysToyBox.com"),
  ("U.S. Cavalry"),
  ("U.S. Divers"),
  ("U.S. Medical Supplies"),
  ("U.S. Toy Company"),
  ("uBid.com"),
  ("UbiSoft"),
  ("UFC Store"),
  ("Ugg"),
  ("Ujena"),
  ("U-Line"),
  ("ULTA Beauty"),
  ("UltimateBackStore.com"),
  ("Ultra Diamonds"),
  ("UltraFragrances.com"),
  ("Ulysse Nardin"),
  ("Umbro"),
  ("UnbeatableSale"),
  ("Uncle Graveyard"),
  ("Uncommon USA Flags & Flagpoles"),
  ("UnderArmour"),
  ("UnderArmour.com"),
  ("Undergear"),
  ("uneetee"),
  ("UnfinishedFurnitureSource.com"),
  ("Uniden"),
  ("Uniflame"),
  ("Uniform City"),
  ("Uniform Warehouse"),
  ("Unique"),
  ("UniqueHomeStore.com"),
  ("Uniroyal"),
  ("Unisa"),
  ("Unitech"),
  ("United Airlines"),
  ("United Nude"),
  ("United Vacations"),
  ("Unitrin Direct"),
  ("Universal"),
  ("University Games"),
  ("Unlisted"),
  ("UpandRiding.com"),
  ("Upholstery.com"),
  ("Uprinting.com"),
  ("Upscale Lighting"),
  ("Upurea"),
  ("UrbanBoundaries.com"),
  ("UrbanScooters.com"),
  ("US Pets"),
  ("US SEARCH"),
  ("USA TODAY"),
  ("USAopoly"),
  ("USCHO"),
  ("USOUTDOOR.com"),
  ("U-Store-It"),
  ("Utrecht Art"),
  ("Uttermost"),
  ("UWantSavings.com"),
  ("V.I.O."),
  ("Vacation Rental Homes"),
  ("Vacuum-Home.com"),
  ("Vagisil"),
  ("Valentino"),
  ("Valore Books"),
  ("Value Health Card"),
  ("ValueMags.com"),
  ("Van Cleef & Arpels"),
  ("Van Heusen"),
  ("Vaneli"),
  ("VanGuard"),
  ("Vanity Fair"),
  ("Vann's"),
  ("Vans"),
  ("Vasque"),
  ("Vaughan"),
  ("Vault"),
  ("Vauxhall"),
  ("Vayama"),
  ("Vdara"),
  ("VDO"),
  ("VeggieTales"),
  ("Vent-A-Hood"),
  ("VentingDirect.com"),
  ("Vera Bradley"),
  ("Vera Wang"),
  ("Veratex"),
  ("Verizon"),
  ("Verizon Broadband Services"),
  ("Vermont Teddy Bear"),
  ("Versace"),
  ("Verseo.com"),
  ("Veterans Advantage"),
  ("Vetionx Pet Health"),
  ("Vetrinex"),
  ("Via Spiga"),
  ("Viator"),
  ("Victorias Secret"),
  ("Victorinox"),
  ("VictorPest.com"),
  ("Vidal Sassoon"),
  ("Video Collection"),
  ("VideogameChairs.com"),
  ("ViewSonic"),
  ("Viking"),
  ("Villaware"),
  ("Villeroy & Boch"),
  ("Vince Camuto"),
  ("Vincent Shoes"),
  ("Vinotemp"),
  ("Vintage Tub and Bath"),
  ("VIPFanClubs.com"),
  ("Virco"),
  ("Virgin Atlantic"),
  ("VisaCenter"),
  ("Vision Decor"),
  ("Vision Direct"),
  ("VISITicket"),
  ("VistaPrint.com"),
  ("Vitalicious"),
  ("Vitamin Shoppe"),
  ("Vitamin World"),
  ("Vita-Mix"),
  ("Vivastay"),
  ("Vivid Seats"),
  ("Vivienne Westwood"),
  ("Vivitar"),
  ("Vivre"),
  ("Vizio"),
  ("VMWare"),
  ("VogueWigs.com"),
  ("Volant"),
  ("Volatile"),
  ("Volcom"),
  ("Volkswagen"),
  ("VolleyballHeadquarters.com"),
  ("Vollrath"),
  ("Volvo"),
  ("Von Maur"),
  ("Von Zipper"),
  ("Vonage"),
  ("Vondutch"),
  ("Vons"),
  ("Vornado"),
  ("Vosges Chocolates"),
  ("VRBO"),
  ("VTech"),
  ("Vuarnet"),
  ("W Hotels"),
  ("Wacoal"),
  ("Wagner"),
  ("Wahl"),
  ("Walgreens"),
  ("WalkFit"),
  ("Wall Street Journal"),
  ("Wallpaper For Windows"),
  ("Walmart"),
  ("Wal-Mart"),
  ("Wal-Mart Supercenter"),
  ("Walter Drake"),
  ("Wanted Shoes"),
  ("Ward's Natural Science"),
  ("Waring"),
  ("Warn"),
  ("Warner Bros."),
  ("Warners"),
  ("Warwick"),
  ("Washburn"),
  ("Watchzone.com"),
  ("Water.com"),
  ("Waterbed.com"),
  ("Waterfilters.net"),
  ("Waterford"),
  ("WaterOutfitters.com"),
  ("Wayside Gardens"),
  ("WaySpa"),
  ("WD"),
  ("Wearever"),
  ("WeatherInstruments.com"),
  ("WeatherTech"),
  ("Web.com"),
  ("Weber"),
  ("Webko"),
  ("Webroot"),
  ("WebWatcher"),
  ("Wedding Channel Store"),
  ("Wedding Paper Divas"),
  ("Wedding Tracker"),
  ("Wedgewood"),
  ("Wedgwood"),
  ("Weed Eater"),
  ("Weider"),
  ("Weight Watchers"),
  ("Welch Allyn"),
  ("Wellness"),
  ("WEN"),
  ("Wendy Culpepper"),
  ("Wenger"),
  ("Wenzel"),
  ("Weslo"),
  ("West Elm"),
  ("West Marine"),
  ("Westbend"),
  ("Western Chief"),
  ("Westfield"),
  ("Westin"),
  ("Westinghouse"),
  ("wet n wild"),
  ("Wet Seal"),
  ("Whales & Friends"),
  ("Whatever Works"),
  ("WheatGrassKits.com"),
  ("WheelchairSelect.com"),
  ("Whirlpool"),
  ("White House Black Market"),
  ("White Mountain"),
  ("WhiteBoardsandMore.com"),
  ("Whitehall Products"),
  ("WhiteSmoke"),
  ("Whiting & Davis"),
  ("Wholesale Costume Club"),
  ("Wholesale Furniture Brokers"),
  ("Wholesalebulbs"),
  ("Whynter"),
  ("WickerChairs.com"),
  ("WickerFurniture.com"),
  ("Wild Republic"),
  ("WildGames"),
  ("Williams-Sonoma"),
  ("Williams-Sonoma Home"),
  ("Willow Ridge"),
  ("Willygoat"),
  ("Wilson"),
  ("Wilson Jones"),
  ("Wilson's Leather"),
  ("Wilton"),
  ("Winchester"),
  ("Winco"),
  ("Wincraft"),
  ("Wind and Weather"),
  ("Windchaser"),
  ("WindChime.com"),
  ("Windshield Wonder"),
  ("Windsor"),
  ("Wine Access"),
  ("Wine Coolers Store"),
  ("Wine Enthusiast"),
  ("Wine Express"),
  ("Wine Messenger"),
  ("Wine Racks Inc."),
  ("Wine.com"),
  ("WineCoolerDirect.com"),
  ("WineCoolers.com"),
  ("WineRefigerator.com"),
  ("Wingate"),
  ("Wirefly"),
  ("WirelessEmporium.com"),
  ("Wisconsin Cheeseman"),
  ("Wissota Trader"),
  ("Wittnauer"),
  ("Wolferman's"),
  ("Wolfgang Puck"),
  ("Wolfgang's Vault"),
  ("Wolford"),
  ("Wolverine"),
  ("Woman Within"),
  ("Wondershare"),
  ("Woodall's"),
  ("Woodgamz"),
  ("Woodwind & Brasswind"),
  ("Woodworkersbookshop.com"),
  ("Woolrich"),
  ("World Book"),
  ("World Class Ink"),
  ("World Industries"),
  ("World Keeper Shop"),
  ("World Lacrosse Shop"),
  ("World Market"),
  ("World Rugby Shop"),
  ("World Vital Records"),
  ("World Wide Gourmet Foods"),
  ("World Wrestling Entertainment"),
  ("WorldGlobes.com"),
  ("WorldSoccerShop.com"),
  ("Worldwide Sport Supply"),
  ("Worthington"),
  ("WORX Yard Tools"),
  ("Wrangler"),
  ("Wrangler.com"),
  ("Wrapables.com"),
  ("Wrapsol"),
  ("WreathsGalore.com"),
  ("WritersDigestShop.com"),
  ("WritingDesks.com"),
  ("WritingDesksandMore.com"),
  ("WSJ Wine"),
  ("WTDirect"),
  ("Wusthof"),
  ("Wyndham Hotels and Resorts"),
  ("Wynn"),
  ("Wysong"),
  ("X10 Wireless"),
  ("Xenon Project"),
  ("Xerox"),
  ("XHeli RC Helicopter"),
  ("Xhilaration"),
  ("Xperience Days"),
  ("X-Treme Geek"),
  ("Yahoo! Games"),
  ("Yahoo! Hotjobs"),
  ("Yahoo! Personals"),
  ("Yahoo! Web Hosting"),
  ("Yamaha"),
  ("Yard Man"),
  ("Yellow Box"),
  ("YLighting"),
  ("YogaAccessories.com"),
  ("Yokohama"),
  ("Yola"),
  ("Yonex"),
  ("YOOX"),
  ("York Photo"),
  ("Youneek.com"),
  ("Young Explorers"),
  ("Younkers"),
  ("Your Baby Can Read"),
  ("Your Electronics Warehouse"),
  ("Your Photo On Canvas"),
  ("YourCover.com"),
  ("Yowza Fitness"),
  ("YO-ZURI"),
  ("YSL Beauty"),
  ("YumDrop.com"),
  ("Yves Rocher"),
  ("Yves Saint Laurent"),
  ("Z1R Helmets"),
  ("Zagat"),
  ("Zagat Wine"),
  ("ZAGG"),
  ("Zales"),
  ("Zappos.com"),
  ("Zazzle"),
  ("Zebco"),
  ("Zebra Technologies"),
  ("Zecco Trading"),
  ("Zeiss"),
  ("Zend"),
  ("Zenith"),
  ("Zenobia"),
  ("Zephyr"),
  ("Zephyr Sports"),
  ("Ziamond"),
  ("Zigi"),
  ("Zinik"),
  ("Zinio Digital Magazines"),
  ("ZipRealty"),
  ("ZipZoomfly.com"),
  ("Zodiac"),
  ("Zojirushi"),
  ("ZoneAlarm"),
  ("Zoo York"),
  ("Zoobooks Magazine"),
  ("Zoosk"),
  ("Zulily"),
  ("Zuo Modern"),
  ("Taco Bell"),
  ("A4"),
  ("Accent"),
  ("Acclaim"),
  ("Accord"),
  ("Achieva"),
  ("Aerio"),
  ("Aerostar"),
  ("Alero"),
  ("Allante"),
  ("Alliance"),
  ("Altima"),
  ("Alto"),
  ("Amigo"),
  ("Aries"),
  ("Arnage"),
  ("Arrow"),
  ("Ascender"),
  ("Aspen"),
  ("Aspire"),
  ("Astro"),
  ("Aurora"),
  ("Austin"),
  ("Avalanche"),
  ("Avenger"),
  ("Aveo"),
  ("Aviator"),
  ("Axiom"),
  ("Axxess"),
  ("Aztek"),
  ("Azure"),
  ("Baja"),
  ("Barchetta"),
  ("Beetle"),
  ("Beretta"),
  ("Blackwood"),
  ("Blazer"),
  ("Bonneville"),
  ("Boxter"),
  ("Brat"),
  ("Brava"),
  ("Bravada"),
  ("Breeze"),
  ("Bronco"),
  ("Brooklands"),
  ("Brougham"),
  ("Caballero"),
  ("Cabrio"),
  ("Cabriolet"),
  ("Calais"),
  ("Camargue"),
  ("Camry"),
  ("Capri"),
  ("Caprice"),
  ("Caravan"),
  ("Caravelle"),
  ("Catera"),
  ("Cavalier"),
  ("Cayenne"),
  ("Celebrity"),
  ("Celica"),
  ("Century"),
  ("Challenger"),
  ("Champ"),
  ("Charade"),
  ("Charger"),
  ("Cherokee"),
  ("Chevelle"),
  ("Chevette"),
  ("Cheyenne"),
  ("Ciera"),
  ("Cimarron"),
  ("Cirrus"),
  ("Citation"),
  ("City"),
  ("Civic"),
  ("Club Wagon"),
  ("Colorado"),
  ("Colt"),
  ("Comanche"),
  ("Concord"),
  ("Concorde"),
  ("Conquest"),
  ("Continental"),
  ("Contour"),
  ("Cooper"),
  ("Cordia"),
  ("Cordoba"),
  ("Corniche"),
  ("Corolla"),
  ("Corrado"),
  ("Corsica"),
  ("Corvette"),
  ("Cougar"),
  ("Countach"),
  ("Courier"),
  ("Cressida"),
  ("Crown Victoria"),
  ("Cultus"),
  ("Cutlass"),
  ("Dart"),
  ("Dasher"),
  ("Daytona"),
  ("Defender"),
  ("del Sol"),
  ("DeVille"),
  ("Diablo"),
  ("Diamante"),
  ("Dino"),
  ("Diplomat"),
  ("Discovery"),
  ("DTS"),
  ("Durango"),
  ("Duster"),
  ("Dynasty"),
  ("Eagle"),
  ("Echo"),
  ("Eclipse"),
  ("Econoline"),
  ("Edge"),
  ("Eight"),
  ("Eighty-Eight"),
  ("Elantra"),
  ("ElCamino"),
  ("Eldorado"),
  ("Electra"),
  ("Element"),
  ("Encore"),
  ("Envoy"),
  ("Equinox"),
  ("Escalade"),
  ("Escape"),
  ("Escort"),
  ("Esperante"),
  ("Esprit"),
  ("Estate"),
  ("Esteem"),
  ("Eurovan"),
  ("Excel"),
  ("Excursion"),
  ("Expedition"),
  ("Explorer"),
  ("Expo"),
  ("Express"),
  ("Fairmont"),
  ("Festiva"),
  ("Fiero"),
  ("Fifth Avenue"),
  ("Firebird"),
  ("Firenza"),
  ("Fleetwood"),
  ("Flex Crossover"),
  ("Focus"),
  ("Forester"),
  ("Fox"),
  ("Freelander"),
  ("Frontier"),
  ("Fuego"),
  ("FX Suzuki"),
  ("Galant"),
  ("Golf"),
  ("Graduate"),
  ("Gran Fury"),
  ("Grand Am"),
  ("Grand Prix"),
  ("Grand Voyager"),
  ("Gremlin"),
  ("Grenada"),
  ("GTO"),
  ("Highlander"),
  ("Hombre"),
  ("Horizon"),
  ("Hornet"),
  ("Hummer"),
  ("Impala"),
  ("Imperial"),
  ("Impreza"),
  ("Impulse"),
  ("Insight"),
  ("Integra"),
  ("Intrepid"),
  ("Intrigue"),
  ("Javelin"),
  ("Jetta"),
  ("Jimmy"),
  ("Jimny"),
  ("Justy"),
  ("Karmann Ghia"),
  ("Khyber - Suzuki"),
  ("Kodiak"),
  ("Lagonda"),
  ("Lancer"),
  ("Land Cruiser"),
  ("Lanos"),
  ("Laser"),
  ("LeBaron"),
  ("Legacy"),
  ("Leganza"),
  ("Legend"),
  ("LeMans"),
  ("LeSabre"),
  ("Liberte"),
  ("Liberty"),
  ("Loyale"),
  ("Lumina"),
  ("Luv"),
  ("Lynx"),
  ("Malibu"),
  ("Mangusta"),
  ("Marquis"),
  ("Matador"),
  ("Matrix"),
  ("Maxima"),
  ("Medallion"),
  ("Mehran"),
  ("Metro"),
  ("Miata"),
  ("Midget"),
  ("Milano"),
  ("Millenia"),
  ("Mirada"),
  ("Mirage"),
  ("Modena"),
  ("Monaco"),
  ("Mondial"),
  ("Montana"),
  ("Monte Carlo"),
  ("Montero"),
  ("Monza"),
  ("Morris"),
  ("Mountaineer"),
  ("Mulsanne"),
  ("Murano"),
  ("Murcielago"),
  ("Mustang"),
  ("Mystique"),
  ("Naked"),
  ("Navajo"),
  ("Navigator"),
  ("Neon"),
  ("New Yorker"),
  ("Newport"),
  ("Ninety-Eight"),
  ("Nova"),
  ("NSX"),
  ("Nubira"),
  ("Oasis"),
  ("Odyssey"),
  ("Omega"),
  ("Omni"),
  ("Optima"),
  ("Outback"),
  ("Outlander"),
  ("Pacer"),
  ("Pacifica"),
  ("Pajero"),
  ("Parisienne"),
  ("Park Avenue"),
  ("Park Ward"),
  ("Paseo"),
  ("Passat"),
  ("Passport"),
  ("Pathfinder"),
  ("Phaeton"),
  ("Phantom"),
  ("Phoenix"),
  ("Pilot"),
  ("Pinto"),
  ("Pivo"),
  ("Pininfarina"),
  ("Precis"),
  ("Prelude"),
  ("Premier"),
  ("Previa"),
  ("Prizm"),
  ("Probe"),
  ("Protégé"),
  ("Prowler"),
  ("Pruis"),
  ("PT Cruiser"),
  ("Pulsar"),
  ("Puyo"),
  ("Quadrifoglio"),
  ("Quantum"),
  ("Quattro"),
  ("Quest"),
  ("R8"),
  ("Rabbit"),
  ("Raider"),
  ("Rally"),
  ("Ram"),
  ("Ramcharger"),
  ("Rampage"),
  ("Range Rover"),
  ("Ranger"),
  ("Reatta"),
  ("Rebel"),
  ("Regal"),
  ("Regency"),
  ("Reliant"),
  ("Reventon"),
  ("Rendezvous"),
  ("Rio"),
  ("Riviera"),
  ("Roadmaster"),
  ("Roadster"),
  ("Rocky"),
  ("Rodeo"),
  ("Sable"),
  ("Safari"),
  ("Safari"),
  ("Samuri"),
  ("Santa Fe"),
  ("Sapporo"),
  ("Savana"),
  ("Scamp"),
  ("Scirocco"),
  ("Scorpio"),
  ("Scrambler"),
  ("Sebring"),
  ("Sedona"),
  ("Sentra"),
  ("Sephia"),
  ("Sequoia"),
  ("Seville"),
  ("Shadow"),
  ("Sidekick"),
  ("Sienna"),
  ("Sierra"),
  ("Sigma"),
  ("Silhouette"),
  ("Silver Dawn"),
  ("Silver Seraph"),
  ("Silver Shadow"),
  ("Silver Spirit"),
  ("Silver Spur"),
  ("Silver Wraith"),
  ("Silverado"),
  ("Skyhawk"),
  ("Skylark"),
  ("Solara"),
  ("Somerset"),
  ("Sonata"),
  ("Sonoma"),
  ("Sorento"),
  ("Spectra"),
  ("Spectrum"),
  ("Spider"),
  ("Spirit"),
  ("Sportage"),
  ("Sportvan"),
  ("Sprint"),
  ("Spyder"),
  ("St. Regis"),
  ("Stanza"),
  ("Starion"),
  ("Starlet"),
  ("Stealth"),
  ("Storm"),
  ("Strada"),
  ("Stratus"),
  ("Stylus"),
  ("Suburban"),
  ("Suburban"),
  ("Summit"),
  ("Sunbird"),
  ("Sundance"),
  ("Sunfire"),
  ("Supra"),
  ("Swift"),
  ("Tacoma"),
  ("Tahoe"),
  ("Talon"),
  ("Taurus"),
  ("Tempo"),
  ("Tercel"),
  ("Testarossa"),
  ("Thunderbird"),
  ("Tiburon"),
  ("Titan"),
  ("Topaz"),
  ("Toronado"),
  ("Touareg"),
  ("Town & Country"),
  ("Town Car"),
  ("tracker"),
  ("TrailBlazer"),
  ("Trans Sport"),
  ("Tredia"),
  ("Tribute"),
  ("Trooper"),
  ("Tundra"),
  ("Turbo"),
  ("Turismo"),
  ("UNO"),
  ("Uplander"),
  ("Vanagon"),
  ("Vandura"),
  ("Vanquish"),
  ("Vantage"),
  ("VehiCROSS"),
  ("Venture"),
  ("Vibe"),
  ("Vigor"),
  ("Villager"),
  ("Viper"),
  ("Virage"),
  ("Vision"),
  ("Vitara"),
  ("Volare"),
  ("Voyager"),
  ("Wagoneer"),
  ("Windstar"),
  ("Wrangler"),
  ("Xantia"),
  ("Xterra"),
  ("Yaris"),
  ("Yukon"),
  ("Zephyr"),
  ("Alfa Romeo 159"),
  ("Aston Martin DB9 Lexus"),
  ("Audi A4"),
  ("Audi A6"),
  ("Audi A6 Jaguar"),
  ("Audi A8"),
  ("Audi TT"),
  ("Austin Mini"),
  ("BMW 3 Series"),
  ("BMW 5 Series"),
  ("BMW 6 Series"),
  ("BMW M5 Dodge"),
  ("BMW X3"),
  ("BMW X5 Chevrolet"),
  ("BMW X6 Mid-size"),
  ("Bugatti Veyron"),
  ("Cadillac Escalade EXT"),
  ("Chevrolet Colorado"),
  ("Chevrolet Corvette"),
  ("Chevrolet Malibu"),
  ("Chevrolet Montana"),
  ("Chevrolet Silverado"),
  ("Chevrolet Suburban"),
  ("Chrysler 300"),
  ("Chrysler 300C"),
  ("Chrysler Town and Country"),
  ("Citroen C1"),
  ("Citroën C1 Main"),
  ("Citroen C3 Picasso"),
  ("Citroen C5 Toyota"),
  ("CR-V"),
  ("Daewoo Matiz"),
  ("Daihatsu Charade"),
  ("Daihatsu Terios"),
  ("Dodge Ram"),
  ("Dodge SRT-4"),
  ("Dodge Viper"),
  ("Ferrari 612 Scaglietti"),
  ("Ferrari Enzo"),
  ("Fiat 500"),
  ("Fiat Strada"),
  ("Ford Crown Victoria"),
  ("Ford Escape"),
  ("Ford Explorer"),
  ("Ford F-150"),
  ("Ford Fiesta"),
  ("Ford Focus"),
  ("Ford Galaxy"),
  ("Ford Ka"),
  ("Ford Mondeo"),
  ("Ford Mustang"),
  ("Ford Ranger"),
  ("GMC Sierra"),
  ("GTI"),
  ("Holden Barina"),
  ("Holden Commodore"),
  ("Honda Odyssey"),
  ("Honda S2000"),
  ("Honda S2000 Volkswagen"),
  ("Jaguar XF"),
  ("Jaguar XK"),
  ("Jaguar XK8 Main"),
  ("Jeep Grand Cherokee"),
  ("Jeep Liberty"),
  ("Lexus GS"),
  ("Lexus IS"),
  ("Lincoln LS"),
  ("Lincoln Town Car"),
  ("Lotus Elise"),
  ("Maserati Quattroporte"),
  ("Mazda MX-5"),
  ("Mercedes S-Class"),
  ("MG T"),
  ("Mini 4x4"),
  ("Mitsubishi Pajero iO"),
  ("Mitsubishi Triton"),
  ("Nissan Titan"),
  ("Opel Astra"),
  ("Opel Corsa"),
  ("Opel Insignia"),
  ("Opel Zafira"),
  ("Peugeot 107"),
  ("Pony"),
  ("Porsche 911"),
  ("Porsche Boxster"),
  ("Samsung L200 Digital Camera"),
  ("Škoda Roomster"),
  ("Smart Fortwo"),
  ("Suzuki Jimny"),
  ("Toyota Auris"),
  ("Toyota Corolla"),
  ("Toyota Crown"),
  ("Toyota Land Cruiser"),
  ("Toyota RAV4"),
  ("Volkswagen Eos"),
  ("Volkswagen Golf"),
  ("Volkswagen Passat"),
  ("Volkswagen Polo"),
  ("Volkswagen Touareg"),
  ("Volkswagen Touran"),
  ("Volvo C70"),
  ("Volvo S60"),
  ("Volvo S80"),
  ("Acura"),
  ("Audi"),
  ("BMW"),
  ("Buick"),
  ("Cadillac"),
  ("Chevrolet"),
  ("Chrysler"),
  ("Dodge"),
  ("Dodge Charger"),
  ("Eagle"),
  ("Ferrari"),
  ("Ford"),
  ("General Motors"),
  ("GM"),
  ("Global Electric Motorcars"),
  ("GMC"),
  ("Honda"),
  ("Hummer"),
  ("Hyundai"),
  ("Infiniti"),
  ("Isuzu"),
  ("Jaguar"),
  ("Jeep"),
  ("Kia Motors"),
  ("Kia"),
  ("Lamborghini"),
  ("Land Rover"),
  ("Lexus"),
  ("Lincoln"),
  ("Lotus"),
  ("Mazda"),
  ("Mercedes-Benz"),
  ("Mercedes Benz"),
  ("Mercury"),
  ("Mitsubishi Motors"),
  ("Nissan"),
  ("Oldsmobile"),
  ("Peugeot"),
  ("Pontiac"),
  ("Porsche"),
  ("Regal"),
  ("Saab"),
  ("Saturn"),
  ("Subaru"),
  ("Suzuki"),
  ("Toyota"),
  ("Volkswagen"),
  ("Volvo"),
  ("Accessory Power"),
  ("Aftermarket"),
  ("Altec Lansing"),
  ("Apple"),
  ("Bargaincell"),
  ("Belkin"),
  ("Bose"),
  ("Cables To Buy"),
  ("Coby"),
  ("Crazyondigital"),
  ("Cyber Acoustics"),
  ("DigitalsOnDemand"),
  ("EARBUDi"),
  ("Easyi"),
  ("Generic"),
  ("Griffin Technology"),
  ("iKross"),
  ("iPhone"),
  ("iPod"),
  ("iSound"),
  ("JLAB"),
  ("Kensington"),
  ("Kidz Gear"),
  ("Klipsch"),
  ("Koss"),
  ("Logitech"),
  ("Lux"),
  ("Luxmo"),
  ("Marware"),
  ("Microsoft"),
  ("Monster"),
  ("MPI"),
  ("Neewer Electronics Accessories"),
  ("OtterBox"),
  ("Panasonic"),
  ("PCMicroStore"),
  ("Philips"),
  ("Power Accessories"),
  ("SanDisk"),
  ("Scosche"),
  ("Sennheiser"),
  ("SF Planet"),
  ("SKQUE"),
  ("Skullcandy"),
  ("Sony"),
  ("Splash"),
  ("Tune Belt"),
  ("Unknown"),
  ("Vangoddy"),
  ("XMI"),
  ("Cadburys"),
  ("Cadbury")
);
CreateDict(
    "name" => "purchases/brands.dict",
    "table" => "purchases/brands.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/buyintents.dict'
CreateTable(
  "purchases/buyintents.dict__TABLE",
  ("entry" => "Text"),
  ("looking for"),
  ("lookin for"),
  ("lookin to"),
  ("looking to"),
  ("thinking of"),
  ("thinkin of"),
  ("thinkin about"),
  ("thinking about"),
  ("plan to"),
  ("plan on"),
  ("planning"),
  ("want to"),
  ("wanna"),
  ("where do"),
  ("where can"),
  ("need"),
  ("have to have"),
  ("in the market"),
  ("hunt"),
  ("intend to"),
  ("afford"),
  ("what kind of"),
  ("what to"),
  ("what should"),
  ("what shud"),
  ("what do you think about"),
  ("interested in"),
  ("decided"),
  ("deciding on"),
  ("going to")
);
CreateDict(
    "name" => "purchases/buyintents.dict",
    "table" => "purchases/buyintents.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/conj.dict'
CreateTable(
  "purchases/conj.dict__TABLE",
  ("entry" => "Text"),
  ("for"),
  ("and"),
  ("nor"),
  ("but"),
  ("or"),
  ("yet"),
  ("so")
);
CreateDict(
    "name" => "purchases/conj.dict",
    "table" => "purchases/conj.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/country.dict'
CreateTable(
  "purchases/country.dict__TABLE",
  ("entry" => "Text"),
  ("Afghanistan"),
  ("Albania"),
  ("Algeria"),
  ("Andorra"),
  ("Angola"),
  ("Antigua and Barbuda"),
  ("Argentina"),
  ("Armenia"),
  ("Australia"),
  ("Austria"),
  ("Azerbaijan"),
  ("Bahamas"),
  ("Bahrain"),
  ("Bangladesh"),
  ("Barbados"),
  ("Belarus"),
  ("Belgium"),
  ("Belize"),
  ("Benin"),
  ("Bhutan"),
  ("Bolivia"),
  ("Bosnia and Herzegovina"),
  ("Botswana"),
  ("Brazil"),
  ("Brazzaville"),
  ("Britain"),
  ("Brunei"),
  ("Bulgaria"),
  ("Burkina Faso"),
  ("Burundi"),
  ("C�te d'Ivoire"),
  ("Cambodia"),
  ("Cameroon"),
  ("Canada"),
  ("Cape Verde"),
  ("Central African Republic"),
  ("Chad"),
  ("Chile"),
  ("China"),
  ("Colombia"),
  ("Comoros"),
  ("Congo"),
  ("Costa Rica"),
  ("Croatia"),
  ("Cuba"),
  ("Cyprus"),
  ("Czech Republic"),
  ("Denmark"),
  ("Djibouti"),
  ("Dominica"),
  ("Dominican Republic"),
  ("East Timor"),
  ("Ecuador"),
  ("Egypt"),
  ("El Salvador"),
  ("Equatorial Guinea"),
  ("Eritrea"),
  ("Estonia"),
  ("Ethiopia"),
  ("Fiji"),
  ("Finland"),
  ("France"),
  ("Gabon"),
  ("Gambia"),
  ("Georgia"),
  ("Germany"),
  ("Ghana"),
  ("Greece"),
  ("Grenada"),
  ("Guatemala"),
  ("Guinea"),
  ("Guinea-Bissau"),
  ("Guyana"),
  ("Haiti"),
  ("Honduras"),
  ("Hungary"),
  ("Iceland"),
  ("India"),
  ("Indonesia"),
  ("Iran"),
  ("Iraq"),
  ("Ireland"),
  ("Israel"),
  ("Italy"),
  ("Jamaica"),
  ("Japan"),
  ("Jordan"),
  ("Kazakhstan"),
  ("Kenya"),
  ("Kiribati"),
  ("Korea, North"),
  ("North Korea"),
  ("Korea, South"),
  ("South Korea"),
  ("Kuwait"),
  ("Kyrgyzstan"),
  ("Laos"),
  ("Latvia"),
  ("Lebanon"),
  ("Lesotho"),
  ("Liberia"),
  ("Libya"),
  ("Liechtenstein"),
  ("Lithuania"),
  ("Luxembourg"),
  ("Macedonia"),
  ("Madagascar"),
  ("Malawi"),
  ("Malaysia"),
  ("Maldives"),
  ("Mali"),
  ("Malta"),
  ("Marshall Islands"),
  ("Mauritania"),
  ("Mauritius"),
  ("Mexico"),
  ("Micronesia"),
  ("Moldova"),
  ("Monaco"),
  ("Mongolia"),
  ("Morocco"),
  ("Mozambique"),
  ("Myanmar"),
  ("Namibia"),
  ("Nauru"),
  ("Nepal"),
  ("Netherlands"),
  ("New Zealand"),
  ("Nicaragua"),
  ("Niger"),
  ("Nigeria"),
  ("Norway"),
  ("Oman"),
  ("Pakistan"),
  ("Palau"),
  ("Panama"),
  ("Papua New Guinea"),
  ("Paraguay"),
  ("Peru"),
  ("Philippines"),
  ("Poland"),
  ("Portugal"),
  ("Puerto Rico"),
  ("Qatar"),
  ("Romania"),
  ("Russia"),
  ("Rwanda"),
  ("Saint Kitts and Nevis"),
  ("Saint Lucia"),
  ("Saint Vincent and The Grenadines"),
  ("Samoa"),
  ("San Marino"),
  ("Sao Tome and Principe"),
  ("Saudi Arabia"),
  ("Senegal"),
  ("Serbia and Montenegro"),
  ("Seychelles"),
  ("Sierra Leone"),
  ("Singapore"),
  ("Slovakia"),
  ("Slovenia"),
  ("Solomon Islands"),
  ("Somalia"),
  ("South Africa"),
  ("Spain"),
  ("Sri Lanka"),
  ("Sudan"),
  ("Suriname"),
  ("Swaziland"),
  ("Sweden"),
  ("Switzerland"),
  ("Syria"),
  ("Taiwan"),
  ("Tajikistan"),
  ("Tanzania"),
  ("Thailand"),
  ("Timor Timur"),
  ("Togo"),
  ("Tonga"),
  ("Trinidad and Tobago"),
  ("Tunisia"),
  ("Turkey"),
  ("Turkmenistan"),
  ("Tuvalu"),
  ("U.S."),
  ("U.S.A."),
  ("Uganda"),
  ("Ukraine"),
  ("United Arab Emirates"),
  ("United Kingdom"),
  ("United States"),
  ("United States of America"),
  ("Uruguay"),
  ("Uzbekistan"),
  ("Vanuatu"),
  ("Vatican City"),
  ("Venezuela"),
  ("Vietnam"),
  ("Virgin Islands"),
  ("Western Sahara"),
  ("Yemen"),
  ("Zambia"),
  ("Zimbabwe")
);
CreateDict(
    "name" => "purchases/country.dict",
    "table" => "purchases/country.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/feedback.dict'
CreateTable(
  "purchases/feedback.dict__TABLE",
  ("entry" => "Text"),
  ("suggest"),
  ("opinion"),
  ("recommendation"),
  ("recommend"),
  ("point to"),
  ("ideas"),
  ("advice"),
  ("advise"),
  ("clues"),
  ("hints"),
  ("decision")
);
CreateDict(
    "name" => "purchases/feedback.dict",
    "table" => "purchases/feedback.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/firstperson.dict'
CreateTable(
  "purchases/firstperson.dict__TABLE",
  ("entry" => "Text"),
  ("i"),
  ("id"),
  ("i'd"),
  ("im"),
  ("i'm"),
  ("my"),
  ("me")
);
CreateDict(
    "name" => "purchases/firstperson.dict",
    "table" => "purchases/firstperson.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/negate.dict'
CreateTable(
  "purchases/negate.dict__TABLE",
  ("entry" => "Text"),
  ("aint"),
  ("ain't"),
  ("arent"),
  ("aren't"),
  ("cannot"),
  ("cant"),
  ("can't"),
  ("couldnt"),
  ("couldn't"),
  ("didnt"),
  ("didn't"),
  ("doesnt"),
  ("doesn't"),
  ("dont"),
  ("don"),
  ("don't"),
  ("reallydon't"),
  ("reallydont"),
  ("reallydon"),
  ("idon't"),
  ("idont"),
  ("hadnt"),
  ("hadn't"),
  ("hasnt"),
  ("hasn't"),
  ("havent"),
  ("haven't"),
  ("isnt"),
  ("isn't"),
  ("mustnt"),
  ("must'nt"),
  ("mustn't"),
  ("neednt"),
  ("need'nt"),
  ("needn't"),
  ("negat*"),
  ("neither"),
  ("never"),
  ("no"),
  ("nobod*"),
  ("none"),
  ("nope"),
  ("nor"),
  ("not"),
  ("nt"),
  ("nothing"),
  ("nowhere"),
  ("oughtnt"),
  ("ought'nt"),
  ("oughtn't"),
  ("shant"),
  ("shan't"),
  ("shouldnt"),
  ("should'nt"),
  ("shouldn't"),
  ("uhuh"),
  ("wasnt"),
  ("wasn't"),
  ("weren't"),
  ("without"),
  ("wont"),
  ("won't"),
  ("wouldnt"),
  ("wouldn't")
);
CreateDict(
    "name" => "purchases/negate.dict",
    "table" => "purchases/negate.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/notforsale.dict'
CreateTable(
  "purchases/notforsale.dict__TABLE",
  ("entry" => "Text"),
  ("patent"),
  ("picking"),
  ("picnic"),
  ("re focus"),
  ("tv series"),
  ("meeting"),
  ("marry"),
  ("clients"),
  ("take"),
  ("crush"),
  ("butt"),
  ("developer"),
  ("investor"),
  ("investors"),
  ("kid"),
  ("child"),
  ("children"),
  ("company"),
  ("firm"),
  ("organization"),
  ("dance"),
  ("song"),
  ("family"),
  ("families"),
  ("god"),
  ("escape"),
  ("motivation"),
  ("energy"),
  ("passion"),
  ("website"),
  ("thunder"),
  ("Mr.Right"),
  ("free"),
  ("inspiration"),
  ("somebody"),
  ("peace"),
  ("weekend"),
  ("problem"),
  ("meaning"),
  ("part time job"),
  ("any body"),
  ("sleep"),
  ("person"),
  ("any one"),
  ("sumthing"),
  ("something"),
  ("anyone"),
  ("anybody"),
  ("job"),
  ("someone"),
  ("time"),
  ("bf"),
  ("gf"),
  ("client"),
  ("myself"),
  ("jew"),
  ("guy"),
  ("gal"),
  ("boy"),
  ("girl"),
  ("man"),
  ("woman"),
  ("paradise"),
  ("love"),
  ("people"),
  ("companion"),
  ("friend"),
  ("husband"),
  ("wife"),
  ("hubbie"),
  ("son"),
  ("daughter"),
  ("daddy"),
  ("lad"),
  ("bf"),
  ("BOY"),
  ("BROTHER"),
  ("DAD"),
  ("DUDE"),
  ("FATHER"),
  ("GRANDDAD"),
  ("GRANDPA"),
  ("GRANDSON"),
  ("HUSBAND"),
  ("man"),
  ("men"),
  ("NEPHEW"),
  ("SON"),
  ("STEPFAT"),
  ("UNCLE"),
  ("gentleman"),
  ("bloke"),
  ("chap"),
  ("male"),
  ("gent"),
  ("fella"),
  ("dude"),
  ("Mr."),
  ("beau"),
  ("boyfriend"),
  ("papa"),
  ("sir"),
  ("bridegroom"),
  ("groom"),
  ("hubby"),
  ("fraternity"),
  ("prince"),
  ("seamstress"),
  ("damsel"),
  ("lady"),
  ("AUNT"),
  ("DAUGHTER"),
  ("GRANDDAU"),
  ("GRANDM"),
  ("MOM"),
  ("MOMMA"),
  ("MOMMY"),
  ("MOMS"),
  ("MOTHER"),
  ("MUM"),
  ("MUM'S"),
  ("MUMMY"),
  ("MUMS"),
  ("NIECE"),
  ("SISTER"),
  ("STEPMOT"),
  ("WIFE"),
  ("WIVE"),
  ("Ms."),
  ("Mrs."),
  ("aunty"),
  ("auntie"),
  ("gentlewoman"),
  ("girl"),
  ("gal"),
  ("gf"),
  ("girlfriend"),
  ("grandmother"),
  ("matron"),
  ("bride"),
  ("woman"),
  ("women"),
  ("diva"),
  ("sum1"),
  ("tree"),
  ("nature"),
  ("stuff"),
  ("bath"),
  ("result"),
  ("asap"),
  ("happiness"),
  ("city"),
  ("state"),
  ("country"),
  ("school"),
  ("college"),
  ("info"),
  ("god"),
  ("church"),
  ("temple"),
  ("youtube"),
  ("google"),
  ("details"),
  ("parrot"),
  ("motive"),
  ("ride"),
  ("sell"),
  ("phone call"),
  ("delete"),
  ("link"),
  ("website"),
  ("tries"),
  ("miracle"),
  ("magic"),
  ("aries"),
  ("taurus"),
  ("gemini"),
  ("cancer"),
  ("leo"),
  ("virgo"),
  ("libra"),
  ("scorpio"),
  ("sagittarius"),
  ("capricon"),
  ("aquarius"),
  ("pisces"),
  ("god"),
  ("heaven"),
  ("earth"),
  ("paradise"),
  ("dad"),
  ("mom")
);
CreateDict(
    "name" => "purchases/notforsale.dict",
    "table" => "purchases/notforsale.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/pastAction.dict'
CreateTable(
  "purchases/pastAction.dict__TABLE",
  ("entry" => "Text"),
  ("bought"),
  ("picked"),
  ("chose"),
  ("ordered"),
  ("had to buy"),
  ("had to have"),
  ("had to order"),
  ("went to buy"),
  ("went to order"),
  ("did buy"),
  ("did order"),
  ("purchased"),
  ("got"),
  ("after buying"),
  ("made a purchase")
);
CreateDict(
    "name" => "purchases/pastAction.dict",
    "table" => "purchases/pastAction.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/products.dict'
CreateTable(
  "purchases/products.dict__TABLE",
  ("entry" => "Text"),
  ("wedding dress"),
  ("gym bag"),
  ("closet"),
  ("video game"),
  ("video games"),
  ("computer game"),
  ("computer games"),
  ("food"),
  ("taco"),
  ("menu"),
  ("display"),
  ("concert"),
  ("fries"),
  ("potato chips"),
  ("pizza"),
  ("hot chocolate"),
  ("apps"),
  ("a/c"),
  ("a/v"),
  ("switcher"),
  ("ac"),
  ("accessories"),
  ("acoustic guitar"),
  ("guitar"),
  ("guitar strings"),
  ("adapter"),
  ("adult costume"),
  ("accessories"),
  ("air cleaner"),
  ("air conditioner"),
  ("air intake"),
  ("air intake accessories"),
  ("air intakes"),
  ("air purifier"),
  ("anklet"),
  ("anorak"),
  ("antenna"),
  ("anti-aging cream"),
  ("apparel"),
  ("appliance"),
  ("arm chair"),
  ("armoire"),
  ("art craft"),
  ("art poster"),
  ("christmas tree"),
  ("athletic apparel"),
  ("apparel"),
  ("audio cable"),
  ("audio mixers"),
  ("auto part"),
  ("filter"),
  ("automotive"),
  ("automobile"),
  ("air filter"),
  ("body kit"),
  ("exterior accessories"),
  ("gauge"),
  ("interior accessories"),
  ("interior styling"),
  ("safety equipment"),
  ("seat"),
  ("styling"),
  ("tool"),
  ("av"),
  ("awning"),
  ("baby clothing"),
  ("backpack"),
  ("backpiece"),
  ("bakeware"),
  ("band ring"),
  ("nose ring"),
  ("nose-ring"),
  ("diamond ring"),
  ("engagement ring"),
  ("banjo"),
  ("bar table"),
  ("bartable"),
  ("barstool"),
  ("barebone system"),
  ("barware"),
  ("bass amp"),
  ("bass"),
  ("guitar"),
  ("bassoon"),
  ("rug"),
  ("bathroom"),
  ("lighting"),
  ("batteries"),
  ("power adapter"),
  ("beads"),
  ("bean bag"),
  ("beanbag"),
  ("bed"),
  ("bedding"),
  ("bedding collection"),
  ("bedroom collection"),
  ("furniture"),
  ("bedskirt"),
  ("bedspread"),
  ("pillow"),
  ("sham"),
  ("belly button ring"),
  ("BELLY RING"),
  ("ring"),
  ("belt"),
  ("beret"),
  ("bikini"),
  ("binding equipment"),
  ("blackberry"),
  ("blanket"),
  ("blender"),
  ("blood pressure monitor"),
  ("monitor"),
  ("monitors"),
  ("blouse"),
  ("blow off valve"),
  ("blu-ray"),
  ("blu-ray player"),
  ("dvd"),
  ("tv"),
  ("led"),
  ("lcd"),
  ("hdtv"),
  ("brightener"),
  ("lightener"),
  ("cleanser"),
  ("firmer"),
  ("jewelry"),
  ("makeup"),
  ("powder"),
  ("shaper"),
  ("bookshelf"),
  ("bookshelves"),
  ("book"),
  ("speakers"),
  ("boots"),
  ("bowl"),
  ("bowtie"),
  ("bra"),
  ("bras"),
  ("bracelet"),
  ("braces"),
  ("brake"),
  ("brake pad"),
  ("bread maker"),
  ("bridge"),
  ("brooch"),
  ("buffet"),
  ("buffet"),
  ("bun wrap"),
  ("button"),
  ("cabinet"),
  ("cable adapter"),
  ("calculator"),
  ("caliper"),
  ("camcorder"),
  ("battery"),
  ("lenses"),
  ("microphone"),
  ("camera"),
  ("accessories"),
  ("camera bag case"),
  ("filter"),
  ("flash"),
  ("lighting"),
  ("lens"),
  ("meter"),
  ("stabilizer"),
  ("shoulder bracket"),
  ("tripod"),
  ("can opener"),
  ("candle"),
  ("candlestick"),
  ("cap"),
  ("car"),
  ("car wash"),
  ("car club"),
  ("fm"),
  ("cassette"),
  ("radio"),
  ("amplifier"),
  ("audio"),
  ("multimedia"),
  ("speakers"),
  ("subwoofer"),
  ("cardigan"),
  ("carry-on"),
  ("tote"),
  ("equipment"),
  ("casserole"),
  ("catalytic"),
  ("converter"),
  ("ccd"),
  ("cd"),
  ("cds"),
  ("cd player"),
  ("recorder"),
  ("ceiling fan"),
  ("fan"),
  ("light"),
  ("bulb"),
  ("ceiling"),
  ("lighting"),
  ("poster"),
  ("t-shirt"),
  ("tee-shirt"),
  ("songbook"),
  ("cell phone"),
  ("cellfone"),
  ("accessories"),
  ("battery"),
  ("carrying case"),
  ("charger"),
  ("headset"),
  ("cello"),
  ("cellphone"),
  ("speakers"),
  ("chair"),
  ("chaise"),
  ("chandelier"),
  ("charger"),
  ("charger"),
  ("power adapter"),
  ("chest"),
  ("china cabinet"),
  ("decoration"),
  ("figurine"),
  ("christmas tree"),
  ("wreath"),
  ("clarinet"),
  ("cleaning supplies"),
  ("cleaning product"),
  ("cleaning products"),
  ("laundry"),
  ("laundry supplies"),
  ("cleanser"),
  ("climate control"),
  ("clock"),
  ("clock radio"),
  ("clogs"),
  ("clothing"),
  ("shoe"),
  ("clutches"),
  ("flywheel"),
  ("coat"),
  ("coffee"),
  ("coffee maker"),
  ("grinder"),
  ("coffee table"),
  ("dining table"),
  ("chair"),
  ("couch"),
  ("loveseat"),
  ("lamp"),
  ("cologne"),
  ("perfume"),
  ("spray"),
  ("comb"),
  ("combo tv"),
  ("MicroSD Cards"),
  ("MicroSD Card"),
  ("MicroSD"),
  ("shoes"),
  ("comforter"),
  ("component"),
  ("computer"),
  ("laptop"),
  ("laptop memory"),
  ("case"),
  ("enclosure"),
  ("memory"),
  ("microphone"),
  ("headset"),
  ("power suppl"),
  ("speakers"),
  ("storage"),
  ("device"),
  ("harddisk"),
  ("hd system"),
  ("warranty"),
  ("computers"),
  ("concealer"),
  ("conditioner"),
  ("contact"),
  ("lenscare"),
  ("contact lens"),
  ("controller"),
  ("cooker"),
  ("cooktop"),
  ("cookware"),
  ("cooling"),
  ("copier"),
  ("copying"),
  ("viewing"),
  ("corded"),
  ("phone"),
  ("cordless"),
  ("cornet"),
  ("cosmetic"),
  ("bag"),
  ("case"),
  ("costume"),
  ("cpu"),
  ("cooling"),
  ("fan"),
  ("heater"),
  ("sink"),
  ("crt"),
  ("monitor"),
  ("cuff"),
  ("links"),
  ("cufflinks"),
  ("curtain"),
  ("rod"),
  ("cutlery"),
  ("cymbals"),
  ("dehumidifier"),
  ("deodorant"),
  ("desk"),
  ("table"),
  ("lamp"),
  ("desktop"),
  ("digital camera"),
  ("media receiver"),
  ("piano"),
  ("picture frame"),
  ("thermometer"),
  ("video recorder"),
  ("dvrs"),
  ("tablet"),
  ("diner"),
  ("jacket"),
  ("dinnerware"),
  ("disc"),
  ("duplicator"),
  ("plate"),
  ("dishwasher"),
  ("dj equipment"),
  ("dj headphones"),
  ("dj mixer"),
  ("dj turntables"),
  ("docking station"),
  ("downpipe"),
  ("test pipe"),
  ("draperies"),
  ("curtain"),
  ("drawing"),
  ("painting"),
  ("dreamcast"),
  ("dress"),
  ("dresser"),
  ("chest"),
  ("dressing"),
  ("droid"),
  ("drugstore"),
  ("drugstore"),
  ("drum kits"),
  ("drums"),
  ("dryer"),
  ("duffle"),
  ("garment"),
  ("bag"),
  ("duvet"),
  ("dvd"),
  ("dvd player"),
  ("recorder"),
  ("earphone"),
  ("earrings"),
  ("ecu"),
  ("electronic part"),
  ("electric"),
  ("guitar"),
  ("shaver"),
  ("trimmer"),
  ("toothbrush"),
  ("paste"),
  ("electronic"),
  ("electronic"),
  ("dictionary"),
  ("reader"),
  ("electronics"),
  ("engine"),
  ("engine"),
  ("cooling"),
  ("parts"),
  ("engine"),
  ("styling"),
  ("english horn"),
  ("entertainment unit"),
  ("euphonium"),
  ("exhaust"),
  ("accessories"),
  ("exhaust system"),
  ("eye care"),
  ("eye glass"),
  ("eye liner"),
  ("eyeliner"),
  ("eyeshadow"),
  ("eye shadow"),
  ("eye treatment"),
  ("eyeglass"),
  ("glasses"),
  ("eyeliner"),
  ("face powder"),
  ("facial"),
  ("cleanser"),
  ("exfoliant"),
  ("mask"),
  ("toner"),
  ("fan"),
  ("fax machine"),
  ("fax supplies"),
  ("figurine"),
  ("file storage"),
  ("cabinet"),
  ("film"),
  ("camera"),
  ("darkroom"),
  ("fireplace"),
  ("firewall"),
  ("security"),
  ("device"),
  ("first aid"),
  ("emergency supplies"),
  ("flash"),
  ("flash memory"),
  ("flash memory"),
  ("reader"),
  ("flat panel"),
  ("flat screen"),
  ("flats"),
  ("flatware"),
  ("floor lamp"),
  ("floor mat"),
  ("mat"),
  ("floppy disk"),
  ("tape"),
  ("flugelhorn"),
  ("flute"),
  ("fog light"),
  ("foldable"),
  ("inflatable"),
  ("bed"),
  ("mattress"),
  ("fondue"),
  ("food processor"),
  ("foundation"),
  ("fountain"),
  ("fragrance"),
  ("gift set"),
  ("framed art"),
  ("art"),
  ("craft"),
  ("freezer"),
  ("oven"),
  ("french horn"),
  ("fryer"),
  ("fuel system"),
  ("furniture"),
  ("futon"),
  ("game boy"),
  ("gamecube"),
  ("video tape"),
  ("audio video"),
  ("glassware"),
  ("gloves"),
  ("gps"),
  ("receiver"),
  ("graphic"),
  ("card"),
  ("cards"),
  ("guitar"),
  ("hair"),
  ("hair care"),
  ("hair color"),
  ("hair removal"),
  ("hair scalp"),
  ("treatment"),
  ("halloween"),
  ("costume"),
  ("decoration"),
  ("hammock"),
  ("hamper"),
  ("handbag"),
  ("hands-free"),
  ("hanukkah"),
  ("decoration"),
  ("hard drive"),
  ("hat"),
  ("headband"),
  ("headboard"),
  ("footboard"),
  ("header"),
  ("manifold"),
  ("headlight"),
  ("headphone"),
  ("headwear"),
  ("monitor"),
  ("heart rate"),
  ("heater"),
  ("heating"),
  ("high heel"),
  ("highheel"),
  ("holiday decoration"),
  ("home"),
  ("audio"),
  ("decor"),
  ("furnishing"),
  ("theater"),
  ("weather station"),
  ("hub"),
  ("humidifier"),
  ("i/o card"),
  ("in-dash"),
  ("cd"),
  ("mp3"),
  ("ink toner"),
  ("input device"),
  ("intercooler"),
  ("in-wall"),
  ("ceiling"),
  ("speakers"),
  ("iphone"),
  ("ipod"),
  ("mac"),
  ("iron"),
  ("jacket"),
  ("jacket"),
  ("jeans"),
  ("jewelry"),
  ("jewelry sets"),
  ("joystick"),
  ("gamepad"),
  ("juicer"),
  ("jumper"),
  ("shoes"),
  ("karaoke"),
  ("machine"),
  ("kettle"),
  ("keyboard"),
  ("keyboard amp"),
  ("kids poster"),
  ("kinect"),
  ("kitchen"),
  ("apparel"),
  ("cabinet"),
  ("storage"),
  ("dining"),
  ("chair"),
  ("furniture"),
  ("grill"),
  ("island cart"),
  ("trash can"),
  ("knickers"),
  ("knitting"),
  ("crocheting"),
  ("embroidery"),
  ("kohl"),
  ("kvm switch box"),
  ("box"),
  ("label"),
  ("labeling system"),
  ("laces"),
  ("laptop"),
  ("laptop"),
  ("carrying case"),
  ("large appliance"),
  ("home appliance"),
  ("laundry"),
  ("detergent"),
  ("lcd"),
  ("monitor"),
  ("tv"),
  ("light bulb"),
  ("lighting"),
  ("line conditioner"),
  ("lip gloss"),
  ("lipgloss"),
  ("lip liner"),
  ("lip plumper"),
  ("lipstick"),
  ("lotion"),
  ("lsd differential"),
  ("luggage"),
  ("luggage"),
  ("travel"),
  ("mac"),
  ("makeup"),
  ("cosmetic"),
  ("gift set"),
  ("makeup"),
  ("brush"),
  ("applicator"),
  ("makeup remover"),
  ("mandolin"),
  ("marching drums"),
  ("mascara"),
  ("massage oil"),
  ("massage"),
  ("mattress"),
  ("medical aid"),
  ("medical supplies"),
  ("mellophone"),
  ("clothing"),
  ("metal detector"),
  ("mice  trackball"),
  ("microphone"),
  ("microphone preamp"),
  ("microwave"),
  ("mini system"),
  ("mixer"),
  ("mobility aid"),
  ("modem"),
  ("moisturizer"),
  ("money clips"),
  ("monitor"),
  ("projector"),
  ("monolight ac"),
  ("strobe"),
  ("light"),
  ("monopod"),
  ("motherboard"),
  ("poster"),
  ("motorcycle"),
  ("helmet"),
  ("mp3 player"),
  ("mp3"),
  ("muffler"),
  ("resonator"),
  ("multimedia"),
  ("nail care"),
  ("nail care"),
  ("necklace"),
  ("netbook"),
  ("network"),
  ("surveillance"),
  ("camera"),
  ("network adapter"),
  ("network"),
  ("storage"),
  ("device"),
  ("networking"),
  ("n-gage"),
  ("nightdress"),
  ("nightstand"),
  ("nintendo 64"),
  ("nintendo ds"),
  ("nitrous"),
  ("nintendo"),
  ("non-prescription drug"),
  ("drug"),
  ("notebook"),
  ("oboe"),
  ("office"),
  ("cart"),
  ("stand"),
  ("chair"),
  ("furniture"),
  ("machine"),
  ("optical drive"),
  ("oral care"),
  ("ottoman"),
  ("outdoor"),
  ("bench"),
  ("furniture"),
  ("lighting"),
  ("speakers"),
  ("oven"),
  ("pa system"),
  ("pan"),
  ("pants"),
  ("paper shredder"),
  ("shredder"),
  ("patio"),
  ("chair"),
  ("chaise"),
  ("lounge"),
  ("umbrella"),
  ("pc"),
  ("pda"),
  ("pedometer"),
  ("pendant"),
  ("electronic"),
  ("perfume"),
  ("personal care"),
  ("phone"),
  ("accessor"),
  ("headset"),
  ("photo"),
  ("photo enlarger"),
  ("piano"),
  ("piccolo"),
  ("picture frame"),
  ("pillow"),
  ("suspension arm"),
  ("pillowcase"),
  ("sham"),
  ("plasma"),
  ("playstation"),
  ("playstation 2"),
  ("playstation 3"),
  ("poacher"),
  ("polaroid"),
  ("instant film"),
  ("porch"),
  ("swing"),
  ("portable"),
  ("cd player"),
  ("dvd player"),
  ("keyboard"),
  ("mediaplayer"),
  ("media player"),
  ("portable tv"),
  ("pot"),
  ("adapter"),
  ("conditioner"),
  ("inverter"),
  ("power"),
  ("protection"),
  ("prescription drug"),
  ("server"),
  ("printer"),
  ("catridge"),
  ("projection screen"),
  ("screen"),
  ("projection tv"),
  ("projector"),
  ("projector av"),
  ("equipment"),
  ("ps2"),
  ("pumps"),
  ("pyjamas"),
  ("quilt"),
  ("rackmount"),
  ("radar"),
  ("detector"),
  ("radio"),
  ("cassette"),
  ("raincoat"),
  ("range hood"),
  ("reading glass"),
  ("receiver"),
  ("recliner"),
  ("recliner"),
  ("record"),
  ("recorder"),
  ("recorders"),
  ("transcriber"),
  ("tape"),
  ("reeds"),
  ("refrigerator"),
  ("remote control"),
  ("retail box"),
  ("processor"),
  ("ringtone"),
  ("ring-tone"),
  ("ringlight"),
  ("macro"),
  ("flashes"),
  ("rings"),
  ("roaster"),
  ("rocking"),
  ("chair"),
  ("rotor"),
  ("drum"),
  ("rouge"),
  ("router"),
  ("rug"),
  ("tapestry"),
  ("sandals"),
  ("satellite"),
  ("tv"),
  ("satellite"),
  ("speakers"),
  ("satellite"),
  ("tuner"),
  ("saxophone"),
  ("scale"),
  ("body fat"),
  ("monitor"),
  ("scanner"),
  ("scarf"),
  ("scenic poster"),
  ("sconce"),
  ("wall lamp"),
  ("scraps"),
  ("booking"),
  ("server"),
  ("setup equipment"),
  ("sewing machine"),
  ("shampoo"),
  ("sheet"),
  ("shifter"),
  ("shirt"),
  ("studs"),
  ("shoe"),
  ("shoes"),
  ("short ram intake"),
  ("shorts"),
  ("shower curtain"),
  ("side table"),
  ("signal processor"),
  ("sink"),
  ("skillet"),
  ("skin care"),
  ("skincare"),
  ("skincare"),
  ("razor"),
  ("skirt"),
  ("sleep aid"),
  ("slide film"),
  ("slippers"),
  ("slr lenses"),
  ("slr"),
  ("dslr"),
  ("kitchen appliance"),
  ("smoking cessation"),
  ("cigar"),
  ("sneaker"),
  ("snoring aid"),
  ("sock"),
  ("sofa"),
  ("software"),
  ("sony psp"),
  ("sound card"),
  ("speakers"),
  ("soundtrack"),
  ("sousaphone"),
  ("spa"),
  ("speakers"),
  ("speakers"),
  ("stand"),
  ("mount"),
  ("speakers"),
  ("wire"),
  ("dietary"),
  ("nutrition"),
  ("sports poster"),
  ("stiletto"),
  ("stockings"),
  ("stool"),
  ("storage media"),
  ("studio monitor"),
  ("styling cream"),
  ("whipped cream"),
  ("styling product"),
  ("styling tool"),
  ("subwoofer"),
  ("speakers"),
  ("suit"),
  ("sun protection"),
  ("tanning"),
  ("sunglasses"),
  ("supercharger"),
  ("support brace"),
  ("surge"),
  ("suppressor"),
  ("surround speakers"),
  ("suspender"),
  ("suspension"),
  ("suspension handling"),
  ("sweater"),
  ("sweatshirt"),
  ("swimming costume"),
  ("swimsuit"),
  ("switches"),
  ("synthesizer"),
  ("t shirt"),
  ("table"),
  ("table"),
  ("linen"),
  ("table set"),
  ("tablet"),
  ("e-reader"),
  ("tableware"),
  ("tail light"),
  ("teapot"),
  ("teen clothing"),
  ("telephone"),
  ("telephony"),
  ("television"),
  ("terminal"),
  ("thanksgiving"),
  ("decoration"),
  ("thermometer"),
  ("throw"),
  ("tiara"),
  ("tie"),
  ("tie rack"),
  ("tights"),
  ("time clock"),
  ("recorder"),
  ("tire"),
  ("toaster"),
  ("toner"),
  ("towel"),
  ("tower speakers"),
  ("tracksuit"),
  ("transceiver"),
  ("transmission"),
  ("drivetrain"),
  ("trash compactor"),
  ("disposal"),
  ("travel accessories"),
  ("travel case"),
  ("tripod"),
  ("tripod support"),
  ("tripod head"),
  ("trombon"),
  ("trousers"),
  ("truck"),
  ("suv"),
  ("trumpet"),
  ("tuba"),
  ("tube tv"),
  ("tungsten"),
  ("camera"),
  ("lighter"),
  ("turbo"),
  ("turntable"),
  ("tv accessories"),
  ("mount"),
  ("two-way radio"),
  ("ukulele"),
  ("umbrella"),
  ("unboxed"),
  ("processor"),
  ("underpants"),
  ("underwater camera"),
  ("housing"),
  ("underwear"),
  ("uniform"),
  ("uninterruptible power supply"),
  ("unisex accessories"),
  ("cologne"),
  ("upright basses"),
  ("usb"),
  ("firewire"),
  ("device"),
  ("vacuum cleaner"),
  ("vacuum cleaner"),
  ("vacuum sealer"),
  ("vase"),
  ("vehicle lighting"),
  ("bulb"),
  ("video cable"),
  ("video capture"),
  ("video card"),
  ("video equipment"),
  ("video game"),
  ("video media"),
  ("viola"),
  ("violin"),
  ("vitamin supplement"),
  ("voip"),
  ("phone"),
  ("waistcoat"),
  ("wall decor"),
  ("washer/dryer combo"),
  ("washing machine"),
  ("watch"),
  ("purifier"),
  ("filter"),
  ("web cam"),
  ("webcam"),
  ("wedges"),
  ("weight loss"),
  ("wellingtons"),
  ("wheel rim"),
  ("wheel tire"),
  ("wig"),
  ("wii"),
  ("window covering"),
  ("panel"),
  ("window panel"),
  ("window shade"),
  ("window top treatment"),
  ("windshield"),
  ("wiper"),
  ("wine"),
  ("beer"),
  ("vodka"),
  ("refrigerator"),
  ("chiller"),
  ("wireless"),
  ("network"),
  ("wok"),
  ("woodwinds"),
  ("workbench"),
  ("tool storage"),
  ("wreath"),
  ("xbox"),
  ("xbox 360"),
  ("zipper"),
  ("flight"),
  ("turfs"),
  ("accelerator"),
  ("air bags"),
  ("air conditioner"),
  ("air filter"),
  ("air vent"),
  ("alarm"),
  ("antenna"),
  ("anti-lock brakes"),
  ("armrest"),
  ("auto"),
  ("automatic transmission"),
  ("automobile"),
  ("baby seat"),
  ("back-up lights"),
  ("battery"),
  ("brake light"),
  ("brakes"),
  ("bumper"),
  ("camshaft"),
  ("car"),
  ("carburetor"),
  ("chassis"),
  ("chrome trim"),
  ("clutch"),
  ("cooling system"),
  ("crankshaft"),
  ("cruise control"),
  ("dashboard"),
  ("defroster"),
  ("diesel engine"),
  ("differential"),
  ("dimmer switch"),
  ("door"),
  ("door handle"),
  ("drive shaft"),
  ("emergency brake"),
  ("emergency lights"),
  ("emissions"),
  ("engine"),
  ("exhaust system"),
  ("fan belt"),
  ("fender"),
  ("floor mats"),
  ("frame"),
  ("fuel"),
  ("fuel gauge"),
  ("fuse"),
  ("gas"),
  ("gas cap"),
  ("gasket"),
  ("gasoline"),
  ("gasoline engine"),
  ("gear stick"),
  ("gearbox"),
  ("gearshift"),
  ("glove compartment"),
  ("gps"),
  ("grille"),
  ("hand brake"),
  ("headlight"),
  ("heater"),
  ("high-beam headlight"),
  ("hood"),
  ("horn"),
  ("hubcaps"),
  ("hybrid"),
  ("ignition"),
  ("interior light"),
  ("internal combustion engine"),
  ("combustion engine"),
  ("license plates"),
  ("lock"),
  ("low-beam headlight"),
  ("lugs"),
  ("manifold"),
  ("manual transmission"),
  ("mat"),
  ("mirror"),
  ("motor"),
  ("mud flap"),
  ("muffler"),
  ("odometer"),
  ("oil"),
  ("oil filter"),
  ("parking lights"),
  ("passenger seat"),
  ("piston"),
  ("power brakes"),
  ("power steering"),
  ("radiator"),
  ("radio"),
  ("rear window defroster"),
  ("rear-view mirror"),
  ("rims"),
  ("roof"),
  ("rotary engine"),
  ("seat"),
  ("seat bags"),
  ("shock absorber"),
  ("side mirrors"),
  ("spare tire"),
  ("spark plug"),
  ("speedometer"),
  ("steering wheel"),
  ("suspension"),
  ("tachometer"),
  ("tailgate"),
  ("thermometer"),
  ("tire"),
  ("trailer hitch"),
  ("trip computer"),
  ("trunk"),
  ("turbocharger"),
  ("turn signal"),
  ("unleaded gas"),
  ("vents"),
  ("visor"),
  ("wheel"),
  ("wheel well"),
  ("windshield"),
  ("windshield wiper"),
  ("wiper"),
  ("Digital audio players"),
  ("Digital audio"),
  ("Portable media players"),
  ("IPod"),
  ("Free Lossless Audio Codec"),
  ("Internet radio device"),
  ("MP3"),
  ("Philips GoGear"),
  ("Zune"),
  ("Archos"),
  ("Audio engineering"),
  ("audio player"),
  ("Apple iPod"),
  ("Apple iPod Touch Portable Audio Device"),
  ("Archos 5 Portable Video Player"),
  ("Creative Labs Creative Zen Vision: M Portable Audio Device"),
  ("Internet Tablet"),
  ("iPhone"),
  ("iPod"),
  ("iPod Shuffle"),
  ("Microsoft Zune HD Portable Audio Device"),
  ("Microsoft Zune Portable Audio Device"),
  ("SanDisk Sansa Clip Portable Audio Device"),
  ("Tablet computer Tablet"),
  ("Zune"),
  ("ipod"),
  ("ASIC"),
  ("AV"),
  ("Bluetooth"),
  ("cellular telephone"),
  ("decoder chip"),
  ("disk drive"),
  ("flash memory"),
  ("MP3"),
  ("PDA"),
  ("PDF"),
  ("sandisk"),
  ("mp3"),
  ("zune"),
  ("ipod nano"),
  ("ipod shuffle"),
  ("ipod touch"),
  ("audio"),
  ("iphone"),
  ("ipod classic"),
  ("nano"),
  ("itunes"),
  ("apparecchi usb"),
  ("speakers"),
  ("design"),
  ("ipad"),
  ("lettori mp3"),
  ("mp3 player"),
  ("usb"),
  ("apple"),
  ("itunes"),
  ("WMA"),
  ("WAV"),
  ("Ogg Vorbis"),
  ("AAC"),
  ("Vorbis"),
  ("Ogg"),
  ("MPEG"),
  ("Flac"),
  ("MP3"),
  ("MPEG-4"),
  ("MPEG-2"),
  ("wmv"),
  ("DivX"),
  ("QuickTime"),
  ("ASF"),
  ("H.264"),
  ("AC-3"),
  ("Dolby Digital"),
  ("MIDI"),
  ("audio/video"),
  ("PCM"),
  ("HDV"),
  ("RealPlayer"),
  ("DTS"),
  ("DV"),
  ("DirectShow"),
  ("executable"),
  ("bitrate"),
  ("STL"),
  ("EXE"),
  ("wideband"),
  ("Redbook"),
  ("PDB"),
  ("Red Book"),
  ("brake fluid"),
  ("ticket"),
  ("battery"),
  ("flashlight"),
  ("boxers"),
  ("space heater"),
  ("spaceheater"),
  ("swimsuit"),
  ("apartment"),
  ("home"),
  ("condo"),
  ("kite"),
  ("cheesecake"),
  ("cake"),
  ("landing gear"),
  ("ice cream"),
  ("haircut"),
  ("hair cut"),
  ("hair dye"),
  ("real estate"),
  ("agents"),
  ("swim suit"),
  ("smart phone"),
  ("htc evo"),
  ("4G"),
  ("samsung"),
  ("samsung galaxy"),
  ("sony"),
  ("Sony Ericsson Xperia"),
  ("Sony Ericsson"),
  ("LG Optimus One"),
  ("LG"),
  ("LG Optimus"),
  ("HTC"),
  ("htc desire"),
  ("google nexus one"),
  ("google nexus"),
  ("Nexus one"),
  ("Motorola Droid"),
  ("droid"),
  ("motorola"),
  ("htc hero"),
  ("MicroMax Andro A60"),
  ("MicroMax Andro"),
  ("Motorola Droid Bionic"),
  ("Verizon"),
  ("T-Mobile LG"),
  ("T-Mobile"),
  ("apple iphone"),
  ("HTC EVO 3D"),
  ("HTC ThunderBolt"),
  ("sprint"),
  ("Sony Ericsson Xperia"),
  ("Google Nexus S"),
  ("HP Pre 3"),
  ("Dell Venue Pro"),
  ("At&t"),
  ("HTC Desire"),
  ("HTC Incredible"),
  ("LG Optimus"),
  ("LG Revolution"),
  ("Motorola Atrix"),
  ("Samsung Infuse"),
  ("LG G2X"),
  ("T-Mobile"),
  ("Sidekick"),
  ("Mobile Phone"),
  ("AUDIOVOX"),
  ("UTStarcom"),
  ("BENQ-SIEMENS"),
  ("BLACKBERRY"),
  ("BB"),
  ("HTC"),
  ("LG ELECTRONICS"),
  ("KYOCERA"),
  ("MITSUBISHI"),
  ("MOTOROLA"),
  ("NOKIA"),
  ("PALM"),
  ("QUALCOMM"),
  ("SAMSUNG"),
  ("SANYO"),
  ("SAGEM"),
  ("SONY ERICSSON"),
  ("UNIDEN"),
  ("Pantech"),
  ("hair straightener"),
  ("hair CERAMIC straightener"),
  ("flip SlideHD"),
  ("SlideHD"),
  ("kinect"),
  ("nintendo"),
  ("origin genesis"),
  ("wii"),
  ("sony playstation"),
  ("xbox 360"),
  ("sony psp"),
  ("atari flashback"),
  ("atari"),
  ("game boy micro"),
  ("Vtech"),
  ("Vsmile"),
  ("leapfrog"),
  ("leapster"),
  ("fisher-price"),
  ("gaming console"),
  ("game console"),
  ("nokia n-gage"),
  ("nokia"),
  ("lasr gamepak"),
  ("e-reader"),
  ("nyko playcube"),
  ("xbox controller s"),
  ("gamecube"),
  ("3D displays"),
  ("3D display"),
  ("vacation home"),
  ("ariel"),
  ("workstation"),
  ("keyboard"),
  ("Windows Mobile"),
  ("HTC HD2"),
  ("iPhone"),
  ("necklace"),
  ("school supplies"),
  ("lotus notes"),
  ("Adobe Design Premium CS4"),
  ("Adobe Design"),
  ("massage chair"),
  ("GoogleNexusOne"),
  ("Digital Mug Press"),
  ("Mug Press"),
  ("gift card"),
  ("giftcard"),
  ("Kindle"),
  ("G-Slate"),
  ("GSlate"),
  ("Asus"),
  ("Eee Pad Transformer"),
  ("Eee Pad"),
  ("TouchPad"),
  ("Velocity"),
  ("ViewSonic"),
  ("Viewpad"),
  ("HTC Flyer"),
  ("BeBook"),
  ("Nook"),
  ("Sony Reader"),
  ("Alex ereader"),
  ("Pandigital novel"),
  ("kobo ereader"),
  ("ereader"),
  ("coffee machine"),
  ("jersey"),
  ("henley"),
  ("flat iron"),
  ("bike"),
  ("bicycle"),
  ("motorbike"),
  ("motorcycle"),
  ("climbing gear"),
  ("golf clubs"),
  ("golf balls"),
  ("golf club"),
  ("golf ball"),
  ("cardigans"),
  ("sweaters"),
  ("cardigan"),
  ("sweater"),
  ("RVs"),
  ("RV"),
  ("Wii fit"),
  ("Wii fit plus"),
  ("apple mini"),
  ("tabletpc"),
  ("tablet pc"),
  ("slate pc"),
  ("slatepc"),
  ("jersey shore"),
  ("windowsXP"),
  ("Nintendo DSi XL"),
  ("books"),
  ("Canon ink cartridges"),
  ("Canon ink cartridge"),
  ("Canon"),
  ("breakfast"),
  ("macbook"),
  ("mac mini"),
  ("imac"),
  ("mac pro"),
  ("macbook pro"),
  ("macbook air"),
  ("airport"),
  ("time capsule"),
  ("cinema display"),
  ("magic mouse"),
  ("magic trackpad"),
  ("wireless keyboard"),
  ("apple battery charger"),
  ("ipad"),
  ("iOS"),
  ("App Store"),
  ("iBooks"),
  ("ipod"),
  ("apple tv"),
  ("macintosh"),
  ("bedding set"),
  ("digital antenna"),
  ("burger"),
  ("chips"),
  ("sixflags"),
  ("micro sd card"),
  ("elliptical machine"),
  ("spinner"),
  ("treadmill"),
  ("elliptical"),
  ("speaker wire"),
  ("trackball"),
  ("gift"),
  ("external monitor"),
  ("external monitors"),
  ("Iron Supplements"),
  ("Iron Supplement"),
  ("skis"),
  ("teddy bear"),
  ("cell"),
  ("PS3"),
  ("master's degree"),
  ("masters degree"),
  ("degree"),
  ("cup"),
  ("tea"),
  ("photo editing app"),
  ("photo editing software"),
  ("tattoo"),
  ("tatoo"),
  ("olive oil"),
  ("spray tan"),
  ("tan"),
  ("mask"),
  ("gloves"),
  ("waffles"),
  ("waffle"),
  ("dr. pepper"),
  ("dr pepper"),
  ("dr.pepper"),
  ("pepsi"),
  ("coke"),
  ("cola"),
  ("gameboy"),
  ("reebok"),
  ("reeboks"),
  ("nike"),
  ("nikes"),
  ("insurance"),
  ("rental car"),
  ("rentals"),
  ("new car"),
  ("car loan"),
  ("home loan"),
  ("house loan"),
  ("down payment")
);
CreateDict(
    "name" => "purchases/products.dict",
    "table" => "purchases/products.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/promos.dict'
CreateTable(
  "purchases/promos.dict__TABLE",
  ("entry" => "Text"),
  ("giveaway"),
  ("website"),
  ("Check it out"),
  ("Reply & RT now"),
  ("RT now"),
  ("CALL US TODAY"),
  ("call us"),
  ("Free Shipping"),
  ("shipping"),
  ("webstore"),
  ("visit"),
  ("website"),
  ("cheap"),
  ("discounted"),
  ("now is the time"),
  ("before u buy"),
  ("before you buy"),
  ("DAY left"),
  ("days left to buy"),
  ("buy my"),
  ("we buy"),
  ("we sell"),
  ("come to this site"),
  ("looking to sell"),
  ("Here's the link"),
  ("Here is the link"),
  ("GET BETTER INTEREST RATE"),
  ("link"),
  ("shop my"),
  ("shop our"),
  ("if y'all are looking"),
  ("if you are looking"),
  ("take this quiz"),
  ("take this survey"),
  ("blog post"),
  ("check out"),
  ("What's holding you back"),
  ("What is holding you back"),
  ("Money's at your fingertips with"),
  ("Money is at your fingertips with"),
  ("No Equity"),
  ("No Problem"),
  ("You Don't Have to Pay to Get One"),
  ("Now You Dont Have to Pay to Get One"),
  ("Get Yours F R E E"),
  ("get yours free"),
  ("for free"),
  ("for f r e e"),
  ("copy & paste"),
  ("copy paste"),
  ("copy and paste"),
  ("copy n paste"),
  ("got an amazing deal for you"),
  ("Discover the results"),
  ("vote"),
  ("click")
);
CreateDict(
    "name" => "purchases/promos.dict",
    "table" => "purchases/promos.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/shortQuestion.dict'
CreateTable(
  "purchases/shortQuestion.dict__TABLE",
  ("entry" => "Text"),
  ("what kind of"),
  ("what"),
  ("which")
);
CreateDict(
    "name" => "purchases/shortQuestion.dict",
    "table" => "purchases/shortQuestion.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/smalltoks.dict'
CreateTable(
  "purchases/smalltoks.dict__TABLE",
  ("entry" => "Text"),
  ("2"),
  ("to")
);
CreateDict(
    "name" => "purchases/smalltoks.dict",
    "table" => "purchases/smalltoks.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/spam.dict'
CreateTable(
  "purchases/spam.dict__TABLE",
  ("entry" => "Text"),
  ("webstore"),
  ("large selection"),
  ("100% satisfied"),
  ("Accept credit cards"),
  ("Act Now!"),
  ("Additional Income"),
  ("All natural"),
  ("Apply online"),
  ("Billing address"),
  ("Buy direct"),
  ("Call for free"),
  ("Call 4 free"),
  ("Call free"),
  ("Cards Accepted"),
  ("Click"),
  ("Click Here"),
  ("Click Below"),
  ("Congratulations"),
  ("Dear friend"),
  ("Free preview"),
  ("Information you requested"),
  ("Increase sales"),
  ("Increase traffic"),
  ("Free offer"),
  ("Free website"),
  ("Free membership"),
  ("homefinance"),
  ("holdem"),
  ("holdempoker"),
  ("holdemsoftware"),
  ("holdemtexasturbowilson"),
  ("hotel-dealse-site"),
  ("hotele-site"),
  ("hotelse-site"),
  ("incest"),
  ("insurance-quotesdeals-4u"),
  ("insurancedeals-4u"),
  ("jrcreations"),
  ("levitra"),
  ("macinstruct"),
  ("Cash"),
  ("mortgage-4-u"),
  ("mortgagequotes"),
  ("online-gambling"),
  ("onlinegambling-4u"),
  ("ottawavalleyag"),
  ("ownsthis"),
  ("palm-texas-holdem-game"),
  ("paxil"),
  ("penis"),
  ("phentermine"),
  ("poker-chip"),
  ("poze"),
  ("Stock pick"),
  ("Strong buy"),
  ("Stuff on sale"),
  ("Subject to credit"),
  ("Supplies are limited"),
  ("Take action now"),
  ("supplies last"),
  ("alert"),
  ("high value"),
  ("pussy"),
  ("rental-car-e-site"),
  ("ringtones"),
  ("roulette"),
  ("shemale"),
  ("slot-machine"),
  ("texas-holdem"),
  ("thorcarlson"),
  ("top-site"),
  ("top-e-site"),
  ("tramadol"),
  ("trim-spa"),
  ("ultram"),
  ("valeofglamorganconservatives"),
  ("viagra"),
  ("vioxx"),
  ("xanax"),
  ("zolus"),
  ("Viagra and other drugs"),
  ("We hate spam"),
  ("We honor all"),
  ("What are you waiting for"),
  ("While supplies last"),
  ("While you sleep"),
  ("Who really wins"),
  ("Why pay more?"),
  ("Will not believe your eyes"),
  ("Winner"),
  ("Winning"),
  ("Work at home"),
  ("You have been selected"),
  ("Your income"),
  ("4u"),
  ("adipex"),
  ("advicer"),
  ("baccarrat"),
  ("blackjack"),
  ("bllogspot"),
  ("booker"),
  ("car-rental-e-site"),
  ("car-rentals-e-site"),
  ("carisoprodol"),
  ("casino"),
  ("casinos"),
  ("chatroom"),
  ("cialis"),
  ("coolcoolhu"),
  ("coolhu"),
  ("credit-card-debt"),
  ("credit-report-4u"),
  ("cwas"),
  ("cyclen"),
  ("cyclobenzaprine"),
  ("dating-e-site"),
  ("day-trading"),
  ("debt-consolidation"),
  ("debt-consolidation-consultant"),
  ("discreetordering"),
  ("duty-free"),
  ("dutyfree"),
  ("equityloans"),
  ("fioricet"),
  ("flowers-leading-site"),
  ("freenet-shopping"),
  ("freenet"),
  ("hair-loss"),
  ("health-insurancedeals-4u"),
  ("homeequityloans"),
  ("one stop shop"),
  ("follow our friends"),
  ("breaking news"),
  ("Buy The Best")
);
CreateDict(
    "name" => "purchases/spam.dict",
    "table" => "purchases/spam.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/transaction.dict'
CreateTable(
  "purchases/transaction.dict__TABLE",
  ("entry" => "Text"),
  ("buying"),
  ("buy"),
  ("find"),
  ("shop"),
  ("transact"),
  ("order"),
  ("purchase")
);
CreateDict(
    "name" => "purchases/transaction.dict",
    "table" => "purchases/transaction.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'purchases/you.dict'
CreateTable(
  "purchases/you.dict__TABLE",
  ("entry" => "Text"),
  ("ur"),
  ("u"),
  ("ya"),
  ("y'all"),
  ("y'all"),
  ("ye"),
  ("u"),
  ("you"),
  ("you'd"),
  ("youd"),
  ("you'll"),
  ("youll"),
  ("your"),
  ("you're"),
  ("youre"),
  ("yours"),
  ("you've"),
  ("youve"),
  ("lets"),
  ("let's"),
  ("us"),
  ("we"),
  ("we'd"),
  ("we'll"),
  ("we're"),
  ("weve"),
  ("we've"),
  ("anybod"),
  ("anyone"),
  ("any1"),
  ("anything"),
  ("everybod"),
  ("everyone"),
  ("everything"),
  ("who"),
  ("to be"),
  ("to go"),
  ("they"),
  ("he"),
  ("she"),
  ("Doctor"),
  ("anyone"),
  ("his"),
  ("her"),
  ("their")
);
CreateDict(
    "name" => "purchases/you.dict",
    "table" => "purchases/you.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'relationAbbr.dict'
CreateTable(
  "relationAbbr.dict__TABLE",
  ("entry" => "Text"),
  ("auntie"),
  ("aunties"),
  ("aunty"),
  ("babygal"),
  ("babygirl"),
  ("bestfriend"),
  ("bestfriends"),
  ("bestie"),
  ("besties"),
  ("beztfriend"),
  ("bf"),
  ("bff"),
  ("bloke"),
  ("boys"),
  ("bride"),
  ("bros"),
  ("brothers"),
  ("buddies"),
  ("Classmates"),
  ("crew"),
  ("daddy"),
  ("dawg"),
  ("dude"),
  ("dudes"),
  ("fam"),
  ("fella"),
  ("fellas"),
  ("fellow"),
  ("fellows"),
  ("followers"),
  ("friends"),
  ("gal"),
  ("gal pals"),
  ("gal pal"),
  ("gf"),
  ("girl friends"),
  ("girl friend"),
  ("girls"),
  ("girlss"),
  ("GRANDDAD"),
  ("GRANDDAU"),
  ("GRANDM"),
  ("GRANDPA"),
  ("homie"),
  ("homies"),
  ("hubby"),
  ("Instructors"),
  ("lad"),
  ("ladies"),
  ("lads"),
  ("MOMMA"),
  ("MOMMY"),
  ("MUM"),
  ("MUMMY"),
  ("pal"),
  ("pals"),
  ("papa"),
  ("pops"),
  ("prof"),
  ("Professors"),
  ("roomies"),
  ("roommates"),
  ("seniors"),
  ("sisters"),
  ("sons"),
  ("STEPFAT"),
  ("STEPMOT"),
  ("Teachers"),
  ("team"),
  ("Trainers"),
  ("Tutors"),
  ("uncles"),
  ("wifey"),
  ("WIVE")
);
CreateDict(
    "name" => "relationAbbr.dict",
    "table" => "relationAbbr.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'relations.dict'
CreateTable(
  "relations.dict__TABLE",
  ("entry" => "Text"),
  ("Mother"),
  ("Father"),
  ("Son"),
  ("Daughter"),
  ("Brother"),
  ("Sister"),
  ("Grandfather"),
  ("Grandmother"),
  ("Grandson"),
  ("Granddaughter"),
  ("Uncle"),
  ("Aunt"),
  ("Nephew"),
  ("Niece"),
  ("Cousin"),
  ("Husband"),
  ("Wife"),
  ("Widow"),
  ("Widower"),
  ("Stepmother"),
  ("Stepfather"),
  ("Stepbrother"),
  ("Stepsister"),
  ("Step mother"),
  ("Step father"),
  ("Step brother"),
  ("Step sister"),
  ("buddy"),
  ("friend"),
  ("twin"),
  ("twinn"),
  ("boyfriend"),
  ("girlfriend"),
  ("dad"),
  ("mom")
);
CreateDict(
    "name" => "relations.dict",
    "table" => "relations.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'weddingAnniversary.dict'
CreateTable(
  "weddingAnniversary.dict__TABLE",
  ("entry" => "Text"),
  ("happy wedding anniversary"),
  ("happy marriage anniversary"),
  ("happy wedding anniv"),
  ("happy marriage anniv"),
  ("Congrats anniv wedding"),
  ("Congrats anniversary wedding"),
  ("happy anniversary wedding"),
  ("happy anniversary marriage"),
  ("congrats on your wedding anniversary"),
  ("congrats on ur wedding anniversary"),
  ("congratulations on your wedding anniversary"),
  ("congratulations on ur wedding anniversary"),
  ("congrats on your weddin anniversary"),
  ("congrats on ur weddin anniversary"),
  ("congratulations on your weddin anniversary"),
  ("congratulations on ur weddin anniversary"),
  ("")
);
CreateDict(
    "name" => "weddingAnniversary.dict",
    "table" => "weddingAnniversary.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'wishfulThinking.dict'
CreateTable(
  "wishfulThinking.dict__TABLE",
  ("entry" => "Text"),
  ("almost"),
  ("apparently"),
  ("as if"),
  ("close to"),
  ("considering"),
  ("could"),
  ("doubt it"),
  ("doubt if"),
  ("feel like"),
  ("I think"),
  ("if I"),
  ("if we"),
  ("may be"),
  ("might"),
  ("wanna"),
  ("wana"),
  ("want to"),
  ("want 2"),
  ("wish"),
  ("wishes"),
  ("with the idea"),
  ("would"),
  ("plan on"),
  ("possibly"),
  ("pretty much"),
  ("probable"),
  ("probably"),
  ("should be"),
  ("should have"),
  ("still thinks"),
  ("supposedly"),
  ("thinking about"),
  ("thinking of"),
  ("was dead set")
);
CreateDict(
    "name" => "wishfulThinking.dict",
    "table" => "wishfulThinking.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

# Generated table for entries of inline dict 'zodiacSigns.dict'
CreateTable(
  "zodiacSigns.dict__TABLE",
  ("entry" => "Text"),
  ("Aries"),
  ("Taurus"),
  ("Gemini"),
  ("Cancer"),
  ("Leo"),
  ("Virgo"),
  ("Libra"),
  ("Scorpio"),
  ("Sagittarius"),
  ("Capricorn"),
  ("Aquarius"),
  ("Pisces")
);
CreateDict(
    "name" => "zodiacSigns.dict",
    "table" => "zodiacSigns.dict__TABLE",
    "column" => "entry",
    "case" => "insensitive"
);

CreateFunction(
    "functionName" => "GetCleanFirstNames",
    "externalName" => "smarc_4aql.jar:com.ibm.midas.utils.GenderFromUserScreenNamesUtils!GetCleanFirstNames",
    "language" => "Java",
    "returnType" => "String",
    "deterministic" => "true",
    "returnsNullOnNullInp" => "true",
    "string1" => "String"
);

CreateFunction(
    "functionName" => "equalsIgnoreCase",
    "externalName" => "smarc_4aql.jar:com.ibm.midas.utils.StringManipulation!equalsIgnoreCase",
    "language" => "Java",
    "returnType" => "Boolean",
    "deterministic" => "true",
    "returnsNullOnNullInp" => "true",
    "string1" => "String",
    "string2" => "String"
);

CreateFunction(
    "functionName" => "isSubstringIgnoreCase",
    "externalName" => "smarc_4aql.jar:com.ibm.midas.utils.StringManipulation!isSubstringIgnoreCase",
    "language" => "Java",
    "returnType" => "Boolean",
    "deterministic" => "true",
    "returnsNullOnNullInp" => "true",
    "largeString" => "String",
    "smallString" => "String"
);

CreateFunction(
    "functionName" => "normalizeKeepAlphaNumeric",
    "externalName" => "smarc_4aql.jar:com.ibm.midas.utils.StringManipulation!normalizeKeepAlphaNumeric",
    "language" => "Java",
    "returnType" => "String",
    "deterministic" => "true",
    "returnsNullOnNullInp" => "true",
    "string1" => "String"
);

CreateFunction(
    "functionName" => "toUpperCase",
    "externalName" => "smarc_4aql.jar:com.ibm.midas.utils.StringManipulation!toUpperCase",
    "language" => "Java",
    "returnType" => "String",
    "deterministic" => "true",
    "returnsNullOnNullInp" => "true",
    "string" => "String"
);

$_{"_ME_MG_goToSee_3d_TmpView_\'3d\'__5"} =
Project(
  (
    "group_0" => "group_0"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "group_0"
    ),
    $SDM_OUTPUT__ME_MG_goToSee_3d_TmpDict__1_WITH_Default_OVER_DocScan_text
  )
);

$_{"_ME_MG_goToSee_3d_TmpView_\'3d\'__8"} =
Project(
  (
    "group_0" => "group_0"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "group_0"
    ),
    $SDM_OUTPUT__ME_MG_goToSee_3d_TmpDict__2_WITH_Default_OVER_DocScan_text
  )
);

$_{"_ME_MG_goToSee_basic_TmpView_\'a\'__11"} =
Project(
  (
    "group_0" => "group_0"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "group_0"
    ),
    $SDM_OUTPUT__ME_MG_goToSee_basic_TmpDict__3_WITH_Default_OVER_DocScan_text
  )
);

$_{"_ME_MG_goToSee_going_TmpView_\'a\'__24"} =
Project(
  (
    "group_0" => "group_0"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "group_0"
    ),
    $SDM_OUTPUT__ME_MG_goToSee_going_TmpDict__4_WITH_Default_OVER_DocScan_text
  )
);

$_{"_ME_MG_goToSee_new_TmpView_\'new\'__33"} =
Project(
  (
    "group_0" => "group_0"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "group_0"
    ),
    $SDM_OUTPUT__ME_MG_goToSee_new_TmpDict__5_WITH_Default_OVER_DocScan_text
  )
);

$_{"_ME_MG_goToSee_take_TmpView_\'to\'__37"} =
Project(
  (
    "group_0" => "group_0"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "group_0"
    ),
    $SDM_OUTPUT__ME_MG_goToSee_take_TmpDict__6_WITH_Default_OVER_DocScan_text
  )
);

$Document =
$Document;

$_{"Candidates_LifeEvents_JobRelated_Status❡subquery1"} =
Project(
  (
    "D.text" => "tweet",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_LifeChangingEventsDict_JobRelated_Status_Weak_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"Continents❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_location_continent_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"CountriesCandidates❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_location_countries_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"JobStatus_Candidiate_Jobtypes❡subquery1"} =
Project(
  (
    "D.text" => "tweet",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_job_types_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"JobStatus_CoworkersDict❡subquery1"} =
Project(
  (
    "D.text" => "tweet",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_LifeChangingEventsDict_JobRelated_Events_CoworkersDict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"JobStatus_OutOfWork_Candidiate❡subquery1"} =
Project(
  (
    "D.text" => "tweet",
    "match" => "match"
  ),
  Regex(/(?:\boutta\b|out\s{0,10}of)\s{1,10}(?:job|work|office|company)/, (0 => "match"), "CASE_INSENSITIVE", "D.text",
    Project(
      (
        "text" => "D.text"
      ),
      $Document
    )
  )
);

$_{"JobStatus_atOfficeTweets❡subquery1"} =
Project(
  (
    "D.text" => "tweet",
    "match" => "match"
  ),
  Regex(/(?:\bmy\b|\bour\b)\s{1,10}(?:\bnew\b)?(?:office|company)/, (0 => "match"), "CASE_INSENSITIVE", "D.text",
    Project(
      (
        "text" => "D.text"
      ),
      $Document
    )
  )
);

$_{"MotionKeywords_InTweets❡subquery1"} =
Project(
  (
    "D.text" => "tweet",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_VerbsForLocationDict_WITH_Default_OVER_Document_text
  )
);

$_{"USStateAbbrCandidates❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_location_stateListAbbrev_dict_WITH_Exact_OVER_Document_text
  )
);

$_{"USStatesCandidates❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_location_stateList_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"WeakUSCities❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_location_USCities_Weak_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$AllTweets =
Project(
  (
    "tweet" => "tweet"
  ),
  FastRegex(/.*/, (0 => "tweet"), "DOTALL", "D.text",
    Project(
      (
        "text" => "D.text"
      ),
      $Document
    )
  )
);

$B_EmailAndName =
Project(
  (
    "D.text" => "text",
    "email_address" => "email_address",
    "name" => "name"
  ),
  Regex(/([a-zA-Z0-9\_\.]+\@[a-zA-Z]+\.[A-Za-z]{3})\s*\(([A-Za-z][A-Za-z\s]*)\)/, (1 => "email_address", 2 => "name"), "DOTALL", "D.text",
    Project(
      (
        "text" => "D.text"
      ),
      $Document
    )
  )
);

$CandidatesAll_FathersDay =
Project(
  (
    "FunctionCall15565" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.text"
    ),
    ApplyFunc(
      Chomp(
        GetCol(
          "T.text"
        )
      ) => "FunctionCall15565",
      Select(
        And(
          ContainsDict(
            StringConst(
              "FatherKeywordsGenericDict"
            ),
            GetCol(
              "T.text"
            )
          ),
          ContainsRegex(
            RegexConst(
              /@[a-zA-Z0-9_]{1,15}/,
              "SimpleRegex"
            ),
            GetCol(
              "T.text"
            )
          )
        ),
        Project(
          (
            "text" => "T.text"
          ),
          $Document
        )
      )
    )
  )
);

$CandidatesAll_LifeEvents_BabyWishes =
Project(
  (
    "FunctionCall13358" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.text"
    ),
    ApplyFunc(
      Chomp(
        GetCol(
          "T.text"
        )
      ) => "FunctionCall13358",
      Select(
        ContainsDict(
          StringConst(
            "LifeChangingEventsDict_Baby_Generic"
          ),
          GetCol(
            "T.text"
          )
        ),
        Project(
          (
            "text" => "T.text"
          ),
          $Document
        )
      )
    )
  )
);

$CandidatesAll_LifeEvents_HasChildren_Generic =
Project(
  (
    "T.tweet" => "tweet"
  ),
  Select(
    Not(
      ContainsRegex(
        RegexConst(
          /\bRT\b/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "T.tweet"
        )
      )
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $CandidatesAll_LifeEvents_BabyWishes
    )
  )
);

$CandidatesAll_LifeEvents_IsMarried_Generic =
Project(
  (
    "FunctionCall12838" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.text"
    ),
    ApplyFunc(
      Chomp(
        GetCol(
          "T.text"
        )
      ) => "FunctionCall12838",
      Select(
        And(
          ContainsDict(
            StringConst(
              "LifeChangingEventsDict_Marriage_Generic"
            ),
            GetCol(
              "T.text"
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bRT\b/,
                "JavaRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              GetCol(
                "T.text"
              )
            )
          )
        ),
        Project(
          (
            "text" => "T.text"
          ),
          $Document
        )
      )
    )
  )
);

$CandidatesAll_MothersDay =
Project(
  (
    "FunctionCall14522" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.text"
    ),
    ApplyFunc(
      Chomp(
        GetCol(
          "T.text"
        )
      ) => "FunctionCall14522",
      Select(
        And(
          ContainsDict(
            StringConst(
              "MotherKeywordsGenericDict"
            ),
            GetCol(
              "T.text"
            )
          ),
          ContainsRegex(
            RegexConst(
              /@[a-zA-Z0-9_]{1,15}/,
              "SimpleRegex"
            ),
            GetCol(
              "T.text"
            )
          )
        ),
        Project(
          (
            "text" => "T.text"
          ),
          $Document
        )
      )
    )
  )
);

$Candidates_LifeEvents =
Project(
  (
    "FunctionCall10517" => "tweet"
  ),
  ApplyFunc(
    Chomp(
      GetCol(
        "T.text"
      )
    ) => "FunctionCall10517",
    Select(
      ContainsDict(
        StringConst(
          "LifeEvents.dict"
        ),
        GetCol(
          "T.text"
        )
      ),
      Project(
        (
          "text" => "T.text"
        ),
        $Document
      )
    )
  )
);

$Candidates_LifeEvents_Bday =
Project(
  (
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    Select(
      Or(
        ContainsDict(
          StringConst(
            "LifeChangingEventsDict_Bday_Weak"
          ),
          GetCol(
            "T.tweet"
          )
        ),
        ContainsRegex(
          RegexConst(
            /(?:b'day)|(?:b'dae)/,
            "SimpleRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "T.tweet"
          )
        )
      ),
      Project(
        (
          "tweet" => "T.tweet"
        ),
        $Candidates_LifeEvents
      )
    )
  )
);

$Candidates_LifeEvents_JobRelated_Status =
Project(
  (
    "T.match" => "key",
    "FunctionCall18621" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    ApplyFunc(
      Chomp(
        GetCol(
          "T.tweet"
        )
      ) => "FunctionCall18621",
      Project(
        (
          "match" => "T.match",
          "tweet" => "T.tweet"
        ),
        $_{"Candidates_LifeEvents_JobRelated_Status❡subquery1"}
      )
    )
  )
);

$Candidates_LifeEvents_Marriage =
Project(
  (
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    Select(
      ContainsDict(
        StringConst(
          "LifeChangingEventsDict_Marriage_Weak"
        ),
        GetCol(
          "T.tweet"
        )
      ),
      Project(
        (
          "tweet" => "T.tweet"
        ),
        $Candidates_LifeEvents
      )
    )
  )
);

$Candidates_LifeEvents_Marriage_Refined =
Project(
  (
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    Select(
      And(
        ContainsRegex(
          RegexConst(
            /@[a-zA-Z0-9_]{1,15}/,
            "SimpleRegex"
          ),
          GetCol(
            "T.tweet"
          )
        ),
        Or(
          ContainsDict(
            StringConst(
              "CongratulatoryKeywords.dict"
            ),
            GetCol(
              "T.tweet"
            )
          ),
          ContainsDict(
            StringConst(
              "marriage.dict"
            ),
            GetCol(
              "T.tweet"
            )
          )
        )
      ),
      Project(
        (
          "tweet" => "T.tweet"
        ),
        $Candidates_LifeEvents_Marriage
      )
    )
  )
);

$Continents =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"Continents❡subquery1"}
  )
);

$CountriesCandidates =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"CountriesCandidates❡subquery1"}
  )
);

$Female_FirstName =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_names_FemaleFnames_dict_WITH_Default_OVER_Document_text
  )
);

$H_Baseball_Hashes_X =
Project(
  (
    "FunctionCall42208" => "prov",
    "D.text" => "fullspan",
    "match" => "match"
  ),
  ApplyFunc(
    StringConst(
      "nfl_hash"
    ) => "FunctionCall42208",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_H_Baseball_Hashes_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$H_Baseball_Unique_X =
Project(
  (
    "FunctionCall42210" => "prov",
    "D.text" => "fullspan",
    "match" => "match"
  ),
  ApplyFunc(
    StringConst(
      "baseball_unique"
    ) => "FunctionCall42210",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_H_Baseball_Unique_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$H_Dance_X =
Project(
  (
    "FunctionCall42212" => "prov",
    "D.text" => "fullspan",
    "match" => "match"
  ),
  ApplyFunc(
    StringConst(
      "dance"
    ) => "FunctionCall42212",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_H_Dance_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$H_Foodies_X =
Project(
  (
    "FunctionCall42214" => "prov",
    "D.text" => "fullspan",
    "match" => "match"
  ),
  ApplyFunc(
    StringConst(
      "foodies"
    ) => "FunctionCall42214",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_H_Foodies_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$H_GeneralSports_X =
Project(
  (
    "FunctionCall42216" => "prov",
    "D.text" => "fullspan",
    "match" => "match"
  ),
  ApplyFunc(
    StringConst(
      "sports"
    ) => "FunctionCall42216",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_H_Sports_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$H_NBA_Hashes_X =
Project(
  (
    "FunctionCall42218" => "prov",
    "D.text" => "fullspan",
    "match" => "match"
  ),
  ApplyFunc(
    StringConst(
      "nba_hash"
    ) => "FunctionCall42218",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_H_NBATeams_Hashes_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$H_NBA_Unique_X =
Project(
  (
    "FunctionCall42220" => "prov",
    "D.text" => "fullspan",
    "match" => "match"
  ),
  ApplyFunc(
    StringConst(
      "nba_unique"
    ) => "FunctionCall42220",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_H_NBATeams_Unique_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$H_NFL_Hashes_X =
Project(
  (
    "FunctionCall42222" => "prov",
    "D.text" => "fullspan",
    "match" => "match"
  ),
  ApplyFunc(
    StringConst(
      "nfl_hash"
    ) => "FunctionCall42222",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_H_NLFTeams_Hashes_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$H_NFL_Unique_X =
Project(
  (
    "FunctionCall42224" => "prov",
    "D.text" => "fullspan",
    "match" => "match"
  ),
  ApplyFunc(
    StringConst(
      "nfl_unique"
    ) => "FunctionCall42224",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_H_NFLTeams_Unique_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$H_Pets_X =
Project(
  (
    "FunctionCall42226" => "prov",
    "D.text" => "fullspan",
    "match" => "match"
  ),
  ApplyFunc(
    StringConst(
      "pets"
    ) => "FunctionCall42226",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_H_Pets_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$H_Shop_X =
Project(
  (
    "FunctionCall42228" => "prov",
    "D.text" => "fullspan",
    "match" => "match"
  ),
  ApplyFunc(
    StringConst(
      "shop"
    ) => "FunctionCall42228",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_H_Shop_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_Accountancy_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42230" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "accountancy"
    ) => "FunctionCall42230",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_Accountancy_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_BlueCollar_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42232" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "education"
    ) => "FunctionCall42232",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_BlueCollar_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_BusinessOwner_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42234" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "business_owner"
    ) => "FunctionCall42234",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_BusinessOwner_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_Education_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42236" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "education"
    ) => "FunctionCall42236",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_Education_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_Engineer_Ment =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42238" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "Engineer"
    ) => "FunctionCall42238",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_Engineering_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_Engineer_Type =
Project(
  (
    "engineer_type" => "engineer_type"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "engineer_type"
    ),
    $SDM_OUTPUT_HI_NonIT_Engineer_Dict_WITH_Default_OVER_Document_text
  )
);

$JO_Food_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42240" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "food"
    ) => "FunctionCall42240",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_Food_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_Health_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42242" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "health"
    ) => "FunctionCall42242",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_Health_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_IT_Hooks =
Select(
  Not(
    equalsIgnoreCase(
      GetString(
        GetCol(
          "job_type"
        )
      ),
      StringConst(
        "It"
      )
    )
  ),
  Project(
    (
      "D.text" => "fullspan",
      "FunctionCall42244" => "category",
      "job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "IT"
      ) => "FunctionCall42244",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "job_type"
        ),
        $SDM_OUTPUT_HI_IT_Hooks_Dict_WITH_Default_OVER_Document_text
      )
    )
  )
);

$JO_Job_Word =
Project(
  (
    "job" => "job"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "job"
    ),
    $SDM_OUTPUT_JO_Job_Word_Dict_WITH_Default_OVER_Document_text
  )
);

$JO_Law_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42246" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "law"
    ) => "FunctionCall42246",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_Law_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_Management_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42248" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "management"
    ) => "FunctionCall42248",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_Management_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_Marketing_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42250" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "marketing"
    ) => "FunctionCall42250",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_Marketing_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_Media_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42252" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "media"
    ) => "FunctionCall42252",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_Media_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_Military_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42254" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "military"
    ) => "FunctionCall42254",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_Military_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_NonIT_Engineer =
Project(
  (
    "E.category" => "category",
    "FunctionCall40064" => "job_type",
    "E.fullspan" => "fullspan"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.engineer_type"
      ),
      GetCol(
        "E.job_type"
      )
    ) => "FunctionCall40064",
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "E.job_type"
        ),
        GetCol(
          "T.engineer_type"
        ),
        IntConst(
          0
        ),
        IntConst(
          2
        )
      ),
      Project(
        (
          "category" => "E.category",
          "fullspan" => "E.fullspan",
          "job_type" => "E.job_type"
        ),
        $JO_Engineer_Ment
      ),
      Project(
        (
          "engineer_type" => "T.engineer_type"
        ),
        $JO_Engineer_Type
      )
    )
  )
);

$JO_RealEstate_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42268" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "real_estate"
    ) => "FunctionCall42268",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_RealEstate_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_Recruit_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42270" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "recruitment"
    ) => "FunctionCall42270",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_Recruit_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_Retired_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42272" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "retired"
    ) => "FunctionCall42272",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_Retired_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_Search_Word =
Project(
  (
    "searching" => "searching"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "searching"
    ),
    $SDM_OUTPUT_JO_Search_Word_Dict_WITH_Default_OVER_Document_text
  )
);

$JO_Sports_Hooks =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall42274" => "category",
    "job_type" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "sports"
    ) => "FunctionCall42274",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "job_type"
      ),
      $SDM_OUTPUT_HI_Sports_Hooks_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$JO_Student =
Select(
  Not(
    ContainsDict(
      StringConst(
        "JO_NotStudent_Dict"
      ),
      GetCol(
        "fullspan"
      )
    )
  ),
  Project(
    (
      "FunctionCall42276" => "category",
      "D.text" => "fullspan",
      "job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "student"
      ) => "FunctionCall42276",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "job_type"
        ),
        $SDM_OUTPUT_JO_Student_Dict_WITH_Default_OVER_Document_text
      )
    )
  )
);

$JO_Tokens =
Select(
  And(
    GreaterThan(
      GetLength(
        GetCol(
          "job_match"
        )
      ),
      IntConst(
        2
      )
    ),
    Not(
      ContainsDict(
        StringConst(
          "Jobs/notReallyJobs.dict"
        ),
        StringConst(
          "IgnoreCase"
        ),
        GetCol(
          "job_match"
        )
      )
    ),
    Not(
      ContainsDict(
        StringConst(
          "Jobs/notReallyJobs.dict"
        ),
        StringConst(
          "IgnoreCase"
        ),
        LeftContextTok(
          GetCol(
            "job_match"
          ),
          IntConst(
            5
          )
        )
      )
    ),
    Not(
      ContainsDict(
        StringConst(
          "Jobs/urlParts.dict"
        ),
        StringConst(
          "Exact"
        ),
        LeftContextTok(
          GetCol(
            "job_match"
          ),
          IntConst(
            20
          )
        )
      )
    )
  ),
  Project(
    (
      "O.text" => "fullspan",
      "job_match" => "job_match"
    ),
    Regex(/(^|,|--| - |\||\&|\!|\\|\.)?\s*(I\s*am\s+a?\s*)?\s*(([A-Z]*[a-z]*\s*\&?'?@?-?)+)/, (3 => "job_match"), "DOTALL", "O.text",
      Project(
        (
          "text" => "O.text"
        ),
        $Document
      )
    )
  )
);

$JO_mom =
Project(
  (
    "mom" => "mom"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "mom"
    ),
    $SDM_OUTPUT_JO_Mom_Dict_WITH_Default_OVER_Document_text
  )
);

$JO_wife =
Project(
  (
    "wife" => "wife"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "wife"
    ),
    $SDM_OUTPUT_JO_Wife_Dict_WITH_Default_OVER_Document_text
  )
);

$JobStatus_Candidiate_Jobtypes =
Project(
  (
    "FunctionCall18650" => "tweet",
    "T.match" => "key"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    ApplyFunc(
      Chomp(
        GetCol(
          "T.tweet"
        )
      ) => "FunctionCall18650",
      Project(
        (
          "match" => "T.match",
          "tweet" => "T.tweet"
        ),
        $_{"JobStatus_Candidiate_Jobtypes❡subquery1"}
      )
    )
  )
);

$JobStatus_CoworkersDict =
Project(
  (
    "T.match" => "key",
    "FunctionCall18586" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    ApplyFunc(
      Chomp(
        GetCol(
          "T.tweet"
        )
      ) => "FunctionCall18586",
      Project(
        (
          "match" => "T.match",
          "tweet" => "T.tweet"
        ),
        $_{"JobStatus_CoworkersDict❡subquery1"}
      )
    )
  )
);

$JobStatus_IamPattern =
Project(
  (
    "JT.tweet" => "tweet",
    "JT.key" => "key",
    "JT.key" => "JobType",
    "FunctionCall19760" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "JT.tweet"
    ),
    ApplyFunc(
      CombineSpans(
        LeftContextTok(
          GetCol(
            "JT.key"
          ),
          IntConst(
            4
          )
        ),
        GetCol(
          "JT.key"
        )
      ) => "FunctionCall19760",
      Select(
        And(
          ContainsRegex(
            RegexConst(
              /\bI\b\s{0,5}(?:\'m|am\b|m\b)/,
              "JavaRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            LeftContextTok(
              GetCol(
                "JT.key"
              ),
              IntConst(
                3
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "wishfulThinking.dict"
              ),
              StringConst(
                "IgnoreCase"
              ),
              LeftContextTok(
                GetCol(
                  "JT.key"
                ),
                IntConst(
                  5
                )
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /(?:http|www\.)/,
                "SimpleRegex"
              ),
              GetCol(
                "JT.tweet"
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bRT\b/,
                "JavaRegex"
              ),
              LeftContextTok(
                GetCol(
                  "JT.key"
                ),
                IntConst(
                  30
                )
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bmy\b|\bno\b|\bnot\b|\bmean\b/,
                "JavaRegex"
              ),
              LeftContextTok(
                GetCol(
                  "JT.key"
                ),
                IntConst(
                  4
                )
              )
            )
          )
        ),
        Project(
          (
            "key" => "JT.key",
            "tweet" => "JT.tweet"
          ),
          $JobStatus_Candidiate_Jobtypes
        )
      )
    )
  )
);

$JobStatus_MyColleaguePattern =
Project(
  (
    "C.tweet" => "tweet",
    "C.key" => "key",
    "FunctionCall19649" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "C.tweet"
    ),
    ApplyFunc(
      CombineSpans(
        LeftContextTok(
          GetCol(
            "C.key"
          ),
          IntConst(
            2
          )
        ),
        GetCol(
          "C.key"
        )
      ) => "FunctionCall19649",
      Select(
        And(
          ContainsRegex(
            RegexConst(
              /\bmy\b|\bI\s{0,6}am|\bour\b/,
              "JavaRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            LeftContextTok(
              GetCol(
                "C.key"
              ),
              IntConst(
                2
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "relations.dict"
              ),
              StringConst(
                "IgnoreCase"
              ),
              LeftContextTok(
                GetCol(
                  "C.key"
                ),
                IntConst(
                  2
                )
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /(?:http|www\.)/,
                "SimpleRegex"
              ),
              GetCol(
                "C.tweet"
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bRT\b/,
                "JavaRegex"
              ),
              LeftContextTok(
                GetCol(
                  "C.key"
                ),
                IntConst(
                  30
                )
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\_/,
                "SimpleRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              LeftContext(
                GetCol(
                  "C.key"
                ),
                IntConst(
                  1
                )
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bschool\b|\bfriend/,
                "JavaRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              LeftContextTok(
                GetCol(
                  "C.key"
                ),
                IntConst(
                  2
                )
              )
            )
          )
        ),
        Project(
          (
            "key" => "C.key",
            "tweet" => "C.tweet"
          ),
          $JobStatus_CoworkersDict
        )
      )
    )
  )
);

$JobStatus_MyShiftPattern_Candidate =
Project(
  (
    "D.text" => "tweet",
    "key" => "key"
  ),
  Regex(/\bshift\b/, (0 => "key"), "CASE_INSENSITIVE", "D.text",
    Project(
      (
        "text" => "D.text"
      ),
      $Document
    )
  )
);

$JobStatus_MyShift_mention =
Project(
  (
    "MS.tweet" => "tweet",
    "MS.key" => "key",
    "FunctionCall19867" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "MS.tweet"
    ),
    ApplyFunc(
      CombineSpans(
        LeftContextTok(
          GetCol(
            "MS.key"
          ),
          IntConst(
            2
          )
        ),
        GetCol(
          "MS.key"
        )
      ) => "FunctionCall19867",
      Select(
        And(
          ContainsDict(
            StringConst(
              "JobShiftTypes.dict"
            ),
            StringConst(
              "IgnoreCase"
            ),
            LeftContextTok(
              GetCol(
                "MS.key"
              ),
              IntConst(
                3
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /(?:http|www\.)/,
                "SimpleRegex"
              ),
              GetCol(
                "MS.tweet"
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bRT\b/,
                "JavaRegex"
              ),
              LeftContextTok(
                GetCol(
                  "MS.key"
                ),
                IntConst(
                  30
                )
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bgear\b|\bevo\b/,
                "JavaRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              LeftContextTok(
                GetCol(
                  "MS.key"
                ),
                IntConst(
                  2
                )
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bkey/,
                "JavaRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              RightContextTok(
                GetCol(
                  "MS.key"
                ),
                IntConst(
                  2
                )
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bto\b/,
                "JavaRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              LeftContextTok(
                GetCol(
                  "MS.key"
                ),
                IntConst(
                  1
                )
              )
            )
          )
        ),
        Project(
          (
            "key" => "MS.key",
            "tweet" => "MS.tweet"
          ),
          $JobStatus_MyShiftPattern_Candidate
        )
      )
    )
  )
);

$JobStatus_OutOfWork_Candidiate =
Project(
  (
    "FunctionCall18752" => "tweet",
    "T.match" => "key"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    ApplyFunc(
      Chomp(
        GetCol(
          "T.tweet"
        )
      ) => "FunctionCall18752",
      Select(
        And(
          Not(
            ContainsRegex(
              RegexConst(
                /(?:http|www\.|\bschool|\bexam|\bstud)/,
                "JavaRegex"
              ),
              GetCol(
                "T.tweet"
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bRT\b/,
                "JavaRegex"
              ),
              LeftContextTok(
                GetCol(
                  "T.match"
                ),
                IntConst(
                  20
                )
              )
            )
          )
        ),
        Project(
          (
            "match" => "T.match",
            "tweet" => "T.tweet"
          ),
          $_{"JobStatus_OutOfWork_Candidiate❡subquery1"}
        )
      )
    )
  )
);

$JobStatus_OutOfWork_mentionsPattern1 =
Project(
  (
    "T.tweet" => "tweet",
    "T.key" => "key",
    "FunctionCall18824" => "mention"
  ),
  ApplyFunc(
    CombineSpans(
      LeftContextTok(
        GetCol(
          "T.key"
        ),
        IntConst(
          3
        )
      ),
      GetCol(
        "T.key"
      )
    ) => "FunctionCall18824",
    Select(
      ContainsRegex(
        RegexConst(
          /(?:\bI\b|\bI\'m\b|\bIm\b)/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        LeftContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            3
          )
        )
      ),
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet"
        ),
        $JobStatus_OutOfWork_Candidiate
      )
    )
  )
);

$JobStatus_WorkingWithPattern =
Select(
  And(
    Not(
      ContainsRegex(
        RegexConst(
          /http|www./,
          "SimpleRegex"
        ),
        GetCol(
          "tweet"
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /(?:used\s{0,5}to)|\bwas|\bleave|\bshould|\bur\b|\byou/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "mention"
        )
      )
    ),
    Not(
      ContainsDict(
        StringConst(
          "negate.dict"
        ),
        StringConst(
          "IgnoreCase"
        ),
        GetCol(
          "mention"
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /\?/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "mention"
          ),
          IntConst(
            1
          )
        )
      )
    ),
    Not(
      ContainsDict(
        StringConst(
          "wishfulThinking.dict"
        ),
        StringConst(
          "IgnoreCase"
        ),
        GetCol(
          "mention"
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /\bRT\b/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        LeftContextTok(
          GetCol(
            "mention"
          ),
          IntConst(
            20
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42278" => "key",
      "D.text" => "tweet",
      "mention" => "mention"
    ),
    ApplyFunc(
      StringConst(
        "company"
      ) => "FunctionCall42278",
      Regex(/(?:\b[I|i]\'?(?:ll|m|am)?\b)\s{0,10}(?:\w{1,10}\s{0,10}){0,3}\bwork(?:ing)?\s{0,10}(?:for)\s{1,10}(?:the|\bd\b)?\s{0,10}(?:(?:[A-Z]\w{1,10}\s{0,4}[a-z]{0,2}\s{0,10}){1,3})/, (0 => "mention"), "DOTALL", "D.text",
        Project(
          (
            "text" => "D.text"
          ),
          $Document
        )
      )
    )
  )
);

$JobStatus_atOfficeTweets =
Project(
  (
    "FunctionCall18685" => "tweet",
    "FunctionCall41856" => "key",
    "T.match" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    ApplyFunc(
      StringConst(
        "office"
      ) => "FunctionCall41856",
      ApplyFunc(
        Chomp(
          GetCol(
            "T.tweet"
          )
        ) => "FunctionCall18685",
        Select(
          And(
            Not(
              ContainsRegex(
                RegexConst(
                  /(?:http|www\.)/,
                  "SimpleRegex"
                ),
                GetCol(
                  "T.tweet"
                )
              )
            ),
            Not(
              ContainsRegex(
                RegexConst(
                  /\bRT\b/,
                  "JavaRegex"
                ),
                LeftContextTok(
                  GetCol(
                    "T.match"
                  ),
                  IntConst(
                    30
                  )
                )
              )
            ),
            Not(
              ContainsRegex(
                RegexConst(
                  /\bmiss\b|\bkeep|\bwan/,
                  "JavaRegex"
                ),
                LeftContextTok(
                  GetCol(
                    "T.match"
                  ),
                  IntConst(
                    3
                  )
                )
              )
            )
          ),
          Project(
            (
              "match" => "T.match",
              "tweet" => "T.tweet"
            ),
            $_{"JobStatus_atOfficeTweets❡subquery1"}
          )
        )
      )
    )
  )
);

$LifeEvents_Anniversary_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "key"
  ),
  Project(
    (
      "D.tweet" => "tweet",
      "key" => "key"
    ),
    Project(
      (
        "tweet" => "D.tweet",
        "__sdm_match" => "key"
      ),
      $SDM_OUTPUT_weddingAnniversary_dict_WITH_Default_OVER_Candidates_LifeEvents_Marriage_Refined_tweet
    )
  )
);

$LifeEvents_BabyWishes_Strong =
Consolidate(
  "ContainedWithin",
  GetCol(
    "tweet"
  ),
  Select(
    And(
      ContainsRegex(
        RegexConst(
          /@[a-zA-Z0-9_]{1,15}/,
          "SimpleRegex"
        ),
        GetCol(
          "tweet"
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "BelatedWishesDict"
          ),
          GetCol(
            "tweet"
          )
        )
      )
    ),
    Project(
      (
        "D.tweet" => "tweet",
        "key" => "key"
      ),
      Dictionary("CongratulatoryKeywords.dict" => "Default" , "D.tweet", "key",
        Project(
          (
            "tweet" => "D.tweet"
          ),
          $CandidatesAll_LifeEvents_BabyWishes
        )
      )
    )
  )
);

$LifeEvents_BabyWishes_StrongMentions_Regex =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "mention" => "mention"
  ),
  Regex(/\bon\s(?:the|your|ur|yr)\s(?:.+)\sbaby/, (0 => "mention"), "CASE_INSENSITIVE", "T.tweet",
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_BabyWishes_Strong
    )
  )
);

$LifeEvents_JobRelated_EventsTweets =
Project(
  (
    "D.text" => "text"
  ),
  Project(
    (
      "text" => "D.text"
    ),
    $Document
  )
);

$LifeEvents_Marriage_Strong =
Consolidate(
  "ContainedWithin",
  GetCol(
    "key"
  ),
  Select(
    Not(
      ContainsRegex(
        RegexConst(
          /anniv/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "tweet"
        )
      )
    ),
    Project(
      (
        "D.tweet" => "tweet",
        "key" => "key"
      ),
      Project(
        (
          "tweet" => "D.tweet",
          "__sdm_match" => "key"
        ),
        $SDM_OUTPUT_marriagePhrases_dict_WITH_Default_OVER_Candidates_LifeEvents_Marriage_Refined_tweet
      )
    )
  )
);

$MET_MovieRole =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_Role_Dict_WITH_Default_OVER_Document_text
  )
);

$MET_MovieStar =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_Star_Dict_WITH_Default_OVER_Document_text
  )
);

$ME_CluesForCategories =
Consolidate(
  "ContainedWithin",
  GetCol(
    "match"
  ),
  Project(
    (
      "D.text" => "text",
      "match" => "match"
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_ME_MovieCategClue_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$ME_Entries =
Project(
  (
    "D.text" => "text"
  ),
  Project(
    (
      "text" => "D.text"
    ),
    $Document
  )
);

$ME_LA_InputText =
Project(
  (
    "D.text" => "text"
  ),
  Project(
    (
      "text" => "D.text"
    ),
    $Document
  )
);

$ME_LA_PopulousNonUSCitiesNoAlias =
Project(
  (
    "D.text" => "fullspan",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_LA_PopulousNonUSCitiesDict_WITH_Default_OVER_ME_LA_InputText_text
  )
);

$ME_LA_StateAbbrvNames =
Select(
  Not(
    MatchesRegex(
      RegexConst(
        /(in)|(mi)|(me)|(de)|(or)|(ma)|(In)|(Mi)|(Me)|(De)|(Or)|(Ma)|(al)|(as)|(As)|(La)|(la)/,
        "SimpleRegex"
      ),
      GetCol(
        "match"
      )
    )
  ),
  Project(
    (
      "D.text" => "fullspan",
      "match" => "match"
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_ME_LA_StateAbbrvsDict_WITH_Default_OVER_ME_LA_InputText_text
    )
  )
);

$ME_LA_StateNames =
Project(
  (
    "D.text" => "fullspan",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_LA_StatesDict_WITH_Default_OVER_ME_LA_InputText_text
  )
);

$ME_LA_StateNamesConsolidatedNoAlias =
Project(
  (
    "D.match" => "match",
    "D.fullspan" => "fullspan"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.match"
    ),
    Project(
      (
        "fullspan" => "D.fullspan",
        "match" => "D.match"
      ),
      $ME_LA_StateNames
    )
  )
);

$ME_PromotionalPost =
Project(
  (
    "D.text" => "text"
  ),
  Select(
    ContainsRegex(
      RegexConst(
        /((http:\/)|(800)|(888))/,
        "SimpleRegex"
      ),
      GetCol(
        "D.text"
      )
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $ME_Entries
    )
  )
);

$ME_RetweetPost =
Project(
  (
    "D.text" => "text",
    "rt_text" => "rt_text"
  ),
  Regex(/\bRT\s@(.*)/, (1 => "rt_text"), "DOTALL", "D.text",
    Project(
      (
        "text" => "D.text"
      ),
      $ME_Entries
    )
  )
);

$ME_SpamPost =
Project(
  (
    "E.text" => "text"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "E.text"
    ),
    Select(
      ContainsDict(
        StringConst(
          "ME_SpamCluesDict"
        ),
        GetCol(
          "E.text"
        )
      ),
      Project(
        (
          "text" => "E.text"
        ),
        $ME_PromotionalPost
      )
    )
  )
);

$ME_Studios =
Project(
  (
    "FunctionCall42280" => "prov",
    "match" => "match"
  ),
  ApplyFunc(
    StringConst(
      "ME_Studios_Dict"
    ) => "FunctionCall42280",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_ME_Studios_Dict_WITH_Default_OVER_Document_text
    )
  )
);

$ME_Topic_Keywords =
Project(
  (
    "FunctionCall42282" => "prov",
    "match" => "match"
  ),
  ApplyFunc(
    StringConst(
      "ME_Topic_Keywords_Dict"
    ) => "FunctionCall42282",
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_MovieTopic_dict_WITH_Default_OVER_Document_text
    )
  )
);

$MajorCity =
Project(
  (
    "match" => "match"
  ),
  Union(
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCity_world_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_city_bayarea_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_china_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_UK_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_russia_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_france_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_iran_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_india_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_brazil_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_italy_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_mexico_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_southKorea_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_spain_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_indonesia_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_australia_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_taiwan_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_turkey_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_serbia_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_majorCities_netherlands_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location__depr_cities_stateCapitals_us_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_location_cities_dict_WITH_Default_OVER_Document_text
    )
  )
);

$Male_FirstName =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_names_MaleFnames_dict_WITH_Default_OVER_Document_text
  )
);

$MotionKeywords_InTweets =
Project(
  (
    "T.match" => "key",
    "T.tweet" => "tweet"
  ),
  Project(
    (
      "match" => "T.match",
      "tweet" => "T.tweet"
    ),
    $_{"MotionKeywords_InTweets❡subquery1"}
  )
);

$NL_InputText_NoEmail =
Difference(
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $Document
    )
  ),
  Project(
    (
      "D.text" => "text"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "D.text"
        ),
        GetCol(
          "B.name"
        )
      ),
      Project(
        (
          "text" => "D.text"
        ),
        $Document
      ),
      Project(
        (
          "name" => "B.name"
        ),
        $B_EmailAndName
      )
    )
  ));

$Spam =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_purchases_spam_dict_WITH_Default_OVER_Document_text
  )
);

$Tweet =
Project(
  (
    "D.text" => "tweetText"
  ),
  Project(
    (
      "text" => "D.text"
    ),
    $Document
  )
);

$USStateAbbrCandidates =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"USStateAbbrCandidates❡subquery1"}
  )
);

$USStatesCandidates =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"USStatesCandidates❡subquery1"}
  )
);

$UserDescription =
Project(
  (
    "D.text" => "userDescText"
  ),
  Project(
    (
      "text" => "D.text"
    ),
    $Document
  )
);

$WeakUSCities =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"WeakUSCities❡subquery1"}
  )
);

$age_mentions1 =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Union(
    Regex(/\d{2}{0,8}old|\d{2}{0,3}year|\d{2}{0,3}yr|\d{2}{0,3}y.o.|\d{2}{0,3}y-o/, (0 => "match"), "CASE_INSENSITIVE", "D.text",
      Project(
        (
          "text" => "D.text"
        ),
        $Document
      )
    ),
    FastRegex(/\d{2}.*anos|I'm \d{2}|i'm \d{2}|im \d{2}|Im \d{2}/, (0 => "match"), "CASE_INSENSITIVE", "D.text",
      Project(
        (
          "text" => "D.text"
        ),
        $Document
      )
    )
  )
);

$clean_fname =
Project(
  (
    "FunctionCall33864" => "text"
  ),
  ApplyFunc(
    GetCleanFirstNames(
      GetString(
        GetCol(
          "D.text"
        )
      )
    ) => "FunctionCall33864",
    Project(
      (
        "text" => "D.text"
      ),
      $Document
    )
  )
);

$country =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_names_country_dict_WITH_Default_OVER_Document_text
  )
);

$female_fromroles =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_LIWC_female_roles_dict_WITH_Default_OVER_Document_text
  )
);

$female_name_dev =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_names_FemaleFnames_dict_WITH_Default_OVER_clean_fname_text
  )
);

$location_cues4 =
Project(
  (
    "D.text" => "text",
    "C.match" => "match"
  ),
  NLJoin(
    True(),
    Select(
      And(
        ContainsRegex(
          RegexConst(
            /liv in|im from|Im from|I'm from|i'm from|born in|\bresident of\b/,
            "JavaRegex"
          ),
          LeftContextTok(
            GetCol(
              "C.match"
            ),
            IntConst(
              5
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "LIWC/month.dict"
            ),
            GetCol(
              "C.match"
            )
          )
        )
      ),
      Project(
        (
          "match" => "C.match"
        ),
        $country
      )
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $Document
    )
  )
);

$male_fromroles =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_LIWC_male_roles_dict_WITH_Default_OVER_Document_text
  )
);

$male_name_dev =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_names_MaleFnames_dict_WITH_Default_OVER_clean_fname_text
  )
);

$nationality =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Union(
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_names_nationality_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_names_nationality_plural_dict_WITH_Default_OVER_Document_text
    )
  )
);

$non_consumers =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_LIWC_non_consumer_cues_dict_WITH_Default_OVER_Document_text
  )
);

$occupations_vocations_mentions =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_LIWC_job_work_dict_WITH_Default_OVER_Document_text
  )
);

$parent_cues =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_LIWC_parent_roles_dict_WITH_Default_OVER_Document_text
  )
);

$probable_femaleDev =
Project(
  (
    "D.text" => "text",
    "D.match" => "match"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.match"
    ),
    Select(
      And(
        Not(
          And(
            ContainsDict(
              StringConst(
                "LIWC/male_roles.dict"
              ),
              LeftContextTok(
                GetCol(
                  "D.match"
                ),
                IntConst(
                  5
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "LIWC/I.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "D.match"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            )
          )
        ),
        Not(
          And(
            ContainsDict(
              StringConst(
                "LIWC/male_roles.dict"
              ),
              RightContextTok(
                GetCol(
                  "D.match"
                ),
                IntConst(
                  5
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "LIWC/I.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "D.match"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "LIWC/positive_feeling.dict"
            ),
            LeftContextTok(
              GetCol(
                "D.match"
              ),
              IntConst(
                5
              )
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /my|have|having|has|your|ur|his/,
              "SimpleRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            LeftContextTok(
              GetCol(
                "D.match"
              ),
              IntConst(
                5
              )
            )
          )
        )
      ),
      Project(
        (
          "match" => "D.match",
          "text" => "D.text"
        ),
        $female_fromroles
      )
    )
  )
);

$probable_female_fnameDev =
Project(
  (
    "D.text" => "text",
    "D.match" => "match"
  ),
  Select(
    And(
      ContainsRegex(
        RegexConst(
          /[A-Z][a-z]*/,
          "SimpleRegex"
        ),
        GetCol(
          "D.match"
        )
      ),
      ContainsRegex(
        RegexConst(
          /\bname\b|\bnames\b|\bim\b|\bi'm\b/,
          "JavaRegex"
        ),
        LeftContextTok(
          GetCol(
            "D.match"
          ),
          IntConst(
            2
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "LIWC/female_roles.dict"
          ),
          LeftContextTok(
            GetCol(
              "D.match"
            ),
            IntConst(
              3
            )
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "LIWC/male_roles.dict"
          ),
          LeftContextTok(
            GetCol(
              "D.match"
            ),
            IntConst(
              3
            )
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "LIWC/other.dict"
          ),
          LeftContextTok(
            GetCol(
              "D.match"
            ),
            IntConst(
              3
            )
          )
        )
      )
    ),
    Project(
      (
        "match" => "D.match",
        "text" => "D.text"
      ),
      $Female_FirstName
    )
  )
);

$probable_locn =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  FastRegex(/[A-Z][a-z]+/, (0 => "match"), "DOTALL", "D.text",
    Project(
      (
        "text" => "D.text"
      ),
      $Document
    )
  )
);

$probable_maleDev =
Project(
  (
    "D.text" => "text",
    "D.match" => "match"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.match"
    ),
    Select(
      And(
        Not(
          And(
            ContainsDict(
              StringConst(
                "LIWC/female_roles.dict"
              ),
              LeftContextTok(
                GetCol(
                  "D.match"
                ),
                IntConst(
                  5
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "LIWC/I.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "D.match"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            )
          )
        ),
        Not(
          And(
            ContainsDict(
              StringConst(
                "LIWC/female_roles.dict"
              ),
              RightContextTok(
                GetCol(
                  "D.match"
                ),
                IntConst(
                  5
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "LIWC/I.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "D.match"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "LIWC/positive_feeling.dict"
            ),
            LeftContextTok(
              GetCol(
                "D.match"
              ),
              IntConst(
                3
              )
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /my|have|having|has|your|ur|her/,
              "SimpleRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            LeftContextTok(
              GetCol(
                "D.match"
              ),
              IntConst(
                5
              )
            )
          )
        )
      ),
      Project(
        (
          "match" => "D.match",
          "text" => "D.text"
        ),
        $male_fromroles
      )
    )
  )
);

$probable_male_fnameDev =
Project(
  (
    "D.text" => "text",
    "D.match" => "match"
  ),
  Select(
    And(
      ContainsRegex(
        RegexConst(
          /[A-Z][a-z]*/,
          "SimpleRegex"
        ),
        GetCol(
          "D.match"
        )
      ),
      ContainsRegex(
        RegexConst(
          /\bname\b|\bnames\b|\bim\b|\bi'm\b/,
          "JavaRegex"
        ),
        LeftContextTok(
          GetCol(
            "D.match"
          ),
          IntConst(
            2
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "LIWC/female_roles.dict"
          ),
          LeftContextTok(
            GetCol(
              "D.match"
            ),
            IntConst(
              3
            )
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "LIWC/male_roles.dict"
          ),
          LeftContextTok(
            GetCol(
              "D.match"
            ),
            IntConst(
              3
            )
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "LIWC/other.dict"
          ),
          LeftContextTok(
            GetCol(
              "D.match"
            ),
            IntConst(
              3
            )
          )
        )
      )
    ),
    Project(
      (
        "match" => "D.match",
        "text" => "D.text"
      ),
      $Male_FirstName
    )
  )
);

$probable_parentDev =
Project(
  (
    "D.text" => "text",
    "D.match" => "match"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.text"
    ),
    Select(
      Not(
        ContainsRegex(
          RegexConst(
            /my|have/,
            "SimpleRegex"
          ),
          LeftContextTok(
            GetCol(
              "D.match"
            ),
            IntConst(
              5
            )
          )
        )
      ),
      Project(
        (
          "match" => "D.match",
          "text" => "D.text"
        ),
        $parent_cues
      )
    )
  )
);

$reln_statusDev =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_LIWC_reln_status_dict_WITH_Default_OVER_Document_text
  )
);

$specific_age_mentionsDev =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  FastRegex(/[1-9]\d/, (0 => "match"), "DOTALL", "D.match",
    Project(
      (
        "text" => "D.text",
        "match" => "D.match"
      ),
      $age_mentions1
    )
  )
);

$teensignalsDev =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Union(
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_LIWC_teenslang_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_LIWC_swearwords_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_LIWC_sexuality_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_LIWC_teen_hearthrobs_dict_WITH_Default_OVER_Document_text
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_LIWC_teen_signals_dict_WITH_Default_OVER_Document_text
    )
  )
);

$Candidate_JobStatus =
Project(
  (
    "T.key" => "key",
    "FunctionCall19037" => "tweet",
    "match" => "match"
  ),
  ApplyFunc(
    Chomp(
      GetCol(
        "T.tweet"
      )
    ) => "FunctionCall19037",
    Regex(/(?:lookin|\bneed\b|want|wanna|\bhate\b|\blove\b|\blike\b|\bdislike\b|\bapplied\b|\brequire\b|search|hunt|\bapp\b|\bapps|application)/, (0 => "match"), "CASE_INSENSITIVE", "T.tweet",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet"
        ),
        $Candidates_LifeEvents_JobRelated_Status
      )
    )
  )
);

$H_Baseball_UniqueAndHashes =
Union(
  Project(
    (
      "D.prov" => "prov",
      "D.fullspan" => "fullspan",
      "FunctionCall39353" => "match",
      "D.match" => "matchspan"
    ),
    ApplyFunc(
      normalizeKeepAlphaNumeric(
        GetString(
          GetCol(
            "D.match"
          )
        )
      ) => "FunctionCall39353",
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match",
          "prov" => "D.prov"
        ),
        $H_Baseball_Unique_X
      )
    )
  ),
  Project(
    (
      "D.prov" => "prov",
      "D.fullspan" => "fullspan",
      "FunctionCall39387" => "match",
      "D.match" => "matchspan"
    ),
    ApplyFunc(
      normalizeKeepAlphaNumeric(
        GetString(
          GetCol(
            "A.norm"
          )
        )
      ) => "FunctionCall39387",
      NLJoin(
        equalsIgnoreCase(
          GetString(
            GetCol(
              "A.alias"
            )
          ),
          GetString(
            GetCol(
              "D.match"
            )
          )
        ),
        Project(
          (
            "alias" => "A.alias",
            "norm" => "A.norm"
          ),
          $AliasToBaseball
        ),
        Project(
          (
            "fullspan" => "D.fullspan",
            "match" => "D.match",
            "prov" => "D.prov"
          ),
          $H_Baseball_Hashes_X
        )
      )
    )
  )
);

$H_NBA_UniqueAndHashes =
Union(
  Project(
    (
      "D.prov" => "prov",
      "D.fullspan" => "fullspan",
      "FunctionCall39251" => "match",
      "D.match" => "matchspan"
    ),
    ApplyFunc(
      normalizeKeepAlphaNumeric(
        GetString(
          GetCol(
            "D.match"
          )
        )
      ) => "FunctionCall39251",
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match",
          "prov" => "D.prov"
        ),
        $H_NBA_Unique_X
      )
    )
  ),
  Project(
    (
      "D.prov" => "prov",
      "D.fullspan" => "fullspan",
      "FunctionCall39285" => "match",
      "D.match" => "matchspan"
    ),
    ApplyFunc(
      normalizeKeepAlphaNumeric(
        GetString(
          GetCol(
            "A.norm"
          )
        )
      ) => "FunctionCall39285",
      NLJoin(
        equalsIgnoreCase(
          GetString(
            GetCol(
              "A.alias"
            )
          ),
          GetString(
            GetCol(
              "D.match"
            )
          )
        ),
        Project(
          (
            "alias" => "A.alias",
            "norm" => "A.norm"
          ),
          $AliasToNBA
        ),
        Project(
          (
            "fullspan" => "D.fullspan",
            "match" => "D.match",
            "prov" => "D.prov"
          ),
          $H_NBA_Hashes_X
        )
      )
    )
  )
);

$H_NFL_UniqueAndHashes =
Union(
  Project(
    (
      "D.prov" => "prov",
      "D.fullspan" => "fullspan",
      "FunctionCall39149" => "match",
      "D.match" => "matchspan"
    ),
    ApplyFunc(
      normalizeKeepAlphaNumeric(
        GetString(
          GetCol(
            "D.match"
          )
        )
      ) => "FunctionCall39149",
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match",
          "prov" => "D.prov"
        ),
        $H_NFL_Unique_X
      )
    )
  ),
  Project(
    (
      "D.prov" => "prov",
      "D.fullspan" => "fullspan",
      "FunctionCall39183" => "match",
      "D.match" => "matchspan"
    ),
    ApplyFunc(
      normalizeKeepAlphaNumeric(
        GetString(
          GetCol(
            "A.norm"
          )
        )
      ) => "FunctionCall39183",
      NLJoin(
        equalsIgnoreCase(
          GetString(
            GetCol(
              "A.alias"
            )
          ),
          GetString(
            GetCol(
              "D.match"
            )
          )
        ),
        Project(
          (
            "alias" => "A.alias",
            "norm" => "A.norm"
          ),
          $AliasToNFL
        ),
        Project(
          (
            "fullspan" => "D.fullspan",
            "match" => "D.match",
            "prov" => "D.prov"
          ),
          $H_NFL_Hashes_X
        )
      )
    )
  )
);

$JO_homemaker =
Union(
  Project(
    (
      "D.text" => "fullspan",
      "FunctionCall42289" => "category",
      "job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "homemaker"
      ) => "FunctionCall42289",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "job_type"
        ),
        $SDM_OUTPUT_JO_homemaker_Dict_WITH_Default_OVER_Document_text
      )
    )
  ),
  Project(
    (
      "D.text" => "fullspan",
      "FunctionCall41858" => "category",
      "FunctionCall40230" => "job_type"
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "M.mom"
        ),
        GetCol(
          "W.wife"
        )
      ) => "FunctionCall40230",
      ApplyFunc(
        StringConst(
          "homemaker"
        ) => "FunctionCall41858",
        NLJoin(
          And(
            FollowsTok(
              GetCol(
                "M.mom"
              ),
              GetCol(
                "W.wife"
              ),
              IntConst(
                0
              ),
              IntConst(
                4
              )
            ),
            ContainsRegex(
              RegexConst(
                /full[- ]time|24.*7/,
                "SimpleRegex"
              ),
              GetCol(
                "D.text"
              )
            )
          ),
          NLJoin(
            True(),
            Project(
              (
                "mom" => "M.mom"
              ),
              $JO_mom
            ),
            Project(
              (
                "wife" => "W.wife"
              ),
              $JO_wife
            )
          ),
          Project(
            (
              "text" => "D.text"
            ),
            $Document
          )
        )
      )
    )
  ),
  Project(
    (
      "D.text" => "fullspan",
      "FunctionCall41860" => "category",
      "FunctionCall40278" => "job_type"
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "W.wife"
        ),
        GetCol(
          "M.mom"
        )
      ) => "FunctionCall40278",
      ApplyFunc(
        StringConst(
          "homemaker"
        ) => "FunctionCall41860",
        NLJoin(
          And(
            FollowsTok(
              GetCol(
                "W.wife"
              ),
              GetCol(
                "M.mom"
              ),
              IntConst(
                0
              ),
              IntConst(
                4
              )
            ),
            ContainsRegex(
              RegexConst(
                /full[- ]time|24.*7/,
                "SimpleRegex"
              ),
              GetCol(
                "D.text"
              )
            )
          ),
          NLJoin(
            True(),
            Project(
              (
                "mom" => "M.mom"
              ),
              $JO_mom
            ),
            Project(
              (
                "wife" => "W.wife"
              ),
              $JO_wife
            )
          ),
          Project(
            (
              "text" => "D.text"
            ),
            $Document
          )
        )
      )
    )
  )
);

$JobStatus_MyShift_Pattern1 =
Project(
  (
    "MS.tweet" => "tweet",
    "MS.key" => "key",
    "MS.mention" => "mention"
  ),
  Select(
    Or(
      ContainsRegex(
        RegexConst(
          /\bmy\b|\bI\b/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "MS.mention"
        )
      ),
      Equals(
        GetBegin(
          Chomp(
            GetCol(
              "MS.tweet"
            )
          )
        ),
        GetBegin(
          Chomp(
            GetCol(
              "MS.mention"
            )
          )
        )
      )
    ),
    Project(
      (
        "key" => "MS.key",
        "mention" => "MS.mention",
        "tweet" => "MS.tweet"
      ),
      $JobStatus_MyShift_mention
    )
  )
);

$JobStatus_MyShift_Pattern1_Remaining =
Difference(
  Project(
    (
      "MC.tweet" => "tweet",
      "MC.key" => "key",
      "MC.mention" => "mention"
    ),
    Project(
      (
        "key" => "MC.key",
        "mention" => "MC.mention",
        "tweet" => "MC.tweet"
      ),
      $JobStatus_MyShift_mention
    )
  ),
  Project(
    (
      "MS.tweet" => "tweet",
      "MS.key" => "key",
      "MS.mention" => "mention"
    ),
    Project(
      (
        "key" => "MS.key",
        "mention" => "MS.mention",
        "tweet" => "MS.tweet"
      ),
      $JobStatus_MyShift_Pattern1
    )
  ));

$JobStatus_MyShift_Pattern2 =
Project(
  (
    "MS.key" => "key",
    "MS.mention" => "mention",
    "FunctionCall20059" => "statement",
    "MS.tweet" => "tweet"
  ),
  ApplyFunc(
    CombineSpans(
      LeftContextTok(
        GetCol(
          "MS.key"
        ),
        IntConst(
          8
        )
      ),
      GetCol(
        "MS.mention"
      )
    ) => "FunctionCall20059",
    Select(
      ContainsRegex(
        RegexConst(
          /\bI\b/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        LeftContextTok(
          GetCol(
            "MS.key"
          ),
          IntConst(
            8
          )
        )
      ),
      Project(
        (
          "key" => "MS.key",
          "mention" => "MS.mention",
          "tweet" => "MS.tweet"
        ),
        $JobStatus_MyShift_Pattern1_Remaining
      )
    )
  )
);

$JobStatus_NeedOrHaveJobpattern1_Candidate =
Project(
  (
    "T.key" => "key",
    "FunctionCall19060" => "tweet",
    "T.match" => "match",
    "FunctionCall19079" => "phrase"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.match"
      ),
      GetCol(
        "T.key"
      )
    ) => "FunctionCall19079",
    ApplyFunc(
      Chomp(
        GetCol(
          "T.tweet"
        )
      ) => "FunctionCall19060",
      Select(
        FollowsTok(
          GetCol(
            "T.match"
          ),
          GetCol(
            "T.key"
          ),
          IntConst(
            0
          ),
          IntConst(
            4
          )
        ),
        Project(
          (
            "key" => "T.key",
            "match" => "T.match",
            "tweet" => "T.tweet"
          ),
          $Candidate_JobStatus
        )
      )
    )
  )
);

$JobStatus_NeedOrHaveJobpattern1a =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.match" => "match",
    "T.phrase" => "phrase",
    "FunctionCall19135" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.phrase"
    ),
    ApplyFunc(
      CombineSpans(
        LeftContextTok(
          GetCol(
            "T.phrase"
          ),
          IntConst(
            2
          )
        ),
        GetCol(
          "T.phrase"
        )
      ) => "FunctionCall19135",
      Select(
        And(
          Not(
            ContainsDict(
              StringConst(
                "JobStatus_PrasieDict"
              ),
              GetCol(
                "T.phrase"
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "JobStatus_SlangDict"
              ),
              GetCol(
                "T.phrase"
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "wishfulThinking.dict"
              ),
              CombineSpans(
                LeftContextTok(
                  GetCol(
                    "T.phrase"
                  ),
                  IntConst(
                    2
                  )
                ),
                GetCol(
                  "T.phrase"
                )
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bRT\b/,
                "JavaRegex"
              ),
              LeftContextTok(
                GetCol(
                  "T.match"
                ),
                IntConst(
                  30
                )
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /(?:\bfinder\b|\bschedular\b|\btitles\b|\bpage\b|\bshadow\b|\bpartner\b|\?|\bhunt|\bsearch)/,
                "JavaRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              RightContextTok(
                GetCol(
                  "T.phrase"
                ),
                IntConst(
                  2
                )
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /(?:\bpartner|\buve\b|\byou|\bu\b|\bur\b|\btwitter\b|\bshot|\bhis\b|\bher\b|\bdad|\bmom)/,
                "JavaRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              GetCol(
                "T.phrase"
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /(?:http|www\.)/,
                "SimpleRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              GetCol(
                "T.tweet"
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bwhen\b|\bwas/,
                "JavaRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              LeftContextTok(
                GetCol(
                  "T.phrase"
                ),
                IntConst(
                  2
                )
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /famouslies/,
                "SimpleRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              GetCol(
                "T.phrase"
              )
            )
          ),
          Or(
            ContainsRegex(
              RegexConst(
                /(?:\bI\b|\bI\'m\b|\bIm\b)/,
                "JavaRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              LeftContextTok(
                GetCol(
                  "T.phrase"
                ),
                IntConst(
                  3
                )
              )
            ),
            Equals(
              GetBegin(
                Chomp(
                  GetCol(
                    "T.tweet"
                  )
                )
              ),
              GetBegin(
                Chomp(
                  GetCol(
                    "T.phrase"
                  )
                )
              )
            ),
            ContainsRegex(
              RegexConst(
                /\./,
                "SimpleRegex"
              ),
              LeftContextTok(
                GetCol(
                  "T.phrase"
                ),
                IntConst(
                  1
                )
              )
            )
          )
        ),
        Project(
          (
            "key" => "T.key",
            "match" => "T.match",
            "phrase" => "T.phrase",
            "tweet" => "T.tweet"
          ),
          $JobStatus_NeedOrHaveJobpattern1_Candidate
        )
      )
    )
  )
);

$JobStatus_OutOfWork_Remaining =
Difference(
  Project(
    (
      "T.tweet" => "tweet",
      "T.key" => "key"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $JobStatus_OutOfWork_Candidiate
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.key" => "key"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $JobStatus_OutOfWork_mentionsPattern1
    )
  ));

$MET_AllMoviesUnconsolidated =
Union(
  Project(
    (
      "D.text" => "text",
      "FunctionCall42291" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "nonambig"
      ) => "FunctionCall42291",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_ME_Movies_Nicknames_Dict_WITH_Default_OVER_ME_Entries_text
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall42293" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "ambig"
      ) => "FunctionCall42293",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_ME_Ambiguous_Movies_Dict_WITH_Default_OVER_ME_Entries_text
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall42295" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "highlyambig"
      ) => "FunctionCall42295",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_ME_HighlyAmbiguous_Movies_Dict_WITH_Default_OVER_ME_Entries_text
      )
    )
  )
);

$ME_LA_Abbrv_USCountry =
Project(
  (
    "D.text" => "fullspan",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_LA_USAbbrvDict_WITH_Default_OVER_ME_LA_InputText_text
  )
);

$ME_LA_AliasCountries =
Project(
  (
    "D.text" => "fullspan",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_LA_Alias_Countries_Dict_WITH_Default_OVER_ME_LA_InputText_text
  )
);

$ME_LA_AliasUSCities =
Project(
  (
    "D.text" => "fullspan",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_LA_Alias_USCities_Dict_WITH_Default_OVER_ME_LA_InputText_text
  )
);

$ME_LA_AliasUSStates =
Project(
  (
    "D.text" => "fullspan",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_LA_Alias_USStates_Dict_WITH_Default_OVER_ME_LA_InputText_text
  )
);

$ME_LA_Alias_NonUSCities =
Project(
  (
    "D.text" => "fullspan",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_LA_Alias_NonUSCities_Dict_WITH_Default_OVER_ME_LA_InputText_text
  )
);

$ME_LA_CityNames =
Project(
  (
    "D.text" => "fullspan",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_LA_CitiesDict_WITH_Default_OVER_ME_LA_InputText_text
  )
);

$ME_LA_CityNamesAmbiguous =
Project(
  (
    "D.text" => "fullspan",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_LA_AmbiguousCitiesDict_WITH_Default_OVER_ME_LA_InputText_text
  )
);

$ME_LA_CityNamesConsolidatedNoAlias =
Project(
  (
    "D.match" => "match",
    "D.fullspan" => "fullspan"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.match"
    ),
    Project(
      (
        "fullspan" => "D.fullspan",
        "match" => "D.match"
      ),
      $ME_LA_CityNames
    )
  )
);

$ME_LA_CityNamesNotConsolidated =
Union(
  Project(
    (
      "FunctionCall34615" => "match",
      "D.fullspan" => "fullspan",
      "D.match" => "orig_match"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "T.norm"
        )
      ) => "FunctionCall34615",
      NLJoin(
        equalsIgnoreCase(
          GetString(
            GetCol(
              "D.match"
            )
          ),
          GetString(
            GetCol(
              "T.alias"
            )
          )
        ),
        Project(
          (
            "fullspan" => "D.fullspan",
            "match" => "D.match"
          ),
          $ME_LA_AliasUSCities
        ),
        Project(
          (
            "alias" => "T.alias",
            "norm" => "T.norm"
          ),
          $ME_LA_AliasToNormalized_Cities
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall34653" => "match",
      "D.fullspan" => "fullspan",
      "D.match" => "orig_match"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.match"
        )
      ) => "FunctionCall34653",
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match"
        ),
        $ME_LA_CityNamesConsolidatedNoAlias
      )
    )
  )
);

$ME_LA_CountryNamesNoAlias =
Project(
  (
    "D.text" => "fullspan",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_LA_CountryDict_WITH_Default_OVER_ME_LA_InputText_text
  )
);

$ME_LA_PopulousNonUSCities =
Union(
  Project(
    (
      "FunctionCall34854" => "match",
      "D.fullspan" => "fullspan",
      "D.match" => "orig_match",
      "FunctionCall34878" => "match_uc"
    ),
    ApplyFunc(
      toUpperCase(
        GetString(
          GetCol(
            "D.match"
          )
        )
      ) => "FunctionCall34878",
      ApplyFunc(
        GetString(
          GetCol(
            "D.match"
          )
        ) => "FunctionCall34854",
        Project(
          (
            "fullspan" => "D.fullspan",
            "match" => "D.match"
          ),
          $ME_LA_PopulousNonUSCitiesNoAlias
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall34892" => "match",
      "D.fullspan" => "fullspan",
      "D.match" => "orig_match",
      "FunctionCall34916" => "match_uc"
    ),
    ApplyFunc(
      toUpperCase(
        GetString(
          GetCol(
            "T.norm"
          )
        )
      ) => "FunctionCall34916",
      ApplyFunc(
        GetString(
          GetCol(
            "T.norm"
          )
        ) => "FunctionCall34892",
        NLJoin(
          equalsIgnoreCase(
            GetString(
              GetCol(
                "D.match"
              )
            ),
            GetString(
              GetCol(
                "T.alias"
              )
            )
          ),
          Project(
            (
              "fullspan" => "D.fullspan",
              "match" => "D.match"
            ),
            $ME_LA_Alias_NonUSCities
          ),
          Project(
            (
              "alias" => "T.alias",
              "norm" => "T.norm"
            ),
            $ME_LA_AliasToNormalized_NonUSCities
          )
        )
      )
    )
  )
);

$ME_LA_StateNamesNotConsolidated =
Union(
  Project(
    (
      "FunctionCall34703" => "match",
      "D.fullspan" => "fullspan",
      "D.match" => "orig_match"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.match"
        )
      ) => "FunctionCall34703",
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match"
        ),
        $ME_LA_StateNamesConsolidatedNoAlias
      )
    )
  ),
  Project(
    (
      "FunctionCall34727" => "match",
      "D.fullspan" => "fullspan",
      "D.match" => "orig_match"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "T.norm"
        )
      ) => "FunctionCall34727",
      NLJoin(
        equalsIgnoreCase(
          GetString(
            GetCol(
              "D.match"
            )
          ),
          GetString(
            GetCol(
              "T.alias"
            )
          )
        ),
        Project(
          (
            "fullspan" => "D.fullspan",
            "match" => "D.match"
          ),
          $ME_LA_AliasUSStates
        ),
        Project(
          (
            "alias" => "T.alias",
            "norm" => "T.norm"
          ),
          $ME_LA_AliasToNormalized_States
        )
      )
    )
  )
);

$ME_NonRetweetPost =
Difference(
  Project(
    (
      "E.text" => "text"
    ),
    Project(
      (
        "text" => "E.text"
      ),
      $ME_Entries
    )
  ),
  Project(
    (
      "E.text" => "text"
    ),
    Project(
      (
        "text" => "E.text"
      ),
      $ME_RetweetPost
    )
  ));

$NL_InputText =
Union(
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $NL_InputText_NoEmail
    )
  ),
  Project(
    (
      "B.name" => "text"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "D.text"
        ),
        GetCol(
          "B.name"
        )
      ),
      Project(
        (
          "text" => "D.text"
        ),
        $Document
      ),
      Project(
        (
          "name" => "B.name"
        ),
        $B_EmailAndName
      )
    )
  )
);

$NL_TrimmedName =
Project(
  (
    "D.text" => "fullspan",
    "FunctionCall33288" => "match"
  ),
  ApplyFunc(
    Chomp(
      GetCol(
        "D.text"
      )
    ) => "FunctionCall33288",
    Project(
      (
        "text" => "D.text"
      ),
      $NL_InputText
    )
  )
);

$NoSpam =
Difference(
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $Document
    )
  ),
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $Spam
    )
  ));

$PromoPhrases =
Project(
  (
    "D.text" => "text",
    "promo" => "promo"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "promo"
    ),
    $SDM_OUTPUT_purchases_promos_dict_WITH_Default_OVER_NoSpam_text
  )
);

$PromoURLs =
Project(
  (
    "D.text" => "text",
    "url" => "url"
  ),
  FastRegex(/http|http.{0,100}.html|bit.ly|goo.gl|www/, (0 => "url"), "DOTALL", "D.text",
    Project(
      (
        "text" => "D.text"
      ),
      $NoSpam
    )
  )
);

$RelevantComicsTweets =
Project(
  (
    "T.tweetText" => "tweetText"
  ),
  Select(
    Not(
      ContainsDict(
        StringConst(
          "comics/misc_relevance_comics_negClue_en.dict"
        ),
        GetCol(
          "T.tweetText"
        )
      )
    ),
    Project(
      (
        "tweetText" => "T.tweetText"
      ),
      $Tweet
    )
  )
);

$RelevantComicsUserDescs =
Project(
  (
    "T.userDescText" => "userDescText"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.userDescText"
    ),
    Select(
      Not(
        ContainsDict(
          StringConst(
            "comics/misc_relevance_comics_negClue_en.dict"
          ),
          GetCol(
            "T.userDescText"
          )
        )
      ),
      Project(
        (
          "userDescText" => "T.userDescText"
        ),
        $UserDescription
      )
    )
  )
);

$ambiguous_name_dev =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_names_AndrogenousFnames_dict_WITH_Default_OVER_clean_fname_text
  )
);

$female_name =
Project(
  (
    "FunctionCall41862" => "status"
  ),
  ApplyFunc(
    StringConst(
      "true"
    ) => "FunctionCall41862",
    $female_name_dev
  )
);

$location_cues1 =
Project(
  (
    "D.text" => "text",
    "L.match" => "match"
  ),
  NLJoin(
    True(),
    Project(
      (
        "text" => "D.text"
      ),
      $Document
    ),
    Select(
      And(
        ContainsRegex(
          RegexConst(
            /liv in|i am from|I am from|im from|Im from|I'm from|i'm from|born in|\bresident of\b/,
            "JavaRegex"
          ),
          LeftContextTok(
            GetCol(
              "L.match"
            ),
            IntConst(
              5
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "LIWC/month.dict"
            ),
            GetCol(
              "L.match"
            )
          )
        )
      ),
      Project(
        (
          "match" => "L.match"
        ),
        $probable_locn
      )
    )
  )
);

$location_cues5 =
Project(
  (
    "D.text" => "text",
    "C.match" => "match"
  ),
  NLJoin(
    True(),
    Select(
      And(
        ContainsRegex(
          RegexConst(
            /liv in|im from|Im from|I'm from|i'm from|born in|\bresident of\b/,
            "JavaRegex"
          ),
          LeftContextTok(
            GetCol(
              "C.match"
            ),
            IntConst(
              5
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "LIWC/month.dict"
            ),
            GetCol(
              "C.match"
            )
          )
        )
      ),
      Project(
        (
          "match" => "C.match"
        ),
        $nationality
      )
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $Document
    )
  )
);

$location_cues_relax =
Project(
  (
    "D.text" => "text",
    "L.match" => "match"
  ),
  NLJoin(
    True(),
    Project(
      (
        "text" => "D.text"
      ),
      $Document
    ),
    Select(
      ContainsRegex(
        RegexConst(
          /from/,
          "SimpleRegex"
        ),
        LeftContextTok(
          GetCol(
            "L.match"
          ),
          IntConst(
            3
          )
        )
      ),
      Project(
        (
          "match" => "L.match"
        ),
        $probable_locn
      )
    )
  )
);

$male_name =
Project(
  (
    "FunctionCall41864" => "status"
  ),
  ApplyFunc(
    StringConst(
      "true"
    ) => "FunctionCall41864",
    $male_name_dev
  )
);

$occupations_vocationsDev =
Project(
  (
    "D.text" => "text",
    "D.match" => "match"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.match"
    ),
    Select(
      And(
        Not(
          ContainsDict(
            StringConst(
              "LIWC/I.dict"
            ),
            RightContextTok(
              GetCol(
                "D.match"
              ),
              IntConst(
                3
              )
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "LIWC/dreamers.dict"
            ),
            LeftContextTok(
              GetCol(
                "D.match"
              ),
              IntConst(
                5
              )
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "LIWC/dreamers.dict"
            ),
            RightContextTok(
              GetCol(
                "D.match"
              ),
              IntConst(
                5
              )
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "LIWC/reference_people.dict"
            ),
            LeftContextTok(
              GetCol(
                "D.match"
              ),
              IntConst(
                3
              )
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "LIWC/teen_hearthrobs.dict"
            ),
            GetCol(
              "D.text"
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "LIWC/you.dict"
            ),
            RightContextTok(
              GetCol(
                "D.match"
              ),
              IntConst(
                3
              )
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /is|are|not/,
              "SimpleRegex"
            ),
            LeftContextTok(
              GetCol(
                "D.match"
              ),
              IntConst(
                5
              )
            )
          )
        )
      ),
      Project(
        (
          "match" => "D.match",
          "text" => "D.text"
        ),
        $occupations_vocations_mentions
      )
    )
  )
);

$probable_female =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $probable_femaleDev
  )
);

$probable_female_fname =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $probable_female_fnameDev
  )
);

$probable_male =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $probable_maleDev
  )
);

$probable_male_fname =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $probable_male_fnameDev
  )
);

$probable_parent =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $probable_parentDev
  )
);

$reln_status =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $reln_statusDev
  )
);

$specific_age_mentions =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $specific_age_mentionsDev
  )
);

$teensignals =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $teensignalsDev
  )
);

$BeginsWithTransaction =
Consolidate(
  "ContainedWithin",
  GetCol(
    "startwithintent"
  ),
  Project(
    (
      "D.text" => "text",
      "startwithintent" => "startwithintent"
    ),
    Regex(/^buy |^find |^shop |^order |^purchase |^get /, (0 => "startwithintent"), "CASE_INSENSITIVE", "D.text",
      Project(
        (
          "text" => "D.text"
        ),
        $NoSpam
      )
    )
  )
);

$ComicsBasedTokensFromTweet =
Project(
  (
    "C.tweetText" => "tweetText",
    "match" => "match"
  ),
  Dictionary("comics/misc_comics_keywords_en_short.dict" => "Default" , "C.tweetText", "match",
    Project(
      (
        "tweetText" => "C.tweetText"
      ),
      $RelevantComicsTweets
    )
  )
);

$ComicsBasedTokensFromUserDesc =
Project(
  (
    "C.userDescText" => "userDescText",
    "match" => "match"
  ),
  Dictionary("comics/misc_comics_keywords_en_short.dict" => "Default" , "C.userDescText", "match",
    Project(
      (
        "userDescText" => "C.userDescText"
      ),
      $RelevantComicsUserDescs
    )
  )
);

$H_Baseball_Consolidated =
Project(
  (
    "D.prov" => "prov",
    "D.fullspan" => "fullspan",
    "D.match" => "match",
    "D.matchspan" => "matchspan"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.matchspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan",
        "match" => "D.match",
        "matchspan" => "D.matchspan",
        "prov" => "D.prov"
      ),
      $H_Baseball_UniqueAndHashes
    )
  )
);

$H_NBA_Consolidated =
Project(
  (
    "D.prov" => "prov",
    "D.fullspan" => "fullspan",
    "D.match" => "match",
    "D.matchspan" => "matchspan"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.matchspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan",
        "match" => "D.match",
        "matchspan" => "D.matchspan",
        "prov" => "D.prov"
      ),
      $H_NBA_UniqueAndHashes
    )
  )
);

$H_NFL_Consolidated =
Project(
  (
    "D.prov" => "prov",
    "D.fullspan" => "fullspan",
    "D.match" => "match",
    "D.matchspan" => "matchspan"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.matchspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan",
        "match" => "D.match",
        "matchspan" => "D.matchspan",
        "prov" => "D.prov"
      ),
      $H_NFL_UniqueAndHashes
    )
  )
);

$HashTagsFromTweet =
Project(
  (
    "C.tweetText" => "tweetText",
    "match" => "match"
  ),
  Regex(/#([^\s]+)/, (1 => "match"), "DOTALL", "C.tweetText",
    Project(
      (
        "tweetText" => "C.tweetText"
      ),
      $RelevantComicsTweets
    )
  )
);

$HashTagsFromUserDesc =
Select(
  ContainsDict(
    StringConst(
      "comics/misc_comics_keywords_en_short.dict"
    ),
    GetCol(
      "match"
    )
  ),
  Project(
    (
      "C.userDescText" => "userDescText",
      "match" => "match"
    ),
    Regex(/#([^\s]+)/, (1 => "match"), "DOTALL", "C.userDescText",
      Project(
        (
          "userDescText" => "C.userDescText"
        ),
        $RelevantComicsUserDescs
      )
    )
  )
);

$Hobbies_Out =
Union(
  Project(
    (
      "FunctionCall41866" => "category",
      "FunctionCall41868" => "subcategory",
      "FunctionCall39532" => "match"
    ),
    ApplyFunc(
      normalizeKeepAlphaNumeric(
        GetString(
          GetCol(
            "D.match"
          )
        )
      ) => "FunctionCall39532",
      ApplyFunc(
        StringConst(
          ""
        ) => "FunctionCall41868",
        ApplyFunc(
          StringConst(
            "shopping"
          ) => "FunctionCall41866",
          Project(
            (
              "match" => "D.match"
            ),
            $H_Shop_X
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall41870" => "category",
      "FunctionCall41872" => "subcategory",
      "FunctionCall39552" => "match"
    ),
    ApplyFunc(
      normalizeKeepAlphaNumeric(
        GetString(
          GetCol(
            "D.match"
          )
        )
      ) => "FunctionCall39552",
      ApplyFunc(
        StringConst(
          ""
        ) => "FunctionCall41872",
        ApplyFunc(
          StringConst(
            "foodies"
          ) => "FunctionCall41870",
          Project(
            (
              "match" => "D.match"
            ),
            $H_Foodies_X
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall41874" => "category",
      "FunctionCall41876" => "subcategory",
      "FunctionCall39572" => "match"
    ),
    ApplyFunc(
      normalizeKeepAlphaNumeric(
        GetString(
          GetCol(
            "D.match"
          )
        )
      ) => "FunctionCall39572",
      ApplyFunc(
        StringConst(
          ""
        ) => "FunctionCall41876",
        ApplyFunc(
          StringConst(
            "pets"
          ) => "FunctionCall41874",
          Project(
            (
              "match" => "D.match"
            ),
            $H_Pets_X
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall41878" => "category",
      "FunctionCall41880" => "subcategory",
      "FunctionCall39592" => "match"
    ),
    ApplyFunc(
      normalizeKeepAlphaNumeric(
        GetString(
          GetCol(
            "D.match"
          )
        )
      ) => "FunctionCall39592",
      ApplyFunc(
        StringConst(
          "dance"
        ) => "FunctionCall41880",
        ApplyFunc(
          StringConst(
            "sports"
          ) => "FunctionCall41878",
          Project(
            (
              "match" => "D.match"
            ),
            $H_Dance_X
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall41882" => "category",
      "FunctionCall41884" => "subcategory",
      "FunctionCall39612" => "match"
    ),
    ApplyFunc(
      normalizeKeepAlphaNumeric(
        GetString(
          GetCol(
            "D.match"
          )
        )
      ) => "FunctionCall39612",
      ApplyFunc(
        StringConst(
          "general"
        ) => "FunctionCall41884",
        ApplyFunc(
          StringConst(
            "sports"
          ) => "FunctionCall41882",
          Project(
            (
              "match" => "D.match"
            ),
            $H_GeneralSports_X
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall41886" => "category",
      "FunctionCall41888" => "subcategory",
      "D.match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "nfl_teams"
      ) => "FunctionCall41888",
      ApplyFunc(
        StringConst(
          "sports"
        ) => "FunctionCall41886",
        Project(
          (
            "match" => "D.match"
          ),
          $H_NFL_Consolidated
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall41890" => "category",
      "FunctionCall41892" => "subcategory",
      "D.match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "nba_teams"
      ) => "FunctionCall41892",
      ApplyFunc(
        StringConst(
          "sports"
        ) => "FunctionCall41890",
        Project(
          (
            "match" => "D.match"
          ),
          $H_NBA_Consolidated
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall41894" => "category",
      "FunctionCall41896" => "subcategory",
      "D.match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "baseball_teams"
      ) => "FunctionCall41896",
      ApplyFunc(
        StringConst(
          "sports"
        ) => "FunctionCall41894",
        Project(
          (
            "match" => "D.match"
          ),
          $H_Baseball_Consolidated
        )
      )
    )
  )
);

$I =
Project(
  (
    "D.text" => "text",
    "firstperson" => "firstperson"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "firstperson"
    ),
    $SDM_OUTPUT_purchases_firstperson_dict_WITH_Default_OVER_NoSpam_text
  )
);

$MET_AllMovies =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.match" => "match"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.match"
    ),
    Project(
      (
        "match" => "D.match",
        "prov" => "D.prov",
        "text" => "D.text"
      ),
      $MET_AllMoviesUnconsolidated
    )
  )
);

$ME_LA_CityNamesConsolidatedUnfiltered =
Project(
  (
    "D.match" => "match",
    "D.fullspan" => "fullspan",
    "D.orig_match" => "orig_match"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.orig_match"
    ),
    Project(
      (
        "fullspan" => "D.fullspan",
        "match" => "D.match",
        "orig_match" => "D.orig_match"
      ),
      $ME_LA_CityNamesNotConsolidated
    )
  )
);

$ME_LA_CountryNames =
Union(
  Project(
    (
      "FunctionCall34791" => "match",
      "D.fullspan" => "fullspan",
      "D.match" => "orig_match"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.match"
        )
      ) => "FunctionCall34791",
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match"
        ),
        $ME_LA_CountryNamesNoAlias
      )
    )
  ),
  Project(
    (
      "FunctionCall34815" => "match",
      "D.fullspan" => "fullspan",
      "D.match" => "orig_match"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "T.norm"
        )
      ) => "FunctionCall34815",
      NLJoin(
        equalsIgnoreCase(
          GetString(
            GetCol(
              "D.match"
            )
          ),
          GetString(
            GetCol(
              "T.alias"
            )
          )
        ),
        Project(
          (
            "fullspan" => "D.fullspan",
            "match" => "D.match"
          ),
          $ME_LA_AliasCountries
        ),
        Project(
          (
            "alias" => "T.alias",
            "norm" => "T.norm"
          ),
          $ME_LA_AliasToNormalized_Countries
        )
      )
    )
  )
);

$ME_LA_ForeignCitiesMapped =
Union(
  Project(
    (
      "D.fullspan" => "fullspan",
      "D.match" => "city",
      "T.country" => "country",
      "D.orig_match" => "orig_match"
    ),
    HashJoin(
      Equals(
        GetString(
          GetCol(
            "T.city"
          )
        ),
        GetString(
          GetCol(
            "D.match_uc"
          )
        )
      ),
      Project(
        (
          "city" => "T.city",
          "country" => "T.country"
        ),
        $ME_LA_PopulousNonUSCitiesToCountry
      ),
      Select(
        Not(
          ContainsRegex(
            RegexConst(
              /(United States)|(united states)|(US)|(America)|(U\.S\.)|(USA)/,
              "SimpleRegex"
            ),
            GetCol(
              "D.fullspan"
            )
          )
        ),
        Project(
          (
            "fullspan" => "D.fullspan",
            "match" => "D.match",
            "match_uc" => "D.match_uc",
            "orig_match" => "D.orig_match"
          ),
          $ME_LA_PopulousNonUSCities
        )
      )
    )
  ),
  Project(
    (
      "D.fullspan" => "fullspan",
      "D.match" => "city",
      "T.country" => "country",
      "D.orig_match" => "orig_match"
    ),
    HashJoin(
      Equals(
        GetString(
          GetCol(
            "T.city"
          )
        ),
        GetString(
          GetCol(
            "D.match_uc"
          )
        )
      ),
      Project(
        (
          "city" => "T.city",
          "country" => "T.country"
        ),
        $ME_LA_CountryToCapital
      ),
      Select(
        Not(
          ContainsRegex(
            RegexConst(
              /(United States)|(united states)|(US)|(America)|(U\.S\.)|(USA)/,
              "SimpleRegex"
            ),
            GetCol(
              "D.fullspan"
            )
          )
        ),
        Project(
          (
            "fullspan" => "D.fullspan",
            "match" => "D.match",
            "match_uc" => "D.match_uc",
            "orig_match" => "D.orig_match"
          ),
          $ME_LA_PopulousNonUSCities
        )
      )
    )
  )
);

$ME_LA_StateNamesConsolidatedUnfiltered =
Project(
  (
    "D.match" => "match",
    "D.fullspan" => "fullspan",
    "D.orig_match" => "orig_match"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.orig_match"
    ),
    Project(
      (
        "fullspan" => "D.fullspan",
        "match" => "D.match",
        "orig_match" => "D.orig_match"
      ),
      $ME_LA_StateNamesNotConsolidated
    )
  )
);

$ME_MG_directedTweet =
Project(
  (
    "ME_NonRetweetPost.text" => "text"
  ),
  Select(
    ContainsRegex(
      RegexConst(
        /@[A-Za-z0-9_].* you /,
        "SimpleRegex"
      ),
      GetCol(
        "ME_NonRetweetPost.text"
      )
    ),
    Project(
      (
        "text" => "ME_NonRetweetPost.text"
      ),
      $ME_NonRetweetPost
    )
  )
);

$ME_ToFilterNotMovies =
Project(
  (
    "D.text" => "text",
    "D.match" => "match"
  ),
  Select(
    ContainsDict(
      StringConst(
        "ME_OtherMediaMentions_Dict"
      ),
      GetCol(
        "D.text"
      )
    ),
    Project(
      (
        "match" => "D.match",
        "text" => "D.text"
      ),
      $MET_AllMovies
    )
  )
);

$MentionsFromUserDesc =
Select(
  ContainsDict(
    StringConst(
      "comics/misc_comics_keywords_en_short.dict"
    ),
    GetCol(
      "match"
    )
  ),
  Project(
    (
      "C.userDescText" => "userDescText",
      "match" => "match"
    ),
    Regex(/@([^\s]+)/, (1 => "match"), "DOTALL", "C.userDescText",
      Project(
        (
          "userDescText" => "C.userDescText"
        ),
        $RelevantComicsUserDescs
      )
    )
  )
);

$Met_AllMoviesWithLeftContext =
Project(
  (
    "D.text" => "text",
    "D.match" => "match",
    "FunctionCall372" => "l_context"
  ),
  ApplyFunc(
    LeftContextTok(
      GetCol(
        "D.match"
      ),
      IntConst(
        1
      )
    ) => "FunctionCall372",
    Select(
      ContainsDict(
        StringConst(
          "ME_NotBeforeTitle"
        ),
        LeftContextTok(
          GetCol(
            "D.match"
          ),
          IntConst(
            1
          )
        )
      ),
      Project(
        (
          "match" => "D.match",
          "text" => "D.text"
        ),
        $MET_AllMovies
      )
    )
  )
);

$NL_NameToFilter =
Project(
  (
    "T.match" => "match",
    "T.fullspan" => "fullspan"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /((Mc)|(De)|(Le)|(La)|(Von))?[A-Z][a-z]+((\s)+(([A-Z]\.)|([A-Z][a-z]+)))*(\s)+((Mc)|(De)|(Le)|(La)|(Von))?[A-Z][a-z]+/,
        "SimpleRegex"
      ),
      GetCol(
        "T.match"
      )
    ),
    Project(
      (
        "fullspan" => "T.fullspan",
        "match" => "T.match"
      ),
      $NL_TrimmedName
    )
  )
);

$NL_RecsNoFullName =
Difference(
  Project(
    (
      "D.text" => "fullspan"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $NL_InputText
    )
  ),
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $NL_NameToFilter
    )
  ));

$allPromos =
Union(
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $BeginsWithTransaction
    )
  ),
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $PromoPhrases
    )
  ),
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $PromoURLs
    )
  )
);

$ambiguous_name =
Project(
  (
    "FunctionCall41898" => "status"
  ),
  ApplyFunc(
    StringConst(
      "true"
    ) => "FunctionCall41898",
    $ambiguous_name_dev
  )
);

$likelyPromos =
Difference(
  Project(
    (
      "D.text" => "text"
    ),
    Consolidate(
      "ContainedWithin",
      GetCol(
        "D.text"
      ),
      Project(
        (
          "text" => "D.text"
        ),
        $allPromos
      )
    )
  ),
  Project(
    (
      "D.text" => "text"
    ),
    Consolidate(
      "ContainedWithin",
      GetCol(
        "D.text"
      ),
      Project(
        (
          "text" => "D.text"
        ),
        $I
      )
    )
  ));

$location_cues31 =
Project(
  (
    "D.text" => "text",
    "L.match" => "match"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.text"
    ),
    Select(
      FollowsTok(
        GetCol(
          "Fn.match"
        ),
        GetCol(
          "L.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          5
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "L.match"
          ),
          GetCol(
            "F.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            5
          )
        ),
        AdjacentJoin(
          FollowedByTok(
            GetCol(
              "L.match"
            ),
            GetCol(
              "Fn.match"
            ),
            IntConst(
              0
            ),
            IntConst(
              5
            )
          ),
          NLJoin(
            True(),
            Project(
              (
                "text" => "D.text"
              ),
              $Document
            ),
            Project(
              (
                "match" => "L.match"
              ),
              $location_cues_relax
            )
          ),
          Project(
            (
              "match" => "Fn.match"
            ),
            $probable_female_fname
          )
        ),
        Project(
          (
            "match" => "F.match"
          ),
          $probable_femaleDev
        )
      )
    )
  )
);

$location_cues32 =
Project(
  (
    "D.text" => "text",
    "L.match" => "match"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.text"
    ),
    Select(
      FollowsTok(
        GetCol(
          "M.match"
        ),
        GetCol(
          "L.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          5
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "L.match"
          ),
          GetCol(
            "Mn.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            5
          )
        ),
        AdjacentJoin(
          FollowsTok(
            GetCol(
              "M.match"
            ),
            GetCol(
              "L.match"
            ),
            IntConst(
              0
            ),
            IntConst(
              5
            )
          ),
          NLJoin(
            True(),
            Project(
              (
                "text" => "D.text"
              ),
              $Document
            ),
            Project(
              (
                "match" => "M.match"
              ),
              $probable_maleDev
            )
          ),
          Project(
            (
              "match" => "L.match"
            ),
            $location_cues_relax
          )
        ),
        Project(
          (
            "match" => "Mn.match"
          ),
          $probable_male_fname
        )
      )
    )
  )
);

$occupations_vocations =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $occupations_vocationsDev
  )
);

$ComicsTweetCandidates =
Union(
  Project(
    (
      "C.tweetText" => "tweetText",
      "C.match" => "match"
    ),
    Project(
      (
        "match" => "C.match",
        "tweetText" => "C.tweetText"
      ),
      $ComicsBasedTokensFromTweet
    )
  ),
  Project(
    (
      "H.tweetText" => "tweetText",
      "H.match" => "match"
    ),
    Select(
      ContainsDict(
        StringConst(
          "comics/misc_comics_keywords_en_short.dict"
        ),
        GetCol(
          "H.match"
        )
      ),
      Project(
        (
          "match" => "H.match",
          "tweetText" => "H.tweetText"
        ),
        $HashTagsFromTweet
      )
    )
  )
);

$ComicsTweets =
Project(
  (
    "C.match" => "match",
    "C.tweetText" => "tweetText"
  ),
  Project(
    (
      "match" => "C.match",
      "tweetText" => "C.tweetText"
    ),
    $ComicsTweetCandidates
  )
);

$ComicsuserDescCandidates =
Union(
  Project(
    (
      "C.userDescText" => "userDescText",
      "C.match" => "match"
    ),
    Project(
      (
        "match" => "C.match",
        "userDescText" => "C.userDescText"
      ),
      $ComicsBasedTokensFromUserDesc
    )
  ),
  Project(
    (
      "M.userDescText" => "userDescText",
      "M.match" => "match"
    ),
    Project(
      (
        "match" => "M.match",
        "userDescText" => "M.userDescText"
      ),
      $MentionsFromUserDesc
    )
  ),
  Project(
    (
      "H.userDescText" => "userDescText",
      "H.match" => "match"
    ),
    Project(
      (
        "match" => "H.match",
        "userDescText" => "H.userDescText"
      ),
      $HashTagsFromUserDesc
    )
  )
);

$MET_ToFilterEntries =
Union(
  Project(
    (
      "FunctionCall41900" => "prov",
      "D.text" => "text"
    ),
    ApplyFunc(
      StringConst(
        "2"
      ) => "FunctionCall41900",
      Project(
        (
          "text" => "D.text"
        ),
        $ME_SpamPost
      )
    )
  ),
  Project(
    (
      "FunctionCall41902" => "prov",
      "D.text" => "text"
    ),
    ApplyFunc(
      StringConst(
        "3"
      ) => "FunctionCall41902",
      Project(
        (
          "text" => "D.text"
        ),
        $ME_ToFilterNotMovies
      )
    )
  ),
  Project(
    (
      "FunctionCall41904" => "prov",
      "D.text" => "text"
    ),
    ApplyFunc(
      StringConst(
        "4"
      ) => "FunctionCall41904",
      Project(
        (
          "text" => "D.text"
        ),
        $Met_AllMoviesWithLeftContext
      )
    )
  )
);

$ME_LA_SpanWithAmbiguousCityState =
Project(
  (
    "D.match" => "match",
    "D.fullspan" => "fullspan",
    "D.orig_match" => "orig_match"
  ),
  HashJoin(
    Equals(
      GetCol(
        "C.orig_match"
      ),
      GetCol(
        "D.orig_match"
      )
    ),
    Project(
      (
        "orig_match" => "C.orig_match"
      ),
      $ME_LA_CityNamesConsolidatedUnfiltered
    ),
    Project(
      (
        "fullspan" => "D.fullspan",
        "match" => "D.match",
        "orig_match" => "D.orig_match"
      ),
      $ME_LA_StateNamesConsolidatedUnfiltered
    )
  )
);

$ME_MG_basicTweet =
Union(
  Project(
    (
      "ME_NonRetweetPost.text" => "text"
    ),
    Select(
      Not(
        ContainsDict(
          StringConst(
            "ME_MG_you"
          ),
          GetCol(
            "ME_NonRetweetPost.text"
          )
        )
      ),
      Project(
        (
          "text" => "ME_NonRetweetPost.text"
        ),
        $ME_NonRetweetPost
      )
    )
  ),
  Project(
    (
      "ME_MG_directedTweet.text" => "text"
    ),
    Project(
      (
        "text" => "ME_MG_directedTweet.text"
      ),
      $ME_MG_directedTweet
    )
  )
);

$ME_MG_goingTwitter =
Project(
  (
    "going" => "going"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "going"
    ),
    $SDM_OUTPUT_ME_MG_twitterSpeakGoing_WITH_Default_OVER_ME_MG_basicTweet_text
  )
);

$ME_MG_movieMentions =
Project(
  (
    "movieWord" => "movieWord"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "movieWord"
    ),
    $SDM_OUTPUT_ME_MG_movieWords_WITH_Default_OVER_ME_MG_basicTweet_text
  )
);

$ME_MG_purchaseMentions =
Project(
  (
    "purchaseWord" => "purchaseWord"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "purchaseWord"
    ),
    $SDM_OUTPUT_ME_MG_purchaseWords_WITH_Default_OVER_ME_MG_basicTweet_text
  )
);

$ME_MG_seeingPhrase =
Project(
  (
    "seeingPhrase" => "seeingPhrase"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "seeingPhrase"
    ),
    $SDM_OUTPUT_ME_MG_gotoseePhrase_WITH_Default_OVER_ME_MG_basicTweet_text
  )
);

$ME_MG_takeTwitter =
Project(
  (
    "take" => "take"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "take"
    ),
    $SDM_OUTPUT_ME_MG_twitterSpeakTake_WITH_Default_OVER_ME_MG_basicTweet_text
  )
);

$ME_MG_theaterWordDup =
Union(
  Select(
    And(
      Not(
        ContainsRegex(
          RegexConst(
            /#AMC\b/,
            "JavaRegex"
          ),
          GetCol(
            "text"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "ME_MG_notAMC"
          ),
          GetCol(
            "text"
          )
        )
      )
    ),
    Project(
      (
        "D.text" => "text",
        "theaterWord" => "theaterWord"
      ),
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "theaterWord"
        ),
        $SDM_OUTPUT_ME_MG_movieTheater_WITH_Default_OVER_ME_MG_basicTweet_text
      )
    )
  ),
  Select(
    ContainsDict(
      StringConst(
        "ME_MG_movieIfInTheater"
      ),
      GetCol(
        "text"
      )
    ),
    Project(
      (
        "D.text" => "text",
        "theaterWord" => "theaterWord"
      ),
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "theaterWord"
        ),
        $SDM_OUTPUT_ME_MG_genericTheater_WITH_Default_OVER_ME_MG_basicTweet_text
      )
    )
  )
);

$ME_MG_ticketSyn =
Project(
  (
    "ticketSyn" => "ticketSyn"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "ticketSyn"
    ),
    $SDM_OUTPUT_ME_MG_ticketSyn_WITH_Default_OVER_ME_MG_basicTweet_text
  )
);

$NL_NameComponents =
Project(
  (
    "T.fullspan" => "fullspan",
    "fullname" => "fullname",
    "firstname" => "firstname",
    "middlename" => "middlename",
    "lastname" => "lastname"
  ),
  Regex(/(([A-Za-z]+)\s+(.+\s+)*([A-Za-z]+))/, (0 => "fullname", 2 => "firstname", 3 => "middlename", 4 => "lastname"), "DOTALL", "T.match",
    Project(
      (
        "fullspan" => "T.fullspan",
        "match" => "T.match"
      ),
      $NL_NameToFilter
    )
  )
);

$NL_PartialName =
Consolidate(
  "ExactMatch",
  GetCol(
    "name"
  ),
  Project(
    (
      "D.fullspan" => "fullspan",
      "name" => "name"
    ),
    Union(
      Project(
        (
          "fullspan" => "D.fullspan",
          "__sdm_match" => "name"
        ),
        $SDM_OUTPUT_names_AndrogenousFnames_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan
      ),
      Project(
        (
          "fullspan" => "D.fullspan",
          "__sdm_match" => "name"
        ),
        $SDM_OUTPUT_names_FemaleFnames_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan
      ),
      Project(
        (
          "fullspan" => "D.fullspan",
          "__sdm_match" => "name"
        ),
        $SDM_OUTPUT_names_MaleFnames_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan
      ),
      Project(
        (
          "fullspan" => "D.fullspan",
          "__sdm_match" => "name"
        ),
        $SDM_OUTPUT_names_lastName_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan
      ),
      Project(
        (
          "fullspan" => "D.fullspan",
          "__sdm_match" => "name"
        ),
        $SDM_OUTPUT_names_firstName_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan
      )
    )
  )
);

$NoSpamOrPromos =
Difference(
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $NoSpam
    )
  ),
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $likelyPromos
    )
  ));

$PC_Laptop_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42807" => "PriceValue",
      "FunctionCall42809" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "PC_Laptop"
      ) => "FunctionCall42809",
      ApplyFunc(
        StringConst(
          "high"
        ) => "FunctionCall42807",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_PC_Laptop_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Phones_Acc_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42811" => "PriceValue",
      "FunctionCall42813" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Phones_Acc"
      ) => "FunctionCall42813",
      ApplyFunc(
        StringConst(
          "low"
        ) => "FunctionCall42811",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Phones_Accessories_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Phones_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42815" => "PriceValue",
      "FunctionCall42817" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Phones"
      ) => "FunctionCall42817",
      ApplyFunc(
        StringConst(
          "medium"
        ) => "FunctionCall42815",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Phones_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Printers_Ink_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42819" => "PriceValue",
      "FunctionCall42821" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Printers_Ink"
      ) => "FunctionCall42821",
      ApplyFunc(
        StringConst(
          "medium/low"
        ) => "FunctionCall42819",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Printers_Ink_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Shoes_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42823" => "PriceValue",
      "FunctionCall42825" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Shoes"
      ) => "FunctionCall42825",
      ApplyFunc(
        StringConst(
          "medium"
        ) => "FunctionCall42823",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Shoes_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Software_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42827" => "PriceValue",
      "FunctionCall42829" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Software"
      ) => "FunctionCall42829",
      ApplyFunc(
        StringConst(
          "medium/low"
        ) => "FunctionCall42827",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Software_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$TV_Video_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42831" => "PriceValue",
      "FunctionCall42833" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "TV_Video"
      ) => "FunctionCall42833",
      ApplyFunc(
        StringConst(
          "high"
        ) => "FunctionCall42831",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_TV_Video_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Travel_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42835" => "PriceValue",
      "FunctionCall42837" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Travel"
      ) => "FunctionCall42837",
      ApplyFunc(
        StringConst(
          "high/medium"
        ) => "FunctionCall42835",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Travel_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Video_Games_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42839" => "PriceValue",
      "FunctionCall42841" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Video_Games"
      ) => "FunctionCall42841",
      ApplyFunc(
        StringConst(
          "medium"
        ) => "FunctionCall42839",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Video_Games_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$isComicFanTweet =
Project(
  (
    "C.tweetText" => "tweetText",
    "FunctionCall3605" => "comicMatches",
    "FunctionCall3617" => "tweetCount"
  ),
  GroupBy(
  (
    GetCol(
      "C.tweetText"
    )
  ),
  (
    List(
      GetText(
        GetCol(
          "C.match"
        )
      )
    ) => "FunctionCall3605",
    Count(
      GetCol(
        "C.tweetText"
      )
    ) => "FunctionCall3617"
  ),
    Project(
      (
        "match" => "C.match",
        "tweetText" => "C.tweetText"
      ),
      $ComicsTweets
    )
  )
);

$location_cues =
Union(
  Project(
    (
      "D.text" => "text",
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match",
        "text" => "D.text"
      ),
      $location_cues1
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match",
        "text" => "D.text"
      ),
      $location_cues5
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match",
        "text" => "D.text"
      ),
      $location_cues4
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match",
        "text" => "D.text"
      ),
      $location_cues31
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match",
        "text" => "D.text"
      ),
      $location_cues32
    )
  )
);

$Accessories_Electronics_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42843" => "PriceValue",
      "FunctionCall42845" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Electrical_Electronics"
      ) => "FunctionCall42845",
      ApplyFunc(
        StringConst(
          "medium/low"
        ) => "FunctionCall42843",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Accessories_Electronics_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Auto_Brands_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42847" => "PriceValue",
      "FunctionCall42849" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Auto_Brands"
      ) => "FunctionCall42849",
      ApplyFunc(
        StringConst(
          "high"
        ) => "FunctionCall42847",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Auto_Brands_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Auto_Cars_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42851" => "PriceValue",
      "FunctionCall42853" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Auto_Cars"
      ) => "FunctionCall42853",
      ApplyFunc(
        StringConst(
          "high"
        ) => "FunctionCall42851",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Auto_Cars_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Auto_Domain_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42855" => "PriceValue",
      "FunctionCall42857" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Auto_Domain"
      ) => "FunctionCall42857",
      ApplyFunc(
        StringConst(
          "high/medium"
        ) => "FunctionCall42855",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Auto_Domain_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Auto_Parts_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42859" => "PriceValue",
      "FunctionCall42861" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Auto_Parts"
      ) => "FunctionCall42861",
      ApplyFunc(
        StringConst(
          "medium"
        ) => "FunctionCall42859",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Auto_Parts_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Camera_Photo_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42863" => "PriceValue",
      "FunctionCall42865" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Camera_Photo"
      ) => "FunctionCall42865",
      ApplyFunc(
        StringConst(
          "high"
        ) => "FunctionCall42863",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Camera_Photo_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Clothing_Accessories_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42867" => "PriceValue",
      "FunctionCall42869" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Clothing_Accessories"
      ) => "FunctionCall42869",
      ApplyFunc(
        StringConst(
          "low"
        ) => "FunctionCall42867",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Clothing_Accessories_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Clothing_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42871" => "PriceValue",
      "FunctionCall42873" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Clothing"
      ) => "FunctionCall42873",
      ApplyFunc(
        StringConst(
          "medium"
        ) => "FunctionCall42871",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Clothing_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$ComicsUserDescs =
Project(
  (
    "C.match" => "match",
    "C.userDescText" => "userDescText"
  ),
  Project(
    (
      "match" => "C.match",
      "userDescText" => "C.userDescText"
    ),
    $ComicsuserDescCandidates
  )
);

$Computer_Accessories_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42875" => "PriceValue",
      "FunctionCall42877" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Computer_Accessories"
      ) => "FunctionCall42877",
      ApplyFunc(
        StringConst(
          "low"
        ) => "FunctionCall42875",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Computer_Accessories_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Jewelry_Watches_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42879" => "PriceValue",
      "FunctionCall42881" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Jewelry_Watches"
      ) => "FunctionCall42881",
      ApplyFunc(
        StringConst(
          "high/medium"
        ) => "FunctionCall42879",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Jewelry_Watches_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Luggage_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall42883" => "PriceValue",
      "FunctionCall42885" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Luggage"
      ) => "FunctionCall42885",
      ApplyFunc(
        StringConst(
          "medium/low"
        ) => "FunctionCall42883",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Luggage_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$MET_FilteredEntries =
Difference(
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $MET_AllMovies
    )
  ),
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $MET_ToFilterEntries
    )
  ));

$MET_FilteredMovies =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.match" => "name",
    "FunctionCall465" => "name_lc"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.match"
    ),
    ApplyFunc(
      ToLowerCase(
        GetCol(
          "D.match"
        )
      ) => "FunctionCall465",
      SortMergeJoin(
        Overlaps(
          GetCol(
            "D.text"
          ),
          GetCol(
            "F.text"
          )
        ),
        Select(
          And(
            Not(
              ContainsRegex(
                RegexConst(
                  /((is like)|(its like)|(it\'s like)|(a)|(is it)|(it is))mission impossible/,
                  "SimpleRegex"
                ),
                StringConst(
                  "CASE_INSENSITIVE"
                ),
                GetCol(
                  "D.text"
                )
              )
            ),
            Not(
              MatchesRegex(
                RegexConst(
                  /_/,
                  "SimpleRegex"
                ),
                LeftContext(
                  GetCol(
                    "D.match"
                  ),
                  IntConst(
                    1
                  )
                )
              )
            ),
            Not(
              MatchesRegex(
                RegexConst(
                  /_/,
                  "SimpleRegex"
                ),
                RightContext(
                  GetCol(
                    "D.match"
                  ),
                  IntConst(
                    1
                  )
                )
              )
            )
          ),
          Project(
            (
              "match" => "D.match",
              "prov" => "D.prov",
              "text" => "D.text"
            ),
            $MET_AllMovies
          )
        ),
        Project(
          (
            "text" => "F.text"
          ),
          $MET_FilteredEntries
        )
      )
    )
  )
);

$MET_FilteredMovies_Normalized =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.name" => "name",
    "D.name_lc" => "name_lc",
    "M.formalName" => "formal_name"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.name"
    ),
    HashJoin(
      Equals(
        ToLowerCase(
          GetCol(
            "M.nick"
          )
        ),
        GetString(
          GetCol(
            "D.name_lc"
          )
        )
      ),
      Project(
        (
          "formalName" => "M.formalName",
          "nick" => "M.nick"
        ),
        $ME_Movies_Name2Nick_Map
      ),
      Project(
        (
          "name" => "D.name",
          "name_lc" => "D.name_lc",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_FilteredMovies
      )
    )
  )
);

$MET_Movies_WithCategoryClue =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.name" => "name",
    "D.name_lc" => "name_lc",
    "D.formal_name" => "formal_name",
    "C.match" => "clue",
    "FunctionCall598" => "clue_lc"
  ),
  ApplyFunc(
    ToLowerCase(
      GetCol(
        "C.match"
      )
    ) => "FunctionCall598",
    Select(
      Not(
        Overlaps(
          GetCol(
            "D.name"
          ),
          GetCol(
            "C.match"
          )
        )
      ),
      SortMergeJoin(
        Overlaps(
          GetCol(
            "C.match"
          ),
          GetCol(
            "D.text"
          )
        ),
        Project(
          (
            "match" => "C.match"
          ),
          $ME_CluesForCategories
        ),
        Project(
          (
            "formal_name" => "D.formal_name",
            "name" => "D.name",
            "name_lc" => "D.name_lc",
            "prov" => "D.prov",
            "text" => "D.text"
          ),
          $MET_FilteredMovies_Normalized
        )
      )
    )
  )
);

$MET_Movies_WithCategory_AllRoles =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.name" => "name",
    "D.name_lc" => "name_lc",
    "D.formal_name" => "formal_name",
    "R.match" => "clue",
    "FunctionCall771" => "category"
  ),
  ApplyFunc(
    GetString(
      StringConst(
        "plot"
      )
    ) => "FunctionCall771",
    Select(
      And(
        Equals(
          GetString(
            GetCol(
              "MSR.formalName"
            )
          ),
          GetString(
            GetCol(
              "D.formal_name"
            )
          )
        ),
        Not(
          isSubstringIgnoreCase(
            GetString(
              GetCol(
                "D.formal_name"
              )
            ),
            GetString(
              GetCol(
                "R.match"
              )
            )
          )
        ),
        Overlaps(
          GetCol(
            "D.text"
          ),
          GetCol(
            "R.match"
          )
        )
      ),
      HashJoin(
        Equals(
          ToLowerCase(
            GetCol(
              "MSR.role"
            )
          ),
          ToLowerCase(
            GetCol(
              "R.match"
            )
          )
        ),
        HashJoin(
          Equals(
            GetString(
              GetCol(
                "MSR.formalName"
              )
            ),
            GetString(
              GetCol(
                "D.formal_name"
              )
            )
          ),
          Project(
            (
              "formalName" => "MSR.formalName",
              "role" => "MSR.role"
            ),
            $ME_Movies2Star2Role_Map
          ),
          Project(
            (
              "formal_name" => "D.formal_name",
              "name" => "D.name",
              "name_lc" => "D.name_lc",
              "prov" => "D.prov",
              "text" => "D.text"
            ),
            $MET_FilteredMovies_Normalized
          )
        ),
        Project(
          (
            "match" => "R.match"
          ),
          $MET_MovieRole
        )
      )
    )
  )
);

$MET_Movies_WithCategory_Stars =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.name" => "name",
    "D.name_lc" => "name_lc",
    "D.formal_name" => "formal_name",
    "R.match" => "clue",
    "FunctionCall701" => "category"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "R.match"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "cast"
        )
      ) => "FunctionCall701",
      Select(
        And(
          Equals(
            ToLowerCase(
              GetCol(
                "MSR.star"
              )
            ),
            ToLowerCase(
              GetCol(
                "R.match"
              )
            )
          ),
          Overlaps(
            GetCol(
              "D.text"
            ),
            GetCol(
              "R.match"
            )
          )
        ),
        HashJoin(
          Equals(
            GetString(
              GetCol(
                "MSR.formalName"
              )
            ),
            GetString(
              GetCol(
                "D.formal_name"
              )
            )
          ),
          HashJoin(
            Equals(
              ToLowerCase(
                GetCol(
                  "MSR.star"
                )
              ),
              ToLowerCase(
                GetCol(
                  "R.match"
                )
              )
            ),
            Project(
              (
                "formalName" => "MSR.formalName",
                "star" => "MSR.star"
              ),
              $ME_Movies2Star2Role_Map
            ),
            Project(
              (
                "match" => "R.match"
              ),
              $MET_MovieStar
            )
          ),
          Project(
            (
              "formal_name" => "D.formal_name",
              "name" => "D.name",
              "name_lc" => "D.name_lc",
              "prov" => "D.prov",
              "text" => "D.text"
            ),
            $MET_FilteredMovies_Normalized
          )
        )
      )
    )
  )
);

$MET_Movies_WithCategory_Vocab =
Project(
  (
    "D.text" => "text",
    "D.name_lc" => "name_lc",
    "D.name" => "name",
    "FunctionCall649" => "category",
    "D.formal_name" => "formal_name",
    "D.clue" => "clue",
    "D.prov" => "prov"
  ),
  ApplyFunc(
    GetString(
      GetCol(
        "M.category"
      )
    ) => "FunctionCall649",
    HashJoin(
      Equals(
        GetString(
          ToLowerCase(
            GetCol(
              "M.clue"
            )
          )
        ),
        GetString(
          GetCol(
            "D.clue_lc"
          )
        )
      ),
      Project(
        (
          "category" => "M.category",
          "clue" => "M.clue"
        ),
        $ME_Keyword2Category_Map
      ),
      Project(
        (
          "clue" => "D.clue",
          "clue_lc" => "D.clue_lc",
          "formal_name" => "D.formal_name",
          "name" => "D.name",
          "name_lc" => "D.name_lc",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_Movies_WithCategoryClue
      )
    )
  )
);

$ME_LA_AmbiguousCityStateResolvedToCity =
Difference(
  Project(
    (
      "D.match" => "match",
      "D.fullspan" => "fullspan",
      "D.orig_match" => "orig_match"
    ),
    Select(
      And(
        ContainsRegex(
          RegexConst(
            /,/,
            "SimpleRegex"
          ),
          RightContext(
            GetCol(
              "D.orig_match"
            ),
            IntConst(
              5
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /,/,
              "SimpleRegex"
            ),
            LeftContext(
              GetCol(
                "D.orig_match"
              ),
              IntConst(
                5
              )
            )
          )
        )
      ),
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match",
          "orig_match" => "D.orig_match"
        ),
        $ME_LA_SpanWithAmbiguousCityState
      )
    )
  ),
  Project(
    (
      "D.match" => "match",
      "D.fullspan" => "fullspan",
      "D.orig_match" => "orig_match"
    ),
    HashJoin(
      Equals(
        GetCol(
          "C.fullspan"
        ),
        GetCol(
          "D.fullspan"
        )
      ),
      Project(
        (
          "fullspan" => "C.fullspan"
        ),
        $ME_LA_Abbrv_USCountry
      ),
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match",
          "orig_match" => "D.orig_match"
        ),
        $ME_LA_SpanWithAmbiguousCityState
      )
    )
  ));

$ME_LA_AmbiguousCityStateResolvedToState =
Union(
  Project(
    (
      "D.match" => "match",
      "D.fullspan" => "fullspan",
      "D.orig_match" => "orig_match"
    ),
    Select(
      ContainsRegex(
        RegexConst(
          /,/,
          "SimpleRegex"
        ),
        LeftContext(
          GetCol(
            "D.orig_match"
          ),
          IntConst(
            5
          )
        )
      ),
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match",
          "orig_match" => "D.orig_match"
        ),
        $ME_LA_SpanWithAmbiguousCityState
      )
    )
  ),
  Project(
    (
      "D.match" => "match",
      "D.fullspan" => "fullspan",
      "D.orig_match" => "orig_match"
    ),
    HashJoin(
      Equals(
        GetCol(
          "C.fullspan"
        ),
        GetCol(
          "D.fullspan"
        )
      ),
      Project(
        (
          "fullspan" => "C.fullspan"
        ),
        $ME_LA_Abbrv_USCountry
      ),
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match",
          "orig_match" => "D.orig_match"
        ),
        $ME_LA_SpanWithAmbiguousCityState
      )
    )
  )
);

$ME_LA_CityNamesConsolidated =
Difference(
  Project(
    (
      "D.match" => "match",
      "D.fullspan" => "fullspan",
      "D.orig_match" => "orig_match"
    ),
    Project(
      (
        "fullspan" => "D.fullspan",
        "match" => "D.match",
        "orig_match" => "D.orig_match"
      ),
      $ME_LA_CityNamesConsolidatedUnfiltered
    )
  ),
  Project(
    (
      "D.match" => "match",
      "D.fullspan" => "fullspan",
      "D.orig_match" => "orig_match"
    ),
    Project(
      (
        "fullspan" => "D.fullspan",
        "match" => "D.match",
        "orig_match" => "D.orig_match"
      ),
      $ME_LA_AmbiguousCityStateResolvedToState
    )
  ));

$ME_LA_StateNamesConsolidated =
Difference(
  Project(
    (
      "D.match" => "match",
      "D.fullspan" => "fullspan",
      "D.orig_match" => "orig_match"
    ),
    Project(
      (
        "fullspan" => "D.fullspan",
        "match" => "D.match",
        "orig_match" => "D.orig_match"
      ),
      $ME_LA_StateNamesConsolidatedUnfiltered
    )
  ),
  Project(
    (
      "D.match" => "match",
      "D.fullspan" => "fullspan",
      "D.orig_match" => "orig_match"
    ),
    Project(
      (
        "fullspan" => "D.fullspan",
        "match" => "D.match",
        "orig_match" => "D.orig_match"
      ),
      $ME_LA_AmbiguousCityStateResolvedToCity
    )
  ));

$ME_MG_SeeTwitter =
Project(
  (
    "see" => "see"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "see"
    ),
    $SDM_OUTPUT_ME_MG_twitterSpeakSee_WITH_Default_OVER_ME_MG_basicTweet_text
  )
);

$ME_MG_TheTwitter =
Project(
  (
    "the" => "the"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "the"
    ),
    $SDM_OUTPUT_ME_MG_twitterSpeakDefArticle_WITH_Default_OVER_ME_MG_basicTweet_text
  )
);

$ME_MG_ToTwitter =
Project(
  (
    "to" => "to"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "to"
    ),
    $SDM_OUTPUT_ME_MG_twitterSpeakTo_WITH_Default_OVER_ME_MG_basicTweet_text
  )
);

$ME_MG_atWord =
Project(
  (
    "atWord" => "atWord"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "atWord"
    ),
    $SDM_OUTPUT_ME_MG_atDict_WITH_Default_OVER_ME_MG_basicTweet_text
  )
);

$ME_MG_theaterWord =
Project(
  (
    "T.text" => "text",
    "T.theaterWord" => "theaterWord"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.theaterWord"
    ),
    Project(
      (
        "text" => "T.text",
        "theaterWord" => "T.theaterWord"
      ),
      $ME_MG_theaterWordDup
    )
  )
);

$MP3_Audio_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall43052" => "PriceValue",
      "FunctionCall43054" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "MP3_Audio"
      ) => "FunctionCall43054",
      ApplyFunc(
        StringConst(
          "medium/low"
        ) => "FunctionCall43052",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_MP3_Audio_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$NL_NoName =
Difference(
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $NL_RecsNoFullName
    )
  ),
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $NL_PartialName
    )
  ));

$Networking_Storage_Dict =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "FunctionCall43056" => "PriceValue",
      "FunctionCall43058" => "prov",
      "D.text" => "text",
      "product" => "product"
    ),
    ApplyFunc(
      StringConst(
        "Networking_Storage"
      ) => "FunctionCall43058",
      ApplyFunc(
        StringConst(
          "medium/low"
        ) => "FunctionCall43056",
        Project(
          (
            "text" => "D.text",
            "__sdm_match" => "product"
          ),
          $SDM_OUTPUT_Networking_Storage_Dict_WITH_Default_OVER_NoSpamOrPromos_text
        )
      )
    )
  )
);

$Products_Auto =
Union(
  Project(
    (
      "FunctionCall41906" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "automobiles"
      ) => "FunctionCall41906",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Auto_Cars_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41908" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "automobiles"
      ) => "FunctionCall41908",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Auto_Brands_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41910" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "automobiles"
      ) => "FunctionCall41910",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Auto_Parts_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41912" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "automobiles"
      ) => "FunctionCall41912",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Auto_Domain_Dict
      )
    )
  )
);

$Products_ClothingAccessories =
Union(
  Project(
    (
      "FunctionCall41914" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "clothing and accessories"
      ) => "FunctionCall41914",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Clothing_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41916" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "clothing and accessories"
      ) => "FunctionCall41916",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Clothing_Accessories_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41918" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "clothing and accessories"
      ) => "FunctionCall41918",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Shoes_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41920" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "clothing and accessories"
      ) => "FunctionCall41920",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Jewelry_Watches_Dict
      )
    )
  )
);

$Products_Consumer_Electronics =
Union(
  Project(
    (
      "FunctionCall41922" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "consumer electronics"
      ) => "FunctionCall41922",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Phones_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41924" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "consumer electronics"
      ) => "FunctionCall41924",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Phones_Acc_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41926" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "consumer electronics"
      ) => "FunctionCall41926",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $PC_Laptop_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41928" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "consumer electronics"
      ) => "FunctionCall41928",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $TV_Video_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41930" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "consumer electronics"
      ) => "FunctionCall41930",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Camera_Photo_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41932" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "consumer electronics"
      ) => "FunctionCall41932",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Video_Games_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41934" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "consumer electronics"
      ) => "FunctionCall41934",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MP3_Audio_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41936" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "consumer electronics"
      ) => "FunctionCall41936",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Computer_Accessories_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41938" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "consumer electronics"
      ) => "FunctionCall41938",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Software_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41940" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "consumer electronics"
      ) => "FunctionCall41940",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Networking_Storage_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41942" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "consumer electronics"
      ) => "FunctionCall41942",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Printers_Ink_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41944" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "consumer electronics"
      ) => "FunctionCall41944",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Accessories_Electronics_Dict
      )
    )
  )
);

$Products_Travel =
Union(
  Project(
    (
      "FunctionCall41946" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "travel related"
      ) => "FunctionCall41946",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Travel_Dict
      )
    )
  ),
  Project(
    (
      "FunctionCall41948" => "category",
      "D.prov" => "subcategory",
      "D.product" => "product",
      "D.text" => "text",
      "D.PriceValue" => "PriceValue"
    ),
    ApplyFunc(
      StringConst(
        "travel related"
      ) => "FunctionCall41948",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "product" => "D.product",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $Luggage_Dict
      )
    )
  )
);

$bornfrom_livein_location_cuesDev =
Project(
  (
    "D.text" => "text",
    "D.match" => "match"
  ),
  Select(
    And(
      Not(
        ContainsDict(
          StringConst(
            "LIWC/notaplace.dict"
          ),
          GetCol(
            "D.match"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "LIWC/notaplace.dict"
          ),
          RightContextTok(
            GetCol(
              "D.match"
            ),
            IntConst(
              5
            )
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "LIWC/wishfulthinking.dict"
          ),
          LeftContextTok(
            GetCol(
              "D.match"
            ),
            IntConst(
              10
            )
          )
        )
      )
    ),
    Project(
      (
        "match" => "D.match",
        "text" => "D.text"
      ),
      $location_cues
    )
  )
);

$isComicFanFromTweet =
Project(
  (
    "I.comicMatches" => "comicMatches",
    "FunctionCall41950" => "isFan"
  ),
  ApplyFunc(
    StringConst(
      "true"
    ) => "FunctionCall41950",
    Select(
      GreaterThan(
        GetCol(
          "I.tweetCount"
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "comicMatches" => "I.comicMatches",
          "tweetCount" => "I.tweetCount"
        ),
        $isComicFanTweet
      )
    )
  )
);

$isComicFanUserDesc =
Project(
  (
    "C.userDescText" => "userDescText",
    "FunctionCall38973" => "comicMatches",
    "FunctionCall38985" => "userDescCount"
  ),
  GroupBy(
  (
    GetCol(
      "C.userDescText"
    )
  ),
  (
    List(
      GetText(
        GetCol(
          "C.match"
        )
      )
    ) => "FunctionCall38973",
    Count(
      GetCol(
        "C.userDescText"
      )
    ) => "FunctionCall38985"
  ),
    Project(
      (
        "match" => "C.match",
        "userDescText" => "C.userDescText"
      ),
      $ComicsUserDescs
    )
  )
);

$CategorizedProducts =
Union(
  Project(
    (
      "P.category" => "category",
      "P.subcategory" => "subcategory",
      "P.product" => "product",
      "P.text" => "text",
      "P.PriceValue" => "PriceValue"
    ),
    Project(
      (
        "PriceValue" => "P.PriceValue",
        "category" => "P.category",
        "product" => "P.product",
        "subcategory" => "P.subcategory",
        "text" => "P.text"
      ),
      $Products_Consumer_Electronics
    )
  ),
  Project(
    (
      "P.category" => "category",
      "P.subcategory" => "subcategory",
      "P.product" => "product",
      "P.text" => "text",
      "P.PriceValue" => "PriceValue"
    ),
    Project(
      (
        "PriceValue" => "P.PriceValue",
        "category" => "P.category",
        "product" => "P.product",
        "subcategory" => "P.subcategory",
        "text" => "P.text"
      ),
      $Products_Auto
    )
  ),
  Project(
    (
      "P.category" => "category",
      "P.subcategory" => "subcategory",
      "P.product" => "product",
      "P.text" => "text",
      "P.PriceValue" => "PriceValue"
    ),
    Project(
      (
        "PriceValue" => "P.PriceValue",
        "category" => "P.category",
        "product" => "P.product",
        "subcategory" => "P.subcategory",
        "text" => "P.text"
      ),
      $Products_ClothingAccessories
    )
  ),
  Project(
    (
      "P.category" => "category",
      "P.subcategory" => "subcategory",
      "P.product" => "product",
      "P.text" => "text",
      "P.PriceValue" => "PriceValue"
    ),
    Project(
      (
        "PriceValue" => "P.PriceValue",
        "category" => "P.category",
        "product" => "P.product",
        "subcategory" => "P.subcategory",
        "text" => "P.text"
      ),
      $Products_Travel
    )
  )
);

$MET_Movies_WithCategory_Roles_ToKeep =
Difference(
  Project(
    (
      "D.name" => "name"
    ),
    Project(
      (
        "name" => "D.name"
      ),
      $MET_FilteredMovies_Normalized
    )
  ),
  Project(
    (
      "D.name" => "name"
    ),
    Project(
      (
        "name" => "D.name"
      ),
      $MET_Movies_WithCategory_Stars
    )
  ));

$ME_LA_AllNames =
Union(
  Project(
    (
      "D.match" => "match",
      "FunctionCall41952" => "prov",
      "D.fullspan" => "fullspan",
      "D.orig_match" => "orig_match"
    ),
    ApplyFunc(
      StringConst(
        "state"
      ) => "FunctionCall41952",
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match",
          "orig_match" => "D.orig_match"
        ),
        $ME_LA_StateNamesConsolidated
      )
    )
  ),
  Project(
    (
      "D.match" => "match",
      "FunctionCall41954" => "prov",
      "D.fullspan" => "fullspan",
      "D.orig_match" => "orig_match"
    ),
    ApplyFunc(
      StringConst(
        "city"
      ) => "FunctionCall41954",
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match",
          "orig_match" => "D.orig_match"
        ),
        $ME_LA_CityNamesConsolidated
      )
    )
  ),
  Project(
    (
      "FunctionCall35197" => "match",
      "FunctionCall41956" => "prov",
      "D.fullspan" => "fullspan",
      "D.match" => "orig_match"
    ),
    ApplyFunc(
      StringConst(
        "stateAbbrv"
      ) => "FunctionCall41956",
      ApplyFunc(
        GetString(
          GetCol(
            "D.match"
          )
        ) => "FunctionCall35197",
        Project(
          (
            "fullspan" => "D.fullspan",
            "match" => "D.match"
          ),
          $ME_LA_StateAbbrvNames
        )
      )
    )
  ),
  Project(
    (
      "D.match" => "match",
      "FunctionCall41958" => "prov",
      "D.fullspan" => "fullspan",
      "D.orig_match" => "orig_match"
    ),
    ApplyFunc(
      StringConst(
        "country"
      ) => "FunctionCall41958",
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match",
          "orig_match" => "D.orig_match"
        ),
        $ME_LA_CountryNames
      )
    )
  )
);

$ME_LA_AllNamesConsolidated =
Project(
  (
    "D.match" => "match",
    "D.prov" => "prov",
    "D.fullspan" => "fullspan",
    "D.orig_match" => "orig_match"
  ),
  Project(
    (
      "fullspan" => "D.fullspan",
      "match" => "D.match",
      "orig_match" => "D.orig_match",
      "prov" => "D.prov"
    ),
    $ME_LA_AllNames
  )
);

$ME_LA_ForeignCountries =
Project(
  (
    "D.match" => "country",
    "D.prov" => "prov",
    "D.fullspan" => "fullspan",
    "D.orig_match" => "orig_match"
  ),
  Select(
    Equals(
      GetCol(
        "D.fullspan"
      ),
      GetCol(
        "C.fullspan"
      )
    ),
    HashJoin(
      Equals(
        GetString(
          GetCol(
            "C.match"
          )
        ),
        GetString(
          GetCol(
            "D.match"
          )
        )
      ),
      Project(
        (
          "fullspan" => "C.fullspan",
          "match" => "C.match"
        ),
        $ME_LA_CountryNames
      ),
      Select(
        Not(
          ContainsRegex(
            RegexConst(
              /(United States)|(united states)|(US)|(America)|(U\.S\.)|(USA)/,
              "SimpleRegex"
            ),
            GetCol(
              "D.fullspan"
            )
          )
        ),
        Project(
          (
            "fullspan" => "D.fullspan",
            "match" => "D.match",
            "orig_match" => "D.orig_match",
            "prov" => "D.prov"
          ),
          $ME_LA_AllNamesConsolidated
        )
      )
    )
  )
);

$ME_LA_ForeignCountriesNoCities =
Difference(
  Project(
    (
      "D.country" => "country",
      "D.fullspan" => "fullspan",
      "D.orig_match" => "orig_match"
    ),
    Project(
      (
        "country" => "D.country",
        "fullspan" => "D.fullspan",
        "orig_match" => "D.orig_match"
      ),
      $ME_LA_ForeignCountries
    )
  ),
  Project(
    (
      "D.country" => "country",
      "D.fullspan" => "fullspan",
      "D.orig_match" => "orig_match"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "M.fullspan"
        ),
        GetCol(
          "D.fullspan"
        )
      ),
      Project(
        (
          "fullspan" => "M.fullspan"
        ),
        $ME_LA_ForeignCitiesMapped
      ),
      Project(
        (
          "country" => "D.country",
          "fullspan" => "D.fullspan",
          "orig_match" => "D.orig_match"
        ),
        $ME_LA_ForeignCountries
      )
    )
  ));

$MappedNamesPrevOutput =
Union(
  Project(
    (
      "D.fullspan" => "fulltext",
      "FunctionCall33400" => "name",
      "FunctionCall33406" => "isWellFormatted",
      "FunctionCall33412" => "firstname",
      "FunctionCall33418" => "lastname"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          ""
        )
      ) => "FunctionCall33418",
      ApplyFunc(
        GetString(
          StringConst(
            ""
          )
        ) => "FunctionCall33412",
        ApplyFunc(
          GetString(
            StringConst(
              "false"
            )
          ) => "FunctionCall33406",
          ApplyFunc(
            GetString(
              StringConst(
                ""
              )
            ) => "FunctionCall33400",
            Project(
              (
                "fullspan" => "D.fullspan"
              ),
              $NL_NoName
            )
          )
        )
      )
    )
  ),
  Project(
    (
      "D.fullspan" => "fulltext",
      "FunctionCall33434" => "name",
      "FunctionCall33442" => "isWellFormatted",
      "FunctionCall33448" => "firstname",
      "FunctionCall33454" => "lastname"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          ""
        )
      ) => "FunctionCall33454",
      ApplyFunc(
        GetString(
          StringConst(
            ""
          )
        ) => "FunctionCall33448",
        ApplyFunc(
          GetString(
            StringConst(
              "partial"
            )
          ) => "FunctionCall33442",
          ApplyFunc(
            GetString(
              GetCol(
                "D.name"
              )
            ) => "FunctionCall33434",
            Project(
              (
                "fullspan" => "D.fullspan",
                "name" => "D.name"
              ),
              $NL_PartialName
            )
          )
        )
      )
    )
  ),
  Project(
    (
      "D.fullspan" => "fulltext",
      "FunctionCall33470" => "name",
      "FunctionCall33478" => "isWellFormatted",
      "FunctionCall33486" => "firstname",
      "FunctionCall33496" => "lastname"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.lastname"
        )
      ) => "FunctionCall33496",
      ApplyFunc(
        GetString(
          GetCol(
            "D.firstname"
          )
        ) => "FunctionCall33486",
        ApplyFunc(
          GetString(
            StringConst(
              "true"
            )
          ) => "FunctionCall33478",
          ApplyFunc(
            GetString(
              GetCol(
                "D.fullspan"
              )
            ) => "FunctionCall33470",
            Project(
              (
                "firstname" => "D.firstname",
                "fullspan" => "D.fullspan",
                "lastname" => "D.lastname"
              ),
              $NL_NameComponents
            )
          )
        )
      )
    )
  )
);

$NL_NameGrouping =
Project(
  (
    "D.fulltext" => "fulltext",
    "FunctionCall33515" => "nameList"
  ),
  GroupBy(
  (
    GetCol(
      "D.fulltext"
    )
  ),
  (
    List(
      GetCol(
        "D.name"
      )
    ) => "FunctionCall33515"
  ),
    Project(
      (
        "fulltext" => "D.fulltext",
        "name" => "D.name"
      ),
      $MappedNamesPrevOutput
    )
  )
);

$bornfrom_livein_location_cues =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $bornfrom_livein_location_cuesDev
  )
);

$isComicFanFromUserDesc =
Project(
  (
    "I.comicMatches" => "comicMatches",
    "FunctionCall41960" => "isFan"
  ),
  ApplyFunc(
    StringConst(
      "true"
    ) => "FunctionCall41960",
    Select(
      GreaterThan(
        GetCol(
          "I.userDescCount"
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "comicMatches" => "I.comicMatches",
          "userDescCount" => "I.userDescCount"
        ),
        $isComicFanUserDesc
      )
    )
  )
);

$MET_Movies_WithCategory_Roles =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.name" => "name",
    "D.name_lc" => "name_lc",
    "D.formal_name" => "formal_name",
    "D.clue" => "clue",
    "D.category" => "category"
  ),
  SortMergeJoin(
    Overlaps(
      GetCol(
        "D.name"
      ),
      GetCol(
        "K.name"
      )
    ),
    Project(
      (
        "category" => "D.category",
        "clue" => "D.clue",
        "formal_name" => "D.formal_name",
        "name" => "D.name",
        "name_lc" => "D.name_lc",
        "prov" => "D.prov",
        "text" => "D.text"
      ),
      $MET_Movies_WithCategory_AllRoles
    ),
    Project(
      (
        "name" => "K.name"
      ),
      $MET_Movies_WithCategory_Roles_ToKeep
    )
  )
);

$ME_LA_AllCityStateNamesMappedToAbbrv =
Union(
  Project(
    (
      "FunctionCall35659" => "match",
      "D.prov" => "prov",
      "D.fullspan" => "fullspan",
      "FunctionCall41962" => "semantics",
      "D.orig_match" => "orig_match"
    ),
    ApplyFunc(
      StringConst(
        "city"
      ) => "FunctionCall41962",
      ApplyFunc(
        GetString(
          GetCol(
            "D.match"
          )
        ) => "FunctionCall35659",
        Select(
          Equals(
            GetString(
              GetCol(
                "D.prov"
              )
            ),
            StringConst(
              "city"
            )
          ),
          Project(
            (
              "fullspan" => "D.fullspan",
              "match" => "D.match",
              "orig_match" => "D.orig_match",
              "prov" => "D.prov"
            ),
            $ME_LA_AllNamesConsolidated
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall35699" => "match",
      "FunctionCall41964" => "prov",
      "D.fullspan" => "fullspan",
      "FunctionCall41966" => "semantics",
      "D.orig_match" => "orig_match"
    ),
    ApplyFunc(
      StringConst(
        "state"
      ) => "FunctionCall41966",
      ApplyFunc(
        StringConst(
          "state"
        ) => "FunctionCall41964",
        ApplyFunc(
          GetString(
            GetCol(
              "D.match"
            )
          ) => "FunctionCall35699",
          Select(
            Equals(
              GetString(
                GetCol(
                  "D.prov"
                )
              ),
              StringConst(
                "stateAbbrv"
              )
            ),
            Project(
              (
                "fullspan" => "D.fullspan",
                "match" => "D.match",
                "orig_match" => "D.orig_match",
                "prov" => "D.prov"
              ),
              $ME_LA_AllNamesConsolidated
            )
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall35735" => "match",
      "D.prov" => "prov",
      "D.fullspan" => "fullspan",
      "FunctionCall41968" => "semantics",
      "D.orig_match" => "orig_match"
    ),
    ApplyFunc(
      StringConst(
        "state"
      ) => "FunctionCall41968",
      ApplyFunc(
        GetString(
          GetCol(
            "SA.abbrv"
          )
        ) => "FunctionCall35735",
        NLJoin(
          equalsIgnoreCase(
            GetString(
              GetCol(
                "D.match"
              )
            ),
            GetString(
              GetCol(
                "SA.state"
              )
            )
          ),
          Project(
            (
              "abbrv" => "SA.abbrv",
              "state" => "SA.state"
            ),
            $ME_LA_StateToAbbrv
          ),
          Select(
            Equals(
              GetString(
                GetCol(
                  "D.prov"
                )
              ),
              StringConst(
                "state"
              )
            ),
            Project(
              (
                "fullspan" => "D.fullspan",
                "match" => "D.match",
                "orig_match" => "D.orig_match",
                "prov" => "D.prov"
              ),
              $ME_LA_AllNamesConsolidated
            )
          )
        )
      )
    )
  )
);

$ME_LA_AllCityStateNamesUpper =
Project(
  (
    "FunctionCall35792" => "city",
    "D.fullspan" => "fullspan",
    "D.orig_match" => "orig_match"
  ),
  ApplyFunc(
    toUpperCase(
      GetString(
        GetCol(
          "D.match"
        )
      )
    ) => "FunctionCall35792",
    Select(
      Equals(
        GetString(
          GetCol(
            "D.prov"
          )
        ),
        StringConst(
          "city"
        )
      ),
      Project(
        (
          "fullspan" => "D.fullspan",
          "match" => "D.match",
          "orig_match" => "D.orig_match",
          "prov" => "D.prov"
        ),
        $ME_LA_AllCityStateNamesMappedToAbbrv
      )
    )
  )
);

$ME_LA_CityStateFromMap =
Project(
  (
    "D.city" => "city",
    "M.state" => "state",
    "D.fullspan" => "fullspan",
    "D.orig_match" => "orig_match"
  ),
  HashJoin(
    Equals(
      GetString(
        GetCol(
          "M.city"
        )
      ),
      GetString(
        GetCol(
          "D.city"
        )
      )
    ),
    Project(
      (
        "city" => "M.city",
        "state" => "M.state"
      ),
      $ME_LA_CityToState
    ),
    Project(
      (
        "city" => "D.city",
        "fullspan" => "D.fullspan",
        "orig_match" => "D.orig_match"
      ),
      $ME_LA_AllCityStateNamesUpper
    )
  )
);

$ME_LA_ForeignCitiesCountriesAmbiguous =
Project(
  (
    "C.fullspan" => "fullspan",
    "M.city" => "city",
    "C.country" => "country",
    "C.orig_match" => "orig_match"
  ),
  Select(
    Not(
      equalsIgnoreCase(
        GetString(
          GetCol(
            "C.country"
          )
        ),
        GetString(
          GetCol(
            "M.country"
          )
        )
      )
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "M.fullspan"
        ),
        GetCol(
          "C.fullspan"
        )
      ),
      Project(
        (
          "city" => "M.city",
          "country" => "M.country",
          "fullspan" => "M.fullspan"
        ),
        $ME_LA_ForeignCitiesMapped
      ),
      Project(
        (
          "country" => "C.country",
          "fullspan" => "C.fullspan",
          "orig_match" => "C.orig_match"
        ),
        $ME_LA_ForeignCountries
      )
    )
  )
);

$ME_LA_ForeignCitiesCountryUnambiguous =
Difference(
  Project(
    (
      "C.fullspan" => "fullspan",
      "C.city" => "city",
      "C.country" => "country",
      "C.orig_match" => "orig_match"
    ),
    Consolidate(
      "ContainedWithin",
      GetCol(
        "C.country"
      ),
      Project(
        (
          "city" => "C.city",
          "country" => "C.country",
          "fullspan" => "C.fullspan",
          "orig_match" => "C.orig_match"
        ),
        $ME_LA_ForeignCitiesMapped
      )
    )
  ),
  Project(
    (
      "C.fullspan" => "fullspan",
      "A.city" => "city",
      "C.country" => "country",
      "C.orig_match" => "orig_match"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "C.fullspan"
        ),
        GetCol(
          "A.fullspan"
        )
      ),
      Project(
        (
          "country" => "C.country",
          "fullspan" => "C.fullspan",
          "orig_match" => "C.orig_match"
        ),
        $ME_LA_ForeignCitiesMapped
      ),
      Project(
        (
          "city" => "A.city",
          "fullspan" => "A.fullspan"
        ),
        $ME_LA_ForeignCitiesCountriesAmbiguous
      )
    )
  ));

$ME_LA_ForeignEntriesUnfiltered =
Union(
  Project(
    (
      "D.fullspan" => "fullspan",
      "FunctionCall35594" => "city",
      "FunctionCall35602" => "country",
      "FunctionCall41970" => "prov",
      "D.orig_match" => "orig_match"
    ),
    ApplyFunc(
      StringConst(
        "foreigncountrynocity"
      ) => "FunctionCall41970",
      ApplyFunc(
        GetString(
          GetCol(
            "D.country"
          )
        ) => "FunctionCall35602",
        ApplyFunc(
          GetString(
            StringConst(
              ""
            )
          ) => "FunctionCall35594",
          Project(
            (
              "country" => "D.country",
              "fullspan" => "D.fullspan",
              "orig_match" => "D.orig_match"
            ),
            $ME_LA_ForeignCountriesNoCities
          )
        )
      )
    )
  ),
  Project(
    (
      "D.fullspan" => "fullspan",
      "FunctionCall35628" => "city",
      "FunctionCall35638" => "country",
      "FunctionCall41972" => "prov",
      "D.orig_match" => "orig_match"
    ),
    ApplyFunc(
      StringConst(
        "foreigncity"
      ) => "FunctionCall41972",
      ApplyFunc(
        GetString(
          GetCol(
            "D.country"
          )
        ) => "FunctionCall35638",
        ApplyFunc(
          GetString(
            GetCol(
              "D.city"
            )
          ) => "FunctionCall35628",
          Project(
            (
              "city" => "D.city",
              "country" => "D.country",
              "fullspan" => "D.fullspan",
              "orig_match" => "D.orig_match"
            ),
            $ME_LA_ForeignCitiesCountryUnambiguous
          )
        )
      )
    )
  )
);

$MappedNamesOutput =
Project(
  (
    "FunctionCall33531" => "fulltext",
    "G.nameList" => "nameList",
    "D.isWellFormatted" => "isWellFormatted",
    "D.firstname" => "firstname",
    "D.lastname" => "lastname"
  ),
  Consolidate(
    "ExactMatch",
    GetCol(
      "D.fulltext"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.fulltext"
        )
      ) => "FunctionCall33531",
      SortMergeJoin(
        Overlaps(
          GetCol(
            "D.fulltext"
          ),
          GetCol(
            "G.fulltext"
          )
        ),
        Project(
          (
            "firstname" => "D.firstname",
            "fulltext" => "D.fulltext",
            "isWellFormatted" => "D.isWellFormatted",
            "lastname" => "D.lastname"
          ),
          $MappedNamesPrevOutput
        ),
        Project(
          (
            "fulltext" => "G.fulltext",
            "nameList" => "G.nameList"
          ),
          $NL_NameGrouping
        )
      )
    )
  )
);

$MET_Movies_WithCategory =
Union(
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.formal_name" => "formal_name",
      "D.category" => "category",
      "D.clue" => "clue",
      "FunctionCall41974" => "categ_prov"
    ),
    ApplyFunc(
      StringConst(
        "vocab"
      ) => "FunctionCall41974",
      Project(
        (
          "category" => "D.category",
          "clue" => "D.clue",
          "formal_name" => "D.formal_name",
          "name" => "D.name",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_Movies_WithCategory_Vocab
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.formal_name" => "formal_name",
      "D.category" => "category",
      "D.clue" => "clue",
      "FunctionCall41976" => "categ_prov"
    ),
    ApplyFunc(
      StringConst(
        "rs"
      ) => "FunctionCall41976",
      Project(
        (
          "category" => "D.category",
          "clue" => "D.clue",
          "formal_name" => "D.formal_name",
          "name" => "D.name",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_Movies_WithCategory_Roles
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.formal_name" => "formal_name",
      "D.category" => "category",
      "D.clue" => "clue",
      "FunctionCall41978" => "categ_prov"
    ),
    ApplyFunc(
      StringConst(
        "rs"
      ) => "FunctionCall41978",
      Project(
        (
          "category" => "D.category",
          "clue" => "D.clue",
          "formal_name" => "D.formal_name",
          "name" => "D.name",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_Movies_WithCategory_Stars
      )
    )
  )
);

$ME_LA_CityState =
Project(
  (
    "M.city" => "city",
    "M.state" => "state",
    "M.fullspan" => "fullspan"
  ),
  Consolidate(
    "ExactMatch",
    GetCol(
      "M.fullspan"
    ),
    Select(
      And(
        Not(
          Equals(
            GetCol(
              "D.orig_match"
            ),
            GetCol(
              "M.orig_match"
            )
          )
        ),
        equalsIgnoreCase(
          GetString(
            GetCol(
              "M.state"
            )
          ),
          GetString(
            GetCol(
              "D.match"
            )
          )
        )
      ),
      SortMergeJoin(
        Overlaps(
          GetCol(
            "M.fullspan"
          ),
          GetCol(
            "D.fullspan"
          )
        ),
        Project(
          (
            "city" => "M.city",
            "fullspan" => "M.fullspan",
            "orig_match" => "M.orig_match",
            "state" => "M.state"
          ),
          $ME_LA_CityStateFromMap
        ),
        Select(
          Equals(
            GetString(
              GetCol(
                "D.prov"
              )
            ),
            StringConst(
              "state"
            )
          ),
          Project(
            (
              "fullspan" => "D.fullspan",
              "match" => "D.match",
              "orig_match" => "D.orig_match",
              "prov" => "D.prov"
            ),
            $ME_LA_AllCityStateNamesMappedToAbbrv
          )
        )
      )
    )
  )
);

$ME_LA_CountryOnlyUS_nocitystate =
Difference(
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Consolidate(
      "ContainedWithin",
      GetCol(
        "D.fullspan"
      ),
      Project(
        (
          "fullspan" => "D.fullspan"
        ),
        $ME_LA_Abbrv_USCountry
      )
    )
  ),
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_CityState
    )
  ));

$ME_LA_StateOnlyRecsFirstFilter =
Difference(
  Project(
    (
      "M.fullspan" => "fullspan"
    ),
    Select(
      Equals(
        GetString(
          GetCol(
            "M.semantics"
          )
        ),
        StringConst(
          "state"
        )
      ),
      Project(
        (
          "fullspan" => "M.fullspan",
          "semantics" => "M.semantics"
        ),
        $ME_LA_AllCityStateNamesMappedToAbbrv
      )
    )
  ),
  Project(
    (
      "M.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "M.fullspan"
      ),
      $ME_LA_CityState
    )
  ));

$MET_Movies_NoCategory =
Difference(
  Project(
    (
      "D.text" => "text",
      "D.name" => "name"
    ),
    Project(
      (
        "name" => "D.name",
        "text" => "D.text"
      ),
      $MET_FilteredMovies_Normalized
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.name" => "name"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "D.name"
        ),
        GetCol(
          "C.name"
        )
      ),
      Project(
        (
          "name" => "D.name",
          "text" => "D.text"
        ),
        $MET_FilteredMovies_Normalized
      ),
      Project(
        (
          "name" => "C.name"
        ),
        $MET_Movies_WithCategory
      )
    )
  ));

$ME_LA_CityOnlyRecsWorldFirstFilter =
Difference(
  Project(
    (
      "M.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "M.fullspan"
      ),
      $ME_LA_CityStateFromMap
    )
  ),
  Project(
    (
      "M.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "M.fullspan"
      ),
      $ME_LA_CityState
    )
  ));

$ME_LA_ForeignEntriesToFilter =
Union(
  Project(
    (
      "F.fullspan" => "fullspan",
      "F.city" => "city",
      "F.country" => "country",
      "F.prov" => "prov",
      "F.orig_match" => "orig_match"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "F.fullspan"
        ),
        GetCol(
          "D.fullspan"
        )
      ),
      Project(
        (
          "city" => "F.city",
          "country" => "F.country",
          "fullspan" => "F.fullspan",
          "orig_match" => "F.orig_match",
          "prov" => "F.prov"
        ),
        $ME_LA_ForeignEntriesUnfiltered
      ),
      Project(
        (
          "fullspan" => "D.fullspan"
        ),
        $ME_LA_CityState
      )
    )
  ),
  Project(
    (
      "F.fullspan" => "fullspan",
      "F.city" => "city",
      "F.country" => "country",
      "F.prov" => "prov",
      "F.orig_match" => "orig_match"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "F.fullspan"
        ),
        GetCol(
          "D.fullspan"
        )
      ),
      Project(
        (
          "city" => "F.city",
          "country" => "F.country",
          "fullspan" => "F.fullspan",
          "orig_match" => "F.orig_match",
          "prov" => "F.prov"
        ),
        $ME_LA_ForeignEntriesUnfiltered
      ),
      Project(
        (
          "fullspan" => "D.fullspan"
        ),
        $ME_LA_StateOnlyRecsFirstFilter
      )
    )
  )
);

$MET_Movies_AllCategories =
Union(
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.clue" => "clue",
      "FunctionCall1077" => "category",
      "D.formal_name" => "formal_name",
      "FunctionCall1093" => "categ_prov"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.categ_prov"
        )
      ) => "FunctionCall1093",
      ApplyFunc(
        GetString(
          GetCol(
            "D.category"
          )
        ) => "FunctionCall1077",
        Project(
          (
            "categ_prov" => "D.categ_prov",
            "category" => "D.category",
            "clue" => "D.clue",
            "formal_name" => "D.formal_name",
            "name" => "D.name",
            "prov" => "D.prov",
            "text" => "D.text"
          ),
          $MET_Movies_WithCategory
        )
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.name" => "clue",
      "FunctionCall1127" => "category",
      "D.formal_name" => "formal_name",
      "FunctionCall1139" => "categ_prov"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "none"
        )
      ) => "FunctionCall1139",
      ApplyFunc(
        GetString(
          StringConst(
            "general"
          )
        ) => "FunctionCall1127",
        SortMergeJoin(
          Overlaps(
            GetCol(
              "D.name"
            ),
            GetCol(
              "C.name"
            )
          ),
          Project(
            (
              "formal_name" => "D.formal_name",
              "name" => "D.name",
              "prov" => "D.prov",
              "text" => "D.text"
            ),
            $MET_FilteredMovies_Normalized
          ),
          Project(
            (
              "name" => "C.name"
            ),
            $MET_Movies_NoCategory
          )
        )
      )
    )
  )
);

$MET_UnAmbiguousMoviesUnfiltered =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.name" => "name",
    "D.clue" => "clue",
    "D.category" => "category",
    "D.formal_name" => "formal_name",
    "D.categ_prov" => "categ_prov"
  ),
  Select(
    Equals(
      GetString(
        GetCol(
          "D.prov"
        )
      ),
      GetString(
        StringConst(
          "nonambig"
        )
      )
    ),
    Project(
      (
        "categ_prov" => "D.categ_prov",
        "category" => "D.category",
        "clue" => "D.clue",
        "formal_name" => "D.formal_name",
        "name" => "D.name",
        "prov" => "D.prov",
        "text" => "D.text"
      ),
      $MET_Movies_AllCategories
    )
  )
);

$ME_LA_ForeignEntries =
Difference(
  Project(
    (
      "F.fullspan" => "fullspan",
      "F.city" => "city",
      "F.country" => "country",
      "F.prov" => "prov",
      "F.orig_match" => "orig_match"
    ),
    Project(
      (
        "city" => "F.city",
        "country" => "F.country",
        "fullspan" => "F.fullspan",
        "orig_match" => "F.orig_match",
        "prov" => "F.prov"
      ),
      $ME_LA_ForeignEntriesUnfiltered
    )
  ),
  Project(
    (
      "F.fullspan" => "fullspan",
      "F.city" => "city",
      "F.country" => "country",
      "F.prov" => "prov",
      "F.orig_match" => "orig_match"
    ),
    Project(
      (
        "city" => "F.city",
        "country" => "F.country",
        "fullspan" => "F.fullspan",
        "orig_match" => "F.orig_match",
        "prov" => "F.prov"
      ),
      $ME_LA_ForeignEntriesToFilter
    )
  ));

$ME_LA_StateOnlyRecs =
Difference(
  Project(
    (
      "M.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "M.fullspan"
      ),
      $ME_LA_StateOnlyRecsFirstFilter
    )
  ),
  Project(
    (
      "M.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "M.fullspan"
      ),
      $ME_LA_ForeignEntries
    )
  ));

$MET_AmbiguousMoviesUnfiltered =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.name" => "name",
    "D.clue" => "clue",
    "D.category" => "category",
    "D.formal_name" => "formal_name",
    "D.categ_prov" => "categ_prov"
  ),
  Select(
    Equals(
      GetString(
        GetCol(
          "D.prov"
        )
      ),
      GetString(
        StringConst(
          "ambig"
        )
      )
    ),
    Project(
      (
        "categ_prov" => "D.categ_prov",
        "category" => "D.category",
        "clue" => "D.clue",
        "formal_name" => "D.formal_name",
        "name" => "D.name",
        "prov" => "D.prov",
        "text" => "D.text"
      ),
      $MET_Movies_AllCategories
    )
  )
);

$MET_AmbiguousMovies_Filtered =
Union(
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.clue" => "clue",
      "D.category" => "category",
      "D.formal_name" => "formal_name"
    ),
    Select(
      ContainsDict(
        StringConst(
          "ME_Movies_ContextWords_Dict"
        ),
        GetCol(
          "D.text"
        )
      ),
      Project(
        (
          "category" => "D.category",
          "clue" => "D.clue",
          "formal_name" => "D.formal_name",
          "name" => "D.name",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_AmbiguousMoviesUnfiltered
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.clue" => "clue",
      "D.category" => "category",
      "D.formal_name" => "formal_name"
    ),
    Select(
      And(
        MatchesRegex(
          RegexConst(
            /\"|\'/,
            "SimpleRegex"
          ),
          LeftContextTok(
            GetCol(
              "D.name"
            ),
            IntConst(
              1
            )
          )
        ),
        MatchesRegex(
          RegexConst(
            /\"|\'/,
            "SimpleRegex"
          ),
          RightContextTok(
            GetCol(
              "D.name"
            ),
            IntConst(
              1
            )
          )
        )
      ),
      Project(
        (
          "category" => "D.category",
          "clue" => "D.clue",
          "formal_name" => "D.formal_name",
          "name" => "D.name",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_AmbiguousMoviesUnfiltered
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.clue" => "clue",
      "D.category" => "category",
      "D.formal_name" => "formal_name"
    ),
    Select(
      Equals(
        GetString(
          GetCol(
            "D.categ_prov"
          )
        ),
        GetString(
          StringConst(
            "rs"
          )
        )
      ),
      Project(
        (
          "categ_prov" => "D.categ_prov",
          "category" => "D.category",
          "clue" => "D.clue",
          "formal_name" => "D.formal_name",
          "name" => "D.name",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_AmbiguousMoviesUnfiltered
      )
    )
  )
);

$MET_HighlyAmbiguousMoviesUnfiltered =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.name" => "name",
    "D.clue" => "clue",
    "D.category" => "category",
    "D.formal_name" => "formal_name",
    "D.categ_prov" => "categ_prov"
  ),
  Select(
    Equals(
      GetString(
        GetCol(
          "D.prov"
        )
      ),
      GetString(
        StringConst(
          "highlyambig"
        )
      )
    ),
    Project(
      (
        "categ_prov" => "D.categ_prov",
        "category" => "D.category",
        "clue" => "D.clue",
        "formal_name" => "D.formal_name",
        "name" => "D.name",
        "prov" => "D.prov",
        "text" => "D.text"
      ),
      $MET_Movies_AllCategories
    )
  )
);

$MET_PrecededHighlyAmbiguousMovies =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.name" => "name",
    "D.clue" => "clue",
    "D.category" => "category",
    "D.formal_name" => "formal_name"
  ),
  Select(
    ContainsDict(
      StringConst(
        "ME_PrecedeTitle_Dict"
      ),
      LeftContextTok(
        GetCol(
          "D.name"
        ),
        IntConst(
          1
        )
      )
    ),
    Project(
      (
        "category" => "D.category",
        "clue" => "D.clue",
        "formal_name" => "D.formal_name",
        "name" => "D.name",
        "prov" => "D.prov",
        "text" => "D.text"
      ),
      $MET_HighlyAmbiguousMoviesUnfiltered
    )
  )
);

$ME_LA_CityOnlyRecsWorld =
Difference(
  Project(
    (
      "M.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "M.fullspan"
      ),
      $ME_LA_CityOnlyRecsWorldFirstFilter
    )
  ),
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_ForeignEntries
    )
  ));

$ME_LA_StateOnly =
Project(
  (
    "M.match" => "state",
    "M.fullspan" => "fullspan"
  ),
  Consolidate(
    "ExactMatch",
    GetCol(
      "M.fullspan"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "M.fullspan"
        ),
        GetCol(
          "R.fullspan"
        )
      ),
      Select(
        Equals(
          GetString(
            GetCol(
              "M.semantics"
            )
          ),
          StringConst(
            "state"
          )
        ),
        Project(
          (
            "fullspan" => "M.fullspan",
            "match" => "M.match",
            "semantics" => "M.semantics"
          ),
          $ME_LA_AllCityStateNamesMappedToAbbrv
        )
      ),
      Project(
        (
          "fullspan" => "R.fullspan"
        ),
        $ME_LA_StateOnlyRecs
      )
    )
  )
);

$MET_PrecededAndFollowedHighltyAmbiguousMovies =
Union(
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.clue" => "clue",
      "D.category" => "category",
      "D.formal_name" => "formal_name"
    ),
    Select(
      ContainsDict(
        StringConst(
          "ME_AfterHighlyAmbigTitle_Dict"
        ),
        RightContextTok(
          GetCol(
            "D.name"
          ),
          IntConst(
            1
          )
        )
      ),
      Project(
        (
          "category" => "D.category",
          "clue" => "D.clue",
          "formal_name" => "D.formal_name",
          "name" => "D.name",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_PrecededHighlyAmbiguousMovies
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.clue" => "clue",
      "D.category" => "category",
      "D.formal_name" => "formal_name"
    ),
    Select(
      MatchesRegex(
        RegexConst(
          /\s*$/,
          "JavaRegex"
        ),
        RightContext(
          GetCol(
            "D.name"
          ),
          IntConst(
            5
          )
        )
      ),
      Project(
        (
          "category" => "D.category",
          "clue" => "D.clue",
          "formal_name" => "D.formal_name",
          "name" => "D.name",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_PrecededHighlyAmbiguousMovies
      )
    )
  )
);

$ME_LA_CityOnlyRecsUnconsolidatedFirstFilter =
Difference(
  Project(
    (
      "M.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "M.fullspan"
      ),
      $ME_LA_CityOnlyRecsWorld
    )
  ),
  Project(
    (
      "M.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "M.fullspan"
      ),
      $ME_LA_PopulousNonUSCities
    )
  ));

$ME_LA_CountryOnlyUS_nocitystateorstate =
Difference(
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_CountryOnlyUS_nocitystate
    )
  ),
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_StateOnly
    )
  ));

$MET_HighlyAmbiguousMovies_Filtered =
Union(
  Project(
    (
      "FunctionCall41980" => "prov1",
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.clue" => "clue",
      "D.category" => "category",
      "D.formal_name" => "formal_name"
    ),
    ApplyFunc(
      StringConst(
        "1"
      ) => "FunctionCall41980",
      Project(
        (
          "category" => "D.category",
          "clue" => "D.clue",
          "formal_name" => "D.formal_name",
          "name" => "D.name",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_PrecededAndFollowedHighltyAmbiguousMovies
      )
    )
  ),
  Project(
    (
      "FunctionCall41982" => "prov1",
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.clue" => "clue",
      "D.category" => "category",
      "D.formal_name" => "formal_name"
    ),
    ApplyFunc(
      StringConst(
        "2"
      ) => "FunctionCall41982",
      Select(
        ContainsDict(
          StringConst(
            "ME_BeforeHighlyAmbigTitleOnly_Dict"
          ),
          LeftContextTok(
            GetCol(
              "D.name"
            ),
            IntConst(
              2
            )
          )
        ),
        Project(
          (
            "category" => "D.category",
            "clue" => "D.clue",
            "formal_name" => "D.formal_name",
            "name" => "D.name",
            "prov" => "D.prov",
            "text" => "D.text"
          ),
          $MET_HighlyAmbiguousMoviesUnfiltered
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall41984" => "prov1",
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.clue" => "clue",
      "D.category" => "category",
      "D.formal_name" => "formal_name"
    ),
    ApplyFunc(
      StringConst(
        "3"
      ) => "FunctionCall41984",
      Select(
        ContainsDict(
          StringConst(
            "ME_AfterHighlyAmbigTitleOnly_Dict"
          ),
          RightContextTok(
            GetCol(
              "D.name"
            ),
            IntConst(
              1
            )
          )
        ),
        Project(
          (
            "category" => "D.category",
            "clue" => "D.clue",
            "formal_name" => "D.formal_name",
            "name" => "D.name",
            "prov" => "D.prov",
            "text" => "D.text"
          ),
          $MET_HighlyAmbiguousMoviesUnfiltered
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall41986" => "prov1",
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.clue" => "clue",
      "D.category" => "category",
      "D.formal_name" => "formal_name"
    ),
    ApplyFunc(
      StringConst(
        "4"
      ) => "FunctionCall41986",
      Select(
        And(
          MatchesRegex(
            RegexConst(
              /\"|\'/,
              "SimpleRegex"
            ),
            LeftContextTok(
              GetCol(
                "D.name"
              ),
              IntConst(
                1
              )
            )
          ),
          MatchesRegex(
            RegexConst(
              /\"|\'/,
              "SimpleRegex"
            ),
            RightContextTok(
              GetCol(
                "D.name"
              ),
              IntConst(
                1
              )
            )
          )
        ),
        Project(
          (
            "category" => "D.category",
            "clue" => "D.clue",
            "formal_name" => "D.formal_name",
            "name" => "D.name",
            "prov" => "D.prov",
            "text" => "D.text"
          ),
          $MET_HighlyAmbiguousMoviesUnfiltered
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall41988" => "prov1",
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.clue" => "clue",
      "D.category" => "category",
      "D.formal_name" => "formal_name"
    ),
    ApplyFunc(
      StringConst(
        "5"
      ) => "FunctionCall41988",
      Select(
        And(
          Equals(
            GetString(
              GetCol(
                "D.categ_prov"
              )
            ),
            GetString(
              StringConst(
                "rs"
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "ME_NotBeforeTitleAdj"
              ),
              LeftContextTok(
                GetCol(
                  "D.name"
                ),
                IntConst(
                  1
                )
              )
            )
          )
        ),
        Project(
          (
            "categ_prov" => "D.categ_prov",
            "category" => "D.category",
            "clue" => "D.clue",
            "formal_name" => "D.formal_name",
            "name" => "D.name",
            "prov" => "D.prov",
            "text" => "D.text"
          ),
          $MET_HighlyAmbiguousMoviesUnfiltered
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall41990" => "prov1",
      "D.text" => "text",
      "D.prov" => "prov",
      "D.name" => "name",
      "D.clue" => "clue",
      "D.category" => "category",
      "D.formal_name" => "formal_name"
    ),
    ApplyFunc(
      StringConst(
        "6"
      ) => "FunctionCall41990",
      Select(
        ContainsRegex(
          RegexConst(
            /\b((Pixar)|(Disney))\b/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "D.text"
          )
        ),
        Project(
          (
            "category" => "D.category",
            "clue" => "D.clue",
            "formal_name" => "D.formal_name",
            "name" => "D.name",
            "prov" => "D.prov",
            "text" => "D.text"
          ),
          $MET_HighlyAmbiguousMoviesUnfiltered
        )
      )
    )
  )
);

$ME_LA_CityOnlyRecsUnconsolidated =
Difference(
  Project(
    (
      "M.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "M.fullspan"
      ),
      $ME_LA_CityOnlyRecsUnconsolidatedFirstFilter
    )
  ),
  Project(
    (
      "M.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "M.fullspan"
      ),
      $ME_LA_ForeignEntries
    )
  ));

$MET_AllBuzz =
Union(
  Project(
    (
      "D.name" => "name_span",
      "D.text" => "text",
      "D.category" => "category",
      "D.clue" => "clue",
      "D.formal_name" => "formal_name"
    ),
    Project(
      (
        "category" => "D.category",
        "clue" => "D.clue",
        "formal_name" => "D.formal_name",
        "name" => "D.name",
        "text" => "D.text"
      ),
      $MET_HighlyAmbiguousMovies_Filtered
    )
  ),
  Project(
    (
      "D.name" => "name_span",
      "D.text" => "text",
      "D.category" => "category",
      "D.clue" => "clue",
      "D.formal_name" => "formal_name"
    ),
    Project(
      (
        "category" => "D.category",
        "clue" => "D.clue",
        "formal_name" => "D.formal_name",
        "name" => "D.name",
        "text" => "D.text"
      ),
      $MET_AmbiguousMovies_Filtered
    )
  ),
  Project(
    (
      "D.name" => "name_span",
      "D.text" => "text",
      "D.category" => "category",
      "D.clue" => "clue",
      "D.formal_name" => "formal_name"
    ),
    Project(
      (
        "category" => "D.category",
        "clue" => "D.clue",
        "formal_name" => "D.formal_name",
        "name" => "D.name",
        "text" => "D.text"
      ),
      $MET_UnAmbiguousMoviesUnfiltered
    )
  )
);

$MET_AllBuzz_OnlyText =
Project(
  (
    "D.text" => "text"
  ),
  Project(
    (
      "text" => "D.text"
    ),
    $MET_AllBuzz
  )
);

$MET_AutomaticGenPatterns =
Union(
  Project(
    (
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall41992" => "category",
      "D.name_span" => "obj",
      "FunctionCall41994" => "polarity"
    ),
    ApplyFunc(
      StringConst(
        "positive"
      ) => "FunctionCall41994",
      ApplyFunc(
        StringConst(
          "trailer"
        ) => "FunctionCall41992",
        Select(
          MatchesRegex(
            RegexConst(
              /(I liked a @YouTube(.)*)/,
              "SimpleRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            GetCol(
              "D.text"
            )
          ),
          Project(
            (
              "formal_name" => "D.formal_name",
              "name_span" => "D.name_span",
              "text" => "D.text"
            ),
            $MET_AllBuzz
          )
        )
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall41996" => "category",
      "D.name_span" => "obj",
      "FunctionCall41998" => "polarity"
    ),
    ApplyFunc(
      StringConst(
        "positive"
      ) => "FunctionCall41998",
      ApplyFunc(
        StringConst(
          "watching movie"
        ) => "FunctionCall41996",
        Select(
          MatchesRegex(
            RegexConst(
              /(I\'m at(.)+(http)(.)+)/,
              "SimpleRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            GetCol(
              "D.text"
            )
          ),
          Project(
            (
              "formal_name" => "D.formal_name",
              "name_span" => "D.name_span",
              "text" => "D.text"
            ),
            $MET_AllBuzz
          )
        )
      )
    )
  )
);

$MET_NegativeTags_Movie_1X =
Consolidate(
  "ContainedWithin",
  GetCol(
    "text"
  ),
  Project(
    (
      "D.text" => "text",
      "match" => "match"
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_MET_NegativeTags_Movie_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
    )
  )
);

$MET_NegativeTags_Movie_X =
Project(
  (
    "D.text" => "text",
    "D.match" => "match",
    "A.name_span" => "name_span",
    "A.formal_name" => "formal_name"
  ),
  NLJoin(
    True(),
    Project(
      (
        "formal_name" => "A.formal_name",
        "name_span" => "A.name_span"
      ),
      $MET_AllBuzz
    ),
    Project(
      (
        "match" => "D.match",
        "text" => "D.text"
      ),
      $MET_NegativeTags_Movie_1X
    )
  )
);

$MET_OtherPositive_X =
Consolidate(
  "ContainedWithin",
  GetCol(
    "text"
  ),
  Project(
    (
      "D.text" => "text",
      "match" => "match"
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_MET_OtherPositive_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
    )
  )
);

$MET_PositiveTags_Movie_1X =
Consolidate(
  "ContainedWithin",
  GetCol(
    "text"
  ),
  Project(
    (
      "D.text" => "text",
      "match" => "match"
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_MET_PositiveTags_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
    )
  )
);

$MET_PositiveTags_Movie_X =
Project(
  (
    "D.text" => "text",
    "D.match" => "match",
    "A.name_span" => "name_span",
    "A.formal_name" => "formal_name"
  ),
  NLJoin(
    True(),
    Project(
      (
        "formal_name" => "A.formal_name",
        "name_span" => "A.name_span"
      ),
      $MET_AllBuzz
    ),
    Project(
      (
        "match" => "D.match",
        "text" => "D.text"
      ),
      $MET_PositiveTags_Movie_1X
    )
  )
);

$MET_PromotionalInBuzz_Output =
Project(
  (
    "D.text" => "text"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.text"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "P.text"
        ),
        GetCol(
          "D.text"
        )
      ),
      Project(
        (
          "text" => "P.text"
        ),
        $ME_PromotionalPost
      ),
      Project(
        (
          "text" => "D.text"
        ),
        $MET_AllBuzz
      )
    )
  )
);

$MET_SubsentenceDelimsUnconsolidated =
Union(
  Project(
    (
      "D.text" => "text",
      "FunctionCall43146" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "MET_ConjunctionsPreps_Dict"
      ) => "FunctionCall43146",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_MET_ConjunctionsPreps_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall43148" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "MET_Adversary_ConjunctionsPreps_Dict"
      ) => "FunctionCall43148",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_MET_Adversary_ConjunctionsPreps_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall43150" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "MET_Conditional_ConjunctionsPreps_Dict"
      ) => "FunctionCall43150",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_MET_Conditional_ConjunctionsPreps_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall43152" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "MET_ConjunctivePunct_Dict"
      ) => "FunctionCall43152",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_MET_ConjunctivePunct_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall43154" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "other_punct"
      ) => "FunctionCall43154",
      Regex(/$|:|(\.\s)|\!|\?]|^|-|(http:)|(\bRT\s)/, (0 => "match"), "DOTALL", "D.text",
        Project(
          (
            "text" => "D.text"
          ),
          $MET_AllBuzz_OnlyText
        )
      )
    )
  )
);

$MET_negativeClues_Adj_Unconsolidated =
Union(
  Project(
    (
      "D.text" => "text",
      "FunctionCall43156" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "bad"
      ) => "FunctionCall43156",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_BAD_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall43158" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "boring"
      ) => "FunctionCall43158",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_BORING_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall43160" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "ugly"
      ) => "FunctionCall43160",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_UGLY_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  )
);

$MET_negativeClues_Vb =
Consolidate(
  "ContainedWithin",
  GetCol(
    "match"
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall43162" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "dislike"
      ) => "FunctionCall43162",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_VB_DISLIKE_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  )
);

$MET_negativeClues_Vb_WithAttrs =
Project(
  (
    "B.text" => "text",
    "B.name_span" => "name_span",
    "B.formal_name" => "formal_name",
    "B.category" => "category",
    "B.clue" => "buzz_clue",
    "FunctionCall5494" => "sent_clue",
    "D.match" => "vb",
    "FunctionCall42000" => "polarity"
  ),
  ApplyFunc(
    StringConst(
      "positive"
    ) => "FunctionCall42000",
    ApplyFunc(
      CombineSpans(
        GetCol(
          "D.match"
        ),
        GetCol(
          "B.clue"
        )
      ) => "FunctionCall5494",
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "B.clue"
          ),
          GetCol(
            "D.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            3
          )
        ),
        Project(
          (
            "category" => "B.category",
            "clue" => "B.clue",
            "formal_name" => "B.formal_name",
            "name_span" => "B.name_span",
            "text" => "B.text"
          ),
          $MET_AllBuzz
        ),
        Project(
          (
            "match" => "D.match"
          ),
          $MET_negativeClues_Vb
        )
      )
    )
  )
);

$MET_positiveClues_Adj_Unconsolidated =
Union(
  Project(
    (
      "D.text" => "text",
      "FunctionCall43176" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "good"
      ) => "FunctionCall43176",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_GOOD_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall43178" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "exciting"
      ) => "FunctionCall43178",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_EXCITING_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall43180" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "interesting"
      ) => "FunctionCall43180",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_INTERESTING_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall43182" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "sexy"
      ) => "FunctionCall43182",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_SEXY_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall43184" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "beautiful"
      ) => "FunctionCall43184",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_BEAUTIFUL_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall43186" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "other"
      ) => "FunctionCall43186",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_MET_OtherPositive_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  )
);

$MET_positiveClues_Vb =
Consolidate(
  "ContainedWithin",
  GetCol(
    "match"
  ),
  Project(
    (
      "D.text" => "text",
      "FunctionCall43188" => "prov",
      "match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "like"
      ) => "FunctionCall43188",
      Project(
        (
          "text" => "D.text",
          "__sdm_match" => "match"
        ),
        $SDM_OUTPUT_VB_LIKE_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
      )
    )
  )
);

$MET_positiveClues_Vb_WithAttrs =
Project(
  (
    "B.text" => "text",
    "B.name_span" => "name_span",
    "B.formal_name" => "formal_name",
    "B.category" => "category",
    "B.clue" => "buzz_clue",
    "FunctionCall5425" => "sent_clue",
    "D.match" => "vb",
    "FunctionCall42002" => "polarity"
  ),
  ApplyFunc(
    StringConst(
      "positive"
    ) => "FunctionCall42002",
    ApplyFunc(
      CombineSpans(
        GetCol(
          "D.match"
        ),
        GetCol(
          "B.clue"
        )
      ) => "FunctionCall5425",
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "B.clue"
          ),
          GetCol(
            "D.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            3
          )
        ),
        Project(
          (
            "category" => "B.category",
            "clue" => "B.clue",
            "formal_name" => "B.formal_name",
            "name_span" => "B.name_span",
            "text" => "B.text"
          ),
          $MET_AllBuzz
        ),
        Project(
          (
            "match" => "D.match"
          ),
          $MET_positiveClues_Vb
        )
      )
    )
  )
);

$ME_ActionVerb_X =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_ActionVerb_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
  )
);

$ME_Buzz_Output =
Project(
  (
    "D.formal_name" => "formal_name",
    "D.name_span" => "name_span",
    "FunctionCall2014" => "name",
    "FunctionCall2024" => "category",
    "FunctionCall2034" => "category_clue"
  ),
  ApplyFunc(
    GetString(
      GetCol(
        "D.clue"
      )
    ) => "FunctionCall2034",
    ApplyFunc(
      GetString(
        GetCol(
          "D.category"
        )
      ) => "FunctionCall2024",
      ApplyFunc(
        GetString(
          GetCol(
            "D.name_span"
          )
        ) => "FunctionCall2014",
        Project(
          (
            "category" => "D.category",
            "clue" => "D.clue",
            "formal_name" => "D.formal_name",
            "name_span" => "D.name_span"
          ),
          $MET_AllBuzz
        )
      )
    )
  )
);

$ME_IntentVerb_X =
Project(
  (
    "D.text" => "text",
    "i_vb" => "i_vb"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "i_vb"
    ),
    $SDM_OUTPUT_ME_IntentVerb_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
  )
);

$ME_LA_CityOnlyRecsNotWrongState =
Difference(
  Project(
    (
      "M.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "M.fullspan"
      ),
      $ME_LA_CityOnlyRecsUnconsolidated
    )
  ),
  Project(
    (
      "M.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "M.fullspan"
      ),
      $ME_LA_StateOnlyRecs
    )
  ));

$ME_MovieAndIntentVerbFirstFilter =
Project(
  (
    "D.text" => "text",
    "D.name_span" => "name",
    "D.formal_name" => "formal_name",
    "I.i_vb" => "i_vb"
  ),
  SortMergeJoin(
    Overlaps(
      GetCol(
        "D.text"
      ),
      GetCol(
        "I.text"
      )
    ),
    Project(
      (
        "formal_name" => "D.formal_name",
        "name_span" => "D.name_span",
        "text" => "D.text"
      ),
      $MET_AllBuzz
    ),
    Project(
      (
        "i_vb" => "I.i_vb",
        "text" => "I.text"
      ),
      $ME_IntentVerb_X
    )
  )
);

$ME_Movie_Buzz =
Project(
  (
    "D.formal_name" => "movie_name",
    "FunctionCall2053" => "buzz_category"
  ),
  ApplyFunc(
    GetString(
      GetCol(
        "D.category"
      )
    ) => "FunctionCall2053",
    Project(
      (
        "category" => "D.category",
        "formal_name" => "D.formal_name"
      ),
      $ME_Buzz_Output
    )
  )
);

$ME_SingleActionHint_X =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_ME_SingleActionHint_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
  )
);

$ME_Topic_Output =
Union(
  Project(
    (
      "FunctionCall42004" => "topic",
      "M.name_span" => "clue_span",
      "FunctionCall42006" => "prov"
    ),
    ApplyFunc(
      StringConst(
        "Buzz"
      ) => "FunctionCall42006",
      ApplyFunc(
        StringConst(
          "Movies"
        ) => "FunctionCall42004",
        Project(
          (
            "name_span" => "M.name_span"
          ),
          $ME_Buzz_Output
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42008" => "topic",
      "M.match" => "clue_span",
      "M.prov" => "prov"
    ),
    ApplyFunc(
      StringConst(
        "Movies"
      ) => "FunctionCall42008",
      Project(
        (
          "match" => "M.match",
          "prov" => "M.prov"
        ),
        $ME_Topic_Keywords
      )
    )
  ),
  Project(
    (
      "FunctionCall42010" => "topic",
      "M.match" => "clue_span",
      "M.prov" => "prov"
    ),
    ApplyFunc(
      StringConst(
        "Movies"
      ) => "FunctionCall42010",
      Project(
        (
          "match" => "M.match",
          "prov" => "M.prov"
        ),
        $ME_Studios
      )
    )
  )
);

$MET_BetweenDelimsUnconsolidated =
Project(
  (
    "D.text" => "text",
    "FunctionCall3746" => "subsent",
    "D.match" => "delim1",
    "D.prov" => "prov1",
    "Other.match" => "delim2",
    "Other.prov" => "prov2"
  ),
  ApplyFunc(
    SpanBetween(
      GetCol(
        "D.match"
      ),
      GetCol(
        "Other.match"
      )
    ) => "FunctionCall3746",
    Select(
      Overlaps(
        GetCol(
          "D.text"
        ),
        GetCol(
          "Other.text"
        )
      ),
      SortMergeJoin(
        Follows(
          GetCol(
            "D.match"
          ),
          GetCol(
            "Other.match"
          ),
          IntConst(
            1
          ),
          IntConst(
            10000
          )
        ),
        Project(
          (
            "match" => "D.match",
            "prov" => "D.prov",
            "text" => "D.text"
          ),
          $MET_SubsentenceDelimsUnconsolidated
        ),
        Project(
          (
            "match" => "Other.match",
            "prov" => "Other.prov",
            "text" => "Other.text"
          ),
          $MET_SubsentenceDelimsUnconsolidated
        )
      )
    )
  )
);

$MET_SentenceSubBlocks =
Project(
  (
    "D.text" => "text",
    "D.subsent" => "block"
  ),
  Consolidate(
    "NotContainedWithin",
    GetCol(
      "D.subsent"
    ),
    Project(
      (
        "subsent" => "D.subsent",
        "text" => "D.text"
      ),
      $MET_BetweenDelimsUnconsolidated
    )
  )
);

$MET_negativeClues_Adj =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.match" => "match"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.match"
    ),
    Project(
      (
        "match" => "D.match",
        "prov" => "D.prov",
        "text" => "D.text"
      ),
      $MET_negativeClues_Adj_Unconsolidated
    )
  )
);

$MET_positiveClues_Adj =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.match" => "match"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.match"
    ),
    Project(
      (
        "match" => "D.match",
        "prov" => "D.prov",
        "text" => "D.text"
      ),
      $MET_positiveClues_Adj_Unconsolidated
    )
  )
);

$ME_LA_CityOnlyRecs =
Project(
  (
    "D.fullspan" => "fullspan"
  ),
  Consolidate(
    "ExactMatch",
    GetCol(
      "D.fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_CityOnlyRecsNotWrongState
    )
  )
);

$ME_MovieAndIntentVerb =
Project(
  (
    "D.text" => "text",
    "D.name" => "name",
    "D.formal_name" => "formal_name",
    "D.i_vb" => "i_vb",
    "A.match" => "a_vb"
  ),
  Select(
    Overlaps(
      GetCol(
        "D.text"
      ),
      GetCol(
        "A.text"
      )
    ),
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "A.match"
        ),
        GetCol(
          "D.i_vb"
        ),
        IntConst(
          0
        ),
        IntConst(
          3
        )
      ),
      Project(
        (
          "match" => "A.match",
          "text" => "A.text"
        ),
        $ME_ActionVerb_X
      ),
      Project(
        (
          "formal_name" => "D.formal_name",
          "i_vb" => "D.i_vb",
          "name" => "D.name",
          "text" => "D.text"
        ),
        $ME_MovieAndIntentVerbFirstFilter
      )
    )
  )
);

$ME_SingleActionHint =
Project(
  (
    "D.text" => "text",
    "D.name_span" => "name",
    "D.formal_name" => "formal_name",
    "A.match" => "a_vb"
  ),
  Select(
    Overlaps(
      GetCol(
        "A.text"
      ),
      GetCol(
        "D.text"
      )
    ),
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "A.match"
        ),
        GetCol(
          "D.name_span"
        ),
        IntConst(
          0
        ),
        IntConst(
          1
        )
      ),
      Project(
        (
          "match" => "A.match",
          "text" => "A.text"
        ),
        $ME_SingleActionHint_X
      ),
      Project(
        (
          "formal_name" => "D.formal_name",
          "name_span" => "D.name_span",
          "text" => "D.text"
        ),
        $MET_AllBuzz
      )
    )
  )
);

$MET_Clues_Adj_Unconsolidated =
Union(
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "FunctionCall42012" => "polarity",
      "D.match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "positive"
      ) => "FunctionCall42012",
      Project(
        (
          "match" => "D.match",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_positiveClues_Adj
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "FunctionCall42014" => "polarity",
      "D.match" => "match"
    ),
    ApplyFunc(
      StringConst(
        "negative"
      ) => "FunctionCall42014",
      Project(
        (
          "match" => "D.match",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_negativeClues_Adj
      )
    )
  )
);

$ME_AllIntentHints =
Union(
  Project(
    (
      "D.text" => "text",
      "D.name" => "name",
      "D.formal_name" => "formal_name"
    ),
    Project(
      (
        "formal_name" => "D.formal_name",
        "name" => "D.name",
        "text" => "D.text"
      ),
      $ME_MovieAndIntentVerb
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.name" => "name",
      "D.formal_name" => "formal_name"
    ),
    Project(
      (
        "formal_name" => "D.formal_name",
        "name" => "D.name",
        "text" => "D.text"
      ),
      $ME_SingleActionHint
    )
  )
);

$ME_AllIntent_Negation =
Select(
  Follows(
    GetCol(
      "match"
    ),
    GetCol(
      "name"
    ),
    IntConst(
      1
    ),
    IntConst(
      3
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.name" => "name",
      "D.formal_name" => "formal_name",
      "match" => "match"
    ),
    Dictionary("MET_Negation_Dict" => "Default" , "D.text", "match",
      Project(
        (
          "formal_name" => "D.formal_name",
          "name" => "D.name",
          "text" => "D.text"
        ),
        $ME_AllIntentHints
      )
    )
  )
);

$ME_LA_CityOnly =
Difference(
  Project(
    (
      "M.city" => "city",
      "M.state" => "state",
      "M.fullspan" => "fullspan"
    ),
    Consolidate(
      "ExactMatch",
      GetCol(
        "M.fullspan"
      ),
      SortMergeJoin(
        Overlaps(
          GetCol(
            "M.fullspan"
          ),
          GetCol(
            "R.fullspan"
          )
        ),
        Project(
          (
            "city" => "M.city",
            "fullspan" => "M.fullspan",
            "state" => "M.state"
          ),
          $ME_LA_CityStateFromMap
        ),
        Project(
          (
            "fullspan" => "R.fullspan"
          ),
          $ME_LA_CityOnlyRecs
        )
      )
    )
  ),
  Project(
    (
      "M.city" => "city",
      "M.state" => "state",
      "M.fullspan" => "fullspan"
    ),
    Consolidate(
      "ExactMatch",
      GetCol(
        "M.fullspan"
      ),
      Select(
        equalsIgnoreCase(
          GetString(
            GetCol(
              "M.city"
            )
          ),
          GetString(
            GetCol(
              "R.match"
            )
          )
        ),
        SortMergeJoin(
          Overlaps(
            GetCol(
              "R.fullspan"
            ),
            GetCol(
              "M.fullspan"
            )
          ),
          Project(
            (
              "fullspan" => "R.fullspan",
              "match" => "R.match"
            ),
            $ME_LA_CityNamesAmbiguous
          ),
          Project(
            (
              "city" => "M.city",
              "fullspan" => "M.fullspan",
              "state" => "M.state"
            ),
            $ME_LA_CityStateFromMap
          )
        )
      )
    )
  ));

$ME_LA_CountryOnlyUS =
Difference(
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_CountryOnlyUS_nocitystateorstate
    )
  ),
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_CityOnly
    )
  ));

$ME_PosIntentPrelim =
Difference(
  Project(
    (
      "D.text" => "text",
      "D.name" => "name",
      "D.formal_name" => "formal_name"
    ),
    Project(
      (
        "formal_name" => "D.formal_name",
        "name" => "D.name",
        "text" => "D.text"
      ),
      $ME_AllIntentHints
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.name" => "name",
      "D.formal_name" => "formal_name"
    ),
    Project(
      (
        "formal_name" => "D.formal_name",
        "name" => "D.name",
        "text" => "D.text"
      ),
      $ME_AllIntent_Negation
    )
  ));

$MET_Clues_Adj =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.polarity" => "polarity",
    "D.match" => "match"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.match"
    ),
    Project(
      (
        "match" => "D.match",
        "polarity" => "D.polarity",
        "prov" => "D.prov",
        "text" => "D.text"
      ),
      $MET_Clues_Adj_Unconsolidated
    )
  )
);

$MET_Clues_Adj_Category =
Union(
  Project(
    (
      "D.match" => "match",
      "D.polarity" => "polarity",
      "B.clue" => "clue",
      "FunctionCall5195" => "category",
      "B.formal_name" => "formal_name",
      "B.name_span" => "name_span",
      "B.text" => "text"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "movie"
        )
      ) => "FunctionCall5195",
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "B.clue"
          ),
          GetCol(
            "D.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            1
          )
        ),
        Select(
          Equals(
            GetString(
              GetCol(
                "B.category"
              )
            ),
            GetString(
              StringConst(
                "general"
              )
            )
          ),
          Project(
            (
              "category" => "B.category",
              "clue" => "B.clue",
              "formal_name" => "B.formal_name",
              "name_span" => "B.name_span",
              "text" => "B.text"
            ),
            $MET_AllBuzz
          )
        ),
        Project(
          (
            "match" => "D.match",
            "polarity" => "D.polarity"
          ),
          $MET_Clues_Adj
        )
      )
    )
  ),
  Project(
    (
      "D.match" => "match",
      "D.polarity" => "polarity",
      "B.clue" => "clue",
      "B.category" => "category",
      "B.formal_name" => "formal_name",
      "B.name_span" => "name_span",
      "B.text" => "text"
    ),
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "B.clue"
        ),
        GetCol(
          "D.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          1
        )
      ),
      Select(
        Not(
          Equals(
            GetString(
              GetCol(
                "B.category"
              )
            ),
            GetString(
              StringConst(
                "general"
              )
            )
          )
        ),
        Project(
          (
            "category" => "B.category",
            "clue" => "B.clue",
            "formal_name" => "B.formal_name",
            "name_span" => "B.name_span",
            "text" => "B.text"
          ),
          $MET_AllBuzz
        )
      ),
      Project(
        (
          "match" => "D.match",
          "polarity" => "D.polarity"
        ),
        $MET_Clues_Adj
      )
    )
  )
);

$MET_Clues_Adj_Movie =
Select(
  FollowsTok(
    GetCol(
      "match"
    ),
    GetCol(
      "obj"
    ),
    IntConst(
      0
    ),
    IntConst(
      1
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.polarity" => "polarity",
      "D.match" => "match",
      "FunctionCall43289" => "category",
      "obj" => "obj"
    ),
    ApplyFunc(
      StringConst(
        "movie"
      ) => "FunctionCall43289",
      Regex(/\b((movie)|(film))\b/, (0 => "obj"), "CASE_INSENSITIVE", "D.text",
        Project(
          (
            "match" => "D.match",
            "polarity" => "D.polarity",
            "text" => "D.text"
          ),
          $MET_Clues_Adj
        )
      )
    )
  )
);

$MET_Clues_Adj_Movie_WithAttrs =
Project(
  (
    "D.text" => "text",
    "D.polarity" => "polarity",
    "D.match" => "match",
    "B.name_span" => "name_span",
    "B.formal_name" => "formal_name",
    "D.obj" => "obj",
    "FunctionCall42016" => "category"
  ),
  ApplyFunc(
    StringConst(
      "movie"
    ) => "FunctionCall42016",
    NLJoin(
      True(),
      Project(
        (
          "formal_name" => "B.formal_name",
          "name_span" => "B.name_span"
        ),
        $MET_AllBuzz
      ),
      Project(
        (
          "match" => "D.match",
          "obj" => "D.obj",
          "polarity" => "D.polarity",
          "text" => "D.text"
        ),
        $MET_Clues_Adj_Movie
      )
    )
  )
);

$MET_Clues_IsPattern =
Select(
  FollowsTok(
    GetCol(
      "vb"
    ),
    GetCol(
      "match"
    ),
    IntConst(
      0
    ),
    IntConst(
      4
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "D.polarity" => "polarity",
      "D.match" => "match",
      "vb" => "vb"
    ),
    Regex(/\b((\'s)|(is)|(are)|(be)|(was)|(is going to be)|(is gonna be))\b/, (0 => "vb"), "CASE_INSENSITIVE", "D.text",
      Project(
        (
          "match" => "D.match",
          "polarity" => "D.polarity",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_Clues_Adj
      )
    )
  )
);

$MET_Clues_IsPattern_WithAttrs =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.polarity" => "polarity",
    "D.match" => "match",
    "D.vb" => "vb",
    "B.name_span" => "name_span",
    "B.formal_name" => "formal_name",
    "B.category" => "category",
    "B.clue" => "buzz_clue"
  ),
  SortMergeJoin(
    Overlaps(
      GetCol(
        "B.text"
      ),
      GetCol(
        "D.text"
      )
    ),
    Project(
      (
        "category" => "B.category",
        "clue" => "B.clue",
        "formal_name" => "B.formal_name",
        "name_span" => "B.name_span",
        "text" => "B.text"
      ),
      $MET_AllBuzz
    ),
    Project(
      (
        "match" => "D.match",
        "polarity" => "D.polarity",
        "prov" => "D.prov",
        "text" => "D.text",
        "vb" => "D.vb"
      ),
      $MET_Clues_IsPattern
    )
  )
);

$MET_Clues_LookPattern =
Select(
  FollowsTok(
    GetCol(
      "vb"
    ),
    GetCol(
      "match"
    ),
    IntConst(
      0
    ),
    IntConst(
      4
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.prov" => "prov",
      "D.polarity" => "polarity",
      "D.match" => "match",
      "vb" => "vb"
    ),
    FastRegex(/((look)|(seem)|(appear)|(might be))[A-Za-z]*/, (0 => "vb"), "CASE_INSENSITIVE", "D.text",
      Project(
        (
          "match" => "D.match",
          "polarity" => "D.polarity",
          "prov" => "D.prov",
          "text" => "D.text"
        ),
        $MET_Clues_Adj
      )
    )
  )
);

$MET_Clues_LookPattern_WithAttrs =
Project(
  (
    "D.text" => "text",
    "D.prov" => "prov",
    "D.polarity" => "polarity",
    "D.match" => "match",
    "D.vb" => "vb",
    "B.name_span" => "name_span",
    "B.formal_name" => "formal_name",
    "B.category" => "category",
    "B.clue" => "buzz_clue"
  ),
  SortMergeJoin(
    Overlaps(
      GetCol(
        "B.text"
      ),
      GetCol(
        "D.text"
      )
    ),
    Project(
      (
        "category" => "B.category",
        "clue" => "B.clue",
        "formal_name" => "B.formal_name",
        "name_span" => "B.name_span",
        "text" => "B.text"
      ),
      $MET_AllBuzz
    ),
    Project(
      (
        "match" => "D.match",
        "polarity" => "D.polarity",
        "prov" => "D.prov",
        "text" => "D.text",
        "vb" => "D.vb"
      ),
      $MET_Clues_LookPattern
    )
  )
);

$ME_Intent =
Project(
  (
    "D.text" => "text",
    "FunctionCall2709" => "polarity",
    "D.name" => "name_span",
    "FunctionCall2723" => "name",
    "D.formal_name" => "formal_name"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.text"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.name"
        )
      ) => "FunctionCall2723",
      ApplyFunc(
        GetString(
          StringConst(
            "positive"
          )
        ) => "FunctionCall2709",
        Project(
          (
            "formal_name" => "D.formal_name",
            "name" => "D.name",
            "text" => "D.text"
          ),
          $ME_PosIntentPrelim
        )
      )
    )
  )
);

$ME_Intent_Output =
Project(
  (
    "D.polarity" => "polarity",
    "D.name_span" => "movie_span",
    "D.name" => "name",
    "D.formal_name" => "formal_name"
  ),
  Project(
    (
      "formal_name" => "D.formal_name",
      "name" => "D.name",
      "name_span" => "D.name_span",
      "polarity" => "D.polarity"
    ),
    $ME_Intent
  )
);

$ME_LA_CityORCityState =
Union(
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_CityOnly
    )
  ),
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_CityState
    )
  ),
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_StateOnly
    )
  )
);

$ME_LA_Not_CityStateUnconsolidatedFirstFilter =
Difference(
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_AllNamesConsolidated
    )
  ),
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_CityORCityState
    )
  ));

$ME_Movie_Intent =
Project(
  (
    "D.polarity" => "polarity",
    "D.formal_name" => "movie_name"
  ),
  Project(
    (
      "formal_name" => "D.formal_name",
      "polarity" => "D.polarity"
    ),
    $ME_Intent_Output
  )
);

$MET_Clues_IsPattern2WithAttrs =
Union(
  Select(
    And(
      FollowsTok(
        GetCol(
          "match"
        ),
        GetCol(
          "vb"
        ),
        IntConst(
          0
        ),
        IntConst(
          2
        )
      ),
      FollowsTok(
        GetCol(
          "name_span"
        ),
        GetCol(
          "match"
        ),
        IntConst(
          0
        ),
        IntConst(
          20
        )
      )
    ),
    Project(
      (
        "FunctionCall43303" => "category",
        "D.text" => "text",
        "D.polarity" => "polarity",
        "D.formal_name" => "formal_name",
        "D.match" => "vb",
        "D.name_span" => "name_span",
        "match" => "match"
      ),
      ApplyFunc(
        StringConst(
          "movie"
        ) => "FunctionCall43303",
        Regex(/\b((movie)|(film)|(it))\b/, (0 => "match"), "CASE_INSENSITIVE", "D.text",
          Project(
            (
              "formal_name" => "D.formal_name",
              "match" => "D.match",
              "name_span" => "D.name_span",
              "polarity" => "D.polarity",
              "text" => "D.text"
            ),
            $MET_Clues_IsPattern_WithAttrs
          )
        )
      )
    )
  ),
  Select(
    And(
      FollowsTok(
        GetCol(
          "match"
        ),
        GetCol(
          "vb"
        ),
        IntConst(
          0
        ),
        IntConst(
          2
        )
      ),
      FollowsTok(
        GetCol(
          "name_span"
        ),
        GetCol(
          "match"
        ),
        IntConst(
          0
        ),
        IntConst(
          20
        )
      )
    ),
    Project(
      (
        "FunctionCall43305" => "category",
        "D.text" => "text",
        "D.polarity" => "polarity",
        "D.formal_name" => "formal_name",
        "D.match" => "vb",
        "D.name_span" => "name_span",
        "match" => "match"
      ),
      ApplyFunc(
        StringConst(
          "cast"
        ) => "FunctionCall43305",
        Regex(/\b((he)|(she))\b/, (0 => "match"), "CASE_INSENSITIVE", "D.text",
          Project(
            (
              "formal_name" => "D.formal_name",
              "match" => "D.match",
              "name_span" => "D.name_span",
              "polarity" => "D.polarity",
              "text" => "D.text"
            ),
            $MET_Clues_IsPattern_WithAttrs
          )
        )
      )
    )
  ),
  Select(
    And(
      FollowsTok(
        GetCol(
          "match"
        ),
        GetCol(
          "vb"
        ),
        IntConst(
          0
        ),
        IntConst(
          2
        )
      ),
      FollowsTok(
        GetCol(
          "name_span"
        ),
        GetCol(
          "match"
        ),
        IntConst(
          0
        ),
        IntConst(
          20
        )
      )
    ),
    Project(
      (
        "FunctionCall43307" => "category",
        "D.text" => "text",
        "D.polarity" => "polarity",
        "D.formal_name" => "formal_name",
        "D.match" => "vb",
        "D.name_span" => "name_span",
        "match" => "match"
      ),
      ApplyFunc(
        StringConst(
          "movie"
        ) => "FunctionCall43307",
        Regex(/\b((movie)|(film)|(it))\b/, (0 => "match"), "CASE_INSENSITIVE", "D.text",
          Project(
            (
              "formal_name" => "D.formal_name",
              "match" => "D.match",
              "name_span" => "D.name_span",
              "polarity" => "D.polarity",
              "text" => "D.text"
            ),
            $MET_Clues_LookPattern_WithAttrs
          )
        )
      )
    )
  ),
  Select(
    And(
      FollowsTok(
        GetCol(
          "match"
        ),
        GetCol(
          "vb"
        ),
        IntConst(
          0
        ),
        IntConst(
          1
        )
      ),
      FollowsTok(
        GetCol(
          "name_span"
        ),
        GetCol(
          "match"
        ),
        IntConst(
          0
        ),
        IntConst(
          20
        )
      )
    ),
    Project(
      (
        "FunctionCall43309" => "category",
        "D.text" => "text",
        "D.polarity" => "polarity",
        "D.formal_name" => "formal_name",
        "D.match" => "vb",
        "D.name_span" => "name_span",
        "match" => "match"
      ),
      ApplyFunc(
        StringConst(
          "cast"
        ) => "FunctionCall43309",
        Regex(/\b((he)|(she))\b/, (0 => "match"), "CASE_INSENSITIVE", "D.text",
          Project(
            (
              "formal_name" => "D.formal_name",
              "match" => "D.match",
              "name_span" => "D.name_span",
              "polarity" => "D.polarity",
              "text" => "D.text"
            ),
            $MET_Clues_LookPattern_WithAttrs
          )
        )
      )
    )
  )
);

$MET_Clues_IsPattern_Final =
Union(
  Project(
    (
      "FunctionCall42018" => "final_prov",
      "D.text" => "text",
      "FunctionCall4705" => "sent_clue",
      "D.polarity" => "polarity",
      "D.formal_name" => "formal_name",
      "D.buzz_clue" => "obj",
      "FunctionCall4736" => "category",
      "D.name_span" => "name_span",
      "D.vb" => "vb",
      "D.match" => "match"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.category"
        )
      ) => "FunctionCall4736",
      ApplyFunc(
        CombineSpans(
          GetCol(
            "D.vb"
          ),
          GetCol(
            "D.match"
          )
        ) => "FunctionCall4705",
        ApplyFunc(
          StringConst(
            "1"
          ) => "FunctionCall42018",
          Select(
            And(
              FollowsTok(
                GetCol(
                  "D.buzz_clue"
                ),
                GetCol(
                  "D.vb"
                ),
                IntConst(
                  0
                ),
                IntConst(
                  3
                )
              ),
              Not(
                Equals(
                  GetString(
                    GetCol(
                      "D.category"
                    )
                  ),
                  GetString(
                    StringConst(
                      "general"
                    )
                  )
                )
              )
            ),
            Project(
              (
                "buzz_clue" => "D.buzz_clue",
                "category" => "D.category",
                "formal_name" => "D.formal_name",
                "match" => "D.match",
                "name_span" => "D.name_span",
                "polarity" => "D.polarity",
                "text" => "D.text",
                "vb" => "D.vb"
              ),
              $MET_Clues_IsPattern_WithAttrs
            )
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42020" => "final_prov",
      "D.text" => "text",
      "FunctionCall4799" => "sent_clue",
      "D.polarity" => "polarity",
      "D.formal_name" => "formal_name",
      "D.buzz_clue" => "obj",
      "FunctionCall4828" => "category",
      "D.name_span" => "name_span",
      "D.vb" => "vb",
      "D.match" => "match"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "movie"
        )
      ) => "FunctionCall4828",
      ApplyFunc(
        CombineSpans(
          GetCol(
            "D.vb"
          ),
          GetCol(
            "D.match"
          )
        ) => "FunctionCall4799",
        ApplyFunc(
          StringConst(
            "2"
          ) => "FunctionCall42020",
          Select(
            And(
              Equals(
                GetString(
                  GetCol(
                    "D.category"
                  )
                ),
                GetString(
                  StringConst(
                    "general"
                  )
                )
              ),
              FollowsTok(
                GetCol(
                  "D.name_span"
                ),
                GetCol(
                  "D.vb"
                ),
                IntConst(
                  0
                ),
                IntConst(
                  3
                )
              )
            ),
            Project(
              (
                "buzz_clue" => "D.buzz_clue",
                "category" => "D.category",
                "formal_name" => "D.formal_name",
                "match" => "D.match",
                "name_span" => "D.name_span",
                "polarity" => "D.polarity",
                "text" => "D.text",
                "vb" => "D.vb"
              ),
              $MET_Clues_IsPattern_WithAttrs
            )
          )
        )
      )
    )
  )
);

$MET_Clues_LookPattern_Final =
Union(
  Project(
    (
      "FunctionCall42022" => "final_prov",
      "D.text" => "text",
      "FunctionCall4375" => "sent_clue",
      "D.polarity" => "polarity",
      "D.formal_name" => "formal_name",
      "D.buzz_clue" => "obj",
      "FunctionCall4406" => "category",
      "D.name_span" => "name_span",
      "D.vb" => "vb",
      "D.match" => "match"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.category"
        )
      ) => "FunctionCall4406",
      ApplyFunc(
        CombineSpans(
          GetCol(
            "D.vb"
          ),
          GetCol(
            "D.match"
          )
        ) => "FunctionCall4375",
        ApplyFunc(
          StringConst(
            "1"
          ) => "FunctionCall42022",
          Select(
            And(
              FollowsTok(
                GetCol(
                  "D.buzz_clue"
                ),
                GetCol(
                  "D.vb"
                ),
                IntConst(
                  0
                ),
                IntConst(
                  3
                )
              ),
              Not(
                Equals(
                  GetString(
                    GetCol(
                      "D.category"
                    )
                  ),
                  GetString(
                    StringConst(
                      "general"
                    )
                  )
                )
              )
            ),
            Project(
              (
                "buzz_clue" => "D.buzz_clue",
                "category" => "D.category",
                "formal_name" => "D.formal_name",
                "match" => "D.match",
                "name_span" => "D.name_span",
                "polarity" => "D.polarity",
                "text" => "D.text",
                "vb" => "D.vb"
              ),
              $MET_Clues_LookPattern_WithAttrs
            )
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42024" => "final_prov",
      "D.text" => "text",
      "FunctionCall4469" => "sent_clue",
      "D.polarity" => "polarity",
      "D.formal_name" => "formal_name",
      "D.buzz_clue" => "obj",
      "FunctionCall4498" => "category",
      "D.name_span" => "name_span",
      "D.vb" => "vb",
      "D.match" => "match"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "movie"
        )
      ) => "FunctionCall4498",
      ApplyFunc(
        CombineSpans(
          GetCol(
            "D.vb"
          ),
          GetCol(
            "D.match"
          )
        ) => "FunctionCall4469",
        ApplyFunc(
          StringConst(
            "2"
          ) => "FunctionCall42024",
          Select(
            And(
              Equals(
                GetString(
                  GetCol(
                    "D.category"
                  )
                ),
                GetString(
                  StringConst(
                    "general"
                  )
                )
              ),
              FollowsTok(
                GetCol(
                  "D.name_span"
                ),
                GetCol(
                  "D.vb"
                ),
                IntConst(
                  0
                ),
                IntConst(
                  3
                )
              )
            ),
            Project(
              (
                "buzz_clue" => "D.buzz_clue",
                "category" => "D.category",
                "formal_name" => "D.formal_name",
                "match" => "D.match",
                "name_span" => "D.name_span",
                "polarity" => "D.polarity",
                "text" => "D.text",
                "vb" => "D.vb"
              ),
              $MET_Clues_LookPattern_WithAttrs
            )
          )
        )
      )
    )
  )
);

$ME_LA_Not_CityStateUnconsolidated =
Difference(
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_Not_CityStateUnconsolidatedFirstFilter
    )
  ),
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_ForeignEntries
    )
  ));

$MET_All_SentimentUnfiltered =
Union(
  Project(
    (
      "FunctionCall42026" => "prov",
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall5550" => "category",
      "D.match" => "obj",
      "D.polarity" => "polarity",
      "FunctionCall5575" => "sent_clue",
      "D.vb" => "vb"
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "D.match"
        ),
        GetCol(
          "D.vb"
        )
      ) => "FunctionCall5575",
      ApplyFunc(
        GetString(
          GetCol(
            "D.category"
          )
        ) => "FunctionCall5550",
        ApplyFunc(
          StringConst(
            "ispattern2attrs"
          ) => "FunctionCall42026",
          Project(
            (
              "category" => "D.category",
              "formal_name" => "D.formal_name",
              "match" => "D.match",
              "name_span" => "D.name_span",
              "polarity" => "D.polarity",
              "text" => "D.text",
              "vb" => "D.vb"
            ),
            $MET_Clues_IsPattern2WithAttrs
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42028" => "prov",
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall5614" => "category",
      "D.obj" => "obj",
      "D.polarity" => "polarity",
      "FunctionCall5637" => "sent_clue",
      "D.match" => "vb"
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "D.match"
        ),
        GetCol(
          "D.obj"
        )
      ) => "FunctionCall5637",
      ApplyFunc(
        GetString(
          StringConst(
            "movie"
          )
        ) => "FunctionCall5614",
        ApplyFunc(
          StringConst(
            "clues_adj_movie"
          ) => "FunctionCall42028",
          Project(
            (
              "formal_name" => "D.formal_name",
              "match" => "D.match",
              "name_span" => "D.name_span",
              "obj" => "D.obj",
              "polarity" => "D.polarity",
              "text" => "D.text"
            ),
            $MET_Clues_Adj_Movie_WithAttrs
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42030" => "prov",
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall5678" => "category",
      "D.clue" => "obj",
      "D.polarity" => "polarity",
      "FunctionCall5703" => "sent_clue",
      "D.clue" => "vb"
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "D.match"
        ),
        GetCol(
          "D.clue"
        )
      ) => "FunctionCall5703",
      ApplyFunc(
        GetString(
          GetCol(
            "D.category"
          )
        ) => "FunctionCall5678",
        ApplyFunc(
          StringConst(
            "clues_adj_category"
          ) => "FunctionCall42030",
          Project(
            (
              "category" => "D.category",
              "clue" => "D.clue",
              "formal_name" => "D.formal_name",
              "match" => "D.match",
              "name_span" => "D.name_span",
              "polarity" => "D.polarity",
              "text" => "D.text"
            ),
            $MET_Clues_Adj_Category
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42032" => "prov",
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall5744" => "category",
      "D.obj" => "obj",
      "D.polarity" => "polarity",
      "D.sent_clue" => "sent_clue",
      "D.vb" => "vb"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.category"
        )
      ) => "FunctionCall5744",
      ApplyFunc(
        StringConst(
          "lookpattern"
        ) => "FunctionCall42032",
        Project(
          (
            "category" => "D.category",
            "formal_name" => "D.formal_name",
            "name_span" => "D.name_span",
            "obj" => "D.obj",
            "polarity" => "D.polarity",
            "sent_clue" => "D.sent_clue",
            "text" => "D.text",
            "vb" => "D.vb"
          ),
          $MET_Clues_LookPattern_Final
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42034" => "prov",
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall5800" => "category",
      "D.obj" => "obj",
      "D.polarity" => "polarity",
      "D.sent_clue" => "sent_clue",
      "D.vb" => "vb"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.category"
        )
      ) => "FunctionCall5800",
      ApplyFunc(
        StringConst(
          "ispattern"
        ) => "FunctionCall42034",
        Project(
          (
            "category" => "D.category",
            "formal_name" => "D.formal_name",
            "name_span" => "D.name_span",
            "obj" => "D.obj",
            "polarity" => "D.polarity",
            "sent_clue" => "D.sent_clue",
            "text" => "D.text",
            "vb" => "D.vb"
          ),
          $MET_Clues_IsPattern_Final
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42036" => "prov",
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall5856" => "category",
      "D.buzz_clue" => "obj",
      "D.polarity" => "polarity",
      "D.sent_clue" => "sent_clue",
      "D.vb" => "vb"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.category"
        )
      ) => "FunctionCall5856",
      ApplyFunc(
        StringConst(
          "hatepattern"
        ) => "FunctionCall42036",
        Project(
          (
            "buzz_clue" => "D.buzz_clue",
            "category" => "D.category",
            "formal_name" => "D.formal_name",
            "name_span" => "D.name_span",
            "polarity" => "D.polarity",
            "sent_clue" => "D.sent_clue",
            "text" => "D.text",
            "vb" => "D.vb"
          ),
          $MET_negativeClues_Vb_WithAttrs
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42038" => "prov",
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall5912" => "category",
      "D.buzz_clue" => "obj",
      "D.polarity" => "polarity",
      "D.sent_clue" => "sent_clue",
      "D.vb" => "vb"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.category"
        )
      ) => "FunctionCall5912",
      ApplyFunc(
        StringConst(
          "lovepattern"
        ) => "FunctionCall42038",
        Project(
          (
            "buzz_clue" => "D.buzz_clue",
            "category" => "D.category",
            "formal_name" => "D.formal_name",
            "name_span" => "D.name_span",
            "polarity" => "D.polarity",
            "sent_clue" => "D.sent_clue",
            "text" => "D.text",
            "vb" => "D.vb"
          ),
          $MET_positiveClues_Vb_WithAttrs
        )
      )
    )
  )
);

$MET_All_Sentiment_InBlock =
Project(
  (
    "D.prov" => "prov",
    "D.text" => "text",
    "D.name_span" => "name_span",
    "D.formal_name" => "formal_name",
    "D.category" => "category",
    "D.obj" => "obj",
    "D.polarity" => "polarity",
    "D.sent_clue" => "sent_clue",
    "D.vb" => "vb",
    "B.block" => "block"
  ),
  Select(
    Overlaps(
      GetCol(
        "B.block"
      ),
      GetCol(
        "D.vb"
      )
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "B.block"
        ),
        GetCol(
          "D.obj"
        )
      ),
      Project(
        (
          "block" => "B.block"
        ),
        $MET_SentenceSubBlocks
      ),
      Project(
        (
          "category" => "D.category",
          "formal_name" => "D.formal_name",
          "name_span" => "D.name_span",
          "obj" => "D.obj",
          "polarity" => "D.polarity",
          "prov" => "D.prov",
          "sent_clue" => "D.sent_clue",
          "text" => "D.text",
          "vb" => "D.vb"
        ),
        $MET_All_SentimentUnfiltered
      )
    )
  )
);

$MET_All_Sentiment_Unconsolidated =
Union(
  Project(
    (
      "FunctionCall42040" => "prov",
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall6068" => "category",
      "D.name_span" => "obj",
      "FunctionCall6080" => "polarity"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "positive"
        )
      ) => "FunctionCall6080",
      ApplyFunc(
        GetString(
          StringConst(
            "movie"
          )
        ) => "FunctionCall6068",
        ApplyFunc(
          StringConst(
            "tags"
          ) => "FunctionCall42040",
          Project(
            (
              "formal_name" => "D.formal_name",
              "name_span" => "D.name_span",
              "text" => "D.text"
            ),
            $MET_PositiveTags_Movie_X
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42042" => "prov",
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall6099" => "category",
      "D.name_span" => "obj",
      "FunctionCall6111" => "polarity"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "negative"
        )
      ) => "FunctionCall6111",
      ApplyFunc(
        GetString(
          StringConst(
            "movie"
          )
        ) => "FunctionCall6099",
        ApplyFunc(
          StringConst(
            "tags"
          ) => "FunctionCall42042",
          Project(
            (
              "formal_name" => "D.formal_name",
              "name_span" => "D.name_span",
              "text" => "D.text"
            ),
            $MET_NegativeTags_Movie_X
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42044" => "prov",
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall6132" => "category",
      "D.name_span" => "obj",
      "FunctionCall6148" => "polarity"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.polarity"
        )
      ) => "FunctionCall6148",
      ApplyFunc(
        GetString(
          GetCol(
            "D.category"
          )
        ) => "FunctionCall6132",
        ApplyFunc(
          StringConst(
            "pattern"
          ) => "FunctionCall42044",
          Project(
            (
              "category" => "D.category",
              "formal_name" => "D.formal_name",
              "name_span" => "D.name_span",
              "polarity" => "D.polarity",
              "text" => "D.text"
            ),
            $MET_All_Sentiment_InBlock
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42046" => "prov",
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall6171" => "category",
      "D.name_span" => "obj",
      "FunctionCall6187" => "polarity"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.polarity"
        )
      ) => "FunctionCall6187",
      ApplyFunc(
        GetString(
          GetCol(
            "D.category"
          )
        ) => "FunctionCall6171",
        ApplyFunc(
          StringConst(
            "agp"
          ) => "FunctionCall42046",
          Project(
            (
              "category" => "D.category",
              "formal_name" => "D.formal_name",
              "name_span" => "D.name_span",
              "polarity" => "D.polarity",
              "text" => "D.text"
            ),
            $MET_AutomaticGenPatterns
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42048" => "prov",
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall6208" => "category",
      "D.name_span" => "obj",
      "FunctionCall6222" => "polarity"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.polarity"
        )
      ) => "FunctionCall6222",
      ApplyFunc(
        GetString(
          StringConst(
            "intent"
          )
        ) => "FunctionCall6208",
        ApplyFunc(
          StringConst(
            "intent"
          ) => "FunctionCall42048",
          Project(
            (
              "formal_name" => "D.formal_name",
              "name_span" => "D.name_span",
              "polarity" => "D.polarity",
              "text" => "D.text"
            ),
            $ME_Intent
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42050" => "prov",
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall6243" => "category",
      "D.name_span" => "obj",
      "FunctionCall6255" => "polarity"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "positive"
        )
      ) => "FunctionCall6255",
      ApplyFunc(
        GetString(
          StringConst(
            "movie"
          )
        ) => "FunctionCall6243",
        ApplyFunc(
          StringConst(
            "op"
          ) => "FunctionCall42050",
          HashJoin(
            Equals(
              GetString(
                GetCol(
                  "D.text"
                )
              ),
              GetString(
                GetCol(
                  "OP.text"
                )
              )
            ),
            Project(
              (
                "formal_name" => "D.formal_name",
                "name_span" => "D.name_span",
                "text" => "D.text"
              ),
              $MET_AllBuzz
            ),
            Project(
              (
                "text" => "OP.text"
              ),
              $MET_OtherPositive_X
            )
          )
        )
      )
    )
  )
);

$ME_LA_Not_CityState =
Difference(
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Consolidate(
      "ExactMatch",
      GetCol(
        "D.fullspan"
      ),
      Project(
        (
          "fullspan" => "D.fullspan"
        ),
        $ME_LA_Not_CityStateUnconsolidated
      )
    )
  ),
  Project(
    (
      "D.fullspan" => "fullspan"
    ),
    Project(
      (
        "fullspan" => "D.fullspan"
      ),
      $ME_LA_Abbrv_USCountry
    )
  ));

$MappedAddressOutput =
Union(
  Project(
    (
      "FunctionCall42052" => "prov",
      "FunctionCall36472" => "city",
      "FunctionCall36490" => "state",
      "FunctionCall36502" => "country",
      "D.fullspan" => "fullspan",
      "FunctionCall36516" => "fulltext",
      "FunctionCall36524" => "hasCityState"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "true"
        )
      ) => "FunctionCall36524",
      ApplyFunc(
        GetString(
          GetCol(
            "D.fullspan"
          )
        ) => "FunctionCall36516",
        ApplyFunc(
          GetString(
            StringConst(
              "US"
            )
          ) => "FunctionCall36502",
          ApplyFunc(
            GetString(
              toUpperCase(
                GetString(
                  GetCol(
                    "D.state"
                  )
                )
              )
            ) => "FunctionCall36490",
            ApplyFunc(
              GetString(
                normalizeKeepAlphaNumeric(
                  GetString(
                    GetCol(
                      "D.city"
                    )
                  )
                )
              ) => "FunctionCall36472",
              ApplyFunc(
                StringConst(
                  "citystate"
                ) => "FunctionCall42052",
                Project(
                  (
                    "city" => "D.city",
                    "fullspan" => "D.fullspan",
                    "state" => "D.state"
                  ),
                  $ME_LA_CityState
                )
              )
            )
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42054" => "prov",
      "FunctionCall36540" => "city",
      "FunctionCall36558" => "state",
      "FunctionCall36570" => "country",
      "D.fullspan" => "fullspan",
      "FunctionCall36584" => "fulltext",
      "FunctionCall36592" => "hasCityState"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "false"
        )
      ) => "FunctionCall36592",
      ApplyFunc(
        GetString(
          GetCol(
            "D.fullspan"
          )
        ) => "FunctionCall36584",
        ApplyFunc(
          GetString(
            StringConst(
              "US"
            )
          ) => "FunctionCall36570",
          ApplyFunc(
            GetString(
              toUpperCase(
                GetString(
                  GetCol(
                    "D.state"
                  )
                )
              )
            ) => "FunctionCall36558",
            ApplyFunc(
              GetString(
                normalizeKeepAlphaNumeric(
                  GetString(
                    GetCol(
                      "D.city"
                    )
                  )
                )
              ) => "FunctionCall36540",
              ApplyFunc(
                StringConst(
                  "cityonly"
                ) => "FunctionCall42054",
                Project(
                  (
                    "city" => "D.city",
                    "fullspan" => "D.fullspan",
                    "state" => "D.state"
                  ),
                  $ME_LA_CityOnly
                )
              )
            )
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42056" => "prov",
      "FunctionCall36602" => "city",
      "FunctionCall36608" => "state",
      "FunctionCall36614" => "country",
      "D.fullspan" => "fullspan",
      "FunctionCall36628" => "fulltext",
      "FunctionCall36636" => "hasCityState"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "false"
        )
      ) => "FunctionCall36636",
      ApplyFunc(
        GetString(
          GetCol(
            "D.fullspan"
          )
        ) => "FunctionCall36628",
        ApplyFunc(
          GetString(
            StringConst(
              ""
            )
          ) => "FunctionCall36614",
          ApplyFunc(
            GetString(
              StringConst(
                ""
              )
            ) => "FunctionCall36608",
            ApplyFunc(
              GetString(
                StringConst(
                  ""
                )
              ) => "FunctionCall36602",
              ApplyFunc(
                StringConst(
                  "notcitystate"
                ) => "FunctionCall42056",
                Project(
                  (
                    "fullspan" => "D.fullspan"
                  ),
                  $ME_LA_Not_CityState
                )
              )
            )
          )
        )
      )
    )
  ),
  Project(
    (
      "D.prov" => "prov",
      "FunctionCall36656" => "city",
      "FunctionCall36668" => "state",
      "FunctionCall36680" => "country",
      "D.fullspan" => "fullspan",
      "FunctionCall36700" => "fulltext",
      "FunctionCall36708" => "hasCityState"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "false"
        )
      ) => "FunctionCall36708",
      ApplyFunc(
        GetString(
          GetCol(
            "D.fullspan"
          )
        ) => "FunctionCall36700",
        ApplyFunc(
          GetString(
            normalizeKeepAlphaNumeric(
              GetString(
                GetCol(
                  "D.country"
                )
              )
            )
          ) => "FunctionCall36680",
          ApplyFunc(
            GetString(
              StringConst(
                ""
              )
            ) => "FunctionCall36668",
            ApplyFunc(
              GetString(
                normalizeKeepAlphaNumeric(
                  GetString(
                    GetCol(
                      "D.city"
                    )
                  )
                )
              ) => "FunctionCall36656",
              Project(
                (
                  "city" => "D.city",
                  "country" => "D.country",
                  "fullspan" => "D.fullspan",
                  "prov" => "D.prov"
                ),
                $ME_LA_ForeignEntries
              )
            )
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42058" => "prov",
      "FunctionCall36718" => "city",
      "FunctionCall36730" => "state",
      "FunctionCall36742" => "country",
      "D.fullspan" => "fullspan",
      "FunctionCall36756" => "fulltext",
      "FunctionCall36764" => "hasCityState"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "false"
        )
      ) => "FunctionCall36764",
      ApplyFunc(
        GetString(
          GetCol(
            "D.fullspan"
          )
        ) => "FunctionCall36756",
        ApplyFunc(
          GetString(
            StringConst(
              "US"
            )
          ) => "FunctionCall36742",
          ApplyFunc(
            GetString(
              toUpperCase(
                GetString(
                  GetCol(
                    "D.state"
                  )
                )
              )
            ) => "FunctionCall36730",
            ApplyFunc(
              GetString(
                StringConst(
                  ""
                )
              ) => "FunctionCall36718",
              ApplyFunc(
                StringConst(
                  "stateonly"
                ) => "FunctionCall42058",
                Project(
                  (
                    "fullspan" => "D.fullspan",
                    "state" => "D.state"
                  ),
                  $ME_LA_StateOnly
                )
              )
            )
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42060" => "prov",
      "FunctionCall36774" => "city",
      "FunctionCall36780" => "state",
      "FunctionCall36786" => "country",
      "D.fullspan" => "fullspan",
      "FunctionCall36800" => "fulltext",
      "FunctionCall36808" => "hasCityState"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "false"
        )
      ) => "FunctionCall36808",
      ApplyFunc(
        GetString(
          GetCol(
            "D.fullspan"
          )
        ) => "FunctionCall36800",
        ApplyFunc(
          GetString(
            StringConst(
              "US"
            )
          ) => "FunctionCall36786",
          ApplyFunc(
            GetString(
              StringConst(
                ""
              )
            ) => "FunctionCall36780",
            ApplyFunc(
              GetString(
                StringConst(
                  ""
                )
              ) => "FunctionCall36774",
              ApplyFunc(
                StringConst(
                  "countryonly"
                ) => "FunctionCall42060",
                Project(
                  (
                    "fullspan" => "D.fullspan"
                  ),
                  $ME_LA_CountryOnlyUS
                )
              )
            )
          )
        )
      )
    )
  )
);

$MET_All_Sentiment =
Project(
  (
    "D.prov" => "prov",
    "D.text" => "text",
    "D.name_span" => "name_span",
    "D.formal_name" => "formal_name",
    "D.category" => "category",
    "D.obj" => "obj",
    "D.polarity" => "polarity"
  ),
  Project(
    (
      "category" => "D.category",
      "formal_name" => "D.formal_name",
      "name_span" => "D.name_span",
      "obj" => "D.obj",
      "polarity" => "D.polarity",
      "prov" => "D.prov",
      "text" => "D.text"
    ),
    $MET_All_Sentiment_Unconsolidated
  )
);

$ME_LA_NotInExplicitOutput =
Difference(
  Project(
    (
      "L.text" => "text"
    ),
    Project(
      (
        "text" => "L.text"
      ),
      $ME_LA_InputText
    )
  ),
  Project(
    (
      "L.text" => "text"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "L.text"
        ),
        GetCol(
          "O.fullspan"
        )
      ),
      Project(
        (
          "text" => "L.text"
        ),
        $ME_LA_InputText
      ),
      Project(
        (
          "fullspan" => "O.fullspan"
        ),
        $MappedAddressOutput
      )
    )
  ));

$ME_LA_NotInExplicitOutputNonNull =
Project(
  (
    "D.text" => "text"
  ),
  Select(
    Not(
      ContainsRegex(
        RegexConst(
          /userlocation\": (\"\")|(null})/,
          "JavaRegex"
        ),
        GetCol(
          "D.text"
        )
      )
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $ME_LA_NotInExplicitOutput
    )
  )
);

$MET_AllSentiment_Negation =
Select(
  Follows(
    GetCol(
      "match"
    ),
    GetCol(
      "obj"
    ),
    IntConst(
      0
    ),
    IntConst(
      7
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.category" => "category",
      "D.obj" => "obj",
      "D.polarity" => "polarity",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "match" => "match"
    ),
    Dictionary("MET_Negation_Dict" => "Default" , "D.text", "match",
      Project(
        (
          "category" => "D.category",
          "formal_name" => "D.formal_name",
          "name_span" => "D.name_span",
          "obj" => "D.obj",
          "polarity" => "D.polarity",
          "text" => "D.text"
        ),
        $MET_All_Sentiment
      )
    )
  )
);

$ME_LA_Geos =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  FastRegex(/\-?\d\d?\d?\.\d(\d)*.?[A-Z]?((,\s*)|(\s+))\-?\d\d?\d?\.\d(\d)*(.?[EWSN])?/, (0 => "match"), "DOTALL", "D.text",
    Project(
      (
        "text" => "D.text"
      ),
      $ME_LA_NotInExplicitOutputNonNull
    )
  )
);

$LA_GeosOutput =
Project(
  (
    "FunctionCall36870" => "geo"
  ),
  ApplyFunc(
    GetString(
      GetCol(
        "D.match"
      )
    ) => "FunctionCall36870",
    Project(
      (
        "match" => "D.match"
      ),
      $ME_LA_Geos
    )
  )
);

$MET_AllSentiment_Filtered =
Difference(
  Project(
    (
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "D.category" => "category",
      "D.obj" => "obj",
      "D.polarity" => "polarity"
    ),
    Project(
      (
        "category" => "D.category",
        "formal_name" => "D.formal_name",
        "name_span" => "D.name_span",
        "obj" => "D.obj",
        "polarity" => "D.polarity",
        "text" => "D.text"
      ),
      $MET_All_Sentiment
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "D.category" => "category",
      "D.obj" => "obj",
      "D.polarity" => "polarity"
    ),
    Project(
      (
        "category" => "D.category",
        "formal_name" => "D.formal_name",
        "name_span" => "D.name_span",
        "obj" => "D.obj",
        "polarity" => "D.polarity",
        "text" => "D.text"
      ),
      $MET_AllSentiment_Negation
    )
  ));

$MET_NotInSentimentTemp =
Difference(
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $MET_AllBuzz_OnlyText
    )
  ),
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $MET_AllSentiment_Filtered
    )
  ));

$MET_VeryNegative =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_MET_VeryNegative_WITH_Default_OVER_MET_NotInSentimentTemp_text
  )
);

$MET_VeryNegativeWithAttrsUnfiltered =
Project(
  (
    "D.text" => "text",
    "D.match" => "match",
    "B.name_span" => "name_span",
    "B.formal_name" => "formal_name"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "B.name_span"
    ),
    NLJoin(
      True(),
      Project(
        (
          "formal_name" => "B.formal_name",
          "name_span" => "B.name_span"
        ),
        $MET_AllBuzz
      ),
      Project(
        (
          "match" => "D.match",
          "text" => "D.text"
        ),
        $MET_VeryNegative
      )
    )
  )
);

$MET_VeryNegative_tofilterfilternegation =
Select(
  Follows(
    GetCol(
      "neg"
    ),
    GetCol(
      "match"
    ),
    IntConst(
      0
    ),
    IntConst(
      7
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.match" => "match",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "neg" => "neg"
    ),
    Dictionary("MET_Negation_Dict" => "Default" , "D.text", "neg",
      Project(
        (
          "formal_name" => "D.formal_name",
          "match" => "D.match",
          "name_span" => "D.name_span",
          "text" => "D.text"
        ),
        $MET_VeryNegativeWithAttrsUnfiltered
      )
    )
  )
);

$MET_VeryPositive =
Select(
  Not(
    ContainsRegex(
      RegexConst(
        /(best wishes)/,
        "SimpleRegex"
      ),
      StringConst(
        "CASE_INSENSITIVE"
      ),
      GetCol(
        "text"
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "match" => "match"
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "match"
      ),
      $SDM_OUTPUT_MET_VeryPositiveDict_WITH_Default_OVER_MET_NotInSentimentTemp_text
    )
  )
);

$MET_VeryPositiveWithAttrsUnfiltered =
Project(
  (
    "D.text" => "text",
    "D.match" => "match",
    "B.name_span" => "name_span",
    "B.formal_name" => "formal_name"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "B.name_span"
    ),
    NLJoin(
      True(),
      Project(
        (
          "formal_name" => "B.formal_name",
          "name_span" => "B.name_span"
        ),
        $MET_AllBuzz
      ),
      Project(
        (
          "match" => "D.match",
          "text" => "D.text"
        ),
        $MET_VeryPositive
      )
    )
  )
);

$MET_VeryPositive_tofilterfilternegation =
Select(
  Follows(
    GetCol(
      "neg"
    ),
    GetCol(
      "match"
    ),
    IntConst(
      0
    ),
    IntConst(
      7
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.match" => "match",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "neg" => "neg"
    ),
    Dictionary("MET_Negation_Dict" => "Default" , "D.text", "neg",
      Project(
        (
          "formal_name" => "D.formal_name",
          "match" => "D.match",
          "name_span" => "D.name_span",
          "text" => "D.text"
        ),
        $MET_VeryPositiveWithAttrsUnfiltered
      )
    )
  )
);

$MET_Confused =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_MET_Confused_WITH_Default_OVER_MET_NotInSentimentTemp_text
  )
);

$MET_ConfusedWithAttrs =
Project(
  (
    "D.text" => "text",
    "D.match" => "match",
    "B.name_span" => "name_span",
    "B.formal_name" => "formal_name"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "B.name_span"
    ),
    NLJoin(
      True(),
      Project(
        (
          "formal_name" => "B.formal_name",
          "name_span" => "B.name_span"
        ),
        $MET_AllBuzz
      ),
      Project(
        (
          "match" => "D.match",
          "text" => "D.text"
        ),
        $MET_Confused
      )
    )
  )
);

$MET_VeryNegativeToFilter =
Union(
  Project(
    (
      "D.text" => "text",
      "D.match" => "match",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name"
    ),
    Project(
      (
        "formal_name" => "D.formal_name",
        "match" => "D.match",
        "name_span" => "D.name_span",
        "text" => "D.text"
      ),
      $MET_VeryNegative_tofilterfilternegation
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.match" => "match",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "D.text"
        ),
        GetCol(
          "P.text"
        )
      ),
      Project(
        (
          "formal_name" => "D.formal_name",
          "match" => "D.match",
          "name_span" => "D.name_span",
          "text" => "D.text"
        ),
        $MET_VeryNegativeWithAttrsUnfiltered
      ),
      Project(
        (
          "text" => "P.text"
        ),
        $MET_VeryPositiveWithAttrsUnfiltered
      )
    )
  )
);

$MET_VeryNegativeWithAttrs =
Difference(
  Project(
    (
      "D.text" => "text",
      "D.match" => "match",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name"
    ),
    Project(
      (
        "formal_name" => "D.formal_name",
        "match" => "D.match",
        "name_span" => "D.name_span",
        "text" => "D.text"
      ),
      $MET_VeryNegativeWithAttrsUnfiltered
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.match" => "match",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name"
    ),
    Project(
      (
        "formal_name" => "D.formal_name",
        "match" => "D.match",
        "name_span" => "D.name_span",
        "text" => "D.text"
      ),
      $MET_VeryNegativeToFilter
    )
  ));

$MET_VeryPositiveToFilter =
Union(
  Project(
    (
      "D.text" => "text",
      "D.match" => "match",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name"
    ),
    Project(
      (
        "formal_name" => "D.formal_name",
        "match" => "D.match",
        "name_span" => "D.name_span",
        "text" => "D.text"
      ),
      $MET_VeryPositive_tofilterfilternegation
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.match" => "match",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "D.text"
        ),
        GetCol(
          "P.text"
        )
      ),
      Project(
        (
          "formal_name" => "D.formal_name",
          "match" => "D.match",
          "name_span" => "D.name_span",
          "text" => "D.text"
        ),
        $MET_VeryPositiveWithAttrsUnfiltered
      ),
      Project(
        (
          "text" => "P.text"
        ),
        $MET_VeryPositiveWithAttrsUnfiltered
      )
    )
  )
);

$MET_VeryPositiveWithAttrs =
Difference(
  Project(
    (
      "D.text" => "text",
      "D.match" => "match",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name"
    ),
    Project(
      (
        "formal_name" => "D.formal_name",
        "match" => "D.match",
        "name_span" => "D.name_span",
        "text" => "D.text"
      ),
      $MET_VeryPositiveWithAttrsUnfiltered
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.match" => "match",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name"
    ),
    Project(
      (
        "formal_name" => "D.formal_name",
        "match" => "D.match",
        "name_span" => "D.name_span",
        "text" => "D.text"
      ),
      $MET_VeryPositiveToFilter
    )
  ));

$MET_Sentiment_Final =
Union(
  Project(
    (
      "FunctionCall42062" => "prov",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall6905" => "category",
      "D.obj" => "obj",
      "FunctionCall6921" => "polarity",
      "D.text" => "text"
    ),
    ApplyFunc(
      GetString(
        GetCol(
          "D.polarity"
        )
      ) => "FunctionCall6921",
      ApplyFunc(
        GetString(
          GetCol(
            "D.category"
          )
        ) => "FunctionCall6905",
        ApplyFunc(
          StringConst(
            "sent"
          ) => "FunctionCall42062",
          Project(
            (
              "category" => "D.category",
              "formal_name" => "D.formal_name",
              "name_span" => "D.name_span",
              "obj" => "D.obj",
              "polarity" => "D.polarity",
              "text" => "D.text"
            ),
            $MET_AllSentiment_Filtered
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42064" => "prov",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall6951" => "category",
      "D.name_span" => "obj",
      "FunctionCall6963" => "polarity",
      "D.text" => "text"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "negative"
        )
      ) => "FunctionCall6963",
      ApplyFunc(
        GetString(
          StringConst(
            "confused"
          )
        ) => "FunctionCall6951",
        ApplyFunc(
          StringConst(
            "confused"
          ) => "FunctionCall42064",
          Project(
            (
              "formal_name" => "D.formal_name",
              "name_span" => "D.name_span",
              "text" => "D.text"
            ),
            $MET_ConfusedWithAttrs
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42066" => "prov",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall6991" => "category",
      "D.name_span" => "obj",
      "FunctionCall7003" => "polarity",
      "D.text" => "text"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "negative"
        )
      ) => "FunctionCall7003",
      ApplyFunc(
        GetString(
          StringConst(
            "movie"
          )
        ) => "FunctionCall6991",
        ApplyFunc(
          StringConst(
            "veryneg"
          ) => "FunctionCall42066",
          Project(
            (
              "formal_name" => "D.formal_name",
              "name_span" => "D.name_span",
              "text" => "D.text"
            ),
            $MET_VeryNegativeWithAttrs
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42068" => "prov",
      "D.name_span" => "name_span",
      "D.formal_name" => "formal_name",
      "FunctionCall7031" => "category",
      "D.name_span" => "obj",
      "FunctionCall7043" => "polarity",
      "D.text" => "text"
    ),
    ApplyFunc(
      GetString(
        StringConst(
          "positive"
        )
      ) => "FunctionCall7043",
      ApplyFunc(
        GetString(
          StringConst(
            "movie"
          )
        ) => "FunctionCall7031",
        ApplyFunc(
          StringConst(
            "verypos"
          ) => "FunctionCall42068",
          Project(
            (
              "formal_name" => "D.formal_name",
              "name_span" => "D.name_span",
              "text" => "D.text"
            ),
            $MET_VeryPositiveWithAttrs
          )
        )
      )
    )
  )
);

$MET_Sentiment_Output =
Project(
  (
    "D.name_span" => "name_span",
    "D.formal_name" => "formal_name",
    "FunctionCall7102" => "category",
    "D.obj" => "category_obj",
    "D.polarity" => "polarity"
  ),
  ApplyFunc(
    GetString(
      GetCol(
        "D.category"
      )
    ) => "FunctionCall7102",
    Select(
      Not(
        ContainsRegex(
          RegexConst(
            /\b((but)|(however)|(although)|(unless)|(except))\b/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "D.text"
          )
        )
      ),
      Project(
        (
          "category" => "D.category",
          "formal_name" => "D.formal_name",
          "name_span" => "D.name_span",
          "obj" => "D.obj",
          "polarity" => "D.polarity",
          "text" => "D.text"
        ),
        $MET_Sentiment_Final
      )
    )
  )
);

$ME_Movie_Sentiment =
Project(
  (
    "D.formal_name" => "movie_name",
    "FunctionCall7142" => "category",
    "D.polarity" => "polarity"
  ),
  ApplyFunc(
    GetString(
      GetCol(
        "D.category"
      )
    ) => "FunctionCall7142",
    Project(
      (
        "category" => "D.category",
        "formal_name" => "D.formal_name",
        "polarity" => "D.polarity"
      ),
      $MET_Sentiment_Output
    )
  )
);

$_{"Candidates_HasChildren_Generic_StrongPat❡subquery1"} =
Consolidate(
  "ContainedWithin",
  GetCol(
    "key"
  ),
  Project(
    (
      "D.tweet" => "tweet",
      "key" => "key"
    ),
    Project(
      (
        "tweet" => "D.tweet",
        "__sdm_match" => "key"
      ),
      $SDM_OUTPUT_Candidate_StrongKeywords_HasChildrenDict_WITH_Default_OVER_CandidatesAll_LifeEvents_HasChildren_Generic_tweet
    )
  )
);

$_{"Candidates_IsMarried_Generic_StrongPat❡subquery1"} =
Consolidate(
  "ContainedWithin",
  GetCol(
    "key"
  ),
  Project(
    (
      "D.tweet" => "tweet",
      "key" => "key"
    ),
    Dictionary("Candidate_StrongKeywords_IsMarriedDict" => "Default" , "D.tweet", "key",
      Project(
        (
          "tweet" => "D.tweet"
        ),
        $CandidatesAll_LifeEvents_IsMarried_Generic
      )
    )
  )
);

$_{"Candidates_LifeEvents_Relocation❡subquery1"} =
Project(
  (
    "D.tweet" => "tweet",
    "match" => "match"
  ),
  Dictionary("LifeChangingEventsDict_Relocation" => "Default" , "D.tweet", "match",
    Project(
      (
        "tweet" => "D.tweet"
      ),
      $Candidates_LifeEvents
    )
  )
);

$_{"Candidates_Strong_FathersDay❡subquery1"} =
Project(
  (
    "D.tweet" => "tweet",
    "mention" => "mention"
  ),
  Dictionary("fathersDayWishes.dict" => "Default" , "D.tweet", "mention",
    Project(
      (
        "tweet" => "D.tweet"
      ),
      $CandidatesAll_FathersDay
    )
  )
);

$_{"Candidates_Strong_FathersDay_UsingRegex❡subquery1"} =
Select(
  ContainsDict(
    StringConst(
      "FatherKeywordsGenericDict"
    ),
    GetCol(
      "wishText"
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "key" => "key",
      "wishText" => "wishText"
    ),
    Regex(/(?:happy|hpy|hpie|happi|hapy)\s(?:[1-9]+)(?:st|nd|rd|th|\syears|\syrs)\s([a-zA-Z]+\s[a-zA-Z]+)/, (0 => "key", 1 => "wishText"), "CASE_INSENSITIVE", "T.tweet",
      Project(
        (
          "tweet" => "T.tweet"
        ),
        $CandidatesAll_FathersDay
      )
    )
  )
);

$_{"Candidates_Strong_MothersDay❡subquery1"} =
Project(
  (
    "D.tweet" => "tweet",
    "mention" => "mention"
  ),
  Dictionary("mothersDayWishes.dict" => "Default" , "D.tweet", "mention",
    Project(
      (
        "tweet" => "D.tweet"
      ),
      $CandidatesAll_MothersDay
    )
  )
);

$_{"Candidates_Strong_MothersDay_UsingRegex❡subquery1"} =
Select(
  ContainsDict(
    StringConst(
      "MotherKeywordsGenericDict"
    ),
    GetCol(
      "wishText"
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "key" => "key",
      "wishText" => "wishText"
    ),
    Regex(/(?:happy|hpy|hpie|happi|hapy)\s(?:[1-9]+)(?:st|nd|rd|th|\syears|\syrs)\s([a-zA-Z]+\s[a-zA-Z]+)/, (0 => "key", 1 => "wishText"), "CASE_INSENSITIVE", "T.tweet",
      Project(
        (
          "tweet" => "T.tweet"
        ),
        $CandidatesAll_MothersDay
      )
    )
  )
);

$_{"HasChildren_DictClues❡subquery1"} =
Project(
  (
    "D.tweet" => "tweet",
    "mention" => "mention"
  ),
  Project(
    (
      "tweet" => "D.tweet",
      "__sdm_match" => "mention"
    ),
    $SDM_OUTPUT_genericHasChildrenClues_dict_WITH_Default_OVER_CandidatesAll_LifeEvents_HasChildren_Generic_tweet
  )
);

$_{"LifeEvents_AnnivRange_Regex❡subquery1"} =
Select(
  And(
    Or(
      ContainsDict(
        StringConst(
          "CongratulatoryKeywords.dict"
        ),
        GetCol(
          "tweet"
        )
      ),
      ContainsRegex(
        RegexConst(
          /(?:happy)/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "tweet"
        )
      )
    ),
    ContainsRegex(
      RegexConst(
        /(?:anniv|weddin|marriage)/,
        "SimpleRegex"
      ),
      StringConst(
        "CASE_INSENSITIVE"
      ),
      GetCol(
        "annivText"
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "key" => "key",
      "range" => "range",
      "annivText" => "annivText"
    ),
    Regex(/(?:[a-zA-Z]+?)\s([0-9]+)(?:st|nd|rd|th|\syears|\syrs)\s([a-zA-Z]+\s[a-zA-Z]+)/, (0 => "key", 1 => "range", 2 => "annivText"), "CASE_INSENSITIVE", "T.tweet",
      Project(
        (
          "tweet" => "T.tweet"
        ),
        $Candidates_LifeEvents_Marriage_Refined
      )
    )
  )
);

$_{"LifeEvents_BabyWishes_StrongMentions_Dict❡subquery1"} =
Consolidate(
  "ContainedWithin",
  GetCol(
    "tweet"
  ),
  Project(
    (
      "D.key" => "key",
      "D.tweet" => "tweet",
      "mention" => "mention"
    ),
    Dictionary("babyWishes.dict" => "Default" , "D.tweet", "mention",
      Project(
        (
          "key" => "D.key",
          "tweet" => "D.tweet"
        ),
        $LifeEvents_BabyWishes_Strong
      )
    )
  )
);

$_{"LifeEvents_BdayAge_Regex❡subquery1"} =
Select(
  And(
    ContainsRegex(
      RegexConst(
        /@[a-zA-Z0-9_]{1,15}/,
        "SimpleRegex"
      ),
      GetCol(
        "tweet"
      )
    ),
    MatchesDict(
      StringConst(
        "LifeChangingEventsDict_Bday_Weak"
      ),
      GetCol(
        "bdayText"
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "key" => "key",
      "bdayText" => "bdayText"
    ),
    Regex(/(?:happy|hapi|hapy|appie|hpy|hppy|happi)\s[0-9]+(?:st|nd|rd|th)\s(b[A-Za-z]+)\s/, (0 => "key", 1 => "bdayText"), "CASE_INSENSITIVE", "T.tweet",
      Project(
        (
          "tweet" => "T.tweet"
        ),
        $Candidates_LifeEvents_Bday
      )
    )
  )
);

$_{"LifeEvents_Bday_StrongDict❡subquery1"} =
Select(
  And(
    ContainsRegex(
      RegexConst(
        /@[a-zA-Z0-9_]{1,15}/,
        "SimpleRegex"
      ),
      GetCol(
        "tweet"
      )
    ),
    Not(
      ContainsDict(
        StringConst(
          "BelatedWishesDict"
        ),
        GetCol(
          "tweet"
        )
      )
    )
  ),
  Project(
    (
      "D.tweet" => "tweet",
      "match" => "match"
    ),
    Dictionary("birthday.dict" => "Default" , "D.tweet", "match",
      Project(
        (
          "tweet" => "D.tweet"
        ),
        $Candidates_LifeEvents_Bday
      )
    )
  )
);

$_{"LocationClue_InTweets❡subquery1"} =
Project(
  (
    "D.tweet" => "tweet",
    "loc" => "loc"
  ),
  Dictionary("city.dict" => "Exact" , "D.tweet", "loc",
    Project(
      (
        "tweet" => "D.tweet"
      ),
      $AllTweets
    )
  )
);

$_{"AllLocations❡subquery1"} =
Union(
  Project(
    (
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $USStatesCandidates
    )
  ),
  Project(
    (
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $USStateAbbrCandidates
    )
  ),
  Project(
    (
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $CountriesCandidates
    )
  ),
  Project(
    (
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $MajorCity
    )
  ),
  Project(
    (
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $WeakUSCities
    )
  ),
  Project(
    (
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $Continents
    )
  )
);

$_{"Candidates_LifeEvents_JobRelated_Events❡subquery1"} =
Project(
  (
    "D.text" => "tweet",
    "match" => "match"
  ),
  Dictionary("LifeChangingEventsDict_JobRelated_Events_Weak" => "IgnoreCase" , "D.text", "match",
    Project(
      (
        "text" => "D.text"
      ),
      $LifeEvents_JobRelated_EventsTweets
    )
  )
);

$JO_Job_Parts_1 =
Project(
  (
    "D.job_match" => "job_match",
    "boundary" => "boundary"
  ),
  FastRegex(/((\sy\s)|(\sin\s)|(\sbecause\s)|(\sand\s)|(\san?\s)|(\sfrom\s)|(\sis\s)|(\sfor\s)|(\sat\s))/, (0 => "boundary"), "DOTALL", "D.job_match",
    Project(
      (
        "job_match" => "D.job_match"
      ),
      $JO_Tokens
    )
  )
);

$_{"JobStatus_JobHuntpattern1_Candidate❡subquery1"} =
Project(
  (
    "T.key" => "key",
    "FunctionCall19360" => "tweet",
    "T.match" => "match",
    "FunctionCall19379" => "phrase"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.key"
      ),
      GetCol(
        "T.match"
      )
    ) => "FunctionCall19379",
    ApplyFunc(
      Chomp(
        GetCol(
          "T.tweet"
        )
      ) => "FunctionCall19360",
      Select(
        And(
          ContainsRegex(
            RegexConst(
              /\bhunt|\bsearch|\bapp/,
              "JavaRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            GetCol(
              "T.match"
            )
          ),
          FollowsTok(
            GetCol(
              "T.key"
            ),
            GetCol(
              "T.match"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          )
        ),
        Project(
          (
            "key" => "T.key",
            "match" => "T.match",
            "tweet" => "T.tweet"
          ),
          $Candidate_JobStatus
        )
      )
    )
  )
);

$_{"JobStatus_OutOfWork_mentionsPattern2❡subquery1"} =
Project(
  (
    "T.tweet" => "tweet",
    "T.key" => "key",
    "FunctionCall18919" => "mention"
  ),
  ApplyFunc(
    CombineSpans(
      LeftContextTok(
        GetCol(
          "T.key"
        ),
        IntConst(
          3
        )
      ),
      GetCol(
        "T.key"
      )
    ) => "FunctionCall18919",
    Select(
      Or(
        ContainsRegex(
          RegexConst(
            /#?(?:\balmost\b|\bgot\b|\bget|\bcall\b|\bjust\b|\bfinally\b)/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          LeftContextTok(
            GetCol(
              "T.key"
            ),
            IntConst(
              2
            )
          )
        ),
        Equals(
          GetBegin(
            Chomp(
              GetCol(
                "T.tweet"
              )
            )
          ),
          GetBegin(
            Chomp(
              GetCol(
                "T.key"
              )
            )
          )
        )
      ),
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet"
        ),
        $JobStatus_OutOfWork_Remaining
      )
    )
  )
);

$Sentences_1 =
Project(
  (
    "D.text" => "text",
    "boundary" => "boundary"
  ),
  Regex(/(([.?!]+)|(\n\s*\n))/, (0 => "boundary"), "CANON_EQ", "D.text",
    Project(
      (
        "text" => "D.text"
      ),
      $NoSpamOrPromos
    )
  )
);

$Candidates_HasChildren_Generic_StrongPat =
Project(
  (
    "D.key" => "key",
    "D.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.tweet"
    ),
    Project(
      (
        "key" => "D.key",
        "tweet" => "D.tweet"
      ),
      $_{"Candidates_HasChildren_Generic_StrongPat❡subquery1"}
    )
  )
);

$Candidates_IsMarried_Generic_StrongPat =
Project(
  (
    "D.key" => "key",
    "D.tweet" => "tweet"
  ),
  Project(
    (
      "key" => "D.key",
      "tweet" => "D.tweet"
    ),
    $_{"Candidates_IsMarried_Generic_StrongPat❡subquery1"}
  )
);

$Candidates_LifeEvents_Relocation =
Project(
  (
    "T.match" => "key",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    Select(
      Not(
        ContainsRegex(
          RegexConst(
            /\bRT\b/,
            "JavaRegex"
          ),
          GetCol(
            "T.tweet"
          )
        )
      ),
      Project(
        (
          "match" => "T.match",
          "tweet" => "T.tweet"
        ),
        $_{"Candidates_LifeEvents_Relocation❡subquery1"}
      )
    )
  )
);

$Candidates_Strong_FathersDay =
Project(
  (
    "D.mention" => "mention",
    "D.tweet" => "tweet",
    "FunctionCall15600" => "rightSpan"
  ),
  ApplyFunc(
    RightContextTok(
      GetCol(
        "D.mention"
      ),
      IntConst(
        5
      )
    ) => "FunctionCall15600",
    Project(
      (
        "mention" => "D.mention",
        "tweet" => "D.tweet"
      ),
      $_{"Candidates_Strong_FathersDay❡subquery1"}
    )
  )
);

$Candidates_Strong_FathersDay_UsingRegex =
Project(
  (
    "T.key" => "mention",
    "T.tweet" => "tweet"
  ),
  Project(
    (
      "key" => "T.key",
      "tweet" => "T.tweet"
    ),
    $_{"Candidates_Strong_FathersDay_UsingRegex❡subquery1"}
  )
);

$Candidates_Strong_MothersDay =
Project(
  (
    "D.mention" => "mention",
    "D.tweet" => "tweet",
    "FunctionCall14557" => "rightSpan"
  ),
  ApplyFunc(
    RightContextTok(
      GetCol(
        "D.mention"
      ),
      IntConst(
        5
      )
    ) => "FunctionCall14557",
    Project(
      (
        "mention" => "D.mention",
        "tweet" => "D.tweet"
      ),
      $_{"Candidates_Strong_MothersDay❡subquery1"}
    )
  )
);

$Candidates_Strong_MothersDay_UsingRegex =
Project(
  (
    "T.key" => "mention",
    "T.tweet" => "tweet"
  ),
  Project(
    (
      "key" => "T.key",
      "tweet" => "T.tweet"
    ),
    $_{"Candidates_Strong_MothersDay_UsingRegex❡subquery1"}
  )
);

$HasChildren_DictClues =
Project(
  (
    "D.mention" => "mention",
    "D.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.tweet"
    ),
    Project(
      (
        "mention" => "D.mention",
        "tweet" => "D.tweet"
      ),
      $_{"HasChildren_DictClues❡subquery1"}
    )
  )
);

$IsMarried_Generic_Filter =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    Select(
      ContainsDict(
        StringConst(
          "Marriage_GenericFilterDict"
        ),
        GetCol(
          "T.tweet"
        )
      ),
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet"
        ),
        $Candidates_IsMarried_Generic_StrongPat
      )
    )
  )
);

$LifeEvents_AnnivRange_Regex =
Project(
  (
    "T.key" => "key",
    "T.range" => "range",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "range" => "T.range",
        "tweet" => "T.tweet"
      ),
      $_{"LifeEvents_AnnivRange_Regex❡subquery1"}
    )
  )
);

$LifeEvents_BabyWishes_StrongMentions_Dict =
Project(
  (
    "D.key" => "key",
    "D.mention" => "mention",
    "D.tweet" => "tweet"
  ),
  Project(
    (
      "key" => "D.key",
      "mention" => "D.mention",
      "tweet" => "D.tweet"
    ),
    $_{"LifeEvents_BabyWishes_StrongMentions_Dict❡subquery1"}
  )
);

$LifeEvents_BdayAge_Regex =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $_{"LifeEvents_BdayAge_Regex❡subquery1"}
    )
  )
);

$LifeEvents_Bday_StrongDict =
Project(
  (
    "T.match" => "key",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    Project(
      (
        "match" => "T.match",
        "tweet" => "T.tweet"
      ),
      $_{"LifeEvents_Bday_StrongDict❡subquery1"}
    )
  )
);

$LocationClue_InTweets =
Project(
  (
    "T.loc" => "loc",
    "T.tweet" => "tweet"
  ),
  Project(
    (
      "loc" => "T.loc",
      "tweet" => "T.tweet"
    ),
    $_{"LocationClue_InTweets❡subquery1"}
  )
);

$RelocationTweets_Pattern1 =
Project(
  (
    "T.tweet" => "tweet",
    "T.key" => "key",
    "locationNameSpan" => "locationNameSpan"
  ),
  Regex(/(?:moving|movin)\s{0,10}back\s{0,10}(?:to|2)\s{0,10}([a-zA-Z\s]+)/, (1 => "locationNameSpan"), "CASE_INSENSITIVE", "T.tweet",
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $Candidates_LifeEvents_Relocation
    )
  )
);

$Tweets_BothDicts =
Project(
  (
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "T.tweet"
        ),
        GetCol(
          "T1.tweet"
        )
      ),
      Project(
        (
          "tweet" => "T.tweet"
        ),
        $MotionKeywords_InTweets
      ),
      Project(
        (
          "tweet" => "T1.tweet"
        ),
        $LocationClue_InTweets
      )
    )
  )
);

$AllLocations =
Project(
  (
    "D.match" => "match"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.match"
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $_{"AllLocations❡subquery1"}
    )
  )
);

$CandidateTweets_WithoutDict =
Difference(
  Project(
    (
      "T.tweet" => "text"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $MotionKeywords_InTweets
    )
  ),
  Project(
    (
      "T.tweet" => "text"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $Tweets_BothDicts
    )
  ));

$Candidates_IsMarried_GenericStrongPat_Filtered =
Difference(
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $Candidates_IsMarried_Generic_StrongPat
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $IsMarried_Generic_Filter
    )
  ));

$Candidates_LifeEvents_JobRelated_Events =
Project(
  (
    "T.match" => "key",
    "FunctionCall16710" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    ApplyFunc(
      Chomp(
        GetCol(
          "T.tweet"
        )
      ) => "FunctionCall16710",
      Project(
        (
          "match" => "T.match",
          "tweet" => "T.tweet"
        ),
        $_{"Candidates_LifeEvents_JobRelated_Events❡subquery1"}
      )
    )
  )
);

$Candidates_LifeEvents_Relocation_OtherThanPat1 =
Difference(
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $Candidates_LifeEvents_Relocation
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $RelocationTweets_Pattern1
    )
  ));

$JO_Job_Parts =
Project(
  (
    "B.job_match" => "job_match",
    "strict_job_match" => "strict_job_match"
  ),
  Split("B.job_match", "B.boundary", 0, "strict_job_match",
    Project(
      (
        "job_match" => "B.job_match",
        "boundary" => "B.boundary"
      ),
      $JO_Job_Parts_1
    )
  )
);

$JO_JobsUnsplitted =
Difference(
  Project(
    (
      "J.job_match" => "job_match"
    ),
    Project(
      (
        "job_match" => "J.job_match"
      ),
      $JO_Tokens
    )
  ),
  Project(
    (
      "J.job_match" => "job_match"
    ),
    Project(
      (
        "job_match" => "J.job_match"
      ),
      $JO_Job_Parts
    )
  ));

$JobStatus_JobHuntpattern1_Candidate =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.match" => "match",
    "T.phrase" => "phrase"
  ),
  Select(
    And(
      Not(
        ContainsDict(
          StringConst(
            "relations.dict"
          ),
          StringConst(
            "IgnoreCase"
          ),
          LeftContextTok(
            GetCol(
              "T.phrase"
            ),
            IntConst(
              4
            )
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "wishfulThinking.dict"
          ),
          StringConst(
            "IgnoreCase"
          ),
          LeftContextTok(
            GetCol(
              "T.phrase"
            ),
            IntConst(
              4
            )
          )
        )
      ),
      Not(
        ContainsRegex(
          RegexConst(
            /\bRT\b/,
            "JavaRegex"
          ),
          LeftContextTok(
            GetCol(
              "T.match"
            ),
            IntConst(
              30
            )
          )
        )
      ),
      Not(
        ContainsRegex(
          RegexConst(
            /(?:http|www\.)/,
            "SimpleRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "T.tweet"
          )
        )
      ),
      Not(
        ContainsRegex(
          RegexConst(
            /\?/,
            "SimpleRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          RightContextTok(
            GetCol(
              "T.phrase"
            ),
            IntConst(
              2
            )
          )
        )
      ),
      Not(
        ContainsRegex(
          RegexConst(
            /\bwork\b|\blike\b|\bneed|\bwant/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "T.phrase"
          )
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "match" => "T.match",
        "phrase" => "T.phrase",
        "tweet" => "T.tweet"
      ),
      $_{"JobStatus_JobHuntpattern1_Candidate❡subquery1"}
    )
  )
);

$JobStatus_OutOfWork_mentionsPattern2 =
Project(
  (
    "T.tweet" => "tweet",
    "T.key" => "key",
    "T.mention" => "mention"
  ),
  Select(
    Or(
      Equals(
        GetBegin(
          Chomp(
            GetCol(
              "T.tweet"
            )
          )
        ),
        GetBegin(
          Chomp(
            GetCol(
              "T.mention"
            )
          )
        )
      ),
      Equals(
        GetBegin(
          Chomp(
            GetCol(
              "T.tweet"
            )
          )
        ),
        GetBegin(
          Chomp(
            GetCol(
              "T.key"
            )
          )
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"JobStatus_OutOfWork_mentionsPattern2❡subquery1"}
    )
  )
);

$LifeEvents_Bday_Strong =
Union(
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_Bday_StrongDict
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_BdayAge_Regex
    )
  )
);

$LocationTweets =
Project(
  (
    "T.key" => "key",
    "T1.loc" => "loc",
    "T1.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T1.tweet"
    ),
    Select(
      GreaterThan(
        GetBegin(
          GetCol(
            "T1.loc"
          )
        ),
        GetBegin(
          GetCol(
            "T.key"
          )
        )
      ),
      SortMergeJoin(
        ContainedWithin(
          GetCol(
            "T.key"
          ),
          GetCol(
            "T1.tweet"
          )
        ),
        Project(
          (
            "key" => "T.key"
          ),
          $MotionKeywords_InTweets
        ),
        Project(
          (
            "loc" => "T1.loc",
            "tweet" => "T1.tweet"
          ),
          $LocationClue_InTweets
        )
      )
    )
  )
);

$LocationTweets_Filtered =
Project(
  (
    "T.key" => "key",
    "T.loc" => "loc",
    "T.tweet" => "text"
  ),
  Select(
    ContainsDict(
      StringConst(
        "ReferenceWordsDict"
      ),
      GetCol(
        "T.tweet"
      )
    ),
    Project(
      (
        "key" => "T.key",
        "loc" => "T.loc",
        "tweet" => "T.tweet"
      ),
      $LocationTweets
    )
  )
);

$LocationTweets_Filtered_ReTweets =
Project(
  (
    "D.text" => "text"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.text"
    ),
    Select(
      ContainsRegex(
        RegexConst(
          /\bRT\b/,
          "JavaRegex"
        ),
        GetCol(
          "D.text"
        )
      ),
      Project(
        (
          "text" => "D.text"
        ),
        $LocationTweets_Filtered
      )
    )
  )
);

$LocationTweets_Filtered_SelfTweets =
Difference(
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $LocationTweets_Filtered
    )
  ),
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $LocationTweets_Filtered_ReTweets
    )
  ));

$RelocationTweets_Pattern2_Candidates =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet"
  ),
  Select(
    And(
      ContainsRegex(
        RegexConst(
          /(?:moved|moving|movin)\s{1,10}(?:to|2)/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "T.key"
        )
      ),
      Or(
        ContainsRegex(
          RegexConst(
            /\b(?:Im|I|'m|we're|we\s{1,10}(?:are|'re)|me\s{1,10}and|I\sam)\b/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "T.tweet"
          )
        ),
        ContainsRegex(
          RegexConst(
            /^(?:moved|moving)\s{1,10}(?:to|2)/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "T.tweet"
          )
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $Candidates_LifeEvents_Relocation_OtherThanPat1
    )
  )
);

$CandidateTweets_ReTweets =
Project(
  (
    "D.text" => "text"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.text"
    ),
    Select(
      ContainsRegex(
        RegexConst(
          /\bRT\b/,
          "JavaRegex"
        ),
        GetCol(
          "D.text"
        )
      ),
      Project(
        (
          "text" => "D.text"
        ),
        $CandidateTweets_WithoutDict
      )
    )
  )
);

$CandidateTweets_SelfTweets =
Difference(
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $CandidateTweets_WithoutDict
    )
  ),
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $CandidateTweets_ReTweets
    )
  ));

$Candidates_JobEvents_Wishes_tweet =
Project(
  (
    "CC.key" => "key",
    "CC.tweet" => "tweet"
  ),
  Select(
    And(
      ContainsRegex(
        RegexConst(
          /@[a-zA-Z0-9_]{1,15}/,
          "SimpleRegex"
        ),
        GetCol(
          "CC.tweet"
        )
      ),
      Not(
        ContainsRegex(
          RegexConst(
            /http/,
            "SimpleRegex"
          ),
          GetCol(
            "CC.tweet"
          )
        )
      ),
      Or(
        ContainsDict(
          StringConst(
            "CongratulatoryKeywords.dict"
          ),
          StringConst(
            "IgnoreCase"
          ),
          GetCol(
            "CC.tweet"
          )
        ),
        ContainsDict(
          StringConst(
            "ConsolatoryDict"
          ),
          StringConst(
            "IgnoreCase"
          ),
          GetCol(
            "CC.tweet"
          )
        )
      )
    ),
    Project(
      (
        "key" => "CC.key",
        "tweet" => "CC.tweet"
      ),
      $Candidates_LifeEvents_JobRelated_Events
    )
  )
);

$JobStatus_JobHuntpattern1 =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.match" => "match",
    "T.phrase" => "phrase",
    "FunctionCall19516" => "mention"
  ),
  ApplyFunc(
    CombineSpans(
      LeftContextTok(
        GetCol(
          "T.phrase"
        ),
        IntConst(
          6
        )
      ),
      GetCol(
        "T.phrase"
      )
    ) => "FunctionCall19516",
    Select(
      Or(
        ContainsRegex(
          RegexConst(
            /\bi\'?(?:m|\sam)?\s/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          LeftContextTok(
            GetCol(
              "T.phrase"
            ),
            IntConst(
              6
            )
          )
        ),
        ContainsRegex(
          RegexConst(
            /\bfillin|\bsendin|\bdoin|\bgoin|\bmy\b/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          LeftContextTok(
            GetCol(
              "T.phrase"
            ),
            IntConst(
              4
            )
          )
        ),
        ContainsRegex(
          RegexConst(
            /\./,
            "SimpleRegex"
          ),
          LeftContextTok(
            GetCol(
              "T.phrase"
            ),
            IntConst(
              1
            )
          )
        ),
        Equals(
          GetBegin(
            GetCol(
              "T.phrase"
            )
          ),
          GetBegin(
            GetCol(
              "T.tweet"
            )
          )
        )
      ),
      Project(
        (
          "key" => "T.key",
          "match" => "T.match",
          "phrase" => "T.phrase",
          "tweet" => "T.tweet"
        ),
        $JobStatus_JobHuntpattern1_Candidate
      )
    )
  )
);

$LifeEvents_Bday_Pattern1 =
Select(
  FollowsTok(
    GetCol(
      "userName"
    ),
    GetCol(
      "key"
    ),
    IntConst(
      0
    ),
    IntConst(
      1
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.key" => "key",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.tweet",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet"
        ),
        $LifeEvents_Bday_Strong
      )
    )
  )
);

$LifeEvents_JobRelated_StatusUntagged =
Union(
  Project(
    (
      "T.mention" => "mention",
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $JobStatus_IamPattern
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $JobStatus_MyColleaguePattern
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $JobStatus_atOfficeTweets
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $JobStatus_OutOfWork_mentionsPattern1
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $JobStatus_OutOfWork_mentionsPattern2
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $JobStatus_NeedOrHaveJobpattern1a
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $JobStatus_MyShift_Pattern1
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $JobStatus_MyShift_Pattern2
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $JobStatus_JobHuntpattern1
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $JobStatus_WorkingWithPattern
    )
  )
);

$LifeEvents_JobRelated_StatusWork_Candidate =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /work/,
        "SimpleRegex"
      ),
      StringConst(
        "CASE_INSENSITIVE"
      ),
      GetCol(
        "T.key"
      )
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_JobRelated_StatusUntagged
    )
  )
);

$RelocationTweets_Pattern2 =
Project(
  (
    "T.tweet" => "tweet",
    "T.key" => "key",
    "locationNameSpan" => "locationNameSpan"
  ),
  Regex(/(?:moving|movin|moved)\s{0,10}(?:to|2)\s{0,10}([a-zA-Z\s]+)/, (1 => "locationNameSpan"), "CASE_INSENSITIVE", "T.tweet",
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $RelocationTweets_Pattern2_Candidates
    )
  )
);

$RelocationTweets_PatternsAll =
Union(
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "T.locationNameSpan" => "locationNameSpan"
    ),
    Project(
      (
        "key" => "T.key",
        "locationNameSpan" => "T.locationNameSpan",
        "tweet" => "T.tweet"
      ),
      $RelocationTweets_Pattern1
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "T.locationNameSpan" => "locationNameSpan"
    ),
    Project(
      (
        "key" => "T.key",
        "locationNameSpan" => "T.locationNameSpan",
        "tweet" => "T.tweet"
      ),
      $RelocationTweets_Pattern2
    )
  )
);

$CandidateTweets_Location =
Project(
  (
    "D.text" => "text"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.text"
    ),
    Select(
      ContainsDict(
        StringConst(
          "VerbsForLocationStrongDict"
        ),
        GetCol(
          "D.text"
        )
      ),
      Project(
        (
          "text" => "D.text"
        ),
        $CandidateTweets_SelfTweets
      )
    )
  )
);

$LifeEvents_BdayPattern1_FalsePos =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet"
  ),
  Select(
    ContainsRegex(
      RegexConst(
        /RT|RT"/,
        "SimpleRegex"
      ),
      LeftContextTok(
        GetCol(
          "T.userName"
        ),
        IntConst(
          2
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_Bday_Pattern1
    )
  )
);

$LifeEvents_JobRelated_StatusWithoutWork =
Difference(
  Project(
    (
      "UT.mention" => "mention",
      "UT.key" => "key",
      "UT.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "UT.key",
        "mention" => "UT.mention",
        "tweet" => "UT.tweet"
      ),
      $LifeEvents_JobRelated_StatusUntagged
    )
  ),
  Project(
    (
      "UT.mention" => "mention",
      "UT.key" => "key",
      "UT.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "UT.key",
        "mention" => "UT.mention",
        "tweet" => "UT.tweet"
      ),
      $LifeEvents_JobRelated_StatusWork_Candidate
    )
  ));

$LifeEvents_JobRelated_StatusWork =
Project(
  (
    "T.mention" => "mention",
    "T.key" => "key",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    Select(
      And(
        ContainsRegex(
          RegexConst(
            /\bmy\b|\bat\b|\bgo|\bthe\b|\bfor\b|\bI\b|2|4|b4|\bfind\b|\bleave|\bafter|\boff\b|\bbefore\b/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          LeftContextTok(
            GetCol(
              "T.key"
            ),
            IntConst(
              2
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "negate.dict"
            ),
            StringConst(
              "IgnoreCase"
            ),
            GetCol(
              "T.mention"
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "wishfulThinking.dict"
            ),
            StringConst(
              "IgnoreCase"
            ),
            GetCol(
              "T.mention"
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /\bhard\b|\bon\b|\bout\b|\bof\b|\boff\b|\bwith\b|\bthat\s{0,10}out\b|\bdone|\byou|\bhis\b|\bher\b|\bhe\b|\bshe\b/,
              "JavaRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            RightContextTok(
              GetCol(
                "T.mention"
              ),
              IntConst(
                2
              )
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /\bwould|\bgroup\b|\bhome\b|\bhard\b|\bthat\b|\btheir\b|\bya\b|\bhis\b|\bher\b|\byou|\bwont\b|\bcudnt\b|\bcould|\bdo|\bdad|\bmom|\bsis|\bschool|\bart\b|\bhe\b|\bshe\b/,
              "JavaRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            GetCol(
              "T.mention"
            )
          )
        )
      ),
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet"
        ),
        $LifeEvents_JobRelated_StatusWork_Candidate
      )
    )
  )
);

$LifeEvents_JobRelated_Status_JobLess =
Project(
  (
    "T.mention" => "mention",
    "T.key" => "key",
    "FunctionCall42070" => "status",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    ApplyFunc(
      StringConst(
        "Jobless"
      ) => "FunctionCall42070",
      Select(
        And(
          ContainsRegex(
            RegexConst(
              /\blookin|\bneed|\bwant|\bwanna|\bapplied\b|\brequire\b|\bsearch|\bhunt|\bapp/,
              "JavaRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            GetCol(
              "T.mention"
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\banother|\bsecond\b|\b2nd\b|\bside\b|\bbetter\b|\bkeep\b/,
                "JavaRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              GetCol(
                "T.mention"
              )
            )
          )
        ),
        Project(
          (
            "key" => "T.key",
            "mention" => "T.mention",
            "tweet" => "T.tweet"
          ),
          $LifeEvents_JobRelated_StatusWithoutWork
        )
      )
    )
  )
);

$RelocationTweets_PatternAll_LocationNameExtracted =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.locationNameSpan" => "locationNameSpan",
    "T1.match" => "locationName"
  ),
  Select(
    FollowsTok(
      GetCol(
        "T.key"
      ),
      GetCol(
        "T1.match"
      ),
      IntConst(
        0
      ),
      IntConst(
        0
      )
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "T1.match"
        ),
        GetCol(
          "T.locationNameSpan"
        )
      ),
      Project(
        (
          "match" => "T1.match"
        ),
        $AllLocations
      ),
      Project(
        (
          "key" => "T.key",
          "locationNameSpan" => "T.locationNameSpan",
          "tweet" => "T.tweet"
        ),
        $RelocationTweets_PatternsAll
      )
    )
  )
);

$Sentences =
Project(
  (
    "text" => "text"
  ),
  Split("B.text", "B.boundary", 2, "text",
    Project(
      (
        "text" => "B.text",
        "boundary" => "B.boundary"
      ),
      $Sentences_1
    )
  )
);

$WhatQuestions =
Project(
  (
    "D.text" => "text",
    "question" => "question"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "question"
    ),
    $SDM_OUTPUT_purchases_shortQuestion_dict_WITH_Default_OVER_Sentences_text
  )
);

$buyintents =
Project(
  (
    "D.text" => "text",
    "intent" => "intent"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "intent"
    ),
    $SDM_OUTPUT_purchases_buyintents_dict_WITH_Default_OVER_Sentences_text
  )
);

$pastAction =
Select(
  Or(
    ContainsRegex(
      RegexConst(
        /\bI /,
        "JavaRegex"
      ),
      GetCol(
        "text"
      )
    ),
    ContainsRegex(
      RegexConst(
        /\bi /,
        "JavaRegex"
      ),
      GetCol(
        "text"
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "verb" => "verb"
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "verb"
      ),
      $SDM_OUTPUT_purchases_pastAction_dict_WITH_Default_OVER_Sentences_text
    )
  )
);

$productMentions =
Consolidate(
  "ContainedWithin",
  GetCol(
    "match"
  ),
  Project(
    (
      "match" => "match"
    ),
    Union(
      $SRM_OUTPUT_1_OVER_Sentences_D_text,
      $SRM_OUTPUT_2_OVER_Sentences_D_text,
      $SRM_OUTPUT_0_OVER_Sentences_D_text
    )
  )
);

$sa_buyintents =
Project(
  (
    "D.text" => "text",
    "intent" => "intent"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "intent"
    ),
    $SDM_OUTPUT_purchases_StandAloneIntents_dict_WITH_Default_OVER_Sentences_text
  )
);

$sa_transactions =
Project(
  (
    "D.text" => "text",
    "action" => "action"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "action"
    ),
    $SDM_OUTPUT_purchases_StandAloneTransaction_dict_WITH_Default_OVER_Sentences_text
  )
);

$suggestions =
Project(
  (
    "D.text" => "text",
    "suggestion" => "suggestion"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "suggestion"
    ),
    $SDM_OUTPUT_purchases_feedback_dict_WITH_Default_OVER_Sentences_text
  )
);

$transactions =
Project(
  (
    "D.text" => "text",
    "action" => "action"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "action"
    ),
    $SDM_OUTPUT_purchases_transaction_dict_WITH_Default_OVER_Sentences_text
  )
);

$AllLocationTweets =
Union(
  Project(
    (
      "D.text" => "tweet"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $LocationTweets_Filtered_SelfTweets
    )
  ),
  Project(
    (
      "D.text" => "tweet"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $CandidateTweets_Location
    )
  )
);

$Brands =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "D.text" => "text",
      "product" => "product"
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "product"
      ),
      $SDM_OUTPUT_purchases_brands_dict_WITH_Default_OVER_Sentences_text
    )
  )
);

$CanQuestions =
Project(
  (
    "D.text" => "text",
    "question" => "question"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "question"
    ),
    $SDM_OUTPUT_purchases_CanYouQuestion_dict_WITH_Default_OVER_Sentences_text
  )
);

$Characteristic =
Project(
  (
    "D.text" => "text",
    "feature" => "feature"
  ),
  FastRegex(/new|cheap|price|good deal|reasonable|discount|special|pricey|expensive|first|used|best|cool|good|latest|newest|better|more|some /, (0 => "feature"), "DOTALL", "D.text",
    Project(
      (
        "text" => "D.text"
      ),
      $Sentences
    )
  )
);

$JobRelated_StatusWorkNeedWork =
Project(
  (
    "T.mention" => "mention",
    "T.key" => "key",
    "FunctionCall42072" => "status",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    ApplyFunc(
      StringConst(
        "JobLess"
      ) => "FunctionCall42072",
      Select(
        And(
          ContainsRegex(
            RegexConst(
              /\bneed|\bwant|\blookin|\bfind/,
              "JavaRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            LeftContextTok(
              GetCol(
                "T.key"
              ),
              IntConst(
                2
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bat\b/,
                "JavaRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              LeftContextTok(
                GetCol(
                  "T.key"
                ),
                IntConst(
                  2
                )
              )
            )
          ),
          Not(
            ContainsRegex(
              RegexConst(
                /\bexperience/,
                "JavaRegex"
              ),
              StringConst(
                "CASE_INSENSITIVE"
              ),
              RightContextTok(
                GetCol(
                  "T.key"
                ),
                IntConst(
                  2
                )
              )
            )
          )
        ),
        Project(
          (
            "key" => "T.key",
            "mention" => "T.mention",
            "tweet" => "T.tweet"
          ),
          $LifeEvents_JobRelated_StatusWork
        )
      )
    )
  )
);

$LocationTweets_Pattern1a =
Project(
  (
    "T.tweet" => "tweet",
    "place" => "place",
    "address" => "address",
    "userNameSpan" => "userNameSpan",
    "url" => "url"
  ),
  Regex(/I'm\s+(?:at|in|@)(.+)\(@?(.*?)((?:\bw\/|with|\))\s+.*?)(http[:\/a-zA-Z0-9.]+)/, (1 => "place", 2 => "address", 3 => "userNameSpan", 4 => "url"), "CASE_INSENSITIVE", "T.tweet",
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $AllLocationTweets
    )
  )
);

$LocationTweets_Pattern1a_FalsePositives =
Project(
  (
    "T.tweet" => "tweet",
    "T.place" => "place",
    "T.userNameSpan" => "userNameSpan",
    "T.address" => "address",
    "T.url" => "url"
  ),
  Select(
    Or(
      MatchesRegex(
        RegexConst(
          /[\s0-9,-\/.@()]+/,
          "SimpleRegex"
        ),
        GetCol(
          "T.address"
        )
      ),
      ContainsRegex(
        RegexConst(
          /cont/,
          "SimpleRegex"
        ),
        Chomp(
          GetCol(
            "T.address"
          )
        )
      )
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_Pattern1a
    )
  )
);

$LocationTweets_Pattern1a_Retain =
Project(
  (
    "T.tweet" => "tweet",
    "T.place" => "place",
    "T.userNameSpan" => "userNameSpan",
    "T.address" => "address",
    "T.url" => "url"
  ),
  Select(
    ContainsRegex(
      RegexConst(
        /[a-zA-Z]/,
        "SimpleRegex"
      ),
      Chomp(
        GetCol(
          "T.place"
        )
      )
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_Pattern1a_FalsePositives
    )
  )
);

$OneItem =
Project(
  (
    "D.text" => "text",
    "one" => "one"
  ),
  FastRegex(/one|it|1|some/, (0 => "one"), "DOTALL", "D.text",
    Project(
      (
        "text" => "D.text"
      ),
      $Sentences
    )
  )
);

$Product =
Consolidate(
  "ContainedWithin",
  GetCol(
    "product"
  ),
  Project(
    (
      "D.text" => "text",
      "product" => "product"
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "product"
      ),
      $SDM_OUTPUT_purchases_products_dict_WITH_Default_OVER_Sentences_text
    )
  )
);

$ProductBrand =
Union(
  Project(
    (
      "B.text" => "text",
      "B.product" => "product"
    ),
    Project(
      (
        "product" => "B.product",
        "text" => "B.text"
      ),
      $Product
    )
  ),
  Project(
    (
      "B.text" => "text",
      "B.product" => "product"
    ),
    Project(
      (
        "product" => "B.product",
        "text" => "B.text"
      ),
      $Brands
    )
  )
);

$RelocationTweets_PatternAll_FalsePositives =
Project(
  (
    "T.key" => "key",
    "T.locationNameSpan" => "locationNameSpan",
    "T.locationName" => "locationName",
    "T.tweet" => "tweet"
  ),
  Select(
    Or(
      ContainsRegex(
        RegexConst(
          /http/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "T.tweet"
        )
      ),
      ContainsDict(
        StringConst(
          "AmbiguousVerbsDict"
        ),
        LeftContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            5
          )
        )
      ),
      ContainsDict(
        StringConst(
          "QuestionsDict"
        ),
        GetCol(
          "T.tweet"
        )
      ),
      ContainsRegex(
        RegexConst(
          /\b(?:not|nt|isn't|instead\sof|'t\sI)\b/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        LeftContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            3
          )
        )
      ),
      ContainsRegex(
        RegexConst(
          /\b(?:if|when|but|yet|\?)\b/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "T.locationName"
          ),
          IntConst(
            1
          )
        )
      ),
      ContainsRegex(
        RegexConst(
          /\?[?!]{0,10}/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContext(
          GetCol(
            "T.locationName"
          ),
          IntConst(
            2
          )
        )
      ),
      ContainsDict(
        StringConst(
          "OtherReferencesDict"
        ),
        LeftContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            5
          )
        )
      ),
      ContainsDict(
        StringConst(
          "relations.dict"
        ),
        LeftContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            5
          )
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "locationName" => "T.locationName",
        "locationNameSpan" => "T.locationNameSpan",
        "tweet" => "T.tweet"
      ),
      $RelocationTweets_PatternAll_LocationNameExtracted
    )
  )
);

$SuggestItemtoBuy =
Project(
  (
    "D.text" => "text",
    "Q.suggestion" => "verb",
    "PROD.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "PROD.product"
    ),
    Select(
      FollowsTok(
        GetCol(
          "W.question"
        ),
        GetCol(
          "Q.suggestion"
        ),
        IntConst(
          0
        ),
        IntConst(
          4
        )
      ),
      SortMergeJoin(
        FollowsTok(
          GetCol(
            "Q.suggestion"
          ),
          GetCol(
            "PROD.product"
          ),
          IntConst(
            0
          ),
          IntConst(
            10
          )
        ),
        AdjacentJoin(
          FollowsTok(
            GetCol(
              "W.question"
            ),
            GetCol(
              "Q.suggestion"
            ),
            IntConst(
              0
            ),
            IntConst(
              4
            )
          ),
          NLJoin(
            True(),
            Project(
              (
                "text" => "D.text"
              ),
              $Document
            ),
            Project(
              (
                "question" => "W.question"
              ),
              $CanQuestions
            )
          ),
          Project(
            (
              "suggestion" => "Q.suggestion"
            ),
            $suggestions
          )
        ),
        Select(
          Not(
            ContainsDict(
              StringConst(
                "purchases/smalltoks.dict"
              ),
              LeftContextTok(
                GetCol(
                  "PROD.product"
                ),
                IntConst(
                  1
                )
              )
            )
          ),
          Project(
            (
              "product" => "PROD.product"
            ),
            $ProductBrand
          )
        )
      )
    )
  )
);

$TransactionArticleItem =
Project(
  (
    "D.text" => "text",
    "T.action" => "verb",
    "PROD.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "PROD.product"
    ),
    Select(
      And(
        And(
          Contains(
            GetCol(
              "S.text"
            ),
            GetCol(
              "T.action"
            )
          ),
          Contains(
            GetCol(
              "S.text"
            ),
            GetCol(
              "PROD.product"
            )
          )
        ),
        And(
          ContainsDict(
            StringConst(
              "purchases/article.dict"
            ),
            RightContextTok(
              GetCol(
                "T.action"
              ),
              IntConst(
                4
              )
            )
          ),
          ContainsDict(
            StringConst(
              "purchases/article.dict"
            ),
            LeftContextTok(
              GetCol(
                "PROD.product"
              ),
              IntConst(
                5
              )
            )
          ),
          FollowsTok(
            GetCol(
              "T.action"
            ),
            GetCol(
              "PROD.product"
            ),
            IntConst(
              0
            ),
            IntConst(
              5
            )
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "T.action"
          ),
          GetCol(
            "PROD.product"
          ),
          IntConst(
            0
          ),
          IntConst(
            3
          )
        ),
        NLJoin(
          True(),
          NLJoin(
            True(),
            Project(
              (
                "text" => "D.text"
              ),
              $Document
            ),
            Project(
              (
                "text" => "S.text"
              ),
              $Sentences
            )
          ),
          Select(
            And(
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/IPron.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/IPron.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/country.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/country.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/negate.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/negate.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/notforsale.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/you.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/you.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              )
            ),
            Project(
              (
                "action" => "T.action"
              ),
              $sa_transactions
            )
          )
        ),
        Select(
          Not(
            ContainsDict(
              StringConst(
                "purchases/negate.dict"
              ),
              RightContextTok(
                GetCol(
                  "PROD.product"
                ),
                IntConst(
                  5
                )
              )
            )
          ),
          Project(
            (
              "product" => "PROD.product"
            ),
            $ProductBrand
          )
        )
      )
    )
  )
);

$TransactionCharacteristicItem =
Project(
  (
    "D.text" => "text",
    "T.action" => "verb",
    "Ch.feature" => "feature",
    "PROD.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "PROD.product"
    ),
    NLJoin(
      And(
        And(
          Contains(
            GetCol(
              "S.text"
            ),
            GetCol(
              "T.action"
            )
          ),
          Contains(
            GetCol(
              "S.text"
            ),
            GetCol(
              "Ch.feature"
            )
          ),
          Contains(
            GetCol(
              "S.text"
            ),
            GetCol(
              "PROD.product"
            )
          )
        ),
        FollowsTok(
          GetCol(
            "T.action"
          ),
          GetCol(
            "Ch.feature"
          ),
          IntConst(
            0
          ),
          IntConst(
            4
          )
        ),
        FollowsTok(
          GetCol(
            "Ch.feature"
          ),
          GetCol(
            "PROD.product"
          ),
          IntConst(
            0
          ),
          IntConst(
            10
          )
        )
      ),
      Select(
        FollowsTok(
          GetCol(
            "Ch.feature"
          ),
          GetCol(
            "PROD.product"
          ),
          IntConst(
            0
          ),
          IntConst(
            10
          )
        ),
        AdjacentJoin(
          FollowedByTok(
            GetCol(
              "Ch.feature"
            ),
            GetCol(
              "T.action"
            ),
            IntConst(
              0
            ),
            IntConst(
              4
            )
          ),
          SortMergeJoin(
            FollowsTok(
              GetCol(
                "Ch.feature"
              ),
              GetCol(
                "PROD.product"
              ),
              IntConst(
                0
              ),
              IntConst(
                10
              )
            ),
            NLJoin(
              True(),
              Project(
                (
                  "text" => "D.text"
                ),
                $Document
              ),
              Project(
                (
                  "feature" => "Ch.feature"
                ),
                $Characteristic
              )
            ),
            Select(
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/negate.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "PROD.product"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Project(
                (
                  "product" => "PROD.product"
                ),
                $ProductBrand
              )
            )
          ),
          Select(
            And(
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/IPron.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/IPron.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/country.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/country.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/negate.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/negate.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/notforsale.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/you.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/you.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "T.action"
                    ),
                    IntConst(
                      5
                    )
                  )
                )
              )
            ),
            Project(
              (
                "action" => "T.action"
              ),
              $sa_transactions
            )
          )
        )
      ),
      Project(
        (
          "text" => "S.text"
        ),
        $Sentences
      )
    )
  )
);

$WhatItemtoBuy =
Project(
  (
    "D.text" => "text",
    "PROD.product" => "product",
    "T.action" => "verb"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "PROD.product"
    ),
    Select(
      FollowsTok(
        GetCol(
          "PROD.product"
        ),
        GetCol(
          "T.action"
        ),
        IntConst(
          0
        ),
        IntConst(
          5
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "PROD.product"
          ),
          GetCol(
            "Q.question"
          ),
          IntConst(
            0
          ),
          IntConst(
            2
          )
        ),
        AdjacentJoin(
          FollowedByTok(
            GetCol(
              "T.action"
            ),
            GetCol(
              "PROD.product"
            ),
            IntConst(
              0
            ),
            IntConst(
              5
            )
          ),
          NLJoin(
            True(),
            Project(
              (
                "text" => "D.text"
              ),
              $Document
            ),
            Select(
              And(
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/IPron.dict"
                    ),
                    LeftContextTok(
                      GetCol(
                        "T.action"
                      ),
                      IntConst(
                        3
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/IPron.dict"
                    ),
                    RightContextTok(
                      GetCol(
                        "T.action"
                      ),
                      IntConst(
                        2
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/country.dict"
                    ),
                    LeftContextTok(
                      GetCol(
                        "T.action"
                      ),
                      IntConst(
                        3
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/country.dict"
                    ),
                    RightContextTok(
                      GetCol(
                        "T.action"
                      ),
                      IntConst(
                        3
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/negate.dict"
                    ),
                    LeftContextTok(
                      GetCol(
                        "T.action"
                      ),
                      IntConst(
                        3
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/notforsale.dict"
                    ),
                    LeftContextTok(
                      GetCol(
                        "T.action"
                      ),
                      IntConst(
                        3
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/you.dict"
                    ),
                    LeftContextTok(
                      GetCol(
                        "T.action"
                      ),
                      IntConst(
                        3
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/you.dict"
                    ),
                    RightContextTok(
                      GetCol(
                        "T.action"
                      ),
                      IntConst(
                        3
                      )
                    )
                  )
                )
              ),
              Project(
                (
                  "action" => "T.action"
                ),
                $transactions
              )
            )
          ),
          Project(
            (
              "product" => "PROD.product"
            ),
            $ProductBrand
          )
        ),
        Project(
          (
            "question" => "Q.question"
          ),
          $WhatQuestions
        )
      )
    )
  )
);

$AskingOpinionsOnProducts =
Union(
  Project(
    (
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "verb" => "D.verb"
      ),
      $WhatItemtoBuy
    )
  ),
  Project(
    (
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "verb" => "D.verb"
      ),
      $SuggestItemtoBuy
    )
  )
);

$BoughtArticleItem =
Project(
  (
    "PA.text" => "text",
    "PA.verb" => "verb",
    "PROD.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "PROD.product"
    ),
    NLJoin(
      Or(
        FollowsTok(
          GetCol(
            "PA.verb"
          ),
          GetCol(
            "PROD.product"
          ),
          IntConst(
            1
          ),
          IntConst(
            1
          )
        ),
        And(
          ContainsDict(
            StringConst(
              "purchases/article.dict"
            ),
            RightContextTok(
              GetCol(
                "PA.verb"
              ),
              IntConst(
                4
              )
            )
          ),
          ContainsDict(
            StringConst(
              "purchases/article.dict"
            ),
            LeftContextTok(
              GetCol(
                "PROD.product"
              ),
              IntConst(
                4
              )
            )
          ),
          FollowsTok(
            GetCol(
              "PA.verb"
            ),
            GetCol(
              "PROD.product"
            ),
            IntConst(
              0
            ),
            IntConst(
              2
            )
          )
        )
      ),
      Select(
        And(
          Not(
            ContainsDict(
              StringConst(
                "purchases/negate.dict"
              ),
              LeftContextTok(
                GetCol(
                  "PA.verb"
                ),
                IntConst(
                  4
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/negate.dict"
              ),
              RightContextTok(
                GetCol(
                  "PA.verb"
                ),
                IntConst(
                  2
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/smalltoks.dict"
              ),
              RightContextTok(
                GetCol(
                  "PA.verb"
                ),
                IntConst(
                  3
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/you.dict"
              ),
              LeftContextTok(
                GetCol(
                  "PA.verb"
                ),
                IntConst(
                  3
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/you.dict"
              ),
              RightContextTok(
                GetCol(
                  "PA.verb"
                ),
                IntConst(
                  3
                )
              )
            )
          )
        ),
        Project(
          (
            "text" => "PA.text",
            "verb" => "PA.verb"
          ),
          $pastAction
        )
      ),
      Select(
        And(
          Not(
            ContainsDict(
              StringConst(
                "purchases/firstperson.dict"
              ),
              LeftContextTok(
                GetCol(
                  "PROD.product"
                ),
                IntConst(
                  1
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/notforsale.dict"
              ),
              LeftContextTok(
                GetCol(
                  "PROD.product"
                ),
                IntConst(
                  5
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/notforsale.dict"
              ),
              RightContextTok(
                GetCol(
                  "PROD.product"
                ),
                IntConst(
                  5
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/smalltoks.dict"
              ),
              LeftContextTok(
                GetCol(
                  "PROD.product"
                ),
                IntConst(
                  1
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/smalltoks.dict"
              ),
              RightContextTok(
                GetCol(
                  "PROD.product"
                ),
                IntConst(
                  2
                )
              )
            )
          )
        ),
        Project(
          (
            "product" => "PROD.product"
          ),
          $ProductBrand
        )
      )
    )
  )
);

$BoughtCharacteristicItem =
Project(
  (
    "PA.text" => "text",
    "PA.verb" => "verb",
    "Ch.feature" => "feature",
    "PROD.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "PROD.product"
    ),
    Select(
      FollowsTok(
        GetCol(
          "PA.verb"
        ),
        GetCol(
          "Ch.feature"
        ),
        IntConst(
          0
        ),
        IntConst(
          4
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "Ch.feature"
          ),
          GetCol(
            "PROD.product"
          ),
          IntConst(
            0
          ),
          IntConst(
            1
          )
        ),
        AdjacentJoin(
          FollowsTok(
            GetCol(
              "PA.verb"
            ),
            GetCol(
              "Ch.feature"
            ),
            IntConst(
              0
            ),
            IntConst(
              4
            )
          ),
          Select(
            And(
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/negate.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "PA.verb"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/negate.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "PA.verb"
                    ),
                    IntConst(
                      2
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/notforsale.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "PA.verb"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/notforsale.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "PA.verb"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/smalltoks.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "PA.verb"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/you.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "PA.verb"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/you.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "PA.verb"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              )
            ),
            Project(
              (
                "text" => "PA.text",
                "verb" => "PA.verb"
              ),
              $pastAction
            )
          ),
          Project(
            (
              "feature" => "Ch.feature"
            ),
            $Characteristic
          )
        ),
        Project(
          (
            "product" => "PROD.product"
          ),
          $ProductBrand
        )
      )
    )
  )
);

$BoughtItem =
Project(
  (
    "PA.text" => "text",
    "PA.verb" => "verb",
    "PROD.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "PROD.product"
    ),
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "PA.verb"
        ),
        GetCol(
          "PROD.product"
        ),
        IntConst(
          0
        ),
        IntConst(
          2
        )
      ),
      Select(
        And(
          Not(
            ContainsDict(
              StringConst(
                "purchases/negate.dict"
              ),
              LeftContextTok(
                GetCol(
                  "PA.verb"
                ),
                IntConst(
                  3
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/negate.dict"
              ),
              RightContextTok(
                GetCol(
                  "PA.verb"
                ),
                IntConst(
                  2
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/notforsale.dict"
              ),
              LeftContextTok(
                GetCol(
                  "PA.verb"
                ),
                IntConst(
                  3
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/notforsale.dict"
              ),
              RightContextTok(
                GetCol(
                  "PA.verb"
                ),
                IntConst(
                  3
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/smalltoks.dict"
              ),
              RightContextTok(
                GetCol(
                  "PA.verb"
                ),
                IntConst(
                  3
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/you.dict"
              ),
              LeftContextTok(
                GetCol(
                  "PA.verb"
                ),
                IntConst(
                  3
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/you.dict"
              ),
              RightContextTok(
                GetCol(
                  "PA.verb"
                ),
                IntConst(
                  3
                )
              )
            )
          )
        ),
        Project(
          (
            "text" => "PA.text",
            "verb" => "PA.verb"
          ),
          $pastAction
        )
      ),
      Project(
        (
          "product" => "PROD.product"
        ),
        $ProductBrand
      )
    )
  )
);

$BuyIntentArticleItem =
Project(
  (
    "D.text" => "text",
    "B.intent" => "verb",
    "PROD.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "PROD.product"
    ),
    Select(
      And(
        And(
          Contains(
            GetCol(
              "S.text"
            ),
            GetCol(
              "B.intent"
            )
          ),
          Contains(
            GetCol(
              "S.text"
            ),
            GetCol(
              "PROD.product"
            )
          )
        ),
        And(
          ContainsDict(
            StringConst(
              "purchases/article.dict"
            ),
            RightContextTok(
              GetCol(
                "B.intent"
              ),
              IntConst(
                4
              )
            )
          ),
          ContainsDict(
            StringConst(
              "purchases/article.dict"
            ),
            LeftContextTok(
              GetCol(
                "PROD.product"
              ),
              IntConst(
                5
              )
            )
          ),
          FollowsTok(
            GetCol(
              "B.intent"
            ),
            GetCol(
              "PROD.product"
            ),
            IntConst(
              0
            ),
            IntConst(
              5
            )
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "PROD.product"
          ),
          GetCol(
            "B.intent"
          ),
          IntConst(
            0
          ),
          IntConst(
            3
          )
        ),
        NLJoin(
          True(),
          NLJoin(
            True(),
            Project(
              (
                "text" => "D.text"
              ),
              $Document
            ),
            Project(
              (
                "text" => "S.text"
              ),
              $Sentences
            )
          ),
          Select(
            Not(
              ContainsDict(
                StringConst(
                  "purchases/negate.dict"
                ),
                RightContextTok(
                  GetCol(
                    "PROD.product"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Project(
              (
                "product" => "PROD.product"
              ),
              $ProductBrand
            )
          )
        ),
        Select(
          And(
            Not(
              ContainsDict(
                StringConst(
                  "purchases/IPron.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/IPron.dict"
                ),
                RightContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/country.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/country.dict"
                ),
                RightContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/negate.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/negate.dict"
                ),
                RightContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/notforsale.dict"
                ),
                RightContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/you.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/you.dict"
                ),
                RightContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            )
          ),
          Project(
            (
              "intent" => "B.intent"
            ),
            $sa_buyintents
          )
        )
      )
    )
  )
);

$BuyIntentTransactionItem =
Project(
  (
    "D.text" => "text",
    "B.intent" => "verb",
    "T.action" => "action",
    "PROD.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "PROD.product"
    ),
    Select(
      And(
        And(
          Contains(
            GetCol(
              "S.text"
            ),
            GetCol(
              "B.intent"
            )
          ),
          Contains(
            GetCol(
              "S.text"
            ),
            GetCol(
              "T.action"
            )
          ),
          Contains(
            GetCol(
              "S.text"
            ),
            GetCol(
              "PROD.product"
            )
          )
        ),
        FollowsTok(
          GetCol(
            "T.action"
          ),
          GetCol(
            "PROD.product"
          ),
          IntConst(
            0
          ),
          IntConst(
            10
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "purchases/IPron.dict"
            ),
            SpanBetween(
              GetCol(
                "B.intent"
              ),
              GetCol(
                "T.action"
              )
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "purchases/notforsale.dict"
            ),
            SpanBetween(
              GetCol(
                "B.intent"
              ),
              GetCol(
                "T.action"
              )
            )
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "T.action"
          ),
          GetCol(
            "B.intent"
          ),
          IntConst(
            0
          ),
          IntConst(
            5
          )
        ),
        NLJoin(
          FollowsTok(
            GetCol(
              "T.action"
            ),
            GetCol(
              "PROD.product"
            ),
            IntConst(
              0
            ),
            IntConst(
              10
            )
          ),
          SortMergeJoin(
            FollowedByTok(
              GetCol(
                "PROD.product"
              ),
              GetCol(
                "T.action"
              ),
              IntConst(
                0
              ),
              IntConst(
                10
              )
            ),
            NLJoin(
              True(),
              Project(
                (
                  "text" => "D.text"
                ),
                $Document
              ),
              Select(
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/negate.dict"
                    ),
                    RightContextTok(
                      GetCol(
                        "PROD.product"
                      ),
                      IntConst(
                        5
                      )
                    )
                  )
                ),
                Project(
                  (
                    "product" => "PROD.product"
                  ),
                  $ProductBrand
                )
              )
            ),
            Select(
              And(
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/country.dict"
                    ),
                    RightContextTok(
                      GetCol(
                        "T.action"
                      ),
                      IntConst(
                        5
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/notforsale.dict"
                    ),
                    RightContextTok(
                      GetCol(
                        "T.action"
                      ),
                      IntConst(
                        5
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/you.dict"
                    ),
                    RightContextTok(
                      GetCol(
                        "T.action"
                      ),
                      IntConst(
                        5
                      )
                    )
                  )
                )
              ),
              Project(
                (
                  "action" => "T.action"
                ),
                $transactions
              )
            )
          ),
          Project(
            (
              "text" => "S.text"
            ),
            $Sentences
          )
        ),
        Select(
          And(
            Not(
              ContainsDict(
                StringConst(
                  "purchases/IPron.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/country.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/negate.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/negate.dict"
                ),
                RightContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/you.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/you.dict"
                ),
                RightContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            )
          ),
          Project(
            (
              "intent" => "B.intent"
            ),
            $buyintents
          )
        )
      )
    )
  )
);

$IntentCharacteristicItem =
Project(
  (
    "D.text" => "text",
    "B.intent" => "verb",
    "Ch.feature" => "feature",
    "PROD.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "PROD.product"
    ),
    Select(
      And(
        And(
          Contains(
            GetCol(
              "S.text"
            ),
            GetCol(
              "B.intent"
            )
          ),
          Contains(
            GetCol(
              "S.text"
            ),
            GetCol(
              "Ch.feature"
            )
          ),
          Contains(
            GetCol(
              "S.text"
            ),
            GetCol(
              "PROD.product"
            )
          )
        ),
        FollowsTok(
          GetCol(
            "Ch.feature"
          ),
          GetCol(
            "PROD.product"
          ),
          IntConst(
            0
          ),
          IntConst(
            10
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "Ch.feature"
          ),
          GetCol(
            "B.intent"
          ),
          IntConst(
            0
          ),
          IntConst(
            4
          )
        ),
        SortMergeJoin(
          FollowsTok(
            GetCol(
              "Ch.feature"
            ),
            GetCol(
              "PROD.product"
            ),
            IntConst(
              0
            ),
            IntConst(
              10
            )
          ),
          NLJoin(
            True(),
            NLJoin(
              True(),
              Project(
                (
                  "text" => "D.text"
                ),
                $Document
              ),
              Project(
                (
                  "text" => "S.text"
                ),
                $Sentences
              )
            ),
            Project(
              (
                "feature" => "Ch.feature"
              ),
              $Characteristic
            )
          ),
          Select(
            Not(
              ContainsDict(
                StringConst(
                  "purchases/negate.dict"
                ),
                RightContextTok(
                  GetCol(
                    "PROD.product"
                  ),
                  IntConst(
                    3
                  )
                )
              )
            ),
            Project(
              (
                "product" => "PROD.product"
              ),
              $ProductBrand
            )
          )
        ),
        Select(
          And(
            Not(
              ContainsDict(
                StringConst(
                  "purchases/IPron.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/IPron.dict"
                ),
                RightContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/country.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/country.dict"
                ),
                RightContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/negate.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    3
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/negate.dict"
                ),
                RightContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    3
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/notforsale.dict"
                ),
                RightContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/you.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/you.dict"
                ),
                RightContextTok(
                  GetCol(
                    "B.intent"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            )
          ),
          Project(
            (
              "intent" => "B.intent"
            ),
            $sa_buyintents
          )
        )
      )
    )
  )
);

$ItemIntentOrTransactionOne =
Project(
  (
    "D.text" => "text",
    "B.intent" => "verb",
    "PROD.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "PROD.product"
    ),
    NLJoin(
      And(
        Or(
          FollowsTok(
            GetCol(
              "PROD.product"
            ),
            GetCol(
              "B.intent"
            ),
            IntConst(
              0
            ),
            IntConst(
              30
            )
          ),
          FollowsTok(
            GetCol(
              "PROD.product"
            ),
            GetCol(
              "T.action"
            ),
            IntConst(
              0
            ),
            IntConst(
              30
            )
          )
        ),
        Or(
          FollowsTok(
            GetCol(
              "B.intent"
            ),
            GetCol(
              "O.one"
            ),
            IntConst(
              0
            ),
            IntConst(
              3
            )
          ),
          FollowsTok(
            GetCol(
              "T.action"
            ),
            GetCol(
              "O.one"
            ),
            IntConst(
              0
            ),
            IntConst(
              3
            )
          )
        )
      ),
      NLJoin(
        True(),
        NLJoin(
          True(),
          NLJoin(
            True(),
            Project(
              (
                "text" => "D.text"
              ),
              $Document
            ),
            Select(
              And(
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/IPron.dict"
                    ),
                    LeftContextTok(
                      GetCol(
                        "B.intent"
                      ),
                      IntConst(
                        5
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/IPron.dict"
                    ),
                    RightContextTok(
                      GetCol(
                        "B.intent"
                      ),
                      IntConst(
                        5
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/ProblematicPhrases.dict"
                    ),
                    LeftContextTok(
                      GetCol(
                        "B.intent"
                      ),
                      IntConst(
                        10
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/country.dict"
                    ),
                    LeftContextTok(
                      GetCol(
                        "B.intent"
                      ),
                      IntConst(
                        5
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/country.dict"
                    ),
                    RightContextTok(
                      GetCol(
                        "B.intent"
                      ),
                      IntConst(
                        5
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/negate.dict"
                    ),
                    LeftContextTok(
                      GetCol(
                        "B.intent"
                      ),
                      IntConst(
                        3
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/negate.dict"
                    ),
                    RightContextTok(
                      GetCol(
                        "B.intent"
                      ),
                      IntConst(
                        3
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/notforsale.dict"
                    ),
                    RightContextTok(
                      GetCol(
                        "B.intent"
                      ),
                      IntConst(
                        5
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/you.dict"
                    ),
                    LeftContextTok(
                      GetCol(
                        "B.intent"
                      ),
                      IntConst(
                        5
                      )
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/you.dict"
                    ),
                    RightContextTok(
                      GetCol(
                        "B.intent"
                      ),
                      IntConst(
                        5
                      )
                    )
                  )
                )
              ),
              Project(
                (
                  "intent" => "B.intent"
                ),
                $buyintents
              )
            )
          ),
          Project(
            (
              "action" => "T.action"
            ),
            $transactions
          )
        ),
        Select(
          Not(
            ContainsDict(
              StringConst(
                "purchases/negate.dict"
              ),
              RightContextTok(
                GetCol(
                  "PROD.product"
                ),
                IntConst(
                  3
                )
              )
            )
          ),
          Project(
            (
              "product" => "PROD.product"
            ),
            $ProductBrand
          )
        )
      ),
      Project(
        (
          "one" => "O.one"
        ),
        $OneItem
      )
    )
  )
);

$LocationTweets_OtherPatterns =
Difference(
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $AllLocationTweets
    )
  ),
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $LocationTweets_Pattern1a
    )
  ));

$LocationTweets_Pattern1a_Correct =
Difference(
  Project(
    (
      "T.tweet" => "tweet",
      "T.place" => "place",
      "T.userNameSpan" => "userNameSpan",
      "T.address" => "address",
      "T.url" => "url"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_Pattern1a
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.place" => "place",
      "T.userNameSpan" => "userNameSpan",
      "T.address" => "address",
      "T.url" => "url"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_Pattern1a_FalsePositives
    )
  ));

$LocationTweets_Pattern1b =
Project(
  (
    "T.tweet" => "tweet",
    "place" => "place",
    "userNameSpan" => "userNameSpan",
    "url" => "url"
  ),
  Regex(/I'm\s+(?:at|in|@)\s+(.+?)(\s+|\s+(?:w\/|with)(?:.)+)(http[:\/a-zA-Z0-9.]+)/, (1 => "place", 2 => "userNameSpan", 3 => "url"), "CASE_INSENSITIVE", "T.tweet",
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $LocationTweets_OtherPatterns
    )
  )
);

$PastProductPurchases =
Union(
  Project(
    (
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "verb" => "D.verb"
      ),
      $BoughtCharacteristicItem
    )
  ),
  Project(
    (
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "verb" => "D.verb"
      ),
      $BoughtArticleItem
    )
  ),
  Project(
    (
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "verb" => "D.verb"
      ),
      $BoughtItem
    )
  )
);

$Remaining_LocationTweets_OtherThanPattern1 =
Difference(
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $LocationTweets_OtherPatterns
    )
  ),
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $LocationTweets_Pattern1b
    )
  ));

$IncorrectPlace_Pattern1a =
Project(
  (
    "T.tweet" => "tweet",
    "T.place" => "place",
    "T.userNameSpan" => "userNameSpan",
    "T.url" => "url",
    "T.address" => "address"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.place"
    ),
    Select(
      And(
        ContainsRegex(
          RegexConst(
            /\(/,
            "SimpleRegex"
          ),
          Chomp(
            GetCol(
              "T.place"
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /\)/,
              "SimpleRegex"
            ),
            Chomp(
              GetCol(
                "T.place"
              )
            )
          )
        )
      ),
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userNameSpan" => "T.userNameSpan"
        ),
        $LocationTweets_Pattern1a_Correct
      )
    )
  )
);

$IntendedProductPurchases =
Union(
  Project(
    (
      "D.text" => "text",
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "text" => "D.text",
        "verb" => "D.verb"
      ),
      $BuyIntentTransactionItem
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "text" => "D.text",
        "verb" => "D.verb"
      ),
      $IntentCharacteristicItem
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "text" => "D.text",
        "verb" => "D.verb"
      ),
      $BuyIntentArticleItem
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "text" => "D.text",
        "verb" => "D.verb"
      ),
      $TransactionCharacteristicItem
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "text" => "D.text",
        "verb" => "D.verb"
      ),
      $ItemIntentOrTransactionOne
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "text" => "D.text",
        "verb" => "D.verb"
      ),
      $TransactionArticleItem
    )
  )
);

$IntendedProducts1a =
Project(
  (
    "Doc.text" => "text",
    "D.verb" => "verb",
    "FunctionCall27867" => "product"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "D.product"
      ),
      GetCol(
        "P.match"
      )
    ) => "FunctionCall27867",
    Select(
      And(
        Contains(
          GetCol(
            "S.text"
          ),
          GetCol(
            "D.product"
          )
        ),
        Contains(
          GetCol(
            "S.text"
          ),
          GetCol(
            "D.verb"
          )
        ),
        FollowsTok(
          GetCol(
            "D.product"
          ),
          GetCol(
            "P.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Not(
          Contains(
            GetCol(
              "D.product"
            ),
            GetCol(
              "P.match"
            )
          )
        )
      ),
      SortMergeJoin(
        ContainedWithin(
          GetCol(
            "P.match"
          ),
          GetCol(
            "S.text"
          )
        ),
        Select(
          Not(
            Contains(
              GetCol(
                "D.product"
              ),
              GetCol(
                "P.match"
              )
            )
          ),
          AdjacentJoin(
            FollowsTok(
              GetCol(
                "D.product"
              ),
              GetCol(
                "P.match"
              ),
              IntConst(
                0
              ),
              IntConst(
                0
              )
            ),
            NLJoin(
              True(),
              Project(
                (
                  "text" => "Doc.text"
                ),
                $Document
              ),
              Project(
                (
                  "product" => "D.product",
                  "verb" => "D.verb"
                ),
                $IntendedProductPurchases
              )
            ),
            Select(
              And(
                Not(
                  ContainsDict(
                    StringConst(
                      "LIWC/prepositions.dict"
                    ),
                    GetCol(
                      "P.match"
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "LIWC/time.dict"
                    ),
                    GetCol(
                      "P.match"
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/article.dict"
                    ),
                    GetCol(
                      "P.match"
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/conj.dict"
                    ),
                    GetCol(
                      "P.match"
                    )
                  )
                )
              ),
              Project(
                (
                  "match" => "P.match"
                ),
                $productMentions
              )
            )
          )
        ),
        Project(
          (
            "text" => "S.text"
          ),
          $Sentences
        )
      )
    )
  )
);

$IntendedProducts1b =
Project(
  (
    "Doc.text" => "text",
    "D.verb" => "verb",
    "FunctionCall27974" => "product"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "P.match"
      ),
      GetCol(
        "D.product"
      )
    ) => "FunctionCall27974",
    Select(
      And(
        Contains(
          GetCol(
            "S.text"
          ),
          GetCol(
            "P.match"
          )
        ),
        Contains(
          GetCol(
            "S.text"
          ),
          GetCol(
            "D.verb"
          )
        ),
        FollowsTok(
          GetCol(
            "P.match"
          ),
          GetCol(
            "D.product"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Not(
          Contains(
            GetCol(
              "D.product"
            ),
            GetCol(
              "P.match"
            )
          )
        )
      ),
      SortMergeJoin(
        Contains(
          GetCol(
            "S.text"
          ),
          GetCol(
            "D.product"
          )
        ),
        SortMergeJoin(
          ContainedWithin(
            GetCol(
              "P.match"
            ),
            GetCol(
              "S.text"
            )
          ),
          NLJoin(
            True(),
            Project(
              (
                "text" => "Doc.text"
              ),
              $Document
            ),
            Select(
              And(
                Not(
                  ContainsDict(
                    StringConst(
                      "LIWC/prepositions.dict"
                    ),
                    GetCol(
                      "P.match"
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "LIWC/time.dict"
                    ),
                    GetCol(
                      "P.match"
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/article.dict"
                    ),
                    GetCol(
                      "P.match"
                    )
                  )
                ),
                Not(
                  ContainsDict(
                    StringConst(
                      "purchases/conj.dict"
                    ),
                    GetCol(
                      "P.match"
                    )
                  )
                )
              ),
              Project(
                (
                  "match" => "P.match"
                ),
                $productMentions
              )
            )
          ),
          Project(
            (
              "text" => "S.text"
            ),
            $Sentences
          )
        ),
        Project(
          (
            "product" => "D.product",
            "verb" => "D.verb"
          ),
          $IntendedProductPurchases
        )
      )
    )
  )
);

$LocationTweets_Pattern2_Candidates =
Project(
  (
    "T.tweet" => "tweet",
    "userNameSpan1" => "userNameSpan1",
    "locationSpan" => "locationSpan",
    "userNameSpan2" => "userNameSpan2",
    "url" => "url"
  ),
  Regex(/(.+)\(@\s+\(?(.*?)((?:\b[wW]\/|with|\))\s+.*?)(http[:\/a-zA-Z0-9.]+)/, (1 => "userNameSpan1", 2 => "locationSpan", 3 => "userNameSpan2", 4 => "url"), "CASE_INSENSITIVE", "T.tweet",
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $Remaining_LocationTweets_OtherThanPattern1
    )
  )
);

$LocationTweets_Pattern2_Candidates_WithUserNameInfo_Explicit =
Union(
  Project(
    (
      "T.tweet" => "tweet",
      "T.locationSpan" => "locationSpan",
      "T.url" => "url",
      "T.userNameSpan1" => "userNameSpan"
    ),
    Select(
      ContainsRegex(
        RegexConst(
          /(?:\bw\/|\bwith)\s{0,10}@/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "T.userNameSpan1"
        )
      ),
      Project(
        (
          "locationSpan" => "T.locationSpan",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userNameSpan1" => "T.userNameSpan1"
        ),
        $LocationTweets_Pattern2_Candidates
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.locationSpan" => "locationSpan",
      "T.url" => "url",
      "T.userNameSpan2" => "userNameSpan"
    ),
    Select(
      ContainsRegex(
        RegexConst(
          /(?:\bw\/|\bwith)\s{0,10}@/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "T.userNameSpan2"
        )
      ),
      Project(
        (
          "locationSpan" => "T.locationSpan",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userNameSpan2" => "T.userNameSpan2"
        ),
        $LocationTweets_Pattern2_Candidates
      )
    )
  )
);

$Remaining_LocationTweets_OtherThanPatternsAll =
Difference(
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $Remaining_LocationTweets_OtherThanPattern1
    )
  ),
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $LocationTweets_Pattern2_Candidates
    )
  ));

$IntendedProductPurchases_StrongProductPhrases =
Union(
  Project(
    (
      "D.text" => "text",
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Consolidate(
      "ContainedWithin",
      GetCol(
        "D.product"
      ),
      Project(
        (
          "product" => "D.product",
          "text" => "D.text",
          "verb" => "D.verb"
        ),
        $IntendedProducts1a
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Consolidate(
      "ContainedWithin",
      GetCol(
        "D.product"
      ),
      Project(
        (
          "product" => "D.product",
          "text" => "D.text",
          "verb" => "D.verb"
        ),
        $IntendedProducts1b
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Consolidate(
      "ContainedWithin",
      GetCol(
        "D.product"
      ),
      Project(
        (
          "product" => "D.product",
          "text" => "D.text",
          "verb" => "D.verb"
        ),
        $IntendedProductPurchases
      )
    )
  )
);

$IntendedPurchases_ProductsExpanded =
Project(
  (
    "D.text" => "text",
    "D.verb" => "verb",
    "D.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.product"
    ),
    Select(
      And(
        Not(
          ContainsDict(
            StringConst(
              "purchases/SarcasmsInIntent.dict"
            ),
            LeftContextTok(
              GetCol(
                "D.verb"
              ),
              IntConst(
                15
              )
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "purchases/SarcasmsInIntent.dict"
            ),
            RightContextTok(
              GetCol(
                "D.verb"
              ),
              IntConst(
                15
              )
            )
          )
        )
      ),
      Project(
        (
          "product" => "D.product",
          "text" => "D.text",
          "verb" => "D.verb"
        ),
        $IntendedProductPurchases_StrongProductPhrases
      )
    )
  )
);

$LocationTweets_PatternIamAt =
Project(
  (
    "T.tweet" => "tweet"
  ),
  Select(
    ContainsRegex(
      RegexConst(
        /(\bI'm|\bI\s{1,10}am)\s+(?:at|@)/,
        "JavaRegex"
      ),
      StringConst(
        "CASE_INSENSITIVE"
      ),
      GetCol(
        "T.tweet"
      )
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $Remaining_LocationTweets_OtherThanPatternsAll
    )
  )
);

$IntendedProductPurchasePhrasesAll =
Union(
  Project(
    (
      "D.text" => "text",
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Consolidate(
      "ContainedWithin",
      GetCol(
        "D.product"
      ),
      Project(
        (
          "product" => "D.product",
          "text" => "D.text",
          "verb" => "D.verb"
        ),
        $IntendedProductPurchases
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.verb" => "verb",
      "D.product" => "product"
    ),
    Consolidate(
      "ContainedWithin",
      GetCol(
        "D.product"
      ),
      Project(
        (
          "product" => "D.product",
          "text" => "D.text",
          "verb" => "D.verb"
        ),
        $IntendedPurchases_ProductsExpanded
      )
    )
  )
);

$LocationTweets_Pattern3IamAt =
Project(
  (
    "T.tweet" => "tweet",
    "place" => "place",
    "infoSpan" => "infoSpan"
  ),
  Regex(/(?:\bat|@)\s+([^\s].+)((?:(?:w\s{0,10}\/\s{0,10}[0-9@]|with\s{0,10}[0-9@]).+)|(?:http[:\/a-zA-Z0-9.]+))/, (1 => "place", 2 => "infoSpan"), "CASE_INSENSITIVE", "T.tweet",
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $LocationTweets_PatternIamAt
    )
  )
);

$LocationTweets_Pattern3_URLInfoSpan =
Project(
  (
    "T.tweet" => "tweet",
    "T.place" => "place",
    "T.infoSpan" => "url",
    "FunctionCall42074" => "userNameSpan"
  ),
  ApplyFunc(
    StringConst(
      ""
    ) => "FunctionCall42074",
    Select(
      ContainsRegex(
        RegexConst(
          /http/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "T.infoSpan"
        )
      ),
      Project(
        (
          "infoSpan" => "T.infoSpan",
          "place" => "T.place",
          "tweet" => "T.tweet"
        ),
        $LocationTweets_Pattern3IamAt
      )
    )
  )
);

$LocationTweets_Pattern3_UserInfoSpan =
Project(
  (
    "T.tweet" => "tweet",
    "T.place" => "place",
    "T.infoSpan" => "userNameSpan",
    "FunctionCall42076" => "url"
  ),
  ApplyFunc(
    StringConst(
      ""
    ) => "FunctionCall42076",
    Select(
      ContainsRegex(
        RegexConst(
          /with|w\//,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "T.infoSpan"
        )
      ),
      Project(
        (
          "infoSpan" => "T.infoSpan",
          "place" => "T.place",
          "tweet" => "T.tweet"
        ),
        $LocationTweets_Pattern3IamAt
      )
    )
  )
);

$IntendedProductPurchasePhrases =
Project(
  (
    "D.text" => "text",
    "D.verb" => "verb",
    "D.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.product"
    ),
    Project(
      (
        "product" => "D.product",
        "text" => "D.text",
        "verb" => "D.verb"
      ),
      $IntendedProductPurchasePhrasesAll
    )
  )
);

$LocationTweets_Pattern3_All =
Union(
  Project(
    (
      "T.tweet" => "tweet",
      "T.userNameSpan" => "userNameSpan",
      "T.place" => "place",
      "T.url" => "url",
      "FunctionCall42078" => "address"
    ),
    ApplyFunc(
      StringConst(
        ""
      ) => "FunctionCall42078",
      Project(
        (
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userNameSpan" => "T.userNameSpan"
        ),
        $LocationTweets_Pattern3_UserInfoSpan
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.userNameSpan" => "userNameSpan",
      "T.place" => "place",
      "T.url" => "url",
      "FunctionCall42080" => "address"
    ),
    ApplyFunc(
      StringConst(
        ""
      ) => "FunctionCall42080",
      Project(
        (
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userNameSpan" => "T.userNameSpan"
        ),
        $LocationTweets_Pattern3_URLInfoSpan
      )
    )
  )
);

$CleanMinusIntendedProductPurchases =
Difference(
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $NoSpamOrPromos
    )
  ),
  Project(
    (
      "D.text" => "text"
    ),
    Project(
      (
        "text" => "D.text"
      ),
      $IntendedProductPurchasePhrases
    )
  ));

$FinalIntentToBuyAndProducts =
Project(
  (
    "D.text" => "text",
    "D.verb" => "verb",
    "D.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.product"
    ),
    Project(
      (
        "product" => "D.product",
        "text" => "D.text",
        "verb" => "D.verb"
      ),
      $IntendedProductPurchasePhrases
    )
  )
);

$IntentProductAndCategories1 =
Project(
  (
    "I.text" => "text",
    "P.category" => "category",
    "P.subcategory" => "subcategory",
    "I.product" => "product",
    "P.product" => "categorizedProduct",
    "P.PriceValue" => "PriceValue"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "P.product"
    ),
    NLJoin(
      Or(
        Equals(
          GetCol(
            "I.product"
          ),
          GetCol(
            "P.product"
          )
        ),
        Overlaps(
          GetCol(
            "I.product"
          ),
          GetCol(
            "P.product"
          )
        )
      ),
      Project(
        (
          "PriceValue" => "P.PriceValue",
          "category" => "P.category",
          "product" => "P.product",
          "subcategory" => "P.subcategory"
        ),
        $CategorizedProducts
      ),
      Project(
        (
          "product" => "I.product",
          "text" => "I.text"
        ),
        $FinalIntentToBuyAndProducts
      )
    )
  )
);

$IntentProductAndCategoriesTmp =
Project(
  (
    "P.text" => "text",
    "P.category" => "category",
    "P.subcategory" => "subcategory",
    "P.product" => "product",
    "P.categorizedProduct" => "categorizedProduct",
    "P.PriceValue" => "PriceValue"
  ),
  Project(
    (
      "PriceValue" => "P.PriceValue",
      "categorizedProduct" => "P.categorizedProduct",
      "category" => "P.category",
      "product" => "P.product",
      "subcategory" => "P.subcategory",
      "text" => "P.text"
    ),
    $IntentProductAndCategories1
  )
);

$NoCategory =
Difference(
  Project(
    (
      "D.text" => "text",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "text" => "D.text"
      ),
      $FinalIntentToBuyAndProducts
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "text" => "D.text"
      ),
      $IntentProductAndCategoriesTmp
    )
  ));

$IntentProductAndCategories =
Project(
  (
    "P.category" => "category",
    "P.subcategory" => "subcategory",
    "P.product" => "product",
    "P.categorizedProduct" => "categorizedProduct",
    "P.PriceValue" => "PriceValue"
  ),
  Project(
    (
      "PriceValue" => "P.PriceValue",
      "categorizedProduct" => "P.categorizedProduct",
      "category" => "P.category",
      "product" => "P.product",
      "subcategory" => "P.subcategory"
    ),
    $IntentProductAndCategoriesTmp
  )
);

$IntentProductNoCategoriesTmp =
Project(
  (
    "FunctionCall42082" => "category",
    "FunctionCall42084" => "subcategory",
    "P.product" => "product",
    "FunctionCall42086" => "PriceValue"
  ),
  ApplyFunc(
    StringConst(
      "unknown"
    ) => "FunctionCall42086",
    ApplyFunc(
      StringConst(
        "unknown"
      ) => "FunctionCall42084",
      ApplyFunc(
        StringConst(
          "unknown"
        ) => "FunctionCall42082",
        Project(
          (
            "product" => "P.product"
          ),
          $NoCategory
        )
      )
    )
  )
);

$IntentProductNoCategories =
Project(
  (
    "P.category" => "category",
    "P.subcategory" => "subcategory",
    "P.product" => "product",
    "P.PriceValue" => "PriceValue"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "P.product"
    ),
    Project(
      (
        "PriceValue" => "P.PriceValue",
        "category" => "P.category",
        "product" => "P.product",
        "subcategory" => "P.subcategory"
      ),
      $IntentProductNoCategoriesTmp
    )
  )
);

$PP_ToFilter =
Union(
  Project(
    (
      "D.PriceValue" => "PriceValue",
      "D.category" => "category",
      "D.product" => "product",
      "D.subcategory" => "subcategory",
      "FunctionCall30691" => "text"
    ),
    ApplyFunc(
      CombineSpans(
        LeftContextTok(
          GetCol(
            "D.product"
          ),
          IntConst(
            10
          )
        ),
        RightContextTok(
          GetCol(
            "D.product"
          ),
          IntConst(
            5
          )
        )
      ) => "FunctionCall30691",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "category" => "D.category",
          "product" => "D.product",
          "subcategory" => "D.subcategory"
        ),
        $IntentProductAndCategories
      )
    )
  ),
  Project(
    (
      "D.PriceValue" => "PriceValue",
      "D.category" => "category",
      "D.product" => "product",
      "D.subcategory" => "subcategory",
      "FunctionCall30745" => "text"
    ),
    ApplyFunc(
      CombineSpans(
        LeftContextTok(
          GetCol(
            "D.product"
          ),
          IntConst(
            10
          )
        ),
        RightContextTok(
          GetCol(
            "D.product"
          ),
          IntConst(
            5
          )
        )
      ) => "FunctionCall30745",
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "category" => "D.category",
          "product" => "D.product",
          "subcategory" => "D.subcategory"
        ),
        $IntentProductNoCategories
      )
    )
  )
);

$PP_Post_exclude =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_PostProductFilter_Dict_WITH_Default_OVER_PP_ToFilter_text
  )
);

$PP_PreProduct_X =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Dictionary("PP_Ignore_Dict" => "Default" , "D.product", "match",
    Project(
      (
        "text" => "D.text",
        "product" => "D.product"
      ),
      $PP_ToFilter
    )
  )
);

$PP_Pre_exclude =
Project(
  (
    "D.text" => "text",
    "match" => "match"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_PreProductFilter_Dict_WITH_Default_OVER_PP_ToFilter_text
  )
);

$PP_ToFilterProducts =
Union(
  Project(
    (
      "D.text" => "text",
      "D.match" => "product"
    ),
    Project(
      (
        "match" => "D.match",
        "text" => "D.text"
      ),
      $PP_PreProduct_X
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.product" => "product"
    ),
    Select(
      ContainsRegex(
        RegexConst(
          /(\sRT\s@)|(http:\/)/,
          "SimpleRegex"
        ),
        GetCol(
          "D.text"
        )
      ),
      Project(
        (
          "product" => "D.product",
          "text" => "D.text"
        ),
        $PP_ToFilter
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.product" => "product"
    ),
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "D.product"
        ),
        GetCol(
          "Post.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          2
        )
      ),
      Project(
        (
          "product" => "D.product",
          "text" => "D.text"
        ),
        $PP_ToFilter
      ),
      Project(
        (
          "match" => "Post.match"
        ),
        $PP_Post_exclude
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.product" => "product"
    ),
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "D.product"
        ),
        GetCol(
          "Pre.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          2
        )
      ),
      Project(
        (
          "product" => "D.product",
          "text" => "D.text"
        ),
        $PP_ToFilter
      ),
      Project(
        (
          "match" => "Pre.match"
        ),
        $PP_Pre_exclude
      )
    )
  )
);

$PP_FilteredProductPreConsolidate =
Difference(
  Project(
    (
      "D.text" => "text",
      "D.product" => "product"
    ),
    Project(
      (
        "product" => "D.product",
        "text" => "D.text"
      ),
      $PP_ToFilter
    )
  ),
  Project(
    (
      "D.text" => "text",
      "D.product" => "product"
    ),
    Select(
      Overlaps(
        GetCol(
          "D.text"
        ),
        GetCol(
          "F.text"
        )
      ),
      SortMergeJoin(
        Overlaps(
          GetCol(
            "D.product"
          ),
          GetCol(
            "F.product"
          )
        ),
        Project(
          (
            "product" => "D.product",
            "text" => "D.text"
          ),
          $PP_ToFilter
        ),
        Project(
          (
            "product" => "F.product",
            "text" => "F.text"
          ),
          $PP_ToFilterProducts
        )
      )
    )
  ));

$PP_FilteredProduct =
Project(
  (
    "D.text" => "text",
    "D.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.product"
    ),
    Project(
      (
        "product" => "D.product",
        "text" => "D.text"
      ),
      $PP_FilteredProductPreConsolidate
    )
  )
);

$PP_FilteredProduct_Context =
Project(
  (
    "D.text" => "text",
    "D.product" => "product",
    "FunctionCall30993" => "r_context"
  ),
  ApplyFunc(
    RightContextTok(
      GetCol(
        "D.product"
      ),
      IntConst(
        1
      )
    ) => "FunctionCall30993",
    Project(
      (
        "product" => "D.product",
        "text" => "D.text"
      ),
      $PP_FilteredProduct
    )
  )
);

$PP_Preps_X =
Project(
  (
    "D.text" => "text",
    "p_match" => "p_match"
  ),
  Dictionary("prepositions.dict" => "Default" , "D.text", "p_match",
    Project(
      (
        "text" => "D.text"
      ),
      $PP_FilteredProduct
    )
  )
);

$PP_ProdsWithDelim =
Union(
  Project(
    (
      "FunctionCall42088" => "prov",
      "D.product" => "product",
      "D.text" => "text"
    ),
    ApplyFunc(
      StringConst(
        "prep"
      ) => "FunctionCall42088",
      Select(
        Overlaps(
          GetCol(
            "D.text"
          ),
          GetCol(
            "P.text"
          )
        ),
        AdjacentJoin(
          FollowsTok(
            GetCol(
              "D.product"
            ),
            GetCol(
              "P.p_match"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          Project(
            (
              "product" => "D.product",
              "text" => "D.text"
            ),
            $PP_FilteredProduct
          ),
          Project(
            (
              "p_match" => "P.p_match",
              "text" => "P.text"
            ),
            $PP_Preps_X
          )
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42090" => "prov",
      "D.product" => "product",
      "D.text" => "text"
    ),
    ApplyFunc(
      StringConst(
        "delim"
      ) => "FunctionCall42090",
      Select(
        MatchesRegex(
          RegexConst(
            /\s*[$\.0-9\!\?\:\,\:](.)*/,
            "SimpleRegex"
          ),
          GetCol(
            "D.r_context"
          )
        ),
        Project(
          (
            "product" => "D.product",
            "r_context" => "D.r_context",
            "text" => "D.text"
          ),
          $PP_FilteredProduct_Context
        )
      )
    )
  )
);

$PP_PreProductCands =
Project(
  (
    "D.text" => "text",
    "D.product" => "product",
    "match" => "match"
  ),
  Dictionary("PP_PreProduct_Dict" => "Default" , "D.text", "match",
    Project(
      (
        "product" => "D.product",
        "text" => "D.text"
      ),
      $PP_ProdsWithDelim
    )
  )
);

$PP_PreProduct =
Project(
  (
    "P.product" => "product",
    "P.match" => "match"
  ),
  Select(
    FollowsTok(
      GetCol(
        "P.match"
      ),
      GetCol(
        "P.product"
      ),
      IntConst(
        0
      ),
      IntConst(
        1
      )
    ),
    Project(
      (
        "match" => "P.match",
        "product" => "P.product"
      ),
      $PP_PreProductCands
    )
  )
);

$PP_PostAndPreProduct =
Project(
  (
    "D.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.product"
    ),
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "D.product"
        ),
        GetCol(
          "P.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "product" => "D.product"
        ),
        $PP_ProdsWithDelim
      ),
      Project(
        (
          "match" => "P.match"
        ),
        $PP_PreProduct
      )
    )
  )
);

$PP_FilteredProducts_Out =
Project(
  (
    "D.product" => "product",
    "T.category" => "category",
    "T.PriceValue" => "PriceValue",
    "T.subcategory" => "subcategory"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.product"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "T.product"
        ),
        GetCol(
          "D.product"
        )
      ),
      Project(
        (
          "PriceValue" => "T.PriceValue",
          "category" => "T.category",
          "product" => "T.product",
          "subcategory" => "T.subcategory"
        ),
        $PP_ToFilter
      ),
      Project(
        (
          "product" => "D.product"
        ),
        $PP_PostAndPreProduct
      )
    )
  )
);

$PP_Filtered_IntentProductAndCategories =
Project(
  (
    "D.product" => "product",
    "D.category" => "category",
    "D.PriceValue" => "PriceValue",
    "D.subcategory" => "subcategory"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.product"
    ),
    Select(
      Not(
        Equals(
          GetString(
            GetCol(
              "D.category"
            )
          ),
          GetString(
            StringConst(
              "unknown"
            )
          )
        )
      ),
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "category" => "D.category",
          "product" => "D.product",
          "subcategory" => "D.subcategory"
        ),
        $PP_FilteredProducts_Out
      )
    )
  )
);

$PP_Filtered_IntentProductNoCategories =
Project(
  (
    "D.product" => "product",
    "D.category" => "category",
    "D.PriceValue" => "PriceValue",
    "D.subcategory" => "subcategory"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.product"
    ),
    Select(
      Equals(
        GetString(
          GetCol(
            "D.category"
          )
        ),
        GetString(
          StringConst(
            "unknown"
          )
        )
      ),
      Project(
        (
          "PriceValue" => "D.PriceValue",
          "category" => "D.category",
          "product" => "D.product",
          "subcategory" => "D.subcategory"
        ),
        $PP_FilteredProducts_Out
      )
    )
  )
);

$_{"Candidates_Strong_FathersDay_ExtendSpan❡subquery1"} =
Project(
  (
    "T.mention" => "mention",
    "T.tweet" => "tweet",
    "dayText" => "dayText"
  ),
  Regex(/\bday/, (0 => "dayText"), "CASE_INSENSITIVE", "T.rightSpan",
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "rightSpan" => "T.rightSpan"
      ),
      $Candidates_Strong_FathersDay
    )
  )
);

$_{"Candidates_Strong_MothersDay_ExtendSpan❡subquery1"} =
Project(
  (
    "T.mention" => "mention",
    "T.tweet" => "tweet",
    "dayText" => "dayText"
  ),
  Regex(/\bday/, (0 => "dayText"), "CASE_INSENSITIVE", "T.rightSpan",
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "rightSpan" => "T.rightSpan"
      ),
      $Candidates_Strong_MothersDay
    )
  )
);

$_{"HasChildren_PatternAge❡subquery1"} =
Select(
  FollowsTok(
    GetCol(
      "key"
    ),
    GetCol(
      "mention"
    ),
    IntConst(
      0
    ),
    IntConst(
      1
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "mention" => "mention"
    ),
    FastRegex(/(?:is|are)\s[0-9]+/, (0 => "mention"), "CASE_INSENSITIVE", "T.tweet",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet"
        ),
        $Candidates_HasChildren_Generic_StrongPat
      )
    )
  )
);

$_{"HasChildren_PatternRegex❡subquery1"} =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "mention" => "mention"
  ),
  FastRegex(/(?:my\sson's|my\sdaughter's).+/, (0 => "mention"), "CASE_INSENSITIVE", "T.tweet",
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $Candidates_HasChildren_Generic_StrongPat
    )
  )
);

$_{"HasChildren_PatternWithUserName❡subquery1"} =
Select(
  FollowsTok(
    GetCol(
      "key"
    ),
    GetCol(
      "mention"
    ),
    IntConst(
      0
    ),
    IntConst(
      1
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "mention" => "mention"
    ),
    FastRegex(/@[a-zA-Z0-9_]{1,15}/, (0 => "mention"), "DOTALL", "T.tweet",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet"
        ),
        $Candidates_HasChildren_Generic_StrongPat
      )
    )
  )
);

$_{"LifeEvents_Anniversary_Strong❡subquery1"} =
Union(
  Project(
    (
      "T.key" => "key",
      "FunctionCall42092" => "range",
      "T.tweet" => "tweet"
    ),
    ApplyFunc(
      StringConst(
        ""
      ) => "FunctionCall42092",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet"
        ),
        $LifeEvents_Anniversary_Dict
      )
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.range" => "range",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "range" => "T.range",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_AnnivRange_Regex
    )
  )
);

$_{"BabyWishes_AllStrongPatterns❡subquery1"} =
Union(
  Project(
    (
      "T.key" => "key",
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_BabyWishes_StrongMentions_Dict
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_BabyWishes_StrongMentions_Regex
    )
  )
);

$_{"Candidates_LifeEvents_JobRelated_Events_JobRelatedPhrases❡subquery1"} =
Project(
  (
    "CC.key" => "key",
    "CC.tweet" => "tweet",
    "phrase" => "phrase"
  ),
  Dictionary("JobRelatedPhrases.dict" => "IgnoreCase" , "CC.tweet", "phrase",
    Project(
      (
        "key" => "CC.key",
        "tweet" => "CC.tweet"
      ),
      $Candidates_LifeEvents_JobRelated_Events
    )
  )
);

$_{"LifeEvents_IsMarried_Generic_StrongPat1❡subquery1"} =
Consolidate(
  "ContainedWithin",
  GetCol(
    "mention"
  ),
  Project(
    (
      "D.key" => "key",
      "D.tweet" => "tweet",
      "mention" => "mention"
    ),
    Dictionary("genericMarriageClues.dict" => "Default" , "D.tweet", "mention",
      Project(
        (
          "key" => "D.key",
          "tweet" => "D.tweet"
        ),
        $Candidates_IsMarried_GenericStrongPat_Filtered
      )
    )
  )
);

$_{"JO_ProfessionsWithCategory_3❡subquery1"} =
Difference(
  Project(
    (
      "J.job_match" => "job_match"
    ),
    Project(
      (
        "job_match" => "J.job_match"
      ),
      $JO_Tokens
    )
  ),
  Project(
    (
      "J.job_match" => "job_match"
    ),
    Project(
      (
        "job_match" => "J.job_match"
      ),
      $JO_JobsUnsplitted
    )
  ));

$_{"Candidates_JobEvents_Wishes❡subquery1"} =
Project(
  (
    "CC.tweet" => "tweet",
    "phrase" => "phrase"
  ),
  Union(
    Project(
      (
        "tweet" => "CC.tweet",
        "__sdm_match" => "phrase"
      ),
      $SDM_OUTPUT_CongratulatoryKeywords_dict_WITH_IgnoreCase_OVER_Candidates_JobEvents_Wishes_tweet_tweet
    ),
    Project(
      (
        "tweet" => "CC.tweet",
        "__sdm_match" => "phrase"
      ),
      $SDM_OUTPUT_ConsolatoryDict_WITH_IgnoreCase_OVER_Candidates_JobEvents_Wishes_tweet_tweet
    )
  )
);

$_{"LifeEvents_BdayPattern1_Filtered1❡subquery1"} =
Difference(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_Bday_Pattern1
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_BdayPattern1_FalsePos
    )
  ));

$_{"LifeEvents_JobRelated_StatusWorking❡subquery1"} =
Difference(
  Project(
    (
      "SW.mention" => "mention",
      "SW.key" => "key",
      "SW.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "SW.key",
        "mention" => "SW.mention",
        "tweet" => "SW.tweet"
      ),
      $LifeEvents_JobRelated_StatusWork
    )
  ),
  Project(
    (
      "NW.mention" => "mention",
      "NW.key" => "key",
      "NW.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "NW.key",
        "mention" => "NW.mention",
        "tweet" => "NW.tweet"
      ),
      $JobRelated_StatusWorkNeedWork
    )
  ));

$_{"LifeEvents_JobRelated_Status_HasJob❡subquery1"} =
Difference(
  Project(
    (
      "UT.mention" => "mention",
      "UT.key" => "key",
      "UT.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "UT.key",
        "mention" => "UT.mention",
        "tweet" => "UT.tweet"
      ),
      $LifeEvents_JobRelated_StatusWithoutWork
    )
  ),
  Project(
    (
      "UT.mention" => "mention",
      "UT.key" => "key",
      "UT.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "UT.key",
        "mention" => "UT.mention",
        "tweet" => "UT.tweet"
      ),
      $LifeEvents_JobRelated_Status_JobLess
    )
  ));

$_{"RelocationTweets_PatternAll_ToLocation❡subquery1❡subquery1"} =
Difference(
  Project(
    (
      "T.key" => "key",
      "T.locationNameSpan" => "locationNameSpan",
      "T.locationName" => "locationName",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "locationName" => "T.locationName",
        "locationNameSpan" => "T.locationNameSpan",
        "tweet" => "T.tweet"
      ),
      $RelocationTweets_PatternAll_LocationNameExtracted
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.locationNameSpan" => "locationNameSpan",
      "T.locationName" => "locationName",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "locationName" => "T.locationName",
        "locationNameSpan" => "T.locationNameSpan",
        "tweet" => "T.tweet"
      ),
      $RelocationTweets_PatternAll_FalsePositives
    )
  ));

$_{"RelocationTweets_PatternAll_ToLocation❡subquery1"} =
Project(
  (
    "T.key" => "key",
    "T.locationNameSpan" => "locationNameSpan",
    "T.locationName" => "locationName",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.locationName"
    ),
    Project(
      (
        "key" => "T.key",
        "locationName" => "T.locationName",
        "locationNameSpan" => "T.locationNameSpan",
        "tweet" => "T.tweet"
      ),
      $_{"RelocationTweets_PatternAll_ToLocation❡subquery1❡subquery1"}
    )
  )
);

$_{"LocationTweets_Pattern2_WithoutUserNameInfo❡subquery1"} =
Difference(
  Project(
    (
      "T.tweet" => "tweet",
      "T.locationSpan" => "locationSpan",
      "T.url" => "url"
    ),
    Project(
      (
        "locationSpan" => "T.locationSpan",
        "tweet" => "T.tweet",
        "url" => "T.url"
      ),
      $LocationTweets_Pattern2_Candidates
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.locationSpan" => "locationSpan",
      "T.url" => "url"
    ),
    Project(
      (
        "locationSpan" => "T.locationSpan",
        "tweet" => "T.tweet",
        "url" => "T.url"
      ),
      $LocationTweets_Pattern2_Candidates_WithUserNameInfo_Explicit
    )
  ));

$_{"CorrectPlace_Pattern1a❡subquery1"} =
Project(
  (
    "T.tweet" => "tweet",
    "T.url" => "url",
    "T.userNameSpan" => "userNameSpan",
    "T.address" => "address",
    "correct_place" => "correct_place",
    "address_part" => "address_part"
  ),
  Regex(/(.+)\((.+)/, (1 => "correct_place", 2 => "address_part"), "DOTALL", "T.place",
    Project(
      (
        "address" => "T.address",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan",
        "place" => "T.place"
      ),
      $IncorrectPlace_Pattern1a
    )
  )
);

$Sentences1_1 =
Project(
  (
    "D.text" => "text",
    "boundary" => "boundary"
  ),
  Regex(/(([.?!]+)|(\n\s*\n))/, (0 => "boundary"), "CANON_EQ", "D.text",
    Project(
      (
        "text" => "D.text"
      ),
      $CleanMinusIntendedProductPurchases
    )
  )
);

$Candidates_Strong_FathersDay_ExtendSpan =
Project(
  (
    "FunctionCall15630" => "mention",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    CombineSpans(
      GetCol(
        "T.mention"
      ),
      GetCol(
        "T.dayText"
      )
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "T.mention"
        ),
        GetCol(
          "T.dayText"
        )
      ) => "FunctionCall15630",
      Select(
        FollowsTok(
          GetCol(
            "T.mention"
          ),
          GetCol(
            "T.dayText"
          ),
          IntConst(
            0
          ),
          IntConst(
            140
          )
        ),
        Project(
          (
            "dayText" => "T.dayText",
            "mention" => "T.mention",
            "tweet" => "T.tweet"
          ),
          $_{"Candidates_Strong_FathersDay_ExtendSpan❡subquery1"}
        )
      )
    )
  )
);

$Candidates_Strong_MothersDay_ExtendSpan =
Project(
  (
    "FunctionCall14587" => "mention",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    CombineSpans(
      GetCol(
        "T.mention"
      ),
      GetCol(
        "T.dayText"
      )
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "T.mention"
        ),
        GetCol(
          "T.dayText"
        )
      ) => "FunctionCall14587",
      Select(
        FollowsTok(
          GetCol(
            "T.mention"
          ),
          GetCol(
            "T.dayText"
          ),
          IntConst(
            0
          ),
          IntConst(
            140
          )
        ),
        Project(
          (
            "dayText" => "T.dayText",
            "mention" => "T.mention",
            "tweet" => "T.tweet"
          ),
          $_{"Candidates_Strong_MothersDay_ExtendSpan❡subquery1"}
        )
      )
    )
  )
);

$HasChildren_PatternAge =
Project(
  (
    "T.key" => "key",
    "FunctionCall14262" => "mention",
    "T.tweet" => "tweet"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.key"
      ),
      GetCol(
        "T.mention"
      )
    ) => "FunctionCall14262",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"HasChildren_PatternAge❡subquery1"}
    )
  )
);

$HasChildren_PatternRegex =
Project(
  (
    "T.key" => "key",
    "T.mention" => "mention",
    "T.tweet" => "tweet"
  ),
  Project(
    (
      "key" => "T.key",
      "mention" => "T.mention",
      "tweet" => "T.tweet"
    ),
    $_{"HasChildren_PatternRegex❡subquery1"}
  )
);

$HasChildren_PatternWithUserName =
Project(
  (
    "T.key" => "key",
    "FunctionCall14314" => "mention",
    "T.tweet" => "tweet"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.key"
      ),
      GetCol(
        "T.mention"
      )
    ) => "FunctionCall14314",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"HasChildren_PatternWithUserName❡subquery1"}
    )
  )
);

$LifeEvents_Anniversary_Strong =
Project(
  (
    "T.key" => "key",
    "T.range" => "range",
    "T.tweet" => "tweet"
  ),
  Select(
    Not(
      ContainsDict(
        StringConst(
          "OtherRef_FilterWordsDict"
        ),
        RightContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            3
          )
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "range" => "T.range",
        "tweet" => "T.tweet"
      ),
      $_{"LifeEvents_Anniversary_Strong❡subquery1"}
    )
  )
);

$LifeEvents_WeddingAndAnniv_StrongAll =
Union(
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_Marriage_Strong
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_Anniversary_Strong
    )
  )
);

$BabyWishes_AllStrongPatterns =
Project(
  (
    "T.key" => "key",
    "T.mention" => "mention",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"BabyWishes_AllStrongPatterns❡subquery1"}
    )
  )
);

$Candidates_LifeEvents_JobRelated_Events_JobRelatedPhrases =
Project(
  (
    "JS.key" => "key",
    "JS.tweet" => "tweet",
    "JS.phrase" => "phrase"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "JS.phrase"
    ),
    Select(
      And(
        Not(
          ContainsDict(
            StringConst(
              "ambiguousPhrases.dict"
            ),
            LeftContextTok(
              GetCol(
                "JS.phrase"
              ),
              IntConst(
                3
              )
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "wishfulThinking.dict"
            ),
            LeftContextTok(
              GetCol(
                "JS.phrase"
              ),
              IntConst(
                3
              )
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "LifeChangingEventsDict_JobRelated_Events_AmbiguousPhrasesDict"
            ),
            StringConst(
              "IgnoreCase"
            ),
            LeftContextTok(
              GetCol(
                "JS.phrase"
              ),
              IntConst(
                3
              )
            )
          )
        )
      ),
      Project(
        (
          "key" => "JS.key",
          "phrase" => "JS.phrase",
          "tweet" => "JS.tweet"
        ),
        $_{"Candidates_LifeEvents_JobRelated_Events_JobRelatedPhrases❡subquery1"}
      )
    )
  )
);

$LifeEvents_IsMarried_Generic_StrongPat1 =
Project(
  (
    "D.key" => "key",
    "D.mention" => "mention",
    "D.tweet" => "tweet"
  ),
  Project(
    (
      "key" => "D.key",
      "mention" => "D.mention",
      "tweet" => "D.tweet"
    ),
    $_{"LifeEvents_IsMarried_Generic_StrongPat1❡subquery1"}
  )
);

$LifeEvents_JobRelated_Events_Mentions1 =
Project(
  (
    "CS.tweet" => "tweet",
    "CS.key" => "key",
    "CS.phrase" => "phrase",
    "FunctionCall16837" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    CombineSpans(
      GetCol(
        "CS.phrase"
      ),
      GetCol(
        "CS.key"
      )
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "CS.phrase"
        ),
        GetCol(
          "CS.key"
        )
      ) => "FunctionCall16837",
      Select(
        FollowsTok(
          GetCol(
            "CS.phrase"
          ),
          GetCol(
            "CS.key"
          ),
          IntConst(
            0
          ),
          IntConst(
            3
          )
        ),
        Project(
          (
            "key" => "CS.key",
            "phrase" => "CS.phrase",
            "tweet" => "CS.tweet"
          ),
          $Candidates_LifeEvents_JobRelated_Events_JobRelatedPhrases
        )
      )
    )
  )
);

$LifeEvents_JobRelated_Events_Mentions2 =
Project(
  (
    "CS.tweet" => "tweet",
    "CS.key" => "key",
    "CS.phrase" => "phrase",
    "CS.phrase" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    CombineSpans(
      GetCol(
        "CS.phrase"
      ),
      GetCol(
        "CS.key"
      )
    ),
    Select(
      Contains(
        GetCol(
          "CS.phrase"
        ),
        GetCol(
          "CS.key"
        )
      ),
      Project(
        (
          "key" => "CS.key",
          "phrase" => "CS.phrase",
          "tweet" => "CS.tweet"
        ),
        $Candidates_LifeEvents_JobRelated_Events_JobRelatedPhrases
      )
    )
  )
);

$IsMarried_Generic_OtherStrongPatterns =
Difference(
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $Candidates_IsMarried_GenericStrongPat_Filtered
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_IsMarried_Generic_StrongPat1
    )
  ));

$LifeEvents_JobRelated_Events_Mentions =
Union(
  Project(
    (
      "CS.tweet" => "tweet",
      "CS.key" => "key",
      "CS.phrase" => "phrase",
      "CS.mention" => "mention"
    ),
    Project(
      (
        "key" => "CS.key",
        "mention" => "CS.mention",
        "phrase" => "CS.phrase",
        "tweet" => "CS.tweet"
      ),
      $LifeEvents_JobRelated_Events_Mentions1
    )
  ),
  Project(
    (
      "CS.tweet" => "tweet",
      "CS.key" => "key",
      "CS.phrase" => "phrase",
      "CS.phrase" => "mention"
    ),
    Project(
      (
        "key" => "CS.key",
        "phrase" => "CS.phrase",
        "tweet" => "CS.tweet"
      ),
      $LifeEvents_JobRelated_Events_Mentions2
    )
  )
);

$LifeEvents_JobRelated_Events_Self_GotJobMentions =
Project(
  (
    "CM.tweet" => "tweet",
    "CM.key" => "key",
    "CM.mention" => "mention",
    "FunctionCall16991" => "statement"
  ),
  ApplyFunc(
    CombineSpans(
      LeftContextTok(
        GetCol(
          "CM.mention"
        ),
        IntConst(
          1
        )
      ),
      GetCol(
        "CM.mention"
      )
    ) => "FunctionCall16991",
    Select(
      And(
        ContainsRegex(
          RegexConst(
            /^(?:got)/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "CM.mention"
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /(?:done|offer|call|site)/,
              "SimpleRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            RightContextTok(
              GetCol(
                "CM.mention"
              ),
              IntConst(
                2
              )
            )
          )
        ),
        Or(
          ContainsRegex(
            RegexConst(
              /^(?:got)/,
              "JavaRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            GetCol(
              "CM.tweet"
            )
          ),
          ContainsRegex(
            RegexConst(
              /\bI\b|\./,
              "JavaRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            LeftContextTok(
              GetCol(
                "CM.mention"
              ),
              IntConst(
                1
              )
            )
          ),
          ContainsDict(
            StringConst(
              "LifeChangingEventsDict_JobRelated_Events_RelationsDict"
            ),
            StringConst(
              "IgnoreCase"
            ),
            LeftContextTok(
              GetCol(
                "CM.mention"
              ),
              IntConst(
                2
              )
            )
          )
        )
      ),
      Project(
        (
          "key" => "CM.key",
          "mention" => "CM.mention",
          "tweet" => "CM.tweet"
        ),
        $LifeEvents_JobRelated_Events_Mentions
      )
    )
  )
);

$Candidates_JobEvents_Wishes =
Project(
  (
    "JS.phrase" => "word",
    "JS.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "JS.phrase"
    ),
    Project(
      (
        "phrase" => "JS.phrase",
        "tweet" => "JS.tweet"
      ),
      $_{"Candidates_JobEvents_Wishes❡subquery1"}
    )
  )
);

$JobEvents_Wishes_Pattern_Candidiate =
Project(
  (
    "JS.word" => "word",
    "JS.tweet" => "tweet",
    "username" => "username"
  ),
  Regex(/@([a-zA-Z0-9_]{1,15})/, (1 => "username"), "DOTALL", "JS.tweet",
    Project(
      (
        "tweet" => "JS.tweet",
        "word" => "JS.word"
      ),
      $Candidates_JobEvents_Wishes
    )
  )
);

$JobRelated_Events_Wishes_Pattern_mentions =
Project(
  (
    "CS.key" => "key",
    "JS.word" => "word",
    "JS.tweet" => "tweet",
    "JS.username" => "username",
    "FunctionCall18028" => "mention"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "JS.word"
      ),
      GetCol(
        "CS.key"
      )
    ) => "FunctionCall18028",
    Select(
      And(
        FollowsTok(
          GetCol(
            "JS.word"
          ),
          GetCol(
            "CS.key"
          ),
          IntConst(
            0
          ),
          IntConst(
            7
          )
        ),
        GreaterThan(
          GetBegin(
            GetCol(
              "CS.key"
            )
          ),
          GetBegin(
            GetCol(
              "JS.word"
            )
          )
        )
      ),
      HashJoin(
        Equals(
          GetCol(
            "CS.tweet"
          ),
          GetCol(
            "JS.tweet"
          )
        ),
        Project(
          (
            "key" => "CS.key",
            "tweet" => "CS.tweet"
          ),
          $Candidates_JobEvents_Wishes_tweet
        ),
        Select(
          Not(
            ContainsRegex(
              RegexConst(
                /\bRT\b/,
                "JavaRegex"
              ),
              LeftContextTok(
                GetCol(
                  "JS.word"
                ),
                IntConst(
                  20
                )
              )
            )
          ),
          Project(
            (
              "tweet" => "JS.tweet",
              "username" => "JS.username",
              "word" => "JS.word"
            ),
            $JobEvents_Wishes_Pattern_Candidiate
          )
        )
      )
    )
  )
);

$LifeEvents_BdayPattern1_Filtered1 =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "FunctionCall11340" => "rightSpan"
  ),
  ApplyFunc(
    CombineSpans(
      RightContextTok(
        GetCol(
          "T.userName"
        ),
        IntConst(
          1
        )
      ),
      GetCol(
        "T.tweet"
      )
    ) => "FunctionCall11340",
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"LifeEvents_BdayPattern1_Filtered1❡subquery1"}
    )
  )
);

$LifeEvents_JobRelated_Events_Mentions_Minus_GotJob =
Difference(
  Project(
    (
      "CM.tweet" => "tweet",
      "CM.key" => "key",
      "CM.mention" => "mention"
    ),
    Project(
      (
        "key" => "CM.key",
        "mention" => "CM.mention",
        "tweet" => "CM.tweet"
      ),
      $LifeEvents_JobRelated_Events_Mentions
    )
  ),
  Project(
    (
      "CM.tweet" => "tweet",
      "CM.key" => "key",
      "CM.mention" => "mention"
    ),
    Project(
      (
        "key" => "CM.key",
        "mention" => "CM.mention",
        "tweet" => "CM.tweet"
      ),
      $LifeEvents_JobRelated_Events_Self_GotJobMentions
    )
  ));

$JobRelated_Events_Wishes_Pattern1_mentions =
Project(
  (
    "JS.key" => "key",
    "JS.word" => "word",
    "JS.tweet" => "tweet",
    "JS.username" => "username",
    "JS.mention" => "mention"
  ),
  Select(
    Not(
      Contains(
        GetCol(
          "JS.mention"
        ),
        GetCol(
          "JS.username"
        )
      )
    ),
    Project(
      (
        "key" => "JS.key",
        "mention" => "JS.mention",
        "tweet" => "JS.tweet",
        "username" => "JS.username",
        "word" => "JS.word"
      ),
      $JobRelated_Events_Wishes_Pattern_mentions
    )
  )
);

$JobRelated_Events_Wishes_Pattern1a =
Project(
  (
    "JS.key" => "key",
    "JS.word" => "word",
    "JS.tweet" => "tweet",
    "JS.mention" => "mention",
    "JS.username" => "tag"
  ),
  Consolidate(
    "NotContainedWithin",
    CombineSpans(
      Chomp(
        GetCol(
          "JS.username"
        )
      ),
      Chomp(
        GetCol(
          "JS.mention"
        )
      )
    ),
    Select(
      And(
        FollowsTok(
          GetCol(
            "JS.username"
          ),
          GetCol(
            "JS.mention"
          ),
          IntConst(
            0
          ),
          IntConst(
            5
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "FalsePositiveDict"
            ),
            RightContextTok(
              GetCol(
                "JS.mention"
              ),
              IntConst(
                2
              )
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /(?:nice|good|great)/,
              "SimpleRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            GetCol(
              "JS.mention"
            )
          )
        )
      ),
      Project(
        (
          "key" => "JS.key",
          "mention" => "JS.mention",
          "tweet" => "JS.tweet",
          "username" => "JS.username",
          "word" => "JS.word"
        ),
        $JobRelated_Events_Wishes_Pattern1_mentions
      )
    )
  )
);

$JobRelated_Events_Wishes_Pattern1b =
Project(
  (
    "JS.key" => "key",
    "JS.word" => "word",
    "JS.tweet" => "tweet",
    "JS.mention" => "mention",
    "JS.username" => "tag"
  ),
  Select(
    And(
      FollowsTok(
        GetCol(
          "JS.mention"
        ),
        GetCol(
          "JS.username"
        ),
        IntConst(
          0
        ),
        IntConst(
          3
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "FalsePositiveDict"
          ),
          RightContextTok(
            GetCol(
              "JS.mention"
            ),
            IntConst(
              2
            )
          )
        )
      ),
      Not(
        ContainsRegex(
          RegexConst(
            /(?:nice|good|great)/,
            "SimpleRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "JS.mention"
          )
        )
      )
    ),
    Project(
      (
        "key" => "JS.key",
        "mention" => "JS.mention",
        "tweet" => "JS.tweet",
        "username" => "JS.username",
        "word" => "JS.word"
      ),
      $JobRelated_Events_Wishes_Pattern1_mentions
    )
  )
);

$JobRelated_Events_Wishes_Pattern2 =
Project(
  (
    "JS.key" => "key",
    "JS.word" => "word",
    "JS.tweet" => "tweet",
    "JS.username" => "tag",
    "JS.mention" => "mention"
  ),
  Select(
    And(
      Contains(
        GetCol(
          "JS.mention"
        ),
        GetCol(
          "JS.username"
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "FalsePositiveDict"
          ),
          RightContextTok(
            GetCol(
              "JS.mention"
            ),
            IntConst(
              2
            )
          )
        )
      )
    ),
    Project(
      (
        "key" => "JS.key",
        "mention" => "JS.mention",
        "tweet" => "JS.tweet",
        "username" => "JS.username",
        "word" => "JS.word"
      ),
      $JobRelated_Events_Wishes_Pattern_mentions
    )
  )
);

$JobRelated_Events_Wishes_Union =
Union(
  Project(
    (
      "A.key" => "key",
      "A.word" => "word",
      "A.tweet" => "tweet",
      "A.mention" => "mention",
      "A.tag" => "tag"
    ),
    Project(
      (
        "key" => "A.key",
        "mention" => "A.mention",
        "tag" => "A.tag",
        "tweet" => "A.tweet",
        "word" => "A.word"
      ),
      $JobRelated_Events_Wishes_Pattern1a
    )
  ),
  Project(
    (
      "B.key" => "key",
      "B.word" => "word",
      "B.tweet" => "tweet",
      "B.mention" => "mention",
      "B.tag" => "tag"
    ),
    Project(
      (
        "key" => "B.key",
        "mention" => "B.mention",
        "tag" => "B.tag",
        "tweet" => "B.tweet",
        "word" => "B.word"
      ),
      $JobRelated_Events_Wishes_Pattern1b
    )
  ),
  Project(
    (
      "P2.key" => "key",
      "P2.word" => "word",
      "P2.tweet" => "tweet",
      "P2.mention" => "mention",
      "P2.tag" => "tag"
    ),
    Project(
      (
        "key" => "P2.key",
        "mention" => "P2.mention",
        "tag" => "P2.tag",
        "tweet" => "P2.tweet",
        "word" => "P2.word"
      ),
      $JobRelated_Events_Wishes_Pattern2
    )
  )
);

$LifeEvents_BdayPattern1_FP =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.rightSpan" => "rightSpan",
    "T.tweet" => "tweet"
  ),
  Select(
    Or(
      ContainsRegex(
        RegexConst(
          /@[a-zA-Z0-9_]{1,15}/,
          "SimpleRegex"
        ),
        GetCol(
          "T.rightSpan"
        )
      ),
      ContainsRegex(
        RegexConst(
          /\b(?:to|2|on\sthe|for)\b/,
          "JavaRegex"
        ),
        RightContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "rightSpan" => "T.rightSpan",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_BdayPattern1_Filtered1
    )
  )
);

$LifeEvents_BdayPattern1_FP_Refined =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.rightSpan" => "rightSpan",
    "T.tweet" => "tweet"
  ),
  Select(
    Or(
      ContainsRegex(
        RegexConst(
          /@[a-zA-Z0-9_]{1,15}/,
          "SimpleRegex"
        ),
        RightContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            3
          )
        )
      ),
      ContainsDict(
        StringConst(
          "Bday_FilterWordsDict"
        ),
        RightContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            3
          )
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "rightSpan" => "T.rightSpan",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_BdayPattern1_FP
    )
  )
);

$LifeEvents_BdayPattern1_Filtered =
Difference(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.rightSpan" => "rightSpan",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "rightSpan" => "T.rightSpan",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_BdayPattern1_Filtered1
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.rightSpan" => "rightSpan",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "rightSpan" => "T.rightSpan",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_BdayPattern1_FP_Refined
    )
  ));

$LifeEvents_BdayPattern1_Output =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.rightSpan" => "rightSpan",
    "T.tweet" => "tweet"
  ),
  Select(
    Not(
      ContainsDict(
        StringConst(
          "IndirectWishesDict"
        ),
        LeftContextTok(
          GetCol(
            "T.userName"
          ),
          IntConst(
            3
          )
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "rightSpan" => "T.rightSpan",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_BdayPattern1_Filtered
    )
  )
);

$LifeEvents_BdayStrong_OtherThanPat1 =
Difference(
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_Bday_Strong
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_BdayPattern1_Output
    )
  ));

$LifeEvents_Bday_Pattern2 =
Select(
  FollowsTok(
    GetCol(
      "key"
    ),
    GetCol(
      "userName"
    ),
    IntConst(
      0
    ),
    IntConst(
      1
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.key" => "key",
      "userName" => "userName"
    ),
    Regex(/@[a-zA-Z_0-9]{1,15}\b/, (0 => "userName"), "DOTALL", "T.tweet",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet"
        ),
        $LifeEvents_BdayStrong_OtherThanPat1
      )
    )
  )
);

$LifeEvents_Bday_Pattern2_FalsePos =
Project(
  (
    "T.tweet" => "tweet",
    "T.key" => "key",
    "T.userName" => "userName"
  ),
  Select(
    Or(
      ContainsDict(
        StringConst(
          "IndirectWishesDict"
        ),
        LeftContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            3
          )
        )
      ),
      ContainsRegex(
        RegexConst(
          /\'s/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContext(
          GetCol(
            "T.userName"
          ),
          IntConst(
            3
          )
        )
      ),
      ContainsRegex(
        RegexConst(
          /\b(?:(?:RT)|(?:RT"))\b/,
          "JavaRegex"
        ),
        LeftContextTok(
          GetCol(
            "T.userName"
          ),
          IntConst(
            1
          )
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_Bday_Pattern2
    )
  )
);

$LifeEvents_Bday_PersonName =
Select(
  And(
    Or(
      FollowsTok(
        GetCol(
          "userName"
        ),
        GetCol(
          "personName"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      FollowsTok(
        GetCol(
          "key"
        ),
        GetCol(
          "personName"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      )
    ),
    Not(
      Overlaps(
        GetCol(
          "key"
        ),
        GetCol(
          "personName"
        )
      )
    ),
    Not(
      Overlaps(
        GetCol(
          "userName"
        ),
        GetCol(
          "personName"
        )
      )
    ),
    Not(
      MatchesRegex(
        RegexConst(
          /[A-Z]+/,
          "SimpleRegex"
        ),
        GetCol(
          "personName"
        )
      )
    ),
    Not(
      MatchesRegex(
        RegexConst(
          /[a-zA-Z]{2}/,
          "SimpleRegex"
        ),
        GetCol(
          "personName"
        )
      )
    ),
    Not(
      ContainsDict(
        StringConst(
          "filterPerson.dict"
        ),
        GetCol(
          "personName"
        )
      )
    ),
    Not(
      ContainsDict(
        StringConst(
          "adjectives.dict"
        ),
        GetCol(
          "personName"
        )
      )
    ),
    Not(
      ContainsDict(
        StringConst(
          "properAdjectives.dict"
        ),
        GetCol(
          "personName"
        )
      )
    ),
    Not(
      ContainsDict(
        StringConst(
          "zodiacSigns.dict"
        ),
        GetCol(
          "personName"
        )
      )
    )
  ),
  Project(
    (
      "T.rightSpan" => "rightSpan",
      "T.userName" => "userName",
      "T.key" => "key",
      "T.tweet" => "tweet",
      "personName" => "personName"
    ),
    Regex(/([A-Z][A-Za-z]+?)[^a-zA-Z]/, (1 => "personName"), "DOTALL", "T.rightSpan",
      Project(
        (
          "key" => "T.key",
          "rightSpan" => "T.rightSpan",
          "tweet" => "T.tweet",
          "userName" => "T.userName"
        ),
        $LifeEvents_BdayPattern1_Output
      )
    )
  )
);

$LifeEvents_JobRelated_Events_Candidate_QuitJobMentions =
Project(
  (
    "CS.tweet" => "tweet",
    "CS.key" => "key",
    "CS.mention" => "mention"
  ),
  Select(
    ContainsRegex(
      RegexConst(
        /^(?:quit)/,
        "JavaRegex"
      ),
      StringConst(
        "CASE_INSENSITIVE"
      ),
      GetCol(
        "CS.mention"
      )
    ),
    Project(
      (
        "key" => "CS.key",
        "mention" => "CS.mention",
        "tweet" => "CS.tweet"
      ),
      $LifeEvents_JobRelated_Events_Mentions_Minus_GotJob
    )
  )
);

$LifeEvents_JobRelated_Events_Mentions_Minus_QuitJob =
Difference(
  Project(
    (
      "CM.tweet" => "tweet",
      "CM.key" => "key",
      "CM.mention" => "mention"
    ),
    Project(
      (
        "key" => "CM.key",
        "mention" => "CM.mention",
        "tweet" => "CM.tweet"
      ),
      $LifeEvents_JobRelated_Events_Mentions_Minus_GotJob
    )
  ),
  Project(
    (
      "CM.tweet" => "tweet",
      "CM.key" => "key",
      "CM.mention" => "mention"
    ),
    Project(
      (
        "key" => "CM.key",
        "mention" => "CM.mention",
        "tweet" => "CM.tweet"
      ),
      $LifeEvents_JobRelated_Events_Candidate_QuitJobMentions
    )
  ));

$LifeEvents_JobRelated_Events_Mentions_RemainingSelf =
Project(
  (
    "CM.tweet" => "tweet",
    "CM.key" => "key",
    "CM.mention" => "mention",
    "FunctionCall17268" => "statement"
  ),
  ApplyFunc(
    CombineSpans(
      LeftContextTok(
        GetCol(
          "CM.mention"
        ),
        IntConst(
          1
        )
      ),
      GetCol(
        "CM.mention"
      )
    ) => "FunctionCall17268",
    Select(
      Or(
        ContainsRegex(
          RegexConst(
            /(?:\bI\b|\bmy\b|\bma\b|\.)/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          LeftContextTok(
            GetCol(
              "CM.mention"
            ),
            IntConst(
              1
            )
          )
        ),
        ContainsDict(
          StringConst(
            "LifeChangingEventsDict_JobRelated_Events_RelationsDict"
          ),
          StringConst(
            "IgnoreCase"
          ),
          LeftContextTok(
            GetCol(
              "CM.mention"
            ),
            IntConst(
              2
            )
          )
        ),
        ContainsRegex(
          RegexConst(
            /\bmy\b|\bma\b/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "CM.mention"
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /[A-Za-z0-9]/,
              "SimpleRegex"
            ),
            LeftContextTok(
              GetCol(
                "CM.mention"
              ),
              IntConst(
                1
              )
            )
          )
        )
      ),
      Project(
        (
          "key" => "CM.key",
          "mention" => "CM.mention",
          "tweet" => "CM.tweet"
        ),
        $LifeEvents_JobRelated_Events_Mentions_Minus_QuitJob
      )
    )
  )
);

$LifeEvents_JobRelated_Events_QuitJobMentions =
Project(
  (
    "CQ.tweet" => "tweet",
    "CQ.key" => "key",
    "CQ.mention" => "mention",
    "FunctionCall17151" => "statement"
  ),
  ApplyFunc(
    CombineSpans(
      LeftContextTok(
        GetCol(
          "CQ.mention"
        ),
        IntConst(
          1
        )
      ),
      GetCol(
        "CQ.mention"
      )
    ) => "FunctionCall17151",
    Select(
      Or(
        ContainsRegex(
          RegexConst(
            /\bI\b/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          LeftContextTok(
            GetCol(
              "CQ.mention"
            ),
            IntConst(
              1
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /[a-zA-Z0-9]/,
              "SimpleRegex"
            ),
            LeftContextTok(
              GetCol(
                "CQ.mention"
              ),
              IntConst(
                1
              )
            )
          )
        ),
        ContainsDict(
          StringConst(
            "LifeChangingEventsDict_JobRelated_Events_RelationsDict"
          ),
          StringConst(
            "IgnoreCase"
          ),
          LeftContextTok(
            GetCol(
              "CQ.mention"
            ),
            IntConst(
              2
            )
          )
        )
      ),
      Project(
        (
          "key" => "CQ.key",
          "mention" => "CQ.mention",
          "tweet" => "CQ.tweet"
        ),
        $LifeEvents_JobRelated_Events_Candidate_QuitJobMentions
      )
    )
  )
);

$LifeEvents_JobRelated_StatusWorking =
Project(
  (
    "T.mention" => "mention",
    "T.key" => "key",
    "FunctionCall42094" => "status",
    "T.tweet" => "tweet"
  ),
  ApplyFunc(
    StringConst(
      "Has Job"
    ) => "FunctionCall42094",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"LifeEvents_JobRelated_StatusWorking❡subquery1"}
    )
  )
);

$LifeEvents_JobRelated_Status_HasJob =
Project(
  (
    "T.mention" => "mention",
    "T.key" => "key",
    "FunctionCall42096" => "status",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    ApplyFunc(
      StringConst(
        "Has Job"
      ) => "FunctionCall42096",
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet"
        ),
        $_{"LifeEvents_JobRelated_Status_HasJob❡subquery1"}
      )
    )
  )
);

$RelocationTweets_PatternAll_ToLocation =
Project(
  (
    "T.key" => "key",
    "T.locationNameSpan" => "locationNameSpan",
    "T.locationName" => "locationName",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "locationName" => "T.locationName",
        "locationNameSpan" => "T.locationNameSpan",
        "tweet" => "T.tweet"
      ),
      $_{"RelocationTweets_PatternAll_ToLocation❡subquery1"}
    )
  )
);

$RelocationTweets_PatternAll_FromLocation =
Project(
  (
    "T.key" => "key",
    "T.locationNameSpan" => "locationNameSpan",
    "T1.match" => "fromLocationName",
    "T.locationName" => "toLocationName",
    "T.tweet" => "tweet"
  ),
  SortMergeJoin(
    ContainedWithin(
      GetCol(
        "T1.match"
      ),
      GetCol(
        "T.tweet"
      )
    ),
    Select(
      ContainsDict(
        StringConst(
          "FromLocationKeywordsDict"
        ),
        LeftContextTok(
          GetCol(
            "T1.match"
          ),
          IntConst(
            2
          )
        )
      ),
      Project(
        (
          "match" => "T1.match"
        ),
        $AllLocations
      )
    ),
    Project(
      (
        "key" => "T.key",
        "locationName" => "T.locationName",
        "locationNameSpan" => "T.locationNameSpan",
        "tweet" => "T.tweet"
      ),
      $RelocationTweets_PatternAll_ToLocation
    )
  )
);

$RelocationTweets_PatternAll_NoExplicitFromLocation =
Difference(
  Project(
    (
      "T.key" => "key",
      "T.locationNameSpan" => "locationNameSpan",
      "T.locationName" => "toLocationName",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "locationName" => "T.locationName",
        "locationNameSpan" => "T.locationNameSpan",
        "tweet" => "T.tweet"
      ),
      $RelocationTweets_PatternAll_ToLocation
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.locationNameSpan" => "locationNameSpan",
      "T.toLocationName" => "toLocationName",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "locationNameSpan" => "T.locationNameSpan",
        "toLocationName" => "T.toLocationName",
        "tweet" => "T.tweet"
      ),
      $RelocationTweets_PatternAll_FromLocation
    )
  ));

$LocationTweets_Pattern2_WithoutUserNameInfo =
Project(
  (
    "T.tweet" => "tweet",
    "T.locationSpan" => "locationSpan",
    "T.url" => "url",
    "FunctionCall42098" => "userNameSpan"
  ),
  ApplyFunc(
    StringConst(
      ""
    ) => "FunctionCall42098",
    Project(
      (
        "locationSpan" => "T.locationSpan",
        "tweet" => "T.tweet",
        "url" => "T.url"
      ),
      $_{"LocationTweets_Pattern2_WithoutUserNameInfo❡subquery1"}
    )
  )
);

$CorrectPlace_Pattern1a =
Project(
  (
    "T.tweet" => "tweet",
    "T.url" => "url",
    "T.correct_place" => "place",
    "T.userNameSpan" => "userNameSpan",
    "FunctionCall8028" => "address"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.address_part"
      ),
      GetCol(
        "T.address"
      )
    ) => "FunctionCall8028",
    Project(
      (
        "address" => "T.address",
        "address_part" => "T.address_part",
        "correct_place" => "T.correct_place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $_{"CorrectPlace_Pattern1a❡subquery1"}
    )
  )
);

$LocationTweets_Pattern2_All =
Union(
  Project(
    (
      "T.tweet" => "tweet",
      "T.userNameSpan" => "userNameSpan",
      "T.locationSpan" => "place",
      "T.url" => "url",
      "FunctionCall42100" => "address"
    ),
    ApplyFunc(
      StringConst(
        ""
      ) => "FunctionCall42100",
      Project(
        (
          "locationSpan" => "T.locationSpan",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userNameSpan" => "T.userNameSpan"
        ),
        $LocationTweets_Pattern2_WithoutUserNameInfo
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.userNameSpan" => "userNameSpan",
      "T.locationSpan" => "place",
      "T.url" => "url",
      "FunctionCall42102" => "address"
    ),
    ApplyFunc(
      StringConst(
        ""
      ) => "FunctionCall42102",
      Project(
        (
          "locationSpan" => "T.locationSpan",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userNameSpan" => "T.userNameSpan"
        ),
        $LocationTweets_Pattern2_Candidates_WithUserNameInfo_Explicit
      )
    )
  )
);

$Sentences1 =
Project(
  (
    "text" => "text"
  ),
  Split("B.text", "B.boundary", 2, "text",
    Project(
      (
        "text" => "B.text",
        "boundary" => "B.boundary"
      ),
      $Sentences1_1
    )
  )
);

$buyintent =
Project(
  (
    "D.text" => "text",
    "intent" => "intent"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "intent"
    ),
    $SDM_OUTPUT_purchases_buyintents_dict_WITH_Default_OVER_Sentences1_text
  )
);

$transactions1 =
Project(
  (
    "D.text" => "text",
    "action" => "action"
  ),
  Project(
    (
      "text" => "D.text",
      "__sdm_match" => "action"
    ),
    $SDM_OUTPUT_purchases_transaction_dict_WITH_Default_OVER_Sentences1_text
  )
);

$GeneralIntentToBuy =
Project(
  (
    "FunctionCall29665" => "verb",
    "buyintent.text" => "text",
    "FunctionCall29690" => "product"
  ),
  ApplyFunc(
    RightContextTok(
      CombineSpans(
        GetCol(
          "buyintent.intent"
        ),
        GetCol(
          "transactions1.action"
        )
      ),
      IntConst(
        4
      )
    ) => "FunctionCall29690",
    ApplyFunc(
      CombineSpans(
        GetCol(
          "buyintent.intent"
        ),
        GetCol(
          "transactions1.action"
        )
      ) => "FunctionCall29665",
      Select(
        And(
          Not(
            ContainsDict(
              StringConst(
                "purchases/IPron.dict"
              ),
              SpanBetween(
                GetCol(
                  "buyintent.intent"
                ),
                GetCol(
                  "transactions1.action"
                )
              )
            )
          ),
          Not(
            ContainsDict(
              StringConst(
                "purchases/notforsale.dict"
              ),
              SpanBetween(
                GetCol(
                  "buyintent.intent"
                ),
                GetCol(
                  "transactions1.action"
                )
              )
            )
          )
        ),
        AdjacentJoin(
          FollowsTok(
            GetCol(
              "buyintent.intent"
            ),
            GetCol(
              "transactions1.action"
            ),
            IntConst(
              0
            ),
            IntConst(
              5
            )
          ),
          Select(
            And(
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/IPron.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "buyintent.intent"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/country.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "buyintent.intent"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/negate.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "buyintent.intent"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/you.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "buyintent.intent"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/you.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "buyintent.intent"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              )
            ),
            Project(
              (
                "intent" => "buyintent.intent",
                "text" => "buyintent.text"
              ),
              $buyintent
            )
          ),
          Select(
            And(
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/notforsale.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "transactions1.action"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/you.dict"
                  ),
                  LeftContextTok(
                    GetCol(
                      "transactions1.action"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              ),
              Not(
                ContainsDict(
                  StringConst(
                    "purchases/you.dict"
                  ),
                  RightContextTok(
                    GetCol(
                      "transactions1.action"
                    ),
                    IntConst(
                      3
                    )
                  )
                )
              )
            ),
            Project(
              (
                "action" => "transactions1.action"
              ),
              $transactions1
            )
          )
        )
      )
    )
  )
);

$GeneralIntentToBuyProducts =
Project(
  (
    "D.verb" => "verb",
    "D.product" => "product"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.product"
    ),
    Select(
      Contains(
        GetCol(
          "S.text"
        ),
        GetCol(
          "D.verb"
        )
      ),
      SortMergeJoin(
        Contains(
          GetCol(
            "S.text"
          ),
          GetCol(
            "D.product"
          )
        ),
        Project(
          (
            "text" => "S.text"
          ),
          $Sentences1
        ),
        Select(
          And(
            Not(
              ContainsDict(
                StringConst(
                  "purchases/SarcasmsInIntent.dict"
                ),
                LeftContextTok(
                  GetCol(
                    "D.verb"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            ),
            Not(
              ContainsDict(
                StringConst(
                  "purchases/SarcasmsInIntent.dict"
                ),
                RightContextTok(
                  GetCol(
                    "D.verb"
                  ),
                  IntConst(
                    5
                  )
                )
              )
            )
          ),
          Project(
            (
              "product" => "D.product",
              "verb" => "D.verb"
            ),
            $GeneralIntentToBuy
          )
        )
      )
    )
  )
);

$_{"BabyWishes_ExpandMentionToLeft❡subquery1"} =
Project(
  (
    "D.key" => "key",
    "FunctionCall13565" => "mention",
    "D.tweet" => "tweet"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "D.key"
      ),
      GetCol(
        "D.mention"
      )
    ) => "FunctionCall13565",
    Select(
      GreaterThan(
        GetEnd(
          GetCol(
            "D.mention"
          )
        ),
        GetEnd(
          GetCol(
            "D.key"
          )
        )
      ),
      Project(
        (
          "key" => "D.key",
          "mention" => "D.mention",
          "tweet" => "D.tweet"
        ),
        $BabyWishes_AllStrongPatterns
      )
    )
  )
);

$_{"BabyWishes_ExpandMentionToRight❡subquery1"} =
Project(
  (
    "D.key" => "key",
    "FunctionCall13515" => "mention",
    "D.tweet" => "tweet"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "D.mention"
      ),
      GetCol(
        "D.key"
      )
    ) => "FunctionCall13515",
    Select(
      GreaterThan(
        GetEnd(
          GetCol(
            "D.key"
          )
        ),
        GetEnd(
          GetCol(
            "D.mention"
          )
        )
      ),
      Project(
        (
          "key" => "D.key",
          "mention" => "D.mention",
          "tweet" => "D.tweet"
        ),
        $BabyWishes_AllStrongPatterns
      )
    )
  )
);

$_{"Candidates_Strong_FathersDay_SpanNormalized❡subquery1❡subquery1"} =
Union(
  Project(
    (
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $Candidates_Strong_FathersDay
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $Candidates_Strong_FathersDay_ExtendSpan
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $Candidates_Strong_FathersDay_UsingRegex
    )
  )
);

$_{"Candidates_Strong_FathersDay_SpanNormalized❡subquery1"} =
Project(
  (
    "T.mention" => "mention",
    "FunctionCall15733" => "consoSpan",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "T.mention"
        ),
        GetCol(
          "T.tweet"
        )
      ) => "FunctionCall15733",
      Project(
        (
          "mention" => "T.mention",
          "tweet" => "T.tweet"
        ),
        $_{"Candidates_Strong_FathersDay_SpanNormalized❡subquery1❡subquery1"}
      )
    )
  )
);

$_{"Candidates_Strong_MothersDay_SpanNormalized❡subquery1❡subquery1"} =
Union(
  Project(
    (
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $Candidates_Strong_MothersDay
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $Candidates_Strong_MothersDay_ExtendSpan
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $Candidates_Strong_MothersDay_UsingRegex
    )
  )
);

$_{"Candidates_Strong_MothersDay_SpanNormalized❡subquery1"} =
Project(
  (
    "T.mention" => "mention",
    "FunctionCall14690" => "consoSpan",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "T.mention"
        ),
        GetCol(
          "T.tweet"
        )
      ) => "FunctionCall14690",
      Project(
        (
          "mention" => "T.mention",
          "tweet" => "T.tweet"
        ),
        $_{"Candidates_Strong_MothersDay_SpanNormalized❡subquery1❡subquery1"}
      )
    )
  )
);

$_{"HasChildren_Generic_StrongPat_All❡subquery1"} =
Union(
  Project(
    (
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $HasChildren_PatternAge
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $HasChildren_DictClues
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $HasChildren_PatternWithUserName
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $HasChildren_PatternRegex
    )
  )
);

$_{"LifeEvents_WeddingAndAnniv_Pattern1❡subquery1"} =
Select(
  And(
    FollowsTok(
      GetCol(
        "userName"
      ),
      GetCol(
        "key"
      ),
      IntConst(
        0
      ),
      IntConst(
        140
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /(?:RT|RT"|"|[Cc]:)/,
          "SimpleRegex"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /'s/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.key" => "key",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.tweet",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet"
        ),
        $LifeEvents_WeddingAndAnniv_StrongAll
      )
    )
  )
);

$_{"IsMarried_Generic_StrongPat2❡subquery1"} =
Consolidate(
  "ContainedWithin",
  GetCol(
    "mention"
  ),
  Project(
    (
      "D.key" => "key",
      "D.tweet" => "tweet",
      "mention" => "mention"
    ),
    Dictionary("Candidate_StrongKeywordsForPat2_IsMarriedDict" => "Default" , "D.tweet", "mention",
      Project(
        (
          "key" => "D.key",
          "tweet" => "D.tweet"
        ),
        $IsMarried_Generic_OtherStrongPatterns
      )
    )
  )
);

$_{"JobRelated_Events_Wishes_Union_Statustag❡subquery1"} =
Union(
  Project(
    (
      "A.key" => "key",
      "A.word" => "word",
      "A.mention" => "mention",
      "A.tag" => "tag",
      "FunctionCall42104" => "status",
      "A.tweet" => "tweet"
    ),
    ApplyFunc(
      StringConst(
        "Job Loss"
      ) => "FunctionCall42104",
      Select(
        ContainsDict(
          StringConst(
            "ConsolatoryDict"
          ),
          StringConst(
            "IgnoreCase"
          ),
          GetCol(
            "A.tweet"
          )
        ),
        Project(
          (
            "key" => "A.key",
            "mention" => "A.mention",
            "tag" => "A.tag",
            "tweet" => "A.tweet",
            "word" => "A.word"
          ),
          $JobRelated_Events_Wishes_Union
        )
      )
    )
  ),
  Project(
    (
      "A.key" => "key",
      "A.word" => "word",
      "A.mention" => "mention",
      "A.tag" => "tag",
      "FunctionCall42106" => "status",
      "A.tweet" => "tweet"
    ),
    ApplyFunc(
      StringConst(
        "Job Gain"
      ) => "FunctionCall42106",
      Select(
        ContainsDict(
          StringConst(
            "CongratulatoryKeywords.dict"
          ),
          StringConst(
            "IgnoreCase"
          ),
          GetCol(
            "A.tweet"
          )
        ),
        Project(
          (
            "key" => "A.key",
            "mention" => "A.mention",
            "tag" => "A.tag",
            "tweet" => "A.tweet",
            "word" => "A.word"
          ),
          $JobRelated_Events_Wishes_Union
        )
      )
    )
  )
);

$_{"LifeEvents_JobRelated_Events_Untagged❡subquery1"} =
Union(
  Project(
    (
      "CG.tweet" => "tweet",
      "CG.key" => "key",
      "CG.statement" => "mention"
    ),
    Project(
      (
        "key" => "CG.key",
        "statement" => "CG.statement",
        "tweet" => "CG.tweet"
      ),
      $LifeEvents_JobRelated_Events_Self_GotJobMentions
    )
  ),
  Project(
    (
      "CQ.tweet" => "tweet",
      "CQ.key" => "key",
      "CQ.statement" => "mention"
    ),
    Project(
      (
        "key" => "CQ.key",
        "statement" => "CQ.statement",
        "tweet" => "CQ.tweet"
      ),
      $LifeEvents_JobRelated_Events_QuitJobMentions
    )
  ),
  Project(
    (
      "RS.tweet" => "tweet",
      "RS.key" => "key",
      "RS.statement" => "mention"
    ),
    Project(
      (
        "key" => "RS.key",
        "statement" => "RS.statement",
        "tweet" => "RS.tweet"
      ),
      $LifeEvents_JobRelated_Events_Mentions_RemainingSelf
    )
  )
);

$_{"Life_Events_JobRelated_StatusLabeled❡subquery1"} =
Union(
  Project(
    (
      "HJ.mention" => "mention",
      "HJ.status" => "status",
      "HJ.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "HJ.mention",
        "status" => "HJ.status",
        "tweet" => "HJ.tweet"
      ),
      $LifeEvents_JobRelated_Status_HasJob
    )
  ),
  Project(
    (
      "JL.mention" => "mention",
      "JL.status" => "status",
      "JL.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "JL.mention",
        "status" => "JL.status",
        "tweet" => "JL.tweet"
      ),
      $LifeEvents_JobRelated_Status_JobLess
    )
  ),
  Project(
    (
      "NW.mention" => "mention",
      "NW.status" => "status",
      "NW.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "NW.mention",
        "status" => "NW.status",
        "tweet" => "NW.tweet"
      ),
      $JobRelated_StatusWorkNeedWork
    )
  ),
  Project(
    (
      "HW.mention" => "mention",
      "HW.status" => "status",
      "HW.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "HW.mention",
        "status" => "HW.status",
        "tweet" => "HW.tweet"
      ),
      $LifeEvents_JobRelated_StatusWorking
    )
  )
);

$_{"LifeEvents_BdayPattern2_Output❡subquery1"} =
Difference(
  Project(
    (
      "T.tweet" => "tweet",
      "T.key" => "key",
      "T.userName" => "userName"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_Bday_Pattern2
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.key" => "key",
      "T.userName" => "userName"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_Bday_Pattern2_FalsePos
    )
  ));

$_{"RelocationTweets_PatternAll_AllEntities❡subquery1"} =
Union(
  Project(
    (
      "T.key" => "key",
      "T.locationNameSpan" => "locationNameSpan",
      "T.fromLocationName" => "fromLocationName",
      "T.toLocationName" => "toLocationName",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "fromLocationName" => "T.fromLocationName",
        "key" => "T.key",
        "locationNameSpan" => "T.locationNameSpan",
        "toLocationName" => "T.toLocationName",
        "tweet" => "T.tweet"
      ),
      $RelocationTweets_PatternAll_FromLocation
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.locationNameSpan" => "locationNameSpan",
      "FunctionCall42108" => "fromLocationName",
      "T.toLocationName" => "toLocationName",
      "T.tweet" => "tweet"
    ),
    ApplyFunc(
      StringConst(
        ""
      ) => "FunctionCall42108",
      Project(
        (
          "key" => "T.key",
          "locationNameSpan" => "T.locationNameSpan",
          "toLocationName" => "T.toLocationName",
          "tweet" => "T.tweet"
        ),
        $RelocationTweets_PatternAll_NoExplicitFromLocation
      )
    )
  )
);

$_{"LocationTweets_Pattern1a_Consolidated❡subquery1"} =
Union(
  Project(
    (
      "T.tweet" => "tweet",
      "T.place" => "place",
      "T.address" => "address",
      "T.userNameSpan" => "userNameSpan",
      "T.url" => "url"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_Pattern1a_Correct
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.place" => "place",
      "T.address" => "address",
      "T.userNameSpan" => "userNameSpan",
      "T.url" => "url"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $CorrectPlace_Pattern1a
    )
  )
);

$BabyWishes_ExpandMentionToLeft =
Project(
  (
    "T.key" => "key",
    "T.mention" => "mention",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"BabyWishes_ExpandMentionToLeft❡subquery1"}
    )
  )
);

$BabyWishes_ExpandMentionToRight =
Project(
  (
    "T.key" => "key",
    "T.mention" => "mention",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"BabyWishes_ExpandMentionToRight❡subquery1"}
    )
  )
);

$BabyWishes_MentionNormalized =
Union(
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $BabyWishes_ExpandMentionToRight
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $BabyWishes_ExpandMentionToLeft
    )
  )
);

$BabyWishes_NotHavingBabyMentions =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Select(
    Not(
      ContainsDict(
        StringConst(
          "LifeChangingEventsDict_Baby_Generic"
        ),
        GetCol(
          "T.mention"
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $BabyWishes_MentionNormalized
    )
  )
);

$Candidates_Strong_FathersDay_SpanNormalized =
Project(
  (
    "T.mention" => "mention",
    "T.consoSpan" => "consoSpan",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "NotContainedWithin",
    GetCol(
      "T.consoSpan"
    ),
    Project(
      (
        "consoSpan" => "T.consoSpan",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"Candidates_Strong_FathersDay_SpanNormalized❡subquery1"}
    )
  )
);

$Candidates_Strong_MothersDay_SpanNormalized =
Project(
  (
    "T.mention" => "mention",
    "T.consoSpan" => "consoSpan",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "NotContainedWithin",
    GetCol(
      "T.consoSpan"
    ),
    Project(
      (
        "consoSpan" => "T.consoSpan",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"Candidates_Strong_MothersDay_SpanNormalized❡subquery1"}
    )
  )
);

$HasChildren_Generic_StrongPat_All =
Project(
  (
    "T.mention" => "mention",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"HasChildren_Generic_StrongPat_All❡subquery1"}
    )
  )
);

$LifeEvents_WeddingAndAnniv_Pattern1 =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "FunctionCall12236" => "mention"
  ),
  Consolidate(
    "NotContainedWithin",
    CombineSpans(
      GetCol(
        "T.userName"
      ),
      GetCol(
        "T.key"
      )
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "T.userName"
        ),
        GetCol(
          "T.key"
        )
      ) => "FunctionCall12236",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet",
          "userName" => "T.userName"
        ),
        $_{"LifeEvents_WeddingAndAnniv_Pattern1❡subquery1"}
      )
    )
  )
);

$HasChildren_FalsePositives_1 =
Project(
  (
    "T.mention" => "mention",
    "T.tweet" => "tweet"
  ),
  Select(
    Or(
      ContainsRegex(
        RegexConst(
          /@[a-zA-Z_0-9]{1,15}:/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "T.tweet"
        )
      ),
      ContainsRegex(
        RegexConst(
          /(?:aint|not)\smy\s(?:son|daughter|kids|child)/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "T.tweet"
        )
      )
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $HasChildren_Generic_StrongPat_All
    )
  )
);

$IsMarried_Generic_StrongPat2 =
Project(
  (
    "D.key" => "key",
    "D.mention" => "mention",
    "D.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "D.tweet"
    ),
    Project(
      (
        "key" => "D.key",
        "mention" => "D.mention",
        "tweet" => "D.tweet"
      ),
      $_{"IsMarried_Generic_StrongPat2❡subquery1"}
    )
  )
);

$LifeEvents_WeddingAndAnniv_Pat1_MultipleUsers =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention",
    "FunctionCall12322" => "userSpan"
  ),
  ApplyFunc(
    LeftContextTok(
      GetCol(
        "T.userName"
      ),
      IntConst(
        3
      )
    ) => "FunctionCall12322",
    Select(
      ContainsRegex(
        RegexConst(
          /@[a-zA-Z0-9_]+\s(?:and|n|&)/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        LeftContextTok(
          GetCol(
            "T.userName"
          ),
          IntConst(
            3
          )
        )
      ),
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet",
          "userName" => "T.userName"
        ),
        $LifeEvents_WeddingAndAnniv_Pattern1
      )
    )
  )
);

$JobRelated_Events_Wishes_Union_Statustag =
Project(
  (
    "A.key" => "key",
    "A.word" => "word",
    "A.mention" => "mention",
    "A.tag" => "tag",
    "A.status" => "status",
    "A.tweet" => "tweet"
  ),
  Select(
    Not(
      ContainsRegex(
        RegexConst(
          /\bat\b|\bin\b/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        LeftContextTok(
          GetCol(
            "A.tag"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Project(
      (
        "key" => "A.key",
        "mention" => "A.mention",
        "status" => "A.status",
        "tag" => "A.tag",
        "tweet" => "A.tweet",
        "word" => "A.word"
      ),
      $_{"JobRelated_Events_Wishes_Union_Statustag❡subquery1"}
    )
  )
);

$LifeEvents_JobRelated_Events_Untagged =
Project(
  (
    "L.tweet" => "tweet",
    "L.key" => "key",
    "L.mention" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "L.tweet"
    ),
    Select(
      And(
        Not(
          ContainsDict(
            StringConst(
              "LifeChangingEventsDict_JobRelated_Events_CoworkersDict"
            ),
            StringConst(
              "IgnoreCase"
            ),
            GetCol(
              "L.mention"
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /(?:http|www\.)/,
              "SimpleRegex"
            ),
            GetCol(
              "L.tweet"
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /\"/,
              "SimpleRegex"
            ),
            LeftContext(
              GetCol(
                "L.mention"
              ),
              IntConst(
                20
              )
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /\"/,
              "SimpleRegex"
            ),
            RightContext(
              GetCol(
                "L.mention"
              ),
              IntConst(
                20
              )
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /(?:ago|before)/,
              "SimpleRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            LeftContextTok(
              GetCol(
                "L.mention"
              ),
              IntConst(
                2
              )
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /(?:faith|trust)/,
              "SimpleRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            GetCol(
              "L.mention"
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /(?:offer|call|site|when|year|yrs|month|mnth|if|\?)/,
              "SimpleRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            RightContextTok(
              GetCol(
                "L.mention"
              ),
              IntConst(
                2
              )
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /\bRT\b/,
              "JavaRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            LeftContextTok(
              GetCol(
                "L.mention"
              ),
              IntConst(
                30
              )
            )
          )
        )
      ),
      Project(
        (
          "key" => "L.key",
          "mention" => "L.mention",
          "tweet" => "L.tweet"
        ),
        $_{"LifeEvents_JobRelated_Events_Untagged❡subquery1"}
      )
    )
  )
);

$LifeEvents_JobRelated_Events_Wishes =
Project(
  (
    "FunctionCall18541" => "tag",
    "U.status" => "status",
    "FunctionCall18557" => "mention"
  ),
  ApplyFunc(
    GetText(
      GetCol(
        "U.mention"
      )
    ) => "FunctionCall18557",
    ApplyFunc(
      GetText(
        GetCol(
          "U.tag"
        )
      ) => "FunctionCall18541",
      HashJoin(
        Equals(
          GetCol(
            "CT.tweet"
          ),
          GetCol(
            "U.tweet"
          )
        ),
        Project(
          (
            "tweet" => "CT.tweet"
          ),
          $Candidates_JobEvents_Wishes_tweet
        ),
        Project(
          (
            "mention" => "U.mention",
            "status" => "U.status",
            "tag" => "U.tag",
            "tweet" => "U.tweet"
          ),
          $JobRelated_Events_Wishes_Union_Statustag
        )
      )
    )
  )
);

$Life_Events_JobRelated_StatusLabeled =
Project(
  (
    "S.mention" => "mention",
    "S.status" => "status",
    "S.tweet" => "tweet"
  ),
  Project(
    (
      "mention" => "S.mention",
      "status" => "S.status",
      "tweet" => "S.tweet"
    ),
    $_{"Life_Events_JobRelated_StatusLabeled❡subquery1"}
  )
);

$LifeEvents_BdayPattern2_Output =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet"
  ),
  Project(
    (
      "key" => "T.key",
      "tweet" => "T.tweet",
      "userName" => "T.userName"
    ),
    $_{"LifeEvents_BdayPattern2_Output❡subquery1"}
  )
);

$LifeEvents_JobRelated_Events_Household_Candidiate =
Project(
  (
    "L.tweet" => "tweet",
    "L.key" => "key",
    "L.mention" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "L.tweet"
    ),
    Select(
      Or(
        ContainsRegex(
          RegexConst(
            /(?:\bhis\b|\bher\b)/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "L.mention"
          )
        ),
        ContainsDict(
          StringConst(
            "LifeChangingEventsDict_JobRelated_Events_RelationsDict"
          ),
          StringConst(
            "IgnoreCase"
          ),
          LeftContextTok(
            GetCol(
              "L.mention"
            ),
            IntConst(
              2
            )
          )
        ),
        ContainsDict(
          StringConst(
            "LifeChangingEventsDict_JobRelated_Events_RelationsDict"
          ),
          StringConst(
            "IgnoreCase"
          ),
          GetCol(
            "L.mention"
          )
        )
      ),
      Project(
        (
          "key" => "L.key",
          "mention" => "L.mention",
          "tweet" => "L.tweet"
        ),
        $LifeEvents_JobRelated_Events_Untagged
      )
    )
  )
);

$LifeEvents_JobRelated_Events_Household_Pattern1 =
Project(
  (
    "L.tweet" => "tweet",
    "L.key" => "key",
    "L.mention" => "mention",
    "FunctionCall42110" => "tag"
  ),
  ApplyFunc(
    StringConst(
      "household"
    ) => "FunctionCall42110",
    Select(
      ContainsDict(
        StringConst(
          "LifeChangingEventsDict_JobRelated_Events_RelationsDict"
        ),
        StringConst(
          "IgnoreCase"
        ),
        GetCol(
          "L.mention"
        )
      ),
      Project(
        (
          "key" => "L.key",
          "mention" => "L.mention",
          "tweet" => "L.tweet"
        ),
        $LifeEvents_JobRelated_Events_Household_Candidiate
      )
    )
  )
);

$LifeEvents_JobRelated_Events_Household_Pattern2 =
Project(
  (
    "L.tweet" => "tweet",
    "L.key" => "key",
    "L.mention" => "mention",
    "FunctionCall42112" => "tag"
  ),
  ApplyFunc(
    StringConst(
      "household"
    ) => "FunctionCall42112",
    Select(
      And(
        ContainsDict(
          StringConst(
            "LifeChangingEventsDict_JobRelated_Events_RelationsDict"
          ),
          StringConst(
            "IgnoreCase"
          ),
          LeftContextTok(
            GetCol(
              "L.mention"
            ),
            IntConst(
              2
            )
          )
        ),
        ContainsRegex(
          RegexConst(
            /(?:\bhis\b|\bher\b)/,
            "JavaRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "L.mention"
          )
        )
      ),
      Project(
        (
          "key" => "L.key",
          "mention" => "L.mention",
          "tweet" => "L.tweet"
        ),
        $LifeEvents_JobRelated_Events_Household_Candidiate
      )
    )
  )
);

$LifeEvents_JobRelated_Events_self_Candidiate =
Difference(
  Project(
    (
      "L.tweet" => "tweet",
      "L.key" => "key",
      "L.mention" => "mention"
    ),
    Project(
      (
        "key" => "L.key",
        "mention" => "L.mention",
        "tweet" => "L.tweet"
      ),
      $LifeEvents_JobRelated_Events_Untagged
    )
  ),
  Project(
    (
      "H.tweet" => "tweet",
      "H.key" => "key",
      "H.mention" => "mention"
    ),
    Project(
      (
        "key" => "H.key",
        "mention" => "H.mention",
        "tweet" => "H.tweet"
      ),
      $LifeEvents_JobRelated_Events_Household_Candidiate
    )
  ));

$LifeEvents_JobRelated_Events_Household =
Union(
  Project(
    (
      "L.tweet" => "tweet",
      "L.key" => "key",
      "L.mention" => "mention",
      "L.tag" => "tag"
    ),
    Project(
      (
        "key" => "L.key",
        "mention" => "L.mention",
        "tag" => "L.tag",
        "tweet" => "L.tweet"
      ),
      $LifeEvents_JobRelated_Events_Household_Pattern1
    )
  ),
  Project(
    (
      "L.tweet" => "tweet",
      "L.key" => "key",
      "L.mention" => "mention",
      "L.tag" => "tag"
    ),
    Project(
      (
        "key" => "L.key",
        "mention" => "L.mention",
        "tag" => "L.tag",
        "tweet" => "L.tweet"
      ),
      $LifeEvents_JobRelated_Events_Household_Pattern2
    )
  )
);

$LifeEvents_JobRelated_Events_self =
Project(
  (
    "L.tweet" => "tweet",
    "L.key" => "key",
    "L.mention" => "mention",
    "FunctionCall42114" => "tag"
  ),
  ApplyFunc(
    StringConst(
      "self"
    ) => "FunctionCall42114",
    Project(
      (
        "key" => "L.key",
        "mention" => "L.mention",
        "tweet" => "L.tweet"
      ),
      $LifeEvents_JobRelated_Events_self_Candidiate
    )
  )
);

$RelocationTweets_PatternAll_AllEntities =
Project(
  (
    "T.key" => "key",
    "T.locationNameSpan" => "locationNameSpan",
    "T.fromLocationName" => "fromLocationName",
    "T.toLocationName" => "toLocationName",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    Project(
      (
        "fromLocationName" => "T.fromLocationName",
        "key" => "T.key",
        "locationNameSpan" => "T.locationNameSpan",
        "toLocationName" => "T.toLocationName",
        "tweet" => "T.tweet"
      ),
      $_{"RelocationTweets_PatternAll_AllEntities❡subquery1"}
    )
  )
);

$LifeEvents_JobRelated_Events_Author_UntaggedStatus =
Union(
  Project(
    (
      "S.tag" => "tag",
      "S.tweet" => "tweet",
      "S.mention" => "mention"
    ),
    Project(
      (
        "mention" => "S.mention",
        "tag" => "S.tag",
        "tweet" => "S.tweet"
      ),
      $LifeEvents_JobRelated_Events_self
    )
  ),
  Project(
    (
      "H.tag" => "tag",
      "H.tweet" => "tweet",
      "H.mention" => "mention"
    ),
    Project(
      (
        "mention" => "H.mention",
        "tag" => "H.tag",
        "tweet" => "H.tweet"
      ),
      $LifeEvents_JobRelated_Events_Household
    )
  )
);

$LocationTweets_Pattern1a_Consolidated =
Project(
  (
    "T.tweet" => "tweet",
    "T.place" => "place",
    "T.url" => "url",
    "T.userNameSpan" => "userNameSpan",
    "T.address" => "address"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.address"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $_{"LocationTweets_Pattern1a_Consolidated❡subquery1"}
    )
  )
);

$LocationTweets_Pattern1a_EmptyPlace =
Project(
  (
    "T.tweet" => "tweet",
    "T.place" => "place",
    "T.url" => "url",
    "T.userNameSpan" => "userNameSpan",
    "T.address" => "address"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    Select(
      MatchesRegex(
        RegexConst(
          /|\s+/,
          "JavaRegex"
        ),
        GetCol(
          "T.place"
        )
      ),
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userNameSpan" => "T.userNameSpan"
        ),
        $LocationTweets_Pattern1a_Consolidated
      )
    )
  )
);

$LocationTweets_Pattern1a_GarbagePlace =
Project(
  (
    "T.tweet" => "tweet",
    "T.place" => "place",
    "T.url" => "url",
    "T.userNameSpan" => "userNameSpan",
    "T.address" => "address"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    Select(
      And(
        MatchesRegex(
          RegexConst(
            /[^a-zA-Z0-9]+/,
            "SimpleRegex"
          ),
          GetCol(
            "T.place"
          )
        ),
        Not(
          MatchesRegex(
            RegexConst(
              /|\s+/,
              "JavaRegex"
            ),
            GetCol(
              "T.place"
            )
          )
        )
      ),
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userNameSpan" => "T.userNameSpan"
        ),
        $LocationTweets_Pattern1a_Consolidated
      )
    )
  )
);

$LocationTweets_Pattern1bCandidates =
Union(
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userNameSpan" => "userNameSpan",
      "T.address" => "place"
    ),
    Project(
      (
        "address" => "T.address",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_Pattern1a_EmptyPlace
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userNameSpan" => "userNameSpan",
      "T.address" => "place"
    ),
    Project(
      (
        "address" => "T.address",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_Pattern1a_GarbagePlace
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userNameSpan" => "userNameSpan",
      "T.place" => "place"
    ),
    Project(
      (
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_Pattern1a_Retain
    )
  )
);

$LocationTweets_Pattern1b_All =
Union(
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userNameSpan" => "userNameSpan",
      "T.place" => "place"
    ),
    Project(
      (
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_Pattern1b
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userNameSpan" => "userNameSpan",
      "T.place" => "place"
    ),
    Project(
      (
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_Pattern1bCandidates
    )
  )
);

$LifeEvents_JobRelated_Events_Author_Statustag =
Union(
  Project(
    (
      "S.mention" => "mention",
      "S.tag" => "tag",
      "FunctionCall42116" => "status",
      "S.tweet" => "tweet"
    ),
    Consolidate(
      "ContainedWithin",
      GetCol(
        "S.tweet"
      ),
      ApplyFunc(
        StringConst(
          "Job Loss"
        ) => "FunctionCall42116",
        Select(
          ContainsRegex(
            RegexConst(
              /(?:quit|lost|layed|fired|resign|last)/,
              "SimpleRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            GetCol(
              "S.mention"
            )
          ),
          Project(
            (
              "mention" => "S.mention",
              "tag" => "S.tag",
              "tweet" => "S.tweet"
            ),
            $LifeEvents_JobRelated_Events_Author_UntaggedStatus
          )
        )
      )
    )
  ),
  Project(
    (
      "S.mention" => "mention",
      "S.tag" => "tag",
      "FunctionCall42118" => "status",
      "S.tweet" => "tweet"
    ),
    Consolidate(
      "ContainedWithin",
      GetCol(
        "S.tweet"
      ),
      ApplyFunc(
        StringConst(
          "Job Gain"
        ) => "FunctionCall42118",
        Select(
          ContainsRegex(
            RegexConst(
              /(?:first|new|1st|hired|)/,
              "JavaRegex"
            ),
            StringConst(
              "CASE_INSENSITIVE"
            ),
            GetCol(
              "S.mention"
            )
          ),
          Project(
            (
              "mention" => "S.mention",
              "tag" => "S.tag",
              "tweet" => "S.tweet"
            ),
            $LifeEvents_JobRelated_Events_Author_UntaggedStatus
          )
        )
      )
    )
  )
);

$LifeEvents_JobRelated_Events_Author =
Project(
  (
    "S.tag" => "tag",
    "S.status" => "status",
    "FunctionCall17890" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "S.mention"
    ),
    ApplyFunc(
      GetText(
        GetCol(
          "S.mention"
        )
      ) => "FunctionCall17890",
      Project(
        (
          "mention" => "S.mention",
          "status" => "S.status",
          "tag" => "S.tag"
        ),
        $LifeEvents_JobRelated_Events_Author_Statustag
      )
    )
  )
);

$_{"BabyWishes_NotHavingBabyMentions_Expand❡subquery1"} =
Select(
  GreaterThan(
    GetEnd(
      GetCol(
        "babyMention"
      )
    ),
    GetEnd(
      GetCol(
        "mention"
      )
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "T.mention" => "mention",
      "babyMention" => "babyMention"
    ),
    Dictionary("LifeChangingEventsDict_Baby_Generic" => "Default" , "T.tweet", "babyMention",
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet"
        ),
        $BabyWishes_NotHavingBabyMentions
      )
    )
  )
);

$_{"FathersDayWishes_Pattern1❡subquery1"} =
Select(
  And(
    FollowsTok(
      GetCol(
        "userName"
      ),
      GetCol(
        "key"
      ),
      IntConst(
        0
      ),
      IntConst(
        140
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /(?:RT|RT"|"|[Cc]:)/,
          "SimpleRegex"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /\bfrom\b/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /'s/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.mention" => "key",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.tweet",
      Project(
        (
          "mention" => "T.mention",
          "tweet" => "T.tweet"
        ),
        $Candidates_Strong_FathersDay_SpanNormalized
      )
    )
  )
);

$_{"MothersDayWishes_Pattern1❡subquery1"} =
Select(
  And(
    FollowsTok(
      GetCol(
        "userName"
      ),
      GetCol(
        "key"
      ),
      IntConst(
        0
      ),
      IntConst(
        140
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /(?:RT|RT"|"|[Cc]:)/,
          "SimpleRegex"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /'s/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.mention" => "key",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.tweet",
      Project(
        (
          "mention" => "T.mention",
          "tweet" => "T.tweet"
        ),
        $Candidates_Strong_MothersDay_SpanNormalized
      )
    )
  )
);

$_{"HasChildren_Generic_StrongPat_Output❡subquery1"} =
Difference(
  Project(
    (
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $HasChildren_Generic_StrongPat_All
    )
  ),
  Project(
    (
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $HasChildren_FalsePositives_1
    )
  ));

$_{"IsMarried_Generic_StrongPat2_ExpandMentionToLeft❡subquery1"} =
Project(
  (
    "D.key" => "key",
    "FunctionCall13117" => "mention",
    "D.tweet" => "tweet"
  ),
  ApplyFunc(
    CombineSpans(
      LeftContextTok(
        GetCol(
          "D.mention"
        ),
        IntConst(
          2
        )
      ),
      GetCol(
        "D.mention"
      )
    ) => "FunctionCall13117",
    Select(
      Overlaps(
        GetCol(
          "D.mention"
        ),
        GetCol(
          "D.key"
        )
      ),
      Project(
        (
          "key" => "D.key",
          "mention" => "D.mention",
          "tweet" => "D.tweet"
        ),
        $IsMarried_Generic_StrongPat2
      )
    )
  )
);

$_{"IsMarried_Generic_StrongPat2_ExpandMentionToRight❡subquery1"} =
Project(
  (
    "D.key" => "key",
    "FunctionCall13054" => "mention",
    "D.tweet" => "tweet"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "D.mention"
      ),
      GetCol(
        "D.key"
      )
    ) => "FunctionCall13054",
    Select(
      And(
        GreaterThan(
          GetBegin(
            GetCol(
              "D.key"
            )
          ),
          GetBegin(
            GetCol(
              "D.mention"
            )
          )
        ),
        Not(
          Overlaps(
            GetCol(
              "D.mention"
            ),
            GetCol(
              "D.key"
            )
          )
        )
      ),
      Project(
        (
          "key" => "D.key",
          "mention" => "D.mention",
          "tweet" => "D.tweet"
        ),
        $IsMarried_Generic_StrongPat2
      )
    )
  )
);

$_{"LifeEvents_WeddingAndAnniv_OtherThanPattern1❡subquery1"} =
Difference(
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $LifeEvents_WeddingAndAnniv_StrongAll
    )
  ),
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $LifeEvents_WeddingAndAnniv_Pattern1
    )
  ));

$_{"LifeEvents_WeddingAndAnniv_Pat1_MultiUser_Extract❡subquery1"} =
Select(
  Overlaps(
    GetCol(
      "userName"
    ),
    GetCol(
      "userSpan"
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.userSpan" => "userSpan",
      "T.mention" => "mention",
      "T.key" => "key",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.tweet",
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet",
          "userSpan" => "T.userSpan"
        ),
        $LifeEvents_WeddingAndAnniv_Pat1_MultipleUsers
      )
    )
  )
);

$_{"MentionInQuotes❡subquery1"} =
Project(
  (
    "S.mention" => "mention",
    "S.status" => "status",
    "S.tweet" => "tweet",
    "quotes" => "quotes"
  ),
  FastRegex(/\".+\"/, (0 => "quotes"), "DOTALL", "S.tweet",
    Project(
      (
        "mention" => "S.mention",
        "status" => "S.status",
        "tweet" => "S.tweet"
      ),
      $Life_Events_JobRelated_StatusLabeled
    )
  )
);

$_{"LifeEvents_Bday_UnionAll❡subquery1"} =
Union(
  Project(
    (
      "T.tweet" => "tweet",
      "T.key" => "key",
      "T.userName" => "userName"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_BdayPattern1_Output
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.key" => "key",
      "T.userName" => "userName"
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_BdayPattern2_Output
    )
  )
);

$_{"LocationTweets_Pattern1a_All❡subquery1"} =
Difference(
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $LocationTweets_Pattern1a_Consolidated
    )
  ),
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $LocationTweets_Pattern1bCandidates
    )
  ));

$BabyWishes_NotHavingBabyMentions_Expand =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "FunctionCall13651" => "mention"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.mention"
      ),
      GetCol(
        "T.babyMention"
      )
    ) => "FunctionCall13651",
    Project(
      (
        "babyMention" => "T.babyMention",
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"BabyWishes_NotHavingBabyMentions_Expand❡subquery1"}
    )
  )
);

$FathersDayWishes_Pattern1 =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "FunctionCall15794" => "mention"
  ),
  Consolidate(
    "NotContainedWithin",
    CombineSpans(
      GetCol(
        "T.userName"
      ),
      GetCol(
        "T.key"
      )
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "T.userName"
        ),
        GetCol(
          "T.key"
        )
      ) => "FunctionCall15794",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet",
          "userName" => "T.userName"
        ),
        $_{"FathersDayWishes_Pattern1❡subquery1"}
      )
    )
  )
);

$FathersDayWishes_Pattern1_FalsePositives_1 =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Select(
    Or(
      ContainsDict(
        StringConst(
          "OtherRef_FilterWordsDict"
        ),
        RightContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            3
          )
        )
      ),
      ContainsDict(
        StringConst(
          "IndirectWishesDict"
        ),
        LeftContextTok(
          GetCol(
            "T.userName"
          ),
          IntConst(
            3
          )
        )
      ),
      ContainsDict(
        StringConst(
          "IndirectWishesDict"
        ),
        GetCol(
          "T.mention"
        )
      ),
      ContainsDict(
        StringConst(
          "FathersDayFilterDict"
        ),
        GetCol(
          "T.mention"
        )
      ),
      ContainsRegex(
        RegexConst(
          /\bRT\b/,
          "JavaRegex"
        ),
        GetCol(
          "T.mention"
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $FathersDayWishes_Pattern1
    )
  )
);

$MothersDayWishes_Pattern1 =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "FunctionCall14751" => "mention"
  ),
  Consolidate(
    "NotContainedWithin",
    CombineSpans(
      GetCol(
        "T.userName"
      ),
      GetCol(
        "T.key"
      )
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "T.userName"
        ),
        GetCol(
          "T.key"
        )
      ) => "FunctionCall14751",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet",
          "userName" => "T.userName"
        ),
        $_{"MothersDayWishes_Pattern1❡subquery1"}
      )
    )
  )
);

$MothersDayWishes_Pattern1_FalsePositives_1 =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Select(
    Or(
      ContainsDict(
        StringConst(
          "OtherRef_FilterWordsDict"
        ),
        RightContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            3
          )
        )
      ),
      ContainsDict(
        StringConst(
          "IndirectWishesDict"
        ),
        LeftContextTok(
          GetCol(
            "T.userName"
          ),
          IntConst(
            3
          )
        )
      ),
      ContainsDict(
        StringConst(
          "IndirectWishesDict"
        ),
        GetCol(
          "T.mention"
        )
      ),
      ContainsDict(
        StringConst(
          "MothersDayFilterDict"
        ),
        GetCol(
          "T.mention"
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_Pattern1
    )
  )
);

$HasChildren_Generic_StrongPat_Output =
Project(
  (
    "T.mention" => "mention"
  ),
  Project(
    (
      "mention" => "T.mention"
    ),
    $_{"HasChildren_Generic_StrongPat_Output❡subquery1"}
  )
);

$IsMarried_Generic_StrongPat2_ExpandMentionToLeft =
Project(
  (
    "T.key" => "key",
    "T.mention" => "mention",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"IsMarried_Generic_StrongPat2_ExpandMentionToLeft❡subquery1"}
    )
  )
);

$IsMarried_Generic_StrongPat2_ExpandMentionToRight =
Project(
  (
    "T.key" => "key",
    "T.mention" => "mention",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"IsMarried_Generic_StrongPat2_ExpandMentionToRight❡subquery1"}
    )
  )
);

$LifeEvents_IsMarried_Generic_StrongPat2 =
Union(
  Project(
    (
      "T.key" => "key",
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $IsMarried_Generic_StrongPat2_ExpandMentionToRight
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $IsMarried_Generic_StrongPat2_ExpandMentionToLeft
    )
  )
);

$LifeEvents_IsMarried_Generic_StrongPat_All =
Union(
  Project(
    (
      "T.key" => "key",
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_IsMarried_Generic_StrongPat1
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.mention" => "mention",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_IsMarried_Generic_StrongPat2
    )
  )
);

$LifeEvents_WeddingAndAnniv_OtherThanPattern1 =
Project(
  (
    "T.tweet" => "tweet",
    "T1.key" => "key"
  ),
  NLJoin(
    True(),
    Project(
      (
        "key" => "T1.key"
      ),
      $LifeEvents_WeddingAndAnniv_StrongAll
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $_{"LifeEvents_WeddingAndAnniv_OtherThanPattern1❡subquery1"}
    )
  )
);

$IsMarried_GenericStrong_FemaleTweets =
Project(
  (
    "D.key" => "key",
    "D.mention" => "mention",
    "FunctionCall42120" => "gender",
    "D.tweet" => "tweet"
  ),
  ApplyFunc(
    StringConst(
      "Female"
    ) => "FunctionCall42120",
    Select(
      ContainsRegex(
        RegexConst(
          /(?:husband)|(?:hubby)/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "D.mention"
        )
      ),
      Project(
        (
          "key" => "D.key",
          "mention" => "D.mention",
          "tweet" => "D.tweet"
        ),
        $LifeEvents_IsMarried_Generic_StrongPat_All
      )
    )
  )
);

$IsMarried_GenericStrong_MaleTweets =
Project(
  (
    "D.key" => "key",
    "D.mention" => "mention",
    "FunctionCall42122" => "gender",
    "D.tweet" => "tweet"
  ),
  ApplyFunc(
    StringConst(
      "Male"
    ) => "FunctionCall42122",
    Select(
      ContainsRegex(
        RegexConst(
          /(?:wife)|(?:wifey)/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "D.mention"
        )
      ),
      Project(
        (
          "key" => "D.key",
          "mention" => "D.mention",
          "tweet" => "D.tweet"
        ),
        $LifeEvents_IsMarried_Generic_StrongPat_All
      )
    )
  )
);

$LifeEvents_WeddingAndAnniv_Pat1_MultiUser_Extract =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "FunctionCall12358" => "mention"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.userName"
      ),
      GetCol(
        "T.mention"
      )
    ) => "FunctionCall12358",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"LifeEvents_WeddingAndAnniv_Pat1_MultiUser_Extract❡subquery1"}
    )
  )
);

$IsMarried_GenericStrong_BothGenderTweets =
Union(
  Project(
    (
      "D.key" => "key",
      "D.mention" => "mention",
      "D.gender" => "gender",
      "D.tweet" => "tweet"
    ),
    Project(
      (
        "gender" => "D.gender",
        "key" => "D.key",
        "mention" => "D.mention",
        "tweet" => "D.tweet"
      ),
      $IsMarried_GenericStrong_FemaleTweets
    )
  ),
  Project(
    (
      "D.key" => "key",
      "D.mention" => "mention",
      "D.gender" => "gender",
      "D.tweet" => "tweet"
    ),
    Project(
      (
        "gender" => "D.gender",
        "key" => "D.key",
        "mention" => "D.mention",
        "tweet" => "D.tweet"
      ),
      $IsMarried_GenericStrong_MaleTweets
    )
  )
);

$IsMarried_TweetsInQuotes =
Project(
  (
    "D.key" => "key",
    "D.mention" => "mention",
    "D.gender" => "gender",
    "D.tweet" => "tweet"
  ),
  Select(
    Or(
      And(
        ContainsRegex(
          RegexConst(
            /"/,
            "SimpleRegex"
          ),
          LeftContextTok(
            GetCol(
              "D.mention"
            ),
            IntConst(
              3
            )
          )
        ),
        ContainsRegex(
          RegexConst(
            /"/,
            "SimpleRegex"
          ),
          RightContextTok(
            GetCol(
              "D.mention"
            ),
            IntConst(
              3
            )
          )
        )
      ),
      ContainsRegex(
        RegexConst(
          /(?:[\s#][a-zA-Z.?!]+\:\s)|(?:quote)/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "D.tweet"
        )
      )
    ),
    Project(
      (
        "gender" => "D.gender",
        "key" => "D.key",
        "mention" => "D.mention",
        "tweet" => "D.tweet"
      ),
      $IsMarried_GenericStrong_BothGenderTweets
    )
  )
);

$LifeEvents_WeddingAndAnniv_Pat1_All =
Union(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_WeddingAndAnniv_Pattern1
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_WeddingAndAnniv_Pat1_MultiUser_Extract
    )
  )
);

$MentionInQuotes =
Project(
  (
    "S.mention" => "mention",
    "S.status" => "status",
    "S.tweet" => "tweet",
    "S.quotes" => "quotes"
  ),
  Select(
    Contains(
      GetCol(
        "S.quotes"
      ),
      Chomp(
        GetCol(
          "S.mention"
        )
      )
    ),
    Project(
      (
        "mention" => "S.mention",
        "quotes" => "S.quotes",
        "status" => "S.status",
        "tweet" => "S.tweet"
      ),
      $_{"MentionInQuotes❡subquery1"}
    )
  )
);

$LifeEvents_Bday_UnionAll =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet"
  ),
  Select(
    Not(
      ContainsRegex(
        RegexConst(
          /from/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        LeftContextTok(
          GetCol(
            "T.userName"
          ),
          IntConst(
            1
          )
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"LifeEvents_Bday_UnionAll❡subquery1"}
    )
  )
);

$Life_Events_JobRelated_StatusFiltered =
Difference(
  Project(
    (
      "S.mention" => "mention",
      "S.status" => "status",
      "S.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "S.mention",
        "status" => "S.status",
        "tweet" => "S.tweet"
      ),
      $Life_Events_JobRelated_StatusLabeled
    )
  ),
  Project(
    (
      "S.mention" => "mention",
      "S.status" => "status",
      "S.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "S.mention",
        "status" => "S.status",
        "tweet" => "S.tweet"
      ),
      $MentionInQuotes
    )
  ));

$Life_Events_JobRelated_JobTypePresent =
Consolidate(
  "ContainedWithin",
  GetCol(
    "job_type"
  ),
  Select(
    Not(
      ContainsRegex(
        RegexConst(
          /\bmy\b|\bour\b/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "mention"
        )
      )
    ),
    Project(
      (
        "SF.mention" => "mention",
        "SF.status" => "status",
        "SF.tweet" => "tweet",
        "job_type" => "job_type"
      ),
      Dictionary("job_types.dict" => "IgnoreCase" , "SF.mention", "job_type",
        Project(
          (
            "mention" => "SF.mention",
            "status" => "SF.status",
            "tweet" => "SF.tweet"
          ),
          $Life_Events_JobRelated_StatusFiltered
        )
      )
    )
  )
);

$LocationTweets_Pattern1a_All =
Project(
  (
    "T.tweet" => "tweet",
    "T1.place" => "place",
    "T1.url" => "url",
    "T1.userNameSpan" => "userNameSpan",
    "T1.address" => "address"
  ),
  SortMergeJoin(
    Overlaps(
      GetCol(
        "T1.tweet"
      ),
      GetCol(
        "T.tweet"
      )
    ),
    Project(
      (
        "address" => "T1.address",
        "place" => "T1.place",
        "tweet" => "T1.tweet",
        "url" => "T1.url",
        "userNameSpan" => "T1.userNameSpan"
      ),
      $LocationTweets_Pattern1a_Consolidated
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $_{"LocationTweets_Pattern1a_All❡subquery1"}
    )
  )
);

$LocationTweets_PatternsAll =
Union(
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userNameSpan" => "userNameSpan",
      "FunctionCall42124" => "address",
      "T.place" => "place"
    ),
    ApplyFunc(
      StringConst(
        ""
      ) => "FunctionCall42124",
      Project(
        (
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userNameSpan" => "T.userNameSpan"
        ),
        $LocationTweets_Pattern1b_All
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userNameSpan" => "userNameSpan",
      "T.address" => "address",
      "T.place" => "place"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_Pattern1a_All
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userNameSpan" => "userNameSpan",
      "T.address" => "address",
      "T.place" => "place"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_Pattern2_All
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userNameSpan" => "userNameSpan",
      "T.address" => "address",
      "T.place" => "place"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_Pattern3_All
    )
  )
);

$LocationTweets_PatternsAll_WithUserInfo =
Project(
  (
    "T.tweet" => "tweet",
    "T.url" => "url",
    "T.userNameSpan" => "userNameSpan",
    "T.place" => "place",
    "T.address" => "address"
  ),
  Select(
    And(
      ContainsRegex(
        RegexConst(
          /\b(?:w\/|with)\s{0,20}@[a-zA-Z_0-9]/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "T.userNameSpan"
        )
      ),
      Not(
        MatchesRegex(
          RegexConst(
            /\)\s+w\/\s+\.+/,
            "SimpleRegex"
          ),
          Chomp(
            GetCol(
              "T.userNameSpan"
            )
          )
        )
      )
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_PatternsAll
    )
  )
);

$LocationTweets_PatternsAll_Filtered =
Difference(
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userNameSpan" => "userNameSpan",
      "T.place" => "place",
      "T.address" => "address"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_PatternsAll
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userNameSpan" => "userNameSpan",
      "T.place" => "place",
      "T.address" => "address"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_PatternsAll_WithUserInfo
    )
  ));

$_{"FathersDayWishes_Pattern1_Filtered❡subquery1"} =
Difference(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $FathersDayWishes_Pattern1
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $FathersDayWishes_Pattern1_FalsePositives_1
    )
  ));

$_{"MothersDayWishes_Pattern1_Filtered❡subquery1"} =
Difference(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_Pattern1
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_Pattern1_FalsePositives_1
    )
  ));

$_{"BabyWishes_MentionNormalized_All❡subquery1"} =
Union(
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $BabyWishes_MentionNormalized
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $BabyWishes_NotHavingBabyMentions_Expand
    )
  )
);

$_{"FathersDayWishes_OtherThanPattern1❡subquery1"} =
Difference(
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $Candidates_Strong_FathersDay_SpanNormalized
    )
  ),
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $FathersDayWishes_Pattern1
    )
  ));

$_{"LifeEvents_WeddingAndAnniv_Pattern2❡subquery1"} =
Select(
  And(
    FollowsTok(
      GetCol(
        "key"
      ),
      GetCol(
        "userName"
      ),
      IntConst(
        0
      ),
      IntConst(
        140
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /(?:RT|RT"|")/,
          "SimpleRegex"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /'s/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.key" => "key",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.tweet",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet"
        ),
        $LifeEvents_WeddingAndAnniv_OtherThanPattern1
      )
    )
  )
);

$_{"MothersDayWishes_OtherThanPattern1❡subquery1"} =
Difference(
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $Candidates_Strong_MothersDay_SpanNormalized
    )
  ),
  Project(
    (
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $MothersDayWishes_Pattern1
    )
  ));

$_{"IsMarried_GenericStrong_Output❡subquery1"} =
Difference(
  Project(
    (
      "D.key" => "key",
      "D.mention" => "mention",
      "D.gender" => "gender",
      "D.tweet" => "tweet"
    ),
    Project(
      (
        "gender" => "D.gender",
        "key" => "D.key",
        "mention" => "D.mention",
        "tweet" => "D.tweet"
      ),
      $IsMarried_GenericStrong_BothGenderTweets
    )
  ),
  Project(
    (
      "D.key" => "key",
      "D.mention" => "mention",
      "D.gender" => "gender",
      "D.tweet" => "tweet"
    ),
    Project(
      (
        "gender" => "D.gender",
        "key" => "D.key",
        "mention" => "D.mention",
        "tweet" => "D.tweet"
      ),
      $IsMarried_TweetsInQuotes
    )
  ));

$_{"LifeEvents_Bday_Output❡subquery1"} =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "userNameClean" => "userNameClean"
  ),
  Regex(/@(.+)/, (1 => "userNameClean"), "DOTALL", "T.userName",
    Project(
      (
        "key" => "T.key",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_Bday_UnionAll
    )
  )
);

$_{"Life_Events_JobRelated_WithoutJobType❡subquery1"} =
Difference(
  Project(
    (
      "SF.mention" => "mention",
      "SF.status" => "status",
      "SF.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "SF.mention",
        "status" => "SF.status",
        "tweet" => "SF.tweet"
      ),
      $Life_Events_JobRelated_StatusFiltered
    )
  ),
  Project(
    (
      "JT.mention" => "mention",
      "JT.status" => "status",
      "JT.tweet" => "tweet"
    ),
    Project(
      (
        "mention" => "JT.mention",
        "status" => "JT.status",
        "tweet" => "JT.tweet"
      ),
      $Life_Events_JobRelated_JobTypePresent
    )
  ));

$_{"LocationTweets_PatternsAll_ExtractUserName❡subquery1"} =
Project(
  (
    "T.tweet" => "tweet",
    "T.url" => "url",
    "T.place" => "place",
    "T.address" => "address",
    "T.userNameSpan" => "userNameSpan",
    "userName" => "userName"
  ),
  Regex(/@([a-zA-Z_0-9]{1,15})/, (1 => "userName"), "DOTALL", "T.userNameSpan",
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userNameSpan" => "T.userNameSpan"
      ),
      $LocationTweets_PatternsAll_WithUserInfo
    )
  )
);

$FathersDayWishes_Pattern1_Filtered =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention",
    "FunctionCall15946" => "userSpan"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.tweet"
      ),
      GetCol(
        "T.userName"
      )
    ) => "FunctionCall15946",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"FathersDayWishes_Pattern1_Filtered❡subquery1"}
    )
  )
);

$MothersDayWishes_Pattern1_Filtered =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention",
    "FunctionCall14886" => "userSpan"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.tweet"
      ),
      GetCol(
        "T.userName"
      )
    ) => "FunctionCall14886",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"MothersDayWishes_Pattern1_Filtered❡subquery1"}
    )
  )
);

$BabyWishes_MentionNormalized_All =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"BabyWishes_MentionNormalized_All❡subquery1"}
    )
  )
);

$FathersDayWishes_OtherThanPattern1 =
Project(
  (
    "T1.mention" => "mention",
    "T.tweet" => "tweet"
  ),
  NLJoin(
    True(),
    Project(
      (
        "mention" => "T1.mention"
      ),
      $Candidates_Strong_FathersDay
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $_{"FathersDayWishes_OtherThanPattern1❡subquery1"}
    )
  )
);

$LifeEvents_WeddingAndAnniv_Pattern2 =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "FunctionCall12472" => "mention"
  ),
  Consolidate(
    "NotContainedWithin",
    CombineSpans(
      GetCol(
        "T.key"
      ),
      GetCol(
        "T.userName"
      )
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "T.key"
        ),
        GetCol(
          "T.userName"
        )
      ) => "FunctionCall12472",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet",
          "userName" => "T.userName"
        ),
        $_{"LifeEvents_WeddingAndAnniv_Pattern2❡subquery1"}
      )
    )
  )
);

$MothersDayWishes_OtherThanPattern1 =
Project(
  (
    "T1.mention" => "mention",
    "T.tweet" => "tweet"
  ),
  NLJoin(
    True(),
    Project(
      (
        "mention" => "T1.mention"
      ),
      $Candidates_Strong_MothersDay
    ),
    Project(
      (
        "tweet" => "T.tweet"
      ),
      $_{"MothersDayWishes_OtherThanPattern1❡subquery1"}
    )
  )
);

$LifeEvents_WeddingAndAnniv_Pat2_MultipleUsers =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention",
    "FunctionCall12558" => "userSpan"
  ),
  ApplyFunc(
    RightContextTok(
      GetCol(
        "T.userName"
      ),
      IntConst(
        3
      )
    ) => "FunctionCall12558",
    Select(
      ContainsRegex(
        RegexConst(
          /(?:and|n|nd|&)\s@[a-zA-Z0-9_]+/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "T.userName"
          ),
          IntConst(
            3
          )
        )
      ),
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet",
          "userName" => "T.userName"
        ),
        $LifeEvents_WeddingAndAnniv_Pattern2
      )
    )
  )
);

$IsMarried_GenericStrong_Output =
Project(
  (
    "D.key" => "key",
    "D.gender" => "gender"
  ),
  Project(
    (
      "gender" => "D.gender",
      "key" => "D.key"
    ),
    $_{"IsMarried_GenericStrong_Output❡subquery1"}
  )
);

$LifeEvents_Bday_Output =
Project(
  (
    "T.key" => "key",
    "T.userNameClean" => "userName",
    "T.tweet" => "tweet"
  ),
  Project(
    (
      "key" => "T.key",
      "tweet" => "T.tweet",
      "userNameClean" => "T.userNameClean"
    ),
    $_{"LifeEvents_Bday_Output❡subquery1"}
  )
);

$LifeEvents_Bday_PersonName_Output =
Project(
  (
    "T1.userName" => "userName",
    "T.personName" => "personName",
    "T.tweet" => "tweet"
  ),
  NLJoin(
    True(),
    Project(
      (
        "personName" => "T.personName",
        "tweet" => "T.tweet"
      ),
      $LifeEvents_Bday_PersonName
    ),
    Project(
      (
        "userName" => "T1.userName"
      ),
      $LifeEvents_Bday_Output
    )
  )
);

$Life_Events_JobRelated_WithoutJobType =
Project(
  (
    "S.mention" => "mention",
    "S.status" => "status",
    "S.tweet" => "tweet",
    "FunctionCall42126" => "job_type"
  ),
  ApplyFunc(
    StringConst(
      "null"
    ) => "FunctionCall42126",
    Project(
      (
        "mention" => "S.mention",
        "status" => "S.status",
        "tweet" => "S.tweet"
      ),
      $_{"Life_Events_JobRelated_WithoutJobType❡subquery1"}
    )
  )
);

$Life_Events_JobRelated_JobType =
Union(
  Project(
    (
      "S.mention" => "mention",
      "S.job_type" => "job_type",
      "S.status" => "status",
      "S.tweet" => "tweet"
    ),
    Project(
      (
        "job_type" => "S.job_type",
        "mention" => "S.mention",
        "status" => "S.status",
        "tweet" => "S.tweet"
      ),
      $Life_Events_JobRelated_WithoutJobType
    )
  ),
  Project(
    (
      "S.mention" => "mention",
      "S.job_type" => "job_type",
      "S.status" => "status",
      "S.tweet" => "tweet"
    ),
    Project(
      (
        "job_type" => "S.job_type",
        "mention" => "S.mention",
        "status" => "S.status",
        "tweet" => "S.tweet"
      ),
      $Life_Events_JobRelated_JobTypePresent
    )
  )
);

$Life_Events_JobRelated_Status =
Project(
  (
    "SF.status" => "status",
    "FunctionCall21135" => "job_type",
    "FunctionCall21145" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "SF.tweet"
    ),
    ApplyFunc(
      GetText(
        GetCol(
          "SF.mention"
        )
      ) => "FunctionCall21145",
      ApplyFunc(
        GetText(
          GetCol(
            "SF.job_type"
          )
        ) => "FunctionCall21135",
        HashJoin(
          Equals(
            Chomp(
              GetCol(
                "D.text"
              )
            ),
            Chomp(
              GetCol(
                "SF.tweet"
              )
            )
          ),
          Project(
            (
              "text" => "D.text"
            ),
            $Document
          ),
          Project(
            (
              "job_type" => "SF.job_type",
              "mention" => "SF.mention",
              "status" => "SF.status",
              "tweet" => "SF.tweet"
            ),
            $Life_Events_JobRelated_JobType
          )
        )
      )
    )
  )
);

$LocationTweets_PatternsAll_ExtractUserName =
Project(
  (
    "T.tweet" => "tweet",
    "T.url" => "url",
    "T.userNameSpan" => "userNameSpan",
    "T.place" => "place",
    "T.address" => "address",
    "T.userName" => "userName"
  ),
  Project(
    (
      "address" => "T.address",
      "place" => "T.place",
      "tweet" => "T.tweet",
      "url" => "T.url",
      "userName" => "T.userName",
      "userNameSpan" => "T.userNameSpan"
    ),
    $_{"LocationTweets_PatternsAll_ExtractUserName❡subquery1"}
  )
);

$LocationTweets_PatternsAll_ExtractUserName_FindDups =
Project(
  (
    "T.tweet" => "tweet",
    "T.url" => "url",
    "T.userNameSpan" => "userNameSpan",
    "T.place" => "place",
    "T.address" => "address",
    "T.userName" => "userName"
  ),
  Select(
    Not(
      Equals(
        GetCol(
          "T.userName"
        ),
        GetCol(
          "T1.userName"
        )
      )
    ),
    HashJoin(
      Equals(
        GetText(
          GetCol(
            "T.userName"
          )
        ),
        GetText(
          GetCol(
            "T1.userName"
          )
        )
      ),
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName",
          "userNameSpan" => "T.userNameSpan"
        ),
        $LocationTweets_PatternsAll_ExtractUserName
      ),
      Project(
        (
          "userName" => "T1.userName"
        ),
        $LocationTweets_PatternsAll_ExtractUserName
      )
    )
  )
);

$LocationTweets_PatternsAll_Filtered_UserName =
Union(
Difference(
    Project(
      (
        "T.tweet" => "tweet",
        "T.url" => "url",
        "T.userNameSpan" => "userNameSpan",
        "T.place" => "place",
        "T.address" => "address",
        "T.userName" => "userName"
      ),
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName",
          "userNameSpan" => "T.userNameSpan"
        ),
        $LocationTweets_PatternsAll_ExtractUserName
      )
    ),
    Project(
      (
        "T.tweet" => "tweet",
        "T.url" => "url",
        "T.userNameSpan" => "userNameSpan",
        "T.place" => "place",
        "T.address" => "address",
        "T.userName" => "userName"
      ),
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName",
          "userNameSpan" => "T.userNameSpan"
        ),
        $LocationTweets_PatternsAll_ExtractUserName_FindDups
      )
    )),
  Limit(1,
    Project(
      (
        "T.tweet" => "tweet",
        "T.url" => "url",
        "T.userNameSpan" => "userNameSpan",
        "T.place" => "place",
        "T.address" => "address",
        "T.userName" => "userName"
      ),
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName",
          "userNameSpan" => "T.userNameSpan"
        ),
        $LocationTweets_PatternsAll_ExtractUserName_FindDups
      )
    )  )
);

$LocationTweets_PatternsAll_AllEntities =
Union(
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "FunctionCall42128" => "userName",
      "T.place" => "place",
      "T.address" => "address"
    ),
    ApplyFunc(
      StringConst(
        ""
      ) => "FunctionCall42128",
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url"
        ),
        $LocationTweets_PatternsAll_Filtered
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userName" => "userName",
      "T.place" => "place",
      "T.address" => "address"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_Filtered_UserName
    )
  )
);

$_{"FathersDayWishes_Pattern1_ExtractMultiUser❡subquery1"} =
Select(
  And(
    Not(
      Overlaps(
        GetCol(
          "userName1"
        ),
        GetCol(
          "userName"
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /(?:RT|RT"|"|[Cc]:|via)/,
          "SimpleRegex"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /\bfrom\b/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /'s/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            3
          )
        )
      )
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName1",
      "T.tweet" => "tweet",
      "T.mention" => "mention1",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.userSpan",
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet",
          "userName" => "T.userName",
          "userSpan" => "T.userSpan"
        ),
        $FathersDayWishes_Pattern1_Filtered
      )
    )
  )
);

$_{"FathersDayWishes_Pattern2❡subquery1"} =
Select(
  And(
    FollowsTok(
      GetCol(
        "key"
      ),
      GetCol(
        "userName"
      ),
      IntConst(
        0
      ),
      IntConst(
        140
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /(?:RT|RT"|"|[Cc]:|via)/,
          "SimpleRegex"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /\bfrom\b/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /'s/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            3
          )
        )
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.mention" => "key",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.tweet",
      Project(
        (
          "mention" => "T.mention",
          "tweet" => "T.tweet"
        ),
        $FathersDayWishes_OtherThanPattern1
      )
    )
  )
);

$_{"MothersDayWishes_Pattern1_ExtractMultiUser❡subquery1"} =
Select(
  And(
    Not(
      Overlaps(
        GetCol(
          "userName1"
        ),
        GetCol(
          "userName"
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /(?:RT|RT"|"|[Cc]:|via)/,
          "SimpleRegex"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /'s/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            3
          )
        )
      )
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName1",
      "T.tweet" => "tweet",
      "T.mention" => "mention1",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.userSpan",
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet",
          "userName" => "T.userName",
          "userSpan" => "T.userSpan"
        ),
        $MothersDayWishes_Pattern1_Filtered
      )
    )
  )
);

$_{"MothersDayWishes_Pattern2❡subquery1"} =
Select(
  And(
    FollowsTok(
      GetCol(
        "key"
      ),
      GetCol(
        "userName"
      ),
      IntConst(
        0
      ),
      IntConst(
        140
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /(?:RT|RT"|"|[Cc]:|via)/,
          "SimpleRegex"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /'s/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            3
          )
        )
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.mention" => "key",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.tweet",
      Project(
        (
          "mention" => "T.mention",
          "tweet" => "T.tweet"
        ),
        $MothersDayWishes_OtherThanPattern1
      )
    )
  )
);

$_{"BabyWishes_ExtractUserName❡subquery1"} =
Select(
  And(
    Not(
      ContainsRegex(
        RegexConst(
          /(?:RT|via|RT"|"|[Cc]:)/,
          "SimpleRegex"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /'s/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "T.mention" => "mention",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.tweet",
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet"
        ),
        $BabyWishes_MentionNormalized_All
      )
    )
  )
);

$_{"LifeEvents_WeddingAndAnniv_Pat2_MultiUser_Extract❡subquery1"} =
Select(
  Overlaps(
    GetCol(
      "userName"
    ),
    GetCol(
      "userSpan"
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.mention" => "mention",
      "T.userSpan" => "userSpan",
      "T.key" => "key",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.tweet",
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet",
          "userSpan" => "T.userSpan"
        ),
        $LifeEvents_WeddingAndAnniv_Pat2_MultipleUsers
      )
    )
  )
);

$_{"LocationTweets_PatternsAll_AllEntities_UserNameAsList❡subquery1"} =
Project(
  (
    "T.tweet" => "tweet",
    "FunctionCall8971" => "userNames"
  ),
  GroupBy(
  (
    GetCol(
      "T.tweet"
    )
  ),
  (
    List(
      GetText(
        GetCol(
          "T.userName"
        )
      )
    ) => "FunctionCall8971"
  ),
    Project(
      (
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities
    )
  )
);

$FathersDayWishes_Pattern1_ExtractMultiUser =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "FunctionCall16001" => "mention"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.userName"
      ),
      GetCol(
        "T.mention1"
      )
    ) => "FunctionCall16001",
    Project(
      (
        "key" => "T.key",
        "mention1" => "T.mention1",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"FathersDayWishes_Pattern1_ExtractMultiUser❡subquery1"}
    )
  )
);

$FathersDayWishes_Pattern2 =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "FunctionCall16170" => "mention"
  ),
  Consolidate(
    "NotContainedWithin",
    CombineSpans(
      GetCol(
        "T.key"
      ),
      GetCol(
        "T.userName"
      )
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "T.key"
        ),
        GetCol(
          "T.userName"
        )
      ) => "FunctionCall16170",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet",
          "userName" => "T.userName"
        ),
        $_{"FathersDayWishes_Pattern2❡subquery1"}
      )
    )
  )
);

$FathersDayWishes_Pattern2_FalsePositives_1 =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Select(
    Or(
      ContainsDict(
        StringConst(
          "IndirectWishesDict"
        ),
        LeftContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            3
          )
        )
      ),
      ContainsDict(
        StringConst(
          "IndirectWishesDict"
        ),
        GetCol(
          "T.mention"
        )
      ),
      ContainsDict(
        StringConst(
          "FathersDayFilterDict"
        ),
        GetCol(
          "T.mention"
        )
      ),
      ContainsRegex(
        RegexConst(
          /\bRT\b/,
          "JavaRegex"
        ),
        GetCol(
          "T.mention"
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $FathersDayWishes_Pattern2
    )
  )
);

$MothersDayWishes_Pattern1_ExtractMultiUser =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "FunctionCall14941" => "mention"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.userName"
      ),
      GetCol(
        "T.mention1"
      )
    ) => "FunctionCall14941",
    Project(
      (
        "key" => "T.key",
        "mention1" => "T.mention1",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"MothersDayWishes_Pattern1_ExtractMultiUser❡subquery1"}
    )
  )
);

$MothersDayWishes_Pattern2 =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "FunctionCall15091" => "mention"
  ),
  Consolidate(
    "NotContainedWithin",
    CombineSpans(
      GetCol(
        "T.key"
      ),
      GetCol(
        "T.userName"
      )
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "T.key"
        ),
        GetCol(
          "T.userName"
        )
      ) => "FunctionCall15091",
      Project(
        (
          "key" => "T.key",
          "tweet" => "T.tweet",
          "userName" => "T.userName"
        ),
        $_{"MothersDayWishes_Pattern2❡subquery1"}
      )
    )
  )
);

$MothersDayWishes_Pattern2_FalsePositives_1 =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Select(
    Or(
      ContainsDict(
        StringConst(
          "IndirectWishesDict"
        ),
        LeftContextTok(
          GetCol(
            "T.key"
          ),
          IntConst(
            3
          )
        )
      ),
      ContainsDict(
        StringConst(
          "IndirectWishesDict"
        ),
        GetCol(
          "T.mention"
        )
      ),
      ContainsDict(
        StringConst(
          "MothersDayFilterDict"
        ),
        GetCol(
          "T.mention"
        )
      ),
      ContainsRegex(
        RegexConst(
          /\bRT\b/,
          "JavaRegex"
        ),
        GetCol(
          "T.mention"
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_Pattern2
    )
  )
);

$BabyWishes_ExtractUserName =
Project(
  (
    "T.key" => "key",
    "T.mention" => "mention",
    "T.userName" => "userName",
    "T.tweet" => "tweet"
  ),
  Project(
    (
      "key" => "T.key",
      "mention" => "T.mention",
      "tweet" => "T.tweet",
      "userName" => "T.userName"
    ),
    $_{"BabyWishes_ExtractUserName❡subquery1"}
  )
);

$BabyWishes_UserNameInMention =
Project(
  (
    "T.key" => "key",
    "T.mention" => "mention",
    "T.userName" => "userName",
    "T.tweet" => "tweet"
  ),
  Select(
    Contains(
      GetCol(
        "T.mention"
      ),
      GetCol(
        "T.userName"
      )
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $BabyWishes_ExtractUserName
    )
  )
);

$BabyWishes_UserNameNotInMention =
Project(
  (
    "T.key" => "key",
    "T.mention" => "mention",
    "T.userName" => "userName",
    "T.tweet" => "tweet"
  ),
  Select(
    Not(
      Contains(
        GetCol(
          "T.mention"
        ),
        GetCol(
          "T.userName"
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $BabyWishes_ExtractUserName
    )
  )
);

$BabyWishes_WrongUserNames =
Project(
  (
    "T.key" => "key",
    "T.mention" => "mention",
    "T.userName" => "userName",
    "T.tweet" => "tweet"
  ),
  Select(
    And(
      ContainsRegex(
        RegexConst(
          /@[a-zA-Z_0-9]/,
          "SimpleRegex"
        ),
        GetCol(
          "T.mention"
        )
      ),
      Not(
        Contains(
          GetCol(
            "T.mention"
          ),
          GetCol(
            "T.userName"
          )
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $BabyWishes_ExtractUserName
    )
  )
);

$BabyWishes_CorrectUserName =
Difference(
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "T.userName" => "userName",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $BabyWishes_ExtractUserName
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "T.userName" => "userName",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $BabyWishes_WrongUserNames
    )
  ));

$LifeEvents_WeddingAndAnniv_Pat2_MultiUser_Extract =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "FunctionCall12594" => "mention"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.mention"
      ),
      GetCol(
        "T.userName"
      )
    ) => "FunctionCall12594",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"LifeEvents_WeddingAndAnniv_Pat2_MultiUser_Extract❡subquery1"}
    )
  )
);

$LifeEvents_WeddingAndAnniv_Pat2_All =
Union(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_WeddingAndAnniv_Pattern2
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_WeddingAndAnniv_Pat2_MultiUser_Extract
    )
  )
);

$LifeEvents_WeddingAndAnniv_All =
Union(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_WeddingAndAnniv_Pat1_All
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_WeddingAndAnniv_Pat2_All
    )
  )
);

$LocationTweets_PatternsAll_AllEntities_UserNameAsList =
Project(
  (
    "T1.tweet" => "tweet",
    "T1.url" => "url",
    "T1.place" => "place",
    "T1.address" => "address",
    "T.userNames" => "userName"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T1.tweet"
    ),
    NLJoin(
      True(),
      Project(
        (
          "userNames" => "T.userNames"
        ),
        $_{"LocationTweets_PatternsAll_AllEntities_UserNameAsList❡subquery1"}
      ),
      Project(
        (
          "address" => "T1.address",
          "place" => "T1.place",
          "tweet" => "T1.tweet",
          "url" => "T1.url"
        ),
        $LocationTweets_PatternsAll_AllEntities
      )
    )
  )
);

$PatternsAllLocationTweets_Ambiguous =
Project(
  (
    "T.tweet" => "tweet",
    "T.url" => "url",
    "T.userName" => "userName",
    "T.place" => "place",
    "T.address" => "address"
  ),
  Select(
    And(
      Not(
        ContainsRegex(
          RegexConst(
            /4sq/,
            "SimpleRegex"
          ),
          GetCol(
            "T.url"
          )
        )
      ),
      Or(
        ContainsRegex(
          RegexConst(
            /chat/,
            "SimpleRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "T.place"
          )
        ),
        ContainsRegex(
          RegexConst(
            /in\s+love/,
            "SimpleRegex"
          ),
          StringConst(
            "CASE_INSENSITIVE"
          ),
          GetCol(
            "T.tweet"
          )
        )
      )
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_UserNameAsList
    )
  )
);

$LocationTweets_PatternsAll_AllEntities_Filtered_1 =
Difference(
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userName" => "userName",
      "T.place" => "place",
      "T.address" => "address"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_UserNameAsList
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userName" => "userName",
      "T.place" => "place",
      "T.address" => "address"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $PatternsAllLocationTweets_Ambiguous
    )
  ));

$PatternsAllLocationTweets_InvalidTweetsWithIamIn =
Project(
  (
    "T.tweet" => "tweet",
    "T.url" => "url",
    "T.userName" => "userName",
    "T.address" => "address",
    "T.place" => "place"
  ),
  Select(
    And(
      ContainsRegex(
        RegexConst(
          /I'm\s+in/,
          "SimpleRegex"
        ),
        GetCol(
          "T.tweet"
        )
      ),
      Not(
        ContainsRegex(
          RegexConst(
            /4sq/,
            "SimpleRegex"
          ),
          GetCol(
            "T.url"
          )
        )
      ),
      Not(
        MatchesRegex(
          RegexConst(
            /[0-9A-Z].+/,
            "SimpleRegex"
          ),
          Chomp(
            GetCol(
              "T.place"
            )
          )
        )
      )
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_Filtered_1
    )
  )
);

$LocationTweets_PatternsAll_AllEntities_Filtered_2 =
Difference(
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userName" => "userName",
      "T.place" => "place",
      "T.address" => "address"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_Filtered_1
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userName" => "userName",
      "T.place" => "place",
      "T.address" => "address"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $PatternsAllLocationTweets_InvalidTweetsWithIamIn
    )
  ));

$PatternsAllLocationTweets_PotentialUserAsLocationTweets =
Project(
  (
    "T.tweet" => "tweet",
    "T.url" => "url",
    "T.address" => "address",
    "T.userName" => "userName",
    "T.place" => "place"
  ),
  Select(
    Or(
      ContainsRegex(
        RegexConst(
          /(?:(?:I'm\s+)|\()(at|@)\s+(?:w\/|with|@[a-zA-Z_0-9]{1,15})/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        GetCol(
          "T.tweet"
        )
      ),
      ContainsRegex(
        RegexConst(
          /[wW]\//,
          "SimpleRegex"
        ),
        GetCol(
          "T.place"
        )
      )
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_Filtered_2
    )
  )
);

$LocationTweets_PatternsAll_AllEntities_Filtered_3 =
Difference(
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userName" => "userName",
      "T.place" => "place",
      "T.address" => "address"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_Filtered_2
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userName" => "userName",
      "T.place" => "place",
      "T.address" => "address"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $PatternsAllLocationTweets_PotentialUserAsLocationTweets
    )
  ));

$LocationTweets_PatternsAll_TrimStartChars_Place =
Project(
  (
    "T.tweet" => "tweet",
    "T.userName" => "userName",
    "T.url" => "url",
    "T.address" => "address",
    "T.place" => "place",
    "cleanPlace" => "cleanPlace"
  ),
  Regex(/(?:^[^a-zA-Z0-9\s(\[']+)(\b['a-zA-Z0-9].+)/, (1 => "cleanPlace"), "DOTALL", "T.place",
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_Filtered_3
    )
  )
);

$LocationTweets_PatternsAll_AllEntities_Filtered_4 =
Union(
Difference(
    Project(
      (
        "T.tweet" => "tweet",
        "T.url" => "url",
        "T.userName" => "userName",
        "T.place" => "place",
        "T.address" => "address"
      ),
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName"
        ),
        $LocationTweets_PatternsAll_AllEntities_Filtered_3
      )
    ),
    Project(
      (
        "T.tweet" => "tweet",
        "T.url" => "url",
        "T.userName" => "userName",
        "T.place" => "place",
        "T.address" => "address"
      ),
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName"
        ),
        $LocationTweets_PatternsAll_TrimStartChars_Place
      )
    )),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userName" => "userName",
      "T.cleanPlace" => "place",
      "T.address" => "address"
    ),
    Project(
      (
        "address" => "T.address",
        "cleanPlace" => "T.cleanPlace",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_TrimStartChars_Place
    )
  )
);

$LocationTweets_PatternsAll_TrimBrackets_Place =
Project(
  (
    "T.tweet" => "tweet",
    "T.userName" => "userName",
    "T.url" => "url",
    "T.address" => "address",
    "T.place" => "place",
    "cleanPlace" => "cleanPlace"
  ),
  Regex(/(?:^\()([a-zA-Z0-9].+)(?:\)$)/, (1 => "cleanPlace"), "DOTALL", "T.place",
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_Filtered_4
    )
  )
);

$LocationTweets_PatternsAll_AllEntities_Filtered_5 =
Union(
Difference(
    Project(
      (
        "T.tweet" => "tweet",
        "T.url" => "url",
        "T.userName" => "userName",
        "T.place" => "place",
        "T.address" => "address"
      ),
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName"
        ),
        $LocationTweets_PatternsAll_AllEntities_Filtered_4
      )
    ),
    Project(
      (
        "T.tweet" => "tweet",
        "T.url" => "url",
        "T.userName" => "userName",
        "T.place" => "place",
        "T.address" => "address"
      ),
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName"
        ),
        $LocationTweets_PatternsAll_TrimBrackets_Place
      )
    )),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userName" => "userName",
      "T.cleanPlace" => "place",
      "T.address" => "address"
    ),
    Project(
      (
        "address" => "T.address",
        "cleanPlace" => "T.cleanPlace",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_TrimBrackets_Place
    )
  )
);

$LocationTweets_PatternsAll_TrimEndChars_Place =
Project(
  (
    "T.tweet" => "tweet",
    "T.userName" => "userName",
    "T.url" => "url",
    "T.address" => "address",
    "T.place" => "place",
    "cleanPlace" => "cleanPlace"
  ),
  Regex(/([a-zA-Z0-9].+?)(?:[.!]{2,}|\(\s{0,10}\)|\[pic\]:|@|#|\*|:)$/, (1 => "cleanPlace"), "DOTALL", "T.place",
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_Filtered_5
    )
  )
);

$LocationTweets_PatternsAll_AllEntities_PlaceTrimmed =
Union(
Difference(
    Project(
      (
        "T.tweet" => "tweet",
        "T.url" => "url",
        "T.userName" => "userName",
        "T.place" => "place",
        "T.address" => "address"
      ),
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName"
        ),
        $LocationTweets_PatternsAll_AllEntities_Filtered_5
      )
    ),
    Project(
      (
        "T.tweet" => "tweet",
        "T.url" => "url",
        "T.userName" => "userName",
        "T.place" => "place",
        "T.address" => "address"
      ),
      Project(
        (
          "address" => "T.address",
          "place" => "T.place",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName"
        ),
        $LocationTweets_PatternsAll_TrimEndChars_Place
      )
    )),
  Project(
    (
      "T.tweet" => "tweet",
      "T.url" => "url",
      "T.userName" => "userName",
      "T.cleanPlace" => "place",
      "T.address" => "address"
    ),
    Project(
      (
        "address" => "T.address",
        "cleanPlace" => "T.cleanPlace",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_TrimEndChars_Place
    )
  )
);

$LocationTweets_PatternsAll_OnlyURL =
Project(
  (
    "T.userName" => "userName",
    "T.place" => "place",
    "T.address" => "address",
    "T.tweet" => "tweet",
    "T.url" => "url"
  ),
  Select(
    Or(
      Not(
        ContainsRegex(
          RegexConst(
            /[a-zA-Z0-9]/,
            "SimpleRegex"
          ),
          GetCol(
            "T.place"
          )
        )
      ),
      ContainsRegex(
        RegexConst(
          /\bpic\b/,
          "JavaRegex"
        ),
        GetCol(
          "T.place"
        )
      )
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_PlaceTrimmed
    )
  )
);

$_{"FathersDayWishes_Pattern2_Filtered❡subquery1"} =
Difference(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $FathersDayWishes_Pattern2
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $FathersDayWishes_Pattern2_FalsePositives_1
    )
  ));

$_{"MothersDayWishes_Pattern2_Filtered❡subquery1"} =
Difference(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_Pattern2
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_Pattern2_FalsePositives_1
    )
  ));

$_{"FathersDayWishes_Pattern1_All❡subquery1"} =
Union(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $FathersDayWishes_Pattern1_Filtered
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Select(
      Not(
        ContainsRegex(
          RegexConst(
            /\bRT\b/,
            "JavaRegex"
          ),
          GetCol(
            "T.mention"
          )
        )
      ),
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet",
          "userName" => "T.userName"
        ),
        $FathersDayWishes_Pattern1_ExtractMultiUser
      )
    )
  )
);

$_{"MothersDayWishes_Pattern1_All❡subquery1"} =
Union(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_Pattern1_Filtered
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_Pattern1_ExtractMultiUser
    )
  )
);

$_{"BabyWishes_UserNameToLeft❡subquery1❡subquery1"} =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.userName" => "userName",
    "FunctionCall14010" => "mention"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.userName"
      ),
      GetCol(
        "T.mention"
      )
    ) => "FunctionCall14010",
    Select(
      GreaterThan(
        GetEnd(
          GetCol(
            "T.key"
          )
        ),
        GetEnd(
          GetCol(
            "T.userName"
          )
        )
      ),
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet",
          "userName" => "T.userName"
        ),
        $BabyWishes_UserNameNotInMention
      )
    )
  )
);

$_{"BabyWishes_UserNameToLeft❡subquery1"} =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"BabyWishes_UserNameToLeft❡subquery1❡subquery1"}
    )
  )
);

$_{"BabyWishes_UserNameToRight❡subquery1❡subquery1"} =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.userName" => "userName",
    "FunctionCall13942" => "mention"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.mention"
      ),
      GetCol(
        "T.userName"
      )
    ) => "FunctionCall13942",
    Select(
      GreaterThan(
        GetEnd(
          GetCol(
            "T.userName"
          )
        ),
        GetEnd(
          GetCol(
            "T.key"
          )
        )
      ),
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet",
          "userName" => "T.userName"
        ),
        $BabyWishes_UserNameNotInMention
      )
    )
  )
);

$_{"BabyWishes_UserNameToRight❡subquery1"} =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"BabyWishes_UserNameToRight❡subquery1❡subquery1"}
    )
  )
);

$_{"LifeEvents_WeddingAndAnniv_CleanUserName❡subquery1"} =
Project(
  (
    "T.key" => "key",
    "T.mention" => "mention",
    "T.tweet" => "tweet",
    "userNameClean" => "userNameClean"
  ),
  Regex(/@(.+)/, (1 => "userNameClean"), "DOTALL", "T.userName",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_WeddingAndAnniv_All
    )
  )
);

$_{"LocationTweets_PatternsAll_AllEntities_Output❡subquery1"} =
Difference(
  Project(
    (
      "T.userName" => "userName",
      "T.place" => "place",
      "T.address" => "address",
      "T.tweet" => "tweet",
      "T.url" => "url"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_PlaceTrimmed
    )
  ),
  Project(
    (
      "T.userName" => "userName",
      "T.place" => "place",
      "T.address" => "address",
      "T.tweet" => "tweet",
      "T.url" => "url"
    ),
    Project(
      (
        "address" => "T.address",
        "place" => "T.place",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_OnlyURL
    )
  ));

$FathersDayWishes_Pattern2_Filtered =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention",
    "FunctionCall16313" => "userSpan"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.userName"
      ),
      GetCol(
        "T.tweet"
      )
    ) => "FunctionCall16313",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"FathersDayWishes_Pattern2_Filtered❡subquery1"}
    )
  )
);

$MothersDayWishes_Pattern2_Filtered =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention",
    "FunctionCall15223" => "userSpan"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.userName"
      ),
      GetCol(
        "T.tweet"
      )
    ) => "FunctionCall15223",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"MothersDayWishes_Pattern2_Filtered❡subquery1"}
    )
  )
);

$FathersDayWishes_Pattern1_All =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Project(
    (
      "key" => "T.key",
      "mention" => "T.mention",
      "tweet" => "T.tweet",
      "userName" => "T.userName"
    ),
    $_{"FathersDayWishes_Pattern1_All❡subquery1"}
  )
);

$MothersDayWishes_Pattern1_All =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Project(
    (
      "key" => "T.key",
      "mention" => "T.mention",
      "tweet" => "T.tweet",
      "userName" => "T.userName"
    ),
    $_{"MothersDayWishes_Pattern1_All❡subquery1"}
  )
);

$BabyWishes_UserNameToLeft =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T1.userName" => "userName",
    "T.mention" => "mention"
  ),
  NLJoin(
    True(),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"BabyWishes_UserNameToLeft❡subquery1"}
    ),
    Project(
      (
        "userName" => "T1.userName"
      ),
      $BabyWishes_CorrectUserName
    )
  )
);

$BabyWishes_UserNameToRight =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T1.userName" => "userName",
    "T.mention" => "mention"
  ),
  NLJoin(
    True(),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet"
      ),
      $_{"BabyWishes_UserNameToRight❡subquery1"}
    ),
    Project(
      (
        "userName" => "T1.userName"
      ),
      $BabyWishes_CorrectUserName
    )
  )
);

$LifeEvents_WeddingAndAnniv_CleanUserName =
Project(
  (
    "T.key" => "key",
    "T.userNameClean" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  NLJoin(
    True(),
    $Document,
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userNameClean" => "T.userNameClean"
      ),
      $_{"LifeEvents_WeddingAndAnniv_CleanUserName❡subquery1"}
    )
  )
);

$LocationTweets_PatternsAll_AllEntities_Output =
Project(
  (
    "T.userName" => "userName",
    "T.place" => "locationName",
    "T.address" => "locationAddress",
    "T.url" => "url",
    "T.tweet" => "tweet"
  ),
  Project(
    (
      "address" => "T.address",
      "place" => "T.place",
      "tweet" => "T.tweet",
      "url" => "T.url",
      "userName" => "T.userName"
    ),
    $_{"LocationTweets_PatternsAll_AllEntities_Output❡subquery1"}
  )
);

$PatternsAll_PartialLocationName =
Project(
  (
    "T.userName" => "userName",
    "T.locationName" => "locationName",
    "T.locationAddress" => "locationAddress",
    "T.url" => "url",
    "T.tweet" => "tweet",
    "FunctionCall9607" => "extendedLocation"
  ),
  ApplyFunc(
    SpanBetween(
      GetCol(
        "T.locationName"
      ),
      GetCol(
        "T.url"
      )
    ) => "FunctionCall9607",
    Select(
      And(
        ContainsRegex(
          RegexConst(
            /\(/,
            "SimpleRegex"
          ),
          GetCol(
            "T.locationName"
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /\)/,
              "SimpleRegex"
            ),
            GetCol(
              "T.locationName"
            )
          )
        )
      ),
      Project(
        (
          "locationAddress" => "T.locationAddress",
          "locationName" => "T.locationName",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName"
        ),
        $LocationTweets_PatternsAll_AllEntities_Output
      )
    )
  )
);

$_{"FathersDayWishes_Pattern2_ExtractMultiUser❡subquery1"} =
Select(
  And(
    Not(
      Overlaps(
        GetCol(
          "userName1"
        ),
        GetCol(
          "userName"
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /(?:RT|RT"|"|[Cc]:|via)/,
          "SimpleRegex"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /\bfrom\b/,
          "JavaRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /'s/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            3
          )
        )
      )
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName1",
      "T.tweet" => "tweet",
      "T.mention" => "mention",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.userSpan",
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet",
          "userName" => "T.userName",
          "userSpan" => "T.userSpan"
        ),
        $FathersDayWishes_Pattern2_Filtered
      )
    )
  )
);

$_{"MothersDayWishes_Pattern2_ExtractMultiUser❡subquery1"} =
Select(
  And(
    Not(
      Overlaps(
        GetCol(
          "userName1"
        ),
        GetCol(
          "userName"
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /(?:RT|RT"|"|[Cc]:|via)/,
          "SimpleRegex"
        ),
        LeftContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            2
          )
        )
      )
    ),
    Not(
      ContainsRegex(
        RegexConst(
          /'s/,
          "SimpleRegex"
        ),
        StringConst(
          "CASE_INSENSITIVE"
        ),
        RightContextTok(
          GetCol(
            "userName"
          ),
          IntConst(
            3
          )
        )
      )
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName1",
      "T.tweet" => "tweet",
      "T.mention" => "mention",
      "userName" => "userName"
    ),
    FastRegex(/@[a-zA-Z_0-9]{1,15}/, (0 => "userName"), "DOTALL", "T.userSpan",
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet",
          "userName" => "T.userName",
          "userSpan" => "T.userSpan"
        ),
        $MothersDayWishes_Pattern2_Filtered
      )
    )
  )
);

$_{"BabyWishes_MentionNormalizedWithUserName❡subquery1"} =
Union(
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "T.userName" => "userName",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $BabyWishes_UserNameInMention
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "T.userName" => "userName",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $BabyWishes_UserNameToRight
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.tweet" => "tweet",
      "T.userName" => "userName",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $BabyWishes_UserNameToLeft
    )
  )
);

$_{"LifeEvents_WeddingAndAnniv_Output❡subquery1"} =
Project(
  (
    "T.tweet" => "tweet",
    "FunctionCall12768" => "userNames"
  ),
  GroupBy(
  (
    GetCol(
      "T.tweet"
    )
  ),
  (
    List(
      GetText(
        GetCol(
          "T.userName"
        )
      )
    ) => "FunctionCall12768"
  ),
    Project(
      (
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $LifeEvents_WeddingAndAnniv_CleanUserName
    )
  )
);

$_{"PatternsAll_PartialLocationName_Rectified❡subquery1"} =
Select(
  Not(
    ContainsRegex(
      RegexConst(
        /\(\s{0,10}\)|\bcont\b/,
        "JavaRegex"
      ),
      GetCol(
        "extendedLocation"
      )
    )
  ),
  Project(
    (
      "T.tweet" => "tweet",
      "T.userName" => "userName",
      "T.locationName" => "locationName",
      "T.url" => "url",
      "T.locationAddress" => "locationAddress",
      "T.extendedLocation" => "extendedLocation",
      "locspan" => "locspan"
    ),
    Regex(/([^\(]+?)(?:w\/|\)).+/, (1 => "locspan"), "CASE_INSENSITIVE", "T.extendedLocation",
      Project(
        (
          "extendedLocation" => "T.extendedLocation",
          "locationAddress" => "T.locationAddress",
          "locationName" => "T.locationName",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName"
        ),
        $PatternsAll_PartialLocationName
      )
    )
  )
);

$FathersDayWishes_Pattern2_ExtractMultiUser =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "FunctionCall16368" => "mention"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.mention"
      ),
      GetCol(
        "T.userName"
      )
    ) => "FunctionCall16368",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"FathersDayWishes_Pattern2_ExtractMultiUser❡subquery1"}
    )
  )
);

$MothersDayWishes_Pattern2_ExtractMultiUser =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "FunctionCall15278" => "mention"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.mention"
      ),
      GetCol(
        "T.userName"
      )
    ) => "FunctionCall15278",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"MothersDayWishes_Pattern2_ExtractMultiUser❡subquery1"}
    )
  )
);

$BabyWishes_MentionNormalizedWithUserName =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.userName" => "userName",
    "T.mention" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.userName"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"BabyWishes_MentionNormalizedWithUserName❡subquery1"}
    )
  )
);

$LifeEvents_WeddingAndAnniv_Output =
Project(
  (
    "T1.key" => "key",
    "T.userNames" => "userNames",
    "T.tweet" => "tweet",
    "T1.mention" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T1.mention"
    ),
    NLJoin(
      True(),
      Project(
        (
          "tweet" => "T.tweet",
          "userNames" => "T.userNames"
        ),
        $_{"LifeEvents_WeddingAndAnniv_Output❡subquery1"}
      ),
      Project(
        (
          "key" => "T1.key",
          "mention" => "T1.mention"
        ),
        $LifeEvents_WeddingAndAnniv_CleanUserName
      )
    )
  )
);

$LifeEvents_WeddingWishes_Output =
Project(
  (
    "T.key" => "key",
    "FunctionCall42130" => "provenance",
    "T.userNames" => "userNames",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    ApplyFunc(
      StringConst(
        "Wedding"
      ) => "FunctionCall42130",
      NLJoin(
        True(),
        $LifeEvents_Marriage_Strong,
        Project(
          (
            "key" => "T.key",
            "mention" => "T.mention",
            "tweet" => "T.tweet",
            "userNames" => "T.userNames"
          ),
          $LifeEvents_WeddingAndAnniv_Output
        )
      )
    )
  )
);

$LifeEvents_AnnivWishes_Output =
Project(
  (
    "T.key" => "key",
    "FunctionCall42132" => "provenance",
    "T1.range" => "range",
    "T.userNames" => "userNames",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.mention"
    ),
    ApplyFunc(
      StringConst(
        "Anniversary"
      ) => "FunctionCall42132",
      NLJoin(
        True(),
        Project(
          (
            "range" => "T1.range"
          ),
          $LifeEvents_Anniversary_Strong
        ),
        Project(
          (
            "key" => "T.key",
            "mention" => "T.mention",
            "tweet" => "T.tweet",
            "userNames" => "T.userNames"
          ),
          $LifeEvents_WeddingAndAnniv_Output
        )
      )
    )
  )
);

$PatternsAll_PartialLocationName_Rectified =
Project(
  (
    "T.userName" => "userName",
    "T.locationName" => "locationName",
    "T.locationAddress" => "locationAddress",
    "T.url" => "url",
    "T.tweet" => "tweet",
    "FunctionCall9655" => "completeLocationName"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.locationName"
      ),
      GetCol(
        "T.locspan"
      )
    ) => "FunctionCall9655",
    Project(
      (
        "locationAddress" => "T.locationAddress",
        "locationName" => "T.locationName",
        "locspan" => "T.locspan",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $_{"PatternsAll_PartialLocationName_Rectified❡subquery1"}
    )
  )
);

$_{"FathersDayWishes_Pattern2_All❡subquery1"} =
Union(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $FathersDayWishes_Pattern2_Filtered
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Select(
      Not(
        ContainsRegex(
          RegexConst(
            /\bRT\b/,
            "JavaRegex"
          ),
          GetCol(
            "T.mention"
          )
        )
      ),
      Project(
        (
          "key" => "T.key",
          "mention" => "T.mention",
          "tweet" => "T.tweet",
          "userName" => "T.userName"
        ),
        $FathersDayWishes_Pattern2_ExtractMultiUser
      )
    )
  )
);

$_{"MothersDayWishes_Pattern2_All❡subquery1"} =
Union(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_Pattern2_Filtered
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_Pattern2_ExtractMultiUser
    )
  )
);

$_{"BabyWishes_AllNormalizedAttributes❡subquery1"} =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.userName" => "userName",
    "T.mention" => "mention",
    "userNameClean" => "userNameClean"
  ),
  Regex(/@(.+)/, (1 => "userNameClean"), "DOTALL", "T.userName",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $BabyWishes_MentionNormalizedWithUserName
    )
  )
);

$_{"LocationTweets_PatternsAll_AllEntities_Output_LocNameFixed❡subquery1"} =
Union(
  Project(
    (
      "T.userName" => "userName",
      "T.locationName" => "locationName",
      "T.locationAddress" => "locationAddress",
      "T.url" => "url",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "locationAddress" => "T.locationAddress",
        "locationName" => "T.locationName",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_Output
    )
  ),
  Project(
    (
      "T.userName" => "userName",
      "T.completeLocationName" => "locationName",
      "T.locationAddress" => "locationAddress",
      "T.url" => "url",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "completeLocationName" => "T.completeLocationName",
        "locationAddress" => "T.locationAddress",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $PatternsAll_PartialLocationName_Rectified
    )
  )
);

$FathersDayWishes_Pattern2_All =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Project(
    (
      "key" => "T.key",
      "mention" => "T.mention",
      "tweet" => "T.tweet",
      "userName" => "T.userName"
    ),
    $_{"FathersDayWishes_Pattern2_All❡subquery1"}
  )
);

$MothersDayWishes_Pattern2_All =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Project(
    (
      "key" => "T.key",
      "mention" => "T.mention",
      "tweet" => "T.tweet",
      "userName" => "T.userName"
    ),
    $_{"MothersDayWishes_Pattern2_All❡subquery1"}
  )
);

$MothersDayWishes_AllPatterns =
Union(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_Pattern1_All
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_Pattern2_All
    )
  )
);

$BabyWishes_AllNormalizedAttributes =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.userNameClean" => "userName",
    "T.mention" => "mention"
  ),
  Project(
    (
      "key" => "T.key",
      "mention" => "T.mention",
      "tweet" => "T.tweet",
      "userNameClean" => "T.userNameClean"
    ),
    $_{"BabyWishes_AllNormalizedAttributes❡subquery1"}
  )
);

$LocationTweets_PatternsAll_AllEntities_Output_LocNameFixed =
Project(
  (
    "T.userName" => "userName",
    "T.locationName" => "locationName",
    "T.locationAddress" => "locationAddress",
    "T.url" => "url",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.locationName"
    ),
    Project(
      (
        "locationAddress" => "T.locationAddress",
        "locationName" => "T.locationName",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $_{"LocationTweets_PatternsAll_AllEntities_Output_LocNameFixed❡subquery1"}
    )
  )
);

$PatternsAll_PartialLocationAddress =
Project(
  (
    "T.userName" => "userName",
    "T.locationName" => "locationName",
    "T.locationAddress" => "locationAddress",
    "T.url" => "url",
    "T.tweet" => "tweet",
    "FunctionCall9798" => "extendedLocation"
  ),
  ApplyFunc(
    Chomp(
      SpanBetween(
        GetCol(
          "T.locationAddress"
        ),
        GetCol(
          "T.url"
        )
      )
    ) => "FunctionCall9798",
    Select(
      And(
        ContainsRegex(
          RegexConst(
            /\(/,
            "SimpleRegex"
          ),
          GetCol(
            "T.locationAddress"
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /\)/,
              "SimpleRegex"
            ),
            GetCol(
              "T.locationAddress"
            )
          )
        )
      ),
      Project(
        (
          "locationAddress" => "T.locationAddress",
          "locationName" => "T.locationName",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName"
        ),
        $LocationTweets_PatternsAll_AllEntities_Output_LocNameFixed
      )
    )
  )
);

$_{"FathersDayWishes_AllPatterns❡subquery1"} =
Union(
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $FathersDayWishes_Pattern1_All
    )
  ),
  Project(
    (
      "T.key" => "key",
      "T.userName" => "userName",
      "T.tweet" => "tweet",
      "T.mention" => "mention"
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $FathersDayWishes_Pattern2_All
    )
  )
);

$_{"MothersDayWishes_AllPatterns_CleanUserName❡subquery1"} =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.mention" => "mention",
    "userNameClean" => "userNameClean"
  ),
  Regex(/@(.+)/, (1 => "userNameClean"), "DOTALL", "T.userName",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_AllPatterns
    )
  )
);

$_{"BabyWishes_Output❡subquery1"} =
Project(
  (
    "T.tweet" => "tweet",
    "FunctionCall14168" => "userNames"
  ),
  GroupBy(
  (
    GetCol(
      "T.tweet"
    )
  ),
  (
    List(
      GetText(
        GetCol(
          "T.userName"
        )
      )
    ) => "FunctionCall14168"
  ),
    Project(
      (
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $BabyWishes_AllNormalizedAttributes
    )
  )
);

$_{"PatternsAll_PartialLocationAddress_Rectified❡subquery1"} =
Project(
  (
    "T.tweet" => "tweet",
    "T.userName" => "userName",
    "T.locationName" => "locationName",
    "T.url" => "url",
    "T.locationAddress" => "locationAddress",
    "locspan" => "locspan"
  ),
  Regex(/(.*)\)/, (1 => "locspan"), "CASE_INSENSITIVE", "T.extendedLocation",
    Project(
      (
        "locationAddress" => "T.locationAddress",
        "locationName" => "T.locationName",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName",
        "extendedLocation" => "T.extendedLocation"
      ),
      $PatternsAll_PartialLocationAddress
    )
  )
);

$FathersDayWishes_AllPatterns =
Project(
  (
    "T.key" => "key",
    "T.userName" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Select(
    Not(
      ContainsDict(
        StringConst(
          "MotherKeywordsGenericDict"
        ),
        GetCol(
          "T.mention"
        )
      )
    ),
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $_{"FathersDayWishes_AllPatterns❡subquery1"}
    )
  )
);

$MothersDayWishes_AllPatterns_CleanUserName =
Project(
  (
    "T.key" => "key",
    "T.userNameClean" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Project(
    (
      "key" => "T.key",
      "mention" => "T.mention",
      "tweet" => "T.tweet",
      "userNameClean" => "T.userNameClean"
    ),
    $_{"MothersDayWishes_AllPatterns_CleanUserName❡subquery1"}
  )
);

$BabyWishes_Output =
Project(
  (
    "FunctionCall42134" => "provenance",
    "T.tweet" => "tweet",
    "T.userNames" => "userNames",
    "T1.mention" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.tweet"
    ),
    ApplyFunc(
      StringConst(
        "BabyWishes"
      ) => "FunctionCall42134",
      NLJoin(
        True(),
        Project(
          (
            "tweet" => "T.tweet",
            "userNames" => "T.userNames"
          ),
          $_{"BabyWishes_Output❡subquery1"}
        ),
        Project(
          (
            "mention" => "T1.mention"
          ),
          $BabyWishes_AllNormalizedAttributes
        )
      )
    )
  )
);

$PatternsAll_PartialLocationAddress_Rectified =
Project(
  (
    "T.userName" => "userName",
    "T.locationName" => "locationName",
    "T.url" => "url",
    "T.tweet" => "tweet",
    "FunctionCall9845" => "locationAddress"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "T.locationAddress"
      ),
      GetCol(
        "T.locspan"
      )
    ) => "FunctionCall9845",
    Project(
      (
        "locationAddress" => "T.locationAddress",
        "locationName" => "T.locationName",
        "locspan" => "T.locspan",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $_{"PatternsAll_PartialLocationAddress_Rectified❡subquery1"}
    )
  )
);

$_{"FathersDayWishes_AllPatterns_CleanUserName❡subquery1"} =
Project(
  (
    "T.key" => "key",
    "T.tweet" => "tweet",
    "T.mention" => "mention",
    "userNameClean" => "userNameClean"
  ),
  Regex(/@(.+)/, (1 => "userNameClean"), "DOTALL", "T.userName",
    Project(
      (
        "key" => "T.key",
        "mention" => "T.mention",
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $FathersDayWishes_AllPatterns
    )
  )
);

$_{"MothersDayWishes_AllPatterns_Output❡subquery1"} =
Project(
  (
    "T.tweet" => "tweet",
    "FunctionCall15511" => "userNames"
  ),
  GroupBy(
  (
    GetCol(
      "T.tweet"
    )
  ),
  (
    List(
      GetText(
        GetCol(
          "T.userName"
        )
      )
    ) => "FunctionCall15511"
  ),
    Project(
      (
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $MothersDayWishes_AllPatterns_CleanUserName
    )
  )
);

$_{"LocationTweets_PatternsAll_AllEntities_Consolidated❡subquery1"} =
Union(
  Project(
    (
      "T.userName" => "userName",
      "T.locationName" => "locationName",
      "T.locationAddress" => "locationAddress",
      "T.url" => "url",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "locationAddress" => "T.locationAddress",
        "locationName" => "T.locationName",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_Output_LocNameFixed
    )
  ),
  Project(
    (
      "T.userName" => "userName",
      "T.locationName" => "locationName",
      "T.locationAddress" => "locationAddress",
      "T.url" => "url",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "locationAddress" => "T.locationAddress",
        "locationName" => "T.locationName",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $PatternsAll_PartialLocationAddress_Rectified
    )
  )
);

$FathersDayWishes_AllPatterns_CleanUserName =
Project(
  (
    "T.key" => "key",
    "T.userNameClean" => "userName",
    "T.tweet" => "tweet",
    "T.mention" => "mention"
  ),
  Project(
    (
      "key" => "T.key",
      "mention" => "T.mention",
      "tweet" => "T.tweet",
      "userNameClean" => "T.userNameClean"
    ),
    $_{"FathersDayWishes_AllPatterns_CleanUserName❡subquery1"}
  )
);

$MothersDayWishes_AllPatterns_Output =
Project(
  (
    "FunctionCall42136" => "gender",
    "FunctionCall42138" => "provenance",
    "FunctionCall15472" => "key",
    "T.userNames" => "userNames",
    "FunctionCall15485" => "tweet",
    "FunctionCall15495" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T1.mention"
    ),
    ApplyFunc(
      GetText(
        GetCol(
          "T1.mention"
        )
      ) => "FunctionCall15495",
      ApplyFunc(
        GetText(
          GetCol(
            "T.tweet"
          )
        ) => "FunctionCall15485",
        ApplyFunc(
          GetText(
            GetCol(
              "T1.key"
            )
          ) => "FunctionCall15472",
          ApplyFunc(
            StringConst(
              "MothersDayWishes"
            ) => "FunctionCall42138",
            ApplyFunc(
              StringConst(
                "Female"
              ) => "FunctionCall42136",
              NLJoin(
                True(),
                Project(
                  (
                    "tweet" => "T.tweet",
                    "userNames" => "T.userNames"
                  ),
                  $_{"MothersDayWishes_AllPatterns_Output❡subquery1"}
                ),
                Project(
                  (
                    "key" => "T1.key",
                    "mention" => "T1.mention"
                  ),
                  $MothersDayWishes_AllPatterns_CleanUserName
                )
              )
            )
          )
        )
      )
    )
  )
);

$LocationTweets_PatternsAll_AllEntities_Consolidated =
Project(
  (
    "T.userName" => "userName",
    "T.locationName" => "locationName",
    "T.locationAddress" => "locationAddress",
    "T.url" => "url",
    "T.tweet" => "tweet"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T.locationAddress"
    ),
    Project(
      (
        "locationAddress" => "T.locationAddress",
        "locationName" => "T.locationName",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $_{"LocationTweets_PatternsAll_AllEntities_Consolidated❡subquery1"}
    )
  )
);

$LocationTweets_ContextualReferences =
Project(
  (
    "T.userName" => "userName",
    "T.locationName" => "locationName",
    "T.locationAddress" => "locationAddress",
    "T.url" => "url",
    "T.tweet" => "tweet"
  ),
  Select(
    MatchesDict(
      StringConst(
        "ContextualLocations.dict"
      ),
      StringConst(
        "IgnoreCase"
      ),
      Chomp(
        GetCol(
          "T.locationName"
        )
      )
    ),
    Project(
      (
        "locationAddress" => "T.locationAddress",
        "locationName" => "T.locationName",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_PatternsAll_AllEntities_Consolidated
    )
  )
);

$LocationTweets_ContextualReferences_Rectified =
Project(
  (
    "T.userName" => "userName",
    "T.locationAddress" => "locationAddress",
    "FunctionCall42140" => "locationName",
    "T.url" => "url",
    "T.tweet" => "tweet"
  ),
  ApplyFunc(
    StringConst(
      ""
    ) => "FunctionCall42140",
    Select(
      Not(
        MatchesRegex(
          RegexConst(
            //,
            "JavaRegex"
          ),
          Chomp(
            GetCol(
              "T.locationAddress"
            )
          )
        )
      ),
      Project(
        (
          "locationAddress" => "T.locationAddress",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName"
        ),
        $LocationTweets_ContextualReferences
      )
    )
  )
);

$_{"FathersDayWishes_AllPatterns_Output❡subquery1"} =
Project(
  (
    "T.tweet" => "tweet",
    "FunctionCall16641" => "userNames"
  ),
  GroupBy(
  (
    GetCol(
      "T.tweet"
    )
  ),
  (
    List(
      GetText(
        GetCol(
          "T.userName"
        )
      )
    ) => "FunctionCall16641"
  ),
    Project(
      (
        "tweet" => "T.tweet",
        "userName" => "T.userName"
      ),
      $FathersDayWishes_AllPatterns_CleanUserName
    )
  )
);

$_{"LocationTweets_AllPatterns_Output❡subquery1"} =
Union(
Difference(
    Project(
      (
        "T.userName" => "userName",
        "T.locationName" => "locationName",
        "T.locationAddress" => "locationAddress",
        "T.url" => "url",
        "T.tweet" => "tweet"
      ),
      Project(
        (
          "locationAddress" => "T.locationAddress",
          "locationName" => "T.locationName",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName"
        ),
        $LocationTweets_PatternsAll_AllEntities_Consolidated
      )
    ),
    Project(
      (
        "T.userName" => "userName",
        "T.locationName" => "locationName",
        "T.locationAddress" => "locationAddress",
        "T.url" => "url",
        "T.tweet" => "tweet"
      ),
      Project(
        (
          "locationAddress" => "T.locationAddress",
          "locationName" => "T.locationName",
          "tweet" => "T.tweet",
          "url" => "T.url",
          "userName" => "T.userName"
        ),
        $LocationTweets_ContextualReferences
      )
    )),
  Project(
    (
      "T.userName" => "userName",
      "T.locationName" => "locationName",
      "T.locationAddress" => "locationAddress",
      "T.url" => "url",
      "T.tweet" => "tweet"
    ),
    Project(
      (
        "locationAddress" => "T.locationAddress",
        "locationName" => "T.locationName",
        "tweet" => "T.tweet",
        "url" => "T.url",
        "userName" => "T.userName"
      ),
      $LocationTweets_ContextualReferences_Rectified
    )
  )
);

$FathersDayWishes_AllPatterns_Output =
Project(
  (
    "FunctionCall42142" => "gender",
    "FunctionCall42144" => "provenance",
    "FunctionCall16602" => "key",
    "T.userNames" => "userNames",
    "FunctionCall16615" => "tweet",
    "FunctionCall16625" => "mention"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "T1.mention"
    ),
    ApplyFunc(
      GetText(
        GetCol(
          "T1.mention"
        )
      ) => "FunctionCall16625",
      ApplyFunc(
        GetText(
          GetCol(
            "T.tweet"
          )
        ) => "FunctionCall16615",
        ApplyFunc(
          GetText(
            GetCol(
              "T1.key"
            )
          ) => "FunctionCall16602",
          ApplyFunc(
            StringConst(
              "FathersDayWishes"
            ) => "FunctionCall42144",
            ApplyFunc(
              StringConst(
                "Male"
              ) => "FunctionCall42142",
              NLJoin(
                True(),
                Project(
                  (
                    "tweet" => "T.tweet",
                    "userNames" => "T.userNames"
                  ),
                  $_{"FathersDayWishes_AllPatterns_Output❡subquery1"}
                ),
                Project(
                  (
                    "key" => "T1.key",
                    "mention" => "T1.mention"
                  ),
                  $FathersDayWishes_AllPatterns_CleanUserName
                )
              )
            )
          )
        )
      )
    )
  )
);

$LocationTweets_AllPatterns_Output =
Project(
  (
    "T.userName" => "userName",
    "T.locationName" => "locationName",
    "T.locationAddress" => "locationAddress",
    "T.url" => "url",
    "T.tweet" => "tweet"
  ),
  Project(
    (
      "locationAddress" => "T.locationAddress",
      "locationName" => "T.locationName",
      "tweet" => "T.tweet",
      "url" => "T.url",
      "userName" => "T.userName"
    ),
    $_{"LocationTweets_AllPatterns_Output❡subquery1"}
  )
);

$_{"_JO_SearchingP1_TmpView_<S.searching>__1"} =
Project(
  (
    "S.searching" => "group_0"
  ),
  Project(
    (
      "searching" => "S.searching"
    ),
    $JO_Search_Word
  )
);

$_{"_JO_SearchingP1_TmpView_<J.job>__2"} =
Project(
  (
    "J.job" => "group_0"
  ),
  Project(
    (
      "job" => "J.job"
    ),
    $JO_Job_Word
  )
);

$_{"_JO_SearchingP1_TmpView_<S.searching> <Token>{0,4} <J.job>__3"} =
Project(
  (
    "FunctionCall41238" => "group_0"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S0.group_0"
      ),
      GetCol(
        "S2.group_0"
      )
    ) => "FunctionCall41238",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "S0.group_0"
        ),
        GetCol(
          "S2.group_0"
        ),
        IntConst(
          0
        ),
        IntConst(
          4
        )
      ),
      Project(
        (
          "group_0" => "S0.group_0"
        ),
        $_{"_JO_SearchingP1_TmpView_<S.searching>__1"}
      ),
      Project(
        (
          "group_0" => "S2.group_0"
        ),
        $_{"_JO_SearchingP1_TmpView_<J.job>__2"}
      )
    )
  )
);

$_{"_ME_MG_goToSee_3d_TmpView_<S.see>__4"} =
Project(
  (
    "S.see" => "group_0"
  ),
  Project(
    (
      "see" => "S.see"
    ),
    $ME_MG_SeeTwitter
  )
);

$_{"_ME_MG_goToSee_3d_TmpView_<S.see> <Token>{1,5} \'3d\'__6"} =
Project(
  (
    "FunctionCall41276" => "group_0"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S0.group_0"
      ),
      GetCol(
        "S2.group_0"
      )
    ) => "FunctionCall41276",
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "S2.group_0"
        ),
        GetCol(
          "S0.group_0"
        ),
        IntConst(
          1
        ),
        IntConst(
          5
        )
      ),
      Project(
        (
          "group_0" => "S2.group_0"
        ),
        $_{"_ME_MG_goToSee_3d_TmpView_\'3d\'__5"}
      ),
      Project(
        (
          "group_0" => "S0.group_0"
        ),
        $_{"_ME_MG_goToSee_3d_TmpView_<S.see>__4"}
      )
    )
  )
);

$_{"_ME_MG_goToSee_3d_TmpView_<S.seeingPhrase>__7"} =
Project(
  (
    "S.seeingPhrase" => "group_0"
  ),
  Project(
    (
      "seeingPhrase" => "S.seeingPhrase"
    ),
    $ME_MG_seeingPhrase
  )
);

$_{"_ME_MG_goToSee_3d_TmpView_<S.seeingPhrase> <Token>{1,5} \'3d\'__9"} =
Project(
  (
    "FunctionCall41318" => "group_0"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S0.group_0"
      ),
      GetCol(
        "S2.group_0"
      )
    ) => "FunctionCall41318",
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "S2.group_0"
        ),
        GetCol(
          "S0.group_0"
        ),
        IntConst(
          1
        ),
        IntConst(
          5
        )
      ),
      Project(
        (
          "group_0" => "S2.group_0"
        ),
        $_{"_ME_MG_goToSee_3d_TmpView_\'3d\'__8"}
      ),
      Project(
        (
          "group_0" => "S0.group_0"
        ),
        $_{"_ME_MG_goToSee_3d_TmpView_<S.seeingPhrase>__7"}
      )
    )
  )
);

$_{"_ME_MG_goToSee_basic_TmpView_<S.seeingPhrase>__10"} =
Project(
  (
    "S.seeingPhrase" => "group_0"
  ),
  Project(
    (
      "seeingPhrase" => "S.seeingPhrase"
    ),
    $ME_MG_seeingPhrase
  )
);

$_{"_ME_MG_goToSee_basic_TmpView_<M.movieWord>__12"} =
Project(
  (
    "M.movieWord" => "group_0"
  ),
  Project(
    (
      "movieWord" => "M.movieWord"
    ),
    $ME_MG_movieMentions
  )
);

$_{"_ME_MG_goToSee_basic_TmpView_<S.seeingPhrase> \'a\' <M.movieWord>__13"} =
Project(
  (
    "FunctionCall41360" => "group_0"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S0.group_0"
      ),
      GetCol(
        "S2.group_0"
      )
    ) => "FunctionCall41360",
    Select(
      FollowsTok(
        GetCol(
          "S0.group_0"
        ),
        GetCol(
          "S1.group_0"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "S1.group_0"
          ),
          GetCol(
            "S2.group_0"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        AdjacentJoin(
          FollowedByTok(
            GetCol(
              "S1.group_0"
            ),
            GetCol(
              "S0.group_0"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          Project(
            (
              "group_0" => "S1.group_0"
            ),
            $_{"_ME_MG_goToSee_basic_TmpView_\'a\'__11"}
          ),
          Project(
            (
              "group_0" => "S0.group_0"
            ),
            $_{"_ME_MG_goToSee_basic_TmpView_<S.seeingPhrase>__10"}
          )
        ),
        Project(
          (
            "group_0" => "S2.group_0"
          ),
          $_{"_ME_MG_goToSee_basic_TmpView_<M.movieWord>__12"}
        )
      )
    )
  )
);

$_{"_ME_MG_goToSee_basic_TmpView_<S.seeingPhrase>__14"} =
Project(
  (
    "S.seeingPhrase" => "group_0"
  ),
  Project(
    (
      "seeingPhrase" => "S.seeingPhrase"
    ),
    $ME_MG_seeingPhrase
  )
);

$_{"_ME_MG_goToSee_basic_TmpView_<A.the>__15"} =
Project(
  (
    "A.the" => "group_0"
  ),
  Project(
    (
      "the" => "A.the"
    ),
    $ME_MG_TheTwitter
  )
);

$_{"_ME_MG_goToSee_basic_TmpView_<M.movieWord>__16"} =
Project(
  (
    "M.movieWord" => "group_0"
  ),
  Project(
    (
      "movieWord" => "M.movieWord"
    ),
    $ME_MG_movieMentions
  )
);

$_{"_ME_MG_goToSee_basic_TmpView_<S.seeingPhrase> <A.the> <M.movieWord>__17"} =
Project(
  (
    "FunctionCall41418" => "group_0"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S0.group_0"
      ),
      GetCol(
        "S2.group_0"
      )
    ) => "FunctionCall41418",
    Select(
      FollowsTok(
        GetCol(
          "S1.group_0"
        ),
        GetCol(
          "S2.group_0"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "S1.group_0"
          ),
          GetCol(
            "S0.group_0"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        AdjacentJoin(
          FollowsTok(
            GetCol(
              "S1.group_0"
            ),
            GetCol(
              "S2.group_0"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          Project(
            (
              "group_0" => "S1.group_0"
            ),
            $_{"_ME_MG_goToSee_basic_TmpView_<A.the>__15"}
          ),
          Project(
            (
              "group_0" => "S2.group_0"
            ),
            $_{"_ME_MG_goToSee_basic_TmpView_<M.movieWord>__16"}
          )
        ),
        Project(
          (
            "group_0" => "S0.group_0"
          ),
          $_{"_ME_MG_goToSee_basic_TmpView_<S.seeingPhrase>__14"}
        )
      )
    )
  )
);

$_{"_ME_MG_goToSee_descPhrase_TmpView_<S.seeingPhrase>__18"} =
Project(
  (
    "S.seeingPhrase" => "group_0"
  ),
  Project(
    (
      "seeingPhrase" => "S.seeingPhrase"
    ),
    $ME_MG_seeingPhrase
  )
);

$_{"_ME_MG_goToSee_descPhrase_TmpView_<A.the>__19"} =
Project(
  (
    "A.the" => "group_0"
  ),
  Project(
    (
      "the" => "A.the"
    ),
    $ME_MG_TheTwitter
  )
);

$_{"_ME_MG_goToSee_descPhrase_TmpView_<M.movieWord>__20"} =
Project(
  (
    "M.movieWord" => "group_0"
  ),
  Project(
    (
      "movieWord" => "M.movieWord"
    ),
    $ME_MG_movieMentions
  )
);

$_{"_ME_MG_goToSee_descPhrase_TmpView_<S.seeingPhrase> <A.the> <Token>{1,5} <M.movieWord>__21"} =
Project(
  (
    "FunctionCall41472" => "group_0"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S0.group_0"
      ),
      GetCol(
        "S3.group_0"
      )
    ) => "FunctionCall41472",
    Select(
      FollowsTok(
        GetCol(
          "S1.group_0"
        ),
        GetCol(
          "S3.group_0"
        ),
        IntConst(
          1
        ),
        IntConst(
          5
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "S1.group_0"
          ),
          GetCol(
            "S0.group_0"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        AdjacentJoin(
          FollowsTok(
            GetCol(
              "S1.group_0"
            ),
            GetCol(
              "S3.group_0"
            ),
            IntConst(
              1
            ),
            IntConst(
              5
            )
          ),
          Project(
            (
              "group_0" => "S1.group_0"
            ),
            $_{"_ME_MG_goToSee_descPhrase_TmpView_<A.the>__19"}
          ),
          Project(
            (
              "group_0" => "S3.group_0"
            ),
            $_{"_ME_MG_goToSee_descPhrase_TmpView_<M.movieWord>__20"}
          )
        ),
        Project(
          (
            "group_0" => "S0.group_0"
          ),
          $_{"_ME_MG_goToSee_descPhrase_TmpView_<S.seeingPhrase>__18"}
        )
      )
    )
  )
);

$_{"_ME_MG_goToSee_going_TmpView_<G.going>__22"} =
Project(
  (
    "G.going" => "group_0"
  ),
  Project(
    (
      "going" => "G.going"
    ),
    $ME_MG_goingTwitter
  )
);

$_{"_ME_MG_goToSee_going_TmpView_<T.to>__23"} =
Project(
  (
    "T.to" => "group_0"
  ),
  Project(
    (
      "to" => "T.to"
    ),
    $ME_MG_ToTwitter
  )
);

$_{"_ME_MG_goToSee_going_TmpView_<M.movieWord>__25"} =
Project(
  (
    "M.movieWord" => "group_0"
  ),
  Project(
    (
      "movieWord" => "M.movieWord"
    ),
    $ME_MG_movieMentions
  )
);

$_{"_ME_MG_goToSee_going_TmpView_<G.going> <T.to> \'a\' <M.movieWord>__26"} =
Project(
  (
    "FunctionCall41526" => "group_0"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S0.group_0"
      ),
      GetCol(
        "S3.group_0"
      )
    ) => "FunctionCall41526",
    Select(
      And(
        FollowsTok(
          GetCol(
            "S1.group_0"
          ),
          GetCol(
            "S2.group_0"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        FollowsTok(
          GetCol(
            "S2.group_0"
          ),
          GetCol(
            "S3.group_0"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "S1.group_0"
          ),
          GetCol(
            "S0.group_0"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Select(
          FollowsTok(
            GetCol(
              "S2.group_0"
            ),
            GetCol(
              "S3.group_0"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          AdjacentJoin(
            FollowedByTok(
              GetCol(
                "S2.group_0"
              ),
              GetCol(
                "S1.group_0"
              ),
              IntConst(
                0
              ),
              IntConst(
                0
              )
            ),
            AdjacentJoin(
              FollowsTok(
                GetCol(
                  "S2.group_0"
                ),
                GetCol(
                  "S3.group_0"
                ),
                IntConst(
                  0
                ),
                IntConst(
                  0
                )
              ),
              Project(
                (
                  "group_0" => "S2.group_0"
                ),
                $_{"_ME_MG_goToSee_going_TmpView_\'a\'__24"}
              ),
              Project(
                (
                  "group_0" => "S3.group_0"
                ),
                $_{"_ME_MG_goToSee_going_TmpView_<M.movieWord>__25"}
              )
            ),
            Project(
              (
                "group_0" => "S1.group_0"
              ),
              $_{"_ME_MG_goToSee_going_TmpView_<T.to>__23"}
            )
          )
        ),
        Project(
          (
            "group_0" => "S0.group_0"
          ),
          $_{"_ME_MG_goToSee_going_TmpView_<G.going>__22"}
        )
      )
    )
  )
);

$_{"_ME_MG_goToSee_going_TmpView_<G.going>__27"} =
Project(
  (
    "G.going" => "group_0"
  ),
  Project(
    (
      "going" => "G.going"
    ),
    $ME_MG_goingTwitter
  )
);

$_{"_ME_MG_goToSee_going_TmpView_<T.to>__28"} =
Project(
  (
    "T.to" => "group_0"
  ),
  Project(
    (
      "to" => "T.to"
    ),
    $ME_MG_ToTwitter
  )
);

$_{"_ME_MG_goToSee_going_TmpView_<A.the>__29"} =
Project(
  (
    "A.the" => "group_0"
  ),
  Project(
    (
      "the" => "A.the"
    ),
    $ME_MG_TheTwitter
  )
);

$_{"_ME_MG_goToSee_going_TmpView_<M.movieWord>__30"} =
Project(
  (
    "M.movieWord" => "group_0"
  ),
  Project(
    (
      "movieWord" => "M.movieWord"
    ),
    $ME_MG_movieMentions
  )
);

$_{"_ME_MG_goToSee_going_TmpView_<G.going> <T.to> <A.the> <Token>{0,4} <M.movieWord>__31"} =
Project(
  (
    "FunctionCall41600" => "group_0"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S0.group_0"
      ),
      GetCol(
        "S4.group_0"
      )
    ) => "FunctionCall41600",
    Select(
      And(
        FollowsTok(
          GetCol(
            "S1.group_0"
          ),
          GetCol(
            "S2.group_0"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        FollowsTok(
          GetCol(
            "S2.group_0"
          ),
          GetCol(
            "S4.group_0"
          ),
          IntConst(
            0
          ),
          IntConst(
            4
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "S1.group_0"
          ),
          GetCol(
            "S0.group_0"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Select(
          FollowsTok(
            GetCol(
              "S1.group_0"
            ),
            GetCol(
              "S2.group_0"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          AdjacentJoin(
            FollowsTok(
              GetCol(
                "S2.group_0"
              ),
              GetCol(
                "S4.group_0"
              ),
              IntConst(
                0
              ),
              IntConst(
                4
              )
            ),
            AdjacentJoin(
              FollowsTok(
                GetCol(
                  "S1.group_0"
                ),
                GetCol(
                  "S2.group_0"
                ),
                IntConst(
                  0
                ),
                IntConst(
                  0
                )
              ),
              Project(
                (
                  "group_0" => "S1.group_0"
                ),
                $_{"_ME_MG_goToSee_going_TmpView_<T.to>__28"}
              ),
              Project(
                (
                  "group_0" => "S2.group_0"
                ),
                $_{"_ME_MG_goToSee_going_TmpView_<A.the>__29"}
              )
            ),
            Project(
              (
                "group_0" => "S4.group_0"
              ),
              $_{"_ME_MG_goToSee_going_TmpView_<M.movieWord>__30"}
            )
          )
        ),
        Project(
          (
            "group_0" => "S0.group_0"
          ),
          $_{"_ME_MG_goToSee_going_TmpView_<G.going>__27"}
        )
      )
    )
  )
);

$_{"_ME_MG_goToSee_new_TmpView_<S.see>__32"} =
Project(
  (
    "S.see" => "group_0"
  ),
  Project(
    (
      "see" => "S.see"
    ),
    $ME_MG_SeeTwitter
  )
);

$_{"_ME_MG_goToSee_new_TmpView_<M.movieWord>__34"} =
Project(
  (
    "M.movieWord" => "group_0"
  ),
  Project(
    (
      "movieWord" => "M.movieWord"
    ),
    $ME_MG_movieMentions
  )
);

$_{"_ME_MG_goToSee_new_TmpView_<S.see> <Token>{1,1} \'new\' <Token>{0,5} <M.movieWord>__35"} =
Project(
  (
    "FunctionCall41670" => "group_0"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S0.group_0"
      ),
      GetCol(
        "S4.group_0"
      )
    ) => "FunctionCall41670",
    Select(
      FollowsTok(
        GetCol(
          "S2.group_0"
        ),
        GetCol(
          "S4.group_0"
        ),
        IntConst(
          0
        ),
        IntConst(
          5
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "S2.group_0"
          ),
          GetCol(
            "S0.group_0"
          ),
          IntConst(
            1
          ),
          IntConst(
            1
          )
        ),
        AdjacentJoin(
          FollowsTok(
            GetCol(
              "S2.group_0"
            ),
            GetCol(
              "S4.group_0"
            ),
            IntConst(
              0
            ),
            IntConst(
              5
            )
          ),
          Project(
            (
              "group_0" => "S2.group_0"
            ),
            $_{"_ME_MG_goToSee_new_TmpView_\'new\'__33"}
          ),
          Project(
            (
              "group_0" => "S4.group_0"
            ),
            $_{"_ME_MG_goToSee_new_TmpView_<M.movieWord>__34"}
          )
        ),
        Project(
          (
            "group_0" => "S0.group_0"
          ),
          $_{"_ME_MG_goToSee_new_TmpView_<S.see>__32"}
        )
      )
    )
  )
);

$_{"_ME_MG_goToSee_take_TmpView_<T.take>__36"} =
Project(
  (
    "T.take" => "group_0"
  ),
  Project(
    (
      "take" => "T.take"
    ),
    $ME_MG_takeTwitter
  )
);

$_{"_ME_MG_goToSee_take_TmpView_<M.movieWord>__38"} =
Project(
  (
    "M.movieWord" => "group_0"
  ),
  Project(
    (
      "movieWord" => "M.movieWord"
    ),
    $ME_MG_movieMentions
  )
);

$_{"_ME_MG_goToSee_take_TmpView_<T.take> <Token>{1,2} \'to\' <Token>{0,5} <M.movieWord>__39"} =
Project(
  (
    "FunctionCall41728" => "group_0"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S0.group_0"
      ),
      GetCol(
        "S4.group_0"
      )
    ) => "FunctionCall41728",
    Select(
      FollowsTok(
        GetCol(
          "S2.group_0"
        ),
        GetCol(
          "S4.group_0"
        ),
        IntConst(
          0
        ),
        IntConst(
          5
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "S2.group_0"
          ),
          GetCol(
            "S0.group_0"
          ),
          IntConst(
            1
          ),
          IntConst(
            2
          )
        ),
        AdjacentJoin(
          FollowsTok(
            GetCol(
              "S2.group_0"
            ),
            GetCol(
              "S4.group_0"
            ),
            IntConst(
              0
            ),
            IntConst(
              5
            )
          ),
          Project(
            (
              "group_0" => "S2.group_0"
            ),
            $_{"_ME_MG_goToSee_take_TmpView_\'to\'__37"}
          ),
          Project(
            (
              "group_0" => "S4.group_0"
            ),
            $_{"_ME_MG_goToSee_take_TmpView_<M.movieWord>__38"}
          )
        ),
        Project(
          (
            "group_0" => "S0.group_0"
          ),
          $_{"_ME_MG_goToSee_take_TmpView_<T.take>__36"}
        )
      )
    )
  )
);

$_{"_ME_MG_ticketMentions_TmpView_<P.purchaseWord>__40"} =
Project(
  (
    "P.purchaseWord" => "group_0"
  ),
  Project(
    (
      "purchaseWord" => "P.purchaseWord"
    ),
    $ME_MG_purchaseMentions
  )
);

$_{"_ME_MG_ticketMentions_TmpView_<T.ticketSyn>__41"} =
Project(
  (
    "T.ticketSyn" => "group_0"
  ),
  Project(
    (
      "ticketSyn" => "T.ticketSyn"
    ),
    $ME_MG_ticketSyn
  )
);

$_{"_ME_MG_ticketMentions_TmpView_<P.purchaseWord> <Token>{0,1} <T.ticketSyn>__42"} =
Project(
  (
    "FunctionCall41786" => "group_0"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S0.group_0"
      ),
      GetCol(
        "S2.group_0"
      )
    ) => "FunctionCall41786",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "S0.group_0"
        ),
        GetCol(
          "S2.group_0"
        ),
        IntConst(
          0
        ),
        IntConst(
          1
        )
      ),
      Project(
        (
          "group_0" => "S0.group_0"
        ),
        $_{"_ME_MG_ticketMentions_TmpView_<P.purchaseWord>__40"}
      ),
      Project(
        (
          "group_0" => "S2.group_0"
        ),
        $_{"_ME_MG_ticketMentions_TmpView_<T.ticketSyn>__41"}
      )
    )
  )
);

$_{"_ME_MG_atTheater_TmpView_<A.atWord>__43"} =
Project(
  (
    "A.atWord" => "group_0"
  ),
  Project(
    (
      "atWord" => "A.atWord"
    ),
    $ME_MG_atWord
  )
);

$_{"_ME_MG_atTheater_TmpView_<T.theaterWord>__44"} =
Project(
  (
    "T.theaterWord" => "group_0"
  ),
  Project(
    (
      "theaterWord" => "T.theaterWord"
    ),
    $ME_MG_theaterWord
  )
);

$_{"_ME_MG_atTheater_TmpView_<A.atWord> <Token>{0,2} <T.theaterWord>__45"} =
Project(
  (
    "FunctionCall41824" => "group_0"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S0.group_0"
      ),
      GetCol(
        "S2.group_0"
      )
    ) => "FunctionCall41824",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "S0.group_0"
        ),
        GetCol(
          "S2.group_0"
        ),
        IntConst(
          0
        ),
        IntConst(
          2
        )
      ),
      Project(
        (
          "group_0" => "S0.group_0"
        ),
        $_{"_ME_MG_atTheater_TmpView_<A.atWord>__43"}
      ),
      Project(
        (
          "group_0" => "S2.group_0"
        ),
        $_{"_ME_MG_atTheater_TmpView_<T.theaterWord>__44"}
      )
    )
  )
);

$JO_SearchingP1 =
Project(
  (
    "V.group_0" => "keyPhrase"
  ),
  Project(
    (
      "group_0" => "V.group_0"
    ),
    $_{"_JO_SearchingP1_TmpView_<S.searching> <Token>{0,4} <J.job>__3"}
  )
);

$JO_Searching =
Project(
  (
    "J.keyPhrase" => "job_type",
    "FunctionCall42146" => "category",
    "D.text" => "fullspan"
  ),
  ApplyFunc(
    StringConst(
      "Unemployed"
    ) => "FunctionCall42146",
    NLJoin(
      True(),
      Project(
        (
          "text" => "D.text"
        ),
        $Document
      ),
      Project(
        (
          "keyPhrase" => "J.keyPhrase"
        ),
        $JO_SearchingP1
      )
    )
  )
);

$JO_JobTypesWithCategory =
Union(
  Project(
    (
      "FunctionCall42148" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42148",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Accountancy_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42150" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42150",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_BlueCollar_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42152" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42152",
      Select(
        Not(
          ContainsDict(
            StringConst(
              "JO_Pet_Dict"
            ),
            LeftContextTok(
              GetCol(
                "J.job_type"
              ),
              IntConst(
                1
              )
            )
          )
        ),
        Project(
          (
            "category" => "J.category",
            "fullspan" => "J.fullspan",
            "job_type" => "J.job_type"
          ),
          $JO_BusinessOwner_Hooks
        )
      )
    )
  ),
  Project(
    (
      "FunctionCall42154" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42154",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Education_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42156" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42156",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_NonIT_Engineer
      )
    )
  ),
  Project(
    (
      "FunctionCall42158" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42158",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Food_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42160" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42160",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Health_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42162" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42162",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_homemaker
      )
    )
  ),
  Project(
    (
      "FunctionCall42164" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42164",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_IT_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42166" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42166",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Law_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42168" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42168",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Media_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42170" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42170",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Marketing_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42172" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42172",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Military_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42174" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42174",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_RealEstate_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42176" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42176",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Recruit_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42178" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42178",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Retired_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42180" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42180",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Management_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42182" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42182",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Searching
      )
    )
  ),
  Project(
    (
      "FunctionCall42184" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42184",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Sports_Hooks
      )
    )
  ),
  Project(
    (
      "FunctionCall42186" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42186",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Student
      )
    )
  )
);

$JO_JobTypesWithCategoryCompound =
Union(
  Project(
    (
      "FunctionCall42188" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42188",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_homemaker
      )
    )
  ),
  Project(
    (
      "FunctionCall42190" => "prov",
      "J.fullspan" => "fullspan",
      "J.category" => "category",
      "J.job_type" => "job_type"
    ),
    ApplyFunc(
      StringConst(
        "WithCategory"
      ) => "FunctionCall42190",
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type"
        ),
        $JO_Searching
      )
    )
  )
);

$ME_MG_goToSee_3d =
Union(
  Project(
    (
      "V.group_0" => "keyPhrase"
    ),
    Project(
      (
        "group_0" => "V.group_0"
      ),
      $_{"_ME_MG_goToSee_3d_TmpView_<S.see> <Token>{1,5} \'3d\'__6"}
    )
  ),
  Project(
    (
      "V.group_0" => "keyPhrase"
    ),
    Project(
      (
        "group_0" => "V.group_0"
      ),
      $_{"_ME_MG_goToSee_3d_TmpView_<S.seeingPhrase> <Token>{1,5} \'3d\'__9"}
    )
  )
);

$ME_MG_goToSee_basic =
Union(
  Project(
    (
      "V.group_0" => "keyPhrase"
    ),
    Project(
      (
        "group_0" => "V.group_0"
      ),
      $_{"_ME_MG_goToSee_basic_TmpView_<S.seeingPhrase> \'a\' <M.movieWord>__13"}
    )
  ),
  Project(
    (
      "V.group_0" => "keyPhrase"
    ),
    Project(
      (
        "group_0" => "V.group_0"
      ),
      $_{"_ME_MG_goToSee_basic_TmpView_<S.seeingPhrase> <A.the> <M.movieWord>__17"}
    )
  )
);

$ME_MG_goToSee_descPhrase =
Project(
  (
    "V.group_0" => "keyPhrase"
  ),
  Project(
    (
      "group_0" => "V.group_0"
    ),
    $_{"_ME_MG_goToSee_descPhrase_TmpView_<S.seeingPhrase> <A.the> <Token>{1,5} <M.movieWord>__21"}
  )
);

$ME_MG_goToSee_going =
Union(
  Project(
    (
      "V.group_0" => "keyPhrase"
    ),
    Project(
      (
        "group_0" => "V.group_0"
      ),
      $_{"_ME_MG_goToSee_going_TmpView_<G.going> <T.to> \'a\' <M.movieWord>__26"}
    )
  ),
  Project(
    (
      "V.group_0" => "keyPhrase"
    ),
    Project(
      (
        "group_0" => "V.group_0"
      ),
      $_{"_ME_MG_goToSee_going_TmpView_<G.going> <T.to> <A.the> <Token>{0,4} <M.movieWord>__31"}
    )
  )
);

$ME_MG_goToSee_new =
Project(
  (
    "V.group_0" => "keyPhrase"
  ),
  Project(
    (
      "group_0" => "V.group_0"
    ),
    $_{"_ME_MG_goToSee_new_TmpView_<S.see> <Token>{1,1} \'new\' <Token>{0,5} <M.movieWord>__35"}
  )
);

$ME_MG_goToSee_take =
Project(
  (
    "V.group_0" => "keyPhrase"
  ),
  Project(
    (
      "group_0" => "V.group_0"
    ),
    $_{"_ME_MG_goToSee_take_TmpView_<T.take> <Token>{1,2} \'to\' <Token>{0,5} <M.movieWord>__39"}
  )
);

$ME_MG_ticketMentions =
Union(
  Project(
    (
      "ticketWord" => "ticketWord"
    ),
    Project(
      (
        "text" => "D.text",
        "__sdm_match" => "ticketWord"
      ),
      $SDM_OUTPUT_ME_MG_otherTicketWords_WITH_Default_OVER_ME_MG_basicTweet_text
    )
  ),
  Project(
    (
      "V.group_0" => "ticketWord"
    ),
    Project(
      (
        "group_0" => "V.group_0"
      ),
      $_{"_ME_MG_ticketMentions_TmpView_<P.purchaseWord> <Token>{0,1} <T.ticketSyn>__42"}
    )
  )
);

$ME_MG_atTheater =
Project(
  (
    "V.group_0" => "keyPhrase"
  ),
  Project(
    (
      "group_0" => "V.group_0"
    ),
    $_{"_ME_MG_atTheater_TmpView_<A.atWord> <Token>{0,2} <T.theaterWord>__45"}
  )
);

$ME_MG_goToSeeRaw =
Union(
  Project(
    (
      "FunctionCall42192" => "prov",
      "M.keyPhrase" => "keyPhrase"
    ),
    ApplyFunc(
      StringConst(
        "goToSee_basic"
      ) => "FunctionCall42192",
      Project(
        (
          "keyPhrase" => "M.keyPhrase"
        ),
        $ME_MG_goToSee_basic
      )
    )
  ),
  Project(
    (
      "FunctionCall42194" => "prov",
      "M.keyPhrase" => "keyPhrase"
    ),
    ApplyFunc(
      StringConst(
        "goToSee_desc"
      ) => "FunctionCall42194",
      Project(
        (
          "keyPhrase" => "M.keyPhrase"
        ),
        $ME_MG_goToSee_descPhrase
      )
    )
  ),
  Project(
    (
      "FunctionCall42196" => "prov",
      "M.keyPhrase" => "keyPhrase"
    ),
    ApplyFunc(
      StringConst(
        "goToSee_new"
      ) => "FunctionCall42196",
      Project(
        (
          "keyPhrase" => "M.keyPhrase"
        ),
        $ME_MG_goToSee_new
      )
    )
  ),
  Project(
    (
      "FunctionCall42198" => "prov",
      "M.keyPhrase" => "keyPhrase"
    ),
    ApplyFunc(
      StringConst(
        "goToSee_going"
      ) => "FunctionCall42198",
      Project(
        (
          "keyPhrase" => "M.keyPhrase"
        ),
        $ME_MG_goToSee_going
      )
    )
  ),
  Project(
    (
      "FunctionCall42200" => "prov",
      "M.keyPhrase" => "keyPhrase"
    ),
    ApplyFunc(
      StringConst(
        "goToSee_take"
      ) => "FunctionCall42200",
      Project(
        (
          "keyPhrase" => "M.keyPhrase"
        ),
        $ME_MG_goToSee_take
      )
    )
  ),
  Project(
    (
      "FunctionCall42202" => "prov",
      "M.keyPhrase" => "keyPhrase"
    ),
    ApplyFunc(
      StringConst(
        "goToSee_3D"
      ) => "FunctionCall42202",
      Project(
        (
          "keyPhrase" => "M.keyPhrase"
        ),
        $ME_MG_goToSee_3d
      )
    )
  )
);

$ME_MG_movieTicketDup =
Union(
  Project(
    (
      "D.text" => "text",
      "M.movieWord" => "movieWord",
      "T.ticketWord" => "ticketWord",
      "FunctionCall2888" => "keyPhrase"
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "M.movieWord"
        ),
        GetCol(
          "T.ticketWord"
        )
      ) => "FunctionCall2888",
      NLJoin(
        Follows(
          GetCol(
            "M.movieWord"
          ),
          GetCol(
            "T.ticketWord"
          ),
          IntConst(
            0
          ),
          IntConst(
            140
          )
        ),
        SortMergeJoin(
          Follows(
            GetCol(
              "M.movieWord"
            ),
            GetCol(
              "T.ticketWord"
            ),
            IntConst(
              0
            ),
            IntConst(
              140
            )
          ),
          Project(
            (
              "movieWord" => "M.movieWord"
            ),
            $ME_MG_movieMentions
          ),
          Project(
            (
              "ticketWord" => "T.ticketWord"
            ),
            $ME_MG_ticketMentions
          )
        ),
        Project(
          (
            "text" => "D.text"
          ),
          $ME_MG_basicTweet
        )
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "M.movieWord" => "movieWord",
      "T.ticketWord" => "ticketWord",
      "FunctionCall2938" => "keyPhrase"
    ),
    ApplyFunc(
      CombineSpans(
        GetCol(
          "T.ticketWord"
        ),
        GetCol(
          "M.movieWord"
        )
      ) => "FunctionCall2938",
      SortMergeJoin(
        FollowedBy(
          GetCol(
            "M.movieWord"
          ),
          GetCol(
            "T.ticketWord"
          ),
          IntConst(
            0
          ),
          IntConst(
            140
          )
        ),
        NLJoin(
          True(),
          Project(
            (
              "text" => "D.text"
            ),
            $ME_MG_basicTweet
          ),
          Project(
            (
              "movieWord" => "M.movieWord"
            ),
            $ME_MG_movieMentions
          )
        ),
        Project(
          (
            "ticketWord" => "T.ticketWord"
          ),
          $ME_MG_ticketMentions
        )
      )
    )
  )
);

$ME_MG_goToSee =
Project(
  (
    "S.prov" => "prov",
    "S.keyPhrase" => "keyPhrase"
  ),
  Consolidate(
    "LeftToRight",
    GetCol(
      "S.keyPhrase"
    ),
    Project(
      (
        "keyPhrase" => "S.keyPhrase",
        "prov" => "S.prov"
      ),
      $ME_MG_goToSeeRaw
    )
  )
);

$ME_MG_movieTicket =
Project(
  (
    "M.text" => "text",
    "M.keyPhrase" => "keyPhrase"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "M.text"
    ),
    Project(
      (
        "keyPhrase" => "M.keyPhrase",
        "text" => "M.text"
      ),
      $ME_MG_movieTicketDup
    )
  )
);

$ME_MG_movieGoersWithDup =
Union(
  Project(
    (
      "M.prov" => "prov",
      "M.keyPhrase" => "keyPhrase"
    ),
    Project(
      (
        "keyPhrase" => "M.keyPhrase",
        "prov" => "M.prov"
      ),
      $ME_MG_goToSee
    )
  ),
  Project(
    (
      "FunctionCall42204" => "prov",
      "M.keyPhrase" => "keyPhrase"
    ),
    ApplyFunc(
      StringConst(
        "atTheater"
      ) => "FunctionCall42204",
      Project(
        (
          "keyPhrase" => "M.keyPhrase"
        ),
        $ME_MG_atTheater
      )
    )
  ),
  Project(
    (
      "FunctionCall42206" => "prov",
      "M.keyPhrase" => "keyPhrase"
    ),
    ApplyFunc(
      StringConst(
        "movieTicket"
      ) => "FunctionCall42206",
      Project(
        (
          "keyPhrase" => "M.keyPhrase"
        ),
        $ME_MG_movieTicket
      )
    )
  )
);

$ME_MovieGoers =
Project(
  (
    "M.prov" => "prov",
    "M.keyPhrase" => "keyPhrase"
  ),
  Consolidate(
    "LeftToRight",
    GetCol(
      "M.keyPhrase"
    ),
    Project(
      (
        "keyPhrase" => "M.keyPhrase",
        "prov" => "M.prov"
      ),
      $ME_MG_movieGoersWithDup
    )
  )
);

$JO_ProfessionsWithCategory =
Project(
  (
    "J.fullspan" => "fullspan",
    "J.category" => "category",
    "H.job_match" => "job_match",
    "J.prov" => "prov"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "H.job_match"
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "H.job_match"
        ),
        GetCol(
          "J.job_type"
        )
      ),
      Project(
        (
          "job_match" => "H.job_match"
        ),
        $JO_JobsUnsplitted
      ),
      Project(
        (
          "category" => "J.category",
          "fullspan" => "J.fullspan",
          "job_type" => "J.job_type",
          "prov" => "J.prov"
        ),
        $JO_JobTypesWithCategory
      )
    )
  )
);

$JO_ProfessionsWithCategory_2 =
Project(
  (
    "J.prov" => "prov",
    "J.fullspan" => "fullspan",
    "J.category" => "category",
    "J.job_type" => "job_type",
    "H.strict_job_match" => "job_match"
  ),
  SortMergeJoin(
    Overlaps(
      GetCol(
        "H.strict_job_match"
      ),
      GetCol(
        "J.job_type"
      )
    ),
    Project(
      (
        "strict_job_match" => "H.strict_job_match"
      ),
      $JO_Job_Parts
    ),
    Project(
      (
        "category" => "J.category",
        "fullspan" => "J.fullspan",
        "job_type" => "J.job_type",
        "prov" => "J.prov"
      ),
      $JO_JobTypesWithCategory
    )
  )
);

$JO_ProfessionsWithCategory_3 =
Project(
  (
    "J.prov" => "prov",
    "J.fullspan" => "fullspan",
    "J.category" => "category",
    "J.job_type" => "job_type",
    "H.job_match" => "job_match"
  ),
  SortMergeJoin(
    Overlaps(
      GetCol(
        "H.job_match"
      ),
      GetCol(
        "J.job_type"
      )
    ),
    Project(
      (
        "job_match" => "H.job_match"
      ),
      $_{"JO_ProfessionsWithCategory_3❡subquery1"}
    ),
    Project(
      (
        "category" => "J.category",
        "fullspan" => "J.fullspan",
        "job_type" => "J.job_type",
        "prov" => "J.prov"
      ),
      $JO_JobTypesWithCategoryCompound
    )
  )
);

$_{"JO_AllJobs_Categories❡subquery1"} =
Union(
  Project(
    (
      "J.category" => "category",
      "J.job_match" => "job_match",
      "J.prov" => "prov"
    ),
    Project(
      (
        "category" => "J.category",
        "job_match" => "J.job_match",
        "prov" => "J.prov"
      ),
      $JO_ProfessionsWithCategory
    )
  ),
  Project(
    (
      "J.category" => "category",
      "J.job_match" => "job_match",
      "J.prov" => "prov"
    ),
    Project(
      (
        "category" => "J.category",
        "job_match" => "J.job_match",
        "prov" => "J.prov"
      ),
      $JO_ProfessionsWithCategory_2
    )
  ),
  Project(
    (
      "J.category" => "category",
      "J.job_match" => "job_match",
      "J.prov" => "prov"
    ),
    Project(
      (
        "category" => "J.category",
        "job_match" => "J.job_match",
        "prov" => "J.prov"
      ),
      $JO_ProfessionsWithCategory_3
    )
  )
);

$JO_AllJobs_Categories =
Project(
  (
    "A.category" => "category",
    "A.job_match" => "job_match",
    "A.prov" => "prov"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "A.job_match"
    ),
    Project(
      (
        "category" => "A.category",
        "job_match" => "A.job_match",
        "prov" => "A.prov"
      ),
      $_{"JO_AllJobs_Categories❡subquery1"}
    )
  )
);

# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_names_FemaleFnames_dict_WITH_Default_OVER_clean_fname_text,
  $SDM_TMP_names_AndrogenousFnames_dict_WITH_Default_OVER_clean_fname_text,
  $SDM_TMP_names_MaleFnames_dict_WITH_Default_OVER_clean_fname_text
) = 
Dicts(
  (
    "names/FemaleFnames.dict" => "Default",
    "names/AndrogenousFnames.dict" => "Default",
    "names/MaleFnames.dict" => "Default"
  ),
  "text", "__sdm_match", $clean_fname
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_names_FemaleFnames_dict_WITH_Default_OVER_clean_fname_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_names_FemaleFnames_dict_WITH_Default_OVER_clean_fname_text);
$SDM_OUTPUT_names_AndrogenousFnames_dict_WITH_Default_OVER_clean_fname_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_names_AndrogenousFnames_dict_WITH_Default_OVER_clean_fname_text);
$SDM_OUTPUT_names_MaleFnames_dict_WITH_Default_OVER_clean_fname_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_names_MaleFnames_dict_WITH_Default_OVER_clean_fname_text);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_ME_Studios_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location_cities_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_NonIT_Engineer_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_Recruit_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_LIWC_job_work_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_netherlands_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_job_types_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_HI_Engineering_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_LIWC_sexuality_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_ME_Role_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_IT_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_LifeChangingEventsDict_JobRelated_Status_Weak_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_purchases_spam_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_Media_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_H_NLFTeams_Hashes_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_H_Sports_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_Law_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_china_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_Sports_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_Health_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location_stateListAbbrev_dict_WITH_Exact_OVER_Document_text,
  $SDM_TMP_HI_RealEstate_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_names_nationality_plural_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_turkey_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_brazil_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_H_Baseball_Hashes_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_LifeChangingEventsDict_JobRelated_Events_CoworkersDict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_india_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_H_Shop_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_LIWC_reln_status_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_JO_Job_Word_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location_stateList_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_iran_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_UK_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_JO_Student_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_Military_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_indonesia_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_italy_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_taiwan_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_MovieTopic_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_stateCapitals_us_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_Food_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_JO_homemaker_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_Retired_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_southKorea_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_names_MaleFnames_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location_USCities_Weak_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_H_Foodies_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_H_Dance_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_JO_Mom_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_H_NBATeams_Unique_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location_countries_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_location_continent_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_HI_BlueCollar_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_names_FemaleFnames_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_names_country_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_mexico_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_LIWC_parent_roles_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCity_world_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_Marketing_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_australia_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_ME_MovieCategClue_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_names_nationality_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_LIWC_female_roles_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_LIWC_teen_hearthrobs_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_ME_Star_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_JO_Wife_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_H_Pets_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_H_Baseball_Unique_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_russia_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_BusinessOwner_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_serbia_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_LIWC_non_consumer_cues_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_LIWC_male_roles_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_LIWC_teen_signals_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_Education_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_H_NFLTeams_Unique_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_VerbsForLocationDict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_city_bayarea_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_LIWC_teenslang_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_Management_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_LIWC_swearwords_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_JO_Search_Word_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_france_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_HI_Accountancy_Hooks_Dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_location__depr_cities_majorCities_spain_dict_WITH_Default_OVER_Document_text,
  $SDM_TMP_H_NBATeams_Hashes_Dict_WITH_Default_OVER_Document_text
) = 
Dicts(
  (
    "ME_Studios_Dict" => "Default",
    "location/cities.dict" => "Default",
    "HI_NonIT_Engineer_Dict" => "Default",
    "HI_Recruit_Hooks_Dict" => "Default",
    "LIWC/job_work.dict" => "Default",
    "location/_depr_cities/majorCities-netherlands.dict" => "Default",
    "job_types.dict" => "IgnoreCase",
    "HI_Engineering_Hooks_Dict" => "Default",
    "LIWC/sexuality.dict" => "Default",
    "ME_Role_Dict" => "Default",
    "HI_IT_Hooks_Dict" => "Default",
    "LifeChangingEventsDict_JobRelated_Status_Weak" => "IgnoreCase",
    "purchases/spam.dict" => "Default",
    "HI_Media_Hooks_Dict" => "Default",
    "H_NLFTeams_Hashes_Dict" => "Default",
    "H_Sports_Dict" => "Default",
    "HI_Law_Hooks_Dict" => "Default",
    "location/_depr_cities/majorCities-china.dict" => "Default",
    "HI_Sports_Hooks_Dict" => "Default",
    "HI_Health_Hooks_Dict" => "Default",
    "location/stateListAbbrev.dict" => "Exact",
    "HI_RealEstate_Dict" => "Default",
    "names/nationality_plural.dict" => "Default",
    "location/_depr_cities/majorCities-turkey.dict" => "Default",
    "location/_depr_cities/majorCities-brazil.dict" => "Default",
    "H_Baseball_Hashes_Dict" => "Default",
    "LifeChangingEventsDict_JobRelated_Events_CoworkersDict" => "IgnoreCase",
    "location/_depr_cities/majorCities-india.dict" => "Default",
    "H_Shop_Dict" => "Default",
    "LIWC/reln_status.dict" => "Default",
    "JO_Job_Word_Dict" => "Default",
    "location/stateList.dict" => "IgnoreCase",
    "location/_depr_cities/majorCities-iran.dict" => "Default",
    "location/_depr_cities/majorCities-UK.dict" => "Default",
    "JO_Student_Dict" => "Default",
    "HI_Military_Hooks_Dict" => "Default",
    "location/_depr_cities/majorCities-indonesia.dict" => "Default",
    "location/_depr_cities/majorCities-italy.dict" => "Default",
    "location/_depr_cities/majorCities-taiwan.dict" => "Default",
    "MovieTopic.dict" => "Default",
    "location/_depr_cities/stateCapitals-us.dict" => "Default",
    "HI_Food_Hooks_Dict" => "Default",
    "JO_homemaker_Dict" => "Default",
    "HI_Retired_Dict" => "Default",
    "location/_depr_cities/majorCities-southKorea.dict" => "Default",
    "names/MaleFnames.dict" => "Default",
    "location/USCities_Weak.dict" => "IgnoreCase",
    "H_Foodies_Dict" => "Default",
    "H_Dance_Dict" => "Default",
    "JO_Mom_Dict" => "Default",
    "H_NBATeams_Unique_Dict" => "Default",
    "location/countries.dict" => "IgnoreCase",
    "location/continent.dict" => "IgnoreCase",
    "HI_BlueCollar_Hooks_Dict" => "Default",
    "names/FemaleFnames.dict" => "Default",
    "names/country.dict" => "Default",
    "location/_depr_cities/majorCities-mexico.dict" => "Default",
    "LIWC/parent_roles.dict" => "Default",
    "location/_depr_cities/majorCity_world.dict" => "Default",
    "HI_Marketing_Hooks_Dict" => "Default",
    "location/_depr_cities/majorCities-australia.dict" => "Default",
    "ME_MovieCategClue_Dict" => "Default",
    "names/nationality.dict" => "Default",
    "LIWC/female_roles.dict" => "Default",
    "LIWC/teen_hearthrobs.dict" => "Default",
    "ME_Star_Dict" => "Default",
    "JO_Wife_Dict" => "Default",
    "H_Pets_Dict" => "Default",
    "H_Baseball_Unique_Dict" => "Default",
    "location/_depr_cities/majorCities-russia.dict" => "Default",
    "HI_BusinessOwner_Hooks_Dict" => "Default",
    "location/_depr_cities/majorCities-serbia.dict" => "Default",
    "LIWC/non_consumer_cues.dict" => "Default",
    "LIWC/male_roles.dict" => "Default",
    "LIWC/teen_signals.dict" => "Default",
    "HI_Education_Hooks_Dict" => "Default",
    "H_NFLTeams_Unique_Dict" => "Default",
    "VerbsForLocationDict" => "Default",
    "location/_depr_cities/city_bayarea.dict" => "Default",
    "LIWC/teenslang.dict" => "Default",
    "HI_Management_Hooks_Dict" => "Default",
    "LIWC/swearwords.dict" => "Default",
    "JO_Search_Word_Dict" => "Default",
    "location/_depr_cities/majorCities-france.dict" => "Default",
    "location/_depr_cities/majorCities.dict" => "Default",
    "HI_Accountancy_Hooks_Dict" => "Default",
    "location/_depr_cities/majorCities-spain.dict" => "Default",
    "H_NBATeams_Hashes_Dict" => "Default"
  ),
  "text", "__sdm_match", $Document
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_ME_Studios_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_Studios_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location_cities_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location_cities_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_NonIT_Engineer_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_NonIT_Engineer_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_Recruit_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_Recruit_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_LIWC_job_work_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_LIWC_job_work_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_netherlands_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_netherlands_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_job_types_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_job_types_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_HI_Engineering_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_Engineering_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_LIWC_sexuality_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_LIWC_sexuality_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_ME_Role_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_Role_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_IT_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_IT_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_LifeChangingEventsDict_JobRelated_Status_Weak_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_LifeChangingEventsDict_JobRelated_Status_Weak_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_purchases_spam_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_spam_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_Media_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_Media_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_H_NLFTeams_Hashes_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_H_NLFTeams_Hashes_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_H_Sports_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_H_Sports_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_Law_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_Law_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_china_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_china_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_Sports_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_Sports_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_Health_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_Health_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location_stateListAbbrev_dict_WITH_Exact_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location_stateListAbbrev_dict_WITH_Exact_OVER_Document_text);
$SDM_OUTPUT_HI_RealEstate_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_RealEstate_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_names_nationality_plural_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_names_nationality_plural_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_turkey_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_turkey_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_brazil_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_brazil_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_H_Baseball_Hashes_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_H_Baseball_Hashes_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_LifeChangingEventsDict_JobRelated_Events_CoworkersDict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_LifeChangingEventsDict_JobRelated_Events_CoworkersDict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_india_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_india_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_H_Shop_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_H_Shop_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_LIWC_reln_status_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_LIWC_reln_status_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_JO_Job_Word_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_JO_Job_Word_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location_stateList_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location_stateList_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_iran_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_iran_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_UK_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_UK_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_JO_Student_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_JO_Student_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_Military_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_Military_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_indonesia_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_indonesia_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_italy_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_italy_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_taiwan_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_taiwan_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_MovieTopic_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_MovieTopic_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_stateCapitals_us_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_stateCapitals_us_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_Food_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_Food_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_JO_homemaker_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_JO_homemaker_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_Retired_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_Retired_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_southKorea_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_southKorea_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_names_MaleFnames_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_names_MaleFnames_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location_USCities_Weak_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location_USCities_Weak_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_H_Foodies_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_H_Foodies_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_H_Dance_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_H_Dance_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_JO_Mom_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_JO_Mom_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_H_NBATeams_Unique_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_H_NBATeams_Unique_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location_countries_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location_countries_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_location_continent_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location_continent_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_HI_BlueCollar_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_BlueCollar_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_names_FemaleFnames_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_names_FemaleFnames_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_names_country_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_names_country_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_mexico_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_mexico_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_LIWC_parent_roles_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_LIWC_parent_roles_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCity_world_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCity_world_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_Marketing_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_Marketing_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_australia_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_australia_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_ME_MovieCategClue_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MovieCategClue_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_names_nationality_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_names_nationality_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_LIWC_female_roles_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_LIWC_female_roles_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_LIWC_teen_hearthrobs_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_LIWC_teen_hearthrobs_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_ME_Star_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_Star_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_JO_Wife_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_JO_Wife_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_H_Pets_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_H_Pets_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_H_Baseball_Unique_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_H_Baseball_Unique_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_russia_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_russia_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_BusinessOwner_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_BusinessOwner_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_serbia_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_serbia_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_LIWC_non_consumer_cues_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_LIWC_non_consumer_cues_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_LIWC_male_roles_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_LIWC_male_roles_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_LIWC_teen_signals_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_LIWC_teen_signals_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_Education_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_Education_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_H_NFLTeams_Unique_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_H_NFLTeams_Unique_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_VerbsForLocationDict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_VerbsForLocationDict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_city_bayarea_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_city_bayarea_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_LIWC_teenslang_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_LIWC_teenslang_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_Management_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_Management_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_LIWC_swearwords_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_LIWC_swearwords_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_JO_Search_Word_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_JO_Search_Word_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_france_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_france_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_HI_Accountancy_Hooks_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_HI_Accountancy_Hooks_Dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_location__depr_cities_majorCities_spain_dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_location__depr_cities_majorCities_spain_dict_WITH_Default_OVER_Document_text);
$SDM_OUTPUT_H_NBATeams_Hashes_Dict_WITH_Default_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_H_NBATeams_Hashes_Dict_WITH_Default_OVER_Document_text);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_ME_LA_CitiesDict_WITH_Default_OVER_ME_LA_InputText_text,
  $SDM_TMP_ME_LA_PopulousNonUSCitiesDict_WITH_Default_OVER_ME_LA_InputText_text,
  $SDM_TMP_ME_LA_Alias_USStates_Dict_WITH_Default_OVER_ME_LA_InputText_text,
  $SDM_TMP_ME_LA_AmbiguousCitiesDict_WITH_Default_OVER_ME_LA_InputText_text,
  $SDM_TMP_ME_LA_CountryDict_WITH_Default_OVER_ME_LA_InputText_text,
  $SDM_TMP_ME_LA_StateAbbrvsDict_WITH_Default_OVER_ME_LA_InputText_text,
  $SDM_TMP_ME_LA_Alias_NonUSCities_Dict_WITH_Default_OVER_ME_LA_InputText_text,
  $SDM_TMP_ME_LA_Alias_Countries_Dict_WITH_Default_OVER_ME_LA_InputText_text,
  $SDM_TMP_ME_LA_USAbbrvDict_WITH_Default_OVER_ME_LA_InputText_text,
  $SDM_TMP_ME_LA_StatesDict_WITH_Default_OVER_ME_LA_InputText_text,
  $SDM_TMP_ME_LA_Alias_USCities_Dict_WITH_Default_OVER_ME_LA_InputText_text
) = 
Dicts(
  (
    "ME_LA_CitiesDict" => "Default",
    "ME_LA_PopulousNonUSCitiesDict" => "Default",
    "ME_LA_Alias_USStates_Dict" => "Default",
    "ME_LA_AmbiguousCitiesDict" => "Default",
    "ME_LA_CountryDict" => "Default",
    "ME_LA_StateAbbrvsDict" => "Default",
    "ME_LA_Alias_NonUSCities_Dict" => "Default",
    "ME_LA_Alias_Countries_Dict" => "Default",
    "ME_LA_USAbbrvDict" => "Default",
    "ME_LA_StatesDict" => "Default",
    "ME_LA_Alias_USCities_Dict" => "Default"
  ),
  "text", "__sdm_match", $ME_LA_InputText
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_ME_LA_CitiesDict_WITH_Default_OVER_ME_LA_InputText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_LA_CitiesDict_WITH_Default_OVER_ME_LA_InputText_text);
$SDM_OUTPUT_ME_LA_PopulousNonUSCitiesDict_WITH_Default_OVER_ME_LA_InputText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_LA_PopulousNonUSCitiesDict_WITH_Default_OVER_ME_LA_InputText_text);
$SDM_OUTPUT_ME_LA_Alias_USStates_Dict_WITH_Default_OVER_ME_LA_InputText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_LA_Alias_USStates_Dict_WITH_Default_OVER_ME_LA_InputText_text);
$SDM_OUTPUT_ME_LA_AmbiguousCitiesDict_WITH_Default_OVER_ME_LA_InputText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_LA_AmbiguousCitiesDict_WITH_Default_OVER_ME_LA_InputText_text);
$SDM_OUTPUT_ME_LA_CountryDict_WITH_Default_OVER_ME_LA_InputText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_LA_CountryDict_WITH_Default_OVER_ME_LA_InputText_text);
$SDM_OUTPUT_ME_LA_StateAbbrvsDict_WITH_Default_OVER_ME_LA_InputText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_LA_StateAbbrvsDict_WITH_Default_OVER_ME_LA_InputText_text);
$SDM_OUTPUT_ME_LA_Alias_NonUSCities_Dict_WITH_Default_OVER_ME_LA_InputText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_LA_Alias_NonUSCities_Dict_WITH_Default_OVER_ME_LA_InputText_text);
$SDM_OUTPUT_ME_LA_Alias_Countries_Dict_WITH_Default_OVER_ME_LA_InputText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_LA_Alias_Countries_Dict_WITH_Default_OVER_ME_LA_InputText_text);
$SDM_OUTPUT_ME_LA_USAbbrvDict_WITH_Default_OVER_ME_LA_InputText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_LA_USAbbrvDict_WITH_Default_OVER_ME_LA_InputText_text);
$SDM_OUTPUT_ME_LA_StatesDict_WITH_Default_OVER_ME_LA_InputText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_LA_StatesDict_WITH_Default_OVER_ME_LA_InputText_text);
$SDM_OUTPUT_ME_LA_Alias_USCities_Dict_WITH_Default_OVER_ME_LA_InputText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_LA_Alias_USCities_Dict_WITH_Default_OVER_ME_LA_InputText_text);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_names_FemaleFnames_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan,
  $SDM_TMP_names_firstName_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan,
  $SDM_TMP_names_AndrogenousFnames_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan,
  $SDM_TMP_names_lastName_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan,
  $SDM_TMP_names_MaleFnames_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan
) = 
Dicts(
  (
    "names/FemaleFnames.dict" => "Default",
    "names/firstName.dict" => "Default",
    "names/AndrogenousFnames.dict" => "Default",
    "names/lastName.dict" => "Default",
    "names/MaleFnames.dict" => "Default"
  ),
  "fullspan", "__sdm_match", $NL_RecsNoFullName
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_names_FemaleFnames_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan = Project(("__sdm_match" => "__sdm_match", "fullspan" => "fullspan"), $SDM_TMP_names_FemaleFnames_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan);
$SDM_OUTPUT_names_firstName_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan = Project(("__sdm_match" => "__sdm_match", "fullspan" => "fullspan"), $SDM_TMP_names_firstName_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan);
$SDM_OUTPUT_names_AndrogenousFnames_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan = Project(("__sdm_match" => "__sdm_match", "fullspan" => "fullspan"), $SDM_TMP_names_AndrogenousFnames_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan);
$SDM_OUTPUT_names_lastName_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan = Project(("__sdm_match" => "__sdm_match", "fullspan" => "fullspan"), $SDM_TMP_names_lastName_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan);
$SDM_OUTPUT_names_MaleFnames_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan = Project(("__sdm_match" => "__sdm_match", "fullspan" => "fullspan"), $SDM_TMP_names_MaleFnames_dict_WITH_Default_OVER_NL_RecsNoFullName_fullspan);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP__ME_MG_goToSee_new_TmpDict__5_WITH_Default_OVER_DocScan_text,
  $SDM_TMP__ME_MG_goToSee_basic_TmpDict__3_WITH_Default_OVER_DocScan_text,
  $SDM_TMP__ME_MG_goToSee_take_TmpDict__6_WITH_Default_OVER_DocScan_text,
  $SDM_TMP__ME_MG_goToSee_3d_TmpDict__1_WITH_Default_OVER_DocScan_text,
  $SDM_TMP__ME_MG_goToSee_3d_TmpDict__2_WITH_Default_OVER_DocScan_text,
  $SDM_TMP__ME_MG_goToSee_going_TmpDict__4_WITH_Default_OVER_DocScan_text
) = 
Dicts(
  (
    "_ME_MG_goToSee_new_TmpDict__5" => "Default",
    "_ME_MG_goToSee_basic_TmpDict__3" => "Default",
    "_ME_MG_goToSee_take_TmpDict__6" => "Default",
    "_ME_MG_goToSee_3d_TmpDict__1" => "Default",
    "_ME_MG_goToSee_3d_TmpDict__2" => "Default",
    "_ME_MG_goToSee_going_TmpDict__4" => "Default"
  ),
  "text", "__sdm_match", $Document
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT__ME_MG_goToSee_new_TmpDict__5_WITH_Default_OVER_DocScan_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP__ME_MG_goToSee_new_TmpDict__5_WITH_Default_OVER_DocScan_text);
$SDM_OUTPUT__ME_MG_goToSee_basic_TmpDict__3_WITH_Default_OVER_DocScan_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP__ME_MG_goToSee_basic_TmpDict__3_WITH_Default_OVER_DocScan_text);
$SDM_OUTPUT__ME_MG_goToSee_take_TmpDict__6_WITH_Default_OVER_DocScan_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP__ME_MG_goToSee_take_TmpDict__6_WITH_Default_OVER_DocScan_text);
$SDM_OUTPUT__ME_MG_goToSee_3d_TmpDict__1_WITH_Default_OVER_DocScan_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP__ME_MG_goToSee_3d_TmpDict__1_WITH_Default_OVER_DocScan_text);
$SDM_OUTPUT__ME_MG_goToSee_3d_TmpDict__2_WITH_Default_OVER_DocScan_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP__ME_MG_goToSee_3d_TmpDict__2_WITH_Default_OVER_DocScan_text);
$SDM_OUTPUT__ME_MG_goToSee_going_TmpDict__4_WITH_Default_OVER_DocScan_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP__ME_MG_goToSee_going_TmpDict__4_WITH_Default_OVER_DocScan_text);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_marriagePhrases_dict_WITH_Default_OVER_Candidates_LifeEvents_Marriage_Refined_tweet,
  $SDM_TMP_weddingAnniversary_dict_WITH_Default_OVER_Candidates_LifeEvents_Marriage_Refined_tweet
) = 
Dicts(
  (
    "marriagePhrases.dict" => "Default",
    "weddingAnniversary.dict" => "Default"
  ),
  "tweet", "__sdm_match", $Candidates_LifeEvents_Marriage_Refined
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_marriagePhrases_dict_WITH_Default_OVER_Candidates_LifeEvents_Marriage_Refined_tweet = Project(("__sdm_match" => "__sdm_match", "tweet" => "tweet"), $SDM_TMP_marriagePhrases_dict_WITH_Default_OVER_Candidates_LifeEvents_Marriage_Refined_tweet);
$SDM_OUTPUT_weddingAnniversary_dict_WITH_Default_OVER_Candidates_LifeEvents_Marriage_Refined_tweet = Project(("__sdm_match" => "__sdm_match", "tweet" => "tweet"), $SDM_TMP_weddingAnniversary_dict_WITH_Default_OVER_Candidates_LifeEvents_Marriage_Refined_tweet);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_genericHasChildrenClues_dict_WITH_Default_OVER_CandidatesAll_LifeEvents_HasChildren_Generic_tweet,
  $SDM_TMP_Candidate_StrongKeywords_HasChildrenDict_WITH_Default_OVER_CandidatesAll_LifeEvents_HasChildren_Generic_tweet
) = 
Dicts(
  (
    "genericHasChildrenClues.dict" => "Default",
    "Candidate_StrongKeywords_HasChildrenDict" => "Default"
  ),
  "tweet", "__sdm_match", $CandidatesAll_LifeEvents_HasChildren_Generic
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_genericHasChildrenClues_dict_WITH_Default_OVER_CandidatesAll_LifeEvents_HasChildren_Generic_tweet = Project(("__sdm_match" => "__sdm_match", "tweet" => "tweet"), $SDM_TMP_genericHasChildrenClues_dict_WITH_Default_OVER_CandidatesAll_LifeEvents_HasChildren_Generic_tweet);
$SDM_OUTPUT_Candidate_StrongKeywords_HasChildrenDict_WITH_Default_OVER_CandidatesAll_LifeEvents_HasChildren_Generic_tweet = Project(("__sdm_match" => "__sdm_match", "tweet" => "tweet"), $SDM_TMP_Candidate_StrongKeywords_HasChildrenDict_WITH_Default_OVER_CandidatesAll_LifeEvents_HasChildren_Generic_tweet);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_MET_Confused_WITH_Default_OVER_MET_NotInSentimentTemp_text,
  $SDM_TMP_MET_VeryPositiveDict_WITH_Default_OVER_MET_NotInSentimentTemp_text,
  $SDM_TMP_MET_VeryNegative_WITH_Default_OVER_MET_NotInSentimentTemp_text
) = 
Dicts(
  (
    "MET_Confused" => "Default",
    "MET_VeryPositiveDict" => "Default",
    "MET_VeryNegative" => "Default"
  ),
  "text", "__sdm_match", $MET_NotInSentimentTemp
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_MET_Confused_WITH_Default_OVER_MET_NotInSentimentTemp_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_MET_Confused_WITH_Default_OVER_MET_NotInSentimentTemp_text);
$SDM_OUTPUT_MET_VeryPositiveDict_WITH_Default_OVER_MET_NotInSentimentTemp_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_MET_VeryPositiveDict_WITH_Default_OVER_MET_NotInSentimentTemp_text);
$SDM_OUTPUT_MET_VeryNegative_WITH_Default_OVER_MET_NotInSentimentTemp_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_MET_VeryNegative_WITH_Default_OVER_MET_NotInSentimentTemp_text);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_MET_PositiveTags_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_BEAUTIFUL_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_VB_LIKE_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_MET_OtherPositive_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_BAD_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_ME_IntentVerb_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_MET_NegativeTags_Movie_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_UGLY_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_MET_Adversary_ConjunctionsPreps_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_SEXY_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_VB_DISLIKE_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_MET_Conditional_ConjunctionsPreps_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_ME_SingleActionHint_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_EXCITING_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_MET_ConjunctionsPreps_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_GOOD_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_BORING_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_ME_ActionVerb_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_INTERESTING_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text,
  $SDM_TMP_MET_ConjunctivePunct_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text
) = 
Dicts(
  (
    "MET_PositiveTags_Dict" => "Default",
    "BEAUTIFUL_Dict" => "Default",
    "VB_LIKE_Dict" => "Default",
    "MET_OtherPositive_Dict" => "Default",
    "BAD_Dict" => "Default",
    "ME_IntentVerb_Dict" => "Default",
    "MET_NegativeTags_Movie_Dict" => "Default",
    "UGLY_Dict" => "Default",
    "MET_Adversary_ConjunctionsPreps_Dict" => "Default",
    "SEXY_Dict" => "Default",
    "VB_DISLIKE_Dict" => "Default",
    "MET_Conditional_ConjunctionsPreps_Dict" => "Default",
    "ME_SingleActionHint_Dict" => "Default",
    "EXCITING_Dict" => "Default",
    "MET_ConjunctionsPreps_Dict" => "Default",
    "GOOD_Dict" => "Default",
    "BORING_Dict" => "Default",
    "ME_ActionVerb_Dict" => "Default",
    "INTERESTING_Dict" => "Default",
    "MET_ConjunctivePunct_Dict" => "Default"
  ),
  "text", "__sdm_match", $MET_AllBuzz_OnlyText
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_MET_PositiveTags_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_MET_PositiveTags_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_BEAUTIFUL_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_BEAUTIFUL_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_VB_LIKE_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_VB_LIKE_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_MET_OtherPositive_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_MET_OtherPositive_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_BAD_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_BAD_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_ME_IntentVerb_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_IntentVerb_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_MET_NegativeTags_Movie_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_MET_NegativeTags_Movie_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_UGLY_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_UGLY_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_MET_Adversary_ConjunctionsPreps_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_MET_Adversary_ConjunctionsPreps_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_SEXY_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_SEXY_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_VB_DISLIKE_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_VB_DISLIKE_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_MET_Conditional_ConjunctionsPreps_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_MET_Conditional_ConjunctionsPreps_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_ME_SingleActionHint_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_SingleActionHint_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_EXCITING_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_EXCITING_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_MET_ConjunctionsPreps_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_MET_ConjunctionsPreps_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_GOOD_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_GOOD_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_BORING_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_BORING_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_ME_ActionVerb_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_ActionVerb_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_INTERESTING_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_INTERESTING_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);
$SDM_OUTPUT_MET_ConjunctivePunct_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_MET_ConjunctivePunct_Dict_WITH_Default_OVER_MET_AllBuzz_OnlyText_text);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_CongratulatoryKeywords_dict_WITH_IgnoreCase_OVER_Candidates_JobEvents_Wishes_tweet_tweet,
  $SDM_TMP_ConsolatoryDict_WITH_IgnoreCase_OVER_Candidates_JobEvents_Wishes_tweet_tweet
) = 
Dicts(
  (
    "CongratulatoryKeywords.dict" => "IgnoreCase",
    "ConsolatoryDict" => "IgnoreCase"
  ),
  "tweet", "__sdm_match", $Candidates_JobEvents_Wishes_tweet
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_CongratulatoryKeywords_dict_WITH_IgnoreCase_OVER_Candidates_JobEvents_Wishes_tweet_tweet = Project(("__sdm_match" => "__sdm_match", "tweet" => "tweet"), $SDM_TMP_CongratulatoryKeywords_dict_WITH_IgnoreCase_OVER_Candidates_JobEvents_Wishes_tweet_tweet);
$SDM_OUTPUT_ConsolatoryDict_WITH_IgnoreCase_OVER_Candidates_JobEvents_Wishes_tweet_tweet = Project(("__sdm_match" => "__sdm_match", "tweet" => "tweet"), $SDM_TMP_ConsolatoryDict_WITH_IgnoreCase_OVER_Candidates_JobEvents_Wishes_tweet_tweet);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_purchases_pastAction_dict_WITH_Default_OVER_Sentences_text,
  $SDM_TMP_purchases_shortQuestion_dict_WITH_Default_OVER_Sentences_text,
  $SDM_TMP_purchases_feedback_dict_WITH_Default_OVER_Sentences_text,
  $SDM_TMP_purchases_products_dict_WITH_Default_OVER_Sentences_text,
  $SDM_TMP_purchases_transaction_dict_WITH_Default_OVER_Sentences_text,
  $SDM_TMP_purchases_StandAloneTransaction_dict_WITH_Default_OVER_Sentences_text,
  $SDM_TMP_purchases_StandAloneIntents_dict_WITH_Default_OVER_Sentences_text,
  $SDM_TMP_purchases_CanYouQuestion_dict_WITH_Default_OVER_Sentences_text,
  $SDM_TMP_purchases_buyintents_dict_WITH_Default_OVER_Sentences_text,
  $SDM_TMP_purchases_brands_dict_WITH_Default_OVER_Sentences_text
) = 
Dicts(
  (
    "purchases/pastAction.dict" => "Default",
    "purchases/shortQuestion.dict" => "Default",
    "purchases/feedback.dict" => "Default",
    "purchases/products.dict" => "Default",
    "purchases/transaction.dict" => "Default",
    "purchases/StandAloneTransaction.dict" => "Default",
    "purchases/StandAloneIntents.dict" => "Default",
    "purchases/CanYouQuestion.dict" => "Default",
    "purchases/buyintents.dict" => "Default",
    "purchases/brands.dict" => "Default"
  ),
  "text", "__sdm_match", $Sentences
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_purchases_pastAction_dict_WITH_Default_OVER_Sentences_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_pastAction_dict_WITH_Default_OVER_Sentences_text);
$SDM_OUTPUT_purchases_shortQuestion_dict_WITH_Default_OVER_Sentences_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_shortQuestion_dict_WITH_Default_OVER_Sentences_text);
$SDM_OUTPUT_purchases_feedback_dict_WITH_Default_OVER_Sentences_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_feedback_dict_WITH_Default_OVER_Sentences_text);
$SDM_OUTPUT_purchases_products_dict_WITH_Default_OVER_Sentences_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_products_dict_WITH_Default_OVER_Sentences_text);
$SDM_OUTPUT_purchases_transaction_dict_WITH_Default_OVER_Sentences_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_transaction_dict_WITH_Default_OVER_Sentences_text);
$SDM_OUTPUT_purchases_StandAloneTransaction_dict_WITH_Default_OVER_Sentences_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_StandAloneTransaction_dict_WITH_Default_OVER_Sentences_text);
$SDM_OUTPUT_purchases_StandAloneIntents_dict_WITH_Default_OVER_Sentences_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_StandAloneIntents_dict_WITH_Default_OVER_Sentences_text);
$SDM_OUTPUT_purchases_CanYouQuestion_dict_WITH_Default_OVER_Sentences_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_CanYouQuestion_dict_WITH_Default_OVER_Sentences_text);
$SDM_OUTPUT_purchases_buyintents_dict_WITH_Default_OVER_Sentences_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_buyintents_dict_WITH_Default_OVER_Sentences_text);
$SDM_OUTPUT_purchases_brands_dict_WITH_Default_OVER_Sentences_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_brands_dict_WITH_Default_OVER_Sentences_text);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_purchases_transaction_dict_WITH_Default_OVER_Sentences1_text,
  $SDM_TMP_purchases_buyintents_dict_WITH_Default_OVER_Sentences1_text
) = 
Dicts(
  (
    "purchases/transaction.dict" => "Default",
    "purchases/buyintents.dict" => "Default"
  ),
  "text", "__sdm_match", $Sentences1
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_purchases_transaction_dict_WITH_Default_OVER_Sentences1_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_transaction_dict_WITH_Default_OVER_Sentences1_text);
$SDM_OUTPUT_purchases_buyintents_dict_WITH_Default_OVER_Sentences1_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_buyintents_dict_WITH_Default_OVER_Sentences1_text);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_Luggage_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Auto_Domain_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Auto_Parts_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Auto_Cars_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Computer_Accessories_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Jewelry_Watches_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Shoes_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_MP3_Audio_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_PC_Laptop_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Phones_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Printers_Ink_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Travel_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Phones_Accessories_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Networking_Storage_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Clothing_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Accessories_Electronics_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Software_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_TV_Video_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Video_Games_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Auto_Brands_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Clothing_Accessories_Dict_WITH_Default_OVER_NoSpamOrPromos_text,
  $SDM_TMP_Camera_Photo_Dict_WITH_Default_OVER_NoSpamOrPromos_text
) = 
Dicts(
  (
    "Luggage_Dict" => "Default",
    "Auto_Domain_Dict" => "Default",
    "Auto_Parts_Dict" => "Default",
    "Auto_Cars_Dict" => "Default",
    "Computer_Accessories_Dict" => "Default",
    "Jewelry_Watches_Dict" => "Default",
    "Shoes_Dict" => "Default",
    "MP3_Audio_Dict" => "Default",
    "PC_Laptop_Dict" => "Default",
    "Phones_Dict" => "Default",
    "Printers_Ink_Dict" => "Default",
    "Travel_Dict" => "Default",
    "Phones_Accessories_Dict" => "Default",
    "Networking_Storage_Dict" => "Default",
    "Clothing_Dict" => "Default",
    "Accessories_Electronics_Dict" => "Default",
    "Software_Dict" => "Default",
    "TV_Video_Dict" => "Default",
    "Video_Games_Dict" => "Default",
    "Auto_Brands_Dict" => "Default",
    "Clothing_Accessories_Dict" => "Default",
    "Camera_Photo_Dict" => "Default"
  ),
  "text", "__sdm_match", $NoSpamOrPromos
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_Luggage_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Luggage_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Auto_Domain_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Auto_Domain_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Auto_Parts_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Auto_Parts_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Auto_Cars_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Auto_Cars_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Computer_Accessories_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Computer_Accessories_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Jewelry_Watches_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Jewelry_Watches_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Shoes_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Shoes_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_MP3_Audio_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_MP3_Audio_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_PC_Laptop_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_PC_Laptop_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Phones_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Phones_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Printers_Ink_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Printers_Ink_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Travel_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Travel_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Phones_Accessories_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Phones_Accessories_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Networking_Storage_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Networking_Storage_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Clothing_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Clothing_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Accessories_Electronics_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Accessories_Electronics_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Software_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Software_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_TV_Video_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_TV_Video_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Video_Games_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Video_Games_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Auto_Brands_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Auto_Brands_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Clothing_Accessories_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Clothing_Accessories_Dict_WITH_Default_OVER_NoSpamOrPromos_text);
$SDM_OUTPUT_Camera_Photo_Dict_WITH_Default_OVER_NoSpamOrPromos_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_Camera_Photo_Dict_WITH_Default_OVER_NoSpamOrPromos_text);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_ME_MG_movieTheater_WITH_Default_OVER_ME_MG_basicTweet_text,
  $SDM_TMP_ME_MG_twitterSpeakTake_WITH_Default_OVER_ME_MG_basicTweet_text,
  $SDM_TMP_ME_MG_atDict_WITH_Default_OVER_ME_MG_basicTweet_text,
  $SDM_TMP_ME_MG_purchaseWords_WITH_Default_OVER_ME_MG_basicTweet_text,
  $SDM_TMP_ME_MG_otherTicketWords_WITH_Default_OVER_ME_MG_basicTweet_text,
  $SDM_TMP_ME_MG_gotoseePhrase_WITH_Default_OVER_ME_MG_basicTweet_text,
  $SDM_TMP_ME_MG_twitterSpeakDefArticle_WITH_Default_OVER_ME_MG_basicTweet_text,
  $SDM_TMP_ME_MG_twitterSpeakSee_WITH_Default_OVER_ME_MG_basicTweet_text,
  $SDM_TMP_ME_MG_movieWords_WITH_Default_OVER_ME_MG_basicTweet_text,
  $SDM_TMP_ME_MG_twitterSpeakTo_WITH_Default_OVER_ME_MG_basicTweet_text,
  $SDM_TMP_ME_MG_genericTheater_WITH_Default_OVER_ME_MG_basicTweet_text,
  $SDM_TMP_ME_MG_twitterSpeakGoing_WITH_Default_OVER_ME_MG_basicTweet_text,
  $SDM_TMP_ME_MG_ticketSyn_WITH_Default_OVER_ME_MG_basicTweet_text
) = 
Dicts(
  (
    "ME_MG_movieTheater" => "Default",
    "ME_MG_twitterSpeakTake" => "Default",
    "ME_MG_atDict" => "Default",
    "ME_MG_purchaseWords" => "Default",
    "ME_MG_otherTicketWords" => "Default",
    "ME_MG_gotoseePhrase" => "Default",
    "ME_MG_twitterSpeakDefArticle" => "Default",
    "ME_MG_twitterSpeakSee" => "Default",
    "ME_MG_movieWords" => "Default",
    "ME_MG_twitterSpeakTo" => "Default",
    "ME_MG_genericTheater" => "Default",
    "ME_MG_twitterSpeakGoing" => "Default",
    "ME_MG_ticketSyn" => "Default"
  ),
  "text", "__sdm_match", $ME_MG_basicTweet
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_ME_MG_movieTheater_WITH_Default_OVER_ME_MG_basicTweet_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MG_movieTheater_WITH_Default_OVER_ME_MG_basicTweet_text);
$SDM_OUTPUT_ME_MG_twitterSpeakTake_WITH_Default_OVER_ME_MG_basicTweet_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MG_twitterSpeakTake_WITH_Default_OVER_ME_MG_basicTweet_text);
$SDM_OUTPUT_ME_MG_atDict_WITH_Default_OVER_ME_MG_basicTweet_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MG_atDict_WITH_Default_OVER_ME_MG_basicTweet_text);
$SDM_OUTPUT_ME_MG_purchaseWords_WITH_Default_OVER_ME_MG_basicTweet_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MG_purchaseWords_WITH_Default_OVER_ME_MG_basicTweet_text);
$SDM_OUTPUT_ME_MG_otherTicketWords_WITH_Default_OVER_ME_MG_basicTweet_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MG_otherTicketWords_WITH_Default_OVER_ME_MG_basicTweet_text);
$SDM_OUTPUT_ME_MG_gotoseePhrase_WITH_Default_OVER_ME_MG_basicTweet_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MG_gotoseePhrase_WITH_Default_OVER_ME_MG_basicTweet_text);
$SDM_OUTPUT_ME_MG_twitterSpeakDefArticle_WITH_Default_OVER_ME_MG_basicTweet_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MG_twitterSpeakDefArticle_WITH_Default_OVER_ME_MG_basicTweet_text);
$SDM_OUTPUT_ME_MG_twitterSpeakSee_WITH_Default_OVER_ME_MG_basicTweet_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MG_twitterSpeakSee_WITH_Default_OVER_ME_MG_basicTweet_text);
$SDM_OUTPUT_ME_MG_movieWords_WITH_Default_OVER_ME_MG_basicTweet_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MG_movieWords_WITH_Default_OVER_ME_MG_basicTweet_text);
$SDM_OUTPUT_ME_MG_twitterSpeakTo_WITH_Default_OVER_ME_MG_basicTweet_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MG_twitterSpeakTo_WITH_Default_OVER_ME_MG_basicTweet_text);
$SDM_OUTPUT_ME_MG_genericTheater_WITH_Default_OVER_ME_MG_basicTweet_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MG_genericTheater_WITH_Default_OVER_ME_MG_basicTweet_text);
$SDM_OUTPUT_ME_MG_twitterSpeakGoing_WITH_Default_OVER_ME_MG_basicTweet_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MG_twitterSpeakGoing_WITH_Default_OVER_ME_MG_basicTweet_text);
$SDM_OUTPUT_ME_MG_ticketSyn_WITH_Default_OVER_ME_MG_basicTweet_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_MG_ticketSyn_WITH_Default_OVER_ME_MG_basicTweet_text);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_ME_Movies_Nicknames_Dict_WITH_Default_OVER_ME_Entries_text,
  $SDM_TMP_ME_Ambiguous_Movies_Dict_WITH_Default_OVER_ME_Entries_text,
  $SDM_TMP_ME_HighlyAmbiguous_Movies_Dict_WITH_Default_OVER_ME_Entries_text
) = 
Dicts(
  (
    "ME_Movies_Nicknames_Dict" => "Default",
    "ME_Ambiguous_Movies_Dict" => "Default",
    "ME_HighlyAmbiguous_Movies_Dict" => "Default"
  ),
  "text", "__sdm_match", $ME_Entries
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_ME_Movies_Nicknames_Dict_WITH_Default_OVER_ME_Entries_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_Movies_Nicknames_Dict_WITH_Default_OVER_ME_Entries_text);
$SDM_OUTPUT_ME_Ambiguous_Movies_Dict_WITH_Default_OVER_ME_Entries_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_Ambiguous_Movies_Dict_WITH_Default_OVER_ME_Entries_text);
$SDM_OUTPUT_ME_HighlyAmbiguous_Movies_Dict_WITH_Default_OVER_ME_Entries_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_ME_HighlyAmbiguous_Movies_Dict_WITH_Default_OVER_ME_Entries_text);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_PreProductFilter_Dict_WITH_Default_OVER_PP_ToFilter_text,
  $SDM_TMP_PostProductFilter_Dict_WITH_Default_OVER_PP_ToFilter_text
) = 
Dicts(
  (
    "PreProductFilter_Dict" => "Default",
    "PostProductFilter_Dict" => "Default"
  ),
  "text", "__sdm_match", $PP_ToFilter
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_PreProductFilter_Dict_WITH_Default_OVER_PP_ToFilter_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_PreProductFilter_Dict_WITH_Default_OVER_PP_ToFilter_text);
$SDM_OUTPUT_PostProductFilter_Dict_WITH_Default_OVER_PP_ToFilter_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_PostProductFilter_Dict_WITH_Default_OVER_PP_ToFilter_text);


# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_purchases_promos_dict_WITH_Default_OVER_NoSpam_text,
  $SDM_TMP_purchases_firstperson_dict_WITH_Default_OVER_NoSpam_text
) = 
Dicts(
  (
    "purchases/promos.dict" => "Default",
    "purchases/firstperson.dict" => "Default"
  ),
  "text", "__sdm_match", $NoSpam
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_purchases_promos_dict_WITH_Default_OVER_NoSpam_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_promos_dict_WITH_Default_OVER_NoSpam_text);
$SDM_OUTPUT_purchases_firstperson_dict_WITH_Default_OVER_NoSpam_text = Project(("__sdm_match" => "__sdm_match", "text" => "text"), $SDM_TMP_purchases_firstperson_dict_WITH_Default_OVER_NoSpam_text);


# RegexesTok() operator created through Shared Regex Matching
(
  $SRM_OUTPUT_0_OVER_Sentences_D_text,
  $SRM_OUTPUT_1_OVER_Sentences_D_text,
  $SRM_OUTPUT_2_OVER_Sentences_D_text
) = 
RegexesTok(
  (
    (/[A-Z][A-Z]+/,
      "DOTALL", 1, 1) => "match",
    (/[A-Z][a-z]+/,
      "DOTALL", 1, 1) => "match",
    (/[A-Z]+[0-9]+/,
      "DOTALL", 1, 1) => "match"
  ),
  "D.text",
  Project(
    (
      "text" => "D.text"
    ),
    $Sentences
  )
);
Jar(
  "smarc_4aql.jar",
"UEsDBAoAAAAAANRIhEAAAAAAAAAAAAAAAAAJAAQATUVUQS1JTkYv/soAAFBLAwQKAAAACADTSIRA
Ax1e1YYAAAClAAAAFAAAAE1FVEEtSU5GL01BTklGRVNULk1GTcy7CsIwFAbgPZB3OKNCG05iUcyW
dHKok7gHm+KBmoQ0Cr69KYK4/pdvcIEmv5T26vNCMWiQAjkz4S8xyd3uHmpWy4OQnPXZu+LH1r41
KNHB5mQH6GNOMbtSP1vOODu7h9fw+ioUpsjZj0QhV8c+aR4vtO5MyjQDdg0olKoBPGrc6x2u0gdQ
SwMECgAAAAAA00iEQAAAAAAAAAAAAAAAAAQAAABjb20vUEsDBAoAAAAAANNIhEAAAAAAAAAAAAAA
AAAIAAAAY29tL2libS9QSwMECgAAAAAA00iEQAAAAAAAAAAAAAAAAA4AAABjb20vaWJtL21pZGFz
L1BLAwQKAAAAAADTSIRAAAAAAAAAAAAAAAAAFAAAAGNvbS9pYm0vbWlkYXMvdXRpbHMvUEsDBAoA
AAAIANNIhEC/psAuKQcAAFkNAAA4AAAAY29tL2libS9taWRhcy91dGlscy9HZW5kZXJGcm9tVXNl
clNjcmVlbk5hbWVzVXRpbHMuY2xhc3OVVutzE9cV/60ka5dlAXttjA0kMSRg2bJQ6hASjHk4BhMa
2RALOzHGpOvVlZFZrZTVKiEpafNqmxchD5KWPGiSdpo2fcRAY9NQ0g930s50ptP2Wx+fOp120n7o
TP6ANj33SvIDy5nWlu69e+55/O45v3tWv/7Phx8B6MQ7OloxpuGYjg7cJ4YvabB0LMf4MnqwdaTA
dKQxIVbHVWRUTOowMCZ0TqhwVGRVuBpyOuqQ11GL+3WsgieGglDyhXpRwwMaHhTLkxoe0rBXw8Ma
vqzilI4WPCKCfUXDVzU8KgI9puFxFU9oeFLD1zR8Xfj5hoqnFBjjHrNOHLJ8n3mugubEpPWAFS/6
GSfusQl2Ml7e2qFgmW3P6pklPcdyJ+JJ38u4E6QQ7s64GX+XgmCkbVhBqDeXYgpWJTIuGyhmx5l3
2Bp3mDDO2ZYzbHkZ8VwWhvzjmYKCrQk7l41nxrPxbCZlFSSSQnw/c1PM6/Ny2aEC85K2x5g7YGVZ
YUhsU2hzP/N7HWa5fRmv4MstBZsji1G2VQOupYuO45KRgpp0aQ57rFB0fAX1o9UsViR9yz7Rb+Ul
elnGnQoaC3kn4x90k3nLZkMCcsHOeeSttRqSqo5DpfBKtlot+i3fPs68HSqeVlBbSsohj6Uytp/J
UVX0rOUweYDCbImk+TCz/ZxH7o00m69TZ7kpLzfB3FyxUJEFx9OegqaSdSYXv6OYTjMKMsgsCicg
OlRQgkjf1fOOsO+kzfICB6k0LqzwQ/lKlTcvAtW9OAu76ICT8iqcIsT7TvqeZft9AzIxrZEqaata
1JWyGL1k5fRaBQGYDqd1206ZpHoyV/Rs1pcRuG78fIZtEf4NfAGdCujK9eAOA/diu4Lc6DEr9nBP
7MhYrJV/l/+Qv8+n+c/5L/h3+AX+AX+Hv8d/wn/Kr/C3+Q/4j/kl/iG/yt/i3+c/4hf5z/iT/Fl+
hr/K3/j4Mn+Cv8hf4Y/zZ/jz/Cx/nT/Gn+an+cv8Nf4mf5Q/xZ/jL/FzBp7BswZi2KLiOQOn8Txx
wcAZvGDgRbxErLg2ExXRvJQbeBlnqUjVK0zMqWyI3FSExnwhkbPn7kRhLxGvQKx0WJ8kzxbBRJGm
V8Twqhi+aeBbOGvgnBhew+sK1s1Z9kkyzrNV0DK32zPHzQXu3xBeFIu+aQUBlxb1VVho4E10Gojj
ZlJsoe4VGe04WrhvLNpm4Dy+TVTYVDglPwuSdnB8kgkcTZHd3TtHRWHbIrtLi1Gq9Fibgga5dWzB
HonXViykmtg4Vnkw8BbeVtD5/7c2BWuWaAJEYI/lHWo0PY6j4PYqHeZ/vCiLIsx2eTVbiXXLfPe9
xy0vye4vMtdmFZdVuhR1inTGTcnXwRHqrPI+Kogt7apqR1zu5xK5B5lXusQNkapnWF2twdI7qC6S
mM9bKaufk5V7mpBq9B5MJWRnC5E99d+glUpd47nEjh3iOJqdc30r41KJVuUpni/fCIepVZEHlSqd
l/cktvQ7qOpLNpzOeZR1BdurGI5WgbJYCxvo5d9KP0cCaBKdglZN4h7QrEIRTYzGW+gpTjP1M9S0
z0C5IA220hiWwhW4FaLXSQVsw200E82wvWx8HkGEaI6Ygf7oZQQHYr/CclqE5Pqj86iNBTv7O8wa
MzCNcH/HFOkGpf+N0Gg06ameVg0Uo5HGNWgmmNfRuBnrZOz2kv9ybLHqokNQXbAJO2gVIOsWdGMn
SXZJrIF/o0HFbhV76miPunQZ6xnSCNLcqiQuQm2fhtbfMY1l57Cy9Kgn3oURuorliWiwPRmdg3o9
ZUwADhAo8cuujkCsJ2AbECUQMQmzpeQavTLDAZILSHQ96TB7sY8ks+DWEzIVfRqB219JZOA2ihEm
jU+vwBiZwYpEee4vzwMEcOVdV7Bq5Apq6Vs3YpozqJ9BwwxWd4XMQFdNc2gajSNdNb9EfbS5Zhpr
yGIaTfe8+9knC+yal7br+Dy7tUvbxa6xixHadecQNtdPRSvL66Y6Ksvrp8wbphLRaWwwA1Oyvr/F
PyiFv8Of5Pxn/E3Of8cncg7JMkxiLY1bKW230u/hbcST2ym5XbTqpnEnJXkXhrAHLlXco0I8Qok/
TSn+Hg7gPXwRH+AufIy78RsMUqQk/oDDFGkIf8UwRbqXIh3BPzGKf+GoLOmdVBINf6H5ABWpFn8k
Hwfkdfo9eTpABd+GS0ign/B14X0MUOlryIOKgzgkb8ynkqGgmCWClLwNznobnPU2WGbvzdA/I2dh
yd9k5XOYHoG16+lf10khAEVIaBgin8O4p8xwQbiAuKlmICH5W7rKuhQyCjEhD9ZYUpIMFRwPSJjU
zMSvmbKrrSQXR9DbL2KjeSNd3jl/pdbgzmsNOkbkQTVKYaWv7KEI4u8m86bL2HQJqrk5fBWtI0Ez
khwJmW3JkRqzPXkZ0UvYeEG2lTmsN5CnSZKMyphH/wtQSwMECgAAAAgA00iEQDEoWQKfFgAAgS0A
ACwAAABjb20vaWJtL21pZGFzL3V0aWxzL1N0cmluZ01hbmlwdWxhdGlvbi5jbGFzc61YCXxbxdGf
WV1rWU7CS2xyxxBIfMbBQEicAxRbiRXrMJJsxzlInu2HrUSWjCSHpA29oFBKKT1oC/SgUCA9aMvR
OoG0FChHS1tKS++THhR60RtaSEj/+96TIgflI+nv88/anZ3dnZmda2ffE6/e/wARtQrDS09yTwX3
cp/kjZL7vfQt3uTlzbzFSxW8VQ0v8vA2NdjupeWsSx6QPKjAIcmG5IslD0seUYikanZ4eSenPDzq
pRq1pYbTqsmouTHVXKJoZtWqnILyCjeuml2quVThditoj4enqf4NXn4j7/XyZfwm1bxZLXiLgt7q
5bfx5V6+gt/u4Su91Mw9CnOVgt6hmss9fLWXWoHG4J2VfA2/q5Kv5Xer5joPv0eh36sWvE/RfL/k
6z38AQ9/0EtrlOSr+UNKETco6EbJNylhPuzhj3gpwD2SP6r6j0m+WfVb1cqPS75F8q1q3Sck3yb5
doW9QzX7JH9Scbpc8qdUf5XkT0v+jOQ7JX9W8uckf17yXZLvlnyP5Hslf0HyFyVPSN4v+YDk+yTf
L/mg5C9J/rLkByR/RfKDkh+S/LDkr0p+RPKjkh+T/Ljkr0n+uuQnJH9D8jclf0vyk5K/Lfkpyd+R
/F3JT0v+nuTvS/6B5B9K/pHkH0v+ieSfSv6Z5J9L/oXkX0p+RvKvJP9a8m8k/1bys5J/J/k5yc9L
/r3kP0j+o+Q/Sf6z5Bck/0XyXyX/TfLfJf9D8j8l/0vyi5Jfkvxvyf+R/LLkVyQfknxY8quSj0hB
UrAUQgqHFE4pXFK4pfBIIaWokMIrRaUUPimqpJgixVQppklxihSaFNOlmCFFtRQ1UpwqxUwpZkkx
W4o5UsyVYp4U86VY4BG1HnEak3tVMp3Mr2Fy1NX3MjnbM0MG09RQMm1ExkcHjGxCH0gBo4Uyg3qq
V88m1dhGOvMjyRxTXWgwM9qSHBhtGU0O6bmW8XwylWuJ57PJ9HBYTyfHxlN6PplJr8SOUT2ZZqqp
2xzaoe/SW1J6etheudLkr2eHQXF6mWkmb2D3oDGmKOU84nQsNnbpKabOo/x36JekWnbkMumW/J4x
o2UDoALxE1gDJexQ0i08obVCLdXKyenJjOfTmewok9xRBGepTk8l32B0GcaYPzU2okPBRjY5yLSo
row2ylGuTKbHxvPWENTzmayRH89Cjqp4Xh/cGdbHbMtUJ3Px8YGcuTA4DNZGu54DfkUZTv8377WZ
TMrQle08FrmzilAr0/xkzp/ek8jsNNL+sgzbTohhsDxHV14RxrFz42NGNmcfu8rE5rYVxhX5kayR
G8mkhpg4CMPk8kxzLILKFW0mppBQf3Yl0i8sl8x1Z42Lk7tLpa0pIAuHKqi6Runz4jITWmGilMw0
45JxPZUrRVXmMz1jOIQ1chdkBzqUubSAnp3MBXbrg/mwnh8cOZbTtMFMelDPJy7NWBiEyYYTUu4J
+pZryEglR5H4ocFQB9PiE3MVKJyT+O3Ab5dSPvyZ2/GDfAxDMOyn9M2wjmPzZiyviCdHkyk9q5h0
/T+c4Ki/zBxNpjuSuXx0l5EN67tDRrroJKe8Zmpy8HZkxhE4oOEe1Xen1KwcwnI9PWiYHpbMZVUO
wzk6PGIhZlOYjcOdmNYezT8gl9ezLXpq2BjI6i1DGI0iocIFkTxxYuyZJHownTeG4ZFgm0wrikzN
J0UMnjk5MSNN2Slg6ckQWtWwZqVpmeG0joyC7YGTOpXaX/5gNQVFdRhDiOKhovN60sal1pGnl8Rq
p54bQRrDRv9J8X+ti6gDtb2WcpmVZXxpDZLElUy9J6eEckKU10q1PjCQNXYlzXsRuTtvhExV1NWV
0UV9Wf3IwXGkROyE3cy+VR/IIsZG9TGVMRUm589m9T3gVkLARNm+41VS7LIXua0t6vIvSZ2GWudI
5kF5Rgk+mDcQDxl1lBUnq+MS+9SXE+w4tlw4WazjrKorI2TZpah+PeIMjziTKV9G6Sd4hDKmOeHD
+4aNfHtmPA2MUvupdWW1ocyESBk0FyozWbcfjN7hT/i3rQuGAkh81s5kpmUtLiMjawzFDH3I9DR1
V6tqDhsGC8xQyDM1lud3HL1OVcIm83tMXw0rF5tRV/YacauwNpBxnYNYDuHHMJE/pyM5CPeuryt7
xLKEHCidmFaX3fG6kVakUm16tb8k2qxAq64rH1Ury+FP2KTeeGY8O2isS6oEfOprK+AlapePvk1P
ecQiH0fEYriBnt5j2nTEUHl3eiZt1JrjWj1fq9fmk6OGj/5ML3hEnU/UiwafaOSgj35LzzKd9rqF
KpiJJh8dUoWRc0t2Cy428olmsQQXfu0bW5suw41WC9/YfFHdlkv31tZvBVy3pa5+b92W+nqfaAEr
sVSc5RGtPnG2OAd17HHrKp84VyzzifPUluVihU+0iZU+eon+4BOrMEEvK2i1wr2imlfVKV5RuDX0
rE+cLy7wCL9PrBXtuGB9okMEFMd1PnayyyfWi06PAOENYoVHdKmZEC7111jKJ8Ii4hNR0Q1NlnEc
n7hQxBD3PhEXCQS/T/QomXtFHwqsY02qiG30iX6xycchDqM+W2Lm/ZZiIG0bSmbze5bkd8OjasqH
IMqMwoRyCwuprLIZ1qSnfGKLMk3llrq9m5c2r9i6t6nRJ7aKi+A+x4qzdjyZMgnyYp/YJrYjRBY3
1fqELprA3RatdSfCTkk2nrPEWltXuyuZSunDBmxaq2JS9fnMpWnVj2cH9LRuzmRGx9N4vg2pQXtH
N7qBTDYzPjwCNxgQqqqDg8/eVvrXWDpQztnkE0P0FJxk2/H+QAYvN8fpTXA6jz/kX+sP+1E1+mFN
N4bxLoym+MOBWLDdH6mN+8NRczquVseCm6IRc7gJ158/1uWPxNWM8McQeu3+UHBdNBYJqhXtaGR7
NBSN+Tuiaoymsj0aiQTaE8H2noRCoZEdgZC/zx9DChUdaGZ0BOMJsE7URtfVYntPeK1JrgMF7fx1
gY5AzJ8IdNTGE+jiak042B6LRgJxc9U6uIhnHXgGO8whzuRZH4jG1puz69E41/f4wwruwXE7wTmo
3iudaFzY06kkDaIqlsFQKBiJBtXZgopKMNIR9JtHD0ZAJRjtM2E07qISutDIrkAk0dPe1a/GaCpC
0Z5g3N4aQuMK+4MRddowmmlhfyze6Q+FaoPxkD/SoaiEO0EF+H6FUGM0VWF/PO5v7+yJBxIJc5HS
Lo7eGVzvj6ixqurDQWg3Hk0oVmFgK8PBeFz9d3erQ4bj5p54PNoTM8c4rCccjSQs4cLKGpHA2pjl
AkIJ6Y4Eev2mKiO9kCIS6Kvt9Ie7451B02ARiOpVyA2BWDygjhzZYGPCgY1BZXIRCZtk+2r7o7Eu
NcayKZFoLNFZ2+6PRaFlkzzM67OwHf4u6wjq9DNNXCAWqYVGlBZLFYUM44x2BhWXqFJatCsEC5re
HAUrdzQWWB9V2onCO13dcG4YXXQj0fi6A5FIvD/U67ectRtNZXdPIJaI1sYsubuxxxfrjHYEbJbA
KbVNgfomyx5XslvYouxxLK9IBJQ94gGlqgTkcCUCG01HSWyE5D0JP4QWKhI8vYGYMgSGvWim9Abh
sZGSo/aCsbSwpry9aLx9ftghsj5hHlG5Y1VfIJ6oLVnWB6NV9AXjCLt40FwFOp6+/ig8Zb0awhaL
TuzL0aTkHB3YYahiYnohrwajxQ9DkxZabzpINqlwLCTkSSXi5Oy/J5c3RotlMzh0qxoGYhn66MoS
xiVonMwsdFJpVVuEjpXW/Lgl85nCY7663BcfLPFmjbGUPmj4Uymm5Sf9saZY9jgBKJmS6SFjd/Ti
4zAMFq7Q0rcPdu3SU+OG2lVTt6n8S7tqRM+FM1kjYRejjrp65OSKtLE7n7C+2bjxiB7Oj5hT4ONF
HZbN5/qSClVWGOz3DVgMehV/6MtID9k73NbHDwWM6Fk/AGddsB6uP+UoobBushtV3+VcdcGgYls5
pmdzRsERyvLtUPiO0mMWvwVUDpmQLQ4OgrWNJ/EghJQ58xNBiZbtN6DSbbD829AxbJgF6qRp240w
O6bK4uVlXKyM05Uj4N5p7DHD4JRJpa710pPJYkDUTJouefB5YPuIoWoLZ9rsJr8EiowWlQuDskfS
h4aOEzVwiul1xTC0HzVmLCHohqx3jSs3lkrmy3+wqi/7Idmtj43Bt5iaT+jDq114qW9kZoyrB3fh
W+drDHX0e9rFqfHcCJ1G36InSf3NJFaVP9rvYNSCHrU4uRr2E98NQNB30bpN5FR6Gq3PWkDfo++j
r6Af0A+xSm1eTU5r3T0kNIfmdB0g1wS5j5Lxoic6nabQwhJSU+lH9GP0P8FPEfgpfj+jn9sSjZMD
zIhObZzAzdx0ABfnQarob95P3jbnLOddReIaNhMtwuLFYFRHM6jeZHKOtd2WV0G/oF+CuAs7nqFf
YbeXqujXgBzY46DfYNaJc+EpY4vwfmCV4MsaHodi7mqYoMpQo+bTqiZoCoCp2jQLOKWA0WxggqaH
GpWEDlPCRaBKtATUW6DRpVRJreB4Ds2jZZg7D9jlGLWZUtdYHOl3kIuwspGeA8T0vEmN3SD1e/qD
LeBWLFbL50O06ZCu0eomaIa4mTzOfeR0HKDqo4JY5jy/hNF8+qPJSEF/KjJykZh1AfxKPfRsVhO2
OfwHqaa/cT+dGmmeoJk3Ugu6WcogEzR77m1H/mxLorAlwhz5vlMJMlma2ZCHKAQ2EZpGUUjUDWVc
SKsoXjRgDRT0F8ilTOynv9qy+ulvpqwK+jv9AyepgAr/Sf8C5edN5xSHqMJDL7YCfKmorqCtrupj
1TXHlqvU6TeWaKm6qKVqW0sV9O8i2beDqwN9nVIN4ufUcJOpmhp0sxoP0NwJmnfjkRfKaKDGVOlF
oLYdGtBhgwFEyJDJudaiWeRcV+S8wDypmHzSWQD/c8IizX8dkZKgthMipSDSKETK/K8ivfz6yl9Q
Rvn511H+K0Wy7TbZqYqsRbO2DME9JQSnFglOLRI8VAz6o5kQ0h1L5k2TMuFhk0wFvVp282nHbr68
7OYjJ2y001/HaFeD2jUw2rtgtGthtOv+R6PhCGyL9CFMm9lVq4o0PEaeRiTC5ruaHidfA3S9MLKP
qhog3UJz0HxUoPnksfPn9chhH0Ce/SCdAmqz6UY6g24yBWuw83ZBsEW2YIBYmPnZgUM8Z+bn581c
6DxElR52sK8CQjrZZQnJ3ya3mWAfh9Jnr4Yos9fMvYlc8+6ch3bunXOd2+c5tz9KZ4g2p2OZq9o1
9xOkzXJWu1od1a4rXBzdB50q/DwT72itdk3GY/1IQ7XLOTRBZy5zO5d5qj1YGlUknEOt1R7n0JJl
slH1WFDtvpncV0g2GVR7iouWOLfbKCx3bj9Ai6olmugVHt535G6w23fkhlnOua3zltxZ1GKEpqO9
Bca9FXfVbbg+b4d578DdsQ8m/xQu1M/g1vgsxegu2kx3k0H3UJrupb30BTjDF+EIE4Duofsx/yDd
Z2p9DHo8k6pxkfwDdFcD8pjQXlrOEpCkEYqZOA/o9XAFe6HeHtpp74CaudK22OPsMy3mooe5ykzD
XvoyTwHkgGy381SeBhsr2zVR5WGaxuw6TFM8dAa/TDMOkSh0h0ljPkQL+d/U/DKoVfAprNke+HNQ
kCrOUQEsPkB1EWXkZU5lZQXdRhWNJqIBAVKvrHVVtfOqzAr3TDeuoIYbPkLSDBXnpHixLuQHQPhB
KPUhmkUPIxq+CvwjCOFHaQU9Rmvoa6bCOk1Xbi+6aXvRTdt5uummklbyDK4G7Sl0Ltfg+E5Qmsen
mgproRk8k2dBiUoRU0gcpgUeno1Dz2cHjjqH59plVIedPCQOhtM0HXtvf7Mkf0iex/Ph+wsmYWqB
OU1lHT4dlBcWKT9iZ5Y1iGGvon6TqZamuw5Sc/9+WhJyrJ6r0Lei2mrAddWi1DVBS/uuEPDL56Dh
s2x5nCXh/RRc6TtwyO+ilnwaBv8eSpunUbr8oJh3ZtNc021U1l1jSYy1i/gMPhM5ZkExI6u5RcW5
xXYVMoWclc7DyEpcB0+ZY5+sHidr4EbrZLwTXJQsOwsnOUit6M8O271yl3NUeXIfTENtrlmu+2gZ
IwudpaDzGA6wvM3d2DDLPUErVLO0r0l1bX3NFk6B+458A963sq9ZNY1H1dAGEVX5KlG6TkPpOhMV
5nxUkYtRX54F11iN6nID6soLUVNuQUW3DccaQvmWhDMVXGs1LeAmrFWl0E5uhmJgShrkJUpFoLqZ
W3gpDjuT4nwWIAc4hLmVz4YMi6mDz+FzyWWqck2RxrIijWVFGucVaZxXpLG8SGMFHFWpHA5zBCg3
VG7+t5n/Kz28iqAsywCrYYA1fD6oKAOcjZ2Kb0pb1XWQVvcfpDXq7jp/P11QsEUEz4IJ8sOL1vaH
H0Mka+0T1KGM8sDHqFVlXFzbbS6sOkgBbFinrZ+gzll4QnRqQTQTtGGCupoVQtni/uajFmiF8xNK
QAecbDouszn0Ip44L+FueQVzh1AUHkaJ+CrKqyM0jFttB26Wp21d+eFsF0DzLqw8l/14ijhBJ8lr
zUCfTv30DLdDf4spwB1moM+hCzmgbFAMOwtznn1DLSbHEbB34o7y8DqC7gh8AwWE2bapmqD44rFV
uh4q7eSg7dMbIZJ5fWpVXVooVNBqo6XVsKXNJqXNyGMUatbCpjYZzq0UulwpdFrFBEXaXAV9Rgv6
hCrb3Da2QSHdFrILd5B6vHVP0IUm/RjahtKBFseo4WhK2oBXFOGecODWcHMF1eAumItb4Ezk/GZk
76VIiMuQAv1IfX08G35ZS2mkpV28kPbyGXQ5/PtqBP17Ee6FWOhDqtxgxkIzUoJlkaVIrl2mlRz0
HrMaUOnwWtNKjPRxmWklgfRziWklyxJIxq/SXFPhSvOHKAKgRO/Qd4jDdnb8nJ0dV2lVdiJM3EpL
bS01Ki/sQaPyYi+yhVmzdmp9luJCZoZ8siQpmLUYN0MxS6iKW+gc9G18VjEnuuBshZy4CsIvNVW6
giPqQCX5XM2dh/55E4Nbw6VKn5dBz/KZKM7QzRdaZ3AE1eMQ6Hl2Huxq0DZq/SqdNWibCsBmbYsF
bNUusoBt2nYL0LUBCxjUhizA0C62gGFtxAKS2g4L2KmlLGBUS1tARhuzgEu0rAXktLwFjGu7LOBS
bbcF7NHeYAFv1PZawGXamyzgzdpbLOCt2tss4HLtCgt4u3alBVylvcMCrtbeaQHXaO+ygGu1d1vA
ddp7LOC92vss4P3a9RbwAe2DFvAh7QYLuFG7yQI+rH3EAj6qfcwCbtY+bgG3aLdawCe02yzgdu0O
C9infdICPqV92gI+o91pAZ/VPmcBn9fusoC7tXss4F7tCxbwRW3CAvZrByzgPu1+CziofckCvqw9
YAFf0R60gIe0hy3gq9ojFvCo9pgFPK59zQK+rj1hAd/QvmkCR6P3Rdw7hNtBwsVOwT0wGzfAQuSm
Jl4J91yF6FtN63kNdSPP9yNLDiAadyLm8oi1yxBnV3KArkOKuwGp6xbupE8jed2L2P0SYvVRDtGT
CK4fwqWfgZv+nrvp73DUVziGoj3OVZzgGu7hBdyLi70PN9JGbuN+budNCMrNmNnCF/FWHkY7xtt4
D2/nt7HO1/AAX8+D/FEe4jvY4M/zxXwAqx7iEX6Ck/w07+Cf8U5+llP8Ao/yS5wWxBlRwWNC40vE
HM4VCygpqs0b9mgBZWGWFQuoGIIxbkKJ/wJQSwECFAMKAAAAAADUSIRAAAAAAAAAAAAAAAAACQAE
AAAAAAAAABAA7UEAAAAATUVUQS1JTkYv/soAAFBLAQIUAwoAAAAIANNIhEADHV7VhgAAAKUAAAAU
AAAAAAAAAAAAAACkgSsAAABNRVRBLUlORi9NQU5JRkVTVC5NRlBLAQIUAwoAAAAAANNIhEAAAAAA
AAAAAAAAAAAEAAAAAAAAAAAAEADtQeMAAABjb20vUEsBAhQDCgAAAAAA00iEQAAAAAAAAAAAAAAA
AAgAAAAAAAAAAAAQAO1BBQEAAGNvbS9pYm0vUEsBAhQDCgAAAAAA00iEQAAAAAAAAAAAAAAAAA4A
AAAAAAAAAAAQAO1BKwEAAGNvbS9pYm0vbWlkYXMvUEsBAhQDCgAAAAAA00iEQAAAAAAAAAAAAAAA
ABQAAAAAAAAAAAAQAO1BVwEAAGNvbS9pYm0vbWlkYXMvdXRpbHMvUEsBAhQDCgAAAAgA00iEQL+m
wC4pBwAAWQ0AADgAAAAAAAAAAAAAAKSBiQEAAGNvbS9pYm0vbWlkYXMvdXRpbHMvR2VuZGVyRnJv
bVVzZXJTY3JlZW5OYW1lc1V0aWxzLmNsYXNzUEsBAhQDCgAAAAgA00iEQDEoWQKfFgAAgS0AACwA
AAAAAAAAAAAAAKSBCAkAAGNvbS9pYm0vbWlkYXMvdXRpbHMvU3RyaW5nTWFuaXB1bGF0aW9uLmNs
YXNzUEsFBgAAAAAIAAgAIwIAAPEfAAAAAA==
");

Output: $isComicFanFromTweet, $ME_Buzz_Output, $ME_Intent_Output, $MET_PromotionalInBuzz_Output, $ME_MovieGoers, $ME_Topic_Output, $MET_Sentiment_Output, $ME_Movie_Buzz, $ME_Movie_Intent, $ME_Movie_Sentiment, $LocationTweets_AllPatterns_Output, $LifeEvents_Bday_Output, $LifeEvents_Bday_PersonName_Output, $LifeEvents_WeddingWishes_Output, $LifeEvents_AnnivWishes_Output, $IsMarried_GenericStrong_Output, $BabyWishes_Output, $HasChildren_Generic_StrongPat_Output, $MothersDayWishes_AllPatterns_Output, $FathersDayWishes_AllPatterns_Output, $LifeEvents_JobRelated_Events_Author, $LifeEvents_JobRelated_Events_Wishes, $Life_Events_JobRelated_Status, $RelocationTweets_PatternAll_AllEntities, $FinalIntentToBuyAndProducts, $AskingOpinionsOnProducts, $GeneralIntentToBuyProducts, $PastProductPurchases, $IntentProductAndCategories, $IntentProductNoCategories, $PP_Filtered_IntentProductAndCategories, $PP_Filtered_IntentProductNoCategories, $likelyPromos, $Spam, $female_name, $male_name, $ambiguous_name, $MappedNamesOutput, $MappedAddressOutput, $LA_GeosOutput, $isComicFanFromUserDesc, $teensignals, $probable_male, $probable_female, $specific_age_mentions, $non_consumers, $occupations_vocations, $bornfrom_livein_location_cues, $probable_parent, $reln_status, $probable_female_fname, $probable_male_fname, $Hobbies_Out, $JO_AllJobs_Categories;
