###############################################################################
# fastphone.aog
#
# ("aog" stands for Avatar Operator Graph.)
#
# A phone number annotator, expressed as a graph of Avatar operators.  
# Semantics should be exactly equivalent to those of the plan generated by
# com.ibm.avatar.algebra.test.EnronTests.buildFastPhonePlan().
# Output annotations are called "PhoneNumber".
###############################################################################
$Document = DocScan(
  (
    "text" => "Text"
  )
);


# Run each of the six regular expressions separately.
# Rule 1
$Phone1 = FastRegex(/\+?\([1-9][0-9]{2}\)[\-]?[0-9]{3}[\-\.]?[0-9]{4}/, 
	(0 => "phone"), "text", $Document);

# Rule 2
$Phone2 = FastRegex(/\+?\([1-9][0-9]{2}\) [0-9]{3} [0-9]{4}/, 
	(0 => "phone"), "text", $Document);
			
# Rule 2a			
$Phone2a = FastRegex(/\+? *[1-9][0-9]{2} +[0-9]{3} +[0-9]{4}/, 
	(0 => "phone"), "text", $Document);
			
# Rule 3
$Phone3 = FastRegex(/\+?(1\-)?[1-9][0-9]{2}[\-\.][0-9]{3}[\-\.][0-9]{4}/, 
	(0 => "phone"), "text", $Document);
			
# Rule 4
$Phone4 = FastRegex(/[Xx]\.?[0-9]{4,5}/, (0 => "phone"), "text", $Document);

# Rule 5
$Phone5 = FastRegex(/[Ee][Xx][Tt][\:]? *([0-9]{4,5})/, 
	(0 => "phone"), "text", $Document);

		
# Group the matches together, and remove overlapping annotations.
($PhoneNumber) = Consolidate("ContainedWithin", "phone",
	Project(("phone" => "phone"),
		Union($Phone1, $Phone2, $Phone2a, $Phone3, $Phone4, $Phone5)));

			
# Specify the output.
Output: $PhoneNumber;

