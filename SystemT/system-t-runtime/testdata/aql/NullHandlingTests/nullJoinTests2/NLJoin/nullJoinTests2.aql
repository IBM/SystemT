module NLJoin;
require document with columns text Text;

--------------------------------------------
-- Extract names and nulls from the document
create view _Name as
  extract regex 
    /!(\w+)?,(\w+)?,(\w+)?/
  on D.text
  return 
    group 1 as firstname
    and group 2 as middlename
    and group 3 as lastname
  from Document D;
  
output view _Name;


-------------------------------------------
-- Extract ages and nulls from the document
create view _Age as 
  extract regex 
    /,(\d+)?@/
  on D.text
  return
    group 1 as age
  from Document D;
  
output view _Age;







-- NL JOIN

-- This view tests NLJoin with null inputs to a predicate that returns null on null input
-- Finds a first name in the database named 'Ginni'

create view NullNLJoinTest1 as
select
       N1.firstname as match1,
       N2.firstname as match2
from _Name N1, _Name N2
where Equals(GetText(SpanIntersection(N1.firstname, N2.firstname)),'Ginni');

output view NullNLJoinTest1;



-- This view tests NLJoin with null inputs to a predicate that doesn't return null on null input
-- Returns last names that match a first name in the database

create view NullNLJoinTest2 as
select
       N1.firstname as match1,
       N2.lastname as match2
from _Name N1, _Name N2
where Or(Equals(GetText(N1.firstname), GetText(N2.lastname)),Equals(0, 1));

output view NullNLJoinTest2;

