---------------------------------------
-- Document Preprocessing
---------------------------------------
include 'detag.aql';

---------------------------------------
-- UDFs Declarations
---------------------------------------
create function getAbbreviation(span Span)
return String
external_name 'ExampleUDFs.jar:com.ibm.avatar.ExampleUDFs!getAbbreviation'
language java
deterministic
return null on null input;

create function equalsIgnoreCaseNormalized(span1 Span, span2 Span)
return Boolean
external_name 'ExampleUDFs.jar:com.ibm.avatar.ExampleUDFs!equalsIgnoreCaseNormalized'
language java
deterministic
return null on null input;


----------------------------------------
-- Basic Named Entity Annotators
----------------------------------------

--------------------------------------------------------------------------------
-- First, include the server side version of certain dictionaries
include 'GenericNE/serverSideSpecific/AdditionalDictsForAddress.aql';
include 'GenericNE/serverSideSpecific/AdditionalDictsForOrganization.aql';
--------------------------------------------------------------------------------

include 'GenericNE/DictsForAddress.aql';
include 'GenericNE/Sentence.aql';
include 'GenericNE/MacrosForTimeDates.aql';
include 'GenericNE/Date.aql';
include 'GenericNE/Time.aql';
include 'GenericNE/PhoneNumber.aql';
include 'GenericNE/Address.aql';
include 'GenericNE/CityStateCountry.aql';
include 'GenericNE/County.aql';
include 'GenericNE/StockExchangeAndTicker.aql';
include 'GenericNE/URL.aql';
include 'GenericNE/EmailAddress.aql';
include 'GenericNE/NotesEmailAddress.aql';
include 'GenericNE/Organization-for-ACE2005.aql';
include 'GenericNE/Organization-FilterDoubleNewLineTab.aql';
include 'GenericNE/Organization-Sentence.aql';
include 'GenericNE/Person-for-ACE2005.aql';
include 'GenericNE/Person-FilterMultiNewLineTab.aql';
include 'GenericNE/Person-Filter.aql';
include 'GenericNE/Region.aql';
include 'GenericNE/Facility.aql';
include 'GenericNE/Address-consolidation.aql';
include 'GenericNE/OrgWithinNotesEmail.aql';
include 'GenericNE/Organization-FilterAddress.aql';
include 'GenericNE/Organization-consolidation.aql';
include 'GenericNE/Person-consolidation-for-ACE2005.aql';
include 'GenericNE/DateTime-consolidation.aql';
include 'GenericNE/StateStrongAbbrev.aql';

----------------------------------------------
-- Consolidation:
-- For now, we just remove annotations that are completely
-- contained within other annotations.
----------------------------------------------
create view StateOrCountry as
	(select S.match as match from StateStrongAll S)
	union all
	(select C.match as match from CountryCandidate C);

-- only keep cities that do not have the same name as a country or state
create view CityConsolidatedFiltered as
	(select C.match as match from CityConsolidated C)
	minus 
	(select SC.match as match from StateOrCountry SC);
	
create view CityCountry as
select CC.match as match, 'city' as subtype, CC.match as city, '' as county, '' as state, C.match as country, '' as continent, CombineSpans(CC.match, C.match) as reference
from CityConsolidatedFiltered CC,
	 CountryCandidate C
where FollowsTok(CC.match, C.match, 0, 1)
  and MatchesRegex(/\s*[,]?\s*/, SpanBetween(CC.match, C.match))
  and Not(ContainsRegex(/[\n\r]/, SpanBetween(CC.match, C.match)));
  
create view AllCityStateCountryZipcode as
	(select C.match as match, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.match as reference from AllCityStateCountry C)
	union all
	(select C.match as match, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference from CityCountry C);

create view CityStateCountryInvalid1 as
select C.match as match, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference
from   AllCityStateCountryZipcode C,
	   PersonFinalAllWithoutDots P
where  Contains(P.person, C.match)
  and  Not(Equals(P.person, C.match));      

create view CityStateCountryInvalid2 as
select C.match as match, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference
from   AllCityStateCountryZipcode C,
	   FinalOrgConsolidatedWithoutDots O 
where  Contains(O.org, C.match)
  and  Not(Equals(O.org, C.match));   

create view CityStateCountryInvalid3 as
select C.match as match, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference
from   AllCityStateCountryZipcode C,
	   FinalOrgConsolidatedWithoutDots O 
where  Overlaps(O.org, C.match)
  and  Not(Contains(O.org, C.match));  
 

create view CityStateCountryInvalid as
	(select C.match as loc, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference from CityStateCountryInvalid1 C)
	union all
	(select C.match as loc, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference from CityStateCountryInvalid2 C)
	union all
	(select C.match as loc, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference from CityStateCountryInvalid3 C);

create view CityStateCountryValid as
	(select C.match as loc, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference from AllCityStateCountryZipcode C)
	minus
	(select C.loc as loc, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference from CityStateCountryInvalid C);
	
create view CityConsolidatedInvalid as
select C.match as match
from   CityStateCountryInvalid CI,
	   CityConsolidated C
where  Equals(CI.loc, C.match);   
	
create view CityConsolidatedValid as
	(select C.match as match from CityConsolidated C)
	 minus 
	(select C.match as match from CityConsolidatedInvalid C);
	
create view StateCandidateInvalid as
select S.match as match
from   StateCandidate S,
	   FinalOrgConsolidatedWithoutDots O 
where  Overlaps(O.org, S.match); 

create view StateCandidateValid as
	(select S.match as match from StateCandidate S)
	minus
	(select S.match as match from StateCandidateInvalid S); 

create view CountryCandidateInvalid as
select C.match as match
from   CountryCandidate C,
	   FinalOrgConsolidatedWithoutDots O 
where  Overlaps(O.org, C.match); 

create view CountryCandidateValid as
	(select C.match as match from CountryCandidate C)
	minus
	(select C.match as match from CountryCandidateInvalid C);
			
create view CountyInvalid as
select C.match as match
from FinalOrgConsolidatedWithoutDots O,
	 CountyConsolidated C
where Contains(O.org, C.match);

create view CountyValid as
	(select C.match as match from CountyConsolidated C)
	minus
	(select C.match as match from CountyInvalid C);

create view RegionInvalid1 as
select R.match as match
from   RegionCandidate R,
	   PersonFinalAllWithoutDots P
where  Contains(P.person, R.match)
  and  Not(Equals(P.person, R.match));      

create view RegionInvalid2 as
select R.match as match
from   RegionCandidate R,
	   FinalOrgConsolidatedWithoutDots O 
where  Contains(O.org, R.match)
  and  Not(Equals(O.org, R.match));    
 
create view RegionInvalid3 as
select R.match as match
from   RegionCandidate R,
	   CityStateCountryValid O 
where  Contains(O.loc, R.match);

create view RegionInvalid as
	(select R.match as match from RegionInvalid1 R)
	union all 
	(select R.match as match from RegionInvalid2 R)
	union all 
	(select R.match as match from RegionInvalid3 R);
	
create view RegionValid as
	(select R.match as match from RegionCandidate R)
	minus
	(select R.match as match from RegionInvalid R);
	
-- ===========================================================================
-- >>>>>>>>>>>>>>> Assign attributes for output section <<<<<<<<<<<<<<<<
-- ===========================================================================
include 'GenericNE/OrganizationTypes.aql';
include 'GenericNE/AttributesAssigner.aql';
include 'GenericNE/AttributesAssigner-Person.aql';

-----------------------------------------------------
-- customization for ACE2005
-----------------------------------------------------
create view PersonNameAsCity as 
extract
		dictionaries 'names/ace2005/missingPerson_nameAsCity_ace2005.dict'
		on D.text   
        as person
		from Doc D
		having MatchesRegex(/\p{Lu}\p{M}*.+/, person);

create view MissingSingleTokenPersonACE2005 as
	extract
		dictionaries 'names/ace2005/missingPerson_singletok_ace2005.dict'
		on D.text   
        as person
		from Doc D
		having MatchesRegex(/\p{Lu}\p{M}*.+/, person);
		
------------------------------------------------------
-- Customization for ACE2005
------------------------------------------------------
create view FamousePeople as
	extract
		dictionaries 'names/famous/worldLeaders03-08.dict'
			    and  'names/famous/uspresidents.dict'
			    and  'names/famous/greatestAmerican.dict'
			    and  'names/famous/famousPeople.dict'
		on D.text   
        as person
		from Doc D;

create view MissingPersonACE2005 as
	extract
		dictionaries 'names/ace2005/missingPerson_fullname_ace2005.dict'
		on D.text   
        as person
		from Doc D;

create view WrongPersonACE2005 as
	extract
		dictionaries 'names/ace2005/wrongPerson_ace2005.dict'
		with flags 'Exact'
		on D.text   
        as person
		from Doc D;

create view StrongPersonCandidates as
	(select P.person as person from PersonNameAsCity P)
	union all
	(select P.person as person from MissingSingleTokenPersonACE2005 P)
	union all
	(select P.person as person from FamousePeople P)
	union all
	(select P.person as person from MissingPersonACE2005 P);

-- remove Person candidates identified using core rules that overlap with the strong person candidates
create view PersonWithAttrAllValidOverlap as
select P1.person as person 
from PersonWithAttrAllValid P1,
	 StrongPersonCandidates P2
where Overlaps(P1.person, P2.person)
 and  Not(Contains(P1.person,P2.person));

create view PersonWithAttrAllValidNonOverlap as
	(select P.person as person from PersonWithAttrAllValid P)
	minus
	(select P.person as person from PersonWithAttrAllValidOverlap P);
	
create view StrongPersonCandidatesTokens as
	(select R.match as person from Regex(/[^\s\.]{2,}(\s+[^\s\.]{2,})?/, StrongPersonCandidates.person) R)
	union all
	(select R.match as person from Regex(/[^\s\.]{2,}/, StrongPersonCandidates.person) R)
	union all
	(select P.person as person from PersonWithAttrAllValidNonOverlap P);

create view StrongPersonCandidatesTokensDedup as
select GetText(PT.person) as person
from StrongPersonCandidatesTokens PT
group by GetText(PT.person);

create view StrongPersonTokenCandidates as
select CW.name as person
from StrongPersonCandidatesTokensDedup SP,
	ValidCapsPersonCandidates CW
where equalsIgnoreCaseNormalized(SP.person, CW.name);

create view PersonCandidatesAll as
	(select P.person as person from PersonWithAttrAllValidNonOverlap P)
	union all
	(select P.person as person from StrongPersonCandidates P)
	union all
	(select P.person as person from StrongPersonTokenCandidates P);
	
create view PersonCandidatesValid as
	(select P.person as person from PersonCandidatesAll P)
	minus
	(select P.person as person from WrongPersonACE2005 P);
------------------------------------------------------	
	

create view PersonConsolidated as
select P.* 
from PersonCandidatesValid P
consolidate on P.person;

create view Person as
select P.person as name
--, P.first as first, P.middle as middle, P.last as last, P.reference as reference
--from PersonWithAttrAllValid P
from PersonConsolidated P
order by P.person;

--4.12 Person

output view Person;

-- ===========================================================================
-- >>>>>>>>>>>>>>> Output section <<<<<<<<<<<<<<<<
-- ===========================================================================		

--4.8 MapLocation
--output view MapLocation;

-----------------------------------------------------
-- customization for ACE2005
-----------------------------------------------------
create dictionary CountryAbbrevDict as
(
    'US', 'U.S.', 'U.K.','United States'
);

create view CountryAbbrev as
	extract
		dictionaries 'CountryAbbrevDict'
		with flags 'Exact'
		on D.text   
        as country
		from Doc D;

create view ACE2005MissingLocation as
	extract
		dictionaries 'location/ace2005/ace2005missingLocation.dict'
		with flags 'Exact'
		on D.text
		as location
		from Doc D;		

create view AdditionalCities as
	extract 
		dictionaries 
			'location/cities/majorCities-iraq.dict'
		and 'location/cities/majorCities-alghanistan.dict'	
		and 'location/cities/majorCities-israel.dict'
		on D.text
		as city
		from Doc D
		having MatchesRegex(/\p{Lu}\p{M}*.+/, city);


create view AdditionaLocationCandidate as
	(select C.match as loc from MajorCity C where MatchesRegex(/\p{Lu}\p{M}*.+/, C.match))
	union all
	(select S.match as loc from StateStrongAbbrevAll S)
	union all
	(select C.country as loc from CountryAbbrev C)
	union all
	(select C.city as loc from AdditionalCities C)
	union all
	(select S.match as loc from StatesFromMajorCountries S)
	union all
	(select L.location as loc from ACE2005MissingLocation L);
			
create view AdditionaLocationInvalid1 as
select R.loc as loc
from   AdditionaLocationCandidate R,
	   PersonFinalAllWithoutDots P
where  Contains(P.person, R.loc)
  and  Not(Equals(P.person, R.loc));      

create view AdditionaLocationInvalid2 as
select R.loc as loc
from   AdditionaLocationCandidate R,
	   FinalOrgConsolidatedWithoutDots O 
where  Contains(O.org, R.loc)
  and  Not(Equals(O.org, R.loc));   

create view AdditionaLocationInvalid3 as
select R.loc as loc
from   AdditionaLocationCandidate R,
	   FinalOrgConsolidatedWithoutDots O 
where  Overlaps(O.org, R.loc)
  and  Not(Contains(O.org, R.loc));
  		
create view AdditionaLocationInvalid as
	(select A.* from  AdditionaLocationInvalid1 A)
	union all
	(select A.* from  AdditionaLocationInvalid2 A)
	union all
	(select A.* from  AdditionaLocationInvalid3 A);
-----------------------------------------------------

-- create individual locations based on the definition of the standard datasets (i.e. do not merge "state, country" etc)
create view LocationAll as
	(select A.address as loc from MapLocation A)
	union all
	(select C.city as loc from MapLocation C)
	union all
	(select C.county as loc from MapLocation C)
	 union all
	(select C.stateorprovince as loc from MapLocation C)
	union all
	(select C.country as loc from MapLocation C)
	 union all
	(select C.continent as loc from MapLocation C)
	union all
	(select C.match as loc from RegionValid  C)
	------------------------------------------------
	union all
	(select C.loc as loc from AdditionaLocationCandidate C);
	---------------------------------------------------

------------------------------------------------
-- Additional customization - remove invalid candidate 
------------------------------------------------
create view LocationInvalid as
select L.loc as loc 
from LocationAll L,
	 AdditionaLocationInvalid W
where Equals(L.loc, W.loc);
--------------------------------------------	

	---------------------------------------------------
	-- Customization for ACE2005
	-- Laura: added on 11/20/2009
	
	create dictionary IntlBranch as(
		'International'
	);
	
	create view RegionalBranch as
		(select C.match from CountryCandidate C)
		union all
		(select C.match from Continents C)
		union all
		(extract dictionary 'IntlBranch' with flags 'Exact' on D.text as match from Doc D);
				
	create view OrgWithRegionalBranch as
	extract pattern <O.organization> (<R.match>)
		return group 0 as organization
		   and group 1 as wrongloc
	from RegionalBranch R,  OrganizationFull O
	having Not(ContainsRegex(/[\n\r\t]{2,}/, organization)); 
	---------------------------------------------------

create view LocationValid as
	(select L.loc as loc from LocationAll L)
	minus
	(
		(select L.loc as loc from LocationInvalid L)
		union all
		-- Customization for ACE2005: remove Country/Continent immediately after an org 
	    -- Laura: added on 11/20/2009
		(select O.wrongloc as loc from OrgWithRegionalBranch O)
	);
	
	

create view LocationConsolidated as
select C.loc as loc
from LocationValid C
consolidate on C.loc
using 'LeftToRight';

create view Location as
select C.loc as loc
from LocationConsolidated C
consolidate on C.loc
using 'LeftToRight';

output view Location;




-- ===========================================================================
-- >>>>>>>>>>>>>>> Perform Value-Based Join for Organization <<<<<<<<<<<<<<<<
-- ===========================================================================

include 'GenericNE/Organization-ValueBasedJoin-for-ACE2005.aql';


-- ACE 2005 customizations

-- Customization 1: Nationality + Org Governmental = Organization
create view NationalityAndOrgGov as
extract 
	pattern <N.match> <O.organization> as organization
from Nationalities N, OrganizationFull O
having Not(ContainsRegex(/[\n\r\t]{2,}/, organization));

-- Customization 2: Location/Nationality + 'Stock/Securities Exchange' = Organization
create dictionary Exchange as(
	'Stock Exchange', 'Securities Exchange'
);

create view StockEx as
extract dictionary 'Exchange' 
	on D.text as match 
from Doc D;

/*
create view LocationStockEx as
extract pattern <L.loc> <S.match> as organization 
from LocationAll L, StockEx S;

create view NationalityStockEx as
extract pattern <N.match> <S.match> as organization 
from Nationalities N, StockEx S;

create view StockExchangeOrg as
( select O.organization from LocationStockEx O)
union all
( select O.organization from NationalityStockEx O); 
*/

create view LocationStockEx as
select CombineSpans(L.loc, S.match)  as organization
from Location L, StockEx S
where FollowsTok(L.loc, S.match, 0, 0)
  and Not(ContainsRegex(/[\n\r\t]{2,}/, SpanBetween(L.loc, S.match)));

create view NationalityStockEx as
select CombineSpans(N.match, S.match)  as organization
from Nationalities N, StockEx S
where FollowsTok(N.match, S.match, 0, 0)
  and Not(ContainsRegex(/[\n\r\t]{2,}/, SpanBetween(N.match, S.match)));

create view StockExchangeOrg as
( select O.organization from LocationStockEx O)
union all
( select O.organization from NationalityStockEx O); 


-- Customization 3: the + NewspaperSuffix = ORG; NewspaperSuffix + article/column/editorial/reports... = ORG
create dictionary OrgNewspaperAdditional as(
	'Economist'
);


create view NewspaperAbbrv as
(select * from OrgNewspaperSuffix)
union all
(extract dictionary 'OrgNewspaperAdditional' with flags 'Exact' on D.text as match from Doc D);


create view NewspaperClue1 as
extract pattern /[Tt]he/ (<N.match>)
	return group 1 as organization
	with inline_match on Doc.text
from NewspaperAbbrv N;

create view NewspaperClue2 as
extract pattern (<N.match>) ('article'|'column'|'editorial'|'reports'|'reported'|'said'|'quoted')
	return group 1 as organization
	with inline_match on Doc.text
from NewspaperAbbrv N;

create view NewspaperShortForm as
(select * from NewspaperClue1)
union all
( select * from NewspaperClue2);



-- Customization 4: add missing entries
create view ACE2005MissingOrganization as
	extract
		dictionaries 'orgs/ace2005/ace2005MissingOrganization.dict'
		with flags 'Exact'
		on D.text
		as organization
		from Doc D;	
		
create view OrgTerrorist as
	extract
		dictionaries 'orgs/ace2005/organization_terrorist.dict'
		--with flags 'Exact'
		on D.text
		as organization
		from Doc D;	
		
create view OrgByCountry as
	extract
		dictionaries 'orgs/ace2005/organization_russia.dict'
		         and 'orgs/ace2005/organization_russia_bank.dict'
		         and 'orgs/ace2005/organization_spain.dict'
		         and 'orgs/ace2005/organization_spain_bank.dict'
		--with flags 'Exact'
		on D.text
		as organization
		from Doc D
	    having MatchesRegex(/\p{Lu}\p{M}*.+/, organization);	

--4.13 Organization
create view  OrganizationUnsorted as
(select O.organization as organization, O.type as type, O.reference as reference from OrganizationFull O )
union all
(select O.organization as organization, '' as type, O.organization as reference from OrganizationVBJ O)
union all
(select O.organization as organization, '' as type, O.organization as reference from NationalityAndOrgGov O)
union all
(select O.organization as organization, '' as type, O.organization as reference from StockExchangeOrg O)
union all
(select O.organization as organization, '' as type, O.organization as reference from NewspaperShortForm O)
union all
(select O.organization as organization, '' as type, O.organization as reference from OrgTerrorist O)
union all
(select O.organization as organization, '' as type, O.organization as reference from OrgByCountry O)
union all
(select O.organization as organization, '' as type, O.organization as reference from OrgWithRegionalBranch O)
union all
(select O.organization as organization, '' as type, O.organization as reference from ACE2005MissingOrganization O);



-- Customization 5: filter out org matches within abbrev email, e.g., "jdullu...@yahoo.com"
create view EmailAnon as
extract regex /\w+(\.){3}@\w+\.\w+/ 
	on D.text as email
from Doc D;

create view OrgWithinEmailAnon as
select O.organization as organization 
from OrganizationUnsorted O, EmailAnon E
where Contains(E.email, O.organization);


create view OrgFinalFilter as
(select O.organization as organization from OrganizationUnsorted O)
minus
(select O.organization as organization from OrgWithinEmailAnon O);


create view Organization as
select * from OrgFinalFilter O 
consolidate on O.organization
order by O.organization;

output view Organization;


