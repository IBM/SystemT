module aqldump;

require document with columns
  text Text and
  label Text;
  
-- Case 1: Select Statement
create view FilterPerson as
  select null as lastName,
         F.firstName, 
         F.lastName
  from PersonName F
  where Equals(F.lastName, null);

output view FilterPerson;

-- Case 2: Extract Regex Statement
create view PhoneNum as
  extract null as name, regexes /(\d{3})-(\d{3})-(\d{4})/
    and /[Xx]\d{3,5}/
    with flags 'DOTALL'
    on between 1 and 5 tokens in D.text
    return group 0 as num
  from Document D;

output view PhoneNum;

-- Case 3: Extract Pattern Statement
create view Division as
  select  'Software' as match
  from  Document D;

create view Revenue as
  select  '$100' as match
  from  Document D;

create view RevenueOfDivision as
  extract null as company, 
         pattern <R.match> ('from'|'to') <Token>{0,2} (<D.match>)
  return group 0 as match
     and group 2 as division
  from  Revenue R,
        Division D;
 
 output view RevenueOfDivision;

-- Case 4: Extract Dictionary Statement
create view Name as
  extract null as title,
          dictionaries 'first.dict'
                   and 'last.dict'
    with flags 'Exact'
    on D.text as name
  from Document D;
  
output view Name;
  
  create view AllNames as
  (select  F.match as firstName,
            null as middleName,
            null as lastName,
            F.length as length,
            D.text as text
    from  FirstNameWithLength F,
          Document D)
  union all
  (select   null as firstName,
            null as middleName,
            L.match as lastName,
            null as length,
            null as text
    from  LastName L);
 
 output view AllNames;
    
-- Case 5: Extract Parts of Speech Statement
  create view PosTest as
  extract null as tempSpan, parts_of_speech 'NNP' and 'NN'
    with language 'en' on A.firstName as match
  from AllNames A;
  
output view PosTest;

-- Case 6: Extract Split statement
  create view SplitTest as
  extract null as tempSpan, split using A.firstName
    on A.text as match
  from AllNames A;
  
output view SplitTest;

 -- Case 7: Extract Blocks statement
create view BlocksTest as
  extract null as tempSpan, blocks
    with count between 2 and 2
    and separation between 0 and 5 tokens
    on A.firstName as match
  from AllNames A;
  
output view BlocksTest;