--assumes forwardblock and direction available

create view ForwardBlockDirection as
(select FB.annot as annot from ForwardBlock FB)
union all
(select D.annot as annot from Direction D);

include 'EmailAddress.aql';
-- union of all email addresses
create view EmailAll as
(select E.email as email from InternetEmail E)
union all
(select E.annot as email from Email2 E);

include 'Url.aql';

include 'DictsForPlace.aql';
include 'AdditionalDictsForPlace.aql';
-- include 'DictsForPhoneNumber.aql';
include 'Sentence.aql';
include 'MacrosForTimeDates.aql';

include 'Date.aql';
include 'Time.aql';

--  Date/Time consolidation
create view InvalidDates as
select R.match as match
from   DatesAll R, ForwardBlockDirection FBD
where Contains(FBD.annot,R.match);

create view ValidDatesAll as
(select R.match as match from DatesAll R)
minus
(select R.match as match from InvalidDates R);

select R.match as match
into Date
from ValidDatesAll R;

create view InvalidTimes as
select R.match as match
from   TimesAll R, ForwardBlockDirection FBD
where Contains(FBD.annot,R.match);

create view ValidTimesAll as
(select R.match as match from TimesAll R)
minus
(select R.match as match from InvalidTimes R);

select R.match as match
into Time
from ValidTimesAll R;

-- end date/time consolidation


include 'PhoneNumber.aql';
include 'Place.aql';

--include 'CityStateCountry.aql';
--include 'OrgWithinNotesEmail.aql';
include 'Organization.aql';
include 'Person.aql';

--include 'Place-simplecons.aql';
include 'Place-complexcons.aql';
include 'Organization-complexcons.aql';
include 'Person-cons.aql';
include 'NotesEmail-cons.aql';

create view EmailAddressAll as
(select  E.email as email from InternetEmail E)
union all
(select E.email as email from NotesEmail E);

create view InvalidEmailAddressAll as
select E.email as email
from EmailAddressAll E, ForwardBlockDirection FBD
where Contains(FBD.annot,E.email);

create view ValidEmailAddressAll as
(select E.email as email from EmailAddressAll E)
minus
(select E.email as email from InvalidEmailAddressAll E);

select E.email as email
into EmailAddress
from ValidEmailAddressAll E;

---------------------------------------------
-- Consolidation:
-- For now, we just remove annotations that are completely
-- contained within other annotations.

 
create view FinalPlace as
	select P.loc as loc from FinalPlaceConsolidated P;
--	union all
--	(select P.loc as loc from CityStateCountryValid P);

 
select P.num as num
into  PhoneNumber
from PhoneNumOnly P
-- disallow multiple new line
where Not(ContainsRegex(/[\n\r]{2,}/, P.num));

-- ===========================================================================
-- >>>>>>>>>>>>>>> Output section <<<<<<<<<<<<<<<<
-- ===========================================================================		

-- change output to remove unwanted types
-- select P.loc as loc
-- into Place
-- from Consolidate('OverlapOrdered',FinalPlaceConsolidated.loc) P;
 
select U.annot as url
into Url
from URLAll U;

	
select P.loc as loc
into Address
-- change output to remove unwanted types
-- from Place P;
--from Consolidate('OverlapOrdered',FinalPlaceConsolidated.loc) P;
from FinalPlace P
consolidate on P.loc
using 'LeftToRight';

select O.org as org
into  Organization
--from Consolidate('OverlapOrdered',FinalOrgConsolidatedWithoutDots.org) O;
from FinalOrgConsolidatedWithoutDots O
consolidate on O.org
using 'LeftToRight';
 
--select P.person as person into
--PersonFinalAllWithDotsOutput
--from PersonFinalAllWithDots P;

-- end block change
--- end changing this block


create view InvalidPersonFinalAllWithoutDots as
select P.person as person
from PersonFinalAllWithoutDots P, ForwardBlockDirection FBD
where Contains(FBD.annot,P.person);

create view ValidPersonFinalAllWithoutDots as
(select P.person as person from PersonFinalAllWithoutDots P)
minus
(select P.person as person from InvalidPersonFinalAllWithoutDots P);

select P.person as person,P.person as Name
into Person 
--from Consolidate(PersonFinalAllWithoutDots.person) P;
from ValidPersonFinalAllWithoutDots P
consolidate on P.person using 'LeftToRight';

-- change output to remove types
--select S.match as loc
--into AllStates
--from StateStrongAll S;



-- change output to remove types	
--select C.match as loc
--into AllCities
--from Consolidate(CitiesAll.match) C;

