-- ----------------------------------------------
-- auto generated by TlaMacroManager::generateAql
-- ----------------------------------------------

module tla_en;

create view mSupportNegPart_en as
select 'mSupportNegPart' as typeName, X.concept as concept 
from (
   extract pattern
   ('ain\'t'|'ai n\'t'|'isn\'t'|'isnt'|'is\'t'|'isnot'|'aren\'t'|'arent'|'arenot'|'ar\'nt'|'doesn\'t'|'does n\'t'|'doesnt'|'doent'|'doesnot'|'doens t'|'doen'|'don\'t'|'do n\'t'|'dont'|'donot'|'didnot'|'didn\'t'|'didnt'|'diden\'t'|'hasn\'t'|'hasnt'|'hasnot'|'haven\'t'|'have n\'t'|'havent'|'havnt'|'havenot'|'cannot'|'cannont'|'can\'t'|'cant'|'caant'|'couldn\'t'|'couln\'t'|'couldnt'|'couldnot'|'could\'nt'|'won\'t'|'wont'|'wasn\'t'|'was\'t'|'wasnt'|'wasnot'|'weren\'t'|'werent'|'were n\'t'|'werenot'|'wouldn\'t'|'wouldnt')
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mOpinionNeg_en as
(select X.typeName as typeName, X.concept as concept 
from Negative_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from NegativeAttitude_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from NegativeBudget_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from NegativeCompetence_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from NegativeFeeling_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from NegativeFunctioning_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from NegativeRecommendation_en X);


create view mOpinionPos_en as
(select X.typeName as typeName, X.concept as concept 
from Positive_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from PositiveAttitude_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from PositiveBudget_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from PositiveCompetence_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from PositiveFeeling_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from PositiveFunctioning_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from PositiveRecommendation_en X);


create view mAdverb_en as
select 'mAdverb' as typeName, X.concept as concept 
from (
   extract pattern
   ('almost'|'also'|'altogether'|'always'|'apparently'|'constantly'|'easily'|'especially'|'exactly'|'extremely'|'frequently'|'greatly'|'here'|'kind of'|'largely'|'lately'|'in most cases'|'often'|'particularly'|'particular'|'quite'|'rather'|'really'|'recently'|'significantly'|'steadily'|'so''far'?|'somehow'|'sometimes'|'specific'|'still'|'together'|'usually'|'very'|'yet'|'such'|'way'|'pretty'|'instantly'|'officially'|'even')
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mAnything_en as
select 'mAnything' as typeName, X.concept as concept 
from (
   extract pattern
   ('anything'|(('any'|'a'|'one') 'single'? 'thing'?))
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mPronoun_en as
select 'mPronoun' as typeName, X.concept as concept 
from (
   extract pattern
   ('i'|'you'|'he'|'she'|'it'|'we'|'they'|'something'|'me'|'us'|'him'|'her'|'them'|'there'|'that'|'what'|'which'|'who'|'itself')
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mQuant_en as
select 'mQuant' as typeName, X.concept as concept 
from (
   extract pattern
   ('much'|'many'|(('lot'|'bit'|'bunch'|'little''bit'?|'lots') 'of'?))
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mPrep_en as
select 'mPrep' as typeName, X.concept as concept 
from (
   extract pattern
   ('about'|('as' ('far as'|'regards'))|'at''least'?|'by'|'concerning'|'in'|'for'|'from'|'of'|'on'|'regarding'|'with' ('regard to')?|'throughout'|'to'|'within'|'inside'|'outside'|'between'|'among')
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mDet_en as
select 'mDet' as typeName, X.concept as concept 
from (
   extract pattern
   ('all''of'?|'an'|'a'|'another'|'any'|'extra'|'her'|'his'|'its'|'many'|'my'|'one'|'our'|'other'|'anymore'|'several'|'some'|'the'|'their'|'these'|'this'|'those'|'your'|'most'|'my'|'our')
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mAdvNeg_en as
select 'mAdvNeg' as typeName, X.concept as concept 
from (
   extract pattern
   ('not'|'never'|'rarely'|'seldom'|'seldon'|'hardly'|'harldy')
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mHave_en as
select 'mHave' as typeName, X.concept as concept 
from (
   extract pattern
   ('has'|'have'|'had'|'having'|'i\'ve'|'we\'ve'|'you\'ve'|'they\'ve')
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mBe_en as
select 'mBe' as typeName, X.concept as concept 
from (
   extract pattern
   ('is'|'are'|'be'|'am'|'i\'m'|'you\'re'|'he\'s'|'it\'s'|'she\'s'|'we\'re'|'they\'re'|'was'|'were'|'been'|'being')
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mSupport_en as
select 'mSupport' as typeName, X.concept as concept 
from (
   extract pattern
   ('can'|'acted'|'acting'|'became'|'becomes'|'become'|'becoming'|'came'|'carried out'|'containing'|'contained'|'contains'|'contain'|'do'|'does'|'doing'|'did'|'faced'|'faces'|'face'|'facing'|'gave'|'given'|'giving'|'gives'|'give'|'getting'|'gets'|'get'|'gone'|'gotten'|'got'|'leaves'|'leave'|'looks'|'look'|'looked'|'made'|'makes'|'make'|'making'|'proved'|(('seem'|'seems'|'seemed'|'appears'|'appear'|'appeared') ('like'|'to be')?)|'proven'|'provided'|'providing'|'provides'|'provides'|'shown'|'showed'|'sound'|'take'|'takes'|'taking'|'took'|'think'|'thought'|'use'|'using'|'will'|'keeps'|'keep'|'kept'|'gonna'|'gone'|'going'|'finds'|'find'|'found'|'meets'|'meet'|'met'|'goes'|'go'|'went'|'related'|'see'|'started')
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mComparedTo_en as
select 'mComparedTo' as typeName, X.concept as concept 
from (
   extract pattern
   (('compared'|'with regard') 'to'|'as regards')
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mPosFeelingEmoticon_en as
select X.typeName as typeName, X.concept as concept 
from PositiveFeeling_Emoticon_en X;


create view mTopic_en as
(select X.typeName as typeName, X.concept as concept 
from Unknown_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Product_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Person_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Location_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Organization_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Budget_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Currency_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from NewType_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Bill_en X);


create view mOpinion_en as
(select X.typeName as typeName, X.concept as concept 
from mOpinionPos_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from mOpinionNeg_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Contextual_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Uncertain_en X);


create view mToo_en as
select 'mToo' as typeName, X.concept as concept 
from (
   extract pattern
   ('too'|'awfully'|('way' ('to'|'too')))
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mSupportNeg_en as
select 'mSupportNeg' as typeName, X.concept as concept 
from (
   extract pattern
   (((<Ref1.concept>|<Ref2.concept>|<Ref3.concept>) <Tok1.match>{0,1} <Ref4.concept>)|(<Ref5.concept> (<Ref6.concept>|<Ref7.concept>|<Ref8.concept>))|<Ref9.concept>)
   return group 0 as concept
   from mSupport_en Ref1, mBe_en Ref2, mHave_en Ref3, mAdvNeg_en Ref4, mAdvNeg_en Ref5, mSupport_en Ref6, mBe_en Ref7, mHave_en Ref8, mSupportNegPart_en Ref9, Tok Tok1, Sentences D) X
consolidate on X.concept;


create view mEmpty_en as
select 'mEmpty' as typeName, X.concept as concept 
from (
   extract pattern
   (<Ref1.concept>|<Ref2.concept>|<Ref3.concept>|<Ref4.concept>|<Ref5.concept>|<Ref6.concept>|<Ref7.concept>|<Ref8.concept>|'all''of'?|'every'|'enough'|'just'|'any'|<Ref9.concept>)
   return group 0 as concept
   from mAdverb_en Ref1, mPronoun_en Ref2, mQuant_en Ref3, mDet_en Ref4, mBe_en Ref5, mHave_en Ref6, mPrep_en Ref7, mSupport_en Ref8, mAnything_en Ref9, Sentences D) X
consolidate on X.concept;


create view mNegFeelingEmoticon_en as
select X.typeName as typeName, X.concept as concept 
from NegativeFeeling_Emoticon_en X;


create view mNonLingEntities_en as
(select X.typeName as typeName, X.concept as concept 
from url_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from email_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from PhoneNumber_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from SocialSecurityNumber_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Date_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Time_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Percent_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Weights_Measures_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Period_en X)
union all
(select X.typeName as typeName, X.concept as concept 
from Age_en X);


create view mShould_en as
select 'mShould' as typeName, X.concept as concept 
from (
   extract pattern
   ('should'|'could'|'ought to'|'want'|'wish'|'need'|'would')
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mCoord_en as
select 'mCoord' as typeName, X.concept as concept 
from (
   extract pattern
   ('and'|'&'|'or'|'nor'|'but'|'yet')
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mCouldNot_en as
select 'mCouldNot' as typeName, X.concept as concept 
from (
   extract pattern
   ('couldn\'t'|'could not')
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


create view mMiscNeg_en as
select 'mMiscNeg' as typeName, X.concept as concept 
from (
   extract pattern
   ('no'|'without'|'with out'|'w/out'|'non'|'nobody'|(('short'|'lack'|'lacks'|'lacking'|'lacked'|'devoid'|'loss') ('of')?))
   return group 0 as concept
   from Sentences D) X
consolidate on X.concept;


