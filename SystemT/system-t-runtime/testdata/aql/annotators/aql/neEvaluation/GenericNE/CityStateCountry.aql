-- NOTE: This file requires AdditionalDictsForPlace.aql and DictsForPlace.aql

-- Yunyao: created on 05/22/2008 to identify the following patterns
-- (1) major city
-- (2) major city, state
-- (3) major city, state, country


-- major cities
create view CityAll as
	(select C.match as match from MajorCity C)
	union all
	(select C.match as match from USCity C)
	union all
	(select C.match as match from GermanCities C);
	
create view CityConsolidated as
select C.match as match
from CityAll C
consolidate on C.match;

-- only return cities with strong clue
-- Yunyao: added on 11/22/2009 to consider both clues on the left and right
create dictionary LeftClueCityDict as
('the city of', 'the village of', 'the town of', 'at', 'located in', 'between', 'the cities of', 'the towns of');

create view CityLeftClue as
select D.match as match
from   Dictionary('LeftClueCityDict', 'Exact', Doc.text) D;

create dictionary RightClueCityDict as
('City');

create view CityRightClue as
select D.match as match
from   Dictionary('RightClueCityDict', 'Exact', Doc.text) D;

create view StrongCity as
	(select C.match as match from CityLeftClue CL,  CityConsolidated C	where FollowsTok(CL.match, C.match, 0, 0))
	union all
	(select C.match as match from CityConsolidated C, CityRightClue CR	where FollowsTok(C.match, CR.match, 0, 0));

--create view CityCandidate as
--select RightContextTok(CC.match, 1) as match
--from   CityClue CC;
--where MatchesRegex(/\s*/, RightContextTok(CC.match, 1));

-- extend city name

--create view CityCandidateExtended as
--select CombineSpans(C.match, RightContextTok(C.match, 1)) as match
--from   CityCandidate C
--where MatchesRegex(/\s*\p{Lu}\p{M}*([\p{Ll}\p{Lo}]\p{M}*)+/, RightContextTok(C.match, 1))
--  and Not(ContainsRegex(/[\n\r]/, RightContextTok(C.match, 1)));

 
-- major city, state

-- Yunyao: added on 08/18/2009 to account for states from countries other than US and Canada
create view StrongStateAll as
	(select S.match as match from StateStrongAll S)
	union all
	(select S.match as match from StatesFromMajorCountries S);

-- TODO: postpone selection conditions
create view CityStateCandidate as
select CombineSpans(C.match, S.match) as match, C.match as city, S.match as state
from USCity C,
--	 StateStrongAll S
-- Yunyao: updated on 08/18/2009 to account for states from countries other than US and Canada
	 StrongStateAll S
where FollowsTok(C.match, S.match, 0, 1)
  and MatchesRegex(/\s*[,]?\s*/, SpanBetween(C.match, S.match))
  and Not(ContainsRegex(/[\n\r]/, SpanBetween(C.match, S.match)))
  -- avoid matchings like "Post ID"
  and Not(MatchesRegex(/[^,]+\s+ID/, CombineSpans(C.match, S.match)));

-- avoid matching a random list of city,state combinations
create view CityStateWrong as
select C.match as match, C.city as city, C.state as state
from CityStateCandidate C
where ContainsRegex(/,/, LeftContext(C.match, 10))
 and ContainsRegex(/,/, RightContextTok(C.match, 10));

create view CityState as
	(select C.match as match, C.city as city, C.state as state from CityStateCandidate C)
	minus
	(select C.match as match, C.city as city, C.state as state from CityStateWrong C);

-- major city, state, country
-- TODO: get the continent information as well
create view CityStateCountryCandidate as
select CombineSpans(C.match, CN.match) as match, SpanBetween(C.match, CN.match) as state, C.match as city, CN.match as country, '' as continent
from CityConsolidated C,
	 CountryCandidate CN
where FollowsTok(C.match, CN.match, 3, 3)
  and MatchesRegex(/\s*,\s*\p{Lu}\p{M}*(\p{L}\p{M}*)+\s*,\s*/, SpanBetween(C.match, CN.match))
  and Not(ContainsRegex(/[\n\r]/, SpanBetween(C.match, CN.match)));

create view CityStateCountryWrong1 as
select C.match as match, C.city as city, C.state as state, C.country as country, C.continent as continent
from CityStateCountryCandidate C,
	 CountryCandidate CN
where Contains(C.state, CN.match);

-- avoid matching a random list of city,state, country combinations
create view CityStateCountryWrong2 as
select C.match as match, C.city as city, C.state as state, C.country as country, C.continent as continent
from CityStateCountryCandidate C
where MatchesRegex(/,/, RightContextTok(C.match, 1))
  and Not(ContainsRegex(/[\n\r]/, LeftContextTok(C.match, 1)));

create view CityStateCountryWrong as 
	(select C.match as match, C.city as city, C.state as state, C.country as country, C.continent as continent from CityStateCountryWrong1 C)
	union all
	(select C.match as match, C.city as city, C.state as state, C.country as country, C.continent as continent from CityStateCountryWrong2 C); 

create view CityStateCountry as
	(select C.match as match, C.city as city, C.state as state, C.country as country, C.continent as continent from CityStateCountryCandidate C)
	minus
	(select C.match as match, C.city as city, C.state as state, C.country as country, C.continent as continent from CityStateCountryWrong C);

-- union of all patterns
-- add attribute to keep track of provenance of the annotations 
create view CityStateCountryCandidates as
	(select C.match as match, 'city' as subtype, C.match as city, '' as state, '' as country, '' as continent from MajorCity C)
	union all
	(select C.match as match, 'city' as subtype, C.match as city, '' as state, '' as country, '' as continent from StrongCity C)
	union all
	(select C.match as match, 'state' as subtype, '' as city, C.match as state, '' as country, '' as continent from StateCandidate C)
	union all
	(select C.match as match, 'country' as subtype, '' as city, '' as state, C.match as country, '' as continent from CountryCandidate C)
	union all
	(select C.match as match, 'city' as subtype, C.city as city, C.state as state, '' as country, '' as continent from CityState C)
	union all
	(select C.match as match, 'city' as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent from CityStateCountry C);
	
create view AllCityStateCountry as
select C.match as match, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent
from CityStateCountryCandidates C
consolidate on C.match;