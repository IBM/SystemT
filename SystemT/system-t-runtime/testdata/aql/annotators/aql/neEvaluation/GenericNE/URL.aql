
-- ****************************************************************************
--
-- Created By : Yunyao Li (yunyaoli@us.ibm.com)
-- 
-- Annotator type : Built-in
-- 
-- Purpose : Extract urls from plain text
-- Examples :
--			http://explorer.msn.com
--          www.BlackBerry.net
--
-- This is a translation based on UrlRecognizer
-- ****************************************************************************
/**
 * Rule 1: identifies urls that begins with protocol names http or ftp
 * Examples: http://explorer.msn.com
 *           ftp://cvs.ibm.com
 */
create view URL1 as
select R.match as annot
--from Regex(/\b((ht|f)tps?:\/\/\w+[\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,})\b/, Doc.text) R;
from RegexTok(/((ht|f)tps?:\/\/\w+[\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,100})/, 50, Doc.text) R;

/**
 * Rule 1: identifies urls that contains known domain suffixes
 */
create view URL1a as
select R.match as annot
--from Regex(/\b(\w+[\w\-:&=_?\/~.<>@:]+\.(com|edu|org)\/[\w&_?~.<>@:][\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,})\b/, Doc.text) R;
from RegexTok(/(\w+[\w\-:&=_?\/~.<>@:]+\.(com|edu|org)\/[\w&_?~.<>@:][\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,100})/, 50, Doc.text) R;

/**
 * Rule 2: identifies urls that are not necessarily begin with protocol names http or ftp
 * Examples: http://explorer.msn.com
 *           w3.ibm.com
 *           http://172.17.172.62/rt/tips/index.html
 */
create view URL2 as
select R.match as annot
--from   Regex(/\b(((([\w]+:)\/\/)|(w\w+\.))(([\d\w]|%[a-fA-f\d]{2,2})+(:([\d\w]|%[a-fA-f\d]{2,2})+)?@)?([\d\w][-\d\w]{0,253}[\d\w]\.)+[\w]{2,4}(:[\d]+)?(\/([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)*(\?(&?([-+_~.\d\w]|%[a-fA-f\d]{2,2})=?)*)?(#([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)?)\b/, Doc.text) R;
from   RegexTok(/(((([\w]+:)\/\/)|(w\w+\.))(([\d\w]|%[a-fA-f\d]{2,2})+(:([\d\w]|%[a-fA-f\d]{2,2})+)?@)?([\d\w][-\d\w]{0,253}[\d\w]\.)+[\w]{2,4}(:[\d]+)?(\/([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)*(\?(&?([-+_~.\d\w]|%[a-fA-f\d]{2,2})=?)*)?(#([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)?)/, 50, Doc.text) R;

-- union URL1a and URL2
create view URL1a_2 as
	(select U.annot as annot from URL1a U)
	union all
	(select U.annot as annot from URL2 U);

create view URL1a_2BeginwithProtocol as
select R.match as annot
from Regex(/(ht|f)tps?.+/, URL1a_2.annot) R;

create view URL1a_2All as
	(select U.annot as annot from URL1a_2 U)
	union all
	(select U.annot as annot from URL1a_2BeginwithProtocol U);

create view URL1a_2Consolidated as
select C.annot as annot
from URL1a_2All C
consolidate on C.annot 
using 'NotContainedWithin';
	
/**
 * Since Rule1 is more restrictive than Rule2
 * We prefer matches generated by Rule1 over those produced by Rule2, whenever they overlap
 */

create view URLWeakOverlap as
select U2.annot as annot
from   URL1 U1,
       URL1a_2Consolidated U2
where  Overlaps(U1.annot, U2.annot);
-- and  Not(BeginsWith(U1.annot, U2.annot));

create view URLWeakOnly as
	(select U.annot as annot from URL1a_2Consolidated U)
	minus
	(select U.annot as annot from URLWeakOverlap U);


/**
 * Combine all the matches identified so far
 */
create view URLAll as
  (select URL1.annot as annot from URL1)
union all
  (select URLWeakOnly.annot as annot from URLWeakOnly);
  --(select URL2.annot as annot from URL2);


-- Laura 06/25/2009: added identification of url host for TORO
create view URLWithHost as
extract U.annot as url,
		regex /\A((\w)+:\/\/)?([^:\/\&]+)(:|\/|\&)?/ on U.annot
			return group 3 as host
from URLAll U;


/*
create view URLNoHost as
(select U.annot as url from URLAll U)
minus
(select U.url from URLWithHost U);

--output view URLNoHost;
*/







