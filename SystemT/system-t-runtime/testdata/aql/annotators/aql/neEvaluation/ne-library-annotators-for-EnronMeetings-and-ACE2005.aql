---------------------------------------
-- Document Preprocessing
---------------------------------------
include 'detag.aql';
--create view Doc as
--select D.text from Document D;

---------------------------------------
-- UDFs Declarations
---------------------------------------
create function getAbbreviation(span Span)
return String
external_name 'NamedEntityUDFs.jar:com.ibm.avatar.udf.NamedEntityUDFs!getAbbreviation'
language java
deterministic
return null on null input;

create function toUpperCase(span Span)
return String
external_name 'NamedEntityUDFs.jar:com.ibm.avatar.udf.NamedEntityUDFs!toUpperCase'
language java
deterministic
return null on null input;


create function equalsIgnoreCaseNormalized(span1 Span, span2 Span)
return Boolean
external_name 'NamedEntityUDFs.jar:com.ibm.avatar.udf.NamedEntityUDFs!equalsIgnoreCaseNormalized'
language java
deterministic
return null on null input;


----------------------------------------
-- Basic Named Entity Annotators
----------------------------------------

--------------------------------------------------------------------------------
-- First, include the server side version of certain dictionaries
include 'GenericNE/serverSideSpecific/AdditionalDictsForAddress.aql';
include 'GenericNE/serverSideSpecific/AdditionalDictsForOrganization.aql';
--------------------------------------------------------------------------------

include 'GenericNE/DictsForAddress.aql';
include 'GenericNE/Sentence.aql';
include 'GenericNE/MacrosForTimeDates.aql';
include 'GenericNE/Date.aql';
include 'GenericNE/Time.aql';
include 'GenericNE/PhoneNumber.aql';
include 'GenericNE/Address.aql';
include 'GenericNE/CityStateCountry.aql';
include 'GenericNE/County.aql';
include 'GenericNE/StockExchangeAndTicker.aql';
include 'GenericNE/URL.aql';
include 'GenericNE/EmailAddress.aql';
include 'GenericNE/NotesEmailAddress.aql';
include 'specific-for-ACE2005/Organization-for-ACE2005.aql';
include 'GenericNE/Organization-FilterDoubleNewLineTab.aql';
--include 'GenericNE/Organization-FilterSingleNewLineTab.aql';
include 'GenericNE/Organization-Sentence.aql';
include 'specific-for-EnronMeetings-and-ACE2005/Person-for-EnronMeetings-and-ACE2005.aql';
include 'specific-for-EnronMeetings-and-ACE2005/forwardBlock.aql';
include 'specific-for-ACE2005/Person-FilterMultiNewLineTab-ACE2005.aql';
include 'GenericNE/Person-Filter.aql';
include 'GenericNE/Region.aql';
include 'GenericNE/Facility.aql';
include 'GenericNE/Address-consolidation.aql';
include 'GenericNE/OrgWithinNotesEmail.aql';
include 'GenericNE/Organization-FilterAddress.aql';
include 'GenericNE/Organization-consolidation.aql';
include 'specific-for-ACE2005/Person-consolidation-for-ACE2005.aql';
include 'GenericNE/DateTime-consolidation.aql';
include 'GenericNE/StateStrongAbbrev.aql';
include 'GenericNE/Person-Group.aql';

----------------------------------------------
-- Consolidation:
-- For now, we just remove annotations that are completely
-- contained within other annotations.
----------------------------------------------
create view StateOrCountry as
	(select S.match as match from StateStrongAll S)
	union all
	(select C.match as match from CountryCandidate C);

-- only keep cities that do not have the same name as a country or state
create view CityConsolidatedFiltered as
	(select C.match as match from CityConsolidated C)
	minus 
	(select SC.match as match from StateOrCountry SC);
	
create view CityCountry as
select CC.match as match, 'city' as subtype, CC.match as city, '' as county, '' as state, C.match as country, '' as continent, CombineSpans(CC.match, C.match) as reference
from CityConsolidatedFiltered CC,
	 CountryCandidate C
where FollowsTok(CC.match, C.match, 0, 1)
  and MatchesRegex(/\s*[,]?\s*/, SpanBetween(CC.match, C.match))
  and Not(ContainsRegex(/[\n\r]/, SpanBetween(CC.match, C.match)));
  
create view AllCityStateCountryZipcode as
	(select C.match as match, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.match as reference from AllCityStateCountry C)
	union all
	(select C.match as match, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference from CityCountry C);

create view CityStateCountryInvalid1 as
select C.match as match, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference
from   AllCityStateCountryZipcode C,
	   PersonFinalAllWithoutDots P
where  Contains(P.person, C.match)
  and  Not(Equals(P.person, C.match));      

create view CityStateCountryInvalid2 as
select C.match as match, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference
from   AllCityStateCountryZipcode C,
	   FinalOrgConsolidatedWithoutDots O 
where  Contains(O.org, C.match)
  and  Not(Equals(O.org, C.match));   

create view CityStateCountryInvalid3 as
select C.match as match, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference
from   AllCityStateCountryZipcode C,
	   FinalOrgConsolidatedWithoutDots O 
where  Overlaps(O.org, C.match)
  and  Not(Contains(O.org, C.match));  
 

create view CityStateCountryInvalid as
	(select C.match as loc, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference from CityStateCountryInvalid1 C)
	union all
	(select C.match as loc, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference from CityStateCountryInvalid2 C)
	union all
	(select C.match as loc, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference from CityStateCountryInvalid3 C);

create view CityStateCountryValid as
	(select C.match as loc, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference from AllCityStateCountryZipcode C)
	minus
	(select C.loc as loc, C.subtype as subtype, C.city as city, C.state as state, C.country as country, C.continent as continent, C.reference as reference from CityStateCountryInvalid C);
	
create view CityConsolidatedInvalid as
select C.match as match
from   CityStateCountryInvalid CI,
	   CityConsolidated C
where  Equals(CI.loc, C.match);   
	
create view CityConsolidatedValid as
	(select C.match as match from CityConsolidated C)
	 minus 
	(select C.match as match from CityConsolidatedInvalid C);
	
create view StateCandidateInvalid as
select S.match as match
from   StateCandidate S,
	   FinalOrgConsolidatedWithoutDots O 
where  Overlaps(O.org, S.match); 

create view StateCandidateValid as
	(select S.match as match from StateCandidate S)
	minus
	(select S.match as match from StateCandidateInvalid S); 

create view CountryCandidateInvalid as
select C.match as match
from   CountryCandidate C,
	   FinalOrgConsolidatedWithoutDots O 
where  Overlaps(O.org, C.match); 

create view CountryCandidateValid as
	(select C.match as match from CountryCandidate C)
	minus
	(select C.match as match from CountryCandidateInvalid C);
			
create view CountyInvalid as
select C.match as match
from FinalOrgConsolidatedWithoutDots O,
	 CountyConsolidated C
where Contains(O.org, C.match);

create view CountyValid as
	(select C.match as match from CountyConsolidated C)
	minus
	(select C.match as match from CountyInvalid C);

create view RegionInvalid1 as
select R.match as match
from   RegionCandidate R,
	   PersonFinalAllWithoutDots P
where  Contains(P.person, R.match)
  and  Not(Equals(P.person, R.match));      

create view RegionInvalid2 as
select R.match as match
from   RegionCandidate R,
	   FinalOrgConsolidatedWithoutDots O 
where  Contains(O.org, R.match)
  and  Not(Equals(O.org, R.match));    
 
create view RegionInvalid3 as
select R.match as match
from   RegionCandidate R,
	   CityStateCountryValid O 
where  Contains(O.loc, R.match);

create view RegionInvalid as
	(select R.match as match from RegionInvalid1 R)
	union all 
	(select R.match as match from RegionInvalid2 R)
	union all 
	(select R.match as match from RegionInvalid3 R);
	
create view RegionValid as
	(select R.match as match from RegionCandidate R)
	minus
	(select R.match as match from RegionInvalid R);
	
-- ===========================================================================
-- >>>>>>>>>>>>>>> Assign attributes for output section <<<<<<<<<<<<<<<<
-- ===========================================================================
include 'GenericNE/OrganizationTypes.aql';
include 'GenericNE/AttributesAssigner.aql';
include 'GenericNE/AttributesAssigner-Person.aql';

-----------------------------------------------------
-- customization for ACE2005
-----------------------------------------------------
create view PersonNameAsCity as 
extract
		dictionaries 'names/ace2005/missingPerson_nameAsCity_ace2005.dict'
		on D.text   
        as person
		from Doc D
		having MatchesRegex(/\p{Lu}\p{M}*.+/, person);

create view MissingSingleTokenPersonACE2005 as
	extract
		dictionaries 'names/ace2005/missingPerson_singletok_ace2005.dict'
		on D.text   
        as person
		from Doc D
		having MatchesRegex(/\p{Lu}\p{M}*.+/, person);
		
------------------------------------------------------
-- Customization for ACE2005
------------------------------------------------------
create view FamousePeople as
	extract
		dictionaries 'names/famous/worldLeaders03-08.dict'
			    and  'names/famous/uspresidents.dict'
			    and  'names/famous/greatestAmerican.dict'
			    and  'names/famous/famousPeople.dict'
		on D.text   
        as person
		from Doc D;

create view MissingPersonACE2005 as
	extract
		dictionaries 'names/ace2005/missingPerson_fullname_ace2005.dict'
		on D.text   
        as person
		from Doc D;

create view WrongPersonACE2005 as
	extract
		dictionaries 'names/ace2005/wrongPerson_ace2005.dict'
		with flags 'Exact'
		on D.text   
        as person
		from Doc D;

create view StrongPersonCandidates as
	(select P.person as person from PersonNameAsCity P)
	union all
	(select P.person as person from MissingSingleTokenPersonACE2005 P)
	union all
	(select P.person as person from FamousePeople P)
	union all
	(select P.person as person from MissingPersonACE2005 P);

-- remove Person candidates identified using core rules that overlap with the strong person candidates
create view PersonWithAttrAllValidOverlap as
select P1.person as person 
from PersonWithAttrAllValid P1,
	 StrongPersonCandidates P2
where Overlaps(P1.person, P2.person)
 and  Not(Contains(P1.person,P2.person));

create view PersonWithAttrAllValidNonOverlap as
	(select P.person as person from PersonWithAttrAllValid P)
	minus
	(select P.person as person from PersonWithAttrAllValidOverlap P);
	
create view StrongPersonCandidatesTokens as
	(select R.match as person from Regex(/[^\s\.]{2,}(\s+[^\s\.]{2,})?/, StrongPersonCandidates.person) R)
	union all
	(select R.match as person from Regex(/[^\s\.]{2,}/, StrongPersonCandidates.person) R)
	union all
	(select P.person as person from PersonWithAttrAllValidNonOverlap P);

create view StrongPersonCandidatesTokensDedup as
select GetText(PT.person) as person
from StrongPersonCandidatesTokens PT
group by GetText(PT.person);

/*
-- Laura: replaced with optimized version below
create view StrongPersonTokenCandidates as
select CW.name as person
from StrongPersonCandidatesTokensDedup SP,
	ValidCapsPersonCandidates CW
where equalsIgnoreCaseNormalized(SP.person, CW.name);
*/

create view StrongPersonTokenCandidates as
select CW.name as person
from 
(select toUpperCase(SP.person) as personNormalized from StrongPersonCandidatesTokensDedup SP) SP,
(select CW.name as name, toUpperCase(CW.name) as nameNormalized from ValidCapsPersonCandidates CW) CW
where Equals(GetText(SP.personNormalized), GetText(CW.nameNormalized));

create view PersonCandidatesAll as
	(select P.person as person from PersonWithAttrAllValidNonOverlap P)
	union all
	(select P.person as person from StrongPersonCandidates P)
	union all
	(select P.person as person from StrongPersonTokenCandidates P);
	
create view PersonCandidatesValid as
	(select P.person as person from PersonCandidatesAll P)
	minus
	(select P.person as person from WrongPersonACE2005 P);
------------------------------------------------------	
	
create view PersonMerged as
select CombineSpans(P1.person, P2.person) as person
from PersonCandidatesValid P1,
	 PersonCandidatesValid P2
where FollowsTok(P1.person, P2.person, 0, 0)
--  and ContainsRegex(/\s+/, P1.person)
  and Not(ContainsRegex(/\s[\r\n]+/, LeftContext(P1.person, 4)))
  and Not(ContainsRegex(/[\r\n]{2}/, SpanBetween(P1.person, P2.person)));

create view PersonCandidatesValidExtended as
	(select P.person as person from PersonCandidatesValid P)
	union all
	(select P.person as person from PersonMerged P)
	union all
	(select P.person as person from GroupCandidate P)
	union all
	(select P.person as person from Speaker P)
	union all
	(select U.unit as person from MilitaryUnitAsPerson U);

create view PersonConsolidated as
select P.* 
from PersonCandidatesValidExtended P
consolidate on P.person;

/*
create view Person as
select P.person as name
--, P.first as first, P.middle as middle, P.last as last, P.reference as reference
--from PersonWithAttrAllValid P
from PersonConsolidated P
order by P.person;
*/

--4.12 Person

include 'specific-for-EnronMeetings/NotesEmailClassification.aql';
include 'specific-for-EnronMeetings-and-ACE2005/email-header.aql';

-- ===========================================================================
-- >>>>>>>>>>>>>>> Output section <<<<<<<<<<<<<<<<
-- ===========================================================================		

--4.8 MapLocation
--output view MapLocation;

-- create individual locations based on the definition of the standard datasets (i.e. do not merge "state, country" etc)
create view LocationAll as
	(select A.address as loc from MapLocation A)
	union all
	(select C.city as loc from MapLocation C)
	union all
	(select C.county as loc from MapLocation C)
	 union all
	(select C.stateorprovince as loc from MapLocation C)
	union all
	(select C.country as loc from MapLocation C)
	 union all
	(select C.continent as loc from MapLocation C)
	union all
	(select C.match as loc 
	from RegionValid  C);

create view Location as
select C.loc as loc
from LocationAll C
consolidate on C.loc
using 'LeftToRight';

output view Location;

--4.12 Person
output view Person;

-- ===========================================================================
-- >>>>>>>>>>>>>>> Perform Value-Based Join for Organization <<<<<<<<<<<<<<<<
-- ===========================================================================

include 'GenericNE/Organization-ValueBasedJoin.aql';

--4.13 Organization
create view  Organization as
(select O.organization as organization, O.type as type, O.reference as reference from OrganizationFull O )
union all
(select O.organization as organization, '' as type, O.organization as reference from OrganizationVBJ O);

output view Organization;


-- Additional annotators for ACL2010 paper experiments
/*
--4.4 Address
select *
into Address
from AddressFinal;


--4.9 Email Address
output view EmailAddress;

--4.11 PhoneNumber
output view PhoneNumber;

--4.14 DateTime
output view DateTime;

--4.15 URL
output view URL; 
*/
