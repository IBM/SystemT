-- Yunyao: created on 08/31/2009 to extract facilities including
--     1. public places (e.g. parks, parking lots, etc)
--     2. commerical places (e.g., nightclub, pubs)
--     3. associated buildings (e.g., mills, castles)
--     4. structures (e.g. bridges, ports, dams)

create view FacilitySuffix as
	extract
    dictionaries
        'location/facilities/suffix-building.dict' 
    and 'location/facilities/suffix-commericalPlace.dict'
    and 'location/facilities/suffix-publicPlace.dict'
    and 'location/facilities/suffix-structure.dict'
        on D.text   
        as match     
        from Doc D
        ----------------------------------------
        -- Customziation for CoNLL2003
        -----------------------------------------
        having MatchesRegex(/\p{Lu}.*/, match)
        -----------------------------------------
        ;

--output view FacilitySuffix;
 
create view FacilitySuffixLowerCase as
	extract
    dictionaries
        'location/facilities/suffix-building.dict' 
    and 'location/facilities/suffix-commericalPlace.dict'
    and 'location/facilities/suffix-publicPlace.dict'
    and 'location/facilities/suffix-structure.dict'
        on D.text   
        as match     
        from Doc D
        ----------------------------------------
        -- Customziation for CoNLL2003
        -----------------------------------------
        having MatchesRegex(/\p{Ll}.*/, match)
        -----------------------------------------
        ;
--output view FacilitySuffixLowerCase; 
 
--create view CapsFacilityCandidate1 as
--    select
--        R.match as match
--    from
--       RegexTok(/(\p{Upper}[\p{Lower}\&\.-\/]{1,20})/, 25, Doc.text) R;

--create view CapsFacilityCandidate2 as
--    select
--        R.match as match
--    from
--       RegexTok(/(\p{Upper}[\p{Lower}\&\.-\/]{1,20})(\s+(\p{Upper}[\p{Lower}\&\.-\/]{1,20}))/, 25, Doc.text) R;

--create view CapsFacilityCandidate as
--	(select C.match as match from CapsFacilityCandidate1 C)
--	union all
--	(select C.match as match from CapsFacilityCandidate2 C);

create view CapsFacilityCandidate as
select C.* 
from RelaxedCapsPlace C;

-- no facility name should be just solely for the following dictionary
create dictionary FacilityFilterDict as (
	'The', 'World', 'That', 'At'
);

create view FacilityFilter1 as 
	extract
		dictionaries
			'FacilityFilterDict'
		and 'month.dict'
		on D.text
		as match
		from Doc D;
		
create view FacilityFilter as
	(select F.* from FacilityFilter1 F)
	union all
	(select N.* from Nationalities N);

create view CapsFacility as
	(select C.* from RelaxedCapsPlace C)
	minus
	(select F.* from FacilityFilter F);

-- no facility name should contain the following entries
create dictionary FacilityStrongFilterDict as (
	'That', 'At'
);
          
-- Note: this view requires view CapsPlaceOnetoTwo defined in Address.aql 
create view FacilityAll1 as
select CombineSpans(C.match, F.match) as facility 
from CapsFacility C,
	 FacilitySuffix F
where FollowsTok(C.match, F.match, 0, 0)
and  Not(ContainsDict('FacilityStrongFilterDict', C.match));

create view FacilityAll2 as
select C.match as facility 
from CapsFacility C,
	 FacilitySuffixLowerCase F
where FollowsTok(C.match, F.match, 0, 0)
and  Not(ContainsDict('FacilityStrongFilterDict', C.match));

--output view FacilityAll2;

create view Airport as
extract
	dictionaries 'location/facilities/majorAirport.dict'
	on D.text
	as facility
from Doc D;

create view FacilityCandidates as
	(select F.facility as facility from FacilityAll1 F)
	union all
	(select F.facility as facility from FacilityAll2 F)
	union all
	(select A.* from Airport A);
	
create view FacilityAllExtended as
select CombineSpans(C.match, F.facility) as facility
from FacilityCandidates F,
     CapsFacility C
where FollowsTok(C.match, F.facility, 0, 0)
  and Not(ContainsRegex(/[\r\n\t]/, SpanBetween(C.match, F.facility)));
  
--output view FacilityAllExtended;

create view FacilityAll as
	(select F.* from  FacilityCandidates F)
	union all
	(select F.* from FacilityAllExtended F);

create dictionary InvalidFacilityClue as (
	'a', 'an'
);

create view FacilityInvalid as
select F.facility as facility
from FacilityAll F
where ContainsDict('InvalidFacilityClue', LeftContextTok(F.facility,1));

create view FacilityValid as
	(select F.* from FacilityAll F)
	minus
	(select F.* from FacilityInvalid F);
	
create view Facility as
select F.* 
from  FacilityValid F
consolidate on F.facility;