--include 'namedentity-nooutput.aql';
include 'eDA/ne-ediscovery-personorgphoneaddress.aql';
-----------------------------------------------------------------------
-- Pre-processing:
-- The following block convert output of eDA into the expected output
-----------------------------------------------------------------------
create view Person as
select P.name as person
from "com.ibm.systemT.Person" P;

-- Including phone, fax and pager numbers
create view PhoneNumber as
select P.num as num
from PhoneNumCons P;

create view Address as
select A.loc as loc
from "com.ibm.systemT.Address" A;

create view Organization as
select O.org as org
from "com.ibm.systemT.Organization" O;

create view EmailAll as
	(select E.email as email from InternetEmailFinal  E)
	union all
	(select E.annot as email from NotesEmailConsolidated E);
	
create view Url as
select U.annot as url 
from URLAll U;
-----------------------------------------------------------------------
include 'eDA/personBinaryRelationship.aql'; 
 
-- identify person names to ignore, e.g., manager name in secretary's signature
 
create view PersonToIgnore as
select P.person as person
from Person P
where MatchesRegex(/.*([Aa]ssistant|ta|Asst[.]?).{0,25}(for|to).{0,100}$/,LeftContext(P.person,125));

-- remaining persons may start a signature block

create view CandidatePersonForSB as
(select P.person as person from Person P)
minus 
(select P.person as person from PersonToIgnore P);

--extract right context of persons
create view PersonForSB as
select P.person as person, CombineSpans(P.person,RightContext(P.person,250)) as personblock
from CandidatePersonForSB P;
--where ContainsRegex(/[\n\r]/,RightContext(P.person,10));

-- for each block, pair with any "ambiguous" person appearing in the block
-- retain person beginning the block, original block and truncated block 
-- (i.e., up to beginning of the "ambiguous"  person)

create view PersonBlockTruncated as
select P.person as person, P.personblock as personblockorig, CombineSpans(P.person,SpanBetween(P.person,P1.person)) as personblock
from PersonForSB P, CandidatePersonForSB P1
where Contains(P.personblock,P1.person) and GreaterThan(GetBegin(P1.person),GetEnd(P.person));

-- same personblock may have multiple "ambiguous" persons in it. 
-- if so, multiple truncated block tuples will be present for that personblock
-- consolidate to retain only the shortest entry
create view PersonBlockMin as
select PB.person as person, PB.personblock as personblock
from PersonBlockTruncated PB 
consolidate on PB.personblock
using 'NotContainedWithin';

-- personblocks that do not have any "ambiguous" persons in-between are retained as is

create view PersonBlockRetained as
(select P.person as person, P.personblock as personblock from PersonForSB P)
minus
(select P.person as person, P.personblockorig as personblock from PersonBlockTruncated P);

-- combine personblocks for truncated and non-truncated entries
create view PersonBlock as
(select P.person as person, P.personblock as personblock from PersonBlockRetained P)
union all
(select P.person as person, P.personblock as personblock from PersonBlockMin P);

-- five types used as evidence

-- Yunyao: added to expand an evidence with common context that may occur with it

create dictionary PhoneFaxContextDict as
(
    'phone', 'telephone','ph', 'tel','cell', 'office', 'home', 'work',
    'pager', 'desk', 'fax', 'voicemail', 'voice', 'cell phone', 'home phone', 'Bus.', 'Pgr.', 'cell.', 'pg.',
    'O', 'H', 'C', 'P', 'F'
);

create view PhoneFaxContext as
extract
	dictionary 'PhoneFaxContextDict'
		on D.text
		as context
	from Doc D;

create view PhoneNumberWithLeftContext as
select CombineSpans(C.context, P.num) as num
from PhoneFaxContext C, PhoneNumber P
where FollowsTok(C.context, P.num, 0, 4)
  and MatchesRegex(/\s*[.]?[)]?\s*[#]?\s*[:]?\s*/, SpanBetween(C.context, P.num));  
  
create view PhoneNumberWithRightContext as
select CombineSpans(P.num, C.context) as num
from PhoneFaxContext C, PhoneNumber P
where FollowsTok(P.num, C.context, 0, 2)
  and MatchesRegex(/\s*[,]?\s*[(-]?\s*/, SpanBetween(P.num, C.context));

create view PhoneNumberAll as
	(select P.num as num from PhoneNumber P)
	union all
	(select P.num as num from PhoneNumberWithLeftContext P)
	union all
	(select P.num as num from PhoneNumberWithRightContext P);

create view PhoneNumberConsoldiated as
select P.num as num
from PhoneNumberAll P
consolidate on P.num;

create dictionary EmailContextDict as
(
    'email', 'E-mail', 'Internet', 'mailto'
);

create view EmailContext as
extract
	dictionary 'EmailContextDict'
		on D.text
		as context
	from Doc D;

create view EmailWithLeftContext as
select CombineSpans(C.context, E.email) as email
from EmailContext C, EmailAll E
where FollowsTok(C.context, E.email, 0, 4)
  and MatchesRegex(/\s*[.]?[)]?\s*[#]?\s*[:]?\s*/, SpanBetween(C.context, E.email));  
  
create view EmailWithRightContext as
select CombineSpans(E.email, C.context) as email
from EmailContext C, EmailAll E
where FollowsTok(E.email, C.context, 0, 2)
  and MatchesRegex(/\s*[,]?\s*[(-]?\s*/, SpanBetween(E.email, C.context));

create view EmailAllPlus as
	(select E.email as email from EmailAll E)
	union all
	(select E.email as email from EmailWithLeftContext E)
	union all
	(select E.email as email from EmailWithRightContext E);

create view EmailConsoldiated as
select E.email as email
from EmailAllPlus E
consolidate on E.email;

create dictionary URLContextDict as 
(
	'url', 'website', 'web'
);

create view Evidence as
(select R.num  as annot from PhoneNumberConsoldiated R)
union all
(select R.loc as annot from Address R)
union all
(select R.org as annot from Organization R)
union all 
(select R.email as annot from EmailConsoldiated R)
union all 
(select R.url as annot from Url R);

-- find all blocks
create view EvidenceBlockGood as
extract blocks
    with count between 2 and 6
    and separation between 0 and 6 tokens
    on E.annot as annot
from Evidence E;

-- find all blocks
create view EvidenceBlockStrong as
extract blocks
    with count between 4 and 6
    and separation between 0 and 6 tokens
    on E.annot as annot
from Evidence E;

-- personblocks where person followed by newline
create view PersonBlockNewline as
select P.person as person, P.personblock as personblock
from PersonBlock P
where ContainsRegex(/[\n\r]/,RightContext(P.person,10))
and ContainsRegex(/[\n\r]/,LeftContextTok(P.person,5));

create view PersonBlockNoNewline as
(select P.person as person, P.personblock as personblock
from PersonBlock P)
minus
(select P.person as person, P.personblock as personblock
from PersonBlockNewline P);

create view SignatureBlockCand1 as
select P.person as person, CombineSpans(P.person,E.annot) as personSig
from PersonBlockNewline P, EvidenceBlockGood E
where Contains(P.personblock, E.annot);

create view SignatureBlockCand2 as
select P.person as person, CombineSpans(P.person,E.annot) as personSig
from PersonBlockNoNewline P, EvidenceBlockStrong E
where Contains(P.personblock, E.annot);

create view SignatureBlockCandAll as
(select S.person as person, S.personSig as personSig from SignatureBlockCand1 S)
union all
(select S.person as person, S.personSig as personSig from SignatureBlockCand2 S);

create view SignatureBlockCandRetained as
select S.person as person, S.personSig as personSig
from SignatureBlockCandAll S, PhoneNumber N
where Contains(S.personSig, N.num)
and Not(ContainsRegex(/((\n\s*\n)|(\r\s*\r)|(\n\s*\r)|(\r\s+\n)|(thanks)|(bye)|(regards)|(thank)|(\Whave\W)|(\Wme\W)|(\Wmy\W)|(\Wyou\W)|(\WI\W))/,S.personSig))
-- Yunyao: added to 1. avoid matching across multiple new lines in the forward block
--                  2. avaoid matching "or send to", "or go to"
-- avoid "or go to"
and Not(ContainsRegex(/([\r\n]\s*[>]*[\r\n])|(or\s+.{0,25}\s*to\s+)/, S.personSig));

--create view Signature as
select S.person as person, S.personSig as block
into Signature
from SignatureBlockCandRetained S
consolidate on S.personSig;
