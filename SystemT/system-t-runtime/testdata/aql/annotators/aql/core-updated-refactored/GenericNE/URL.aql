
-- ****************************************************************************
--
-- Created By : Yunyao Li (yunyaoli@us.ibm.com)
-- 
-- Annotator type : Built-in
-- 
-- Purpose : Extract urls from plain text
-- Examples :
--			http://explorer.msn.com
--          www.BlackBerry.net
--
-- This is a translation based on UrlRecognizer
-- ****************************************************************************
/**
 * Rule 1: identifies urls that begins with protocol names http or ftp
 * Examples: http://explorer.msn.com
 *           ftp://cvs.ibm.com
 */
-- Sudarshan regex : 10/12/2011 : Backreference on lines 24 and 32
create view URL1 as
select R.match as annot
--from Regex(/\b((ht|f)tps?:\/\/\w+[\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,})\b/, Doc.text) R;
--from RegexTok(/((ht|f)tps?:\/\/\w+[\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,100})/, 50, Doc.text) R;
from (extract regex /((ht|f)tps?:\/\/\w+[\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,100})/
		on between 1 and 50 tokens in D.text
		as match from Doc D) R;

/**
 * Rule 1: identifies urls that contains known domain suffixes
 */
create view URL1a as
select R.match as annot
--from Regex(/\b(\w+[\w\-:&=_?\/~.<>@:]+\.(com|edu|org)\/[\w&_?~.<>@:][\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,})\b/, Doc.text) R;
--from RegexTok(/(\w+[\w\-:&=_?\/~.<>@:]+\.(com|edu|org)\/[\w&_?~.<>@:][\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,100})/, 50, Doc.text) R;
from (extract regex /(\w+[\w\-:&=_?\/~.<>@:]+\.(com|edu|org)\/[\w&_?~.<>@:][\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,100})/
		on between 1 and 50 tokens in D.text
		as match from Doc D) R;

/**
 * Rule 2: identifies urls that are not necessarily begin with protocol names http or ftp
 * Examples: http://explorer.msn.com
 *           w3.ibm.com
 *           http://172.17.172.62/rt/tips/index.html
 */
 -- Sudarshan regex : 10/13/2011 : [a-fA-f\d] part - changed it to [a-fA-F\d] across the regex - seems to have been a typo  
 -- Sudarshan regex : added doubt on 10/12/2011 : Many backreference instances on line 45
create view URL2 as
select R.match as annot
--from   Regex(/\b(((([\w]+:)\/\/)|(w\w+\.))(([\d\w]|%[a-fA-f\d]{2,2})+(:([\d\w]|%[a-fA-f\d]{2,2})+)?@)?([\d\w][-\d\w]{0,253}[\d\w]\.)+[\w]{2,4}(:[\d]+)?(\/([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)*(\?(&?([-+_~.\d\w]|%[a-fA-f\d]{2,2})=?)*)?(#([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)?)\b/, Doc.text) R;
--from   RegexTok(/(((([\w]+:)\/\/)|(w\w+\.))(([\p{Nd}\w]|%[a-fA-f\p{Nd}]{2,2})+(:([\p{Nd}\w]|%[a-fA-f\p{Nd}]{2,2})+)?@)?([\p{Nd}\w][-\p{Nd}\w]{0,253}[\p{Nd}\w]\.)+[\w]{2,4}(:[\p{Nd}]+)?(\/([-+_~.\p{Nd}\w]|%[a-fA-f\p{Nd}]{2,2})*)*(\?(&?([-+_~.\p{Nd}\w]|%[a-fA-f\p{Nd}]{2,2})=?)*)?(#([-+_~.\p{Nd}\w]|%[a-fA-f\p{Nd}]{2,2})*)?)/, 50, Doc.text) R;
from (extract regex /(((([\w]+:)\/\/)|(w\w+\.))(([\p{Nd}\w]|%[a-fA-f\p{Nd}]{2,2})+(:([\p{Nd}\w]|%[a-fA-f\p{Nd}]{2,2})+)?@)?([\p{Nd}\w][-\p{Nd}\w]{0,253}[\p{Nd}\w]\.)+[\w]{2,4}(:[\p{Nd}]+)?(\/([-+_~.\p{Nd}\w]|%[a-fA-f\p{Nd}]{2,2})*)*(\?(&?([-+_~.\p{Nd}\w]|%[a-fA-f\p{Nd}]{2,2})=?)*)?(#([-+_~.\p{Nd}\w]|%[a-fA-f\p{Nd}]{2,2})*)?)/
		on between 1 and 50 tokens in D.text
		as match from Doc D) R;

-- union URL1a and URL2
create view URL1a_2 as
	(select U.annot as annot from URL1a U)
	union all
	(select U.annot as annot from URL2 U);

create view URL1a_2BeginwithProtocol as
select R.match as annot
-- from Regex(/(ht|f)tps?.+/, URL1a_2.annot) R;
from (extract regex /(ht|f)tps?.+/ on U.annot as match from URL1a_2 U) R;

create view URL1a_2All as
	(select U.annot as annot from URL1a_2 U)
	union all
	(select U.annot as annot from URL1a_2BeginwithProtocol U);

create view URL1a_2Consolidated as
select C.annot as annot
from URL1a_2All C
consolidate on C.annot 
using 'NotContainedWithin';
	
/**
 * Since Rule1 is more restrictive than Rule2
 * We prefer matches generated by Rule1 over those produced by Rule2, whenever they overlap
 */

create view URLWeakOverlap as
select U2.annot as annot
from   URL1 U1,
       URL1a_2Consolidated U2
where  Overlaps(U1.annot, U2.annot);
-- and  Not(BeginsWith(U1.annot, U2.annot));

create view URLWeakOnly as
	(select U.annot as annot from URL1a_2Consolidated U)
	minus
	(select U.annot as annot from URLWeakOverlap U);


/**
 * Combine all the matches identified so far
 */
create view URLAll as
  (select URL1.annot as annot from URL1)
union all
  (select URLWeakOnly.annot as annot from URLWeakOnly);
  --(select URL2.annot as annot from URL2);


/*************************************************************
 * Yunyao: added on 05/06/2011
 *         to identify host name mentioned in URLs
 *************************************************************/

/*
 * First identify in URLs without protocol
 */
create view URLWithoutProtocol as
select U.*
from URLAll U
where Not(ContainsRegex(/\/\//, U.annot));

/*
 * Extend such URLs to the left with the pattern of www.
 */
create view URLWithoutProtocolExtended as
select CombineSpans(LeftContextTok(U.annot, 2), U.annot) as annot
from URLWithoutProtocol U
where MatchesRegex(/\w{1,10}\./, LeftContextTok(U.annot, 2))
  and Not(ContainsRegex(/\s/, SpanBetween(LeftContextTok(U.annot, 2), U.annot)));
  
/*
 * Merge back into the main URLs
 */
create view URLWithoutProtocolAll as
	(select U.* from URLWithoutProtocol U)
	union all
	(select U.* from URLWithoutProtocolExtended U);

/*
 * Consolidate the URLs
 */
create view URLWithoutProtocolConsolidated as
select U.*
from URLWithoutProtocolAll U
consolidate on U.annot;

/*
 * Identify host name from URLs without protocol
 */
create view HostName1 as
extract regex /^[^\/]+/
	on U.annot
	as hostname
from  URLWithoutProtocolConsolidated U;
	 
/*
 * For URLs with protocols
 */
create view URLWithProtocol as
	(select U.* from URLAll U)
	minus
	(select U.* from URLWithoutProtocol U);

/*
 * Identify host names from URLs with protocol
 */
create view HostName2 as
extract regex /^[^\/]*[\/]{2}([^\/]+)/
	on U.annot
	return group 1 as hostname
from  URLWithProtocol U;

/*
 * Get all the host names
 */
create view HostName as
	(select H.* from HostName1 H)
	union all
	(select H.* from HostName2 H);
	
/*
 * Associate URLs with their hostnames
 */
create view URLs as
select U.annot as annot, H.hostname as hostname
from URLAll U, HostName H
where Contains(U.annot, H.hostname); 