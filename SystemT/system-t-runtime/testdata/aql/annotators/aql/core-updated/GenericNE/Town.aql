create dictionary LeftClueTownDict as
('town of', 'suburb of');

create view TownLeftClue as
select D.match as match
from   Dictionary('LeftClueTownDict', Doc.text) D;

create dictionary RightClueTownDict as
('town');

create view TownRightClue as
select D.match as match
from   Dictionary('RightClueTownDict', Doc.text) D
where MatchesRegex(/\p{Lu}.*/, D.match);

create view TownCandidates1 as
select C.match as match
from TownLeftClue CC,
     CapsPlace C	 
where FollowsTok(CC.match, C.match, 0, 0)
  and Not(ContainsRegex(/[\r\n\t]/, SpanBetween(CC.match, C.match)))
  and Not(MatchesRegex(/\s*\p{L}.*/, RightContext(C.match, 5)));
  
create view TownCandidates2 as
select CombineSpans(C.match, RC.match) as match
from CapsPlace C,
     TownRightClue RC
where FollowsTok(C.match, RC.match, 0, 0)
  and Not(ContainsRegex(/[\r\n\t]/, SpanBetween(C.match, RC.match)));

create view TownCandidates as
	(select C.* from TownCandidates1 C)
	union all
	(select C.* from TownCandidates2 C);
	
create view TownConsolidated as
select C.match as match
from TownCandidates C
consolidate on C.match;

--output view TownConsolidated;