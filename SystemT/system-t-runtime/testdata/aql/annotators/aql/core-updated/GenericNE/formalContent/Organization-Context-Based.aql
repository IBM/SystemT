--------------------------------------------------------
-- CoNLL2003 customization
-- Capture <Org>( <Abbrv> )
-- E.g., "banned Algerian Islamic Salvation Front ( [FIS] )"
--       "Federal Securities Corporation ( [FFK] )"
--------------------------------------------------------

create view OrgAbbrevFormal as
extract regex /\(\s*(\p{Lu}\p{M}*(\p{L}\p{M}*)+)\s*\)/ on 3 tokens in O.rc
	return group 1 as org
from
(
	select RightContextTok(O.org, 3) as rc
	from FinalOrgConsolidated O
) O
having Not(MatchesDict('FilterOrgDict', org));


--------------------------------------------------------
-- AnyCapsOrg extended to right with -CapsToken
-- E.g., [Bre-]X -> [Bre-X]
create view AnyCapsOrgWithDash as
select CombineSpans(CW.match, RightContextTok(CW.match,1)) as match
from AnyCapsOrg CW
where MatchesRegex(/[^-]+-/, CW.match)
  and MatchesRegex(/\p{Lu}\p{M}*.*/, RightContextTok(CW.match,1));


create view AnyCapsOrgExtended as
(select * from AnyCapsOrg)
union all
(select * from AnyCapsOrgWithDash);

-- Find blocks of 1 to 5 caps words
create view CapsWordOnetoFive as
--select R.block as match
--from BlockTok(0,1,5,AnyCapsOrg.match) R
extract pattern (<CW.match>|<IW.word>|'&'|'-'){1,5} as match
	with inline_match on Doc.text
from AnyCapsOrgExtended CW, InitialWord IW
-- do not allow matches that start with & or -
having MatchesRegex(/\p{L}\p{M}*.+/, match);


--output view AnyCapsOrg;
--output view AnyCapsOrgWithDash;
--output view CapsWordOnetoFive;


create dictionary RightClue5Dict as
(
	'sees', 'sets', 'says', 'repeats', 'closes', 'cuts', 'H1', 'H2', 'Q1', 'Q2', 'Q3', 'Q4',
	'details', 'CEO', 'posts', 'to procure', 'set to', 'swells', 'rises','files', 'shareholders',
	'buys', 'buying', 'to buy', 'shares', 'stock', 'stake', 'sets', 'upgrades', 'ups','lowers', 
	'ODV', 'interim', 'net', 'profit', 'income',
	'sells', 'to sell', 'acquires', 'to acquire', 'official', 'to inject', 
	'injects', 'slides', 'closed', 'trades', 'traded', 'revises', 'gets', 'forms', 'confirms',
	'reviews', 'to review', 'plunges', 'rises', 'jumps', 'wins contract', 'expects', 'analyst', 'year',
	'deputy', 'deputies'
);

create dictionary NegativeClue5Dict as
(
	'Further', 'The', 'Budget', 'UK', 'US'
);

/*
create view AnyCapsWordOnetoFour as
  select R.block as match
  from BlockTok(0,1,4,AnyCapsOrg.match) R;
*/

create view RightClue5 as
extract 
	dictionary 'RightClue5Dict' on D.text as match 
from Doc D;

  
create view OrgAdditional5Cand as
	extract pattern (<O.match> ) <C.match>
		return group 1 as match
	from RightClue5 C, CapsWordOnetoFive O
	having 
	       Or( 
	           MatchesRegex(/[\n\r]+/, LeftContext(match,10)),
	           MatchesRegex(/[-]{2}\s*/, LeftContext(match,3)),
	           MatchesRegex(/\s*(RTRS)\s*[-]\s*/, LeftContextTok(match,10))
	         )
	   and Not(ContainsDict('RightClue5Dict', match))
	   and Not(ContainsDict('NegativeClue5Dict', match))
	   and Not(ContainsDict('nationality.dict', match))
	   and Not(ContainsDict('country.dict', match))
	   and Not(MatchesDict('location/cities/nationalCapitals.dict', match))
consolidate on match;

--------------------------------------------------------
-- e.g., firm Aerostan
create dictionary LeftClue9SingleDict as(
	'maker', 'chipmaker', 'carmaker', 'manufacturer',  
	'conglomerate', 'monopoly', 'concern', 'paper', 'newspaper', 'giant', 
	--'trader', 'traders',
	'firm', 'contractor', 'group', 'insurer', 'reinsurer', 'company', 
	'distributor', 'supplier', 'provider', 'retailer', 'bank', 'lender', 'competitor',
	'shipper', 'airline', 'corporation', 'association', 'chain'
);

create dictionary LeftClue9CaseDict as(
	'Group', 'Bank', 'Company'
);

create dictionary LeftClue9PluralDict as(
	'makers', 'chipmakers', 
	'carmakers', 'manufacturers', 
	'conglomerates','concerns',	'giants', 
	--'traders',
	'firms', 'contractors','groups', 'insurers', 'reinsurers',
	'companies','distributors','suppliers','providers',
	'retailers','banks', 'lenders', 'competitors',
	'shippers', 'airlines', 'corporations', 'associations'
);

create view LeftClue9Single as
extract 
	dictionaries 'LeftClue9SingleDict' 
	         and 'LeftClue9PluralDict'
	         on D.text as match 
from Doc D
-- require that the clue is not in AllCaps
having --Not(MatchesRegex(/[\p{Lu}\p{M} ]+/, match))
	MatchesRegex(/[\p{Ll}\p{M}* ]+/, match)
   -- require that the clue <group> to be lower case
   and Not(MatchesDict('LeftClue9CaseDict', 'Exact', match));
   
create view LeftClue9Plural as
extract 
	dictionary 'LeftClue9PluralDict'
	         on D.text as match 
from Doc D
-- require that the clue is not in AllCaps
having Not(MatchesRegex(/[\p{Lu}\p{M} ]+/, match));

create dictionary NegativeClue9Dict as(
	'Internet'
);

create view OrgAdditional9Single as
select O.org as org
from
(
	extract pattern  <C.match> ('--')? (<O.match> )
		return group 0 as match
		   and group 2 as org
		with inline_match on Doc.text
	from LeftClue9Single C, CapsWordOnetoFive O
	having Not(ContainsRegex(/[\n\r]/, match))
	consolidate on match
) O
where Not(MatchesDict('country.dict', O.org))
  and Not(MatchesDict('nationality.dict', O.org))
  and Not(MatchesDict('NegativeClue9Dict', O.org));
  
  
create view OrgAdditional9PluralList as
select O.orgList as orgList
from
(
	extract pattern  <O.org>  ((('and'|',') <CW.match> ){1,3})
		return group 0 as match
		   and group 1 as orgList
		   with inline_match on Doc.text
	from OrgAdditional9Single O, CapsWordOnetoFive CW
	having --Not(ContainsRegex(/[\n\r]/, org))
	       ContainsDict('LeftClue9PluralDict', LeftContextTok(match, 1))
	consolidate on match
) O;

create view OrgAdditional9Plural as
select CW.match as org
from CapsWordOnetoFive CW, OrgAdditional9PluralList O
where Contains(O.orgList, CW.match)
--and Not(ContainsRegex(/[\n\r]/, CW.match))
  and Not(ContainsDict('country.dict', CW.match))
  and Not(ContainsDict('nationality.dict', CW.match));

--output view OrgAdditional9Plural;


create dictionary LeftClue10Dict as(
	'Shares in', 'Shares of', 'stocks of', 'stake in', 'shares issued by',
	'acquisition of', 'acquisition by', 'acquired by', 'acquired',
	'merged with', 'merge with', 'merger with', 'offer by',
	'subsidiary of', 'subsidiaries of', 'subsidiary', 'subsidiaries',
	'unit of', 'units', 'unit', 'subsidiary', 'division of', 'owner of',
	'bid for', 'buy on'
);

create dictionary NegativeClue10Dict as(
	'based', 'related', 'owned', 'U.', 'UK'
);

create view LeftClue10 as
extract 
	dictionaries 'LeftClue10Dict'
	         on D.text as match 
from Doc D
-- avoid clues in title
having Not(MatchesRegex(/[\p{Lu}\p{M}* ]+/, match));

create view OrgAdditional10 as
select O.org as org
from
(
	extract pattern  <C.match> (<O.match> )
		return group 0 as match
		   and group 1 as org
	from LeftClue10 C, CapsWordOnetoFive O
	having Not(ContainsRegex(/[\n\r]/, match))
	consolidate on match
) O
where Not(ContainsDict('country.dict', O.org))
  and Not(MatchesDict('nationality.dict', O.org))
  and Not(MatchesRegex(/\s*'\s*s/, RightContextTok(O.org,2)))--'
  and Not(ContainsDict('NegativeClue10Dict', O.org));

--output view OrgAdditional10;

create view OrgContext as
   ( select R.org as org from OrgAdditional9Single R)
union all
   ( select R.org as org from OrgAdditional9Plural R)
union all
   ( select R.org as org from OrgAdditional10 R);
   
-- Expand context-based matches with strong org suffixes 
-- to avoid partial matches such as 
-- [Petkim - Petrokimya Holding A.]S.
create view OrgContextExtended1 as
select CombineSpans(O.org, OCSC.match) as org
from OrgContext O, OrgClueStCaps OCSC
where Overlaps(O.org, OCSC.match)
  and GreaterThan(GetBegin(OCSC.match), GetBegin(O.org)); 
  
create view OrgContextExtended2 as
select CombineSpans(O.org, OCSC.match) as org
from OrgContext O, OrgClueStCaps OCSC
where FollowsTok(O.org, OCSC.match, 0,0); 

create view OrgContextExtended as
(select * from OrgContextExtended1)
union all
(select * from OrgContextExtended2);
  
--output view OrgContextExtended;


create view OrgFormal as
(select R.org as org from OrgAbbrevFormal R)
union all
( select R.org as org from OrgContext R)
union all
( select R.org as org from OrgContextExtended R);


--output view OrgAbbrevFormal;