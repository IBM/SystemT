--==========================================================
-- Actual Rules
--==========================================================

-- For 3-part Person names
create view Person3P1 as 
select CombineSpans(F.firstname, L.lastname) as person
from StrictFirstName F,
	 StrictCapsPersonR S,
	 StrictLastName L
where FollowsTok(F.firstname, S.name, 0, 0)
 --and  FollowsTok(S.name, L.lastname, 0, 0)
 and  FollowsTok(F.firstname, L.lastname, 1, 1)
 and  Not(Equals(GetText(F.firstname), GetText(L.lastname)))
 and  Not(Equals(GetText(F.firstname), GetText(S.name)))
 and  Not(Equals(GetText(S.name), GetText(L.lastname)))
 --Laura 07/22/09: refactored to allow customization of matching over new lines
 --and  Not(ContainsRegex(/[\n\r\t]/, SpanBetween(F.firstname, L.lastname)))
 ;
 
create view Person3P2 as 
select CombineSpans(P.name, L.lastname) as person
from PersonDict P,
	 StrictCapsPersonR S,
	 StrictLastName L
where FollowsTok(P.name, S.name, 0, 0)
 --and  FollowsTok(S.name, L.lastname, 0, 0)
 and  FollowsTok(P.name, L.lastname, 1, 1)
 and  Not(Equals(GetText(P.name), GetText(L.lastname)))
 and  Not(Equals(GetText(P.name), GetText(S.name)))
 and  Not(Equals(GetText(S.name), GetText(L.lastname)))
 --Laura 07/22/09: refactored to allow customization of matching over new lines
 -- and  Not(ContainsRegex(/[\n\r\t]/, SpanBetween(P.name, L.lastname)))
 ;

create view Person3P3 as 
select CombineSpans(F.firstname, P.name) as person
from PersonDict P,
	 StrictCapsPersonR S,
	 StrictFirstName F
where FollowsTok(F.firstname, S.name, 0, 0)
 --and FollowsTok(S.name, P.name, 0, 0)
 and FollowsTok(F.firstname, P.name, 1, 1)
 and  Not(Equals(GetText(P.name), GetText(F.firstname)))
 and  Not(Equals(GetText(P.name), GetText(S.name)))
 and  Not(Equals(GetText(S.name), GetText(F.firstname)))
 --Laura 07/22/09: refactored to allow customization of matching over new lines
 --and  Not(ContainsRegex(/[\n\r\t]/, SpanBetween(F.firstname, P.name)))
 ;

/**
 * Translation for Rule 1
 * Handles names of persons like Mr. Vladimir E. Putin
 */
/*
<rule annotation=Person id=1>
<token attribute={etc}INITIAL{etc}>CANYWORD</token>
<internal>
<token attribute={etc}>CAPSPERSON</token>
<token attribute={etc}>INITIALWORD</token>
<token attribute={etc}>CAPSPERSON</token>
</internal>
</rule>
*/
 
 create view Person1 as
 select CombineSpans(CP1.name, CP2.name) as person
 from   Initial I,
        CapsPerson CP1,
        InitialWord IW,
        CapsPerson CP2
 where  FollowsTok(I.initial, CP1.name, 0, 0)
   and  FollowsTok(CP1.name, IW.word, 0, 0)
   and  FollowsTok(IW.word, CP2.name, 0, 0);
   --and  Not(ContainsRegex(/[\n\r]/, SpanBetween(I.initial, CP2.name)));
 
/**
 * Translation for Rule 1a
 * Handles names of persons like Mr. Vladimir Putin
 */
/* 
<rule annotation=Person id=1a>
<token attribute={etc}INITIAL{etc}>CANYWORD</token>
<internal>
<token attribute={etc}>CAPSPERSON</token>{1,3}
</internal>
</rule>*/

 -- Split into two rules so that single token annotations are serperated from others
 -- Single token annotations
 create view Person1a1 as
 select CP1.name as person
 from   Initial I,
        CapsPerson CP1
 where  FollowsTok(I.initial, CP1.name, 0, 0)
 --- start changing this block
 --- disallow allow newline 
 --Laura 07/22/09: refactored to allow customization of matching over new lines
 --and Not(ContainsRegex(/[\n\t]/,SpanBetween(I.initial,CP1.name)))
--- end changing this block
;

-- Yunyao: added 05/09/2008 to match patterns such as "Mr. B. B. Buy"
 create view Person1a2 as 
 select CombineSpans(name.block, CP1.name) as person
 from   Initial I,
        BlockTok(0, 1, 2, InitialWord.word) name,
        CapsPerson CP1
 where  FollowsTok(I.initial, name.block, 0, 0)
    and FollowsTok(name.block, CP1.name, 0, 0)
	--Laura 07/22/09: refactored to allow customization of matching over new lines
    --and Not(ContainsRegex(/[\n\t]/,CombineSpans(I.initial, CP1.name)))
 ;

create view Person1a as
	(select P.person as person from Person1a1 P)
	union all
 	(select P.person as person from Person1a2 P);
	
 create view Person1a_more as 
 select name.block as person
 from   Initial I,
        BlockTok(0, 2, 3, CapsPerson.name) name
 where  FollowsTok(I.initial, name.block, 0, 0)
	and Not(ContainsRegex(/[\n\t]/,name.block))
--- start changing this block
-- disallow newline
 --Laura 07/22/09: refactored to allow customization of matching over new lines
 --and Not(ContainsRegex(/[\n\t]/,SpanBetween(I.initial,name.block)))
--- end changing this block
	;

/**
 * Translation for Rule 3
 * Find person names  like Thomas B.M. David
 */
 /*
<rule annotation=Person id=3>
<internal>
<token attribute={etc}PERSON{etc}>CAPSPERSON</token>
<token attribute={etc}>INITIALWORD</token>
<token attribute={etc}PERSON{etc}>CAPSPERSON</token>
</internal>
</rule>*/

 create view Person3 as
 select CombineSpans(P1.name, P2.name) as person
 from   PersonDict P1,
        --InitialWord IW,
        WeakInitialWord IW,
        PersonDict P2
 where  FollowsTok(P1.name, IW.word, 0, 0)
   and  FollowsTok(IW.word, P2.name, 0, 0)
   and  Not(Equals(GetText(P1.name), GetText(P2.name)));
 
 /**
 * Translation for Rule 3r1
 * 
 * This relaxed version of rule '3' will find person names like Thomas B.M. David
 * But it only insists that the first word is in the person dictionary
 */
 /*
<rule annotation=Person id=3r1>
<internal>
<token attribute={etc}PERSON:ST:FNAME{etc}>CAPSPERSON</token>
<token attribute={etc}>INITIALWORD</token>
<token attribute={etc}>CAPSPERSON</token>
</internal>
</rule>
*/

create view Person3r1 as
 select CombineSpans(FN.firstname, CP.name) as person
 from   FirstName FN,
        InitialWord IW,
        CapsPerson CP
 where  FollowsTok(FN.firstname, IW.word, 0, 0)
   and  FollowsTok(IW.word, CP.name, 0, 0);
   
/**
 * Translation for Rule 3r2
 * 
 * This relaxed version of rule '3' will find person names  like Thomas B.M. David
 * But it only insists that the second word is in the person dictionary
 */
/*
<rule annotation=Person id=3r2>
<internal>
<token attribute={etc}>CAPSPERSON</token>
<token attribute={etc}>INITIALWORD</token>
<token attribute={etc}PERSON:ST:LNAME{etc}>CAPSPERSON</token>
</internal>
</rule>*/

create view Person3r2 as
select CombineSpans(CP.name, LN.lastname) as person
from   LastName LN,
       InitialWord IW,
       CapsPerson CP
where  FollowsTok(CP.name, IW.word, 0, 0)
  and  FollowsTok(IW.word, LN.lastname, 0, 0);

/**
 * Translation for Rule 4
 *
 * This rule will find person names  like David Thomas
 */
 /*
 <rule annotation=Person id=4>
<internal>
<token attribute={etc}PERSON:ST:FNAME{etc}>CAPSPERSON</token>
<token attribute={etc}PERSON:ST:LNAME{etc}>CAPSPERSON</token>
</internal>
</rule>
*/
create view Person4WithNewLine as
select CombineSpans(FN.firstname, LN.lastname) as person
from   FirstName FN,
       LastName LN
where  FollowsTok(FN.firstname, LN.lastname, 0, 0);

-- Yunyao: 05/20/2008 revised to Person4WrongCandidates due to performance reason
--   NOTE: current optimizer execute Equals first thus make Person4Wrong very expensive
--create view Person4Wrong as
--select CombineSpans(FN.firstname, LN.lastname) as person
--from   FirstName FN,
--       LastName LN
--where  FollowsTok(FN.firstname, LN.lastname, 0, 0)
--   and ContainsRegex(/[\n\r]/, SpanBetween(FN.firstname, LN.lastname))
-- and Equals(GetText(FN.firstname), GetText(LN.lastname)); 

create view Person4WrongCandidates as
select FN.firstname as firstname, LN.lastname as lastname
from   FirstName FN,
       LastName LN
where  FollowsTok(FN.firstname, LN.lastname, 0, 0)
     --Laura 07/22/09: refactored to allow customization of matching over new lines
     --and ContainsRegex(/[\n\r]/, SpanBetween(FN.firstname, LN.lastname))
     ;

   
create view Person4 as
	(select P.person as person from Person4WithNewLine P)
	minus
	(select CombineSpans(P.firstname, P.lastname) as person 
	 from Person4WrongCandidates P
	 where Equals(GetText(P.firstname), GetText(P.lastname)));    
/**
 * Translation for Rule4a
 * This rule will find person names  like Thomas, David
 */
 /*
<rule annotation=Person id=4a>
<internal>
<token attribute={etc}PERSON:ST:LNAME{etc}>CAPSPERSON</token>
<token attribute={etc}>\,</token>
<token attribute={etc}PERSON:ST:FNAME{etc}>CAPSPERSON</token>
</internal>
</rule>
 */
create view Person4a as
select CombineSpans(LN.lastname, FN.firstname) as person
from   FirstName FN,
       LastName LN
where  FollowsTok(LN.lastname, FN.firstname, 1, 1)
and   ContainsRegex(/,/,SpanBetween(LN.lastname, FN.firstname)); 

--Yunyao: added on 07/08/2010
create view Person4aextended as 
select CombineSpans(LN.lastname, FN.firstname) as person
from   FirstName FN,
	   PersonSuffix S,
       LastName LN
where  FollowsTok(LN.lastname, S.suffix, 0, 0)
and    FollowsTok(S.suffix, FN.firstname, 1, 1)
and   ContainsRegex(/,/,SpanBetween(S.suffix, FN.firstname)); 
 
-- relaxed version of Rule4a
-- Yunyao: split the following rules into two to improve performance
-- TODO:   Test case for optimizer 
-- create view Person4ar1 as
-- select CombineSpans(CP.name, FN.firstname) as person
--from   FirstName FN,
--       CapsPerson CP
--where  FollowsTok(CP.name, FN.firstname, 1, 1)
--and   ContainsRegex(/,/,SpanBetween(CP.name, FN.firstname))
--and   Not(MatchesRegex(/(.|\n|\r)*(\.|\?|!|'|\sat|\sin)( )*/, LeftContext(CP.name, 10)))
--and   Not(MatchesRegex(/(?i)(.+fully)/, CP.name))
--and   GreaterThan(GetBegin(CP.name), 10);

create view Person4ar1temp as
select FN.firstname as firstname, CP.name as name
from   FirstName FN,
       CapsPerson CP
where  FollowsTok(CP.name, FN.firstname, 1, 1)
 and   ContainsRegex(/,/,SpanBetween(CP.name, FN.firstname));

create view Person4ar1 as
select CombineSpans(P.name, P.firstname) as person
  from Person4ar1temp P
where   Not(MatchesRegex(/(.|\n|\r)*(\.|\?|!|'|\sat|\sin)( )*/, LeftContext(P.name, 10))) --'
  and   Not(MatchesRegex(/(?i)(.+fully)/, P.name))
  and   GreaterThan(GetBegin(P.name), 10)
  and   Not(ContainsDict('stateList.dict', P.name));

create view Person4ar2 as
select CombineSpans(LN.lastname, CP.name) as person
from   CapsPerson CP,
       LastName LN
where  FollowsTok(LN.lastname, CP.name, 0, 1)
and   ContainsRegex(/,/,SpanBetween(LN.lastname, CP.name))
and   Not(ContainsDict('stateList.dict', CP.name));

 
/**
 * Translation for Rule2
 *
 * This rule will handles names of persons like B.M. Thomas David, where Thomas occurs in some person dictionary
 */
 /*
<rule annotation=Person id=2>
<internal>
<token attribute={etc}>INITIALWORD</token>
<token attribute={etc}PERSON{etc}>CAPSPERSON</token>
<token attribute={etc}>CAPSPERSON</token>
</internal>
</rule>
*/

create view Person2 as
select CombineSpans(IW.word, CP.name) as person
from   InitialWord IW,
       PersonDict P,
       CapsPerson CP
where  FollowsTok(IW.word, P.name, 0, 0)
  and  FollowsTok(P.name, CP.name, 0, 0);

/**
 * Translation for Rule 2a
 *
 * The rule handles names of persons like B.M. Thomas David, where David occurs in some person dictionary
 */
/*
<rule annotation=Person id=2a>
<internal>
<token attribute={etc}>INITIALWORD</token>
<token attribute={etc}>CAPSPERSON</token>
<token attribute={etc}>NEWLINE</token>?
<token attribute={etc}PERSON{etc}>CAPSPERSON</token>
</internal>
</rule>
*/

create view Person2a as
select CombineSpans(IW.word, P.name) as person
from   InitialWord IW,
	   CapsPerson CP,
       PersonDict P
where  FollowsTok(IW.word, CP.name, 0, 0)
  and  FollowsTok(CP.name, P.name, 0, 0);


/**
 * Translation for Rule 4r1
 * This relaxed version of rule '4' will find person names  Thomas, David
 * But it only insists that the FIRST word is in some person dictionary
 */
/*
<rule annotation=Person id=4r1>
<internal>
<token attribute={etc}PERSON:ST:FNAME{etc}>CAPSPERSON</token>
<token attribute={etc}>NEWLINE</token>?
<token attribute={etc}>CAPSPERSON</token>
</internal>
</rule>
*/
create view Person4r1 as
select CombineSpans(FN.firstname, CP.name) as person
from   FirstName FN,
	   CapsPerson CP
where  FollowsTok(FN.firstname, CP.name, 0, 0);
  

/**
 * Translation for Rule 4r2
 *
 * This relaxed version of rule '4' will find person names  Thomas, David
 * But it only insists that the SECOND word is in some person dictionary
 */
 /*
<rule annotation=Person id=4r2>
<token attribute={etc}>ANYWORD</token>
<internal>
<token attribute={etc}>CAPSPERSON</token>
<token attribute={etc}>NEWLINE</token>?
<token attribute={etc}PERSON:ST:LNAME{etc}>CAPSPERSON</token>
</internal>
</rule>
*/
create view Person4r2 as
select CombineSpans(CP.name, LN.lastname) as person
from   CapsPerson CP,
       LastName LN
where  FollowsTok(CP.name, LN.lastname, 0, 0);


/**
 * Translation for Rule 5
 *
 * This rule will find other single token person first names
 */
 /* 
<rule annotation=Person id=5>
<internal>
<token attribute={etc}>INITIALWORD</token>?
<token attribute={etc}PERSON:ST:FNAME{etc}>CAPSPERSON</token>
</internal>
</rule>
*/
create view Person5 as
select CombineSpans(IW.word, FN.firstname) as person
from   InitialWord IW,
       FirstName FN
where  FollowsTok(IW.word, FN.firstname, 0, 0);


/**
 * Translation for Rule 6
 *
 * This rule will find other single token person last names
 */
 /* 
<rule annotation=Person id=6>
<internal>
<token attribute={etc}>INITIALWORD</token>?
<token attribute={etc}PERSON:ST:LNAME{etc}>CAPSPERSON</token>
</internal>
</rule>
*/

create view Person6 as
select CombineSpans(IW.word, LN.lastname) as person
from   InitialWord IW,
       LastName LN
where  FollowsTok(IW.word, LN.lastname, 0, 0);

--==========================================================
-- End of rules
--
-- Create final list of names based on all the matches extracted
--
--==========================================================

/**
 * Union all matches found by strong rules, except the ones directly come
 * from dictionary matches
 */

------------------------------------------------------------------ 
-- Customization for CoNLL2003
------------------------------------------------------------------ 
create view ChineseLastName as
select D.match as lastname
from   Dictionary('names/strictLast_china.dict', Doc.text) D
where  MatchesRegex(/\p{Lu}\p{M}*.{1,10}/, D.match);

-- Full Chinese name in LastName FirstName
create view ChineseFullName as
select CombineSpans(C.lastname, CP.name) as person
from ChineseLastName C,
	 CapsPerson CP
where FollowsTok(C.lastname, CP.name, 0, 0); 

-- Identify three token names
--2. <FirstName><CapsPerson><LastName>
create view ThreeTokenPersonAll as
select CombineSpans(F.firstname, L.lastname) as person
from FirstName F,
	 CapsPerson CP,
	 LastName L
where FollowsTok(F.firstname, CP.name, 0, 0)
 and  FollowsTok(CP.name, L.lastname, 0, 0); 

-- Yunyao: added on 03/31/2010 remove those in Headline

create view ThreeTokenPerson as
	(select C.* from ThreeTokenPersonAll C)
	minus
	(select C.*
	 from ThreeTokenPersonAll C, 
	 	  HeadlineMixedCaps H
	 where Overlaps(H.headline, C.person));

--output view ThreeTokenPerson;

-- Mixed Person Candidate
------------------------------------------------------------------ 

create view PersonStrongWithNewLine as
	(select P.person as person from Person1 P)
union all  
    (select P.person as person from Person1a_more P)
union all  
    (select P.person as person from Person3 P)
union all  
    (select P.person as person from Person4 P)
union all
	(select P.person as person from Person3P1 P)
union all
	(select P.person as person from ChineseFullName P)
union all
	(select P.person as person from ThreeTokenPerson P)
union all
	(select P.* from PatternBasedPerson P);
	   
create view PersonStrongSingleTokenOnlyAll as  
    (select P.person as person from Person5 P)
union all  
    (select P.person as person from Person6 P)
union all
    (select P.firstname as person from FirstName P)
union all
    (select P.lastname as person from LastName P)
union all  
    (select P.person as person from Person1a P)
union all
	(select P.person as person from FamousPeople P);
    
-- Yunyao: remove those may be part of another entity
create view PersonStrongSingleTokenOnly as
	(select P.* from PersonStrongSingleTokenOnlyAll P)
    minus
    (select P.lastname as person from WrongLastNameAll P);
    
--output view PersonStrongSingleTokenOnly;
--output view FirstName;
--output view LastName;

-- Yunyao: added 05/09/2008 to expand person names with suffix
create view PersonStrongSingleTokenOnlyExpanded1 as
select CombineSpans(P.person,S.suffix) as person
from
	PersonStrongSingleTokenOnly P,
	PersonSuffix S
where 
	FollowsTok(P.person, S.suffix, 0, 0);	

-- Yunyao: added 04/14/2009 to expand single token person name with a single initial	
-- extend single token person with a single initial
create view PersonStrongSingleTokenOnlyExpanded2 as
	select Chomp(CombineSpans(R.person, RightContext(R.person,3))) as person
	from PersonStrongSingleTokenOnly R
	--Laura 09/24/2009: added to match names like Kathy S.
	--where MatchesRegex(/ +[\p{Upper}]\b\s*/, RightContext(R.person,3));
	where MatchesRegex(/ +[\p{Upper}]\b\.?\s*/, RightContext(R.person,3));
	
create view PersonStrongSingleTokenAll as
	(select P.person as person from PersonStrongSingleTokenOnly P)
	union all 
	(select P.person as person from PersonStrongSingleTokenOnlyExpanded1 P)
	union all 
	(select P.person as person from PersonStrongSingleTokenOnlyExpanded2 P);
	
create view PersonStrongSingleToken as
select P.person as person
from PersonStrongSingleTokenAll P
where 
--Laura: 04/30/2010: replaced \p{Pi} and \p{Pf} (begin/end quotation marks) with individual unicodes, for Java 5 compatibility
--Not(MatchesRegex(/[ ]*(\p{Pi}|\p{Pf})\p{M}*[^sld]/, RightContextTok(P.person, 2)));
  Not(MatchesRegex(/[ ]*[\u0093\u0094\u2018\u2019\u0022\u0027\u00AB\u00BB\u201A\u201B\u201C\u201D\u201E\u301D\u301E\u301F]\p{M}*[^sld]/, RightContextTok(P.person, 2)));  

/**
 * Union all matches found by weak rules
 */
create view PersonWeak1WithNewLine as  
	(select P.person as person from Person3r1 P)
union all  
    (select P.person as person from Person3r2 P)
union all
	(select P.person as person from Person4r1 P)
union all  
    (select P.person as person from Person4r2 P)
union all  
	(select P.person as person from Person2 P)
union all  
    (select P.person as person from Person2a P)
union all
	(select P.person as person from Person3P2 P)
union all
	(select P.person as person from Person3P3 P);
	

-- weak rules that identify (LastName, FirstName)
create view PersonWeak2WithNewLineBasic as
    (select P.person as person from Person4a P)
union all 
    (select P.person as person from Person4aextended P)
union all 
    (select P.person as person from Person4ar1 P)
union all
    (select P.person as person from Person4ar2 P);
    
-- Laura 09/24/2009: added to identify (LastName, FirstName Initial.)
create view PersonWeak2WithNewLineExpanded as
select CombineSpans(P.person, IW.word) as person
from PersonWeak2WithNewLineBasic P, InitialWord IW
where FollowsTok(P.person, IW.word, 0, 0);

--(LastName, FirstName) unioned with (LastName, FirstName Initial.)
create view PersonWeak2WithNewLine as
    (select P.person as person from PersonWeak2WithNewLineBasic P)
union all 
    (select P.person as person from PersonWeak2WithNewLineExpanded P);

-- Laura: 07/16/2009: moved the rest of the annotator into separate files
-- Person-FilterNewLineSingle(Double).aql and Person-Filter.aql
-- in order to support domain-specific handling of new lines  
    

--output view Person1;
--output view Person1a1;
--output view Person1a2;
--output view Person1a;
--output view Person1a_more;
/*output view Person2;
output view Person2a;
output view Person3;
output view Person3r1;
output view Person3r2;
output view Person3P1;
output view Person3P2;
output view Person3P3;
output view Person4;
output view Person4a;
output view Person4ar1;
output view Person4ar2;
output view Person4r1;
output view Person4r2;
output view Person5;
output view Person6;
*/
  

