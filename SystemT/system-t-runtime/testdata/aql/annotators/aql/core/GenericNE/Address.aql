-- include 'DictsForPlace.aql';
 
 create view OptionalGapBlock as
 select
     R.match as match
 from 
     RegexTok(/(>>)+/, 12, Doc.text) R;

     
 create view CapsPlace as
    select
        R.match as match
    from
        --Regex(/\b\p{Upper}[\p{Lower}\&]{1,20}\b/, Doc.text) R;
         --Regex(/\b\p{Upper}[\p{Lower}\&\.-\/]{1,20}\b/, Doc.text) R;
       RegexTok(/\p{Upper}[\p{Lower}\&\.-\/]{1,20}/, 25, Doc.text) R;
       
       
 create view CapsPlaceTwo as
    select
         CombineSpans(cp1.match, cp2.match) as match
    from
        CapsPlace cp1,
        CapsPlace cp2
     where
        FollowsTok(cp1.match, cp2.match, 0, 0);    
        
        
  create view CapsPlaceOnetoTwo
    as 
     (select R.match as match from CapsPlace R)
    union all 
     (select R.match as match from CapsPlaceTwo R);
 
 
   create view StreetSuffixNoCase  as
    select
        D.match as match
    from
        Dictionary('streetSuffix.dict',  Doc.text) D;
 		
    
  create view StreetSuffix as 
     select S.match as match 
     from StreetSuffixNoCase S
    where 
        MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}.?/, S.match);     
 		
    
  create view StreetSuffixWeakNoCase  as
    select
        D.match as match
    from
        Dictionary('streetSuffix_weak.dict',   Doc.text) D;
 		
		
        
    create view StreetSuffixWeak as 
     select S.match as match 
     from StreetSuffixWeakNoCase S
    where 
        MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, S.match);       
       
        
    
   create view StreetSuffixAllWithDuplicates
    as
    (select S.match as match from StreetSuffix S)
    union all 
     (select S.match as match from StreetSuffixWeak S);
     
   
    create view StreetSuffixAll as
    select R.match as match
    from StreetSuffixAllWithDuplicates R
    consolidate on R.match;
	 
    
  create view SecondaryUnitNoCase  as
    select
        D.match as match
    from
        Dictionary('secondaryUnit.dict', Doc.text) D;   
        
         
  create view SecondaryUnit as 
     select S.match as match 
     from SecondaryUnitNoCase S
    where 
        MatchesRegex(/(\#)|(\p{Upper}[\p{Lower}\&]{1,20})/, S.match);        
        
    
    create view Zipcode as
    select
        R.match as match
    from
    --    Regex(/\b[0-9]{5}(\-[0-9]{4})?\b/, Doc.text) R;
        RegexTok(/[0-9]{5}(\-[0-9]{4})?/, 3, Doc.text) R;
        

--output view Zipcode;
     
 
        
-- Rule 4

--streetaddress

 -- Yunyao: block change made to clarify annotator semantics and speedup processing time 
    -- start block change 
    
    create view NumCP as
    select
        R.match as match
    from
    --    Regex(/\b(([1-9\p{Alpha}][\d\p{Alpha}\-\,]*)?\d[\d\p{Alpha}\-\,]*)\b/, Doc.text) R
        RegexTok(/(([1-9\p{Alpha}][\d\p{Alpha}\-\,]*)?\d[\d\p{Alpha}\-\,]*)\b/, 20, Doc.text) R                
    where Not(MatchesRegex(/[1-9]\d{3}[,-]\s+.*/, R.match));
        
        
    create view StreetAddressAllCandidates as
    select
         nc.match as number, CombineSpans(SpanBetween(nc.match,ssw.match),ssw.match) as streetname, CombineSpans(nc.match, ssw.match) as matchedText,
         RightContext(CombineSpans(nc.match, ssw.match),10) as rc
    from
        NumCP nc,
        StreetSuffixAll ssw
     where
        FollowsTok(nc.match,ssw.match, 1, 7)  and
        --MatchesRegex(/\s*(\p{Upper}\.?\s+){0,2}(\p{Upper}[\p{Lower}\&]{1,20}|\d{1,3}(st|nd|rd|th))\s*(\p{Upper}[\p{Lower}\&]+\s*){0,3}/, SpanBetween(nc.match,ssw.match)) and
        MatchesRegex(/\s*((\p{Upper}\.?\s*){1,2})?(\p{Upper}[\p{Lower}\&]{1,20}|\d{1,3}(st|nd|rd|th))\s*(\p{Upper}[\p{Lower}\&]+\s*){0,3}/, SpanBetween(nc.match,ssw.match)) and
        Not(ContainsRegex(/[\n\r]/, CombineSpans(nc.match,ssw.match)));
    -- end block change
    
		

    -- expand StreetAddressAll to include direction such as N.E. 
    create view StreetAddressExpansion as
    select R.match as expansion
    from Regex(/^\W*([NSEW]\.?\s*){1,2}\b/, StreetAddressAllCandidates.rc) R;
    
    create view StreetAddressAllCandidatesWithExpansion as
    select
         S.number as number, CombineSpans(S.streetname,SAE.expansion) as streetname, CombineSpans(S.matchedText,SAE.expansion) as matchedText,
         S.streetname as oldstreetname, S.matchedText as oldmatch
    from StreetAddressAllCandidates S, StreetAddressExpansion SAE
    where FollowsTok(S.matchedText, SAE.expansion,0,0);
    
    create view StreetAddressAllCandidatesWithoutExpansion as
    (select S.number as number, S.streetname as streetname, S.matchedText as matchedText
    from StreetAddressAllCandidates S)
    minus
    (select S.number as number, S.oldstreetname as streetname, S.oldmatch as matchedText
    from StreetAddressAllCandidatesWithExpansion S
    );
    
    create view StreetAddressAll as
    (select S.number as number, S.streetname as streetname, S.matchedText as match from StreetAddressAllCandidatesWithoutExpansion S)
    union all 
    (select S.number as number, S.streetname as streetname, S.matchedText as match from StreetAddressAllCandidatesWithExpansion S)
    ;
    
    
/*    create view StreetAddressStrong as
    select
         CombineSpans(nc.match, ss.match) as match
    from
        NumCP nc,
        StreetSuffix ss
     where
        FollowsTok(nc.match,ss.match, 0, 2)  and
        MatchesRegex(/\s*(\p{Upper}[\p{Lower}\&]+\s*){0,3}/, SpanBetween(nc.match,ss.match)) and
        -- Yunyao: updated on 02/01/2008
        -- No new lines allowed between 
        Not(ContainsRegex(/[\n\r]/, SpanBetween(nc.match,ss.match))); 
*/
        
----- highway address
create view NumForHighwayAddress as
    select
        R.match as match
    from
    --     Regex(/\b\d{1,5}-?[A-Z]?\b/, Doc.text) R;
         RegexTok(/\d{1,5}-?[A-Z]?/, 3, Doc.text) R;
         
            
create dictionary HighwayDict as
(
   'Route', 'Rte', 'US', 'Hwy', 'Highway', 'SR'
);

create view HighwayDictionary as 
select D.match as match
from Dictionary('HighwayDict', 'Exact', Doc.text) D;


create view HighwayStateDictionary as 
(select R.match as match from HighwayDictionary R)
union all
(select R.match as match from StateStrongAbbrev R);
    
create view HighwayNum as 
select R.match as match
--from Regex(/\b\d{1,3}(\s*(N|S|E|W))?(\s*(N|S|E|W))?\b/,Doc.text) R;
--from Regex(/\b[1-9]\d{0,2}(\s*(N|S|E|W))?(\s*(N|S|E|W))?\b/,Doc.text) R;
from RegexTok(/[1-9]\d{0,2}(\s*(N|S|E|W))?(\s*(N|S|E|W))?/,3, Doc.text) R;


create view HighwayAddressPart as
    select
         nc.match as number, CombineSpans(SpanBetween(nc.match,rs.match),rs.match) as highwayname, CombineSpans(nc.match, rs.match) as match
    from
        NumForHighwayAddress nc,
        HighwayStateDictionary rs
     where
        FollowsTok(nc.match,rs.match, 0, 2)  and
        MatchesRegex(/\W+((N|S|E|W)\W+)?/, SpanBetween(nc.match,rs.match)) and
        Not(ContainsRegex(/[\n\r]/, CombineSpans(nc.match,rs.match)));
        
        
create view HighwayAddress as
    select
         ra.number as number, ra.highwayname as highwayname, CombineSpans(ra.match, hn.match) as match
    from
        HighwayAddressPart ra,
        HighwayNum hn
     where
        FollowsTok(ra.match,hn.match, 0, 1)  and
        MatchesRegex(/\W+/, SpanBetween(ra.match,hn.match)) and
        -- Yunyao: updated on 02/01/2008
        -- No new lines allowed between 
        Not(ContainsRegex(/[\n\r]/, CombineSpans(ra.match,hn.match)));
        
                
-- unit
         
         create view StreetHighwayAddressAll as
        (select S.number as number, S.streetname as streetname, S.match as match from StreetAddressAll S)
        union all
        (select S.number as number, S.highwayname as streetname, S.match as match from HighwayAddress S);
		
             
    create view StreetAddressUnit  as
    select
         S.number as number, S.streetname as streetname,
          Su.match as secondaryUnit, CombineSpans(S.match, Su.match) as match
    from
        StreetHighwayAddressAll S,
        SecondaryUnit Su
      where
        FollowsTok(S.match,Su.match, 0, 2) and
        MatchesRegex(/\s*\d*\s*,?\s*$/, SpanBetween(S.match,Su.match));
		
    
    -- Yunyao: added 06/01/2008
    create view StreetAddressUnitWithGap  as
    select
        S.number as number, S.streetname as streetname,
        Su.match as secondaryUnit, CombineSpans(S.match, Su.match) as match
    from
        StreetHighwayAddressAll S,
        OptionalGapBlock G,
        SecondaryUnit Su 
    where
        FollowsTok(S.match, G.match, 0, 0) and
        FollowsTok(G.match, Su.match, 0, 0);
		
        
    create view StreetAddressOptionalUnitCandidates
    as
    (select S.number as number, S.streetname as streetname,
     RightContext(S.match,0) as secondaryUnit, S.match as match from StreetHighwayAddressAll S)
    union all 
     (select S.number as number, S.streetname as streetname, S.secondaryUnit as secondaryUnit, S.match as match from StreetAddressUnit S)
    -- Yunyao: added 06/01/2008
    union all
     (select S.number as number, S.streetname as streetname,S.secondaryUnit as secondaryUnit, S.match as match from StreetAddressUnitWithGap S);
	 
    
    create view StreetAddressOptionalUnit as
    select R.number as number, R.streetname as streetname, R.secondaryUnit as secondaryUnit, R.match as match
    from StreetAddressOptionalUnitCandidates R
    consolidate on R.match;
    
    create view StreetAddressWithCityNoGap as
    select
    -- Sekar : combining secondary unit with what appears before city
         S.number as number,S.streetname as streetname, 
         CombineSpans(S.secondaryUnit,SpanBetween(S.secondaryUnit,cp.match)) as secondaryUnit, cp.match as city, CombineSpans(S.match, cp.match) as match
    from
        StreetAddressOptionalUnit S,
        CapsPlaceOnetoTwo cp
     where
        FollowsTok(S.match,cp.match, 0, 5)
--FollowsTok(S.match,cp.match, 0, 3)
--        and
--        MatchesRegex(/\s*,?\s*[\d\p{Alpha}]{1,20}([\.\ \-\,\d\p{Alpha}]{0,10}\s*){0,2},?\s*/, SpanBetween(S.match,cp.match))
        ;
        

   -- Yunyao: added 06/01/2008
    create view StreetAddressWithCityWithGap as
    select
         S.number as number, S.streetname as streetname,
         CombineSpans(S.secondaryUnit,SpanBetween(S.secondaryUnit,G.match)) as secondaryUnit,cp.match as city, CombineSpans(S.match, cp.match) as match
    from
        StreetAddressOptionalUnit S,
        OptionalGapBlock G,
        CapsPlaceOnetoTwo cp
     where
        FollowsTok(S.match,G.match, 0, 5) and
        FollowsTok(G.match, cp.match, 0, 0);
 
        
        
    create view StreetAddressWithCity as
        (select C.number as number, C.streetname as streetname, C.secondaryUnit as secondaryUnit, C.city as city,C.match as match from StreetAddressWithCityNoGap C)
        union all
        (select C.number as number, C.streetname as streetname, C.secondaryUnit as secondaryUnit, C.city as city,C.match as match from StreetAddressWithCityWithGap C);
        
            
--  addresswithstate

    create view StreetAddressWithCityStrongState as
    select
         Sawc.number as number, Sawc.streetname as streetname, Sawc.secondaryUnit as secondaryUnit, Sawc.city as city, Sa.match as state, CombineSpans(Sawc.match, Sa.match) as match
    from
        StreetAddressWithCity Sawc,
        StateStrongAll Sa
     where
        FollowsTok(Sawc.match,Sa.match, 0, 1)  and
        MatchesRegex(/\s*,?\s*/, SpanBetween(Sawc.match,Sa.match));
        
        
    create view StreetAddressWithCityWeakState as
    select
         Sawc.number as number, Sawc.streetname as streetname, Sawc.secondaryUnit as secondaryUnit, Sawc.city as city, Sa.match as state, CombineSpans(Sawc.match, Sa.match) as match
    from
        StreetAddressWithCity Sawc,
        StateWeakAll Sa
     where
        FollowsTok(Sawc.match,Sa.match, 0, 1)  and
        MatchesRegex(/\s*,?\s*/, SpanBetween(Sawc.match,Sa.match));
        
        
/*    create view StreetAddressWithCityOptionalStrongState
    as
    (select S.match as match from StreetAddressWithCity S)
    union all 
     (select S.match as match from StreetAddressWithCityStrongState S);   
*/
     
     create view StreetAddressWithCityOptionalWeakStateCandidates
     as
     (select S.number as number, S.streetname as streetname, S.secondaryUnit as secondaryUnit, S.city as city, RightContext(S.match,0) as state, S.match as match from StreetAddressWithCity S)
    union all  
     (select S.number as number, S.streetname as streetname,S.secondaryUnit as secondaryUnit, S.city as city, S.state as state, S.match as match from StreetAddressWithCityWeakState S);
     
	 
     create view StreetAddressWithCityOptionalWeakState  as
     select S.number as number, S.streetname as streetname, S.secondaryUnit as secondaryUnit, 
     S.city as city, S.state as state, S.match as match 
     from  StreetAddressWithCityOptionalWeakStateCandidates S
     consolidate on S.match;
    
     
    create view StreetAddressWithCityOptionalStateZipcodeCandidate as
    select
         Sawcos.number as number, Sawcos.streetname as streetname,Sawcos.secondaryUnit as secondaryUnit, Sawcos.city as city, Sawcos.state as state, z.match as zipcode, 
         CombineSpans(Sawcos.match, z.match) as match
    from
        StreetAddressWithCityOptionalWeakState Sawcos,
        Zipcode z
     where
        FollowsTok(Sawcos.match,z.match, 0, 1)  and
        -- allow both dot and comma in between
        ContainsRegex(/^\s*[,\.]?\s*$/, SpanBetween(Sawcos.match,z.match));
        
		
	 
    create view StreetAddressWithCityStateZipcode as
    select
         Sawcs.number as number, Sawcs.streetname as streetname,Sawcs.secondaryUnit as secondaryUnit, Sawcs.city as city, Sawcs.state as state, z.match as zipcode, 
         CombineSpans(Sawcs.match, z.match) as match
    from
        StreetAddressWithCityStrongState Sawcs,
        Zipcode z
     where
        FollowsTok(Sawcs.match,z.match, 0, 1)  and
        -- allow both dot and comma in between
        ContainsRegex(/^\s*[,\.]?\s*$/, SpanBetween(Sawcs.match,z.match));
    
    create view StreetAddressWithCityOptionalStateZipcodeOverlap as
    select R.number as number, R.streetname as streetname, 
           R.secondaryUnit as secondaryUnit, R.city as city, R.state as state, 
           R.zipcode as zipcode, R.match as match
    from StreetAddressWithCityOptionalStateZipcodeCandidate R, StreetAddressWithCityStateZipcode R1
    where Overlaps(R.match,R1.match);
    
    create view StreetAddressWithCityOptionalStateZipcode as
    (select R.number as number, R.streetname as streetname, 
           R.secondaryUnit as secondaryUnit, R.city as city, R.state as state, 
           R.zipcode as zipcode, R.match as match 
    from StreetAddressWithCityOptionalStateZipcodeCandidate R)
    minus
    (select R.number as number, R.streetname as streetname, 
           R.secondaryUnit as secondaryUnit, R.city as city, R.state as state, 
           R.zipcode as zipcode, R.match as match 
    from StreetAddressWithCityOptionalStateZipcodeOverlap R);
    
    -- ===========================================================================
-- >>>>>>>>>>>>>>> Aggregation/Consolidation section <<<<<<<<<<<<<<<<
-- ===========================================================================

-- Merge all the different rules.

-- Yunyao: added 02/01/2007
-- Prefer (street address, city, state, zipcode over just city, strong state)
-- Laura 05/05/2009: removed, the filtering semantics is achieved in the consolidation phase for USAddress
/*
create view WrongPlaces as
select CombineSpans(R1.number, R1.streetname) as address, R1.city as city, R1.state as state, R1.zipcode as zipcode, R1.match as loc
from StreetAddressWithCityOptionalStateZipcode R1,
     StreetAddressWithCityStrongState R2
where Contains(R2.match, R1.match);
*/

-------------------------------
 ---     German Address
 -------------------------------
 create view GermanZipcode as
    select
        R.match as match
    from
    --    Regex(/\b(D-)?[0-9]{4,5}\b/, Doc.text) R;
         RegexTok(/(D-)?[0-9]{4,5}/, 3, Doc.text) R;

    
   create view GermanCityZipcode1 as
    select
         GZ.match as zipcode, GC.match as city, CombineSpans(GZ.match, GC.match) as match
    from
        GermanZipcode GZ,
        GermanCities GC
     where
        FollowsTok(GZ.match, GC.match, 0, 2)
        and  MatchesRegex(/\s*[,\.]?\s*/, SpanBetween(GZ.match, GC.match));    
		

    create view GermanCityZipcode2 as
    select
         GZ.match as zipcode, GC.match as city, CombineSpans(GC.match, GZ.match) as match
    from
        GermanZipcode GZ,
        GermanCities GC
     where
        FollowsTok(GC.match, GZ.match, 0, 3)
        and  MatchesRegex(/\s*((am Main)|([\-\/]?\p{Lu}\p{M}*(\p{L}\p{M}*)+))?\s*,?\s*/, SpanBetween(GC.match, GZ.match));
		

     create view GermanCityZipcode as  
     (select GCZ1.zipcode as zipcode, GCZ1.city as city, GCZ1.match as match from GermanCityZipcode1 GCZ1)
     union all
     (select GCZ2.zipcode as zipcode, GCZ2.city as city, GCZ2.match as match from GermanCityZipcode2 GCZ2);

   
-- need to support street numbers such as 1/3
-- allow hyphenated street names in the beginning    
-- allow park/bridge mentions
-- no newline in streetname

create view GermanStreetAddressSuffix1 as
 select R.match as match
-- from   Regex(/\b(\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20})?([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]ämme|[Gg]asse|[Gg]aerten|[Gg]ärten|[Hh]alde|[Hh]öfe|[Hh]of|[Hh]oefe|[Ll]andstraße|[Ll]andstrasse|[Mm]ärkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]lätze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]traße|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)\s*,?\s*([[1-9]\p{L}\p{M}*\-\,])*\d([\d\p{L}\p{M}*\/\-\,])*/, Document.text) R ;
from   RegexTok(/(\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20})?([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]ämme|[Gg]asse|[Gg]aerten|[Gg]ärten|[Hh]alde|[Hh]öfe|[Hh]of|[Hh]oefe|[Ll]andstraße|[Ll]andstrasse|[Mm]ärkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]lätze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]traße|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)\s*,?\s*([[1-9]\p{L}\p{M}*\-\,])*\d([\d\p{L}\p{M}*\/\-\,])*/, 25, Doc.text) R ;


create view GermanStreetAddressSuffix2 as
 select R.match as match
-- from   Regex(/\b(An [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*(Brücke|Park|Postfach|Hauptbahnhof)\b\s*,?\s*([[1-9]\p{L}\p{M}*\-\,])*\d([\d\p{L}\p{M}*\/\-\,])*/, Document.text) R ;
from   RegexTok(/(An [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*(Brücke|Park|Postfach|Hauptbahnhof)\b\s*,?\s*([[1-9]\p{L}\p{M}*\-\,])*\d([\d\p{L}\p{M}*\/\-\,])*/, 25, Doc.text) R ;


create view GermanStreetAddressSuffix as
(select R.match as match from GermanStreetAddressSuffix1 R)
union all
(select R.match as match from GermanStreetAddressSuffix2 R);

create view GermanCapsPlace as
select R.match as match
--from Regex(/\b\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}/,Doc.text) R ;
from RegexTok(/\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}/,25, Doc.text) R ;


create view GermanCapsPlaceTwo as
select CombineSpans(R1.match,R2.match) as match
from GermanCapsPlace R1, GermanCapsPlace R2
where FollowsTok(R1.match,R2.match,0,1) and
      MatchesRegex(/[ \t]*(\-[ \t]*)?/,SpanBetween(R1.match,R2.match));
      
create view GermanCapsPlaceOneOrTwo as 
(select R.match as match from GermanCapsPlace R)
union all 
(select R.match as match from GermanCapsPlaceTwo R);

create view GermanStreetNameWithSuffix as 
select CombineSpans(R1.match,R2.match) as match
from GermanCapsPlaceOneOrTwo R1, GermanStreetAddressSuffix R2
where FollowsTok(R1.match, R2.match,0,1) and
       MatchesRegex(/[ \t]*(\-[ \t]*)?/,SpanBetween(R1.match,R2.match));
       

 create view GermanStreetOptionalNameWithSuffix as 
(select R.match as match from GermanStreetNameWithSuffix R)
union all 
(select R.match as match from GermanStreetAddressSuffix R);

create view GermanStreetAddress1 as
select R.match as match
--from Consolidate(GermanStreetOptionalNameWithSuffix.match) R;
from  GermanStreetOptionalNameWithSuffix  R
consolidate on R.match;


-- create view GermanStreetAddress1 as
-- select R.match as match
-- from   Regex(/\b\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}[ \t]*(-(\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}-){1,2})?[ \t]*([Aa]n [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]ämme|[Gg]asse|[Gg]aerten|[Gg]ärten|[Hh]alde|[Hh]öfe|[Hh]of|[Hh]oefe|[Ll]andstraße|[Ll]andstrasse|[Mm]ärkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]lätze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]traße|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)\s*,?\s*([[1-9]\p{L}\p{M}*\-\,])*\d([\d\p{L}\p{M}*\/\-\,])*/, Document.text) R ;
 

 create view GermanStreetAddress2 as
 select R.match as match
-- from   Regex(/\b([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]ämme|[Gg]asse|[Gg]aerten|[Gg]ärten|[Hh]alde|[Hh]öfe|[Hh]of|[Hh]oefe|[Ll]andstraße|[Ll]andstrasse|[Mm]ärkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]lätze|[Pp]laetze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]traße|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)[ \t]+([Aa]n [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}\s*,?\s*([[1-9]\p{L}\p{M}*\-\,]*\d[\d\p{L}\p{M}*\/\-\,]*)/, Document.text) R ;
 from   RegexTok(/([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]ämme|[Gg]asse|[Gg]aerten|[Gg]ärten|[Hh]alde|[Hh]öfe|[Hh]of|[Hh]oefe|[Ll]andstraße|[Ll]andstrasse|[Mm]ärkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]lätze|[Pp]laetze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]traße|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)[ \t]+([Aa]n [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}\s*,?\s*([[1-9]\p{L}\p{M}*\-\,]*\d[\d\p{L}\p{M}*\/\-\,]*)/, 25, Doc.text) R ;

 
-- create view GermanStreetAddress3 as
-- select R.match as match
-- from   Regex(/(\b\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}[ \t]*(-(\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}-){1,2})?[ \t]*)?(An [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*(BrÂ�ÃƒÂ�Â¼cke|Park|Postfach|Hauptbahnhof)\b\s*,?\s*([[1-9]\p{L}\p{M}*\-\,]*\d[\d\p{L}\p{M}*\/\-\,]*)/, Doc.text) R ;
 
 create view GermanStreetAddress as 
 (select GSA1.match as match from GermanStreetAddress1 GSA1)
 union all
 (select GSA2.match as match from GermanStreetAddress2 GSA2);
  
 create view GermanAddressAll as
    select
          GSA.match as streetaddress, GCZ.city as city, GCZ.zipcode as zipcode,CombineSpans(GSA.match, GCZ.match) as match
    from
        GermanCityZipcode GCZ,
        GermanStreetAddress GSA
     where
        FollowsTok(GSA.match, GCZ.match, 0, 3)
        and  MatchesRegex(/\W*([Gg]ermany|Deutsch\s*[Ll]and)?.{0,5}\W*/, SpanBetween(GSA.match, GCZ.match));
        

create view GermanAddress as
select GAA.streetaddress as streetaddress, GAA.city as city, GAA.zipcode as zipcode, GAA.match as match
from GermanAddressAll GAA;

-- Laura 05/05/2009: globally replaced Place with Address
/*
create view PlaceAll as
    (select S.match as loc from StreetAddressWithCityOptionalStateZipcode S)
    union all 
     (select R.match as loc from StreetAddressWithCityStrongState R)
     union all
     (select R.match as loc from GermanAddressAll R);
*/

create view USAddressCandidates as
  (select S.number as number, S.streetname as streetname, S.secondaryUnit as secondaryUnit, S.city as city, S.state as state, S.zipcode as zipcode, S.match as loc from StreetAddressWithCityStateZipcode S)
  union all
  (select S.number as number, S.streetname as streetname, S.secondaryUnit as secondaryUnit, S.city as city, S.state as state, S.zipcode as zipcode, S.match as loc from StreetAddressWithCityOptionalStateZipcode S)
  union all
  (select S.number as number, S.streetname as streetname, S.secondaryUnit as secondaryUnit, S.city as city, S.state as state, RightContext(S.match,0) as zipcode, S.match as loc from StreetAddressWithCityStrongState S);


--create view USAddressCandidateStrong as
--select S.number as number, S.streetname as streetname, S.secondaryUnit as secondaryUnit, S.city as city, S.state as state, S.zipcode as zipcode, S.loc as loc 
--from USAddressCandidates S
--where ContainsDict('city.dict',S.city);
 
        
create view USAddressCandidateStrong as
select  S.number as number, S.streetname as streetname, S.secondaryUnit as secondaryUnit, S.city as city, S.state as state, S.zipcode as zipcode, S.loc as loc 
from USAddressCandidates S,
     USCity C
where --Overlaps(S.city,C.match) and 
      Equals(S.city,C.match);
  
create view USAddressCandidateOverlap as
    select R.number as number, R.streetname as streetname, 
           R.secondaryUnit as secondaryUnit, R.city as city, R.state as state, 
           R.zipcode as zipcode, R.loc as loc
    from USAddressCandidates R, USAddressCandidateStrong R1
    where Overlaps(R.city,R1.city);
--    where Overlaps(R.loc,R1.loc) and Overlaps(R.city,R1.city) and Not(Equals(R.city,R1.city));
--    where Overlaps(R.loc,R1.loc) and Contains(R.city,R1.city) and Not(Contains(R1.city,R.city));
--    where Overlaps(R.loc,R1.loc) and  Or(And(Contains(R.city,R1.city),Not(Contains(R1.city,R.city))),
--                                         And(Contains(R1.city,R.city),Not(Contains(R.city,R1.city))));

    
    create view USAddressWeakCandidatesRemoved as
    (select R.number as number, R.streetname as streetname, 
           R.secondaryUnit as secondaryUnit, R.city as city, R.state as state, 
           R.zipcode as zipcode, R.loc as loc
    from USAddressCandidates R)
    minus
    (select R.number as number, R.streetname as streetname, 
           R.secondaryUnit as secondaryUnit, R.city as city, R.state as state, 
           R.zipcode as zipcode, R.loc as loc 
    from USAddressCandidateOverlap R); 
 
 create view USAddressAll as
  (select R.number as number, R.streetname as streetname, 
           R.secondaryUnit as secondaryUnit, R.city as city, R.state as state, 
           R.zipcode as zipcode, R.loc as loc
    from USAddressWeakCandidatesRemoved R)
    union all
    (select R.number as number, R.streetname as streetname, 
           R.secondaryUnit as secondaryUnit, R.city as city, R.state as state, 
           R.zipcode as zipcode, R.loc as loc
    from USAddressCandidateStrong R
    );
 
create view USAddress as
select S.number as number, S.streetname as streetname, S.secondaryUnit as secondaryUnit, S.city as city, S.state as state, S.zipcode as zipcode, S.loc as loc
from USAddressAll S
consolidate on S.loc
--using 'ContainsButNotEqual'
;

-- Laura 04/29/2009: changed name due to conflict with lotus notes post-processing
--create view Address as
create view AddressAll as
(select CombineSpans(S.number,S.streetname) as address, S.city as city, S.state as stateorprovince, S.zipcode as zip, S.loc as loc from USAddress S)
union all
(select S.streetaddress as address, S.city as city, RightContext(S.city,0) as stateorprovince, S.zipcode as zip, S.match as loc from GermanAddress S);


