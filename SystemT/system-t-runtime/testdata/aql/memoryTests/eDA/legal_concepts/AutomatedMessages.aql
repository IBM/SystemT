-- Paste your AQL spec here
-- Automated messages, canned responses


create dictionary RespondDictList as
(
 'reply', 'respond', 'write', 'mail'
);



create dictionary AutoDictList as
(
 'autogenerated', 'auto-generated', 'auto generated', 'automatically generated', 'automatically-generated', 'auto-answer', 'auto answer', 'automatically-answer', 'automatically answer'
);



create dictionary EmailDictList as
(
 'email', 'e-mail', 'mail', 'message'
);



create dictionary EmailPlusDictList as
(
 'email', 'e-mail', 'mail', 'message', 'address', 'mailbox', 'mail-box', 'mail-address', 'email-address'
);

create dictionary ToDictList as
(
 'to'
);



create dictionary UnsubscribeDictList as
(
 'unsubscribe'
);

create dictionary UnsubscribePlusDictList as
(
 'unsubscribe', 'remove'
);


create dictionary PostUnsubsDictList as
(
 'link', 'information', 'here'
);



create dictionary PleaseDictList as
(
 'please'
);

create dictionary DoDictList as
(
 'do'
);

create dictionary NotDictList as
(
 'not'
);

create dictionary ReceiveDictList as
(
 'receiving', 'received', 'getting', 'got', 'mailed', 'viewing'
);

create dictionary ObjectDictList as
(
 'e-report', 'e-reports', 'report', 'reports', 'news-feed', 'news-feeds', 'news', 'update', 'updates', 'alert', 'alerts', 'mailing', 'mailings', 'jokes', 'announcement', 'announcements', 'message', 'messages', 'offers', 'email', 'emails', 'e-mail', 'e-mails', 'newsletter', 'newsletters', 'news-letter', 'news-letters'
);

create dictionary BecauseDictList as
(
 'because', 'as', 'since'
);

create dictionary SignDictList as
(
 'signed up', 'signed-up', 'registered', 'subscribed', 'listed'
);

create dictionary UserDictList as
(
  'user', 'cleint', 'customer'
);

create dictionary YouDictList as
(
  'you'
);

create dictionary MayDictList as
(
  'may', 'can', 'shall', 'might', 'should', 'want to'
);



create view RespondDict as
select D.match as match
from Dictionary ('RespondDictList', Document.text) D;



create view AutoDict as
select D.match as match
from Dictionary('AutoDictList', Document.text) D;



create view EmailDict as 
select D.match as match
from Dictionary('EmailDictList', Document.text) D;



create view EmailPlusDict as 
select D.match as match
from Dictionary('EmailPlusDictList', Document.text) D;



create view ToDict as
select D.match as match
from Dictionary('ToDictList', Document.text) D;


create view UnsubscribeDict as
select D.match as match
from Dictionary('UnsubscribeDictList', Document.text) D;


create view UnsubscribePlusDict as
select D.match as match
from Dictionary('UnsubscribePlusDictList', Document.text) D;


create view PostUnsubsDict as
select D.match as match
from Dictionary('PostUnsubsDictList', Document.text) D;


create view PleaseDict as
select D.match as match
from Dictionary('PleaseDictList', Document.text) D;


create view NotDict as
select D.match as match
from Dictionary('NotDictList', Document.text) D;

create view ReceiveDict as
select D.match as match
from Dictionary('ReceiveDictList', Document.text) D;

create view ObjectDict as
select D.match as match
from Dictionary('ObjectDictList', Document.text) D;

create view BecauseDict as
select D.match as match
from Dictionary('BecauseDictList', Document.text) D;


create view SignDict as
select D.match as match
from Dictionary('SignDictList', Document.text) D;


create view UserDict as
select D.match as match
from Dictionary('UserDictList', Document.text) D;

create view YouDict as
select D.match as match
from Dictionary('YouDictList', Document.text) D;

create view MayDict as
select D.match as match
from Dictionary('MayDictList', Document.text) D;


create view PleaseReg as
select R.match as match
from Regex(/[Pp]lease do not/, Document.text) R;


-- auto-generated email
create view AutoEmails1 as
select
	CombineSpans(auto.match, email.match) as match
from 
	AutoDict auto,
	EmailDict email
where
   	FollowsTok(auto.match, email.match, 0, 1);



-- to unsubscribe
create view AutoEmails2 as
select
	CombineSpans(to.match, unsubs.match) as match
from 
	ToDict to,
	UnsubscribeDict unsubs
where
   	FollowsTok(to.match, unsubs.match, 0, 1);


-- unsubscribe here
create view AutoEmails3 as
select
	CombineSpans(unsubs.match, post.match) as match
from 
	UnsubscribeDict unsubs,
	PostUnsubsDict post
where
   	FollowsTok(unsubs.match, post.match, 0, 1);


-- do not reply to this email
create view PleaseRespond as
select
	CombineSpans(please.match, respond.match) as match
from 
	PleaseReg please,
	RespondDict respond
where
   	FollowsTok(please.match, respond.match, 0, 2);

create view AutoEmails4 as
select
	CombineSpans(PR.match, EP.match) as match
from 
	PleaseRespond PR,
	EmailPlusDict EP
where
   	FollowsTok(PR.match, EP.match, 0, 6);

--receiving this e-report because you have signed 
create view ReceiveObject as
select
	CombineSpans(receive.match, object.match) as match
from 
	ReceiveDict receive,
	ObjectDict object
where
   	FollowsTok(receive.match, object.match, 0, 2);


create view ROBecause as
select
	CombineSpans(ro.match, because.match) as match
from 
	ReceiveObject ro,
	BecauseDict because
where
   	FollowsTok(ro.match, because.match, 0, 2);


create view AutoEmails5 as
select
	CombineSpans(rob.match, sign.match) as match
from 
	ROBecause rob,
	SignDict sign
where
   	FollowsTok(rob.match, sign.match, 0, 5);


--Because you are a registered COMPANY user
create view BecauseSign as
select
	CombineSpans(because.match, sign.match) as match
from 
	BecauseDict because,
	SignDict sign
where
   	FollowsTok(because.match, sign.match, 0, 3);


create view AutoEmails6 as
select
	CombineSpans(bs.match, user.match) as match
from 
	BecauseSign bs,
	UserDict user
where
   	FollowsTok(bs.match, user.match, 0, 3);

--You may unsubscribe
create view YouMay as
select
	CombineSpans(you.match, may.match) as match
from 
	YouDict you,
	MayDict may
where
   	FollowsTok(you.match, may.match, 0, 2);

create view AutoEmails7 as
select
	CombineSpans(ym.match, unsubscribe.match) as match
from 
	YouMay ym,
	UnsubscribeDict unsubscribe
where
   	FollowsTok(ym.match, unsubscribe.match, 0, 3);


--remove/unsubscribe your name from future mailings
create view AutoEmails8 as
select
	CombineSpans(unsubs.match, object.match) as match
from 
	UnsubscribePlusDict unsubs,
	ObjectDict object
where
   	FollowsTok(unsubs.match, object.match, 0, 4);



create view AutoEmailsAll as 
(select AE1.match as match from AutoEmails1 AE1)
union all
(select AE2.match as match from AutoEmails2 AE2)
union all
(select AE3.match as match from AutoEmails3 AE3)
union all
(select AE4.match as match from AutoEmails4 AE4)
union all
(select AE5.match as match from AutoEmails5 AE5)
union all
(select AE6.match as match from AutoEmails6 AE6)
union all
(select AE7.match as match from AutoEmails7 AE7)
union all
(select AE8.match as match from AutoEmails8 AE8);

