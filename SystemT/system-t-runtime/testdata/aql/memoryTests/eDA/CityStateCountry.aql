-- NOTE: This file requires DictsForPlace.aql

/* American, major and problematic cities.
   As the view City will be used later on in
   City-State-Country combination extraction
   (see the view CityStateCountryCandidate),
   it makes sence to add the city dictionaries
   for all the supported languages. In case the
   document language doesn't match, the corresponding
   city dictionaries will be empty */
   
create view CityAll as
	(select C.match as match from AllCities C)
	union all
	(select C.match as match from USCity C)
	union all
	(select C.match as match from GermanCities C)
    union all
	(select C.match as match from ProblematicCities C)
    union all
	(select C.match as match from SpanishCities C)
	union all 
	(select C.match as match from FrenchCities C);
	
create view City as
select C.match as match
from CityAll C
consolidate on C.match;

-- only return cities with strong clue

create dictionary ClueCityDict as
('the city of', 'in', 'nach', 'durch', 'ausserhalb von', 'außerhalb von', 'innerhalb von', 'ab', 'ciudad de', 'Cd.', 'cité de','en');

-- for English, only components of city names were taken, for German, clues from prepositions are included like "nach" ={EN} "to" 
-- this strategy(preps) can be expanded for Spanish, French and English, but requires testing

create view CityClue as
    select D.match as match
    from   Dictionary('ClueCityDict', Document.text) D;

-- clue is immediately followed by the city entity

create view StrongCity as
select C.match as match
from CityClue CL,
	 City C
where FollowsTok(CL.match, C.match, 0, 0);
 
-- for American City-State combinations
-- major city, state

create view CityStateCandidate as
select CombineSpans(C.match, S.match) as match
from USCity C,
	 StateStrongAll S
where FollowsTok(C.match, S.match, 0, 1)
  and MatchesRegex(/\s*[,]?\s*/, SpanBetween(C.match, S.match))
  and Not(ContainsRegex(/[\n\r]/, SpanBetween(C.match, S.match)))
  -- avoid matchings like "Post ID"
  and Not(MatchesRegex(/[^,]+\s+ID/, CombineSpans(C.match, S.match)));


-- avoid matching a random list of city,state combinations

create view CityStateWrong as
select C.match as match
from CityStateCandidate C
where ContainsRegex(/,/, LeftContext(C.match, 10))
 and ContainsRegex(/,/, RightContextTok(C.match, 10));

create view CityState as
	(select C.match as match from CityStateCandidate C)
	minus
	(select C.match as match from CityStateWrong C);
    
--------------------------------------------------
 ---     German Prefixed Locations
--------------------------------------------------
-- E.g. 'Suedasien' ('South Asia')

-- Find all words that start with a cardinal direction

create view CardinalPrefixWord as 
    select R.match as word 
    from RegexTok(/([N|n]ord|[S|s]üd|[O|o]st|[W|w]est)(\p{Lower}{1,30})/,1, Document.text) R;

-- Pull off the prefix and suffix part of words that start with a cardinal direction.

create view CardinalSuffix as
    select R.match as prefix, RightContextTok(R.match, 1) as suffix
    from Regex(/\A([N|n]ord|[S|s]üd|[O|o]st|[W|w]est)/, CardinalPrefixWord.word) R;

-- Find suffixes that match a "location" dictionary, then attach back to the 
-- set of compound words. For countries, continents and German states(Bundeslaender)

create view CardinalPrefixCountry as
select S.prefix as prefix, S.suffix as suffix, W.word as wholeword
    from CardinalPrefixWord W, CardinalSuffix S
    where ContainsDict('dictionaries/de/country_german.dict', S.suffix)
        and Contains(W.word, S.suffix)
        and Contains(W.word, S.prefix);
        
create view CardinalPrefixContinent as
select S.prefix as prefix, S.suffix as suffix, W.word as wholeword
    from CardinalPrefixWord W, CardinalSuffix S
    where ContainsDict('dictionaries/de/continent_german.dict', S.suffix)
        and Contains(W.word, S.suffix)
        and Contains(W.word, S.prefix);
        
create view CardinalPrefixStateGE as
select S.prefix as prefix, S.suffix as suffix, W.word as wholeword
    from CardinalPrefixWord W, CardinalSuffix S
    where ContainsDict('dictionaries/de/stateListGe.dict', S.suffix)
        and Contains(W.word, S.suffix)
        and Contains(W.word, S.prefix);
        
create view CardinalPrefixLocation as
    (select CPC.wholeword as match from CardinalPrefixCountry CPC)
    union all
	(select CPC.wholeword as match from CardinalPrefixContinent CPC)
	union all
    (select CPSG.wholeword as match from CardinalPrefixStateGE CPSG);    
    
--------------------------------------------------
 ---     Spanish Prefixed Locations
--------------------------------------------------
-- E.g. 'Cisjordania'

-- Find all words that start with a cardinal direction, and saves the
-- second part of composita as suffix and the whole word as location
create view SpanishPrefixLocationTemp as
extract regex /([C|c]is|[N|n]orte|[O|o]este|[E|e]ste|[S|s]ud)(\p{L}{1,30})/ 
   on 1 token in D.text 
    return 
        group 2 as suffix
        and group 0 as location
from Document D;

-- check if the location from the previous view matches any of the
-- Spanish countries

create view SpanishPrefixLocation as
    select SPL.location as match
    from SpanishPrefixLocationTemp SPL
    where ContainsDict('dictionaries/es/country_spanish.dict', SPL.suffix); 

---------------------------------------------------
-- unnecessary for French as cardinal directions are usually postpositional new words   "Marseille Nord" or "Corée du Sud"

-- major city, state, country for all the languages
-- the span between the known country and city is presumed to be a state

create view CityStateCountryCandidate as
select CombineSpans(C.match, CN.match) as match, SpanBetween(C.match, CN.match) as state
from City C,
	 Country CN
where FollowsTok(C.match, CN.match, 3, 3)
  and MatchesRegex(/\s*,\s*\p{Lu}\p{M}*(\p{L}\p{M}*)+\s*,\s*/, SpanBetween(C.match, CN.match))
  and Not(ContainsRegex(/[\n\r]/, SpanBetween(C.match, CN.match)));

-- filter out City-Country-Country combinations

create view CityStateCountryWrong1 as
select C.match as match
from CityStateCountryCandidate C,
	 Country CN
where Contains(C.state, CN.match);

-- avoid matching a random list of city,state, country combinations

create view CityStateCountryWrong2 as
select C.match as match,  LeftContextTok(C.match, 1) as lc
from CityStateCountryCandidate C
where MatchesRegex(/,/, RightContextTok(C.match, 1))
  and Not(ContainsRegex(/[\n\r]/, LeftContextTok(C.match, 1)));

-- recognize "US Army" etc. as Organization and subtract it from location Candidates
-- might be expanded to  create view blabla from CityStateCountryCandidate C, divisions(create view extracting regexes like "Army|Market|||", language specifically(position post|pre)
-- "l'armée de|||", where FollowsTok C.match CN.match 0,1;  subtract from citystatecountrycandidates, add to Orgas, then recognition not restricted to US
create view divisions as
    extract regex /(US Marine Corps|US[\-|\s]Officials|US[\-|\s]?Notenbank|US[\-|\s]?Finanzmarkt|US[\-|\s]?Army)/ on D.text as match
	from Document D;

--for addition to Orgas in Organization.aql
create view divisionsTwo as 
select C.match as org
       from divisions C;
	   
create view CityStateCountryWrong as 
	(select C.match as match from CityStateCountryWrong1 C)
	union all
	(select C.match as match from CityStateCountryWrong2 C)
	union all
	(select C.match as match from divisions C);
   

create view CityStateCountry as
	(select C.match as match from CityStateCountryCandidate C)
	minus
	(select C.match as match from CityStateCountryWrong C);
	
-- union of all the locations
-- some of the dictionaries can be empty, depending on the
-- document language

create view CityStateCountryCandidatesNotFiltered as
   (select C.match as match from AllCities C)
	union all
	(select C.match as match from StrongCity C)
	union all
	(select C.match as match from State C)
	union all
	(select C.match as match from Country C)
	union all
	(select C.match as match from CityState C)
    union all
	(select C.match as match from ContinentsAll C)
	union all
	(select C.match as match from CityStateCountry C)
    union all
    (select CPL.match as match from CardinalPrefixLocation CPL)
    union all
	(select C.match as match from SpanishCities C)
    union all
	(select C.match as match from GermanCities C)
	union all
	(select C.match as match from FrenchCities C);


    
-- filtering part. FilterLocation contains language dependent
-- false positives. See DictsForPlace.aql for more detail.

create view CityStateCountryCandidates as
    (select C.match as match from CityStateCountryCandidatesNotFiltered C)
    minus
    (select C.match as match from FilterLocation C);
	
create view AllCityStateCountry as
select C.match as match
from CityStateCountryCandidates C
	consolidate on C.match;