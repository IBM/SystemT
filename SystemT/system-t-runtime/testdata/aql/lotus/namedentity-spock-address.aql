  
--===========================================================================
-- Sentence annotator
--===========================================================================
create view sentence as
extract 
    split using B.boundary 
        retain right split point
        on B.text
        as sentence
from (
    extract 
        D.text as text,
        regex /(?:(?:[\;\.\?!]+\s)|(\n\s*\n))/ on D.text as boundary 
        from Document D
    having Not(ContainsDict('dictionaries/abbreviations.dict', 
    CombineSpans(LeftContextTok(boundary, 1), boundary)))
) B;

-- ===========================================================================
--   Person, Organization, Places begin here 
-- ===========================================================================
 
create dictionary FilterPersonDict as
(
	'Travel', 'Fellow', 'Sir', 'IBMer', 'Researcher', 'All','Tell',
	'Friends', 'Friend', 'Colleague', 'Colleagues', 'Managers','If',
	'Customer', 'Users', 'User', 'Valued', 'Executive', 'Chairs',
	'New', 'Owner', 'Conference', 'Please', 'Outlook', 'Lotus', 'Notes',
	'This', 'That', 'There', 'Here', 'Subscribers', 'What', 'When', 'Where',
	'With', 'While', 'Thanks', 'Thanksgiving','Senator', 'Platinum',
        'Perspective',
	'Manager', 'Ambassador', 'Professor', 'Dear', 'Contact', 'Cheers',
        'Athelet',
	'And', 'Act', 'But', 'Hello', 'Call', 'From', 'Center', 'The', 'Take',
        'Junior',
	'Both', 'Communities', 'Greetings', 'Hope', 'Restaurants', 'Properties',
	'Let', 'Corp', 'Memorial', 'You', 'Your', 'Our',  'My', 'His','Her',
	'Their','Popcorn', 'Name', 'July', 'June','Join',
	'Business', 'Administrative', 'South', 'Members', 'Address', 'Please',
        'List',
	'Public', 'Inc', 'Parkway', 'Brother', 'Buy', 'Then', 'Services',
        'Statements',
	'President', 'Commissioner', 'Commitment', 'Commits', 'Hey',
	'Director', 'End', 'Exit', 'Experiences', 'Finance', 'Elementary',
        'Wednesday',
	'Nov', 'Infrastructure', 'Inside', 'Convention',
	'Judge', 'Lady', 'Friday',  'Project', 'Projected', 
	'Recalls', 'Regards', 'Recently', 'Administration', 'Independence',
        'Denied',
	'Unfortunately', 'Under', 'Uncle', 'Utility', 'Unlike', 'Was', 'Were',
        'Secretary',
	'Speaker', 'Chairman', 'Consider', 'Consultant', 'County', 'Court',
        'Defensive',
	'Northwestern', 'Place', 'Hi', 'Futures', 'Athlete', 'Invitational',
        'System',
	'International', 'Main', 'Online', 'Ideally'
	-- more entries
	,'If','Our', 'About', 'Analyst', 'On', 'Of', 'By', 'HR', 'Mkt', 'Pre',
        'Post',
	'Condominium', 'Ice', 'Surname', 'Lastname', 'firstname', 'Name',
        'familyname',
	-- Italian greeting
   'Ciao',
   -- Spanish greeting
   'Hola',
   -- French greeting
   'Bonjour'
);

create dictionary GreetingsDict as
( 
   'Hey', 'Hi', 'Hello', 'Dear',
   -- German greetings
   'Liebe', 'Lieber', 'Herr', 'Frau', 'Hallo', 
   -- Italian
   'Ciao',
   -- Spanish
   'Hola',
   -- French
   'Bonjour'
);
 

--  Place rules begin here

 create view CapsPlace as
	select
		R.match as match
	from
		--Regex(/\b\p{Upper}[\p{Lower}\&]{1,20}\b/, DocScan.text) R;
	 	  Regex(/\b\p{Upper}[\p{Lower}\&\.-\/]{1,20}\b/, DocScan.text) R;
	 

 create view CapsPlaceTwo as
	select
 		CombineSpans(cp1.match, cp2.match) as match
	from
		CapsPlace cp1,
		CapsPlace cp2
 	where
		FollowsTok(cp1.match, cp2.match, 0, 0);	
		
  create view CapsPlaceOnetoTwo
	as 
	 (select R.match as match from CapsPlace R)
	union all 
	 (select R.match as match from CapsPlaceTwo R);

/* 
 create view CityNoCase as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/GENERALCITY.dict', DocScan.text) D;
	
 create view City as 
 	select C.match as match 
 	from CityNoCase C
	where 
		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, C.match);
*/
--		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}( \p{Upper}[\p{Lower}\&]{1,20})*$/, C.match);	

create view City as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/GENERALCITY.dict', 'Exact', DocScan.text) D;

/*		
 create view USCityNoCase as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/CITY.dict', DocScan.text) D;
	
 create view USCity as 
 	select C.match as match 
 	from USCityNoCase C
	where 
		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, C.match);			
*/
 create view USCity as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/CITY.dict', 'Exact', DocScan.text) D;	
  
  /*
  create view CountryNoCase as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/COUNTRY.dict', DocScan.text) D;
	
 create view Country as 
 	select C.match as match 
 	from CountryNoCase C
	where 
		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, C.match);		
*/
 create view Country as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/COUNTRY.dict', 'Exact', DocScan.text) D;

		
 create view State  as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/Statelist.dict',  DocScan.text) D;
	
 -- The following do exact dictionary matching may missing entries such as
 'Al', 'Ms'
 -- to avoid false positives in weak rules (e.g. the one w/o zipcode)	
 create view StateStrongAbbrev  as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/Statelist.abbrev.dict',  'Exact', DocScan.text) D;

create view StateWeakAbbrev  as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/Statelist.abbrev.dict',  DocScan.text) D;
		
  create view StateStrongAll
	as
	(select S.match as match from State S)
	union all 
	 (select S.match as match from StateStrongAbbrev S);	
	 
  create view StateWeakAll
	as
	(select S.match as match from State S)
	union all 
	 (select S.match as match from StateWeakAbbrev S);	
	
  create view StreetSuffixNoCase  as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/streetSuffixes.dict',  DocScan.text) D;
	
  create view StreetSuffix as 
 	select S.match as match 
 	from StreetSuffixNoCase S
	where 
		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}.?/, S.match);		
	
  create view StreetSuffixWeakNoCase  as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/streetSuffixesWeak.dict',   DocScan.text) D;
		
	create view StreetSuffixWeak as 
 	select S.match as match 
 	from StreetSuffixWeakNoCase S
	where 
		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, S.match);		
	
   create view StreetSuffixAll
	as
	(select S.match as match from StreetSuffix S)
	union all 
	 (select S.match as match from StreetSuffixWeak S)	;
	
	
  create view SecondaryUnitNoCase  as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/secondaryUnit.dict', DocScan.text) D;   
		
  create view SecondaryUnit as 
 	select S.match as match 
 	from SecondaryUnitNoCase S
	where 
		MatchesRegex(/(\#)|(\p{Upper}[\p{Lower}\&]{1,20})/, S.match);		
		
  create view ClueOf  as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/PLACE_CLUES_OF.dict', 'Exact', DocScan.text) D; 
	
	
	create view CluePNoCase  as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/PLACE_CLUES_P.dict', DocScan.text) D; 
	
	create view ClueP as 
 	select C.match as match 
 	from CluePNoCase C
	where 
		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, C.match);		
	
	
	create view CluePStrong  as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/PLACE_CLUES_P_STRONG.dict',
                'Exact', DocScan.text) D; 
	
	create view Zipcode as
	select
		R.match as match
	from
		Regex(/\b[0-9]{5}(\-[0-9]{4})?\b/, DocScan.text) R;
	 
--	create view ClueSNoCase  as
--	select
--		D.match as match
--	from
--		Dictionary('dictionaries/lotus/PLACE_CLUES_S.dict', DocScan.text) D; 
		
--	create view ClueS as 
-- 	select C.match as match 
-- 	from ClueSNoCase C
--	where 
--		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, C.match);		
		
-- Rule 1

	create view CityState as
	select
 		CombineSpans(C.match, S.match) as match
	from
		USCity C,
		StateStrongAll S
 	where
		FollowsTok(C.match,S.match, 0, 1) and
		ContainsRegex(/^\s*,\s*$/, SpanBetween(C.match,S.match));	
		
-- Rule 3

	create view PlaceOf as
	select
 		CombineSpans(Co.match, CP.match) as match
	from
		ClueOf Co,
		CapsPlaceOnetoTwo CP
 	where
		FollowsTok(Co.match,CP.match, 0, 1) and
		ContainsRegex(/^\s*of\s*$/, SpanBetween(Co.match,CP.match));	
		
-- Rule 6

	create view PStrongTwo as
	select
 		CombineSpans(cp1.match, cp2.match) as match
	from
		CluePStrong cp1,
		CluePStrong cp2
 	where
		FollowsTok(cp1.match, cp2.match, 0, 0);	
		
  create view PStrongOnetoTwo
	as 
	 (select R.match as match from CluePStrong R)
	union all 
	 (select R.match as match from PStrongTwo R);

    create view PStrongTwoCp as
	select
 		CombineSpans(Ps.match, CP.match) as match
	from
		PStrongOnetoTwo Ps,
		CapsPlace CP
 	where
		FollowsTok(Ps.match,CP.match, 0, 0)  ;	
		
-- Rule 6a

	create view PCity as
	select
 		CombineSpans(Ps.match, C.match) as match
	from
		ClueP Ps,
		City C
 	where
		FollowsTok(Ps.match,C.match, 0, 0)  ;	
	
		
-- Rule 4

--streetaddress
    create view NumCP as
	select
		R.match as match
	from
		--Regex(/\b([\d\p{Alpha}\-\,]*\d[\d\p{Alpha}\-\,]*)\s+\p{Upper}[\p{Lower}\&]{1,20}\b/, DocScan.text) R;
	    -- first number should not be 0
		--Regex(/\b([[1-9]\p{Alpha}\-\,]*\d[\d\p{Alpha}\-\,]*)\s+\p{Upper}[\p{Lower}\&]{1,20}\b/, DocScan.text) R;
		-- Allow one optional Symbol in the form of 'W' or 'S.'
		--Regex(/\b([[1-9]\p{Alpha}\-\,]*\d[\d\p{Alpha}\-\,]*)\s+(\p{Upper}\.?\s)?\p{Upper}[\p{Lower}\&]{1,20}\b/, DocScan.text) R;
		-- Allow street name to contain numbers, but only in the format of XXX(st, nd, rd, th)
		Regex(/\b([[1-9]\p{Alpha}\-\,]*\d[\d\p{Alpha}\-\,]*)\s+(\p{Upper}\.?\s)?(\p{Upper}[\p{Lower}\&]{1,20}|\d{1,3}(st|nd|rd|th))\b/, DocScan.text) R;
		
	
	create view StreetAddressStrong as
	select
 		CombineSpans(nc.match, ss.match) as match
	from
		NumCP nc,
		StreetSuffix ss
 	where
		FollowsTok(nc.match,ss.match, 0, 2)  and
		MatchesRegex(/\s*(\p{Upper}[\p{Lower}\&]+\s*){0,3}/, SpanBetween(nc.match,ss.match));
		
	create view StreetAddressAll as
	select
 		CombineSpans(nc.match, ssw.match) as match
	from
		NumCP nc,
		StreetSuffixAll ssw
 	where
		FollowsTok(nc.match,ssw.match, 0, 2)  and
		MatchesRegex(/\s*(\p{Upper}[\p{Lower}\&]+\s*){0,3}/, SpanBetween(nc.match,ssw.match));
	
	create view StreetHighwayAddressAll as
		(select S.match as match from StreetAddressAll S)
		union all
		(select S.match as match from HighwayAddress S);
		
----- highway address
create view NumForHighwayAddress as
	select
		R.match as match
	from
	 	Regex(/\b\d{1,5}-?[A-Z]?\b/, DocScan.text) R;
		
create dictionary HighwayDict as
(
   'Route', 'Rte', 'US', 'Hwy', 'Highway', 'SR'
);

create view HighwayDictionary as 
select D.match as match
from Dictionary('HighwayDict', 'Exact', DocScan.text) D;
	
	
create view HighwayStateDictionary as 
(select R.match as match from HighwayDictionary R)
union all
(select R.match as match from StateStrongAbbrev R);
	
create view HighwayNum as 
select R.match as match
from Regex(/\b\d{1,3}(\s*(N|S|E|W))?(\s*(N|S|E|W))?\b/,DocScan.text) R;

create view HighwayAddressPart as
	select
 		CombineSpans(nc.match, rs.match) as match
	from
		NumForHighwayAddress nc,
		HighwayStateDictionary rs
 	where
		FollowsTok(nc.match,rs.match, 0, 2)  and
		MatchesRegex(/\W+((N|S|E|W)\W+)?/, SpanBetween(nc.match,rs.match));

create view HighwayAddress as
	select
 		CombineSpans(ra.match, hn.match) as match
	from
		HighwayAddressPart ra,
		HighwayNum hn
 	where
		FollowsTok(ra.match,hn.match, 0, 1)  and
		MatchesRegex(/\W+/, SpanBetween(ra.match,hn.match));

		
-- unit
     	
     		
	create view StreetAddressUnit  as
	select
 		CombineSpans(S.match, Su.match) as match
	from
		StreetHighwayAddressAll S,
		SecondaryUnit Su
  	where
		FollowsTok(S.match,Su.match, 0, 2) and
		MatchesRegex(/\s*\d*\s*,?\s*$/, SpanBetween(S.match,Su.match));
			
	create view StreetAddressOptionalUnit
	as
	(select S.match as match from StreetHighwayAddressAll S)
	union all 
	 (select S.match as match from StreetAddressUnit S);
	
	create view StreetAddressWithCity as
	select
 		CombineSpans(S.match, cp.match) as match
	from
		StreetAddressOptionalUnit S,
		CapsPlaceOnetoTwo cp
 	where
		FollowsTok(S.match,cp.match, 0, 5)
--FollowsTok(S.match,cp.match, 0, 3)
--		and
--		MatchesRegex(/\s*,?\s*[\d\p{Alpha}]{1,20}([\.\ \-\,\d\p{Alpha}]{0,10}\s*){0,2},?\s*/, SpanBetween(S.match,cp.match))
		;


--  addresswithstate

    create view StreetAddressWithCityStrongState as
	select
 		CombineSpans(Sawc.match, Sa.match) as match
	from
		StreetAddressWithCity Sawc,
		StateStrongAll Sa
 	where
		FollowsTok(Sawc.match,Sa.match, 0, 1)  and
		MatchesRegex(/\s*,?\s*/, SpanBetween(Sawc.match,Sa.match));
	
	create view StreetAddressWithCityWeakState as
	select
 		CombineSpans(Sawc.match, Sa.match) as match
	from
		StreetAddressWithCity Sawc,
		StateWeakAll Sa
 	where
		FollowsTok(Sawc.match,Sa.match, 0, 1)  and
		MatchesRegex(/\s*,?\s*/, SpanBetween(Sawc.match,Sa.match));
		
	create view StreetAddressWithCityOptionalStrongState
	as
	(select S.match as match from StreetAddressWithCity S)
	union all 
	 (select S.match as match from StreetAddressWithCityStrongState S);
	 
	 create view StreetAddressWithCityOptionalWeakState
	 as
	 (select S.match as match from StreetAddressWithCity S)
	union all 
	 (select S.match as match from StreetAddressWithCityWeakState S);
	 
	create view StreetAddressWithCityOptionalStateZipcode as
	select
 		CombineSpans(Sawcos.match, z.match) as match
	from
		StreetAddressWithCityOptionalWeakState Sawcos,
		Zipcode z
 	where
		FollowsTok(Sawcos.match,z.match, 0, 1)  and
		ContainsRegex(/^\s*,?\s*$/, SpanBetween(Sawcos.match,z.match));
	
	
	-- ===========================================================================
-- >>>>>>>>>>>>>>> Aggregation/Consolidation section <<<<<<<<<<<<<<<<
-- ===========================================================================

-- Merge all the different rules.
create view PlaceAll as
	(select R.match as loc from StreetAddressWithCityOptionalStateZipcode R)
    union all 
 	(select R.match as loc from StreetAddressWithCityStrongState R)
 	union all
 	(select R.match as loc from GermanAddress R);
-- union all 
--	 (select R.match as loc from StreetAddressStrong R)
--  weaker rules begin here	 
-- union all 
-- this rule returns false matches like 09YPO World Terrorism Summit Features Broad Range
--	 (select R.match as loc from  PStrongTwoCp R)
-- union all 
--	 (select R.match as loc from PCity R)
-- union all 
--	 (select R.match as loc from CityState R)
-- union all 
--	 (select R.match as loc from PlaceOf R)
-- union all 
--	 (select R.match as loc from StateAll R)
-- union all 
--	 (select R.match as loc from Country R)
-- union all 
--	 (select R.match as loc from City R)
 
  
-------------------------------
 ---     German Address
 -------------------------------
 create view GermanZipcode as
	select
		R.match as match
	from
		Regex(/\b(D-)?[0-9]{4,5}\b/, DocScan.text) R;
 
 create view GermanCities as
	select
		D.match as match
	from
		Dictionary('dictionaries/lotus/germancities.dict', DocScan.text) D;
	
   create view GermanCityZipcode1 as
	select
 		CombineSpans(GZ.match, GC.match) as match
	from
		GermanZipcode GZ,
		GermanCities GC
 	where
		FollowsTok(GZ.match, GC.match, 0, 2)
		and  MatchesRegex(/\s*,?\s*/, SpanBetween(GZ.match, GC.match));		

	create view GermanCityZipcode2 as
	select
 		CombineSpans(GC.match, GZ.match) as match
	from
		GermanZipcode GZ,
		GermanCities GC
 	where
		FollowsTok(GC.match, GZ.match, 0, 3)
		and  MatchesRegex(/\s*((am Main)|([\-\/]?\p{Lu}\p{M}*(\p{L}\p{M}*)+))?\s*,?\s*/, SpanBetween(GC.match, GZ.match));

	 create view GermanCityZipcode as  
	 (select GCZ1.match as match from GermanCityZipcode1 GCZ1)
 	union all
 	(select GCZ2.match as match from GermanCityZipcode2 GCZ2);

   
-- need to support street numbers such as 1/3
-- allow hyphenated street names in the beginning	
-- allow park/bridge mentions
-- no newline in streetname

create view GermanStreetAddressSuffix1 as
 select R.match as match
 from   Regex(/\b(\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20})?([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]�mme|[Gg]asse|[Gg]aerten|[Gg]�rten|[Hh]alde|[Hh]�fe|[Hh]of|[Hh]oefe|[Ll]andstra�e|[Ll]andstrasse|[Mm]�rkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]l�tze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]tra�e|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)\s*,?\s*([[1-9]\p{L}\p{M}*\-\,])*\d([\d\p{L}\p{M}*\/\-\,])*/, DocScan.text) R ;

create view GermanStreetAddressSuffix2 as
 select R.match as match
 from   Regex(/\b(An [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*(Br�cke|Park|Postfach|Hauptbahnhof)\b\s*,?\s*([[1-9]\p{L}\p{M}*\-\,])*\d([\d\p{L}\p{M}*\/\-\,])*/, DocScan.text) R ;

create view GermanStreetAddressSuffix as
(select R.match as match from GermanStreetAddressSuffix1 R)
union all
(select R.match as match from GermanStreetAddressSuffix2 R);

create view GermanCapsPlace as
select R.match as match
from Regex(/\b\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}/,DocScan.text) R ;

create view GermanCapsPlaceTwo as
select CombineSpans(R1.match,R2.match) as match
from GermanCapsPlace R1, GermanCapsPlace R2
where FollowsTok(R1.match,R2.match,0,1) and
      MatchesRegex(/[ \t]*(\-[ \t]*)?/,SpanBetween(R1.match,R2.match));
      
create view GermanCapsPlaceOneOrTwo as 
(select R.match as match from GermanCapsPlace R)
union all 
(select R.match as match from GermanCapsPlaceTwo R);

create view GermanStreetNameWithSuffix as 
select CombineSpans(R1.match,R2.match) as match
from GermanCapsPlaceOneOrTwo R1, GermanStreetAddressSuffix R2
where FollowsTok(R1.match, R2.match,0,1) and
       MatchesRegex(/[ \t]*(\-[ \t]*)?/,SpanBetween(R1.match,R2.match));

 create view GermanStreetOptionalNameWithSuffix as 
(select R.match as match from GermanStreetNameWithSuffix R)
union all 
(select R.match as match from GermanStreetAddressSuffix R);

create view GermanStreetAddress1 as
select R.match as match
from Consolidate(GermanStreetOptionalNameWithSuffix.match) R;

-- create view GermanStreetAddress1 as
-- select R.match as match
-- from   Regex(/\b\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}[ \t]*(-(\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}-){1,2})?[ \t]*([Aa]n [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]�mme|[Gg]asse|[Gg]aerten|[Gg]�rten|[Hh]alde|[Hh]�fe|[Hh]of|[Hh]oefe|[Ll]andstra�e|[Ll]andstrasse|[Mm]�rkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]l�tze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]tra�e|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)\s*,?\s*([[1-9]\p{L}\p{M}*\-\,])*\d([\d\p{L}\p{M}*\/\-\,])*/, DocScan.text) R ;
 
 create view GermanStreetAddress2 as
 select R.match as match
 from   Regex(/\b([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]�mme|[Gg]asse|[Gg]aerten|[Gg]�rten|[Hh]alde|[Hh]�fe|[Hh]of|[Hh]oefe|[Ll]andstra�e|[Ll]andstrasse|[Mm]�rkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]l�tze|[Pp]laetze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]tra�e|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)[ \t]+([Aa]n [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}\s*,?\s*([[1-9]\p{L}\p{M}*\-\,]*\d[\d\p{L}\p{M}*\/\-\,]*)/, DocScan.text) R ;
 
-- create view GermanStreetAddress3 as
-- select R.match as match
-- from   Regex(/(\b\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}[ \t]*(-(\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}-){1,2})?[ \t]*)?(An [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*(Br�cke|Park|Postfach|Hauptbahnhof)\b\s*,?\s*([[1-9]\p{L}\p{M}*\-\,]*\d[\d\p{L}\p{M}*\/\-\,]*)/, DocScan.text) R ;
 
 create view GermanStreetAddress as 
 
 (select GSA1.match as match from GermanStreetAddress1 GSA1)
 union all
 (select GSA2.match as match from GermanStreetAddress2 GSA2);
  
 create view GermanAddress as
	select
 		CombineSpans(GSA.match, GCZ.match) as match
	from
		GermanCityZipcode GCZ,
		GermanStreetAddress GSA
 	where
		FollowsTok(GSA.match, GCZ.match, 0, 3)
		and  MatchesRegex(/\W*([Gg]ermany|Deutsch\s*[Ll]and)?.{0,5}\W*/, SpanBetween(GSA.match, GCZ.match));		
  
 
create view FinalPlaceConsolidated as
select C.loc as loc
--from Consolidate(PlaceSentence.loc) C;
from Consolidate(PlaceAll.loc) C;
   
	
select P.loc as loc
into Address
-- change output to remove unwanted types
-- from Place P;
from Consolidate('OverlapOrdered',FinalPlaceConsolidated.loc) P;
  
