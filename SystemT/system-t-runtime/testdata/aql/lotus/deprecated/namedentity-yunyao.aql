
create dictionary FilterPersonDict as
(
	'Travel', 'Fellow', 'Sir', 'IBMer', 'Researcher', 'All',
	'Friends', 'Friend', 'Colleague', 'Colleagues', 'Managers',
	'Customer', 'Users', 'User', 'Valued', 'Executive', 'Chairs',
	'New', 'Owner', 'Conference', 'Please', 'Outlook', 'Lotus', 'Notes',
	'This', 'That', 'There', 'Here', 'Subscribers', 'What', 'When', 'Where',
	'With', 'While', 'Thanks', 'Thanksgiving','Senator', 'Platinum',
        'Perspective',
	'Manager', 'Ambassador', 'Professor', 'Dear'
);
 
create view sentence as
extract 
    split using B.boundary 
        retain right split point
        on B.text
        as sentence
from (
    extract 
        D.text as text,
        regex /(?:(?:[\;\.\?!]+\s)|(\n\s*\n))/ on D.text as boundary 
        from Document D
    having Not(ContainsDict('dictionaries/abbreviations.dict', 
    CombineSpans(LeftContextTok(boundary, 1), boundary)))
) B;
 

--  Place rules begin here

 create view CapsPlace as
	select
		R.match as match
	from
		Regex(/\b\p{Upper}[\p{Lower}\&]{1,20}\b/, DocScan.text) R;
	 

 create view CapsPlaceTwo as
	select
 		CombineSpans(cp1.match, cp2.match) as match
	from
		CapsPlace cp1,
		CapsPlace cp2
 	where
		FollowsTok(cp1.match, cp2.match, 0, 0);	
		
  create view CapsPlaceOnetoTwo
	as 
	 (select R.match as match from CapsPlace R)
	union all 
	 (select R.match as match from CapsPlaceTwo R);
 
 create view CityNoCase as
	select
		D.match as match
	from
		Dictionary('dictionaries/sekar/GENERALCITY.dict', DocScan.text) D;
	
 create view City as 
 	select C.match as match 
 	from CityNoCase C
	where 
		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, C.match);
--		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}( \p{Upper}[\p{Lower}\&]{1,20})*$/, C.match);	
		
 create view USCityNoCase as
	select
		D.match as match
	from
		Dictionary('dictionaries/sekar/CITY.dict', DocScan.text) D;
	
 create view USCity as 
 	select C.match as match 
 	from USCityNoCase C
	where 
		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, C.match);			
  
  
  create view CountryNoCase as
	select
		D.match as match
	from
		Dictionary('dictionaries/sekar/COUNTRY.dict', DocScan.text) D;
	
 create view Country as 
 	select C.match as match 
 	from CountryNoCase C
	where 
		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, C.match);		
		
 create view State  as
	select
		D.match as match
	from
		Dictionary('dictionaries/sekar/Statelist.dict',  DocScan.text) D;
		
 create view StateAbbrev  as
	select
		D.match as match
	from
		Dictionary('dictionaries/sekar/Statelist.abbrev.dict',  DocScan.text) D;
		
  create view StateAll
	as
	(select S.match as match from State S)
	union all 
	 (select S.match as match from StateAbbrev S);		
	
  create view StreetSuffixNoCase  as
	select
		D.match as match
	from
		Dictionary('dictionaries/sekar/streetSuffixes.dict',  DocScan.text) D;
	
  create view StreetSuffix as 
 	select S.match as match 
 	from StreetSuffixNoCase S
	where 
		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, S.match);		
	
  create view StreetSuffixWeakNoCase  as
	select
		D.match as match
	from
		Dictionary('dictionaries/sekar/streetSuffixesWeak.dict',   DocScan.text) D;
		
	create view StreetSuffixWeak as 
 	select S.match as match 
 	from StreetSuffixWeakNoCase S
	where 
		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, S.match);		
	
   create view StreetSuffixAll
	as
	(select S.match as match from StreetSuffix S)
	union all 
	 (select S.match as match from StreetSuffixWeak S)	;
	
	
  create view SecondaryUnitNoCase  as
	select
		D.match as match
	from
		Dictionary('dictionaries/sekar/secondaryUnit.dict', DocScan.text) D;   
		
  create view SecondaryUnit as 
 	select S.match as match 
 	from SecondaryUnitNoCase S
	where 
		MatchesRegex(/^(\#)|(\p{Upper}[\p{Lower}\&]{1,20})/, S.match);		
		
  create view ClueOf  as
	select
		D.match as match
	from
		Dictionary('dictionaries/sekar/PLACE_CLUES_OF.dict', 'Exact', DocScan.text) D; 
	
	
	create view CluePNoCase  as
	select
		D.match as match
	from
		Dictionary('dictionaries/sekar/PLACE_CLUES_P.dict', DocScan.text) D; 
	
	create view ClueP as 
 	select C.match as match 
 	from CluePNoCase C
	where 
		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, C.match);		
	
	
	create view CluePStrong  as
	select
		D.match as match
	from
		Dictionary('dictionaries/sekar/PLACE_CLUES_P_STRONG.dict',
                'Exact', DocScan.text) D; 
	
	create view Zipcode as
	select
		R.match as match
	from
		Regex(/\b[0-9]{5}(\-[0-9]{4})?\b/, DocScan.text) R;
	 
--	create view ClueSNoCase  as
--	select
--		D.match as match
--	from
--		Dictionary('dictionaries/sekar/PLACE_CLUES_S.dict', DocScan.text) D; 
		
--	create view ClueS as 
-- 	select C.match as match 
-- 	from ClueSNoCase C
--	where 
--		MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, C.match);		
		
-- Rule 1

	create view CityState as
	select
 		CombineSpans(C.match, S.match) as match
	from
		USCity C,
		StateAll S
 	where
		FollowsTok(C.match,S.match, 0, 1) and
		ContainsRegex(/^\s*,\s*$/, SpanBetween(C.match,S.match));	
		
-- Rule 3

	create view PlaceOf as
	select
 		CombineSpans(Co.match, CP.match) as match
	from
		ClueOf Co,
		CapsPlaceOnetoTwo CP
 	where
		FollowsTok(Co.match,CP.match, 0, 1) and
		ContainsRegex(/^\s*of\s*$/, SpanBetween(Co.match,CP.match));	
		
-- Rule 6

	create view PStrongTwo as
	select
 		CombineSpans(cp1.match, cp2.match) as match
	from
		CluePStrong cp1,
		CluePStrong cp2
 	where
		FollowsTok(cp1.match, cp2.match, 0, 0);	
		
  create view PStrongOnetoTwo
	as 
	 (select R.match as match from CluePStrong R)
	union all 
	 (select R.match as match from PStrongTwo R);

    create view PStrongTwoCp as
	select
 		CombineSpans(Ps.match, CP.match) as match
	from
		PStrongOnetoTwo Ps,
		CapsPlace CP
 	where
		FollowsTok(Ps.match,CP.match, 0, 0)  ;	
		
-- Rule 6a

	create view PCity as
	select
 		CombineSpans(Ps.match, C.match) as match
	from
		ClueP Ps,
		City C
 	where
		FollowsTok(Ps.match,C.match, 0, 0)  ;	
	
		
-- Rule 4

--streetaddress
    create view NumCP as
	select
		R.match as match
	from
		Regex(/\b([\d\p{Alpha}\.\-\,]*\d[\d\p{Alpha}\.\-\,]*)\s*\p{Upper}[\p{Lower}\&]{1,20}\b/, DocScan.text) R;
	
	
	create view StreetAddressStrong as
	select
 		CombineSpans(nc.match, ss.match) as match
	from
		NumCP nc,
		StreetSuffix ss
 	where
		FollowsTok(nc.match,ss.match, 0, 2)  and
		ContainsRegex(/^\s*(\p{Upper}[\p{Lower}\&]+\s*){1,2}$/, SpanBetween(nc.match,ss.match));
		
	create view StreetAddressAll as
	select
 		CombineSpans(nc.match, ssw.match) as match
	from
		NumCP nc,
		StreetSuffixAll ssw
 	where
		FollowsTok(nc.match,ssw.match, 0, 2)  and
		ContainsRegex(/^\s*(\p{Upper}[\p{Lower}\&]+\s*){1,2}$/, SpanBetween(nc.match,ssw.match));
		
-- unit
     	
     		
	create view StreetAddressUnit  as
	select
 		CombineSpans(S.match, Su.match) as match
	from
		StreetAddressAll S,
		SecondaryUnit Su
  	where
		FollowsTok(S.match,Su.match, 0, 1) and
		ContainsRegex(/^\s*,?\s*$/, SpanBetween(S.match,Su.match));
			
	create view StreetAddressOptionalUnit
	as
	(select S.match as match from StreetAddressAll S)
	union all 
	 (select S.match as match from StreetAddressUnit S)	;
	
	create view StreetAddressWithCity as
	select
 		CombineSpans(S.match, cp.match) as match
	from
		StreetAddressOptionalUnit S,
		CapsPlaceOnetoTwo cp
 	where
		FollowsTok(S.match,cp.match, 0, 4) and
		ContainsRegex(/^\s*[\d\p{Alpha}]{1,20}[\.\ \-\,\d\p{Alpha}]{0,10}\s*,?\s*$/, SpanBetween(S.match,cp.match));


--  addresswithstate

    create view StreetAddressWithCityState as
	select
 		CombineSpans(Sawc.match, Sa.match) as match
	from
		StreetAddressWithCity Sawc,
		StateAll Sa
 	where
		FollowsTok(Sawc.match,Sa.match, 0, 1)  and
		MatchesRegex(/\s*,?\s*/, SpanBetween(Sawc.match,Sa.match));
		
		
	create view StreetAddressWithCityOptionalState
	as
	(select S.match as match from StreetAddressWithCity S)
	union all 
	 (select S.match as match from StreetAddressWithCityState S);
	 
	create view StreetAddressWithCityOptionalStateZipcode as
	select
 		CombineSpans(Sawcos.match, z.match) as match
	from
		StreetAddressWithCityOptionalState Sawcos,
		Zipcode z
 	where
		FollowsTok(Sawcos.match,z.match, 0, 1)  and
		ContainsRegex(/^\s*,?\s*$/, SpanBetween(Sawcos.match,z.match));
	
	
	-- ===========================================================================
-- >>>>>>>>>>>>>>> Aggregation/Consolidation section <<<<<<<<<<<<<<<<
-- ===========================================================================

-- Merge all the different rules.
create view PlaceAll
as
	(select R.match as loc from StreetAddressWithCityOptionalStateZipcode R)
union all 
	 (select R.match as loc from StreetAddressWithCityOptionalState R)
 union all 
	 (select R.match as loc from StreetAddressStrong R)
-- union all 
-- this rule returns false matches like 09YPO World Terrorism Summit Features Broad Range
--	 (select R.match as loc from  PStrongTwoCp R)
-- union all 
--	 (select R.match as loc from PCity R)
-- union all 
--	 (select R.match as loc from CityState R)
-- union all 
--	 (select R.match as loc from PlaceOf R)
-- union all 
--	 (select R.match as loc from StateAll R)
-- union all 
--	 (select R.match as loc from Country R)
-- union all 
--	 (select R.match as loc from City R)
   ;
 
 
create view PlaceSentence as
	select PA.loc	as loc	 
	from
		sentence S, PlaceAll PA
	where
		Contains(S.sentence, PA.loc) and
		Not(ContainsDict('FilterPersonDict', PA.loc));				 
 
-- -----------------------------------------
-- Organization rules begin here
-- ----------------------------------------- 
  

--===================================================================
--        List of Dictionaries
--===================================================================

-- Find dictionary matches for all organization names
create view Org as
select D.match as annot
from   Dictionary('dictionaries/ORGANIZATION.FULL.dict', DocScan.text) D
where  MatchesRegex(/\p{Upper}[\w\&\.\-\, ]+/, D.match);

-- Find dictionary matches for all strong clues for suffix of organization names
create view OrgStrongSuffix as
select D.match as annot
from   Dictionary('dictionaries/ORGANIZATION.CLUE.STRONG.SUFFIX.dict', DocScan.text) D
where  MatchesRegex(/\p{Upper}[\p{Lower}\&\.\-\, ]+/, D.match);

-- Find dictionary matches for all strong clues for suffix of organization names
create view OrgStrongInd as
select D.match as annot
from   Dictionary('dictionaries/ORGANIZATION.CLUE.STRONG.IND.dict', DocScan.text) D
where  MatchesRegex(/\p{Upper}[\p{Lower}\&\.\-\, ]+/, D.match);

-- Find all strong clues by unioning matches for the above two dictionaries
-- Corresponding to ORGANIZATION:CLUE:STRONG in the original annotator
create view OrgStrongClue as 
       (select OrgStrongSuffix.annot as annot from OrgStrongSuffix)
union all
       (select OrgStrongInd.annot as annot from OrgStrongInd);

-- Find dictionary matches for words that may be used to connect names of organizations
create view OrgCC as
select D.match as annot
from   Dictionary('dictionaries/ORG.CC.dict', DocScan.text) D;


-- Find dictionary matches for preposition that may be used to connect names of organizations
create view OrgPrep as
select D.match as annot
from   Dictionary('dictionaries/ORG.PREP.dict', DocScan.text) D;

-- Create dictionary 'The'
create dictionary The as
(
	'the'
);


-- Find dictionary matches for preposition that may be used to connect names of organizations
create view The as
select D.match as annot
from   Dictionary('The', DocScan.text) D;

--=========================================================
-- List of common regular expression matches
--=========================================================
-- Find all the capitalized words that may be organization names
-- Translated from
-------------------------------------------------------------------------
--   <definition name=CAPSORG>\p{Upper}[\p{Lower}\&\.\-\, ]+</definition>
-------------------------------------------------------------------------
-- removed space from origianl regular expression
create view CapsOrg as
select R.match as annot
from   Regex(/\p{Upper}[\p{Lower}\&\.\-\,]+/, DocScan.text) R;

-- Find all dotcom names
-- Translated from
-------------------------------------------------------------------------
-- <definition name=DOTCOM>[\w\&\-]+\.com</definition>
-------------------------------------------------------------------------
create view DotCom as
select R.match as annot
from   Regex(/[\w\&\-]+\.com/, DocScan.text) R;

--===============================================================
-- List of rules for finding organization names
--===============================================================
-- Rule 1
/*
<rule annotation=Organization id=1>
<internal>
<token attribute={etc}ORGANIZATION:FULL{etc}>CANYWORD</token>
<token attribute={etc}>CAPSORG</token>{0,2}
<token attribute={etc}ORGANIZATION:CLUE:STRONG{etc}>CAPSORG</token>
</internal>
</rule>
*/

create view OrgRule_1 as
	select
		CombineSpans(O.annot, OSC.annot) as org
	from
		Org O,
		OrgStrongClue OSC
	where
		FollowsTok(O.annot, OSC.annot, 0, 2)
		and MatchesRegex(/\s+(\p{Upper}[\p{Lower}\&\.\-\, ]+\s+){0,2}/, 
			SpanBetween(O.annot, OSC.annot));
		

-- Rule 2
/*
<rule annotation=Organization id=2>
<internal>
<token attribute={etc}>CAPSORG</token>{1,2}
<token attribute={etc}ORG:CC{etc}>WORD</token>
<token attribute={etc}>CAPSORG</token>{0,2}
<token attribute={etc}ORGANIZATION:CLUE:STRONG{etc}>CAPSORG</token>
<token attribute={etc}ORG:PREP{etc}>WORD</token>
<token attribute={etc}>CAPSORG</token>{1,2}
</internal>
</rule>
*/
create view OrgRule_2 as
	select
		CombineSpans(CO1.annot, CO2.annot) as org
	from
	    CapsOrg CO1,
		OrgCC OC,
		OrgStrongClue OSC,
		OrgPrep OP,
		CapsOrg CO2
	where
	    FollowsTok(CO1.annot, OC.annot, 0, 1)
		and MatchesRegex(/\s+(\p{Upper}[\p{Lower}\&\.\-\, ]+\s+){0,1}/, 
			SpanBetween(CO1.annot, OC.annot))
		and FollowsTok(OC.annot, OSC.annot, 0, 2)
		and MatchesRegex(/\s+(\p{Upper}[\p{Lower}\&\.\-\, ]+\s+){0,2}/, 
			SpanBetween(OC.annot, OSC.annot))
		and FollowsTok(OSC.annot, OP.annot, 0, 0)
		and FollowsTok(OP.annot, CO2.annot, 0, 1)
		and MatchesRegex(/\s+(\p{Upper}[\p{Lower}\&\.\-\, ]+\s+){0,1}/, 
			SpanBetween(OP.annot, CO2.annot));	


-- Rule 5
/*
<rule annotation=Organization id=5>
<internal>
<token attribute={etc}>The</token>?
<token attribute={etc}>CAPSORG</token>{0,2}
<token attribute={etc}ORGANIZATION:CLUE:STRONG{etc}>CAPSORG</token>
<token attribute={etc}ORG:PREP{etc}>WORD</token>
<token attribute={etc}>CAPSORG</token>{1,2}
<token attribute={etc}ORG:CC{etc}>WORD</token>
<token attribute={etc}>CAPSORG</token>{1,2}
</internal>
</rule>
*/
create view OrgRule_5_no_the_no_firstcap as
    select
		CombineSpans(OSC.annot, CO.annot) as org
	from
	    OrgStrongClue OSC,
		OrgPrep OP,
		OrgCC OC,
		CapsOrg CO
	where
	    FollowsTok(OSC.annot, OP.annot, 0, 0)
		and FollowsTok(OP.annot, OC.annot, 1, 2)
		and MatchesRegex(/\s+(\p{Upper}[\p{Lower}\&\.\-\, ]+\s+){1,2}/, 
			SpanBetween(OP.annot, OC.annot))	
		and FollowsTok(OC.annot, CO.annot, 0, 1)
		and MatchesRegex(/\s+(\p{Upper}[\p{Lower}\&\.\-\, ]+\s+){0,1}/, 
			SpanBetween(OC.annot, CO.annot));	
    
create view OrgRule_5_no_the_with_firstcap as
     select
         CombineSpans(CO.annot, O.org) as org
     from 
         CapsOrg CO,
         OrgRule_5_no_the_no_firstcap O
     where 
         FollowsTok(CO.annot, O.org, 0, 1)
         and MatchesRegex(/\s+(\p{Upper}[\p{Lower}\&\.\-\, ]+\s+){0,1}/, 
			SpanBetween(CO.annot, O.org));

create view OrgRule_5_no_the_all as
     (select O.org as org from OrgRule_5_no_the_with_firstcap O)
union all 
     (select O.org as org from OrgRule_5_no_the_no_firstcap O);

create view OrgRule_5_no_the as
     select C.org as org 
     from Consolidate(OrgRule_5_no_the_all.org) C;
          
-- Rule 7a
/*
<rule annotation=Organization id=7>
<internal>
<token attribute={etc}>The</token>?
<token attribute={etc}>CAPSORG</token>{1,2}
<token attribute={etc}ORGANIZATION:CLUE:STRONG{etc}>CAPSORG</token>
<token attribute={etc}ORG:PREP{etc}>WORD</token>
<token attribute={etc}>CAPSORG</token>{1,2}
</internal>
</rule>
*/
create view OrgRule_7a_no_the as
    select
		CombineSpans(CO1.annot, CO2.annot) as org
	from
	    CapsOrg CO1,
	    OrgStrongClue OSC,
		OrgPrep OP,
		CapsOrg CO2
	where
	    FollowsTok(CO1.annot, OSC.annot, 0, 1)
		and MatchesRegex(/\s+(\p{Upper}[\p{Lower}\&\.\-\, ]+\s+){1,2}/, 
			SpanBetween(CO1.annot, OSC.annot))
		and FollowsTok(OSC.annot, OP.annot, 0, 0)
		and FollowsTok(OP.annot, CO2.annot, 0, 1)
		and MatchesRegex(/\s+(\p{Upper}[\p{Lower}\&\.\-\, ]+\s+){0,1}/, 
		    SpanBetween(OP.annot, CO2.annot));

-- Rule 7b (Rule 9?)
/*
<rule annotation=Organization id=7>
<internal>
<token attribute={etc}>The</token>?
<token attribute={etc}>CAPSORG</token>{1,3}
<token attribute={etc}>,</token>?
<token attribute={etc}ORGANIZATION:CLUE:STRONG:SUFFIX{etc}>CAPSORG</token>
</internal>
</rule>
*/
create view OrgRule_7b_no_the as
    select
		CombineSpans(CO.annot, OSS.annot) as org
	from
	    CapsOrg CO,
	    OrgStrongSuffix OSS
	where
	    FollowsTok(CO.annot, OSS.annot, 0, 2)
		and MatchesRegex(/\s+(\p{Upper}[\p{Lower}\&\.\-\, ]+\s+){0,2},?/, 
			SpanBetween(CO.annot, OSS.annot));	




    
-- Rule 10
-- Examples:
--          the Canadian Power Books
--          the the Interstate Natural Gas
/*
<rule annotation=Organization id=10>
<internal>
<token attribute={etc}>The</token>?
<token attribute={etc}>CAPSORG</token>{1,3}
<token attribute={etc}ORGANIZATION:CLUE:STRONG:IND{etc}>CAPSORG</token>
</internal>
</rule>
*/

/*
create view OrgRule_10 as
    select
		CombineSpans(T.annot, OSI.annot) as org
	from
	    The T,
	    OrgStrongInd OSI
	where
	    FollowsTok(T.annot, OSI.annot, 1, 3)
		and MatchesRegex(/\s+(\p{Upper}[\p{Lower}\&\.\-\, ]+\s+){1,3}/, 
			SpanBetween(T.annot, OSI.annot));	
*/

create view OrgRule_10_no_the as
    select
		CombineSpans(CO.annot, OSI.annot) as org
	from
	    CapsOrg CO,
	    OrgStrongInd OSI
	where
	    FollowsTok(CO.annot, OSI.annot, 0, 2)
		and MatchesRegex(/\s+(\p{Upper}[\p{Lower}\&\.\-\, ]+\s+){0,2},?/, 
			SpanBetween(CO.annot, OSI.annot));

-- Rule 5 to 10
create view OrgRules_5_to_10_no_the as
    (select O.org as org from OrgRule_5_no_the O)
union all
    (select O.org as org from OrgRule_7a_no_the O)
union all
    (select O.org as org from OrgRule_7b_no_the O)
union all
    (select O.org as org from OrgRule_10_no_the O);


--add optional 'the'
create view OrgRules_5_to_10_with_the as
   select
       CombineSpans(T.annot, O.org) as org
       from 
           The T,
           OrgRules_5_to_10_no_the O
       where 
           FollowsTok(T.annot, O.org, 0, 0);
           

create view OrgRules_5_to_10 as
    (select O.org as org from OrgRules_5_to_10_no_the O)
union all
    (select O.org as org from OrgRules_5_to_10_with_the O);

-- Rule 11
-- The following rule has already been covered by the dictionary matches Org
/*
<rule annotation=Organization id=11>
<internal>
<token attribute={etc}ORGANIZATION:FULL{etc}>CANYWORD</token>
</internal>
</rule>
*/

-- Rule 12
-- The following rule has already been covered by the regular expression matches DotCom
/*
<rule annotation=Organization id=12>
<internal>
<token attribute={etc}DOTCOM{etc}>ANYWORD</token>
</internal>
</rule>



*/

-- ===========================================================================
-- >>>>>>>>>>>>>>> Aggregation/Consolidation section <<<<<<<<<<<<<<<<
-- ===========================================================================

-- Merge all the different rules.
create view OrgAll as
	(select O.org as org from OrgRule_1 O)
union all
    (select O.org as org from OrgRule_2 O)
union all
    (select O.org as org from OrgRules_5_to_10 O)
union all
    (select O.annot as org from Org O)
union all
    (select O.annot as org from DotCom O);

-- ------------------------------------------
create view OrgSentence as
select C.org as org
from   OrgAll C,
     sentence S
where Contains(S.sentence, C.org);  
  
  
-- -----------------------------------------
-- Person rules begin here
-- ----------------------------------------- 
  
create dictionary InitialDict as
(
	'rev.', 'col.', 'reverend', 'prof.', 'professor.', 
	'lady', 'miss.', 'mrs.', 'mrs', 'mr.', 'pt.', 'ms.',
	'messrs.', 'dr.', 'master.', 'marquis', 'monsieur',
	'ds', 'junior', 'di', 'Dear', 'Name:'
);

-- Find dictionary matches for all title initials
create view Initial as
select D.match as initial
--from   Dictionary('dictionaries/INITIAL.yunyao.dict', DocScan.text) D;
from   Dictionary('InitialDict', DocScan.text) D;

-- Find capitalized words that look like person names and not in the non-name dictionary
create view CapsPerson as
select R.match as name
from   Regex(/\b\p{Upper}\p{Lower}[\p{Alpha}]{1,20}\b/, DocScan.text) R
--where  Not(ContainsDict('dictionaries/FILTER.PERSON.yunyao.Dict', R.match));
where  Not(ContainsDict('FilterPersonDict', R.match));

-- Find dictionary matches for all last names
create view LastName as
select D.match as lastname
from   Dictionary('dictionaries/PERSON.ST.LNAME.yunyao.dict', DocScan.text) D
where  MatchesRegex(/\p{Upper}\p{Lower}[\p{Alpha}]{1,20}/, D.match);	

-- Find dictionary matches for all first names
create view FirstName as
select D.match as firstname
from   Dictionary('dictionaries/PERSON.ST.FNAME.yunyao.dict', DocScan.text) D
where  MatchesRegex(/\p{Upper}\p{Lower}[\p{Alpha}]{1,20}/, D.match);	

-- Combine all dictionary matches for both last names and first names
create view PersonDict as
     (select LN.lastname as name from LastName LN)
union all 
     (select FN.firstname as name from FirstName FN);


-- Find initial words 
create view InitialWord as
select R.match as word
from Regex(/\b([\p{Upper}]\.\s*){1,5}/, DocScan.text) R;

--==========================================================
-- Actual Rules
--==========================================================

/**
 * Translation for Rule 1
 * Handles names of persons like Mr. Vladimir E. Putin
 */
/*
<rule annotation=Person id=1>
<token attribute={etc}INITIAL{etc}>CANYWORD</token>
<internal>
<token attribute={etc}>CAPSPERSON</token>
<token attribute={etc}>INITIALWORD</token>
<token attribute={etc}>CAPSPERSON</token>
</internal>
</rule>
*/
 
 create view Person1 as
 select CombineSpans(CP1.name, CP2.name) as person
 from   Initial I,
        CapsPerson CP1,
        InitialWord IW,
        CapsPerson CP2
 where  FollowsTok(I.initial, CP1.name, 0, 0)
   and  FollowsTok(CP1.name, IW.word, 0, 0)
   and  FollowsTok(IW.word, CP2.name, 0, 0);
 
/**
 * Translation for Rule 1a
 * Handles names of persons like Mr. Vladimir Putin
 */
/* 
<rule annotation=Person id=1a>
<token attribute={etc}INITIAL{etc}>CANYWORD</token>
<internal>
<token attribute={etc}>CAPSPERSON</token>{1,3}
</internal>
</rule>*/


 create view Person1a as
 select CP1.name as person
 from   Initial I,
        CapsPerson CP1
 where  FollowsTok(I.initial, CP1.name, 0, 0);

/**
 * Translation for Rule 3
 * Find person names  like Thomas B.M. David
 */
 /*
<rule annotation=Person id=3>
<internal>
<token attribute={etc}PERSON{etc}>CAPSPERSON</token>
<token attribute={etc}>INITIALWORD</token>
<token attribute={etc}PERSON{etc}>CAPSPERSON</token>
</internal>
</rule>*/

 create view Person3 as
 select CombineSpans(P1.name, P2.name) as person
 from   PersonDict P1,
        InitialWord IW,
        PersonDict P2
 where  FollowsTok(P1.name, IW.word, 0, 0)
   and  FollowsTok(IW.word, P2.name, 0, 0);
 
 /**
 * Translation for Rule 3r1
 * 
 * This relaxed version of rule '3' will find person names  like Thomas B.M. David
 * But it only insists that the first word is in the person dictionary
 */
 /*
<rule annotation=Person id=3r1>
<internal>
<token attribute={etc}PERSON:ST:FNAME{etc}>CAPSPERSON</token>
<token attribute={etc}>INITIALWORD</token>
<token attribute={etc}>CAPSPERSON</token>
</internal>
</rule>
*/

create view Person3r1 as
 select CombineSpans(FN.firstname, CP.name) as person
 from   FirstName FN,
        InitialWord IW,
        CapsPerson CP
 where  FollowsTok(FN.firstname, IW.word, 0, 0)
   and  FollowsTok(IW.word, CP.name, 0, 0);

/**
 * Translation for Rule 3r2
 * 
 * This relaxed version of rule '3' will find person names  like Thomas B.M. David
 * But it only insists that the second word is in the person dictionary
 */
/*
<rule annotation=Person id=3r2>
<internal>
<token attribute={etc}>CAPSPERSON</token>
<token attribute={etc}>INITIALWORD</token>
<token attribute={etc}PERSON:ST:LNAME{etc}>CAPSPERSON</token>
</internal>
</rule>*/

create view Person3r2 as
select CombineSpans(CP.name, LN.lastname) as person
from   LastName LN,
       InitialWord IW,
       CapsPerson CP
where  FollowsTok(CP.name, IW.word, 0, 0)
  and  FollowsTok(IW.word, LN.lastname, 0, 0);

/**
 * Translation for Rule 4
 *
 * This rule will find person names  like David Thomas
 */
 /*
 <rule annotation=Person id=4>
<internal>
<token attribute={etc}PERSON:ST:FNAME{etc}>CAPSPERSON</token>
<token attribute={etc}PERSON:ST:LNAME{etc}>CAPSPERSON</token>
</internal>
</rule>
*/
create view Person4 as
select CombineSpans(FN.firstname, LN.lastname) as person
from   FirstName FN,
       LastName LN
where  FollowsTok(FN.firstname, LN.lastname, 0, 0); 

/**
 * Translation for Rule4a
 * This rule will find person names  like Thomas, David
 */
 /*
<rule annotation=Person id=4a>
<internal>
<token attribute={etc}PERSON:ST:LNAME{etc}>CAPSPERSON</token>
<token attribute={etc}>\,</token>
<token attribute={etc}PERSON:ST:FNAME{etc}>CAPSPERSON</token>
</internal>
</rule>
 */
create view Person4a as
select CombineSpans(FN.firstname, LN.lastname) as person
from   FirstName FN,
       LastName LN
where  FollowsTok(FN.firstname, LN.lastname, 0, 1)
 and   MatchesRegex(/\s*,\s*/,SpanBetween(FN.firstname, LN.lastname)); 

/**
 * Translation for Rule2
 *
 * This rule will handles names of persons like B.M. Thomas David, where Thomas occurs in some person dictionary
 */
 /*
<rule annotation=Person id=2>
<internal>
<token attribute={etc}>INITIALWORD</token>
<token attribute={etc}PERSON{etc}>CAPSPERSON</token>
<token attribute={etc}>CAPSPERSON</token>
</internal>
</rule>
*/

create view Person2 as
select CombineSpans(IW.word, CP.name) as person
from   InitialWord IW,
       PersonDict P,
       CapsPerson CP
where  FollowsTok(IW.word, P.name, 0, 0)
  and  FollowsTok(P.name, CP.name, 0, 0);

/**
 * Translation for Rule 2a
 *
 * The rule handles names of persons like B.M. Thomas David, where David occurs in some person dictionary
 */
/*
<rule annotation=Person id=2a>
<internal>
<token attribute={etc}>INITIALWORD</token>
<token attribute={etc}>CAPSPERSON</token>
<token attribute={etc}>NEWLINE</token>?
<token attribute={etc}PERSON{etc}>CAPSPERSON</token>
</internal>
</rule>
*/

create view Person2a as
select CombineSpans(IW.word, P.name) as person
from   InitialWord IW,
	   CapsPerson CP,
       PersonDict P
where  FollowsTok(IW.word, CP.name, 0, 0)
  and  FollowsTok(CP.name, P.name, 0, 0);


/**
 * Translation for Rule 4r1
 * This relaxed version of rule '4' will find person names  Thomas, David
 * But it only insists that the FIRST word is in some person dictionary
 */
/*
<rule annotation=Person id=4r1>
<internal>
<token attribute={etc}PERSON:ST:FNAME{etc}>CAPSPERSON</token>
<token attribute={etc}>NEWLINE</token>?
<token attribute={etc}>CAPSPERSON</token>
</internal>
</rule>
*/
create view Person4r1 as
select CombineSpans(FN.firstname, CP.name) as person
from   FirstName FN,
	   CapsPerson CP
where  FollowsTok(FN.firstname, CP.name, 0, 0);
  

/**
 * Translation for Rule 4r2
 *
 * This relaxed version of rule '4' will find person names  Thomas, David
 * But it only insists that the SECOND word is in some person dictionary
 */
 /*
<rule annotation=Person id=4r2>
<token attribute={etc}>ANYWORD</token>
<internal>
<token attribute={etc}>CAPSPERSON</token>
<token attribute={etc}>NEWLINE</token>?
<token attribute={etc}PERSON:ST:LNAME{etc}>CAPSPERSON</token>
</internal>
</rule>
*/
create view Person4r2 as
select CombineSpans(CP.name, LN.lastname) as person
from   CapsPerson CP,
       LastName LN
where  FollowsTok(CP.name, LN.lastname, 0, 0);


/**
 * Translation for Rule 5
 *
 * This rule will find other single token person first names
 */
 /* 
<rule annotation=Person id=5>
<internal>
<token attribute={etc}>INITIALWORD</token>?
<token attribute={etc}PERSON:ST:FNAME{etc}>CAPSPERSON</token>
</internal>
</rule>
*/
create view Person5 as
select CombineSpans(IW.word, FN.firstname) as person
from   InitialWord IW,
       FirstName FN
where  FollowsTok(IW.word, FN.firstname, 0, 0);


/**
 * Translation for Rule 6
 *
 * This rule will find other single token person last names
 */
 /* 
<rule annotation=Person id=6>
<internal>
<token attribute={etc}>INITIALWORD</token>?
<token attribute={etc}PERSON:ST:LNAME{etc}>CAPSPERSON</token>
</internal>
</rule>
*/

create view Person6 as
select CombineSpans(IW.word, LN.lastname) as person
from   InitialWord IW,
       LastName LN
where  FollowsTok(IW.word, LN.lastname, 0, 0);

--==========================================================
-- End of rules
--
-- Create final list of names based on all the matches extracted
--
--==========================================================
/**
 * Union all the person names identified by the above rules
 */
create view PersonAll as
--	select P.person as person from Person4r2 P;
    (select P.person as person from Person1 P)
union all  
    (select P.person as person from Person1a P)
union all  
    (select P.person as person from Person3 P)
union all  
    (select P.person as person from Person3r1 P)
union all  
    (select P.person as person from Person3r2 P)
union all  
    (select P.person as person from Person4 P)
union all  
    (select P.person as person from Person4a P)
union all  
    (select P.person as person from Person2 P)
union all  
    (select P.person as person from Person2a P)
union all  
    (select P.person as person from Person4r1 P)
union all  
    (select P.person as person from Person4r2 P)
union all  
    (select P.person as person from Person5 P)
union all  
    (select P.person as person from Person6 P)
union all
    (select P.firstname as person from FirstName P)
union all
    (select P.lastname as person from LastName P);
  
/**
 * Keep only names in the same sentence
 */
create view PersonSentence as
select PA.person as person
from PersonAll PA,
     sentence S
where Contains(S.sentence, PA.person);  
 
		
-- ------------------------------------------
-- Consolidation:
-- For now, we just remove annotations that are completely
-- contained within other annotations.

create view PlaceConsolidated as
select C.loc as loc
from Consolidate(PlaceSentence.loc) C;

create view OrgWithinPlace as
select O.org as org
from OrgSentence O, PlaceConsolidated Pl
where Contains (Pl.loc, O.org);

create view ValidOrg as 
	(select O.org as org from OrgSentence O)
	minus
	(select OP.org as org from OrgWithinPlace OP);

create view OrgConsolidated as
select C.org as org
--from Consolidate(OrgSentence.org) C;
from Consolidate(ValidOrg.org) C;

create view PersonWithinOrg as
select PS.person as person
from PersonSentence PS, OrgConsolidated O
where Contains (O.org, PS.person);

create view ValidPersonTemp as 
	(select P.person as person from PersonSentence P)
	minus
	(select P1.person as person from PersonWithinOrg P1);

create view PersonWithinPlace as
select PT.person as person
from ValidPersonTemp PT, PlaceConsolidated Pl
where Contains (Pl.loc, PT.person);

create view ValidPerson as 
	(select P.person as person from ValidPersonTemp P)
	minus
	(select P1.person as person from PersonWithinPlace P1);

create view PersonConsolidated as
select C.person as person
--from Consolidate(PersonSentence.person) C;
from Consolidate(ValidPerson.person) C;

-- ===========================================================================
-- >>>>>>>>>>>>>>> Output section <<<<<<<<<<<<<<<<
-- ===========================================================================		
-- Output
select P.loc as loc
into Place
from PlaceConsolidated P;
 
	
select O.org as org
into Organization
from OrgConsolidated O;


select P.person as person
into Person
from PersonConsolidated P;

		
