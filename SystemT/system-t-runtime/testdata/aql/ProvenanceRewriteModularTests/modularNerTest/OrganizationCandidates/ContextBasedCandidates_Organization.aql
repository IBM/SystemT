module OrganizationCandidates;

-- Capture <Org>( <Abbrv> )
-- E.g., "banned Algerian Islamic Salvation Front ( [FIS] )"
--       "Federal Securities Corporation ( [FFK] )"

create view OrgAbbrevFormal as
extract regex /\(\s*(\p{Lu}\p{M}*(\p{L}\p{M}*)+)\s*\)/ on 3 tokens in O.rc
	return group 1 as org
from
(
	select RightContextTok(O.org, 3) as rc
	from FinalOrgConsolidated O
) O
having Not(MatchesDict('FiltersForOrganizationAll', org));

-- AnyCapsOrg extended to right with -CapsToken
-- E.g., [Bre-]X -> [Bre-X]
create view AnyCapsOrgWithDash as
select CombineSpans(CW.match, RightContextTok(CW.match,1)) as match
from AnyCapsOrg CW
where MatchesRegex(/[^-]+-/, CW.match)
  and MatchesRegex(/\p{Lu}\p{M}*.*/, RightContextTok(CW.match,1));


create view AnyCapsOrgExtended as
(select * from AnyCapsOrg)
union all
(select * from AnyCapsOrgWithDash);

-- Find blocks of 1 to 5 caps words
create view CapsWordOnetoFive as
extract pattern (<CW.match>|<IW.word>|'&'|'-'){1,5} as match
	with inline_match on DocumentText.text
from AnyCapsOrgExtended CW, InitialWord IW
-- do not allow matches that start with & or -
having MatchesRegex(/\p{L}\p{M}*.+/, match);


create view RightClue5 as
extract 
	dictionary 'PositiveCluesForOrganizationWithinFiveTokensToRight' on D.text as match 
from DocumentText D;

  
create view OrgAdditional5Cand as
	extract pattern (<O.match> ) <C.match>
		return group 1 as match
	from RightClue5 C, CapsWordOnetoFive O
	having 
	       Or( 
	           MatchesRegex(/[\n\r]+/, LeftContext(match,10)),
	           MatchesRegex(/[-]{2}\s*/, LeftContext(match,3)),
	           MatchesRegex(/\s*(RTRS)\s*[-]\s*/, LeftContextTok(match,10))
	         )
	   and Not(ContainsDict('PositiveCluesForOrganizationWithinFiveTokensToRight', match))
	   and Not(ContainsDict('NegativeCluesForOrganizationWithinFiveTokens', match))
	   and Not(ContainsDict('WorldNationalities', match))
	   and Not(ContainsDict('WorldCountries', match))
	   and Not(MatchesDict('WorldCapitals', match))
consolidate on match;


create view LeftClue9Single as
extract 
	dictionaries 'SingularPositiveCluesForOrganizationWithinNineTokenstoLeft' 
	         and 'PluralPositiveCluesForOrganizationWithinNineTokenstoLeft'
	         on D.text as match 
from DocumentText D
-- require that the clue is not in AllCaps
having 
	MatchesRegex(/[\p{Ll}\p{M}* ]+/, match)
   -- require that the clue <group> to be lower case
   and Not(MatchesDict('PositiveCluesForOrganizationWithinNineTokenstoLeft', 'Exact', match));
   
create view LeftClue9Plural as
extract 
	dictionary 'PluralPositiveCluesForOrganizationWithinNineTokenstoLeft'
	         on D.text as match 
from DocumentText D
-- require that the clue is not in AllCaps
having Not(MatchesRegex(/[\p{Lu}\p{M}* ]+/, match));

create view OrgAdditional9Single as
select O.org as org
from
(
	extract pattern  <C.match> ('--')? (<O.match> )
		return group 0 as match
		   and group 2 as org
		with inline_match on DocumentText.text
	from LeftClue9Single C, CapsWordOnetoFive O
	having Not(ContainsRegex(/[\n\r]/, match))
	consolidate on match
) O
where Not(MatchesDict('WorldCountries', O.org))
  and Not(MatchesDict('WorldNationalities', O.org))
  and Not(MatchesDict('NegativeCluesForOrganizationWithinNineTokens', O.org));
  
  
create view OrgAdditional9PluralList as
select O.orgList as orgList
from
(
	extract pattern  <O.org>  ((('and'|',') <CW.match> ){1,3})
		return group 0 as match
		   and group 1 as orgList
		   with inline_match on DocumentText.text
	from OrgAdditional9Single O, CapsWordOnetoFive CW
	having ContainsDict('PluralPositiveCluesForOrganizationWithinNineTokenstoLeft', LeftContextTok(match, 1))
	consolidate on match
) O;

create view OrgAdditional9Plural as
select CW.match as org
from CapsWordOnetoFive CW, OrgAdditional9PluralList O
where Contains(O.orgList, CW.match)
  and Not(ContainsDict('WorldCountries', CW.match))
  and Not(ContainsDict('WorldNationalities', CW.match));

create view LeftClue10 as
extract 
	dictionary 'PositiveCluesForOrganizationWithinTenTokensToLeft'
	         on D.text as match 
from DocumentText D
-- avoid clues in title
having Not(MatchesRegex(/[\p{Lu}\p{M}* ]+/, match));

create view OrgAdditional10 as
select O.org as org
from
(
	extract pattern  <C.match> (<O.match> )
		return group 0 as match
		   and group 1 as org
	from LeftClue10 C, CapsWordOnetoFive O
	having Not(ContainsRegex(/[\n\r]/, match))
	consolidate on match
) O
where Not(ContainsDict('WorldCountries', O.org))
  and Not(MatchesDict('WorldNationalities', O.org))
  and Not(MatchesRegex(/\s*'\s*s/, RightContextTok(O.org,2)))--'
  and Not(ContainsDict('NegativeCluesForOrganizationWithinTenTokens', O.org));


create view OrgContext as
   ( select R.org as org from OrgAdditional9Single R)
union all
   ( select R.org as org from OrgAdditional9Plural R)
union all
   ( select R.org as org from OrgAdditional10 R);
   
-- Expand context-based matches with strong org suffixes 
-- to avoid partial matches such as 
-- [Petkim - Petrokimya Holding A.]S.
create view OrgContextExtended1 as
select CombineSpans(O.org, OCSC.match) as org
from OrgContext O, OrgClueStCaps OCSC
where Overlaps(O.org, OCSC.match)
  and GreaterThan(GetBegin(OCSC.match), GetBegin(O.org)); 
  
create view OrgContextExtended2 as
select CombineSpans(O.org, OCSC.match) as org
from OrgContext O, OrgClueStCaps OCSC
where FollowsTok(O.org, OCSC.match, 0,0); 

create view OrgContextExtended as
(select * from OrgContextExtended1)
union all
(select * from OrgContextExtended2);
  
create view OrgFormal as
(select R.org as org from OrgAbbrevFormal R)
union all
( select R.org as org from OrgContext R)
union all
( select R.org as org from OrgContextExtended R);

