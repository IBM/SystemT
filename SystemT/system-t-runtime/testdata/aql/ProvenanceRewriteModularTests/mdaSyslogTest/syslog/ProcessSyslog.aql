module syslog;

import view IPAddressInterim from module common;

create view IpAddressExtent as 
	select RightContextTok(D.ipAddress_Span,5) as large_extent, RightContextTok(D.ipAddress_Span,1)  as small_extent
	from common.IPAddressInterim D;

create view LogProcessMatch as 
	extract D.small_extent as small_extent, --regex /\s*[a-z]*\[?(\d{0,7})\]?\:]/ on D.large_extent as match
	--regex /\s+([a-z]*\[?\d{0,7}\]?)\s*\:/ on D.large_extent 
	regex /\s+(([a-zA-Z]*)\[?(\d{0,7})\]?)\s*\:/ on D.large_extent 
	return group 2 as appName
	and group 3 as procId
	and group 1 as match
	from IpAddressExtent D
	having Overlaps(match, small_extent);
	
	
create view ProcessMatch as
    	( select * from LogProcessMatch D    )
    union all
    	( select * from MsgProcessMatch D );
    
/*	
create view ProcessMatch_full as 
    extract D.small_extent as small_extent, --regex /\s*[a-z]*\[?(\d{0,7})\]?\:]/ on D.large_extent as match
    regex /\s+([a-z]*\[?\d{0,7}\]?)\s*\:/ on D.large_extent 
    return group 1 as match
    from IpAddressExtent D
    having Overlaps(match, small_extent);
*/

-- processes without a process name 
-- ignored in the output  
create view ProcessMatch_MsgNums as 
    select D.match
    from ProcessMatch D
    where Not(ContainsRegex(/[a-zA-Z]+/,D.small_extent));
             
create view SyslogProcessInterim as
    select D.match as annot_span, GetString(D.match) as annot_text
    from ProcessMatch D;
    
    
  

create view SyslogAppNameInterim as
    select D.appName as annot_span, GetString(D.appName) as annot_text
    from ProcessMatch D
    where Not(Equals(GetBegin(D.appName),GetEnd(D.appName)));

 
create view SyslogProcessIdInterim as
	select D.procId as annot_span, GetString(D.procId) as annot_text
	from ProcessMatch D
	where Not(Equals(GetBegin(D.procId),GetEnd(D.procId)))
	and ContainsRegex(/[a-zA-Z]+/,D.small_extent);
	
create view ProcessIdSyslogOutput as
select D.annot_span as span, D.annot_text as text, GetString('ProcessIdSyslog') as field_type
from SyslogProcessIdInterim D;

export view ProcessIdSyslogOutput;

create view AppNameSyslogOutput as
select D.annot_span as span, D.annot_text as text, GetString('AppNameSyslog') as field_type
from SyslogAppNameInterim D;

export view AppNameSyslogOutput;

