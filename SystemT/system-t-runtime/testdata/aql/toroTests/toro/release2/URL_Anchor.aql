-- **************************************************************************** 
-- Purpose : Extract Following entities from a detaged document
--           1. URL from Anchor
--           2. Description of URL
--           3. 5 left and right tokens from the description of URL 
--
--This uses URL extractor created By : Yunyao Li (yunyaoli@us.ibm.com)
-- ****************************************************************************

--Detag the document

detag Document.text as DetaggedDoc
detect content_type always
annotate 
    element 'a' as Anchor
		with attribute 'href' as target;

--Filter out the null Anchors

create view AnchorNotNull as
select A.target as target,A.match as matchtext 
from Anchor A
where NotNull(A.target);

--Identifies urls that begins with protocol names http or ftp

create view URL1 as
extract
    A.matchtext as matchtext ,
    regex /((ht|f)tps?:\/\/\w+[\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,100})/ on between 1 and 50 tokens in A.target as annot 
from AnchorNotNull A;

--Identifies urls that contains known domain suffixes

create view URL1a as
extract
    A.matchtext as matchtext ,
    regex /(\w+[\w\-:&=_?\/~.<>@:]+\.(com|edu|org)\/[\w&_?~.<>@:][\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,100})/ on between 1 and 50 tokens in A.target as annot 
from AnchorNotNull A;

--Identifies urls that are not necessarily begin with protocol names http or ftp

create view URL2 as
extract
    A.matchtext as matchtext ,
    regex /(((([\w]+:)\/\/)|(w\w+\.))(([\d\w]|%[a-fA-f\d]{2,2})+(:([\d\w]|%[a-fA-f\d]{2,2})+)?@)?([\d\w][-\d\w]{0,253}[\d\w]\.)+[\w]{2,4}(:[\d]+)?(\/([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)*(\?(&?([-+_~.\d\w]|%[a-fA-f\d]{2,2})=?)*)?(#([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)?)/ on between 1 and 50 tokens in A.target as annot 
from AnchorNotNull A;


-- union URL1a and URL2

create view URL1a_2 as
	(select U.matchtext as matchtext ,U.annot as annot from URL1a U)
	union all
	(select U.matchtext as matchtext ,U.annot as annot from URL2 U);


create view URL1a_2BeginwithProtocol as
extract
    A.matchtext as matchtext ,
    regex /(ht|f)tps?.+/ on A.annot as annot 
from URL1a_2 A;

create view URL1a_2All as
	(select U.matchtext as matchtext ,U.annot as annot from URL1a_2 U)
	union all
	(select U.matchtext as matchtext ,U.annot as annot from URL1a_2BeginwithProtocol U);

create view URL1a_2Consolidated as
select C.matchtext as matchtext ,C.annot as annot
from URL1a_2All C
consolidate on C.annot 
using 'NotContainedWithin';

	
--Since Rule1 is more restrictive than Rule2,...
--...we prefer matches generated by Rule1 over those produced by Rule2, whenever they overlap

create view URLWeakOverlap as
select U2.matchtext as matchtext ,U2.annot as annot
from   URL1 U1,
       URL1a_2Consolidated U2
where  Overlaps(U1.annot, U2.annot);

create view URLWeakOnly as
	(select U.matchtext as matchtext ,U.annot as annot from URL1a_2Consolidated U)
	minus
	(select U.matchtext as matchtext ,U.annot as annot from URLWeakOverlap U);

--Combine all the matches identified so far

create view URLAll as
  (select URL1.matchtext as matchtext ,URL1.annot as annot from URL1)
union all
  (select URLWeakOnly.matchtext as matchtext ,URLWeakOnly.annot as annot from URLWeakOnly);

--Get 5 left and right tokens of URL description
create view URLWithContents as
select
    U.annot as url,U.matchtext as description,LeftContextTok(U.matchtext,5) as lefttokens,RightContextTok(U.matchtext,5) as righttokens 
from URLAll U;

output view URLWithContents;

