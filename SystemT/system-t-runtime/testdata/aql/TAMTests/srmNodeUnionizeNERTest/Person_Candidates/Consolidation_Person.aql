module Person_Candidates;


create view PersonWithinUrlEmailPlaceOrg as
select PS.person as person
from PersonSentence PS, UrlEmailPlaceOrg R
where Contains (R.match, PS.person);

create view PersonOverlapsWithCities as
select P.person as person 
from PersonSentence P,
	 CitiesAll C
where Overlaps(C.match, P.person)
  and Not(Contains(P.person, C.match))
  and Not(Contains(C.match, P.person));
  
create view PersonEqualsToCities as
select P.person as person 
from PersonSentence P,
	 CitiesAll C
where Equals(C.match, P.person);
  
create view PersonOverlapsWithOrgsAll as 
select P.person as person, O.org as org
from PersonSentence P, 
	 FinalOrgConsolidatedWithoutDots O
where Overlaps(O.org, P.person);

create view PersonContainsOrgs as 
select P.person as person
from PersonOverlapsWithOrgsAll P
where Contains(P.person, P.org)
and Not(Equals(P.person, P.org));

create view PersonOverlapsWithOrgs as
	(select P.person as person from PersonOverlapsWithOrgsAll P)
	minus
	(select P.person as person from PersonContainsOrgs P);
		  

create view InvalidPerson as
	(select P1.person as person from PersonWithinUrlEmailPlaceOrg P1)
	union all
	(select P1.person as person from PersonOverlapsWithCities P1)
	union all
	(select P1.person as person from PersonOverlapsWithOrgs P1)
	union all
	(select P1.person as person from PersonEqualsToCities P1)
;


create view InvalidCapsPerson as
select CP.name as name
from CapsPerson CP,
	 UrlEmailPlaceOrg UEP
where Contains(UEP.match, CP.name)
  and Not(Contains(CP.name, UEP.match));


create view ValidPerson as 
	(select P.person as person from PersonSentence P)
	minus
	(select P1.person as person from InvalidPerson P1);

create view FinalPersonConsolidated as
select C.person as person
from ValidPerson C
consolidate on C.person
using 'LeftToRight';


create view UrlEmailPlaceOrgPerson as 
     (select R.match as match from UrlEmailPlaceOrg R)
     union all
     (select R.person as match from FinalPersonConsolidated R);
      
create view PersonStrongSingleTokenWithinUrlEmailPlaceOrg as
select PS.person as person
from PersonStrongSingleToken PS, UrlEmailPlaceOrgPerson R
where Contains (R.match, PS.person);
 
create view FinalPersonStrongSingleToken as 
	(select P.person as person from PersonStrongSingleToken P)
	minus
	(select P1.person as person from PersonStrongSingleTokenWithinUrlEmailPlaceOrg P1);
 
create view FinalPersonStrongSingleTokenConsolidated as
select C.person as person
from FinalPersonStrongSingleToken C
consolidate on C.person;


-- filter entries where an invalid person fragment is present
-- filter entries where the token to the left is present in a dictionary
-- filter entries where the token to the right is present in a dictionary
-- filter entries where the token to the left matches a regular expression

create view PersonStrongSingleTokenOverlaps as
select P.person as person 
from FinalPersonStrongSingleTokenConsolidated P, FinalPersonConsolidated P1
where Overlaps(P.person,P1.person);

create view PersonStrongSingleTokenNonOverlaps as
(select P.person as person from FinalPersonStrongSingleTokenConsolidated P)
minus
(select P.person as person from  PersonStrongSingleTokenOverlaps P);


-- carry over an additional attribute to indicate whether the match is single or multi-token
create view PersonFinalAllMatches as
(select P.person as person, 'MULTITOKEN' as type from FinalPersonConsolidated P)
union all
(select P.person as person, 'SINGLETOKEN' as type from PersonStrongSingleTokenNonOverlaps P
 where Not(MatchesRegex(/.{1,2}/,P.person)));
 
-- to avoid matches overlapping with invalid person fragments

create view InvalidPersonFragments as
select D.match as match
 from (extract dictionary 'NegativeCluesForPerson' on D.text as match from DocumentText D) D;
create view InvalidPersonFinalAllMatches as
select P.person as person, P.type as type 
from   PersonFinalAllMatches P,
	   InvalidPersonFragments F
where Overlaps(F.match, P.person);

create view PersonFinalAllCandidate as
	(select P.person as person, P.type as type  from PersonFinalAllMatches P)
	minus
	(select P.person as person, P.type as type  from InvalidPersonFinalAllMatches P);
	

create view PersonLeftContext as
--extract dictionaries 'filterPerson_LCDict.dict'
extract dictionary 'LeftContextFiltersForPerson'
	on D.text as name
from DocumentText D;

create view PersonRightContext as
extract dictionary 'RightContextFiltersForPerson'
	on D.text as name
from DocumentText D;

create view PersonFinalAllCandidateToDeleteLC as
select P.person as person, P.type as type 
from PersonFinalAllCandidate P, PersonLeftContext PLC
where FollowsTok(PLC.name,P.person,0,1) and
      MatchesRegex(/\W*/,SpanBetween(PLC.name,P.person));

create view PersonFinalAllCandidateToDeleteLC1 as
select P.person as person, P.type as type 
from PersonFinalAllCandidate P, PersonLeftContext PLC
where FollowsTok(PLC.name,P.person,0,1) and
	  MatchesRegex(/\W*/,SpanBetween(PLC.name,P.person)) and
      MatchesRegex(/.+(ing)/,PLC.name) and
      MatchesRegex(/.+,.+/,P.person);
      
create view PersonFinalAllCandidateToDeleteRC as
select P.person as person, P.type as type 
from PersonFinalAllCandidate P, PersonRightContext PRC
where FollowsTok(P.person,PRC.name,0,1) and
      MatchesRegex(/[ ]+/,SpanBetween(P.person,PRC.name));
      
create view WrongPersonContextBased as
	(select P.* from PersonFinalAllCandidateToDeleteLC P)
	union all
	(select P.* from PersonFinalAllCandidateToDeleteLC1 P)
	union all
	(select P.* from PersonFinalAllCandidateToDeleteRC P);
	

create view PersonFinalAll as
(select P.person as person, P.type as type  from PersonFinalAllCandidate P)
minus
(select P.person as person, P.type as type  from PersonFinalAllCandidate P, WrongPersonContextBased W where Contains(W.person, P.person));

--         avoid matches with . on both side
--         avoid matches for single person name in notes email address
create view PersonFinalAllWithDots as
select P.person as person, P.type as type 
from PersonFinalAll P
where MatchesRegex(/[\.\/]/, LeftContext(P.person,1)) and
	  MatchesRegex(/[\.\/]/, RightContext(P.person,1)) and
	  MatchesRegex(/\p{Lu}\p{M}*+/, P.person);
	  
create view PersonFinalAllWithoutDots1 as
	(select P.person as person, P.type as type  from PersonFinalAll P)
	minus
	(select P.person as person, P.type as type  from PersonFinalAllWithDots P);	

create view PersonTokens as
select R.match as person
from (extract regex /[^\s\.]{2,}/ on P.person as match from PersonFinalAllWithoutDots1 P) R; 


-- deduplication prior to computing the join


create view ValidCapsPersonCandidates as
	(select P.name as name from CapsPerson P)
	minus
	(select P.name as name from InvalidCapsPerson P);

create view PersonTokenCandidateDedup as
select GetText(PT.person) as person
from PersonTokens PT
group by GetText(PT.person);


create view ValidPersonTokenCandidates as
select CW.name as person
from PersonTokenCandidateDedup PT,
     ValidCapsPersonCandidates CW
where Equals(GetText(PT.person), GetText(CW.name));


-- to extend valid tokens to include initials
create view ValidPersonTokenCandidatesExtended1 as
select CombineSpans(I.word, P.person) as person 
from InitialWord I,
	 ValidPersonTokenCandidates P
where FollowsTok(I.word, P.person, 0, 0);

-- to merge two adjacent person candidates if one of them is single token
create view ValidPersonTokenCandidatesExtended2_1 as
select CombineSpans(P1.person, P2.person) as person
from ValidPersonTokenCandidates P1,
     ValidPersonTokenCandidates P2
where FollowsTok(P1.person, P2.person, 0, 0)
  and Not(ContainsRegex(/[\r\n\t]/, SpanBetween(P1.person, P2.person)))
  and Not(ContainsRegex(/\s/, P1.person));

create view ValidPersonTokenCandidatesExtended2_2 as
select CombineSpans(P1.person, P2.person) as person
from ValidPersonTokenCandidates P1,
     ValidPersonTokenCandidates P2
where FollowsTok(P1.person, P2.person, 0, 0)
  and Not(ContainsRegex(/[\r\n\t]/, SpanBetween(P1.person, P2.person)))
  and Not(ContainsRegex(/\s/, P2.person));
  
create view PersonFinalAllWithoutDots2 as
	(select P.person as person, P.type as type from PersonFinalAllWithoutDots1 P)
	union all
	(select P.person as person, 'SINGLETOKEN' as type from ValidPersonTokenCandidates P
	-- to avoid single output of person suffix
	 where Not(MatchesDict('RightContextSuffixesForProperNounNames', P.person)))
	union all
	(select P.person as person, 'SINGLETOKEN' as type from ValidPersonTokenCandidatesExtended1 P)
	union all
	(select P.person as person, 'SINGLETOKEN' as type from ValidPersonTokenCandidatesExtended2_1 P)
	union all
	(select P.person as person, 'SINGLETOKEN' as type from ValidPersonTokenCandidatesExtended2_2 P);

create view PersonFinalAllWithoutDots as
select P.person as person, P.type as type
from PersonFinalAllWithoutDots2 P
consolidate on P.person;

create view StrongPersonCandidates as
select P.person as person from FamousPeople P;
