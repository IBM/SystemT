module Number; 
-------------------------------------------------------------------------------
-- Extract all dictionaries used in Number Module 
-- Extract regex for simple Integer and Decimal in digital format
-- Composite features based on views for Integer Text format
-------------------------------------------------------------------------------

import module InputDocumentProcessor;
import view DocumentDetagged from module InputDocumentProcessor as DocumentText;

-- Support Number written in English
import dictionary NumberElement from module Dictionaries as NumberElementDict;
import dictionary NumberDoubleFigure from module Dictionaries as NumberDoubleFigureDict;
import dictionary NumberDoubleFigureUnit from module Dictionaries as NumberDoubleFigureUnitDict;
import dictionary NumberUnit from module Dictionaries as NumberUnitDict;

require document with columns
text Text;

create view NumberElement as
	extract dictionary 'NumberElementDict' with flags 'IgnoreCase' on D.text as match
		from DocumentText D;
		
create view NumberDoubleFigure as
	extract dictionary 'NumberDoubleFigureDict' with flags 'IgnoreCase' on D.text as match
		from DocumentText D;
		
create view NumberDoubleFigureUnit as
	extract dictionary 'NumberDoubleFigureUnitDict' with flags 'IgnoreCase' on D.text as match
		from DocumentText D;
		
create view NumberUnit as
	extract dictionary 'NumberUnitDict' with flags 'IgnoreCase' on D.text as match
		from DocumentText D;


create dictionary HundredDict as(
	'hundred'
);

create dictionary PointDict as(
	'point'
);

create view HundredElement as
	extract dictionary 'HundredDict' with flags 'IgnoreCase' on D.text as match
		from DocumentText D;
		
create view PointElement as 
	extract dictionary 'PointDict' with flags 'IgnoreCase' on D.text as match
		from DocumentText D;

--thirty one
create view TwoDigitalText as
	extract pattern <NDFU.match> <Token>{0,1} <NE.match>
	as match
	from 
		NumberDoubleFigureUnit NDFU, NumberElement NE;
		
create view TwoIntegerBaseText as
	select T.match as match from
		((select NE.match as match
			from NumberElement NE)
		union all
		(select NDF.match as match
			from NumberDoubleFigure NDF)
		union all
		(select NDFU.match as match
			from NumberDoubleFigureUnit NDFU)
		union all
		(select TD.match as match
			from TwoDigitalText TD)) T
	consolidate on T.match;


--seven hundred and eighty-two
create view HundredPart as
	extract pattern <NE.match> <HE.match> as match
	from 
		NumberElement NE, HundredElement HE;

create view ThreeDigitalText as
	select TT.match from
		((select 
			CombineSpans(HP.match, TIBT.match) as match
		from 
			HundredPart HP, TwoIntegerBaseText TIBT
		where FollowsTok(HP.match,TIBT.match,0,1))
	  union all
		(select TIBT.match
			from TwoIntegerBaseText TIBT)) TT
	consolidate on TT.match;
		

--seven hundred and eighty-two million
create view NumberTextUnit as
	extract pattern <TDT.match> <NU.match> as match
	from
		ThreeDigitalText TDT, NumberUnit NU;

--one hundred eleven billion one hundred twenty one million
create view NumberTextWithUnit as
	extract pattern <NTU1.match> <Token>{0,1} <NTU2.match>
	as match
	from
		NumberTextUnit NTU1, NumberTextUnit NTU2;
	
	
-- -1000
create view IntegerSimple_ as
extract regex /\d+/ 
		on 1 token in D.text as match
		from DocumentText D 
		having Not(MatchesRegex(/-/, RightContext(match, 1)))
		and Not(MatchesRegex(/-/, LeftContext(match, 1)));	
		
create view IntegerSimpleWithSign_ as
extract regex /[+-]\d+/ 
		on 2 tokens in D.text as match
		from DocumentText D 
		having MatchesRegex(/\s/, LeftContext(match, 1))
        and MatchesRegex(/\s/, RightContext(match, 1)); 
		
-- 10,000,300,500
create view IntegerWithThousandsSepAndSign_ as
extract regex /[-+]?[0-9]{1,3}(\,[0-9]{3})+/
		on between 1 and 15 tokens in D.text
		as match from DocumentText D ;
		
		
create view DecimalDigitalPart_ as
	extract regex /\.[0-9]+/
		on between 1 and 15 tokens in D.text
		as match from DocumentText D;