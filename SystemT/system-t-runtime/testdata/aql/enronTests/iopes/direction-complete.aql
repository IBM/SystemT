/*******************************************************************************
* direction.aql
*
* A version of the 'direction' annotator that uses the Avatar operator
* framework.
*
* This file is written based on direction.aog
*******************************************************************************/

/*******************************************************************************
* REGULAR EXPRESSIONS OVER DOCUMENTS
*
* Identify strong direction candidates by regular expression matching
* 
* Each regex is evaluated as a selection over $Document, producing 'Raw' tuples
* with the schema: <doc, DirectionCandidates>
*
* The union of the candidates are then consolidated: any candidate that is
* contained by another is discarded
*******************************************************************************/

create view DirectionCandidates1 as
select R.match as annot
from Regex(/(directions?\s+to\s+(my\s+(house|home)|the\s+party))/, 'CASE_INSENSITIVE', Document.text) R;

create view DirectionCandidates2 as
select R.match as annot
from Regex(/(directions?\s+to\s+my\s+house)/, 'CASE_INSENSITIVE', Document.text) R;

create view DirectionCandidates3 as
select R.match as annot
from Regex(/((turn|bear)\s+(left|right)\s+(onto|on|to))/, 'CASE_INSENSITIVE', Document.text) R;

create view DirectionCandidates4 as
select R.match as annot
from Regex(/(follow\s+the\s+signs?\s+(to|for))/, 'CASE_INSENSITIVE', Document.text) R;

create view DirectionCandidates5 as
select R.match as annot
from Regex(/(take\s+(([A-Za-z]+\s*-?\s*\d+)|(\d+\s*-?\s*[A-Za-z]+))(\s+exit)\s*to)/, 'CASE_INSENSITIVE', Document.text) R;

create view DirectionCandidates6 as
select R.match as annot
from Regex(/(exit\s+(onto|at|on)?\s*(([A-Za-z]+\s*-?\s*\d+)|(\d+\s*-?\s*[A-Za-z]+)))/, 'CASE_INSENSITIVE', Document.text) R;

create view DirectionCandidates7 as
select R.match as annot
from Regex(/(keep\s+going\s+straight)/, 'CASE_INSENSITIVE', Document.text) R;

create view DirectionCandidates8 as
select R.match as annot
from Regex(/(follow\s+(([A-Za-z]+\s*-?\s*\d+)|(\d+\s*-?\s*[A-Za-z]+))\s+(to\s+the\s+end|for))/, 'CASE_INSENSITIVE', Document.text) R;

create view DirectionCandidates9 as
select R.match as annot
from Regex(/(exit.{0,20}(north|south|east|west))/, 'CASE_INSENSITIVE', Document.text) R;

create view DirectionCandidates10 as
select R.match as annot
from Regex(/(directions\s+from\s+(([A-Za-z]+\s*-?\s*\d+)|(\d+\s*-?\s*[A-Za-z]+)))/, 'CASE_INSENSITIVE', Document.text) R;

create view DirectionCandidates11 as
select R.match as annot
from Regex(/(make\s+a?\s*(right|left)|(directions?\s+(from|to)\s+\w+\s+(from|to)\w+)|(suggested\s+(route|directions))|(take\s+exit)|(u(\s*-\s*)?turn\s+(on|at))|(at\s+the\s+\w+\s+light)|(will\s+be\s+(on|to)\s+(the|your))\s+(right|left))([ A-Za-z0-9\t])*/, 'CASE_INSENSITIVE', Document.text) R;

/*
Consolidate all direction candidates
*/
create view DirectionCandidatesAll as 
     (select DC1.annot as annot from DirectionCandidates1 DC1)
     union all
     (select DC2.annot as annot from DirectionCandidates2 DC2)
     union all
     (select DC3.annot as annot from DirectionCandidates3 DC3)
     union all
     (select DC4.annot as annot from DirectionCandidates4 DC4)
     union all
     (select DC5.annot as annot from DirectionCandidates5 DC5)
     union all
     (select DC6.annot as annot from DirectionCandidates6 DC6)
     union all
     (select DC7.annot as annot from DirectionCandidates7 DC7)
     union all
     (select DC8.annot as annot from DirectionCandidates8 DC8)
     union all
     (select DC9.annot as annot from DirectionCandidates9 DC9)
     union all
     (select DC10.annot as annot from DirectionCandidates10 DC10)
     union all
     (select DC11.annot as annot from DirectionCandidates11 DC11);
     

create view DirectionCandidates as
select DC.annot as annot
from Consolidate(DirectionCandidatesAll.annot) DC;   

/*******************************************************************************
* REGULAR EXPRESSIONS OVER DOCUMENTS
*
* Identify week direction candidates by regular expression matching
* 
* Each regex is evaluated as a selection over $Document, producing 'Raw' tuples
* with the schema: <doc, WeakDirectionCandidates>
*
* The union of the candidates are then consolidated: any candidate that is
* contained by another is discarded
*******************************************************************************/
create view WeakDirectionCandidates1 as
select R.match as annot
from Regex(/([Dd]riving\W+[Dd]irections.{0,30}(:|From|To|Via))([ A-Za-z0-9\t,])*/, Document.text) R;

create view WeakDirectionCandidates2 as
select R.match as annot
from Regex(/(From\s+[A-Z][a-z]+)([ A-Za-z0-9\t,])*/, Document.text) R;

create view WeakDirectionCandidates3 as
select R.match as annot
from Regex(/(Start(ing)?\s+at)([ A-Za-z0-9\t,])*/, Document.text) R;

create view WeakDirectionCandidates4 as
select R.match as annot
from Regex(/((corner|intersection)\s+of\s+[A-Z][a-z]+)([ A-Za-z0-9\t,])*/, Document.text) R;

create view WeakDirectionCandidates5 as
select R.match as annot
from Regex(/(take\s+(([A-Za-z]+\s*-?\s*\d+)|(\d+\s*-?\s*[A-Za-z]+))(\s+exit)?\s*[from|to])([ A-Za-z0-9\t,])*/, Document.text) R;

create view WeakDirectionCandidates6 as
select R.match as annot
from Regex(/([A-Za-z]{4,10}.{0,5}becomes.{0,5}[A-Za-z]{4,10})([ A-Za-z0-9\t,])*/, Document.text) R;

create view WeakDirectionCandidates7 as
select R.match as annot
from Regex(/(block.{0,20}(left|right))([ A-Za-z0-9\t,])*/, Document.text) R;

create view WeakDirectionCandidates8 as
select R.match as annot
from Regex(/(total\W{0,2}\w{0,15}\W{0,2}((time)|(distance)))([ A-Za-z0-9\t,])*/, Document.text) R;

/*
Consolidate all direction candidates
*/
create view WeakDirectionCandidatesAll as 
     (select DC1.annot as annot from WeakDirectionCandidates1 DC1)
     union all
     (select DC2.annot as annot from WeakDirectionCandidates2 DC2)
     union all
     (select DC3.annot as annot from WeakDirectionCandidates3 DC3)
     union all
     (select DC4.annot as annot from WeakDirectionCandidates4 DC4)
     union all
     (select DC5.annot as annot from WeakDirectionCandidates5 DC5)
     union all
     (select DC6.annot as annot from WeakDirectionCandidates6 DC6)
     union all
     (select DC7.annot as annot from WeakDirectionCandidates7 DC7)
     union all
     (select DC8.annot as annot from WeakDirectionCandidates8 DC8);
     
create view WeakDirectionCandidates as
select DC.annot as annot
from Consolidate(WeakDirectionCandidatesAll.annot) DC;     

/********************************************************************************
* CREATE BLOCKS OF DIRECTION
*
* All blocks satisfying the conditions are created. 
*
* First of all, we identify all the blocks containing at least two direction candidates, 
* which can be strong direction candidates or week direction candidates.
*
* Then only the blocks contain at least one strong direction candidates are kept
*
********************************************************************************/

create view AllDirectionCandidates as
 	  (select DC.annot as annot from DirectionCandidates DC)
 	  union all
 	  (select WDC.annot as annot from WeakDirectionCandidates WDC);

create view AllDirectionBlockCandidates as
select B.block as annot
from Block(300, 2, AllDirectionCandidates.annot) B;

create view DirectionBlockCandidates as
select ADC.annot as annot
from AllDirectionBlockCandidates ADC, DirectionCandidates DC
where Contains(ADC.annot, DC.annot);

/********************************************************************************
* REGULAR EXPRESSIONS OVER DOCUMENTS
*
* Identify email headers by regular expression matching 
*
* Each regex is evaluated as a selection over $Document, producing 'Raw' tuples
* with the schema: <doc, HeaderBegin>
*
* The original regular expressions defined as startPatterns in
* annotators/src/java/com/ibm/avatar/annotators.email/ForwardBlockExtractor.java
********************************************************************************/

create view HeaderBegin1 as
select R.match as annot
from Regex(/(total\W{0,2}\w{0,15}\W{0,2}((time)|(distance)))([ A-Za-z0-9\t,])*/, Document.text) R;

create view HeaderBegin2 as
select R.match as annot
from Regex(/.{1,30}\/.{1,25}\/.{1,20}(\@.{1,20})?\s*\n(>\s*)*\d{2,4}(\/|\.)\d{2,4}(\/|\.)\d{2,4}\s\d{2}\:\d{2}(\s+(PM|AM))?/, Document.text) R;

create view HeaderBegin3 as
select R.match as annot
from Regex(/(To\s*\n(>\s*)*.{5,1000}?\s*\n(>\s*)*\s*cc\s*\n)/, Document.text) R;

create view HeaderBegin4 as
select R.match as annot
from Regex(/To:\s*.{1,200}\s*\n(>\s*)*\s*(CC|cc|Cc):\s*(\n)?/, Document.text) R;

create view HeaderBegin5 as
select R.match as annot 
from Regex(/On\s*(([A-Z][a-z]{2,10},?\s*\d{1,2},?\s*[A-Z][a-z]{2,10}\s*\d{2,4},)|(\d{1,2}\/\d{1,2}\/\d{1,2},))\s*.{1,100}?\s*wrote\:/, Document.text) R;

create view HeaderBegin6 as
select R.match as annot
from Regex(/At\s+\d{2}:\d{2}\s+.{1,9}\s+.{1,6},\s+you wrote:/, Document.text) R;

create view HeaderBegin7 as
select R.match as annot
from Regex(/(From:\s*.{1,40}\s*\[mailto:.{5,50}\])|(From:\s*.{1,50}\s*\n\s*To:)/, Document.text) R;

create view HeaderBegin8 as
select R.match as annot
from Regex(/\-{5}\s*Message\sfrom\s*.{5,30}\s.{6,40}\s*on\s*[A-Z][a-z]{2,8},\s*\d{1,2}\s*[A-Z][a-z]{2,8}\s*\d{4}(.|\n){10,18}\s*\-{5}/, Document.text) R;

create view HeaderBegin9 as
select R.match as annot
from Regex(/\s*\-{5}\s+Original\s*Message\s+\-{5}\s*(\n{0,3})?\s*From:.{1,50}?/, Document.text) R;

create view HeaderBegin10 as
select R.match as annot
from Regex(/Quoting\s*.{1,120}?:\s*(\n)+\s*(>\s*)/, Document.text) R;

create view HeaderBegin11 as
select R.match as annot
from Regex(/\[[Aa]ttachment\s*deleted\s*by\s*.{1,60}?\]/, Document.text) R;

/********************************************************************************
* REGULAR EXPRESSIONS OVER DOCUMENTS
*
* Identify email headers by regular expression matching 
*
* Each regex is evaluated as a selection over $Document, producing 'Raw' tuples
* with the schema: <doc, HeaderEnd>
*
* The original regular expressions defined as endPatterns in
* annotators/src/java/com/ibm/avatar/annotators.email/ForwardBlockExtractor.java
********************************************************************************/

create view HeaderEnd1 as
select R.match as annot
from Regex(/(Subject:)|(Subject\s*\n)/, Document.text) R;

create view HeaderEnd2 as
select R.match as annot
from Regex(/Subject\s*\n/, Document.text) R;

create view HeaderEnd3 as
select R.match as annot
from Regex(/Subject\s*\n/, Document.text) R;

create view HeaderEnd4 as
select R.match as annot
from Regex(/Subject:/, Document.text) R;

create view HeaderEnd7 as
select R.match as annot
from Regex(/(Subject:)|(Date:.{20,80}\s*\n)/, Document.text) R;

create view HeaderEnd8 as
select R.match as annot
from Regex(/Subject:/, Document.text) R;

create view HeaderEnd9 as
select R.match as annot
from Regex(/\s*Subject:/, Document.text) R;
	
/********************************************************************************
* IDENTIFY EMAIL FORWARD HEADERS
*
* LOOK FOR END PATTERNS CORRESPONDING TO THE APPROPRIATE FORWARD HEADER
*
* Find the end patterns that is within 1000 characters of a start pattern with
* the same identifier.  
*
* Then merge each such <start pattern, end pattern> into a tuple in $ForwardBlockCandidates
* 
* Any forward block candidate that contains another forward block candidate is discarded
*
* producing 'Raw' tuples with the schema: <doc, HeaderBegin, HeaderEnd>
*
********************************************************************************/   

create view ForwardBlockCandidates1 as
select B.annot as headerBegin, 
       E.annot as headerEnd,
       CombineSpans(B.annot, E.annot) as annot
from HeaderBegin1 B, HeaderEnd1 E
where FollowsTok(B.annot, E.annot, 0, 1000);

create view FinalForwardBlockCandidates1 as
select FBC.annot as annot
from Consolidate('NotContainedWithin',ForwardBlockCandidates1.annot) FBC;

create view ForwardBlockCandidates2 as
select B.annot as headerBegin, 
       E.annot as headerEnd,
       CombineSpans(B.annot, E.annot) as annot
from HeaderBegin2 B, HeaderEnd2 E
where FollowsTok(B.annot, E.annot, 0, 1000);

create view FinalForwardBlockCandidates2 as
select FBC.annot as annot
from Consolidate('NotContainedWithin',ForwardBlockCandidates2.annot) FBC;

create view ForwardBlockCandidates3 as
select B.annot as headerBegin, 
       E.annot as headerEnd,
       CombineSpans(B.annot, E.annot) as annot
from HeaderBegin3 B, HeaderEnd3 E
where FollowsTok(B.annot, E.annot, 0, 1000);

create view FinalForwardBlockCandidates3 as
select FBC.annot as annot
from Consolidate('NotContainedWithin',ForwardBlockCandidates3.annot) FBC;

create view ForwardBlockCandidates4 as
select B.annot as headerBegin, 
       E.annot as headerEnd,
       CombineSpans(B.annot, E.annot) as annot
from HeaderBegin4 B, HeaderEnd4 E
where FollowsTok(B.annot, E.annot, 0, 1000);

create view FinalForwardBlockCandidates4 as
select FBC.annot as annot
from Consolidate('NotContainedWithin',ForwardBlockCandidates4.annot) FBC;

create view ForwardBlockCandidates7 as
select B.annot as headerBegin, 
       E.annot as headerEnd,
       CombineSpans(B.annot, E.annot) as annot
from HeaderBegin7 B, HeaderEnd7 E
where FollowsTok(B.annot, E.annot, 0, 1000);

create view FinalForwardBlockCandidates7 as
select FBC.annot as annot
from Consolidate('NotContainedWithin',ForwardBlockCandidates7.annot) FBC;

create view ForwardBlockCandidates8 as
select B.annot as headerBegin, 
       E.annot as headerEnd,
       CombineSpans(B.annot, E.annot) as annot
from HeaderBegin8 B, HeaderEnd8 E
where FollowsTok(B.annot, E.annot, 0, 1000);

create view FinalForwardBlockCandidates8 as
select FBC.annot as annot
from Consolidate('NotContainedWithin',ForwardBlockCandidates8.annot) FBC;

create view ForwardBlockCandidates9 as
select B.annot as headerBegin, 
       E.annot as headerEnd,
       CombineSpans(B.annot, E.annot) as annot
from HeaderBegin9 B, HeaderEnd9 E
where FollowsTok(B.annot, E.annot, 0, 1000);

create view FinalForwardBlockCandidates9 as
select FBC.annot as annot
from Consolidate(ForwardBlockCandidates9.annot) FBC;

/*
Consolidate all forward blocks
*/

create view ForwardBlock as 
     (select FB1.annot as annot from FinalForwardBlockCandidates1 FB1)
     union all
     (select FB2.annot as annot from FinalForwardBlockCandidates2 FB2)
     union all
     (select FB3.annot as annot from FinalForwardBlockCandidates3 FB3)
     union all
     (select FB4.annot as annot from FinalForwardBlockCandidates4 FB4)
     union all
     (select HB5.annot as annot from HeaderBegin5 HB5)
     union all
     (select HB6.annot as annot from HeaderBegin6 HB6)
     union all
     (select FB7.annot as annot from FinalForwardBlockCandidates7 FB7)
     union all
     (select FB8.annot as annot from FinalForwardBlockCandidates8 FB8)
     union all
     (select FB9.annot as annot from FinalForwardBlockCandidates9 FB9)
     union all
     (select HB10.annot as annot from HeaderBegin10 HB10)
     union all
     (select HB11.annot as annot from HeaderBegin11 HB11);

create view FinalForwardBlock as
select FB.annot as annot
from Consolidate(ForwardBlock.annot) FB; 
/********************************************************************************
* SELECT DIRECTIONS EXISING IN THE BODY OF EACH EMAIL
*
* $DirectionBlockCandidates generated earlier contains all the possible direction 
* blocks, 
* Here all $DirectionBlockCandidates contain $ForwardBlock are discarded such that
* Direction contained emails are seperated by forward blocks. 
*
* In addition, all the $DirectionBlockCandidates that are contained by others are
* discarded as well
*
* This process is divided into three steps:
* Step 1: Identifying all the $DirectionBlockCandidates that contain $ForwardBlock
* Step 2: Discard all the $DirectionBlockCandidates identified at Step 1
* Step 3: Discard all the remaining $DirectionBlockCandidates contained by others 
********************************************************************************/
create view WrongDirectionBlocks as
select DBC.annot as annot
from DirectionBlockCandidates DBC, FinalForwardBlock FB
where Contains(DBC.annot, FB.annot);

create view CorrectDirectionBlocks as
	(select DBC.annot as annot from DirectionBlockCandidates DBC)
		minus
	(select WDB.annot as annot from WrongDirectionBlocks WDB);
	
select CDB.annot as annot
into Direction
from Consolidate(CorrectDirectionBlocks.annot) CDB;     

--select A.annot as annot
--into output
--from AllDirectionCandidates A;
