-- include 'namedentity-nooutput.aql';
 
-- identify person names to ignore, e.g., manager name in secretary's signature
 
create view PersonToIgnore as
select P.person as person
from Person P
where MatchesRegex(/(assistant|ta).{0,25}(for|to).{0,100}$/,LeftContext(P.person,125));

-- remaining persons may start a signature block

create view CandidatePersonForSB as
(select P.person as person from Person P)
minus 
(select P.person as person from PersonToIgnore P);

--extract right context of persons
create view PersonForSB as
select P.person as person, CombineSpans(P.person,RightContext(P.person,250)) as personblock
from CandidatePersonForSB P;
--where ContainsRegex(/[\n\r]/,RightContext(P.person,10));

-- for each block, pair with any "ambiguous" person appearing in the block
-- retain person beginning the block, original block and truncated block 
-- (i.e., up to beginning of the "ambiguous"  person)

create view PersonBlockTruncated as
select P.person as person, P.personblock as personblockorig, CombineSpans(P.person,SpanBetween(P.person,P1.person)) as personblock
from PersonForSB P, CandidatePersonForSB P1
where Contains(P.personblock,P1.person) and GreaterThan(GetBegin(P1.person),GetEnd(P.person));

-- same personblock may have multiple "ambiguous" persons in it. 
-- if so, multiple truncated block tuples will be present for that personblock
-- consolidate to retain only the shortest entry
create view PersonBlockMin as
select PB.person as person, PB.personblock as personblock
from PersonBlockTruncated PB 
consolidate on PB.personblock
using 'NotContainedWithin';

-- personblocks that do not have any "ambiguous" persons in-between are retained as is

create view PersonBlockRetained as
(select P.person as person, P.personblock as personblock from PersonForSB P)
minus
(select P.person as person, P.personblockorig as personblock from PersonBlockTruncated P);

-- combine personblocks for truncated and non-truncated entries
create view PersonBlock as
(select P.person as person, P.personblock as personblock from PersonBlockRetained P)
union all
(select P.person as person, P.personblock as personblock from PersonBlockMin P);

-- five types used as evidence

create view Evidence as
(select R.num  as annot from PhoneNumber R)
union all
(select R.loc as annot from Address R)
union all
(select R.org as annot from Organization R)
union all 
(select R.email as annot from EmailAll R)
union all 
(select R.url as annot from Url R);

-- find all blocks
create view EvidenceBlockGood as
select B.block as annot
from BlockTok(6,2,6,Evidence.annot) B;

-- find all blocks
create view EvidenceBlockStrong as
select B.block as annot
from BlockTok(6,4,6,Evidence.annot) B;

-- personblocks where person followed by newline
create view PersonBlockNewline as
select P.person as person, P.personblock as personblock
from PersonBlock P
where ContainsRegex(/[\n\r]/,RightContext(P.person,10))
and ContainsRegex(/[\n\r]/,LeftContextTok(P.person,5));

create view PersonBlockNoNewline as
(select P.person as person, P.personblock as personblock
from PersonBlock P)
minus
(select P.person as person, P.personblock as personblock
from PersonBlockNewline P);

create view SignatureBlockCand1 as
select P.person as person, CombineSpans(P.person,E.annot) as personSig
from PersonBlockNewline P, EvidenceBlockGood E
where Contains(P.personblock, E.annot);

create view SignatureBlockCand2 as
select P.person as person, CombineSpans(P.person,E.annot) as personSig
from PersonBlockNoNewline P, EvidenceBlockStrong E
where Contains(P.personblock, E.annot);

create view SignatureBlockCandAll as
(select S.person as person, S.personSig as personSig from SignatureBlockCand1 S)
union all
(select S.person as person, S.personSig as personSig from SignatureBlockCand2 S);

create view SignatureBlockCandRetained as
select S.person as person, S.personSig as personSig
from SignatureBlockCandAll S, PhoneNumber N
where Contains(S.personSig, N.num)
and Not(ContainsRegex(/((\n\s*\n)|(\r\s*\r)|(\n\s*\r)|(\r\s+\n)|(thanks)|(bye)|(regards)|(thank)|(\Whave\W)|(\Wme\W)|(\Wmy\W)|(\Wyou\W)|(\WI\W))/,S.personSig));

--create view Signature as
select S.person as person, S.personSig as block
into Signature
from SignatureBlockCandRetained S
consolidate on S.personSig;

create view PersonsPhoneOutput2 as
select S.person as person, N.num as phone, S.block as personphone
from Signature S, PhoneNumber N
where Contains(S.block, N.num);

create view PersonsAddressOutput2 as
select S.person as person, A.loc as address, S.block as personaddress
from Signature S, Address A
where Contains(S.block, A.loc);

create view PersonsEmailAddressOutput2 as
select S.person as person, E.email as email, S.block as personemail
from Signature S, EmailAddress E
where Contains(S.block, E.email);

--Combine signature output with Person binary relationship
create view PersonsPhoneOutputAll as
(select R.person as person, R.phone as phone, R.personphone as personphone from PersonsPhoneOutput1 R)
union all 
(select R.person as person, R.phone as phone, R.personphone as personphone from PersonsPhoneOutput2 R);

select R.person as person, R.phone as phone, R.personphone as personphone 
into PersonsPhoneOutput
from PersonsPhoneOutputAll R;

create view PersonsAddressOutputAll as
(select R.person as person, R.address as address, R.personaddress as personaddress from PersonsAddressOutput1 R)
union all 
(select R.person as person, R.address as address, R.personaddress as personaddress from PersonsAddressOutput2 R);
 
select R.person as person, R.address as address, R.personaddress as personaddress 
into PersonsAddressOutput
from PersonsAddressOutputAll R; 
 
create view PersonsEmailAddressOutputAll as
(select R.person as person, R.email as email, R.personemail as personemail from PersonsEmailAddressOutput1 R)
union all 
(select R.person as person, R.email as email, R.personemail as personemail from PersonsEmailAddressOutput2 R);
 
select R.person as person, R.email as email, R.personemail as personemail 
into PersonsEmailAddressOutput
from PersonsEmailAddressOutputAll R;

