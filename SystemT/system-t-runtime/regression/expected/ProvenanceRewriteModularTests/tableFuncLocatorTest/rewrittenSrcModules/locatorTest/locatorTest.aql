module locatorTest;


require document with columns
  text Text;

create function MyTableFunc(
  firstArg table (spanVal Span) as locator  ,secondArg table (spanVal Span, strVal Text) as locator)
return table (outSpan1 Span, outSpan2 Span, outStr Text)
external_name 'tableFnTestsUDFs.jar:com.ibm.test.udfs.TableConsumingTableFunc!eval'
language java
deterministic
called on null input

;


create function MyScalarFunc(
  firstArg table (spanVal Span) as locator  ,secondArg table (spanVal Span, strVal Text) as locator)
return Text
external_name 'tableFnTestsUDFs.jar:com.ibm.test.udfs.TableConsumingScalarFunc!eval'
language java
deterministic
called on null input

;


create function StringSearchScalarFunc(
  target Span  ,searchStrings table (str Span) as locator)
return Boolean
external_name 'tableFnTestsUDFs.jar:com.ibm.test.udfs.StringSearchScalarFunc!eval'
language java
deterministic
return null on null input

;


create function DoubleStringSearchScalarFunc(
  target1 Span  ,target2 Span  ,searchStrings table (str Span) as locator)
return Boolean
external_name 'tableFnTestsUDFs.jar:com.ibm.test.udfs.DoubleStringSearchScalarFunc!eval'
language java
deterministic
return null on null input

;


create function MySimpleTableFunc(
  intArg Integer)
return table (stringVal Text, realVal Float)
external_name 'tableFnTestsUDFs.jar:com.ibm.test.udfs.BasicTableFunc!eval'
language java
deterministic
called on null input

;


create view FirstInputView as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____D____id,
    regex /\d+/
    with flags 'DOTALL'
    on between 1 and 1 tokens in D.text
    return group 0 as match
  from Document D;

output view FirstInputView;

create view FirstInputViewCopy as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____D____id,
    regex /\d+/
    with flags 'DOTALL'
    on between 1 and 1 tokens in D.text
    return group 0 as match
  from Document D;

output view FirstInputViewCopy;



create view FirstScalarInputView as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____D____id,
    regex /\d+/
    with flags 'DOTALL'
    on between 1 and 1 tokens in D.text
    return group 0 as match
  from Document D;

output view FirstScalarInputView;

create view SecondInputView as
  select  S.match as spanCol,
          'Dummy string' as textCol,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as __Subquery__1__Temp_____sep_____S____id
  from  __Subquery__1__Temp S;

output view SecondInputView;



create view TabFuncOutput as
  select  MyTableFunc.outSpan1 as outSpan1,
          MyTableFunc.outSpan2 as outSpan2,
          MyTableFunc.outStr as outStr,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          MyTableFunc.__auto__id as __TableFunction__2__Temp_____sep_____MyTableFunc____id
  from  __TableFunction__2__Temp MyTableFunc;

output view TabFuncOutput;



create view TabFuncOutput2 as
  select  T.outSpan1 as span1,
          T.outSpan2 as span2,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __TableFunction__2__Temp_____sep_____T____id
  from  __TableFunction__2__Temp T;

output view TabFuncOutput2;



create view ScalarFuncOutput as
  select  MyScalarFunc(__TableLocator__4__Temp, __TableLocator__5__Temp) as func,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as Document_____sep_____D____id
  from  Document D;

output view ScalarFuncOutput;



create view ScalarFuncOutput2 as
  select  ToLowerCase(MyScalarFunc(__TableLocator__4__Temp, __TableLocator__5__Temp)) as lc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as Document_____sep_____D____id
  from  Document D;

output view ScalarFuncOutput2;



create view CapsWord as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____D____id,
    regex /[A-Z][a-z]+/
    with flags 'DOTALL'
    on between 1 and 1 tokens in D.text
    return group 0 as match
  from Document D;

output view CapsWord;

create view CapsWordCopy as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____D____id,
    regex /[A-Z][a-z]+/
    with flags 'DOTALL'
    on between 1 and 1 tokens in D.text
    return group 0 as match
  from Document D;

output view CapsWordCopy;



create view StringSearchOutput as
  select  D.text as text,
          StringSearchScalarFunc(D.text, __TableLocator__6__Temp) as searchResult,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as Document_____sep_____D____id
  from  Document D;

output view StringSearchOutput;



create view TabFuncCallingScalar as
  select  T.stringVal as stringVal,
          T.realVal as realVal,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __TableFunction__3__Temp_____sep_____T____id
  from  __TableFunction__3__Temp T;

output view TabFuncCallingScalar;











create view __Subquery__1__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____D____id,
    regex /[A-Z][a-z]+/
    with flags 'DOTALL'
    on between 1 and 1 tokens in D.text
    return group 0 as match
  from Document D;

output view __Subquery__1__Temp;

create view __TableFunction__2__Temp as
  select  T.* ,
          AutoID() as __auto__id,
          'STMT_TYPE_TABLE_FUNC' as __stmt__type,
          'MyTableFunc(<FirstInputView>, <SecondInputView>)' as __display__name,
          -1 as MyTableFunc_____sep_____MyTableFunc____id
  from  MyTableFunc(
  __TableLocator__7__Temp,
  __TableLocator__5__Temp
) T;

output view __TableFunction__2__Temp;

create view __TableFunction__3__Temp as
  select  T.* ,
          AutoID() as __auto__id,
          'STMT_TYPE_TABLE_FUNC' as __stmt__type,
          'MySimpleTableFunc(Case(Equals(\'hello world\', MyScalarFunc(<FirstScalarInputView>, <SecondInputView>)), 2, 3))' as __display__name,
          -1 as MySimpleTableFunc_____sep_____T____id
  from  MySimpleTableFunc(
  Case(Equals('hello world', MyScalarFunc(__TableLocator__4__Temp, __TableLocator__5__Temp)), 2, 3)
) T;

output view __TableFunction__3__Temp;

create view __TableLocator__4__Temp as
  select  Op.match as match
  from  FirstScalarInputView Op;

create view __TableLocator__5__Temp as
  select  Op.spanCol as spanCol,
          Op.textCol as textCol
  from  SecondInputView Op;

create view __TableLocator__6__Temp as
  select  Op.match as match
  from  CapsWord Op;

create view __TableLocator__7__Temp as
  select  Op.match as match
  from  FirstInputView Op;

