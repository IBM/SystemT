module common;


create view M_PercentageNumber as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____D____id,
    regex /\d+(\.\d+)?\s?\%/
    with flags 'DOTALL'
    on D.text
    return group 0 as match
  from Document D;

output view M_PercentageNumber;





create dictionary "Units_Dict"
with case insensitive
as (
  'sec',
  'seconds',
  'min',
  'minutes',
  'hours',
  'days',
  'day',
  'hour',
  'minute',
  'second',
  'seconds',
  'milliseconds',
  'microseconds',
  'bytes',
  'KB',
  'MB',
  'GB',
  'KBps',
  'KB/s',
  'MBps',
  'MB/s',
  'GBps',
  'GB/s',
  'MHz',
  'GHz',
  'gigaHertz',
  'megaHertz',
  'V',
  'processes',
  'users'
);


create view GeneralUnits as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as Document_____sep_____D____id,
    dictionary 'Units_Dict'
    on D.text as unit
  from Document D
  consolidate on unit using 'ContainedWithin';

output view GeneralUnits;

create view GeneralUnitsContext as
  select  D.unit as unit,
          LeftContextTok(D.unit, 3) as l_context,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as GeneralUnits_____sep_____D____id
  from  GeneralUnits D;

output view GeneralUnitsContext;

create view GeneralMeasure as
  extract D.unit as measure_type,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    D.__auto__id as GeneralUnitsContext_____sep_____D____id,
    regex /\b\d+(\.\d+)?/
    with flags 'DOTALL'
    on D.l_context
    return group 0 as measure
  from GeneralUnitsContext D;

output view GeneralMeasure;

create view GeneralMeasureInterim as
  select  CombineSpans(D.measure, D.measure_type) as measure_span,
          D.measure as measure,
          D.measure_type as measure_type,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as GeneralMeasure_____sep_____D____id
  from  GeneralMeasure D
  where MatchesRegex(/\s*/, SpanBetween(D.measure, D.measure_type));

output view GeneralMeasureInterim;

create view GeneralMeasureOutput as
  select  D.measure as span,
          GetString(D.measure) as text,
          GetString('GeneralMeasure') as field_type,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as GeneralMeasureInterim_____sep_____D____id
  from  GeneralMeasureInterim D;

output view GeneralMeasureOutput;

export view common.GeneralMeasureOutput;


create view PercentageOutput as
  select  D.match as span,
          GetString(D.match) as text,
          GetString('Percentage') as field_type,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as M_PercentageNumber_____sep_____D____id
  from  M_PercentageNumber D;

output view PercentageOutput;

export view common.PercentageOutput;


