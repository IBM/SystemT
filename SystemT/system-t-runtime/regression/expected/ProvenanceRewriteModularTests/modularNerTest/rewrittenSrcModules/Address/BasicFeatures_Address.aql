module Address;


import view DocumentDetagged from module InputDocumentProcessor as DocumentText
;


import dictionary AddressStreetSuffix from module Dictionaries as AddressStreetSuffix
;


import dictionary AddressStreetSuffixWeak from module Dictionaries as AddressStreetSuffixWeak
;


import dictionary AddressBuildingUnits from module Dictionaries as AddressBuildingUnits
;


import dictionary RoadAbbreviations from module Dictionaries as RoadAbbreviations
;


require document with columns
  text Text;

create view OptionalGapBlock as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__125__Temp_____sep_____R____id
  from  __Subquery__125__Temp R;

output view OptionalGapBlock;

create view StreetSuffixNoCase as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__126__Temp_____sep_____D____id
  from  __Subquery__126__Temp D;

output view StreetSuffixNoCase;

create view StreetSuffixWeakNoCase as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__127__Temp_____sep_____D____id
  from  __Subquery__127__Temp D;

output view StreetSuffixWeakNoCase;

create view SecondaryUnitNoCase as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__128__Temp_____sep_____D____id
  from  __Subquery__128__Temp D;

output view SecondaryUnitNoCase;

create view NumCP as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__129__Temp_____sep_____R____id
  from  __Subquery__129__Temp R
  where Not(MatchesRegex(/[1-9]\p{Nd}{3}[,-]\s+.*/, R.match));

output view NumCP;

create view NumForHighwayAddress as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__130__Temp_____sep_____R____id
  from  __Subquery__130__Temp R;

output view NumForHighwayAddress;

create view HighwayDictionary as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__131__Temp_____sep_____D____id
  from  __Subquery__131__Temp D;

output view HighwayDictionary;

create view HighwayNum as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__132__Temp_____sep_____R____id
  from  __Subquery__132__Temp R;

output view HighwayNum;

create view GermanZipcode as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__133__Temp_____sep_____R____id
  from  __Subquery__133__Temp R;

output view GermanZipcode;

create view GermanStreetAddressSuffix1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__134__Temp_____sep_____R____id
  from  __Subquery__134__Temp R;

output view GermanStreetAddressSuffix1;

create view GermanStreetAddressSuffix2 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__135__Temp_____sep_____R____id
  from  __Subquery__135__Temp R;

output view GermanStreetAddressSuffix2;

create view GermanStreetAddress2 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__136__Temp_____sep_____R____id
  from  __Subquery__136__Temp R;

output view GermanStreetAddress2;

create view __Subquery__125__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /(>>)+/
    with flags 'DOTALL'
    on between 1 and 12 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__125__Temp;

create view __Subquery__126__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'AddressStreetSuffix'
    on D.text as match
  from DocumentText D;

output view __Subquery__126__Temp;

create view __Subquery__127__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'AddressStreetSuffixWeak'
    on D.text as match
  from DocumentText D;

output view __Subquery__127__Temp;

create view __Subquery__128__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'AddressBuildingUnits'
    on D.text as match
  from DocumentText D;

output view __Subquery__128__Temp;

create view __Subquery__129__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /(([1-9\p{L}]\p{M}*[[\p{Nd}\p{L}\-\,]\p{M}*]*)?\p{Nd}([\p{Nd}\p{L}\-\,]\p{M}*)*)/
    with flags 'DOTALL'
    on between 1 and 20 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__129__Temp;

create view __Subquery__130__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /\p{Nd}{1,5}-?(\p{Lu}\p{M}*)?/
    with flags 'DOTALL'
    on between 1 and 3 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__130__Temp;

create view __Subquery__131__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'RoadAbbreviations'
    with flags 'Exact'
    on D.text as match
  from DocumentText D;

output view __Subquery__131__Temp;

create view __Subquery__132__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /[1-9]\p{Nd}{0,2}(\s*(N|S|E|W))?(\s*(N|S|E|W))?/
    with flags 'DOTALL'
    on between 1 and 3 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__132__Temp;

create view __Subquery__133__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /(D-)?\p{Nd}{4,5}/
    with flags 'DOTALL'
    on between 1 and 3 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__133__Temp;

create view __Subquery__134__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /(\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20})?([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]ämme|[Gg]asse|[Gg]aerten|[Gg]ärten|[Hh]alde|[Hh]öfe|[Hh]of|[Hh]oefe|[Ll]andstraße|[Ll]andstrasse|[Mm]ärkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]lätze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]traße|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)\s*,?\s*([[1-9]\p{L}\p{M}*\-\,])*\p{Nd}([\p{Nd}\p{L}\p{M}*\/\-\,])*/
    with flags 'DOTALL'
    on between 1 and 25 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__134__Temp;

create view __Subquery__135__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /(An [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*(Brücke|Park|Postfach|Hauptbahnhof)\b\s*,?\s*([[1-9]\p{L}\p{M}*\-\,])*\p{Nd}([\p{Nd}\p{L}\p{M}*\/\-\,])*/
    with flags 'DOTALL'
    on between 1 and 25 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__135__Temp;

create view __Subquery__136__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]ämme|[Gg]asse|[Gg]aerten|[Gg]ärten|[Hh]alde|[Hh]öfe|[Hh]of|[Hh]oefe|[Ll]andstraße|[Ll]andstrasse|[Mm]ärkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]lätze|[Pp]laetze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]traße|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)[ \t]+([Aa]n [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}\s*,?\s*([[1-9]\p{L}\p{M}*\-\,]*\p{Nd}[\p{Nd}\p{L}\p{M}*\/\-\,]*)/
    with flags 'DOTALL'
    on between 1 and 25 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__136__Temp;

