module CommonFeatures;


import view DocumentDetagged from module InputDocumentProcessor as DocumentText
;


import dictionary WorldCountries from module Dictionaries as WorldCountries
;


import dictionary ProvincesOfCanada from module Dictionaries as ProvincesOfCanada
;


import dictionary ProvincesOfChina from module Dictionaries as ProvincesOfChina
;


import dictionary ProvincesOfRussia from module Dictionaries as ProvincesOfRussia
;


import dictionary ProvincesOfSouthKorea from module Dictionaries as ProvincesOfSouthKorea
;


import dictionary ProvincesOfSpain from module Dictionaries as ProvincesOfSpain
;


import dictionary ProvincesOfTurkey from module Dictionaries as ProvincesOfTurkey
;


import dictionary StatesOfUSA from module Dictionaries as StatesOfUSA
;


import dictionary StatesOfIndia from module Dictionaries as StatesOfIndia
;


import dictionary StatesOfFrance from module Dictionaries as StatesOfFrance
;


import dictionary StatesOfItaly from module Dictionaries as StatesOfItaly
;


import dictionary StatesOfIran from module Dictionaries as StatesOfIran
;


import dictionary StatesOfMexico from module Dictionaries as StatesOfMexico
;


import dictionary StatesOfAustralia from module Dictionaries as StatesOfAustralia
;


import dictionary StatesOfBrazil from module Dictionaries as StatesOfBrazil
;


import dictionary PrefecturesOfJapan from module Dictionaries as PrefecturesOfJapan
;


import dictionary WorldFinancialExchangesAbbreviations from module Dictionaries as WorldFinancialExchangesAbbreviations
;


import dictionary WorldFinancialExchangesTickers from module Dictionaries as WorldFinancialExchangesTickers
;


import dictionary WorldCitiesLong from module Dictionaries as WorldCitiesLong
;


import dictionary WorldCitiesShort from module Dictionaries as WorldCitiesShort
;


import dictionary CitiesOfUSASanFranciscoBayArea from module Dictionaries as CitiesOfUSASanFranciscoBayArea
;


import dictionary CitiesOfChina from module Dictionaries as CitiesOfChina
;


import dictionary CitiesOfUK from module Dictionaries as CitiesOfUK
;


import dictionary CitiesOfRussia from module Dictionaries as CitiesOfRussia
;


import dictionary CitiesOfFrance from module Dictionaries as CitiesOfFrance
;


import dictionary CitiesOfIran from module Dictionaries as CitiesOfIran
;


import dictionary CitiesOfIndia from module Dictionaries as CitiesOfIndia
;


import dictionary CitiesOfBrazil from module Dictionaries as CitiesOfBrazil
;


import dictionary CitiesOfItaly from module Dictionaries as CitiesOfItaly
;


import dictionary CitiesOfMexico from module Dictionaries as CitiesOfMexico
;


import dictionary CitiesOfSouthKorea from module Dictionaries as CitiesOfSouthKorea
;


import dictionary CitiesOfSpain from module Dictionaries as CitiesOfSpain
;


import dictionary CitiesOfIndonesia from module Dictionaries as CitiesOfIndonesia
;


import dictionary CitiesOfAustralia from module Dictionaries as CitiesOfAustralia
;


import dictionary CitiesOfTaiwan from module Dictionaries as CitiesOfTaiwan
;


import dictionary CitiesOfTurkey from module Dictionaries as CitiesOfTurkey
;


import dictionary CitiesOfSerbia from module Dictionaries as CitiesOfSerbia
;


import dictionary CitiesOfNetherlands from module Dictionaries as CitiesOfNetherlands
;


import dictionary StateCapitalsOfUSA from module Dictionaries as StateCapitalsOfUSA
;


import dictionary StatesOfUSAAbbreviations from module Dictionaries as StatesOfUSAAbbreviations
;


import dictionary StatesOfUSAAbbreviationsChicagoAP from module Dictionaries as StatesOfUSAAbbreviationsChicagoAP
;


import dictionary ProvincesOfCanadaAbbreviations from module Dictionaries as ProvincesOfCanadaAbbreviations
;


import dictionary CitiesOfUSA from module Dictionaries as CitiesOfUSA
;


import dictionary CitiesOfGermany from module Dictionaries as CitiesOfGermany
;


import dictionary WorldNationalities from module Dictionaries as WorldNationalities
;


require document with columns
  text Text;

create view USCity as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__69__Temp_____sep_____D____id
  from  __Subquery__69__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.+/, D.match);

output view USCity;

create view GermanCities as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__70__Temp_____sep_____D____id
  from  __Subquery__70__Temp D;

output view GermanCities;

create view CountryCandidate as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__71__Temp_____sep_____D____id
  from  __Subquery__71__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.+/, D.match);

output view CountryCandidate;

create view StatesFromOtherMajorCountries as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionaries 'ProvincesOfChina'
                   and 'ProvincesOfRussia'
                   and 'ProvincesOfSouthKorea'
                   and 'ProvincesOfSpain'
                   and 'ProvincesOfTurkey'
                   and 'StatesOfIndia'
                   and 'StatesOfFrance'
                   and 'StatesOfItaly'
                   and 'StatesOfIran'
                   and 'StatesOfMexico'
                   and 'StatesOfAustralia'
                   and 'StatesOfBrazil'
                   and 'PrefecturesOfJapan'
    with flags 'Exact'
    on D.text as match
  from DocumentText D;

output view StatesFromOtherMajorCountries;

create view USStateCandidate as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__72__Temp_____sep_____D____id
  from  __Subquery__72__Temp D;

output view USStateCandidate;

create view CanadianProvinceCandidate as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__73__Temp_____sep_____D____id
  from  __Subquery__73__Temp D;

output view CanadianProvinceCandidate;

create view StockExchanges1 as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'WorldFinancialExchangesAbbreviations'
    with flags 'Exact'
    on D.text as match
  from DocumentText D;

output view StockExchanges1;

create view StockExchange2 as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'WorldFinancialExchangesTickers'
    with flags 'Exact'
    on D.text as exchange
  from DocumentText D;

output view StockExchange2;

create view MajorCity as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionaries 'WorldCitiesLong'
                   and 'WorldCitiesShort'
                   and 'CitiesOfUSASanFranciscoBayArea'
                   and 'CitiesOfChina'
                   and 'CitiesOfUK'
                   and 'CitiesOfRussia'
                   and 'CitiesOfFrance'
                   and 'CitiesOfIran'
                   and 'CitiesOfIndia'
                   and 'CitiesOfBrazil'
                   and 'CitiesOfItaly'
                   and 'CitiesOfMexico'
                   and 'CitiesOfSouthKorea'
                   and 'CitiesOfSpain'
                   and 'CitiesOfIndonesia'
                   and 'CitiesOfAustralia'
                   and 'CitiesOfTaiwan'
                   and 'CitiesOfTurkey'
                   and 'CitiesOfSerbia'
                   and 'CitiesOfNetherlands'
                   and 'StateCapitalsOfUSA'
    on D.text as match
  from DocumentText D;

output view MajorCity;

create view Zipcode as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__74__Temp_____sep_____R____id
  from  __Subquery__74__Temp R;

output view Zipcode;

create view USStateStrongAbbrev as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionaries 'StatesOfUSAAbbreviations'
                   and 'StatesOfUSAAbbreviationsChicagoAP'
    with flags 'Exact'
    on D.text as match
  from DocumentText D;

output view USStateStrongAbbrev;

create view CanadianProvinceStrongAbbrev as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__75__Temp_____sep_____D____id
  from  __Subquery__75__Temp D;

output view CanadianProvinceStrongAbbrev;

create view CanadianProvinceWeakAbbrev as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__76__Temp_____sep_____D____id
  from  __Subquery__76__Temp D;

output view CanadianProvinceWeakAbbrev;

create view USStateWeakAbbrev as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionaries 'StatesOfUSAAbbreviations'
                   and 'StatesOfUSAAbbreviationsChicagoAP'
    on D.text as match
  from DocumentText D;

output view USStateWeakAbbrev;

create view __Subquery__69__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'CitiesOfUSA'
    on D.text as match
  from DocumentText D;

output view __Subquery__69__Temp;

create view __Subquery__70__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'CitiesOfGermany'
    on D.text as match
  from DocumentText D;

output view __Subquery__70__Temp;

create view __Subquery__71__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'WorldCountries'
    on D.text as match
  from DocumentText D;

output view __Subquery__71__Temp;

create view __Subquery__72__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'StatesOfUSA'
    on D.text as match
  from DocumentText D;

output view __Subquery__72__Temp;

create view __Subquery__73__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'ProvincesOfCanada'
    on D.text as match
  from DocumentText D;

output view __Subquery__73__Temp;

create view __Subquery__74__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /\p{Nd}{5}(\-\p{Nd}{4})?/
    with flags 'DOTALL'
    on between 1 and 3 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__74__Temp;

create view __Subquery__75__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'ProvincesOfCanadaAbbreviations'
    with flags 'Exact'
    on D.text as match
  from DocumentText D;

output view __Subquery__75__Temp;

create view __Subquery__76__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'ProvincesOfCanadaAbbreviations'
    on D.text as match
  from DocumentText D;

output view __Subquery__76__Temp;

