module PhoneNumber;


create view StrongPhone as
  select  CombineSpans(SPV.match, PNI.match) as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          SPV.__auto__id as StrongPhoneVariant_____sep_____SPV____id,
          PNI.__auto__id as CorrectPhoneNumberInstance_____sep_____PNI____id
  from  StrongPhoneVariant SPV,
        CorrectPhoneNumberInstance PNI
  where FollowsTok(SPV.match, PNI.match, 0, 4)
     and MatchesRegex(/(([Nn](umber|o|um)|#)\s*(is\s*)?)?\W*/, SpanBetween(SPV.match, PNI.match))
     and Not(ContainsRegex(/[\n\r]/, SpanBetween(SPV.match, PNI.match)));

output view StrongPhone;

create view StrongPhoneNumber as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__16__Temp_____sep_____R____id
  from  __Subquery__16__Temp R;

output view StrongPhoneNumber;

create view PhoneNumber_R1a as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__17__Temp_____sep_____R____id,
          Var.__auto__id as PhoneVariant_____sep_____Var____id
  from  __Subquery__17__Temp R,
        PhoneVariant Var
  where FollowsTok(Var.annot, R.match, 0, 2)
     and MatchesRegex(/\s*\.{0,10}\s*/, SpanBetween(Var.annot, R.match));

output view PhoneNumber_R1a;

create view PhoneNumber_R1b_2 as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__18__Temp_____sep_____R____id
  from  __Subquery__18__Temp R;

output view PhoneNumber_R1b_2;

create view PhoneNumber_R2a as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__19__Temp_____sep_____R____id
  from  __Subquery__19__Temp R;

output view PhoneNumber_R2a;

create view PhoneNumber_R3 as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__20__Temp_____sep_____R____id
  from  __Subquery__20__Temp R;

output view PhoneNumber_R3;

create view PhoneNumber_R3a as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__21__Temp_____sep_____R____id
  from  __Subquery__21__Temp R;

output view PhoneNumber_R3a;

create view PhoneNumber_R4 as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__22__Temp_____sep_____R____id
  from  __Subquery__22__Temp R;

output view PhoneNumber_R4;

create view PhoneNumber_R5 as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__23__Temp_____sep_____R____id
  from  __Subquery__23__Temp R;

output view PhoneNumber_R5;

create view PhoneNumber_R7a_7b_7c as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__24__Temp_____sep_____R____id,
          Var.__auto__id as PhoneVariant_____sep_____Var____id
  from  __Subquery__24__Temp R,
        PhoneVariant Var
  where FollowsTok(Var.annot, R.match, 0, 2)
     and MatchesRegex(/\s*\.{0,10}\s*/, SpanBetween(Var.annot, R.match));

output view PhoneNumber_R7a_7b_7c;

create view PhoneNumber_R8ILPhone as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__25__Temp_____sep_____R____id
  from  __Subquery__25__Temp R;

output view PhoneNumber_R8ILPhone;

create view __Subquery__16__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Sp.__auto__id as StrongPhone_____sep_____Sp____id,
    regex /[\p{Nd}(].+/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Sp.num
    return group 0 as match
  from StrongPhone Sp;

output view __Subquery__16__Temp;

create view __Subquery__17__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /\(?\p{Nd}{2,4}[\.\-]?\)?(\s*\(0\)\s*)?(\s*[\-\.]\s*)?(\s*[\s\.\-]\(?\p{Nd}{1,2}(\s*\p{Nd}{2}\s*){1,2}\)?)?(\s*[\s\.\-]?\p{Nd}{2,4})(\s*[\s\.-]?\p{Nd}{1,4}){1,3}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__17__Temp;

create view __Subquery__18__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /(\+\s*)?\(\s*[1-9]\p{Nd}{2}\s*\)\s*[\-\.]?\p{Nd}{3}[\-\.\s*]?\p{Nd}{4}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__18__Temp;

create view __Subquery__19__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /(\+\s*)?[1-9]\p{Nd}{2}\s*[\s\-\.]\p{Nd}{3}[\-\.\s]\s*\p{Nd}{4}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__19__Temp;

create view __Subquery__20__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /\+?(1[\-\.\s]\s*)?(\(\s*)?[1-9]\p{Nd}{2}(\s*\))?[\-\. ]\p{Nd}{3}[\-\. ]\p{Nd}{4}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__20__Temp;

create view __Subquery__21__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /(\+?1[\-\.\s]\s*)?8\p{Nd}{2}\s*[\s\-\.][(?:\p{Lu}\p{M}*)\p{Nd}]{3}[\.\-]?\p{Lu}\p{M}*{4}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__21__Temp;

create view __Subquery__22__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /[Xx][\.\-]?\p{Nd}{4,5}/
    with flags 'DOTALL'
    on between 1 and 3 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__22__Temp;

create view __Subquery__23__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /[Ee]xt\s*[\.\-\:]?\s*\p{Nd}{3,5}/
    with flags 'CASE_INSENSITIVE'
    on between 1 and 3 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__23__Temp;

create view __Subquery__24__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /([1-9]\p{Nd}{1,2}\s*[\(\s\-\.]((\p{Nd}{2}\s*[\)\s\-\.]\p{Nd}{8})|(\p{Nd}{5}\s*[\)\s\-\.]\p{Nd}{5})|(\p{Nd}{2}\s*[\)\s\-\.]\p{Nd}{4}\s*[\s\-\.]\p{Nd}{4})))/
    with flags 'DOTALL'
    on between 1 and 10 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__24__Temp;

create view __Subquery__25__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /(972[\-\.]\p{Nd}{1,2}[\-\.]\p{Nd}{7})/
    with flags 'DOTALL'
    on between 1 and 5 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__25__Temp;

