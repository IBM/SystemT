module Region;


import view DocumentDetagged from module InputDocumentProcessor as DocumentText
;


import dictionary CardinalDirections from module Dictionaries as CardinalDirections
;


import dictionary WorldRegions from module Dictionaries as WorldRegions
;


import dictionary WorldRegionsUnderConflict from module Dictionaries as WorldRegionsUnderConflict
;


import dictionary RegionsOfUSA from module Dictionaries as RegionsOfUSA
;


import dictionary RegionsOfUK from module Dictionaries as RegionsOfUK
;


import dictionary RegionsOfChina from module Dictionaries as RegionsOfChina
;


import dictionary RegionsOfRussia from module Dictionaries as RegionsOfRussia
;


import dictionary RegionsOfCanada from module Dictionaries as RegionsOfCanada
;


import dictionary RegionsOfIndia from module Dictionaries as RegionsOfIndia
;


import dictionary RegionsSuffixClues from module Dictionaries as RegionsSuffixClues
;


import dictionary FinancialHubs from module Dictionaries as FinancialHubs
;


import dictionary HeritageSites from module Dictionaries as HeritageSites
;


import dictionary PoliticalCentres from module Dictionaries as PoliticalCentres
;


import dictionary SportingVenues from module Dictionaries as SportingVenues
;


import dictionary FamousSquares from module Dictionaries as FamousSquares
;


import dictionary TechnologyHubs from module Dictionaries as TechnologyHubs
;


require document with columns
  text Text;

create view DirectionCandidate as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__359__Temp_____sep_____D____id
  from  __Subquery__359__Temp D;

output view DirectionCandidate;

create view InternationalRegionCandidate as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionaries 'WorldRegions'
                   and 'WorldRegionsUnderConflict'
    on D.text as match
  from DocumentText D
  having MatchesRegex(/\p{Lu}\p{M}*.+/, match);

output view InternationalRegionCandidate;

create view DomesticRegion1 as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionaries 'RegionsOfUSA'
                   and 'RegionsOfUK'
                   and 'RegionsOfChina'
                   and 'RegionsOfRussia'
                   and 'RegionsOfCanada'
                   and 'RegionsOfIndia'
    on D.text as match
  from DocumentText D
  having MatchesRegex(/\p{Lu}\p{M}*.+/, match);

output view DomesticRegion1;

create view RegionClue as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'RegionsSuffixClues'
    with flags 'Exact'
    on D.text as match
  from DocumentText D;

output view RegionClue;

create view Landmark as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionaries 'FinancialHubs'
                   and 'HeritageSites'
                   and 'PoliticalCentres'
                   and 'SportingVenues'
                   and 'FamousSquares'
                   and 'TechnologyHubs'
    with flags 'Exact'
    on D.text as match
  from DocumentText D;

output view Landmark;

create view __Subquery__359__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'CardinalDirections'
    with flags 'Exact'
    on D.text as match
  from DocumentText D;

output view __Subquery__359__Temp;

