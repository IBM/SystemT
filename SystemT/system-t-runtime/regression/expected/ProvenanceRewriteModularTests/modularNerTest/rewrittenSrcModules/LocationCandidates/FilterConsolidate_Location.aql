module LocationCandidates;


create view MapLocationAll as
  (select  Op.address as address,
            Op.city as city,
            Op.county as county,
            Op.stateorprovince as stateorprovince,
            Op.zip as zip,
            Op.country as country,
            Op.continent as continent,
            Op.reference as reference,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__408__TempOp__0 Op)
  union all
  (select  Op.address as address,
            Op.city as city,
            Op.county as county,
            Op.stateorprovince as stateorprovince,
            Op.zip as zip,
            Op.country as country,
            Op.continent as continent,
            Op.reference as reference,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__408__TempOp__1 Op)
  union all
  (select  Op.address as address,
            Op.city as city,
            Op.county as county,
            Op.stateorprovince as stateorprovince,
            Op.zip as zip,
            Op.country as country,
            Op.continent as continent,
            Op.reference as reference,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__408__TempOp__2 Op)
  union all
  (select  Op.address as address,
            Op.city as city,
            Op.county as county,
            Op.stateorprovince as stateorprovince,
            Op.zip as zip,
            Op.country as country,
            Op.continent as continent,
            Op.reference as reference,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__408__TempOp__3 Op)
  union all
  (select  Op.address as address,
            Op.city as city,
            Op.county as county,
            Op.stateorprovince as stateorprovince,
            Op.zip as zip,
            Op.country as country,
            Op.continent as continent,
            Op.reference as reference,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__408__TempOp__4 Op)
  union all
  (select  Op.address as address,
            Op.city as city,
            Op.county as county,
            Op.stateorprovince as stateorprovince,
            Op.zip as zip,
            Op.country as country,
            Op.continent as continent,
            Op.reference as reference,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__408__TempOp__5 Op)
  union all
  (select  Op.address as address,
            Op.city as city,
            Op.county as county,
            Op.stateorprovince as stateorprovince,
            Op.zip as zip,
            Op.country as country,
            Op.continent as continent,
            Op.reference as reference,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__408__TempOp__6 Op);

output view MapLocationAll;

create view MapLocation_ as
  select  __t2.address as address,
          __t2.city as city,
          __t2.county as county,
          __t2.stateorprovince as stateorprovince,
          __t2.zip as zip,
          __t2.country as country,
          __t2.continent as continent,
          __t2.reference as reference,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__409__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__409__Temp__1 __t1,
        __Consolidate__409__Temp__2 __t2
  where Or(GreaterThan(GetBegin(__t1.__consolidate__target), GetBegin(__t2.__consolidate__target)), Equals(GetBegin(__t1.__consolidate__target), GetBegin(__t2.__consolidate__target)))
     and Overlaps(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.address, __t2.city, __t2.county, __t2.stateorprovince, __t2.zip, __t2.country, __t2.continent, __t2.reference;

output view MapLocation_;

create view LocationAll as
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__410__TempOp__0 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__410__TempOp__1 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__410__TempOp__2 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__410__TempOp__3 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__410__TempOp__4 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__410__TempOp__5 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__410__TempOp__6 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__410__TempOp__7 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__410__TempOp__8 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__410__TempOp__9 Op);

output view LocationAll;

create view LocationConsolidated as
  select  __t2.loc as loc,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__411__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__411__Temp__1 __t1,
        __Consolidate__411__Temp__2 __t2
  where Or(GreaterThan(GetBegin(__t1.__consolidate__target), GetBegin(__t2.__consolidate__target)), Equals(GetBegin(__t1.__consolidate__target), GetBegin(__t2.__consolidate__target)))
     and Overlaps(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.loc;

output view LocationConsolidated;

create view WrongLocation4 as
  select  L.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as OrganizationConsolidated_____sep_____O____id,
          L.__auto__id as LocationConsolidated_____sep_____L____id
  from  OrganizationConsolidated O,
        LocationConsolidated L
  where Contains(O.organization, L.loc);

output view WrongLocation4;

create view WrongLocation6 as
  select  L.match as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          L.__auto__id as CapsPlaceOnetoTwo_____sep_____L____id,
          T.__auto__id as The_____sep_____T____id,
          C.__auto__id as CapsPlace_____sep_____C____id
  from  CapsPlaceOnetoTwo L,
        The T,
        CapsPlace C
  where FollowsTok(T.match, L.match, 0, 0)
     and FollowsTok(L.match, C.match, 0, 0);

output view WrongLocation6;

create view WrongLocation7 as
  select  L.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          LC.__auto__id as WrongLocationLeftClue_____sep_____LC____id,
          L.__auto__id as LocationConsolidated_____sep_____L____id
  from  WrongLocationLeftClue LC,
        LocationConsolidated L
  where FollowsTok(LC.clue, L.loc, 0, 0);

output view WrongLocation7;

create view WrongLocation8 as
  select  L.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          RC.__auto__id as WrongLocationRightClue_____sep_____RC____id,
          L.__auto__id as LocationConsolidated_____sep_____L____id
  from  WrongLocationRightClue RC,
        LocationConsolidated L
  where FollowsTok(L.loc, RC.clue, 0, 0);

output view WrongLocation8;

create view WrongLocation as
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__412__TempOp__0 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__412__TempOp__1 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__412__TempOp__2 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__412__TempOp__3 Op);

output view WrongLocation;

create view CityExtended as
  select  CombineSpans(C.loc, CR.match) as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as LocationConsolidated_____sep_____C____id,
          CR.__auto__id as CityRightClue_____sep_____CR____id
  from  LocationConsolidated C,
        CityRightClue CR
  where FollowsTok(C.loc, CR.match, 0, 0)
     and MatchesRegex(/\p{Lu}\p{M}*.*/, CR.match);

output view CityExtended;

create view LocationExtendedtoRight as
  select  CombineSpans(C.loc, S.match) as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as LocationConsolidated_____sep_____C____id,
          S.__auto__id as RightMergeableContext_____sep_____S____id
  from  LocationConsolidated C,
        RightMergeableContext S
  where FollowsTok(C.loc, S.match, 0, 0)
     and Not(ContainsRegex(/[\n\r\t]/, SpanBetween(C.loc, S.match)));

output view LocationExtendedtoRight;

create view LocationExtendedtoLeft as
  select  CombineSpans(S.clue, C.loc) as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as LocationConsolidated_____sep_____C____id,
          S.__auto__id as LeftMergeableContext_____sep_____S____id
  from  LocationConsolidated C,
        LeftMergeableContext S
  where FollowsTok(S.clue, C.loc, 0, 0)
     and Not(ContainsRegex(/[\n\r\t]/, SpanBetween(S.clue, C.loc)));

output view LocationExtendedtoLeft;

create view LocationExtended as
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__413__TempOp__0 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__413__TempOp__1 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__413__TempOp__2 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__413__TempOp__3 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__413__TempOp__4 Op);

output view LocationExtended;

create view LocationExtendedConsolidated as
  select  __t2.loc as loc,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__414__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__414__Temp__1 __t1,
        __Consolidate__414__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.loc;

output view LocationExtendedConsolidated;

create view LocationExtendedValidAll as
  select  Op.loc as loc,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__415__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__415__TempOp__1 Op,
        __Minus__415__Temp __t
  where Equals(Op.loc, __t.loc);

output view LocationExtendedValidAll;

create view LocationTokenCandidates as
  select  CW.match as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          L.__auto__id as __Subquery__416__Temp_____sep_____L____id,
          CW.__auto__id as __Subquery__417__Temp_____sep_____CW____id
  from  __Subquery__416__Temp L,
        __Subquery__417__Temp CW
  where Equals(GetText(L.normLoc), GetText(CW.normMatch))
     and Not(MatchesRegex(/\s*\p{Lu}\p{M}*.*/, RightContextTok(CW.match, 1)))
     and Not(MatchesRegex(/\p{Lu}\p{M}*.*\s*/, LeftContextTok(CW.match, 1)))
     and Not(MatchesRegex(/\.\s+In/, CombineSpans(LeftContextTok(CW.match, 1), CW.match)));

output view LocationTokenCandidates;

create view LocationTokenCandidatesConsolidated as
  select  __t2.loc as loc,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__418__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__418__Temp__1 __t1,
        __Consolidate__418__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.loc;

output view LocationTokenCandidatesConsolidated;

create view __Consolidate__409__Temp__1 as
  select  C.address as address,
          C.city as city,
          C.county as county,
          C.stateorprovince as stateorprovince,
          C.zip as zip,
          C.country as country,
          C.continent as continent,
          C.reference as reference,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as MapLocationAll_____sep_____C____id,
          C.reference as __consolidate__target
  from  MapLocationAll C;

output view __Consolidate__409__Temp__1;

create view __Consolidate__409__Temp__2 as
  select  __t1.address as address,
          __t1.city as city,
          __t1.county as county,
          __t1.stateorprovince as stateorprovince,
          __t1.zip as zip,
          __t1.country as country,
          __t1.continent as continent,
          __t1.reference as reference,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__409__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'LeftToRight';

output view __Consolidate__409__Temp__2;

create view __Consolidate__411__Temp__1 as
  select  C.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as LocationAll_____sep_____C____id,
          C.loc as __consolidate__target
  from  LocationAll C;

output view __Consolidate__411__Temp__1;

create view __Consolidate__411__Temp__2 as
  select  __t1.loc as loc,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__411__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'LeftToRight';

output view __Consolidate__411__Temp__2;

create view __Consolidate__414__Temp__1 as
  select  L.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          L.__auto__id as LocationExtended_____sep_____L____id,
          L.loc as __consolidate__target
  from  LocationExtended L;

output view __Consolidate__414__Temp__1;

create view __Consolidate__414__Temp__2 as
  select  __t1.loc as loc,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__414__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__414__Temp__2;

create view __Consolidate__418__Temp__1 as
  select  L.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          L.__auto__id as LocationTokenCandidates_____sep_____L____id,
          L.loc as __consolidate__target
  from  LocationTokenCandidates L;

output view __Consolidate__418__Temp__1;

create view __Consolidate__418__Temp__2 as
  select  __t1.loc as loc,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__418__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__418__Temp__2;

create view __Minus__415__Temp as
  select  __t.loc as loc
  from  
    ((select  Op.loc as loc
      from  __Minus__415__TempOp__1 Op)
    minus
    (select  Op.loc as loc
      from  __Minus__415__TempOp__2 Op)
    ) __t
  group by __t.loc;

output view __Minus__415__Temp;

create view __Minus__415__TempOp__1 as
  select  C.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as LocationExtendedConsolidated_____sep_____C____id
  from  LocationExtendedConsolidated C;

output view __Minus__415__TempOp__1;

create view __Minus__415__TempOp__2 as
  select  C.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as WrongLocation_____sep_____C____id
  from  WrongLocation C;

output view __Minus__415__TempOp__2;

create view __Subquery__416__Temp as
  select  L.loc as loc,
          toUpperCase(L.loc) as normLoc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          L.__auto__id as LocationExtendedValidAll_____sep_____L____id
  from  LocationExtendedValidAll L;

output view __Subquery__416__Temp;

create view __Subquery__417__Temp as
  select  CW.match as match,
          toUpperCase(CW.match) as normMatch,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          CW.__auto__id as CapsPlaceOnetoTwo_____sep_____CW____id
  from  CapsPlaceOnetoTwo CW;

output view __Subquery__417__Temp;

create view __Union__408__TempOp__0 as
  select  A.address as address,
          A.city as city,
          '' as county,
          A.stateorprovince as stateorprovince,
          A.zip as zip,
          '' as country,
          '' as continent,
          A.reference as reference,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          A.__auto__id as AddressFinal_____sep_____A____id
  from  AddressFinal A;

output view __Union__408__TempOp__0;

create view __Union__408__TempOp__1 as
  select  '' as address,
          C.city as city,
          '' as county,
          C.stateorprovince as stateorprovince,
          '' as zip,
          C.country as country,
          C.continent as continent,
          C.reference as reference,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as City______sep_____C____id
  from  City_ C;

output view __Union__408__TempOp__1;

create view __Union__408__TempOp__2 as
  select  '' as address,
          '' as city,
          C.county as county,
          C.stateorprovince as stateorprovince,
          '' as zip,
          C.country as country,
          C.continent as continent,
          C.reference as reference,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as County______sep_____C____id
  from  County_ C;

output view __Union__408__TempOp__2;

create view __Union__408__TempOp__3 as
  select  '' as address,
          '' as city,
          '' as county,
          C.stateorprovince as stateorprovince,
          '' as zip,
          C.country as country,
          C.continent as continent,
          C.reference as reference,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as StateOrProvince______sep_____C____id
  from  StateOrProvince_ C;

output view __Union__408__TempOp__3;

create view __Union__408__TempOp__4 as
  select  '' as address,
          '' as city,
          '' as county,
          '' as stateorprovince,
          '' as zip,
          C.country as country,
          C.continent as continent,
          C.reference as reference,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as Country______sep_____C____id
  from  Country_ C;

output view __Union__408__TempOp__4;

create view __Union__408__TempOp__5 as
  select  '' as address,
          '' as city,
          '' as county,
          '' as stateorprovince,
          '' as zip,
          '' as country,
          C.continent as continent,
          C.reference as reference,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as Continent______sep_____C____id
  from  Continent_ C;

output view __Union__408__TempOp__5;

create view __Union__408__TempOp__6 as
  select  '' as address,
          '' as city,
          '' as county,
          '' as stateorprovince,
          C.zip as zip,
          '' as country,
          '' as continent,
          C.reference as reference,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as ZipCode______sep_____C____id
  from  ZipCode_ C;

output view __Union__408__TempOp__6;

create view __Union__410__TempOp__0 as
  select  A.address as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          A.__auto__id as MapLocation______sep_____A____id
  from  MapLocation_ A
  where Not(MatchesRegex(//, A.address));

output view __Union__410__TempOp__0;

create view __Union__410__TempOp__1 as
  select  C.city as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as MapLocation______sep_____C____id
  from  MapLocation_ C
  where MatchesRegex(/.*\p{Lu}\p{M}*.+/, C.city);

output view __Union__410__TempOp__1;

create view __Union__410__TempOp__2 as
  select  C.county as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as MapLocation______sep_____C____id
  from  MapLocation_ C
  where MatchesRegex(/.+/, C.county);

output view __Union__410__TempOp__2;

create view __Union__410__TempOp__3 as
  select  C.stateorprovince as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as MapLocation______sep_____C____id
  from  MapLocation_ C
  where Not(MatchesRegex(//, C.stateorprovince));

output view __Union__410__TempOp__3;

create view __Union__410__TempOp__4 as
  select  C.country as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as MapLocation______sep_____C____id
  from  MapLocation_ C
  where Not(MatchesRegex(//, C.country));

output view __Union__410__TempOp__4;

create view __Union__410__TempOp__5 as
  select  C.continent as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as MapLocation______sep_____C____id
  from  MapLocation_ C
  where Not(MatchesRegex(//, C.continent));

output view __Union__410__TempOp__5;

create view __Union__410__TempOp__6 as
  select  C.match as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as RegionValid_____sep_____C____id
  from  RegionValid C
  where Not(MatchesRegex(//, C.match));

output view __Union__410__TempOp__6;

create view __Union__410__TempOp__7 as
  select  C.facility as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as Facility_____sep_____C____id
  from  Facility C
  where Not(MatchesRegex(//, C.facility));

output view __Union__410__TempOp__7;

create view __Union__410__TempOp__8 as
  select  W.match as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          W.__auto__id as WaterBody_____sep_____W____id
  from  WaterBody W;

output view __Union__410__TempOp__8;

create view __Union__410__TempOp__9 as
  select  L.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          L.__auto__id as PatternBasedLocation_____sep_____L____id
  from  PatternBasedLocation L
  where Not(ContainsRegex(/\n\n/, L.loc));

output view __Union__410__TempOp__9;

create view __Union__412__TempOp__0 as
  select  L.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          L.__auto__id as WrongLocation4_____sep_____L____id
  from  WrongLocation4 L;

output view __Union__412__TempOp__0;

create view __Union__412__TempOp__1 as
  select  L.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          L.__auto__id as WrongLocation6_____sep_____L____id
  from  WrongLocation6 L;

output view __Union__412__TempOp__1;

create view __Union__412__TempOp__2 as
  select  L.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          L.__auto__id as WrongLocation7_____sep_____L____id
  from  WrongLocation7 L;

output view __Union__412__TempOp__2;

create view __Union__412__TempOp__3 as
  select  L.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          L.__auto__id as WrongLocation8_____sep_____L____id
  from  WrongLocation8 L;

output view __Union__412__TempOp__3;

create view __Union__413__TempOp__0 as
  select  C.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as LocationConsolidated_____sep_____C____id
  from  LocationConsolidated C;

output view __Union__413__TempOp__0;

create view __Union__413__TempOp__1 as
  select  C.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as CityExtended_____sep_____C____id
  from  CityExtended C;

output view __Union__413__TempOp__1;

create view __Union__413__TempOp__2 as
  select  C.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as LocationExtendedtoRight_____sep_____C____id
  from  LocationExtendedtoRight C;

output view __Union__413__TempOp__2;

create view __Union__413__TempOp__3 as
  select  C.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as LocationExtendedtoLeft_____sep_____C____id
  from  LocationExtendedtoLeft C;

output view __Union__413__TempOp__3;

create view __Union__413__TempOp__4 as
  select  T.town as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as TownConsolidated_____sep_____T____id
  from  TownConsolidated T;

output view __Union__413__TempOp__4;

