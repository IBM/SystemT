module PersonCandidates;


create view FamousPeople as
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__278__TempOp__0 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__278__TempOp__1 Op);

output view FamousPeople;

create view Initial as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionaries 'Salutations'
                   and 'RolesInOrganizations'
                   and 'RolesInSport'
                   and 'RolesInFamily'
    on D.text as initial
  from DocumentText D
  having MatchesRegex(/((\p{Lu}\p{M}*){2}|((\p{Lu}\p{M}*)?(\p{Ll}\p{M}*){1,10}\s*){1,2}.*)/, initial);

output view Initial;

create view PersonSuffix as
  select  D.match as suffix,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__279__Temp_____sep_____D____id
  from  __Subquery__279__Temp D
  where Not(ContainsRegex(/\s/, D.match));

output view PersonSuffix;

create view CapsPersonCandidate as
  select  R.match as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__280__Temp_____sep_____R____id
  from  __Subquery__280__Temp R
  where Not(ContainsDicts('FiltersForPerson', 'GermanTokensAsFiltersForPerson', 'RolesAsFiltersForPerson', 'RolesAsWeakFiltersForPerson', 'Salutations', 'PhoneWordsAsCluesTwo', 'GlobalSuffixesForOrganizations', 'SuffixesForGroupsOfOrganizations', 'SuffixesForEducationalOrganizations', 'SuffixesForGovernmentOrganizations', 'SuffixesForMedicalOrganizations', 'SuffixesForMediaAndEntertainmentOrganizations', 'SuffixesForNewspaperOrganizations', 'SuffixesForOtherOrganizations', 'StreetBasedAddressSuffixesAsFilters', 'DaysInAWeekFromGregorianCalendar', 'MonthsInAYearFromGregorianCalendar', 'WorldNationalities', 'StatesOfUSAAbbreviations', 'StatesOfUSAAbbreviationsChicagoAP', 'WorldCountries', 'WorldContinents', 'RolesInSport', 'PrepositionsInEnglish', 'ConjunctionsInEnglish', 'WorldEthnicities', 'TokensForOrdinalCounting', 'RolesInFamily', 'RolesInOrganizations', R.match));

output view CapsPersonCandidate;

create view WrongPersonLeftClue as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'LeftContextNegativeCluesForPerson'
    on D.text as clue
  from DocumentText D;

output view WrongPersonLeftClue;

create view WrongPersonRightClue as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'RightContextNegativeCluesForPerson'
    on D.text as clue
  from DocumentText D;

output view WrongPersonRightClue;

create view __Subquery__279__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'RightContextSuffixesForProperNounNames'
    on D.text as match
  from DocumentText D;

output view __Subquery__279__Temp;

create view __Subquery__280__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    regex /(al-|\p{Lu}\p{M}*(\p{L}\p{M}*){0,10})(['-][\p{Lu}\p{M}*])?(\p{L}\p{M}*){1,10}/
    with flags 'DOTALL'
    on between 1 and 4 tokens in D.text
    return group 0 as match
  from DocumentText D;

output view __Subquery__280__Temp;

create view __Union__278__TempOp__0 as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionaries 'WorldLeaders'
                   and 'PresidentsOfUSA'
                   and 'CelebritiesOfUSA'
                   and 'WorldCelebrities'
                   and 'LeadersOfRussia'
                   and 'LeadersOfChina'
                   and 'LeadersOfIndia'
                   and 'LeadersOfJapan'
                   and 'LeadersOfCambodia'
                   and 'LeadersOfUnitedNations'
                   and 'LeadersOfIran'
                   and 'WorldProfessionalSoccerPlayersShort'
                   and 'WorldProfessionalRugbyPlayers'
                   and 'WorldProfessionalMaleTennisPlayers'
                   and 'WorldProfessionalFemaleTennisPlayers'
                   and 'ProfessionalCyclists'
                   and 'ProfessionalGolfers'
                   and 'WorldProfessionalBaseballPlayers'
                   and 'USAMajorLeagueBaseballGoldGloveAwardees'
                   and 'USAMajorLeagueBaseballAllStarPlayers'
                   and 'FormulaOneRacers'
                   and 'ProfessionalCricketersFromPakistan'
                   and 'ProfessionalCricketersFromIndia'
                   and 'ProfessionalCricketersFromAustralia'
                   and 'ProfessionalCricketersFromNewZealand'
                   and 'ProfessionalCricketersFromSriLanka'
                   and 'WorldProfessionalSkiRacers'
                   and 'WorldProfessionalSoccerPlayersLong'
                   and 'MedalistsFrom1996SummerOlympics'
                   and 'MedalistsFrom2000SummerOlympics'
                   and 'MedalistsFrom2002WinterOlympics'
                   and 'IceHockeyPlayersFrom2002WinterOlympics'
                   and 'USOpenBadmintonChampions'
                   and 'ProfessionalRugbyPlayersFromSouthAfrica'
                   and 'ProfessionalRugbyPlayersFromArgentina'
                   and 'ProfessionalRugbyPlayersFromEngland'
                   and 'ProfessionalRugbyPlayersFromItaly'
                   and 'LeadersOfIslamicMovements'
    on D.text as person
  from DocumentText D;

output view __Union__278__TempOp__0;

create view __Union__278__TempOp__1 as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as DocumentText_____sep_____D____id,
    dictionary 'WorldCelebritiesShort'
    on D.text as person
  from DocumentText D
  having MatchesRegex(/\p{Lu}\p{M}*/, person);

output view __Union__278__TempOp__1;

