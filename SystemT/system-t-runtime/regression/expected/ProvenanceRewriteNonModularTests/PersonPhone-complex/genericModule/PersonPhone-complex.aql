module genericModule;


create dictionary "StrongPhoneVariantDictionary"
with case insensitive
as (
  'phone',
  'cell',
  'contact',
  'direct',
  'office',
  'tel',
  'dial',
  'Telefon',
  'mobile',
  'Ph',
  'Phone Number',
  'Direct Line',
  'Telephone No',
  'TTY',
  'Toll Free',
  'Toll-free',
  'Fon',
  'Telefon Geschaeftsstelle',
  'Telefon Geschäftsstelle',
  'Telefon Zweigstelle',
  'Telefon Hauptsitz',
  'Telefon (Geschaeftsstelle)',
  'Telefon (Geschäftsstelle)',
  'Telefon (Zweigstelle)',
  'Telefon (Hauptsitz)',
  'Telefonnummer',
  'Telefon Geschaeftssitz',
  'Telefon Geschäftssitz',
  'Telefon (Geschaeftssitz)',
  'Telefon (Geschäftssitz)',
  'Telefon Persönlich',
  'Telefon persoenlich',
  'Telefon (Persönlich)',
  'Telefon (persoenlich)',
  'Handy',
  'Handy-Nummer',
  'Telefon arbeit',
  'Telefon (arbeit)'
);


create view StrongPhoneVariant as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__1__Temp_____sep_____D____id
  from  __Subquery__1__Temp D;

output view StrongPhoneVariant;

create view PhoneNumberInstance as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__2__Temp_____sep_____R____id
  from  __Subquery__2__Temp R;

output view PhoneNumberInstance;

create view CorrectPhoneNumberInstance as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as PhoneNumberInstance_____sep_____R____id
  from  PhoneNumberInstance R
  where Not(ContainsRegex(/(\(.+\()|(\).+\)|(\/.+\/)|(\([^)]*$))/, R.match));

output view CorrectPhoneNumberInstance;

create view StrongPhone as
  select  CombineSpans(SPV.match, PNI.match) as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          SPV.__auto__id as StrongPhoneVariant_____sep_____SPV____id,
          PNI.__auto__id as CorrectPhoneNumberInstance_____sep_____PNI____id
  from  StrongPhoneVariant SPV,
        CorrectPhoneNumberInstance PNI
  where FollowsTok(SPV.match, PNI.match, 0, 4)
     and MatchesRegex(/(([Nn](umber|o|um)|#)\s*(is\s*)?)?\W*/, SpanBetween(SPV.match, PNI.match))
     and Not(ContainsRegex(/[\n\r]/, SpanBetween(SPV.match, PNI.match)));

output view StrongPhone;

create view StrongPhoneNumber as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__3__Temp_____sep_____R____id
  from  __Subquery__3__Temp R;

output view StrongPhoneNumber;

create dictionary "PhoneVariants"
with case insensitive
as (
  '+',
  'phone:',
  'phone :',
  'cell:',
  'cell',
  'cell :',
  'contact:',
  'contact :',
  'direct:',
  'direct :',
  'office:',
  'office :',
  'tel #',
  'dial',
  'Telefon',
  'mobile',
  'Ph',
  'Fon',
  'Telefon Geschaeftsstelle',
  'Telefon Geschäftsstelle',
  'Telefon Zweigstelle',
  'Telefon Hauptsitz',
  'Telefon (Geschaeftsstelle)',
  'Telefon (Geschäftsstelle)',
  'Telefon (Zweigstelle)',
  'Telefon (Hauptsitz)',
  'Telefonnummer',
  'Telefon Geschaeftssitz',
  'Telefon Geschäftssitz',
  'Telefon (Geschaeftssitz)',
  'Telefon (Geschäftssitz)',
  'Telefon Persönlich',
  'Telefon persoenlich',
  'Telefon (Persönlich)',
  'Telefon (persoenlich)',
  'Handy',
  'Handy-Nummer',
  'Telefon arbeit',
  'Telefon (arbeit)'
);


create dictionary "FilterPhoneNum"
with case insensitive
as (
  'fax',
  'efax',
  'pager',
  'Telefax',
  'Facsimile',
  'Telefacsimile',
  'F',
  'fx',
  'Telefax Geschaeftsstelle',
  'Telefax Geschäftsstelle',
  'Telefax Zweigstelle',
  'Telefax Hauptsitz',
  'Telefax Geschaeftssitz',
  'Telefax Geschäftssitz'
);


create view PhoneVariant as
  select  D.match as annot,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__4__Temp_____sep_____D____id
  from  __Subquery__4__Temp D;

output view PhoneVariant;



create view PhoneNumber_R1a as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__5__Temp_____sep_____R____id,
          Var.__auto__id as PhoneVariant_____sep_____Var____id
  from  __Subquery__5__Temp R,
        PhoneVariant Var
  where FollowsTok(Var.annot, R.match, 0, 2)
     and MatchesRegex(/\s*\.{0,10}\s*/, SpanBetween(Var.annot, R.match));

output view PhoneNumber_R1a;

create view PhoneNumber_R1b_2 as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__6__Temp_____sep_____R____id
  from  __Subquery__6__Temp R;

output view PhoneNumber_R1b_2;

create view PhoneNumber_R2a as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__7__Temp_____sep_____R____id
  from  __Subquery__7__Temp R;

output view PhoneNumber_R2a;

create view PhoneNumber_R3 as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__8__Temp_____sep_____R____id
  from  __Subquery__8__Temp R;

output view PhoneNumber_R3;

create view PhoneNumber_R3a as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__9__Temp_____sep_____R____id
  from  __Subquery__9__Temp R;

output view PhoneNumber_R3a;

create view PhoneNumber_R4 as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__10__Temp_____sep_____R____id
  from  __Subquery__10__Temp R;

output view PhoneNumber_R4;

create view PhoneNumber_R5 as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__11__Temp_____sep_____R____id
  from  __Subquery__11__Temp R;

output view PhoneNumber_R5;

create view PhoneNumber_R7a_7b_7c as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__12__Temp_____sep_____R____id,
          Var.__auto__id as PhoneVariant_____sep_____Var____id
  from  __Subquery__12__Temp R,
        PhoneVariant Var
  where FollowsTok(Var.annot, R.match, 0, 2)
     and MatchesRegex(/\s*\.{0,10}\s*/, SpanBetween(Var.annot, R.match));

output view PhoneNumber_R7a_7b_7c;

create view PhoneNumber_R8ILPhone as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__13__Temp_____sep_____R____id
  from  __Subquery__13__Temp R;

output view PhoneNumber_R8ILPhone;

create view PhoneNumFull as
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__14__TempOp__0 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__14__TempOp__1 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__14__TempOp__2 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__14__TempOp__3 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__14__TempOp__4 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__14__TempOp__5 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__14__TempOp__6 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__14__TempOp__7 Op);

output view PhoneNumFull;

create view ExtensionNums as
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__15__TempOp__0 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__15__TempOp__1 Op);

output view ExtensionNums;

create view PhoneNumWithExtension as
  select  CombineSpans(P.num, E.num) as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumFull_____sep_____P____id,
          E.__auto__id as ExtensionNums_____sep_____E____id
  from  PhoneNumFull P,
        ExtensionNums E
  where FollowsTok(P.num, E.num, 0, 0)
     and Not(ContainsRegex(/[\n\r]/, SpanBetween(P.num, E.num)));

output view PhoneNumWithExtension;

create view PhoneNumAll as
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__16__TempOp__0 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__16__TempOp__1 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__16__TempOp__2 Op);

output view PhoneNumAll;

create view PhoneNumber as
  select  __t2.num as num,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__17__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__17__Temp__1 __t1,
        __Consolidate__17__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.num;

output view PhoneNumber;

create view PhoneNumber1 as
  select  __t2.num as num,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__18__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__18__Temp__1 __t1,
        __Consolidate__18__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.num;

output view PhoneNumber1;

create view PhoneNumber2 as
  select  __t2.num as num,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__19__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__19__Temp__1 __t1,
        __Consolidate__19__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.num;

output view PhoneNumber2;

create view PhoneNumber3 as
  select  __t2.num as num,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__20__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__20__Temp__1 __t1,
        __Consolidate__20__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.num;

output view PhoneNumber3;





create dictionary "FirstNameDict" from file 'firstnames.dict'
with case insensitive;


create view FirstName as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as Document_____sep_____D____id,
    dictionary 'FirstNameDict'
    on D.text as name
  from Document D
  having MatchesRegex(/[A-Z][a-z]*/, name);

output view FirstName;

create view CapsPersonCandidate as
  select  R.match as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__21__Temp_____sep_____R____id
  from  __Subquery__21__Temp R;

output view CapsPersonCandidate;

create view CapsPerson as
  select  C.name as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as CapsPersonCandidate_____sep_____C____id
  from  CapsPersonCandidate C
  where Not(MatchesRegex(/(\p{Lu}\p{M}*)+-.*([\p{Ll}\p{Lo}]\p{M}*).*/, C.name))
     and Not(MatchesRegex(/.*([\p{Ll}\p{Lo}]\p{M}*).*-(\p{Lu}\p{M}*)+/, C.name));

output view CapsPerson;

create view Person2 as
  select  __t2.name as name,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__22__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__22__Temp__1 __t1,
        __Consolidate__22__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.name;

output view Person2;

create view FistNameOverlap as
  select  F.name as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          F.__auto__id as FirstName_____sep_____F____id,
          P.__auto__id as Person2_____sep_____P____id
  from  FirstName F,
        Person2 P
  where Contains(P.name, F.name);

output view FistNameOverlap;

create view Person1 as
  select  Op.name as name,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__23__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__23__TempOp__1 Op,
        __Minus__23__Temp __t
  where Equals(Op.name, __t.name);

output view Person1;

create view PersonPhoneAll11 as
  select  name.name as person,
          phone.num as phone,
          CombineSpans(name.name, phone.num) as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          name.__auto__id as Person1_____sep_____name____id,
          phone.__auto__id as PhoneNumber1_____sep_____phone____id
  from  Person1 name,
        PhoneNumber1 phone
  where Follows(name.name, phone.num, 0, 40);

output view PersonPhoneAll11;

create view PersonPhoneAll12 as
  select  name.name as person,
          phone.num as phone,
          CombineSpans(name.name, phone.num) as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          name.__auto__id as Person1_____sep_____name____id,
          phone.__auto__id as PhoneNumber2_____sep_____phone____id
  from  Person1 name,
        PhoneNumber2 phone
  where Follows(name.name, phone.num, 0, 40);

output view PersonPhoneAll12;

create view PersonPhoneAll13 as
  select  name.name as person,
          phone.num as phone,
          CombineSpans(name.name, phone.num) as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          name.__auto__id as Person1_____sep_____name____id,
          phone.__auto__id as PhoneNumber3_____sep_____phone____id
  from  Person1 name,
        PhoneNumber3 phone
  where Follows(name.name, phone.num, 0, 40);

output view PersonPhoneAll13;

create view PersonPhoneAll21 as
  select  name.name as person,
          phone.num as phone,
          CombineSpans(name.name, phone.num) as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          name.__auto__id as Person2_____sep_____name____id,
          phone.__auto__id as PhoneNumber1_____sep_____phone____id
  from  Person2 name,
        PhoneNumber1 phone
  where Follows(name.name, phone.num, 0, 40);

output view PersonPhoneAll21;

create view PersonPhoneAll22 as
  select  name.name as person,
          phone.num as phone,
          CombineSpans(name.name, phone.num) as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          name.__auto__id as Person2_____sep_____name____id,
          phone.__auto__id as PhoneNumber2_____sep_____phone____id
  from  Person2 name,
        PhoneNumber2 phone
  where Follows(name.name, phone.num, 0, 40);

output view PersonPhoneAll22;

create view PersonPhoneAll23 as
  select  name.name as person,
          phone.num as phone,
          CombineSpans(name.name, phone.num) as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          name.__auto__id as Person2_____sep_____name____id,
          phone.__auto__id as PhoneNumber3_____sep_____phone____id
  from  Person2 name,
        PhoneNumber3 phone
  where Follows(name.name, phone.num, 0, 40);

output view PersonPhoneAll23;

create view PersonPhoneAll as
  (select  Op.person as person,
            Op.phone as phone,
            Op.personphone as personphone,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__24__TempOp__0 Op)
  union all
  (select  Op.person as person,
            Op.phone as phone,
            Op.personphone as personphone,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__24__TempOp__1 Op)
  union all
  (select  Op.person as person,
            Op.phone as phone,
            Op.personphone as personphone,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__24__TempOp__2 Op)
  union all
  (select  Op.person as person,
            Op.phone as phone,
            Op.personphone as personphone,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__24__TempOp__3 Op)
  union all
  (select  Op.person as person,
            Op.phone as phone,
            Op.personphone as personphone,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__24__TempOp__4 Op)
  union all
  (select  Op.person as person,
            Op.phone as phone,
            Op.personphone as personphone,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__24__TempOp__5 Op);

output view PersonPhoneAll;

create view PersonPhoneFiltered as
  select  Op.person as person,
          Op.phone as phone,
          Op.personphone as personphone,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__25__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__25__TempOp__1 Op,
        __Minus__25__Temp __t
  where Equals(Op.person, __t.person)
     and Equals(Op.phone, __t.phone)
     and Equals(Op.personphone, __t.personphone);

output view PersonPhoneFiltered;

create view PersonPhone as
  select  __t2.personphone as personphone,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__26__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__26__Temp__1 __t1,
        __Consolidate__26__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.personphone;

output view PersonPhone;



create view __Consolidate__17__Temp__1 as
  select  C.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as PhoneNumAll_____sep_____C____id,
          C.num as __consolidate__target
  from  PhoneNumAll C;

output view __Consolidate__17__Temp__1;

create view __Consolidate__17__Temp__2 as
  select  __t1.num as num,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__17__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__17__Temp__2;

create view __Consolidate__18__Temp__1 as
  select  C.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as PhoneNumFull_____sep_____C____id,
          C.num as __consolidate__target
  from  PhoneNumFull C;

output view __Consolidate__18__Temp__1;

create view __Consolidate__18__Temp__2 as
  select  __t1.num as num,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__18__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__18__Temp__2;

create view __Consolidate__19__Temp__1 as
  select  C.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as ExtensionNums_____sep_____C____id,
          C.num as __consolidate__target
  from  ExtensionNums C;

output view __Consolidate__19__Temp__1;

create view __Consolidate__19__Temp__2 as
  select  __t1.num as num,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__19__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__19__Temp__2;

create view __Consolidate__20__Temp__1 as
  select  C.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as PhoneNumWithExtension_____sep_____C____id,
          C.num as __consolidate__target
  from  PhoneNumWithExtension C;

output view __Consolidate__20__Temp__1;

create view __Consolidate__20__Temp__2 as
  select  __t1.num as num,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__20__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__20__Temp__2;

create view __Consolidate__22__Temp__1 as
  select  CombineSpans(F.name, CP.name) as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          F.__auto__id as FirstName_____sep_____F____id,
          CP.__auto__id as CapsPerson_____sep_____CP____id,
          CombineSpans(F.name, CP.name) as __consolidate__target
  from  FirstName F,
        CapsPerson CP
  where FollowsTok(F.name, CP.name, 0, 0);

output view __Consolidate__22__Temp__1;

create view __Consolidate__22__Temp__2 as
  select  __t1.name as name,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__22__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__22__Temp__2;

create view __Consolidate__26__Temp__1 as
  select  PPF.personphone as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          PPF.__auto__id as PersonPhoneFiltered_____sep_____PPF____id,
          PPF.personphone as __consolidate__target
  from  PersonPhoneFiltered PPF;

output view __Consolidate__26__Temp__1;

create view __Consolidate__26__Temp__2 as
  select  __t1.personphone as personphone,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__26__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__26__Temp__2;

create view __Minus__23__Temp as
  select  __t.name as name
  from  
    ((select  Op.name as name
      from  __Minus__23__TempOp__1 Op)
    minus
    (select  Op.name as name
      from  __Minus__23__TempOp__2 Op)
    ) __t
  group by __t.name;

output view __Minus__23__Temp;

create view __Minus__23__TempOp__1 as
  select  F.name as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          F.__auto__id as FirstName_____sep_____F____id
  from  FirstName F;

output view __Minus__23__TempOp__1;

create view __Minus__23__TempOp__2 as
  select  F.name as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          F.__auto__id as FistNameOverlap_____sep_____F____id
  from  FistNameOverlap F;

output view __Minus__23__TempOp__2;

create view __Minus__25__Temp as
  select  __t.person as person,
          __t.phone as phone,
          __t.personphone as personphone
  from  
    ((select  Op.person as person,
              Op.phone as phone,
              Op.personphone as personphone
      from  __Minus__25__TempOp__1 Op)
    minus
    (select  Op.person as person,
              Op.phone as phone,
              Op.personphone as personphone
      from  __Minus__25__TempOp__2 Op)
    ) __t
  group by __t.person, __t.phone, __t.personphone;

output view __Minus__25__Temp;

create view __Minus__25__TempOp__1 as
  select  A.person as person,
          A.phone as phone,
          A.personphone as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          A.__auto__id as PersonPhoneAll_____sep_____A____id
  from  PersonPhoneAll A;

output view __Minus__25__TempOp__1;

create view __Minus__25__TempOp__2 as
  select  A.person as person,
          A.phone as phone,
          A.personphone as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          A.__auto__id as PersonPhoneAll_____sep_____A____id,
          P.__auto__id as PhoneNumber_____sep_____P____id
  from  PersonPhoneAll A,
        PhoneNumber P
  where Contains(SpanBetween(A.person, A.phone), P.num);

output view __Minus__25__TempOp__2;

create view __Subquery__10__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____Document____id,
    regex /[Xx][\.\-]?\d{4,5}/
    with flags 'DOTALL'
    on between 1 and 3 tokens in Document.text
    return group 0 as match
  from Document Document;

output view __Subquery__10__Temp;

create view __Subquery__11__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____Document____id,
    regex /[Ee]xt\s*[\.\-\:]?\s*\d{3,5}/
    with flags 'CASE_INSENSITIVE'
    on between 1 and 3 tokens in Document.text
    return group 0 as match
  from Document Document;

output view __Subquery__11__Temp;

create view __Subquery__12__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____Document____id,
    regex /([1-9]\d{1,2}\s*[\(\s\-\.]((\d{2}\s*[\)\s\-\.]\d{8})|(\d{5}\s*[\)\s\-\.]\d{5})|(\d{2}\s*[\)\s\-\.]\d{4}\s*[\s\-\.]\d{4})))/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Document.text
    return group 0 as match
  from Document Document;

output view __Subquery__12__Temp;

create view __Subquery__13__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____Document____id,
    regex /(972[\-\.]\d{1,2}[\-\.]\d{7})/
    with flags 'DOTALL'
    on between 1 and 5 tokens in Document.text
    return group 0 as match
  from Document Document;

output view __Subquery__13__Temp;

create view __Subquery__1__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as Document_____sep_____Document____id,
    dictionary 'StrongPhoneVariantDictionary'
    with flags 'IgnoreCase'
    on Document.text as match
  from Document Document;

output view __Subquery__1__Temp;

create view __Subquery__21__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____Document____id,
    regex /\p{Lu}\p{M}*(\p{L}\p{M}*){0,10}(['-][\p{Lu}\p{M}*])?(\p{L}\p{M}*){1,10}/
    with flags 'DOTALL'
    on between 1 and 4 tokens in Document.text
    return group 0 as match
  from Document Document;

output view __Subquery__21__Temp;

create view __Subquery__2__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____Document____id,
    regex /(\+\s*){0,2}[\d(]([\d ()\-.\/]){9,20}\d/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Document.text
    return group 0 as match
  from Document Document;

output view __Subquery__2__Temp;

create view __Subquery__3__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    StrongPhone.__auto__id as StrongPhone_____sep_____StrongPhone____id,
    regex /[\d(].+/
    with flags 'DOTALL'
    on between 1 and 10 tokens in StrongPhone.num
    return group 0 as match
  from StrongPhone StrongPhone;

output view __Subquery__3__Temp;

create view __Subquery__4__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    -1 as Document_____sep_____Document____id,
    dictionary 'PhoneVariants'
    with flags 'IgnoreCase'
    on Document.text as match
  from Document Document;

output view __Subquery__4__Temp;

create view __Subquery__5__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____Document____id,
    regex /\(?\d{2,4}[\.\-]?\)?(\s*\(0\)\s*)?(\s*[\-\.]\s*)?(\s*[\s\.\-]\(?\d{1,2}(\s*\d{2}\s*){1,2}\)?)?(\s*[\s\.\-]?\d{2,4})(\s*[\s\.-]?\d{1,4}){1,3}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Document.text
    return group 0 as match
  from Document Document;

output view __Subquery__5__Temp;

create view __Subquery__6__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____Document____id,
    regex /(\+\s*)?\(\s*[1-9]\d{2}\s*\)\s*[\-\.]?\d{3}[\-\.\s*]?\d{4}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Document.text
    return group 0 as match
  from Document Document;

output view __Subquery__6__Temp;

create view __Subquery__7__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____Document____id,
    regex /(\+\s*)?[1-9]\d{2}\s*[\s\-\.]\d{3}[\-\.\s]\s*\d{4}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Document.text
    return group 0 as match
  from Document Document;

output view __Subquery__7__Temp;

create view __Subquery__8__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____Document____id,
    regex /\+?(1[\-\.\s]\s*)?(\(\s*)?[1-9]\d{2}(\s*\))?[\-\. ]\d{3}[\-\. ]\d{4}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Document.text
    return group 0 as match
  from Document Document;

output view __Subquery__8__Temp;

create view __Subquery__9__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____Document____id,
    regex /(\+?1[\-\.\s]\s*)?8\d{2}\s*[\s\-\.][A-Z\d]{3}[\.\-]?[A-Z]{4}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Document.text
    return group 0 as match
  from Document Document;

output view __Subquery__9__Temp;

create view __Union__14__TempOp__0 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R1a_____sep_____P____id
  from  PhoneNumber_R1a P;

output view __Union__14__TempOp__0;

create view __Union__14__TempOp__1 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R1b_2_____sep_____P____id
  from  PhoneNumber_R1b_2 P;

output view __Union__14__TempOp__1;

create view __Union__14__TempOp__2 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R2a_____sep_____P____id
  from  PhoneNumber_R2a P;

output view __Union__14__TempOp__2;

create view __Union__14__TempOp__3 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R3_____sep_____P____id
  from  PhoneNumber_R3 P;

output view __Union__14__TempOp__3;

create view __Union__14__TempOp__4 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R3a_____sep_____P____id
  from  PhoneNumber_R3a P;

output view __Union__14__TempOp__4;

create view __Union__14__TempOp__5 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R7a_7b_7c_____sep_____P____id
  from  PhoneNumber_R7a_7b_7c P;

output view __Union__14__TempOp__5;

create view __Union__14__TempOp__6 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R8ILPhone_____sep_____P____id
  from  PhoneNumber_R8ILPhone P;

output view __Union__14__TempOp__6;

create view __Union__14__TempOp__7 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as StrongPhoneNumber_____sep_____P____id
  from  StrongPhoneNumber P;

output view __Union__14__TempOp__7;

create view __Union__15__TempOp__0 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R4_____sep_____P____id
  from  PhoneNumber_R4 P;

output view __Union__15__TempOp__0;

create view __Union__15__TempOp__1 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R5_____sep_____P____id
  from  PhoneNumber_R5 P;

output view __Union__15__TempOp__1;

create view __Union__16__TempOp__0 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumFull_____sep_____P____id
  from  PhoneNumFull P;

output view __Union__16__TempOp__0;

create view __Union__16__TempOp__1 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as ExtensionNums_____sep_____P____id
  from  ExtensionNums P;

output view __Union__16__TempOp__1;

create view __Union__16__TempOp__2 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumWithExtension_____sep_____P____id
  from  PhoneNumWithExtension P;

output view __Union__16__TempOp__2;

create view __Union__24__TempOp__0 as
  select  PersonPhoneAll11.person as person,
          PersonPhoneAll11.phone as phone,
          PersonPhoneAll11.personphone as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          PersonPhoneAll11.__auto__id as PersonPhoneAll11_____sep_____PersonPhoneAll11____id
  from  PersonPhoneAll11 PersonPhoneAll11;

output view __Union__24__TempOp__0;

create view __Union__24__TempOp__1 as
  select  PersonPhoneAll12.person as person,
          PersonPhoneAll12.phone as phone,
          PersonPhoneAll12.personphone as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          PersonPhoneAll12.__auto__id as PersonPhoneAll12_____sep_____PersonPhoneAll12____id
  from  PersonPhoneAll12 PersonPhoneAll12;

output view __Union__24__TempOp__1;

create view __Union__24__TempOp__2 as
  select  PersonPhoneAll13.person as person,
          PersonPhoneAll13.phone as phone,
          PersonPhoneAll13.personphone as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          PersonPhoneAll13.__auto__id as PersonPhoneAll13_____sep_____PersonPhoneAll13____id
  from  PersonPhoneAll13 PersonPhoneAll13;

output view __Union__24__TempOp__2;

create view __Union__24__TempOp__3 as
  select  PersonPhoneAll21.person as person,
          PersonPhoneAll21.phone as phone,
          PersonPhoneAll21.personphone as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          PersonPhoneAll21.__auto__id as PersonPhoneAll21_____sep_____PersonPhoneAll21____id
  from  PersonPhoneAll21 PersonPhoneAll21;

output view __Union__24__TempOp__3;

create view __Union__24__TempOp__4 as
  select  PersonPhoneAll22.person as person,
          PersonPhoneAll22.phone as phone,
          PersonPhoneAll22.personphone as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          PersonPhoneAll22.__auto__id as PersonPhoneAll22_____sep_____PersonPhoneAll22____id
  from  PersonPhoneAll22 PersonPhoneAll22;

output view __Union__24__TempOp__4;

create view __Union__24__TempOp__5 as
  select  PersonPhoneAll23.person as person,
          PersonPhoneAll23.phone as phone,
          PersonPhoneAll23.personphone as personphone,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          PersonPhoneAll23.__auto__id as PersonPhoneAll23_____sep_____PersonPhoneAll23____id
  from  PersonPhoneAll23 PersonPhoneAll23;

output view __Union__24__TempOp__5;

