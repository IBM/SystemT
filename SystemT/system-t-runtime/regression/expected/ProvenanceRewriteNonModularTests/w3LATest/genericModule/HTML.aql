module genericModule;


create view AnchorSkip as
  select  R.match as match,
          R.target as target,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as ATag_____sep_____R____id,
          T.__auto__id as TagsToSkipNoTitleConsolidated_____sep_____T____id
  from  ATag R,
        TagsToSkipNoTitleConsolidated T
  where Contains(T.match, R.match);

output view AnchorSkip;

create view Anchor as
  select  Op.match as match,
          Op.target as target,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__125__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__125__TempOp__1 Op,
        __Minus__125__Temp __t
  where Equals(Op.match, __t.match)
     and Equals(Op.target, __t.target);

output view Anchor;

create view H1Skip as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as H1Tag_____sep_____R____id,
          T.__auto__id as TagsToSkipNoTitleConsolidated_____sep_____T____id
  from  H1Tag R,
        TagsToSkipNoTitleConsolidated T
  where Contains(T.match, R.match);

output view H1Skip;

create view H1Cand as
  select  Op.match as match,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__126__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__126__TempOp__1 Op,
        __Minus__126__Temp __t
  where Equals(Op.match, __t.match);

output view H1Cand;

create view H1 as
  select  SpanIntersection(H.match, RightContext(LeftContext(H.match, 0), 1000)) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          H.__auto__id as H1Cand_____sep_____H____id
  from  H1Cand H;

output view H1;

create view H2Skip as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as H2Tag_____sep_____R____id,
          T.__auto__id as TagsToSkipNoTitleConsolidated_____sep_____T____id
  from  H2Tag R,
        TagsToSkipNoTitleConsolidated T
  where Contains(T.match, R.match);

output view H2Skip;

create view H2Cand as
  select  Op.match as match,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__127__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__127__TempOp__1 Op,
        __Minus__127__Temp __t
  where Equals(Op.match, __t.match);

output view H2Cand;

create view H2 as
  select  SpanIntersection(H.match, RightContext(LeftContext(H.match, 0), 1000)) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          H.__auto__id as H2Cand_____sep_____H____id
  from  H2Cand H;

output view H2;

create view H3Skip as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as H3Tag_____sep_____R____id,
          T.__auto__id as TagsToSkipNoTitleConsolidated_____sep_____T____id
  from  H3Tag R,
        TagsToSkipNoTitleConsolidated T
  where Contains(T.match, R.match);

output view H3Skip;

create view H3Cand as
  select  Op.match as match,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__128__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__128__TempOp__1 Op,
        __Minus__128__Temp __t
  where Equals(Op.match, __t.match);

output view H3Cand;

create view H3 as
  select  SpanIntersection(H.match, RightContext(LeftContext(H.match, 0), 1000)) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          H.__auto__id as H3Cand_____sep_____H____id
  from  H3Cand H;

output view H3;

create view MetaTag as
  (select  Op.match as match,
            Op.name as name,
            Op.content as content,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__129__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.name as name,
            Op.content as content,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__129__TempOp__1 Op);

output view MetaTag;

create view MetaSkip as
  select  R.match as match,
          R.name as name,
          R.content as content,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as MetaTag_____sep_____R____id,
          T.__auto__id as TagsToSkipNoTitleConsolidated_____sep_____T____id
  from  MetaTag R,
        TagsToSkipNoTitleConsolidated T
  where Contains(T.match, R.match);

output view MetaSkip;

create view MetaOriginal as
  select  R.name as name,
          R.content as content,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__131__Temp_____sep_____R____id
  from  __Subquery__131__Temp R
  where NotNull(R.name);

output view MetaOriginal;

create view Meta as
  select  ToLowerCase(ReplacePunctuation(GetString(R.name), '_')) as name,
          R.content as content,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as MetaOriginal_____sep_____R____id
  from  MetaOriginal R;

output view Meta;

create view AllTitleSkip as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as AllTitleTag_____sep_____R____id,
          T.__auto__id as TagsToSkipNoTitleConsolidated_____sep_____T____id
  from  AllTitleTag R,
        TagsToSkipNoTitleConsolidated T
  where Contains(T.match, R.match);

output view AllTitleSkip;

create view AllTitle as
  select  Op.match as match,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__132__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__132__TempOp__1 Op,
        __Minus__132__Temp __t
  where Equals(Op.match, __t.match);

output view AllTitle;

create view FontSkip as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as FontTag_____sep_____R____id,
          T.__auto__id as TagsToSkipNoTitleConsolidated_____sep_____T____id
  from  FontTag R,
        TagsToSkipNoTitleConsolidated T
  where Contains(T.match, R.match);

output view FontSkip;

create view Font as
  select  Op.match as match,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__133__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__133__TempOp__1 Op,
        __Minus__133__Temp __t
  where Equals(Op.match, __t.match);

output view Font;

create view H1Grouped as
  select  Op.group_by as group_by,
          Op.h_list as h_list,
          AutoID() as __auto__id
  from  __Base__H1Grouped__Temp Op;

output view H1Grouped;

create view H1s as
  select  ListJoin(H.h_list, ' | ') as content,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          H.__auto__id as H1Grouped_____sep_____H____id
  from  H1Grouped H;

output view H1s;

create view H2H3 as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__134__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__134__TempOp__1 Op);

output view H2H3;

create view H2H3Grouped as
  select  Op.group_by as group_by,
          Op.h_list as h_list,
          AutoID() as __auto__id
  from  __Base__H2H3Grouped__Temp Op;

output view H2H3Grouped;

create view H2H3Cand as
  select  ListJoin(H.h_list, ' | ') as content,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          H.__auto__id as H2H3Grouped_____sep_____H____id
  from  H2H3Grouped H;

output view H2H3Cand;

create view H2H3s as
  select  Op.content as content,
          AutoID() as __auto__id
  from  __Base__H2H3s__Temp Op;

output view H2H3s;

create view StartMainContent as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____D____id,
    regex /start main content/
    with flags 'CASE_INSENSITIVE'
    on D.text
    return group 0 as match
  from Document D;

output view StartMainContent;

create view H1Font as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__135__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__135__TempOp__1 Op);

output view H1Font;

create view FirstMainFinal as
  select  Op.content as content,
          Op.content_remap as content_remap,
          AutoID() as __auto__id
  from  __Base__FirstMainFinal__Temp Op;

output view FirstMainFinal;

create view FirstMain as
  select  GetText(F.content) as content_text,
          GetBegin(F.content_remap) as content_begin,
          GetEnd(F.content_remap) as content_end,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          F.__auto__id as FirstMainFinal_____sep_____F____id
  from  FirstMainFinal F;

output view FirstMain;

create dictionary "MetaKeywordsTagName"
with case insensitive
as (
  'Keywords'
);


create view MetaKeywords as
  select  GetText(M.content) as content,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          M.__auto__id as MetaOriginal_____sep_____M____id
  from  MetaOriginal M
  where MatchesDict('MetaKeywordsTagName', M.name)
     and NotNull(M.content);

output view MetaKeywords;

create dictionary "MetaDescriptionTagName"
with case insensitive
as (
  'Description'
);


create view MetaDescription as
  select  GetText(M.content) as content,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          M.__auto__id as MetaOriginal_____sep_____M____id
  from  MetaOriginal M
  where MatchesDict('MetaDescriptionTagName', M.name)
     and NotNull(M.content);

output view MetaDescription;

create dictionary "MetaCountryTagName"
with case insensitive
as (
  'IBM.Country'
);


create view MetaCountry as
  select  M.content as content,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          M.__auto__id as MetaOriginal_____sep_____M____id
  from  MetaOriginal M
  where MatchesDict('MetaCountryTagName', M.name)
     and NotNull(M.content);

output view MetaCountry;

create dictionary "MetaLanguageTagName"
with case insensitive
as (
  'dc.language'
);


create view MetaLanguage as
  select  M.content as content,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          M.__auto__id as MetaOriginal_____sep_____M____id
  from  MetaOriginal M
  where MatchesDict('MetaLanguageTagName', M.name)
     and NotNull(M.content);

output view MetaLanguage;

create view __Base__FirstMainFinal__Temp as
  select  HF.match as content,
          Remap(HF.match) as content_remap,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          HF.__auto__id as H1Font_____sep_____HF____id,
          SMC.__auto__id as StartMainContent_____sep_____SMC____id
  from  H1Font HF,
        StartMainContent SMC
  where FollowsTok(SMC.match, Remap(HF.match), 0, 100000)
  consolidate on HF.match using 'RetainFirst';

output view __Base__FirstMainFinal__Temp;

create view __Base__H1Grouped__Temp as
  select  H.group_by as group_by,
          List(H.match) as h_list
  from  
    (select  H.match as match,
            0 as group_by
    from  H1 H
    order by H.match
    ) H
  group by H.group_by;

output view __Base__H1Grouped__Temp;

create view __Base__H2H3Grouped__Temp as
  select  H.group_by as group_by,
          List(H.match) as h_list
  from  
    (select  H.match as match,
            0 as group_by
    from  H2H3 H
    order by H.match
    ) H
  group by H.group_by;

output view __Base__H2H3Grouped__Temp;

create view __Base__H2H3s__Temp as
  select  H2H3.content as content
  from  H2H3Cand H2H3,

        (select  Case(GreaterThan(H1.cnt, 0), 1, 0) as exists
        from  
          (select  Count(*) as cnt
          from  H1s H1s
          ) H1
        ) H1
  where Equals(H1.exists, 0);

output view __Base__H2H3s__Temp;

create view __Consolidate__136__Temp__1 as
  select  HF.match as content,
          Remap(HF.match) as content_remap,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          HF.__auto__id as H1Font_____sep_____HF____id,
          SMC.__auto__id as StartMainContent_____sep_____SMC____id,
          HF.match as __consolidate__target
  from  H1Font HF,
        StartMainContent SMC
  where FollowsTok(SMC.match, Remap(HF.match), 0, 100000);

output view __Consolidate__136__Temp__1;

create view __Consolidate__136__Temp__2 as
  select  __t1.content as content,
          __t1.content_remap as content_remap,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__136__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'RetainFirst';

output view __Consolidate__136__Temp__2;

create view __Minus__125__Temp as
  select  __t.match as match,
          __t.target as target
  from  
    ((select  Op.match as match,
              Op.target as target
      from  __Minus__125__TempOp__1 Op)
    minus
    (select  Op.match as match,
              Op.target as target
      from  __Minus__125__TempOp__2 Op)
    ) __t
  group by __t.match, __t.target;

output view __Minus__125__Temp;

create view __Minus__125__TempOp__1 as
  select  R.match as match,
          R.target as target,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as ATag_____sep_____R____id
  from  ATag R;

output view __Minus__125__TempOp__1;

create view __Minus__125__TempOp__2 as
  select  R.match as match,
          R.target as target,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as AnchorSkip_____sep_____R____id
  from  AnchorSkip R;

output view __Minus__125__TempOp__2;

create view __Minus__126__Temp as
  select  __t.match as match
  from  
    ((select  Op.match as match
      from  __Minus__126__TempOp__1 Op)
    minus
    (select  Op.match as match
      from  __Minus__126__TempOp__2 Op)
    ) __t
  group by __t.match;

output view __Minus__126__Temp;

create view __Minus__126__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as H1Tag_____sep_____R____id
  from  H1Tag R;

output view __Minus__126__TempOp__1;

create view __Minus__126__TempOp__2 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as H1Skip_____sep_____R____id
  from  H1Skip R;

output view __Minus__126__TempOp__2;

create view __Minus__127__Temp as
  select  __t.match as match
  from  
    ((select  Op.match as match
      from  __Minus__127__TempOp__1 Op)
    minus
    (select  Op.match as match
      from  __Minus__127__TempOp__2 Op)
    ) __t
  group by __t.match;

output view __Minus__127__Temp;

create view __Minus__127__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as H2Tag_____sep_____R____id
  from  H2Tag R;

output view __Minus__127__TempOp__1;

create view __Minus__127__TempOp__2 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as H2Skip_____sep_____R____id
  from  H2Skip R;

output view __Minus__127__TempOp__2;

create view __Minus__128__Temp as
  select  __t.match as match
  from  
    ((select  Op.match as match
      from  __Minus__128__TempOp__1 Op)
    minus
    (select  Op.match as match
      from  __Minus__128__TempOp__2 Op)
    ) __t
  group by __t.match;

output view __Minus__128__Temp;

create view __Minus__128__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as H3Tag_____sep_____R____id
  from  H3Tag R;

output view __Minus__128__TempOp__1;

create view __Minus__128__TempOp__2 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as H3Skip_____sep_____R____id
  from  H3Skip R;

output view __Minus__128__TempOp__2;

create view __Minus__130__Temp as
  select  __t.name as name,
          __t.content as content
  from  
    ((select  Op.name as name,
              Op.content as content
      from  __Minus__130__TempOp__1 Op)
    minus
    (select  Op.name as name,
              Op.content as content
      from  __Minus__130__TempOp__2 Op)
    ) __t
  group by __t.name, __t.content;

output view __Minus__130__Temp;

create view __Minus__130__TempOp__1 as
  select  R.name as name,
          R.content as content,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as MetaTag_____sep_____R____id
  from  MetaTag R;

output view __Minus__130__TempOp__1;

create view __Minus__130__TempOp__2 as
  select  R.name as name,
          R.content as content,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as MetaSkip_____sep_____R____id
  from  MetaSkip R;

output view __Minus__130__TempOp__2;

create view __Minus__132__Temp as
  select  __t.match as match
  from  
    ((select  Op.match as match
      from  __Minus__132__TempOp__1 Op)
    minus
    (select  Op.match as match
      from  __Minus__132__TempOp__2 Op)
    ) __t
  group by __t.match;

output view __Minus__132__Temp;

create view __Minus__132__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as AllTitleTag_____sep_____R____id
  from  AllTitleTag R;

output view __Minus__132__TempOp__1;

create view __Minus__132__TempOp__2 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as AllTitleSkip_____sep_____R____id
  from  AllTitleSkip R;

output view __Minus__132__TempOp__2;

create view __Minus__133__Temp as
  select  __t.match as match
  from  
    ((select  Op.match as match
      from  __Minus__133__TempOp__1 Op)
    minus
    (select  Op.match as match
      from  __Minus__133__TempOp__2 Op)
    ) __t
  group by __t.match;

output view __Minus__133__Temp;

create view __Minus__133__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as FontTag_____sep_____R____id
  from  FontTag R;

output view __Minus__133__TempOp__1;

create view __Minus__133__TempOp__2 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as FontSkip_____sep_____R____id
  from  FontSkip R;

output view __Minus__133__TempOp__2;

create view __Subquery__131__Temp as
  select  Op.name as name,
          Op.content as content,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__130__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__130__TempOp__1 Op,
        __Minus__130__Temp __t
  where Equals(Op.name, __t.name)
     and Equals(Op.content, __t.content);

output view __Subquery__131__Temp;

create view __Union__129__TempOp__0 as
  select  R.match as match,
          R.name as name,
          R.content as content,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as MetaTagAll_____sep_____R____id
  from  MetaTagAll R
  where NotNull(R.content);

output view __Union__129__TempOp__0;

create view __Union__129__TempOp__1 as
  select  R.match as match,
          R.name as name,
          R.value as content,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as MetaTagAll_____sep_____R____id
  from  MetaTagAll R
  where Not(NotNull(R.content))
     and NotNull(R.value);

output view __Union__129__TempOp__1;

create view __Union__134__TempOp__0 as
  select  H.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          H.__auto__id as H2_____sep_____H____id
  from  H2 H;

output view __Union__134__TempOp__0;

create view __Union__134__TempOp__1 as
  select  H.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          H.__auto__id as H3_____sep_____H____id
  from  H3 H;

output view __Union__134__TempOp__1;

create view __Union__135__TempOp__0 as
  select  H.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          H.__auto__id as H1_____sep_____H____id
  from  H1 H;

output view __Union__135__TempOp__0;

create view __Union__135__TempOp__1 as
  select  F.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          F.__auto__id as Font_____sep_____F____id
  from  Font F;

output view __Union__135__TempOp__1;

