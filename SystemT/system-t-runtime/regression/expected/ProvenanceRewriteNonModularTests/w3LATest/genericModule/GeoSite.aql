module genericModule;


create view Site_Seg1_All as
  select  GetText(T.match) as match,
          ConstructEvidence(GetString('Seg1'), GetString(T.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__90__Temp_____sep_____T____id
  from  __Subquery__90__Temp T;

output view Site_Seg1_All;

create view Site_Seg1 as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Site_Seg1__Temp Op;

output view Site_Seg1;

create view Site_Seg2_FirstMain_All as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__91__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__91__TempOp__1 Op);

output view Site_Seg2_FirstMain_All;

create view Site_Seg2_FirstMain as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Site_Seg2_FirstMain__Temp Op;

output view Site_Seg2_FirstMain;

create view Site_Title_All as
  select  GetText(T.match) as match,
          ConstructEvidence(GetString('Title'), GetString(T.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__94__Temp_____sep_____T____id
  from  __Subquery__94__Temp T;

output view Site_Title_All;

create view Site_Title as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Site_Title__Temp Op;

output view Site_Title;

create view Site_URLPath_All as
  select  GetText(U.match) as match,
          ConstructEvidence(GetString('URLPath'), GetString(U.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          U.__auto__id as __Subquery__95__Temp_____sep_____U____id
  from  __Subquery__95__Temp U;

output view Site_URLPath_All;

create view Site_URLPath as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Site_URLPath__Temp Op;

output view Site_URLPath;

create view Site_MetaDescription_All as
  select  GetText(D.match) as match,
          ConstructEvidence(GetString('MetaDescription'), GetString(D.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__96__Temp_____sep_____D____id
  from  __Subquery__96__Temp D;

output view Site_MetaDescription_All;

create view Site_MetaDescription as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Site_MetaDescription__Temp Op;

output view Site_MetaDescription;

create view Site_URLHost_All as
  select  GetText(U.match) as match,
          ConstructEvidence(GetString('URLHost'), GetString(U.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          U.__auto__id as __Subquery__97__Temp_____sep_____U____id
  from  __Subquery__97__Temp U;

output view Site_URLHost_All;

create view Site_URLHost as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Site_URLHost__Temp Op;

output view Site_URLHost;

create view Site0_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Site0___Temp Op;

output view Site0_;

create view Site0 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__98__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__98__TempOp__1 Op);

output view Site0;

create view Site1_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Site1___Temp Op;

output view Site1_;

create view Site1 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__99__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__99__TempOp__1 Op);

output view Site1;

create view Site2_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Site2___Temp Op;

output view Site2_;

create view Site2 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__100__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__100__TempOp__1 Op);

output view Site2;

create view Site3_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Site3___Temp Op;

output view Site3_;

create view Site3 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__101__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__101__TempOp__1 Op);

output view Site3;

create view Site4_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Site4___Temp Op;

output view Site4_;

create view Site4 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__102__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__102__TempOp__1 Op);

output view Site4;









create view SiteEvidenceAll as
  select  Op.id as id,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__SiteEvidenceAll__Temp Op;

output view SiteEvidenceAll;

create view SiteEvidence as
  select  Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__SiteEvidence__Temp Op;

output view SiteEvidence;

create view SiteAgg as
  select  Op.site as site,
          AutoID() as __auto__id
  from  __Base__SiteAgg__Temp Op;

output view SiteAgg;

create view SiteWithEvidence as
  select  C.site as site,
          E.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as SiteAgg_____sep_____C____id,
          E.__auto__id as SiteEvidence_____sep_____E____id
  from  SiteAgg C,
        SiteEvidence E;

output view SiteWithEvidence;

create view SiteWithEvidenceAndCode as
  select  C.site as site,
          M.code as code,
          C.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as SiteWithEvidence_____sep_____C____id,
          M.__auto__id as SiteMapping_____sep_____M____id
  from  SiteWithEvidence C,
        SiteMapping M
  where Equals(GetText(C.site), GetText(M.name));

output view SiteWithEvidenceAndCode;

create view SiteWithEvidenceNoCode as
  select  Op.site as site,
          Op.evidence as evidence,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__103__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__103__TempOp__1 Op,
        __Minus__103__Temp __t
  where Equals(Op.site, __t.site)
     and Equals(Op.evidence, __t.evidence);

output view SiteWithEvidenceNoCode;

create view SiteWithEvidenceNormalized as
  (select  Op.site as site,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__104__TempOp__0 Op)
  union all
  (select  Op.site as site,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__104__TempOp__1 Op);

output view SiteWithEvidenceNormalized;

create view SiteMissing as
  select  Op.site as site,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__SiteMissing__Temp Op;

output view SiteMissing;

create view GeoSite as
  (select  Op.site as site,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__105__TempOp__0 Op)
  union all
  (select  Op.site as site,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__105__TempOp__1 Op);

output view GeoSite;

create view __Base__Site0___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Site_Seg2_FirstMain R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Site_Seg1 Site_Seg1
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Site0___Temp;

create view __Base__Site1___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Site_Title R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Site0 Site0
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Site1___Temp;

create view __Base__Site2___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Site_URLPath R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Site1 Site1
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Site2___Temp;

create view __Base__Site3___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Site_MetaDescription R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Site2 Site2
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Site3___Temp;

create view __Base__Site4___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Site_URLHost R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Site3 Site3
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Site4___Temp;

create view __Base__SiteAgg__Temp as
  select  ListJoin(C.match, ';') as site
  from  
    (select  C.id as id,
            List(C.match) as match
    from  
      (select  1 as id,
              GetText(C.match) as match
      from  Site4 C
      group by GetText(C.match)
      ) C
    group by C.id
    ) C;

output view __Base__SiteAgg__Temp;

create view __Base__SiteEvidenceAll__Temp as
  select  C.id as id,
          GetText(C.evidence) as evidence
  from  
    ((select  1 as id,
              C.evidence as evidence
      from  Site_Seg1 C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Site_Seg2_FirstMain C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Site_Title C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Site_URLPath C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Site_MetaDescription C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Site_URLHost C)
    ) C
  group by C.id, GetText(C.evidence)
  order by GetText(C.evidence);

output view __Base__SiteEvidenceAll__Temp;

create view __Base__SiteEvidence__Temp as
  select  ListJoin(C.evidence, ';') as evidence
  from  
    (select  C.id as id,
            List(C.evidence) as evidence
    from  SiteEvidenceAll C
    group by C.id
    ) C;

output view __Base__SiteEvidence__Temp;

create view __Base__SiteMissing__Temp as
  select  'N/A' as site,
          '' as evidence
  from  
    (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
    from  
      (select  Count(*) as cnt
      from  SiteWithEvidenceNormalized SiteWithEvidenceNormalized
      ) S
    ) R1
  where Equals(R1.xsists, 0);

output view __Base__SiteMissing__Temp;

create view __Base__Site_MetaDescription__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Site_MetaDescription_All R,

        (select  Count(*) as cnt
        from  Site_MetaDescription_All Site_MetaDescription_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Site_MetaDescription__Temp;

create view __Base__Site_Seg1__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Site_Seg1_All R,

        (select  Count(*) as cnt
        from  Site_Seg1_All Site_Seg1_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Site_Seg1__Temp;

create view __Base__Site_Seg2_FirstMain__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Site_Seg2_FirstMain_All R,

        (select  Count(*) as cnt
        from  Site_Seg2_FirstMain_All Site_Seg2_FirstMain_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Site_Seg2_FirstMain__Temp;

create view __Base__Site_Title__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Site_Title_All R,

        (select  Count(*) as cnt
        from  Site_Title_All Site_Title_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Site_Title__Temp;

create view __Base__Site_URLHost__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Site_URLHost_All R,

        (select  Count(*) as cnt
        from  Site_URLHost_All Site_URLHost_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Site_URLHost__Temp;

create view __Base__Site_URLPath__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Site_URLPath_All R,

        (select  Count(*) as cnt
        from  Site_URLPath_All Site_URLPath_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Site_URLPath__Temp;

create view __Minus__103__Temp as
  select  __t.site as site,
          __t.evidence as evidence
  from  
    ((select  Op.site as site,
              Op.evidence as evidence
      from  __Minus__103__TempOp__1 Op)
    minus
    (select  Op.site as site,
              Op.evidence as evidence
      from  __Minus__103__TempOp__2 Op)
    ) __t
  group by __t.site, __t.evidence;

output view __Minus__103__Temp;

create view __Minus__103__TempOp__1 as
  select  C.site as site,
          C.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as SiteWithEvidence_____sep_____C____id
  from  SiteWithEvidence C;

output view __Minus__103__TempOp__1;

create view __Minus__103__TempOp__2 as
  select  C.site as site,
          C.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as SiteWithEvidenceAndCode_____sep_____C____id
  from  SiteWithEvidenceAndCode C;

output view __Minus__103__TempOp__2;

create view __Subquery__90__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    T.__auto__id as Seg1_____sep_____T____id,
    dictionaries 'GeoSiteNameDict'
                   and 'GeoSiteCodeDict'
    on T.seg as match
  from Seg1 T
  having Not(MatchesDict('geo/siteNegative.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__90__Temp;

create view __Subquery__92__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    T.__auto__id as Seg2_____sep_____T____id,
    dictionaries 'GeoSiteNameDict'
                   and 'GeoSiteCodeDict'
    on T.seg as match
  from Seg2 T
  having Not(MatchesDict('geo/siteNegative.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__92__Temp;

create view __Subquery__93__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    FM.__auto__id as FirstMainFinal_____sep_____FM____id,
    dictionaries 'GeoSiteNameDict'
                   and 'GeoSiteCodeDict'
    on FM.content as match
  from FirstMainFinal FM
  having Not(MatchesDict('geo/siteNegative.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__93__Temp;

create view __Subquery__94__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    T.__auto__id as TitleFinal_____sep_____T____id,
    dictionaries 'GeoSiteNameDict'
                   and 'GeoSiteCodeDict'
    on T.content as match
  from TitleFinal T
  having Not(MatchesDict('geo/siteNegative.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__94__Temp;

create view __Subquery__95__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    dictionaries 'GeoSiteNameDict'
                   and 'GeoSiteCodeDict'
    on U.actualPath as match
  from PageURL U
  having Not(MatchesDict('geo/siteNegative.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__95__Temp;

create view __Subquery__96__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    D.__auto__id as MetaDescription_____sep_____D____id,
    dictionaries 'GeoSiteNameDict'
                   and 'GeoSiteCodeDict'
    on D.content as match
  from MetaDescription D
  having Not(MatchesDict('geo/siteNegative.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__96__Temp;

create view __Subquery__97__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    dictionaries 'GeoSiteNameDict'
                   and 'GeoSiteCodeDict'
    on U.host as match
  from PageURL U
  having Not(MatchesDict('geo/siteNegative.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__97__Temp;

create view __Union__100__TempOp__0 as
  select  Site1.match as match,
          Site1.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Site1.__auto__id as Site1_____sep_____Site1____id
  from  Site1 Site1;

output view __Union__100__TempOp__0;

create view __Union__100__TempOp__1 as
  select  Site2_.match as match,
          Site2_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Site2_.__auto__id as Site2______sep_____Site2_____id
  from  Site2_ Site2_;

output view __Union__100__TempOp__1;

create view __Union__101__TempOp__0 as
  select  Site2.match as match,
          Site2.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Site2.__auto__id as Site2_____sep_____Site2____id
  from  Site2 Site2;

output view __Union__101__TempOp__0;

create view __Union__101__TempOp__1 as
  select  Site3_.match as match,
          Site3_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Site3_.__auto__id as Site3______sep_____Site3_____id
  from  Site3_ Site3_;

output view __Union__101__TempOp__1;

create view __Union__102__TempOp__0 as
  select  Site3.match as match,
          Site3.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Site3.__auto__id as Site3_____sep_____Site3____id
  from  Site3 Site3;

output view __Union__102__TempOp__0;

create view __Union__102__TempOp__1 as
  select  Site4_.match as match,
          Site4_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Site4_.__auto__id as Site4______sep_____Site4_____id
  from  Site4_ Site4_;

output view __Union__102__TempOp__1;

create view __Union__104__TempOp__0 as
  select  C.code as site,
          C.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as SiteWithEvidenceAndCode_____sep_____C____id
  from  SiteWithEvidenceAndCode C;

output view __Union__104__TempOp__0;

create view __Union__104__TempOp__1 as
  select  C.site as site,
          C.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as SiteWithEvidenceNoCode_____sep_____C____id
  from  SiteWithEvidenceNoCode C;

output view __Union__104__TempOp__1;

create view __Union__105__TempOp__0 as
  select  SiteWithEvidenceNormalized.site as site,
          SiteWithEvidenceNormalized.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          SiteWithEvidenceNormalized.__auto__id as SiteWithEvidenceNormalized_____sep_____SiteWithEvidenceNormalized____id
  from  SiteWithEvidenceNormalized SiteWithEvidenceNormalized;

output view __Union__105__TempOp__0;

create view __Union__105__TempOp__1 as
  select  SiteMissing.site as site,
          SiteMissing.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          SiteMissing.__auto__id as SiteMissing_____sep_____SiteMissing____id
  from  SiteMissing SiteMissing;

output view __Union__105__TempOp__1;

create view __Union__91__TempOp__0 as
  select  GetText(T.match) as match,
          ConstructEvidence(GetString('Seg2'), GetString(T.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__92__Temp_____sep_____T____id
  from  __Subquery__92__Temp T;

output view __Union__91__TempOp__0;

create view __Union__91__TempOp__1 as
  select  GetText(FM.match) as match,
          ConstructEvidence(GetString('FirstMainHead'), GetString(FM.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          FM.__auto__id as __Subquery__93__Temp_____sep_____FM____id
  from  __Subquery__93__Temp FM;

output view __Union__91__TempOp__1;

create view __Union__98__TempOp__0 as
  select  Site_Seg1.match as match,
          Site_Seg1.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Site_Seg1.__auto__id as Site_Seg1_____sep_____Site_Seg1____id
  from  Site_Seg1 Site_Seg1;

output view __Union__98__TempOp__0;

create view __Union__98__TempOp__1 as
  select  Site0_.match as match,
          Site0_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Site0_.__auto__id as Site0______sep_____Site0_____id
  from  Site0_ Site0_;

output view __Union__98__TempOp__1;

create view __Union__99__TempOp__0 as
  select  Site0.match as match,
          Site0.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Site0.__auto__id as Site0_____sep_____Site0____id
  from  Site0 Site0;

output view __Union__99__TempOp__0;

create view __Union__99__TempOp__1 as
  select  Site1_.match as match,
          Site1_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Site1_.__auto__id as Site1______sep_____Site1_____id
  from  Site1_ Site1_;

output view __Union__99__TempOp__1;

