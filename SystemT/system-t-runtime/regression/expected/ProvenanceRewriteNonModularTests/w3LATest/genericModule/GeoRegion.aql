module genericModule;


create view Region_HQURLPath_All as
  select  GetText(G.region) as match,
          ConstructEvidence('HQURLPath', GetString(G.region)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          G.__auto__id as GeoHQ_____sep_____G____id
  from  GeoHQ G
  where Not(Equals('', GetText(G.region)));

output view Region_HQURLPath_All;

create view Region_HQURLPath as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region_HQURLPath__Temp Op;

output view Region_HQURLPath;

create view Region_Seg1_All as
  select  GetText(T.match) as match,
          ConstructEvidence(GetString('Seg1'), GetString(T.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__58__Temp_____sep_____T____id
  from  __Subquery__58__Temp T;

output view Region_Seg1_All;

create view Region_Seg1 as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region_Seg1__Temp Op;

output view Region_Seg1;

create view Region_Seg2_FirstMain_All as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__59__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__59__TempOp__1 Op);

output view Region_Seg2_FirstMain_All;

create view Region_Seg2_FirstMain as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region_Seg2_FirstMain__Temp Op;

output view Region_Seg2_FirstMain;

create view Region_Title_H1_All as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__62__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__62__TempOp__1 Op);

output view Region_Title_H1_All;

create view Region_Title_H1 as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region_Title_H1__Temp Op;

output view Region_Title_H1;

create view Region_H2_All as
  select  GetText(H.match) as match,
          ConstructEvidence(GetString('H2'), GetString(H.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          H.__auto__id as __Subquery__65__Temp_____sep_____H____id
  from  __Subquery__65__Temp H;

output view Region_H2_All;

create view Region_H2 as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region_H2__Temp Op;

output view Region_H2;

create view Region_URLPath_All as
  select  GetText(U.match) as match,
          ConstructEvidence(GetString('URLPath'), GetString(U.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          U.__auto__id as __Subquery__66__Temp_____sep_____U____id
  from  __Subquery__66__Temp U;

output view Region_URLPath_All;

create view Region_URLPath as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region_URLPath__Temp Op;

output view Region_URLPath;

create view Region_MetaKeywords_MetaDescription_All as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__67__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__67__TempOp__1 Op);

output view Region_MetaKeywords_MetaDescription_All;

create view Region_MetaKeywords_MetaDescription as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region_MetaKeywords_MetaDescription__Temp Op;

output view Region_MetaKeywords_MetaDescription;

create view Region_URLHost_All as
  select  GetText(U.match) as match,
          ConstructEvidence(GetString('URLHost'), GetString(U.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          U.__auto__id as __Subquery__70__Temp_____sep_____U____id
  from  __Subquery__70__Temp U;

output view Region_URLHost_All;

create view Region_URLHost as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region_URLHost__Temp Op;

output view Region_URLHost;

create view Region0_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region0___Temp Op;

output view Region0_;

create view Region0 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__71__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__71__TempOp__1 Op);

output view Region0;

create view Region1_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region1___Temp Op;

output view Region1_;

create view Region1 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__72__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__72__TempOp__1 Op);

output view Region1;

create view Region2_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region2___Temp Op;

output view Region2_;

create view Region2 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__73__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__73__TempOp__1 Op);

output view Region2;

create view Region3_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region3___Temp Op;

output view Region3_;

create view Region3 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__74__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__74__TempOp__1 Op);

output view Region3;

create view Region4_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region4___Temp Op;

output view Region4_;

create view Region4 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__75__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__75__TempOp__1 Op);

output view Region4;

create view Region5_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region5___Temp Op;

output view Region5_;

create view Region5 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__76__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__76__TempOp__1 Op);

output view Region5;

create view Region6_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Region6___Temp Op;

output view Region6_;

create view Region6 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__77__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__77__TempOp__1 Op);

output view Region6;

create view RegionFinal as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__RegionFinal__Temp Op;

output view RegionFinal;

create view RegionWithCode as
  select  C.match as match,
          M.code as code,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as RegionFinal_____sep_____C____id,
          M.__auto__id as RegionMapping_____sep_____M____id
  from  RegionFinal C,
        RegionMapping M
  where Equals(GetText(C.match), GetText(M.name));

output view RegionWithCode;

create view RegionNoCode as
  select  Op.match as match,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__78__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__78__TempOp__1 Op,
        __Minus__78__Temp __t
  where Equals(Op.match, __t.match);

output view RegionNoCode;

create view RegionNormalized as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__79__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__79__TempOp__1 Op);

output view RegionNormalized;

create view RegionEvidenceAll as
  select  Op.id as id,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__RegionEvidenceAll__Temp Op;

output view RegionEvidenceAll;



create view RegionEvidenceWithGlobal as
  select  Op.id as id,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__RegionEvidenceWithGlobal__Temp Op;

output view RegionEvidenceWithGlobal;

create view RegionEvidenceFinal as
  select  Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__RegionEvidenceFinal__Temp Op;

output view RegionEvidenceFinal;

create view RegionNormalizedWithGlobal as
  select  C.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as __Subquery__81__Temp_____sep_____C____id
  from  __Subquery__81__Temp C;

output view RegionNormalizedWithGlobal;

create view RegionAgg as
  select  Op.region as region,
          AutoID() as __auto__id
  from  __Base__RegionAgg__Temp Op;

output view RegionAgg;

create view RegionWithEvidence as
  select  C.region as region,
          E.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as RegionAgg_____sep_____C____id,
          E.__auto__id as RegionEvidenceFinal_____sep_____E____id
  from  RegionAgg C,
        RegionEvidenceFinal E;

output view RegionWithEvidence;

create view RegionMissing as
  select  Op.region as region,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__RegionMissing__Temp Op;

output view RegionMissing;

create view GeoRegion as
  (select  Op.region as region,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__82__TempOp__0 Op)
  union all
  (select  Op.region as region,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__82__TempOp__1 Op);

output view GeoRegion;

create view __Base__Region0___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Region_Seg1 R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Region_HQURLPath Region_HQURLPath
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Region0___Temp;

create view __Base__Region1___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Region_Seg2_FirstMain R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Region0 Region0
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Region1___Temp;

create view __Base__Region2___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Region_Title_H1 R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Region1 Region1
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Region2___Temp;

create view __Base__Region3___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Region_H2 R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Region2 Region2
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Region3___Temp;

create view __Base__Region4___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Region_URLPath R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Region3 Region3
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Region4___Temp;

create view __Base__Region5___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Region_MetaKeywords_MetaDescription R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Region4 Region4
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Region5___Temp;

create view __Base__Region6___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Region_URLHost R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Region5 Region5
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Region6___Temp;

create view __Base__RegionAgg__Temp as
  select  ListJoin(C.match, ';') as region
  from  
    (select  C.id as id,
            List(C.match) as match
    from  
      (select  1 as id,
              GetText(C.match) as match
      from  RegionNormalizedWithGlobal C
      group by GetText(C.match)
      ) C
    group by C.id
    ) C;

output view __Base__RegionAgg__Temp;

create view __Base__RegionEvidenceAll__Temp as
  select  C.id as id,
          GetText(C.evidence) as evidence
  from  
    ((select  1 as id,
              C.evidence as evidence
      from  Region_HQURLPath C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Region_Seg1 C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Region_Seg2_FirstMain C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Region_Title_H1 C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Region_H2 C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Region_URLPath C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Region_MetaKeywords_MetaDescription C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Region_URLHost C)
    ) C
  group by C.id, GetText(C.evidence)
  order by GetText(C.evidence);

output view __Base__RegionEvidenceAll__Temp;

create view __Base__RegionEvidenceFinal__Temp as
  select  ListJoin(C.evidence, ';') as evidence
  from  
    (select  C.id as id,
            List(C.evidence) as evidence
    from  RegionEvidenceWithGlobal C
    group by C.id
    ) C;

output view __Base__RegionEvidenceFinal__Temp;

create view __Base__RegionEvidenceWithGlobal__Temp as
  select  C.id as id,
          C.evidence as evidence
  from  
    ((select  RegionEvidenceGlobal.id as id,
              RegionEvidenceGlobal.evidence as evidence
      from  RegionEvidenceGlobal RegionEvidenceGlobal)
    union all
    (select  RegionEvidenceAll.id as id,
              RegionEvidenceAll.evidence as evidence
      from  RegionEvidenceAll RegionEvidenceAll)
    ) C
  group by C.id, C.evidence
  order by C.evidence;

output view __Base__RegionEvidenceWithGlobal__Temp;

create view __Base__RegionFinal__Temp as
  select  GetText(C.match) as match,
          GetText(C.evidence) as evidence
  from  
    (select  toUpperCase(C.match) as match,
            C.evidence as evidence
    from  Region6 C
    ) C
  group by GetText(C.match), GetText(C.evidence);

output view __Base__RegionFinal__Temp;

create view __Base__RegionMissing__Temp as
  select  'N/A' as region,
          '' as evidence
  from  
    (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
    from  
      (select  Count(*) as cnt
      from  RegionWithEvidence RegionWithEvidence
      ) S
    ) R1
  where Equals(R1.xsists, 0);

output view __Base__RegionMissing__Temp;

create view __Base__Region_H2__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Region_H2_All R,

        (select  Count(*) as cnt
        from  Region_H2_All Region_H2_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Region_H2__Temp;

create view __Base__Region_HQURLPath__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Region_HQURLPath_All R,

        (select  Count(*) as cnt
        from  Region_HQURLPath_All Region_HQURLPath_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Region_HQURLPath__Temp;

create view __Base__Region_MetaKeywords_MetaDescription__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Region_MetaKeywords_MetaDescription_All R,

        (select  Count(*) as cnt
        from  Region_MetaKeywords_MetaDescription_All Region_MetaKeywords_MetaDescription_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Region_MetaKeywords_MetaDescription__Temp;

create view __Base__Region_Seg1__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Region_Seg1_All R,

        (select  Count(*) as cnt
        from  Region_Seg1_All Region_Seg1_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Region_Seg1__Temp;

create view __Base__Region_Seg2_FirstMain__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Region_Seg2_FirstMain_All R,

        (select  Count(*) as cnt
        from  Region_Seg2_FirstMain_All Region_Seg2_FirstMain_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Region_Seg2_FirstMain__Temp;

create view __Base__Region_Title_H1__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Region_Title_H1_All R,

        (select  Count(*) as cnt
        from  Region_Title_H1_All Region_Title_H1_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Region_Title_H1__Temp;

create view __Base__Region_URLHost__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Region_URLHost_All R,

        (select  Count(*) as cnt
        from  Region_URLHost_All Region_URLHost_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Region_URLHost__Temp;

create view __Base__Region_URLPath__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Region_URLPath_All R,

        (select  Count(*) as cnt
        from  Region_URLPath_All Region_URLPath_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Region_URLPath__Temp;

create view __Minus__78__Temp as
  select  __t.match as match
  from  
    ((select  Op.match as match
      from  __Minus__78__TempOp__1 Op)
    minus
    (select  Op.match as match
      from  __Minus__78__TempOp__2 Op)
    ) __t
  group by __t.match;

output view __Minus__78__Temp;

create view __Minus__78__TempOp__1 as
  select  C.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as RegionFinal_____sep_____C____id
  from  RegionFinal C;

output view __Minus__78__TempOp__1;

create view __Minus__78__TempOp__2 as
  select  C.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as RegionWithCode_____sep_____C____id
  from  RegionWithCode C;

output view __Minus__78__TempOp__2;

create view __Subquery__58__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    T.__auto__id as Seg1_____sep_____T____id,
    dictionary 'GeoRegionNameDict'
    on T.seg as match
  from Seg1 T
  having Not(MatchesDict('geo/region_invalid.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__58__Temp;

create view __Subquery__60__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    T.__auto__id as Seg2_____sep_____T____id,
    dictionary 'GeoRegionNameDict'
    on T.seg as match
  from Seg2 T
  having Not(MatchesDict('geo/region_invalid.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__60__Temp;

create view __Subquery__61__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    FM.__auto__id as FirstMainFinal_____sep_____FM____id,
    dictionary 'GeoRegionNameDict'
    on FM.content as match
  from FirstMainFinal FM
  having Not(MatchesDict('geo/region_invalid.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__61__Temp;

create view __Subquery__63__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    T.__auto__id as TitleFinal_____sep_____T____id,
    dictionary 'GeoRegionNameDict'
    on T.content as match
  from TitleFinal T
  having Not(MatchesDict('geo/region_invalid.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__63__Temp;

create view __Subquery__64__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    H.__auto__id as H1_____sep_____H____id,
    dictionary 'GeoRegionNameDict'
    on H.match as match
  from H1 H
  having Not(MatchesDict('geo/region_invalid.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__64__Temp;

create view __Subquery__65__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    H.__auto__id as H2_____sep_____H____id,
    dictionary 'GeoRegionNameDict'
    on H.match as match
  from H2 H
  having Not(MatchesDict('geo/region_invalid.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__65__Temp;

create view __Subquery__66__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    dictionary 'GeoRegionNameDict'
    on U.actualPath as match
  from PageURL U
  having Not(MatchesDict('geo/region_invalid.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__66__Temp;

create view __Subquery__68__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    D.__auto__id as MetaDescription_____sep_____D____id,
    dictionary 'GeoRegionNameDict'
    on D.content as match
  from MetaDescription D
  having Not(MatchesDict('geo/region_invalid.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__68__Temp;

create view __Subquery__69__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    K.__auto__id as MetaKeywords_____sep_____K____id,
    dictionary 'GeoRegionNameDict'
    on K.content as match
  from MetaKeywords K
  having Not(MatchesDict('geo/region_invalid.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__69__Temp;

create view __Subquery__70__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    dictionary 'GeoRegionNameDict'
    on U.host as match
  from PageURL U
  having Not(MatchesDict('geo/region_invalid.dict', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__70__Temp;

create view __Subquery__81__Temp as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__80__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__80__TempOp__1 Op);

output view __Subquery__81__Temp;

create view __Union__59__TempOp__0 as
  select  GetText(T.match) as match,
          ConstructEvidence(GetString('Seg2'), GetString(T.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__60__Temp_____sep_____T____id
  from  __Subquery__60__Temp T;

output view __Union__59__TempOp__0;

create view __Union__59__TempOp__1 as
  select  GetText(FM.match) as match,
          ConstructEvidence(GetString('FirstMainHead'), GetString(FM.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          FM.__auto__id as __Subquery__61__Temp_____sep_____FM____id
  from  __Subquery__61__Temp FM;

output view __Union__59__TempOp__1;

create view __Union__62__TempOp__0 as
  select  GetText(T.match) as match,
          ConstructEvidence(GetString('Title'), GetString(T.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__63__Temp_____sep_____T____id
  from  __Subquery__63__Temp T;

output view __Union__62__TempOp__0;

create view __Union__62__TempOp__1 as
  select  GetText(H.match) as match,
          ConstructEvidence(GetString('H1'), GetString(H.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          H.__auto__id as __Subquery__64__Temp_____sep_____H____id
  from  __Subquery__64__Temp H;

output view __Union__62__TempOp__1;

create view __Union__67__TempOp__0 as
  select  GetText(D.match) as match,
          ConstructEvidence(GetString('MetaDescription'), GetString(D.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__68__Temp_____sep_____D____id
  from  __Subquery__68__Temp D;

output view __Union__67__TempOp__0;

create view __Union__67__TempOp__1 as
  select  GetText(K.match) as match,
          ConstructEvidence(GetString('MetaKeywords'), GetString(K.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          K.__auto__id as __Subquery__69__Temp_____sep_____K____id
  from  __Subquery__69__Temp K;

output view __Union__67__TempOp__1;

create view __Union__71__TempOp__0 as
  select  Region_HQURLPath.match as match,
          Region_HQURLPath.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region_HQURLPath.__auto__id as Region_HQURLPath_____sep_____Region_HQURLPath____id
  from  Region_HQURLPath Region_HQURLPath;

output view __Union__71__TempOp__0;

create view __Union__71__TempOp__1 as
  select  Region0_.match as match,
          Region0_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region0_.__auto__id as Region0______sep_____Region0_____id
  from  Region0_ Region0_;

output view __Union__71__TempOp__1;

create view __Union__72__TempOp__0 as
  select  Region0.match as match,
          Region0.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region0.__auto__id as Region0_____sep_____Region0____id
  from  Region0 Region0;

output view __Union__72__TempOp__0;

create view __Union__72__TempOp__1 as
  select  Region1_.match as match,
          Region1_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region1_.__auto__id as Region1______sep_____Region1_____id
  from  Region1_ Region1_;

output view __Union__72__TempOp__1;

create view __Union__73__TempOp__0 as
  select  Region1.match as match,
          Region1.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region1.__auto__id as Region1_____sep_____Region1____id
  from  Region1 Region1;

output view __Union__73__TempOp__0;

create view __Union__73__TempOp__1 as
  select  Region2_.match as match,
          Region2_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region2_.__auto__id as Region2______sep_____Region2_____id
  from  Region2_ Region2_;

output view __Union__73__TempOp__1;

create view __Union__74__TempOp__0 as
  select  Region2.match as match,
          Region2.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region2.__auto__id as Region2_____sep_____Region2____id
  from  Region2 Region2;

output view __Union__74__TempOp__0;

create view __Union__74__TempOp__1 as
  select  Region3_.match as match,
          Region3_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region3_.__auto__id as Region3______sep_____Region3_____id
  from  Region3_ Region3_;

output view __Union__74__TempOp__1;

create view __Union__75__TempOp__0 as
  select  Region3.match as match,
          Region3.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region3.__auto__id as Region3_____sep_____Region3____id
  from  Region3 Region3;

output view __Union__75__TempOp__0;

create view __Union__75__TempOp__1 as
  select  Region4_.match as match,
          Region4_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region4_.__auto__id as Region4______sep_____Region4_____id
  from  Region4_ Region4_;

output view __Union__75__TempOp__1;

create view __Union__76__TempOp__0 as
  select  Region4.match as match,
          Region4.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region4.__auto__id as Region4_____sep_____Region4____id
  from  Region4 Region4;

output view __Union__76__TempOp__0;

create view __Union__76__TempOp__1 as
  select  Region5_.match as match,
          Region5_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region5_.__auto__id as Region5______sep_____Region5_____id
  from  Region5_ Region5_;

output view __Union__76__TempOp__1;

create view __Union__77__TempOp__0 as
  select  Region5.match as match,
          Region5.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region5.__auto__id as Region5_____sep_____Region5____id
  from  Region5 Region5;

output view __Union__77__TempOp__0;

create view __Union__77__TempOp__1 as
  select  Region6_.match as match,
          Region6_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Region6_.__auto__id as Region6______sep_____Region6_____id
  from  Region6_ Region6_;

output view __Union__77__TempOp__1;

create view __Union__79__TempOp__0 as
  select  C.code as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as RegionWithCode_____sep_____C____id
  from  RegionWithCode C;

output view __Union__79__TempOp__0;

create view __Union__79__TempOp__1 as
  select  C.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as RegionNoCode_____sep_____C____id
  from  RegionNoCode C;

output view __Union__79__TempOp__1;

create view __Union__80__TempOp__0 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as RegionNormalized_____sep_____R____id
  from  RegionNormalized R;

output view __Union__80__TempOp__0;

create view __Union__80__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as RegionGlobalFinal_____sep_____R____id
  from  RegionGlobalFinal R;

output view __Union__80__TempOp__1;

create view __Union__82__TempOp__0 as
  select  RegionWithEvidence.region as region,
          RegionWithEvidence.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          RegionWithEvidence.__auto__id as RegionWithEvidence_____sep_____RegionWithEvidence____id
  from  RegionWithEvidence RegionWithEvidence;

output view __Union__82__TempOp__0;

create view __Union__82__TempOp__1 as
  select  RegionMissing.region as region,
          RegionMissing.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          RegionMissing.__auto__id as RegionMissing_____sep_____RegionMissing____id
  from  RegionMissing RegionMissing;

output view __Union__82__TempOp__1;

