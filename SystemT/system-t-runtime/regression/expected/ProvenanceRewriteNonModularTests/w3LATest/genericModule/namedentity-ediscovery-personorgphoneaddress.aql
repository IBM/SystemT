module genericModule;


create view SentenceBoundary as
  select  R.match as boundary,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__137__Temp_____sep_____R____id
  from  __Subquery__137__Temp R
  where Not(ContainsDict('dictionaries/abbreviation.dict', CombineSpans(LeftContextTok(R.match, 1), R.match)));

output view SentenceBoundary;

create view FourDigits as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__138__Temp_____sep_____R____id
  from  __Subquery__138__Temp R;

output view FourDigits;

create view TwoDigitsInterval as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__139__Temp_____sep_____R____id
  from  __Subquery__139__Temp R;

output view TwoDigitsInterval;

create view DateNum as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__140__Temp_____sep_____R____id
  from  __Subquery__140__Temp R;

output view DateNum;

create view Month as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__141__Temp_____sep_____D____id
  from  __Subquery__141__Temp D;

output view Month;

create view WKDay as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__142__Temp_____sep_____D____id
  from  __Subquery__142__Temp D;

output view WKDay;

create view TimeZone as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__143__Temp_____sep_____D____id
  from  __Subquery__143__Temp D;

output view TimeZone;

create view DateInterval1 as
  select  CombineSpans(tdi.match, m.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          tdi.__auto__id as TwoDigitsInterval_____sep_____tdi____id,
          m.__auto__id as Month_____sep_____m____id
  from  TwoDigitsInterval tdi,
        Month m
  where FollowsTok(tdi.match, m.match, 0, 0);

output view DateInterval1;

create view DateInterval2 as
  select  CombineSpans(m.match, tdi.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          m.__auto__id as Month_____sep_____m____id,
          tdi.__auto__id as TwoDigitsInterval_____sep_____tdi____id
  from  Month m,
        TwoDigitsInterval tdi
  where FollowsTok(m.match, tdi.match, 0, 0);

output view DateInterval2;

create view DateIntervalWithoutYear as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__144__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__144__TempOp__1 Op);

output view DateIntervalWithoutYear;

create view DateIntervalWithYear as
  select  CombineSpans(d.match, y.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as DateIntervalWithoutYear_____sep_____d____id,
          y.__auto__id as FourDigits_____sep_____y____id
  from  DateIntervalWithoutYear d,
        FourDigits y
  where FollowsTok(d.match, y.match, 0, 1)
     and MatchesRegex(/\s*[,]?\s*/, SpanBetween(d.match, y.match));

output view DateIntervalWithYear;

create view DateIntervalWithOptionalYear as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__145__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__145__TempOp__1 Op);

output view DateIntervalWithOptionalYear;

create view Date1to3 as
  select  __t2.match as match,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__146__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__146__Temp__1 __t1,
        __Consolidate__146__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.match;

output view Date1to3;

create view Date11 as
  select  CombineSpans(dn.match, m.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          m.__auto__id as Month_____sep_____m____id,
          dn.__auto__id as DateNum_____sep_____dn____id
  from  Month m,
        DateNum dn
  where FollowsTok(dn.match, m.match, 0, 1)
     and MatchesRegex(/( )*[,]?( )*(of)?( )*/, SpanBetween(dn.match, m.match));

output view Date11;

create view Date12 as
  select  CombineSpans(m.match, dn.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          m.__auto__id as Month_____sep_____m____id,
          dn.__auto__id as DateNum_____sep_____dn____id
  from  Month m,
        DateNum dn
  where FollowsTok(m.match, dn.match, 0, 1)
     and MatchesRegex(/( )*[,]?( )*/, SpanBetween(m.match, dn.match));

output view Date12;

create view Date6 as
  select  CombineSpans(d.match, fd.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as Date12_____sep_____d____id,
          fd.__auto__id as FourDigits_____sep_____fd____id
  from  Date12 d,
        FourDigits fd
  where FollowsTok(d.match, fd.match, 0, 1)
     and MatchesRegex(/( )*[,]?( )*/, SpanBetween(d.match, fd.match));

output view Date6;

create view Date7 as
  select  CombineSpans(d.match, fd.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as Date11_____sep_____d____id,
          fd.__auto__id as FourDigits_____sep_____fd____id
  from  Date11 d,
        FourDigits fd
  where FollowsTok(d.match, fd.match, 0, 1)
     and MatchesRegex(/\s*[,]?\s*/, SpanBetween(d.match, fd.match));

output view Date7;

create view Date4to5 as
  select  CombineSpans(wkd.match, d.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          wkd.__auto__id as WKDay_____sep_____wkd____id,
          d.__auto__id as Date7_____sep_____d____id
  from  WKDay wkd,
        Date7 d
  where FollowsTok(wkd.match, d.match, 0, 2)
     and MatchesRegex(/( )*[,]?( )*(the)?( )*/, SpanBetween(wkd.match, d.match));

output view Date4to5;

create view Date8 as
  select  CombineSpans(m.match, fd.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          m.__auto__id as Month_____sep_____m____id,
          fd.__auto__id as FourDigits_____sep_____fd____id
  from  Month m,
        FourDigits fd
  where FollowsTok(m.match, fd.match, 0, 1)
     and MatchesRegex(/( )*[,]?( )*/, SpanBetween(m.match, fd.match));

output view Date8;

create view Date9 as
  select  CombineSpans(wkd.match, d.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          wkd.__auto__id as WKDay_____sep_____wkd____id,
          d.__auto__id as Date11_____sep_____d____id
  from  WKDay wkd,
        Date11 d
  where FollowsTok(wkd.match, d.match, 0, 2)
     and MatchesRegex(/[\ ]*[,]?[\ ]*(the)?[\ ]*/, SpanBetween(wkd.match, d.match));

output view Date9;

create view Date10 as
  select  CombineSpans(wkd.match, d.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          wkd.__auto__id as WKDay_____sep_____wkd____id,
          d.__auto__id as Date12_____sep_____d____id
  from  WKDay wkd,
        Date12 d
  where FollowsTok(wkd.match, d.match, 0, 2)
     and MatchesRegex(/[\ ]*[,]?[\ ]*(the)?[\ ]*/, SpanBetween(wkd.match, d.match));

output view Date10;

create view Date13 as
  select  CombineSpans(y1.match, y2.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          y1.__auto__id as FourDigits_____sep_____y1____id,
          y2.__auto__id as FourDigits_____sep_____y2____id
  from  FourDigits y1,
        FourDigits y2
  where FollowsTok(y1.match, y2.match, 1, 1)
     and MatchesRegex(/\s*-\s*/, SpanBetween(y1.match, y2.match));

output view Date13;

create view Date14 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__147__Temp_____sep_____R____id
  from  __Subquery__147__Temp R;

output view Date14;

create view DateAll as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__148__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__148__TempOp__1 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__148__TempOp__2 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__148__TempOp__3 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__148__TempOp__4 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__148__TempOp__5 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__148__TempOp__6 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__148__TempOp__7 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__148__TempOp__8 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__148__TempOp__9 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__148__TempOp__10 Op);

output view DateAll;

create view Dates as
  select  __t2.match as match,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__149__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__149__Temp__1 __t1,
        __Consolidate__149__Temp__2 __t2
  where Or(GreaterThan(GetBegin(__t1.__consolidate__target), GetBegin(__t2.__consolidate__target)), Equals(GetBegin(__t1.__consolidate__target), GetBegin(__t2.__consolidate__target)))
     and Overlaps(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.match;

output view Dates;

create view Time1 as
  select  CombineSpans(td.match, wkd.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          td.__auto__id as TwoDigitsInterval_____sep_____td____id,
          wkd.__auto__id as WKDay_____sep_____wkd____id
  from  TwoDigitsInterval td,
        WKDay wkd
  where FollowsTok(td.match, wkd.match, 0, 0);

output view Time1;

create view Time2 as
  select  CombineSpans(wkd.match, td.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          td.__auto__id as TwoDigitsInterval_____sep_____td____id,
          wkd.__auto__id as WKDay_____sep_____wkd____id
  from  TwoDigitsInterval td,
        WKDay wkd
  where FollowsTok(wkd.match, td.match, 0, 0);

output view Time2;

create view Time2Plus as
  select  CombineSpans(t.match, tz.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          t.__auto__id as Time2_____sep_____t____id,
          tz.__auto__id as TimeZone_____sep_____tz____id
  from  Time2 t,
        TimeZone tz
  where FollowsTok(t.match, tz.match, 0, 0);

output view Time2Plus;

create view Time4 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__150__Temp_____sep_____R____id
  from  __Subquery__150__Temp R;

output view Time4;

create view Time3 as
  select  CombineSpans(t.match, tz.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          t.__auto__id as __Subquery__151__Temp_____sep_____t____id,
          tz.__auto__id as TimeZone_____sep_____tz____id
  from  __Subquery__151__Temp t,
        TimeZone tz
  where FollowsTok(t.match, tz.match, 0, 0);

output view Time3;

create view TimeAll as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__152__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__152__TempOp__1 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__152__TempOp__2 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__152__TempOp__3 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__152__TempOp__4 Op);

output view TimeAll;

create view Times as
  select  __t2.match as match,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__153__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__153__Temp__1 __t1,
        __Consolidate__153__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.match;

output view Times;

create dictionary "StrongPhoneVariantDictionary"
with case insensitive
as (
  'phone',
  'cell',
  'contact',
  'direct',
  'office',
  'tel',
  'dial',
  'Telefon',
  'mobile',
  'Ph',
  'Phone Number',
  'Direct Line',
  'Telephone No',
  'TTY',
  'Toll Free',
  'Toll-free',
  'Fon',
  'Telefon Geschaeftsstelle',
  'Telefon Geschäftsstelle',
  'Telefon Zweigstelle',
  'Telefon Hauptsitz',
  'Telefon (Geschaeftsstelle)',
  'Telefon (Geschäftsstelle)',
  'Telefon (Zweigstelle)',
  'Telefon (Hauptsitz)',
  'Telefonnummer',
  'Telefon Geschaeftssitz',
  'Telefon Geschäftssitz',
  'Telefon (Geschaeftssitz)',
  'Telefon (Geschäftssitz)',
  'Telefon Persönlich',
  'Telefon persoenlich',
  'Telefon (Persönlich)',
  'Telefon (persoenlich)',
  'Handy',
  'Handy-Nummer',
  'Telefon arbeit',
  'Telefon (arbeit)'
);


create view StrongPhoneVariant as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__154__Temp_____sep_____D____id
  from  __Subquery__154__Temp D;

output view StrongPhoneVariant;

create view PhoneNumberInstance as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__155__Temp_____sep_____R____id
  from  __Subquery__155__Temp R;

output view PhoneNumberInstance;

create view CorrectPhoneNumberInstance as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as PhoneNumberInstance_____sep_____R____id
  from  PhoneNumberInstance R
  where Not(ContainsRegex(/(\(.+\()|(\).+\)|(\/.+\/)|(\([^)]*$))/, R.match));

output view CorrectPhoneNumberInstance;

create view StrongPhone as
  select  CombineSpans(SPV.match, PNI.match) as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          SPV.__auto__id as StrongPhoneVariant_____sep_____SPV____id,
          PNI.__auto__id as CorrectPhoneNumberInstance_____sep_____PNI____id
  from  StrongPhoneVariant SPV,
        CorrectPhoneNumberInstance PNI
  where FollowsTok(SPV.match, PNI.match, 0, 4)
     and MatchesRegex(/(([Nn](umber|o|um)|#)\s*(is\s*)?)?\W*/, SpanBetween(SPV.match, PNI.match))
     and Not(ContainsRegex(/[\n\r]/, SpanBetween(SPV.match, PNI.match)));

output view StrongPhone;

create view StrongPhoneNumber as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__156__Temp_____sep_____R____id
  from  __Subquery__156__Temp R;

output view StrongPhoneNumber;

create dictionary "PhoneVariants"
with case insensitive
as (
  '+',
  'phone:',
  'phone :',
  'cell:',
  'cell',
  'cell :',
  'contact:',
  'contact :',
  'direct:',
  'direct :',
  'office:',
  'office :',
  'tel #',
  'dial',
  'Telefon',
  'mobile',
  'Ph',
  'Fon',
  'Telefon Geschaeftsstelle',
  'Telefon Geschäftsstelle',
  'Telefon Zweigstelle',
  'Telefon Hauptsitz',
  'Telefon (Geschaeftsstelle)',
  'Telefon (Geschäftsstelle)',
  'Telefon (Zweigstelle)',
  'Telefon (Hauptsitz)',
  'Telefonnummer',
  'Telefon Geschaeftssitz',
  'Telefon Geschäftssitz',
  'Telefon (Geschaeftssitz)',
  'Telefon (Geschäftssitz)',
  'Telefon Persönlich',
  'Telefon persoenlich',
  'Telefon (Persönlich)',
  'Telefon (persoenlich)',
  'Handy',
  'Handy-Nummer',
  'Telefon arbeit',
  'Telefon (arbeit)'
);


create dictionary "FilterPhoneNum"
with case insensitive
as (
  'fax',
  'efax',
  'pager',
  'Telefax',
  'Facsimile',
  'Telefacsimile',
  'F',
  'fx',
  'Telefax Geschaeftsstelle',
  'Telefax Geschäftsstelle',
  'Telefax Zweigstelle',
  'Telefax Hauptsitz',
  'Telefax Geschaeftssitz',
  'Telefax Geschäftssitz'
);


create view PhoneVariant as
  select  D.match as annot,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__157__Temp_____sep_____D____id
  from  __Subquery__157__Temp D;

output view PhoneVariant;



create view PhoneNumber_R1a as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__158__Temp_____sep_____R____id,
          Var.__auto__id as PhoneVariant_____sep_____Var____id
  from  __Subquery__158__Temp R,
        PhoneVariant Var
  where FollowsTok(Var.annot, R.match, 0, 2)
     and MatchesRegex(/\s*\.{0,10}\s*/, SpanBetween(Var.annot, R.match));

output view PhoneNumber_R1a;

create view PhoneNumber_R1b_2 as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__159__Temp_____sep_____R____id
  from  __Subquery__159__Temp R;

output view PhoneNumber_R1b_2;

create view PhoneNumber_R2a as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__160__Temp_____sep_____R____id
  from  __Subquery__160__Temp R;

output view PhoneNumber_R2a;

create view PhoneNumber_R3 as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__161__Temp_____sep_____R____id
  from  __Subquery__161__Temp R;

output view PhoneNumber_R3;

create view PhoneNumber_R3a as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__162__Temp_____sep_____R____id
  from  __Subquery__162__Temp R;

output view PhoneNumber_R3a;

create view PhoneNumber_R4 as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__163__Temp_____sep_____R____id
  from  __Subquery__163__Temp R;

output view PhoneNumber_R4;

create view PhoneNumber_R5 as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__164__Temp_____sep_____R____id
  from  __Subquery__164__Temp R;

output view PhoneNumber_R5;

create view PhoneNumber_R7a_7b_7c as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__165__Temp_____sep_____R____id,
          Var.__auto__id as PhoneVariant_____sep_____Var____id
  from  __Subquery__165__Temp R,
        PhoneVariant Var
  where FollowsTok(Var.annot, R.match, 0, 2)
     and MatchesRegex(/\s*\.{0,10}\s*/, SpanBetween(Var.annot, R.match));

output view PhoneNumber_R7a_7b_7c;

create view PhoneNumber_R8ILPhone as
  select  R.match as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__166__Temp_____sep_____R____id
  from  __Subquery__166__Temp R;

output view PhoneNumber_R8ILPhone;

create view PhoneNumFull as
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__167__TempOp__0 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__167__TempOp__1 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__167__TempOp__2 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__167__TempOp__3 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__167__TempOp__4 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__167__TempOp__5 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__167__TempOp__6 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__167__TempOp__7 Op);

output view PhoneNumFull;

create view ExtensionNums as
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__168__TempOp__0 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__168__TempOp__1 Op);

output view ExtensionNums;

create view PhoneNumWithExtension as
  select  CombineSpans(P.num, E.num) as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumFull_____sep_____P____id,
          E.__auto__id as ExtensionNums_____sep_____E____id
  from  PhoneNumFull P,
        ExtensionNums E
  where FollowsTok(P.num, E.num, 0, 0)
     and Not(ContainsRegex(/[\n\r]/, SpanBetween(P.num, E.num)));

output view PhoneNumWithExtension;

create view PhoneNumAll as
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__169__TempOp__0 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__169__TempOp__1 Op)
  union all
  (select  Op.num as num,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__169__TempOp__2 Op);

output view PhoneNumAll;

create view PhoneNumCons as
  select  __t2.num as num,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__170__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__170__Temp__1 __t1,
        __Consolidate__170__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.num;

output view PhoneNumCons;





create view CapsPlace as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__171__Temp_____sep_____R____id
  from  __Subquery__171__Temp R;

output view CapsPlace;

create view CapsPlaceTwo as
  select  CombineSpans(cp1.match, cp2.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          cp1.__auto__id as CapsPlace_____sep_____cp1____id,
          cp2.__auto__id as CapsPlace_____sep_____cp2____id
  from  CapsPlace cp1,
        CapsPlace cp2
  where FollowsTok(cp1.match, cp2.match, 0, 0);

output view CapsPlaceTwo;

create view CapsPlaceOnetoTwo as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__172__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__172__TempOp__1 Op);

output view CapsPlaceOnetoTwo;

create view USCity as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__173__Temp_____sep_____D____id
  from  __Subquery__173__Temp D;

output view USCity;

create view Country as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__174__Temp_____sep_____D____id
  from  __Subquery__174__Temp D;

output view Country;

create view State as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__175__Temp_____sep_____D____id
  from  __Subquery__175__Temp D;

output view State;

create view StateStrongAbbrev as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__176__Temp_____sep_____D____id
  from  __Subquery__176__Temp D;

output view StateStrongAbbrev;

create view StateWeakAbbrev as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__177__Temp_____sep_____D____id
  from  __Subquery__177__Temp D;

output view StateWeakAbbrev;

create view StateStrongAll as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__178__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__178__TempOp__1 Op);

output view StateStrongAll;

create view StateWeakAll as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__179__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__179__TempOp__1 Op);

output view StateWeakAll;

create view StreetSuffixNoCase as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__180__Temp_____sep_____D____id
  from  __Subquery__180__Temp D;

output view StreetSuffixNoCase;

create view StreetSuffix as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StreetSuffixNoCase_____sep_____S____id
  from  StreetSuffixNoCase S
  where MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}.?/, S.match);

output view StreetSuffix;

create view StreetSuffixWeakNoCase as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__181__Temp_____sep_____D____id
  from  __Subquery__181__Temp D;

output view StreetSuffixWeakNoCase;

create view StreetSuffixWeak as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StreetSuffixWeakNoCase_____sep_____S____id
  from  StreetSuffixWeakNoCase S
  where MatchesRegex(/^\p{Upper}[\p{Lower}\&]{1,20}/, S.match);

output view StreetSuffixWeak;

create view StreetSuffixAll as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__182__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__182__TempOp__1 Op);

output view StreetSuffixAll;

create view SecondaryUnitNoCase as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__183__Temp_____sep_____D____id
  from  __Subquery__183__Temp D;

output view SecondaryUnitNoCase;

create view SecondaryUnit as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as SecondaryUnitNoCase_____sep_____S____id
  from  SecondaryUnitNoCase S
  where MatchesRegex(/(\#)|(\p{Upper}[\p{Lower}\&]{1,20})/, S.match);

output view SecondaryUnit;

create view Zipcode as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__184__Temp_____sep_____R____id
  from  __Subquery__184__Temp R;

output view Zipcode;

create view NumCP as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__185__Temp_____sep_____R____id
  from  __Subquery__185__Temp R
  where Not(MatchesRegex(/[1-9]\d{3}[,-]\s+.*/, R.match));

output view NumCP;

create view StreetAddressAll as
  select  CombineSpans(nc.match, ssw.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          nc.__auto__id as NumCP_____sep_____nc____id,
          ssw.__auto__id as StreetSuffixAll_____sep_____ssw____id
  from  NumCP nc,
        StreetSuffixAll ssw
  where FollowsTok(nc.match, ssw.match, 1, 7)
     and MatchesRegex(/\s*(\p{Upper}\.?\s+){0,2}(\p{Upper}[\p{Lower}\&]{1,20}|\d{1,3}(st|nd|rd|th))\s*(\p{Upper}[\p{Lower}\&]+\s*){0,3}/, SpanBetween(nc.match, ssw.match))
     and Not(ContainsRegex(/[\n\r]/, CombineSpans(nc.match, ssw.match)));

output view StreetAddressAll;

create view NumForHighwayAddress as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__186__Temp_____sep_____R____id
  from  __Subquery__186__Temp R;

output view NumForHighwayAddress;

create dictionary "HighwayDict"
with case insensitive
as (
  'Route',
  'Rte',
  'US',
  'Hwy',
  'Highway',
  'SR'
);


create view HighwayDictionary as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__187__Temp_____sep_____D____id
  from  __Subquery__187__Temp D;

output view HighwayDictionary;

create view HighwayStateDictionary as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__188__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__188__TempOp__1 Op);

output view HighwayStateDictionary;

create view HighwayNum as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__189__Temp_____sep_____R____id
  from  __Subquery__189__Temp R;

output view HighwayNum;

create view HighwayAddressPart as
  select  CombineSpans(nc.match, rs.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          nc.__auto__id as NumForHighwayAddress_____sep_____nc____id,
          rs.__auto__id as HighwayStateDictionary_____sep_____rs____id
  from  NumForHighwayAddress nc,
        HighwayStateDictionary rs
  where FollowsTok(nc.match, rs.match, 0, 2)
     and MatchesRegex(/\W+((N|S|E|W)\W+)?/, SpanBetween(nc.match, rs.match))
     and Not(ContainsRegex(/[\n\r]/, CombineSpans(nc.match, rs.match)));

output view HighwayAddressPart;

create view HighwayAddress as
  select  CombineSpans(ra.match, hn.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          ra.__auto__id as HighwayAddressPart_____sep_____ra____id,
          hn.__auto__id as HighwayNum_____sep_____hn____id
  from  HighwayAddressPart ra,
        HighwayNum hn
  where FollowsTok(ra.match, hn.match, 0, 1)
     and MatchesRegex(/\W+/, SpanBetween(ra.match, hn.match))
     and Not(ContainsRegex(/[\n\r]/, CombineSpans(ra.match, hn.match)));

output view HighwayAddress;

create view StreetHighwayAddressAll as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__190__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__190__TempOp__1 Op);

output view StreetHighwayAddressAll;

create view StreetAddressUnit as
  select  CombineSpans(S.match, Su.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StreetHighwayAddressAll_____sep_____S____id,
          Su.__auto__id as SecondaryUnit_____sep_____Su____id
  from  StreetHighwayAddressAll S,
        SecondaryUnit Su
  where FollowsTok(S.match, Su.match, 0, 2)
     and MatchesRegex(/\s*\d*\s*,?\s*$/, SpanBetween(S.match, Su.match));

output view StreetAddressUnit;

create view StreetAddressOptionalUnit as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__191__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__191__TempOp__1 Op);

output view StreetAddressOptionalUnit;

create view StreetAddressWithCity as
  select  CombineSpans(S.match, cp.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StreetAddressOptionalUnit_____sep_____S____id,
          cp.__auto__id as CapsPlaceOnetoTwo_____sep_____cp____id
  from  StreetAddressOptionalUnit S,
        CapsPlaceOnetoTwo cp
  where FollowsTok(S.match, cp.match, 0, 5);

output view StreetAddressWithCity;

create view StreetAddressWithCityStrongState as
  select  CombineSpans(Sawc.match, Sa.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Sawc.__auto__id as StreetAddressWithCity_____sep_____Sawc____id,
          Sa.__auto__id as StateStrongAll_____sep_____Sa____id
  from  StreetAddressWithCity Sawc,
        StateStrongAll Sa
  where FollowsTok(Sawc.match, Sa.match, 0, 1)
     and MatchesRegex(/\s*,?\s*/, SpanBetween(Sawc.match, Sa.match));

output view StreetAddressWithCityStrongState;

create view StreetAddressWithCityWeakState as
  select  CombineSpans(Sawc.match, Sa.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Sawc.__auto__id as StreetAddressWithCity_____sep_____Sawc____id,
          Sa.__auto__id as StateWeakAll_____sep_____Sa____id
  from  StreetAddressWithCity Sawc,
        StateWeakAll Sa
  where FollowsTok(Sawc.match, Sa.match, 0, 1)
     and MatchesRegex(/\s*,?\s*/, SpanBetween(Sawc.match, Sa.match));

output view StreetAddressWithCityWeakState;

create view StreetAddressWithCityOptionalWeakState as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__192__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__192__TempOp__1 Op);

output view StreetAddressWithCityOptionalWeakState;

create view StreetAddressWithCityOptionalStateZipcode as
  select  CombineSpans(Sawcos.match, z.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Sawcos.__auto__id as StreetAddressWithCityOptionalWeakState_____sep_____Sawcos____id,
          z.__auto__id as Zipcode_____sep_____z____id
  from  StreetAddressWithCityOptionalWeakState Sawcos,
        Zipcode z
  where FollowsTok(Sawcos.match, z.match, 0, 1)
     and ContainsRegex(/^\s*[,\.]?\s*$/, SpanBetween(Sawcos.match, z.match));

output view StreetAddressWithCityOptionalStateZipcode;

create view WrongPlaces as
  select  R1.match as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R1.__auto__id as StreetAddressWithCityOptionalStateZipcode_____sep_____R1____id,
          R2.__auto__id as StreetAddressWithCityStrongState_____sep_____R2____id
  from  StreetAddressWithCityOptionalStateZipcode R1,
        StreetAddressWithCityStrongState R2
  where Contains(R2.match, R1.match);

output view WrongPlaces;

create view GermanZipcode as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__193__Temp_____sep_____R____id
  from  __Subquery__193__Temp R;

output view GermanZipcode;

create view GermanCities as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__194__Temp_____sep_____D____id
  from  __Subquery__194__Temp D;

output view GermanCities;

create view GermanCityZipcode1 as
  select  CombineSpans(GZ.match, GC.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          GZ.__auto__id as GermanZipcode_____sep_____GZ____id,
          GC.__auto__id as GermanCities_____sep_____GC____id
  from  GermanZipcode GZ,
        GermanCities GC
  where FollowsTok(GZ.match, GC.match, 0, 2)
     and MatchesRegex(/\s*[,\.]?\s*/, SpanBetween(GZ.match, GC.match));

output view GermanCityZipcode1;

create view GermanCityZipcode2 as
  select  CombineSpans(GC.match, GZ.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          GZ.__auto__id as GermanZipcode_____sep_____GZ____id,
          GC.__auto__id as GermanCities_____sep_____GC____id
  from  GermanZipcode GZ,
        GermanCities GC
  where FollowsTok(GC.match, GZ.match, 0, 3)
     and MatchesRegex(/\s*((am Main)|([\-\/]?\p{Lu}\p{M}*(\p{L}\p{M}*)+))?\s*,?\s*/, SpanBetween(GC.match, GZ.match));

output view GermanCityZipcode2;

create view GermanCityZipcode as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__195__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__195__TempOp__1 Op);

output view GermanCityZipcode;

create view GermanStreetAddressSuffix1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__196__Temp_____sep_____R____id
  from  __Subquery__196__Temp R;

output view GermanStreetAddressSuffix1;

create view GermanStreetAddressSuffix2 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__197__Temp_____sep_____R____id
  from  __Subquery__197__Temp R;

output view GermanStreetAddressSuffix2;

create view GermanStreetAddressSuffix as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__198__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__198__TempOp__1 Op);

output view GermanStreetAddressSuffix;

create view GermanCapsPlace as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__199__Temp_____sep_____R____id
  from  __Subquery__199__Temp R;

output view GermanCapsPlace;

create view GermanCapsPlaceTwo as
  select  CombineSpans(R1.match, R2.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R1.__auto__id as GermanCapsPlace_____sep_____R1____id,
          R2.__auto__id as GermanCapsPlace_____sep_____R2____id
  from  GermanCapsPlace R1,
        GermanCapsPlace R2
  where FollowsTok(R1.match, R2.match, 0, 1)
     and MatchesRegex(/[ \t]*(\-[ \t]*)?/, SpanBetween(R1.match, R2.match));

output view GermanCapsPlaceTwo;

create view GermanCapsPlaceOneOrTwo as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__200__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__200__TempOp__1 Op);

output view GermanCapsPlaceOneOrTwo;

create view GermanStreetNameWithSuffix as
  select  CombineSpans(R1.match, R2.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R1.__auto__id as GermanCapsPlaceOneOrTwo_____sep_____R1____id,
          R2.__auto__id as GermanStreetAddressSuffix_____sep_____R2____id
  from  GermanCapsPlaceOneOrTwo R1,
        GermanStreetAddressSuffix R2
  where FollowsTok(R1.match, R2.match, 0, 1)
     and MatchesRegex(/[ \t]*(\-[ \t]*)?/, SpanBetween(R1.match, R2.match));

output view GermanStreetNameWithSuffix;

create view GermanStreetOptionalNameWithSuffix as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__201__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__201__TempOp__1 Op);

output view GermanStreetOptionalNameWithSuffix;

create view GermanStreetAddress1 as
  select  __t2.match as match,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__202__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__202__Temp__1 __t1,
        __Consolidate__202__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.match;

output view GermanStreetAddress1;

create view GermanStreetAddress2 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__203__Temp_____sep_____R____id
  from  __Subquery__203__Temp R;

output view GermanStreetAddress2;

create view GermanStreetAddress as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__204__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__204__TempOp__1 Op);

output view GermanStreetAddress;

create view GermanAddress as
  select  CombineSpans(GSA.match, GCZ.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          GCZ.__auto__id as GermanCityZipcode_____sep_____GCZ____id,
          GSA.__auto__id as GermanStreetAddress_____sep_____GSA____id
  from  GermanCityZipcode GCZ,
        GermanStreetAddress GSA
  where FollowsTok(GSA.match, GCZ.match, 0, 3)
     and MatchesRegex(/\W*([Gg]ermany|Deutsch\s*[Ll]and)?.{0,5}\W*/, SpanBetween(GSA.match, GCZ.match));

output view GermanAddress;

create view PlaceAll as
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__205__TempOp__0 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__205__TempOp__1 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__205__TempOp__2 Op);

output view PlaceAll;

create view Email2_a as
  select  R.match as annot,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__206__Temp_____sep_____R____id
  from  __Subquery__206__Temp R
  where Not(MatchesRegex(/\/|\p{L}/, RightContext(R.match, 1)));

output view Email2_a;

create view Email2_b as
  select  R.match as annot,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__207__Temp_____sep_____R____id
  from  __Subquery__207__Temp R
  where Not(MatchesRegex(/\/|\p{L}/, RightContext(R.match, 1)));

output view Email2_b;

create view Email2 as
  (select  Op.annot as annot,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__208__TempOp__0 Op)
  union all
  (select  Op.annot as annot,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__208__TempOp__1 Op);

output view Email2;

create view OrgWithinNotesEmail1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__209__Temp_____sep_____R____id
  from  __Subquery__209__Temp R
  where MatchesRegex(/[\/]/, LeftContext(R.match, 1))
     and MatchesRegex(/[\s@]/, RightContext(R.match, 1));

output view OrgWithinNotesEmail1;

create view OrgWithinNotesEmail2 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__210__Temp_____sep_____R____id
  from  __Subquery__210__Temp R
  where MatchesRegex(/[@]/, LeftContext(R.match, 1));

output view OrgWithinNotesEmail2;

create dictionary "FilterOrgDict"
with case insensitive
as (
  'Fellow',
  'Sir',
  'IBMer',
  'Researcher',
  'All',
  'Tell',
  'About',
  'Friends',
  'Friend',
  'Colleague',
  'Colleagues',
  'If',
  'Customer',
  'Users',
  'User',
  'Valued',
  'Chairs',
  'Please',
  'Outlook',
  'Notes',
  'Lists',
  'Seminar',
  'We',
  'This',
  'That',
  'There',
  'Here',
  'Subscribers',
  'What',
  'When',
  'Where',
  'With',
  'While',
  'Thanks',
  'Thanksgiving',
  'Senator',
  'Perspective',
  'Manager',
  'Professor',
  'Dear',
  'Contact',
  'Cheers',
  'Athelet',
  'Act',
  'But',
  'Hello',
  'Call',
  'From',
  'Take',
  'Both',
  'Let',
  'You',
  'Your',
  'Name',
  'Administrative',
  'Members',
  'Address',
  'Please',
  'List',
  'Parkway',
  'Then',
  'Statements',
  'Our',
  'My',
  'His',
  'Her',
  'Their',
  '\'s Leading',
  'President',
  'Commissioner',
  'Commitment',
  'Commits',
  'Hey',
  'Director',
  'End',
  'Exit',
  'Experiences',
  'Acquire',
  'Nov',
  'Infrastructure',
  'Inside',
  'Convention',
  'Bonus',
  'Judge',
  'Projected',
  'Recalls',
  'Regards',
  'Recently',
  'Independence',
  'Denied',
  'Unfortunately',
  'Under',
  'Secretary',
  'Ideally',
  'Join',
  'Liebe',
  'Lieber',
  'Herr',
  'Frau',
  'Hi',
  'Futures',
  'Athlete',
  'Invitational',
  '-based',
  'Find',
  'At',
  'To',
  'Copyright',
  'The',
  'Newsletter',
  'Entire',
  'After',
  'Or'
);


create dictionary "OrgConjDict"
with case insensitive
as (
  '&',
  'and',
  'und'
);


create dictionary "OrgPrepDict"
with case insensitive
as (
  'of',
  'for'
);


create dictionary "TheDict"
with case insensitive
as (
  'The',
  'Das'
);


create dictionary "OrgToAvoidDict"
with case insensitive
as (
  'The',
  'Travel',
  'Internal',
  'Betting',
  'Solution',
  'Resolution',
  'West',
  'North',
  'South',
  'East',
  'High',
  'Community',
  'Sunday',
  'Summer',
  'American',
  'Law',
  'Business',
  'Elementary',
  'Middle',
  'Health',
  'Structure',
  'Newly Formed',
  'Luxury',
  'New',
  'Private',
  'S-',
  'For'
);


create dictionary "OrgPartnershipDict"
with case insensitive
as (
  'LP',
  'L.P.',
  'LLP',
  'L.L.P.',
  'LLLP',
  'L.L.L.P.'
);


create view OrgConj as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__211__Temp_____sep_____D____id
  from  __Subquery__211__Temp D;

output view OrgConj;

create view OrgPrep as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__212__Temp_____sep_____D____id
  from  __Subquery__212__Temp D;

output view OrgPrep;

create view The as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__213__Temp_____sep_____D____id
  from  __Subquery__213__Temp D;

output view The;

create view CapsOrg as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__214__Temp_____sep_____R____id
  from  __Subquery__214__Temp R;

output view CapsOrg;

create view AllCapsOrg as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__215__Temp_____sep_____R____id
  from  __Subquery__215__Temp R;

output view AllCapsOrg;

create dictionary "DotComSuffixDict"
with case insensitive
as (
  '.com'
);


create view DotComAnchor as
  select  D.match as anchor,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__216__Temp_____sep_____D____id
  from  __Subquery__216__Temp D;

output view DotComAnchor;

create view DotComContext as
  select  LeftContextTok(R.anchor, 4) as lc,
          R.anchor as anchor,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as DotComAnchor_____sep_____R____id
  from  DotComAnchor R;

output view DotComContext;

create view DotComLC as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__217__Temp_____sep_____R____id
  from  __Subquery__217__Temp R
  where Not(MatchesRegex(/[\.@]/, LeftContextTok(R.match, 1)));

output view DotComLC;

create view DotCom as
  select  CombineSpans(R1.match, R2.anchor) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R1.__auto__id as DotComLC_____sep_____R1____id,
          R2.__auto__id as DotComAnchor_____sep_____R2____id
  from  DotComLC R1,
        DotComAnchor R2
  where FollowsTok(R1.match, R2.anchor, 0, 0);

output view DotCom;

create view OrgClueStIndCaps as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__218__Temp_____sep_____D____id
  from  __Subquery__218__Temp D;

output view OrgClueStIndCaps;

create view OrgClueStIndPrefixCaps as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__219__Temp_____sep_____D____id
  from  __Subquery__219__Temp D;

output view OrgClueStIndPrefixCaps;

create view OrgClueStSuffixCaps as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__220__Temp_____sep_____D____id
  from  __Subquery__220__Temp D;

output view OrgClueStSuffixCaps;

create view OrgClueStCaps as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__221__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__221__TempOp__1 Op);

output view OrgClueStCaps;

create view OrgFullCase as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__222__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__222__TempOp__1 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__222__TempOp__2 Op);

output view OrgFullCase;

create view OrgFullNoCase as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__226__Temp_____sep_____D____id
  from  __Subquery__226__Temp D;

output view OrgFullNoCase;

create view OrgFull as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__227__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__227__TempOp__1 Op);

output view OrgFull;

create view Coonetotwo as
  select  B.block as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          B.__auto__id as __Subquery__229__Temp_____sep_____B____id
  from  __Subquery__229__Temp B;

output view Coonetotwo;

create view Coonetothree as
  select  B.block as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          B.__auto__id as __Subquery__231__Temp_____sep_____B____id
  from  __Subquery__231__Temp B;

output view Coonetothree;

create view CoOcscOpCo as
  select  CombineSpans(coco1.match, coco2.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          coco1.__auto__id as Coonetotwo_____sep_____coco1____id,
          ocsc.__auto__id as OrgClueStCaps_____sep_____ocsc____id,
          op.__auto__id as OrgPrep_____sep_____op____id,
          coco2.__auto__id as Coonetotwo_____sep_____coco2____id
  from  Coonetotwo coco1,
        OrgClueStCaps ocsc,
        OrgPrep op,
        Coonetotwo coco2
  where FollowsTok(coco1.match, ocsc.match, 0, 0)
     and FollowsTok(ocsc.match, op.match, 0, 0)
     and FollowsTok(op.match, coco2.match, 0, 0);

output view CoOcscOpCo;

create view CoOcsic1 as
  select  CombineSpans(coco.match, ocsic.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          coco.__auto__id as Coonetothree_____sep_____coco____id,
          ocsic.__auto__id as OrgClueStIndCaps_____sep_____ocsic____id
  from  Coonetothree coco,
        OrgClueStIndCaps ocsic
  where FollowsTok(coco.match, ocsic.match, 0, 0)
     and Not(ContainsRegex(/[\n\r]/, CombineSpans(coco.match, ocsic.match)));

output view CoOcsic1;

create view CoOcsic2 as
  select  CombineSpans(coco.match, ocsic.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          coco.__auto__id as Coonetothree_____sep_____coco____id,
          ocsic.__auto__id as OrgClueStSuffixCaps_____sep_____ocsic____id
  from  Coonetothree coco,
        OrgClueStSuffixCaps ocsic
  where FollowsTok(coco.match, ocsic.match, 0, 0)
     and Not(ContainsRegex(/[\n\r]/, CombineSpans(coco.match, ocsic.match)));

output view CoOcsic2;

create view Continents as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__232__Temp_____sep_____D____id
  from  __Subquery__232__Temp D;

output view Continents;

create view Nationalities as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__233__Temp_____sep_____D____id
  from  __Subquery__233__Temp D;

output view Nationalities;

create view OrgToAvoid as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__234__Temp_____sep_____D____id
  from  __Subquery__234__Temp D;

output view OrgToAvoid;

create view NonOrgDictMatches as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__235__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__235__TempOp__1 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__235__TempOp__2 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__235__TempOp__3 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__235__TempOp__4 Op);

output view NonOrgDictMatches;

create view NonOrgs as
  select  CombineSpans(NO.match, OC.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          NO.__auto__id as NonOrgDictMatches_____sep_____NO____id,
          OC.__auto__id as OrgClueStCaps_____sep_____OC____id
  from  NonOrgDictMatches NO,
        OrgClueStCaps OC
  where FollowsTok(NO.match, OC.match, 0, 1)
     and MatchesRegex(/\s*\W*\s*/, SpanBetween(NO.match, OC.match));

output view NonOrgs;

create view CoOcsicAll as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__236__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__236__TempOp__1 Op);

output view CoOcsicAll;

create view CoOcsic as
  select  Op.match as match,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__237__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__237__TempOp__1 Op,
        __Minus__237__Temp __t
  where Equals(Op.match, __t.match);

output view CoOcsic;

create view CoOcsicEx as
  select  CombineSpans(C.match, S.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as CoOcsic1_____sep_____C____id,
          S.__auto__id as OrgClueStSuffixCaps_____sep_____S____id,
          O.__auto__id as CapsOrg_____sep_____O____id
  from  CoOcsic1 C,
        OrgClueStSuffixCaps S,
        CapsOrg O
  where FollowsTok(C.match, O.match, 0, 0)
     and FollowsTok(O.match, S.match, 0, 0);

output view CoOcsicEx;

create view CoOcsscAll as
  select  CombineSpans(coco.match, ocssc.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          coco.__auto__id as Coonetothree_____sep_____coco____id,
          ocssc.__auto__id as OrgClueStSuffixCaps_____sep_____ocssc____id
  from  Coonetothree coco,
        OrgClueStSuffixCaps ocssc
  where FollowsTok(coco.match, ocssc.match, 0, 1)
     and MatchesRegex(/\s*[,\s]\s*/, SpanBetween(coco.match, ocssc.match));

output view CoOcsscAll;

create view CoOcssc as
  select  Op.match as match,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__238__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__238__TempOp__1 Op,
        __Minus__238__Temp __t
  where Equals(Op.match, __t.match);

output view CoOcssc;

create view OcscOpCoOcCoAll as
  select  CombineSpans(ocsc.match, coco2.match) as match,
          coco2.match as suffix,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          ocsc.__auto__id as OrgClueStIndPrefixCaps_____sep_____ocsc____id,
          op.__auto__id as OrgPrep_____sep_____op____id,
          coco1.__auto__id as Coonetotwo_____sep_____coco1____id,
          oc.__auto__id as OrgConj_____sep_____oc____id,
          coco2.__auto__id as Coonetothree_____sep_____coco2____id
  from  OrgClueStIndPrefixCaps ocsc,
        OrgPrep op,
        Coonetotwo coco1,
        OrgConj oc,
        Coonetothree coco2
  where FollowsTok(ocsc.match, op.match, 0, 0)
     and FollowsTok(op.match, coco1.match, 0, 0)
     and FollowsTok(coco1.match, oc.match, 0, 0)
     and FollowsTok(oc.match, coco2.match, 0, 0)
     and Not(ContainsRegex(/[\t\n\r]/, CombineSpans(ocsc.match, coco2.match)));

output view OcscOpCoOcCoAll;

create view OcscOpCoOcCoInvalid as
  select  o.match as match,
          c.match as suffix,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          o.__auto__id as OcscOpCoOcCoAll_____sep_____o____id,
          c.__auto__id as CoOcsic1_____sep_____c____id
  from  OcscOpCoOcCoAll o,
        CoOcsic1 c
  where Overlaps(o.suffix, c.match)
     and Not(ContainsRegex(/&/, o.match));

output view OcscOpCoOcCoInvalid;

create view OcscOpCoOcCo as
  select  Op.match as match,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__239__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__239__TempOp__1 Op,
        __Minus__239__Temp __t
  where Equals(Op.match, __t.match);

output view OcscOpCoOcCo;

create view CoOcscOpCoOcCo as
  select  CombineSpans(coco.match, R1.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          coco.__auto__id as Coonetothree_____sep_____coco____id,
          R1.__auto__id as OcscOpCoOcCo_____sep_____R1____id
  from  Coonetothree coco,
        OcscOpCoOcCo R1
  where FollowsTok(coco.match, R1.match, 0, 0)
     and Not(ContainsRegex(/[\t\n\r]/, CombineSpans(coco.match, R1.match)));

output view CoOcscOpCoOcCo;

create view CoOcscOpCoOcCoAll as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__240__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__240__TempOp__1 Op);

output view CoOcscOpCoOcCoAll;

create view CoOcscOpCoOcCoConsolidated as
  select  __t2.match as match,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__241__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__241__Temp__1 __t1,
        __Consolidate__241__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.match;

output view CoOcscOpCoOcCoConsolidated;

create view OfCo as
  select  CombineSpans(of.match, coco.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          of.__auto__id as OrgFull_____sep_____of____id,
          coco.__auto__id as Coonetotwo_____sep_____coco____id
  from  OrgFull of,
        Coonetotwo coco
  where FollowsTok(of.match, coco.match, 0, 0);

output view OfCo;

create view OfCozerototwo as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__242__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__242__TempOp__1 Op);

output view OfCozerototwo;

create view OfCoOcsc as
  select  CombineSpans(of.match, ocsc.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          of.__auto__id as OfCozerototwo_____sep_____of____id,
          ocsc.__auto__id as OrgClueStCaps_____sep_____ocsc____id
  from  OfCozerototwo of,
        OrgClueStCaps ocsc
  where FollowsTok(of.match, ocsc.match, 0, 0);

output view OfCoOcsc;

create view CoOc as
  select  CombineSpans(co.match, oc.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          co.__auto__id as Coonetotwo_____sep_____co____id,
          oc.__auto__id as OrgConj_____sep_____oc____id
  from  Coonetotwo co,
        OrgConj oc
  where FollowsTok(co.match, oc.match, 0, 0);

output view CoOc;

create view CoOcCo as
  select  CombineSpans(cooc.match, co.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          cooc.__auto__id as CoOc_____sep_____cooc____id,
          co.__auto__id as Coonetotwo_____sep_____co____id
  from  CoOc cooc,
        Coonetotwo co
  where FollowsTok(cooc.match, co.match, 0, 0);

output view CoOcCo;

create view CoOcCozerototwo as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__243__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__243__TempOp__1 Op);

output view CoOcCozerototwo;

create view CoOcCozerototwoOcscOpCo as
  select  CombineSpans(coocco.match, co.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          coocco.__auto__id as CoOcCozerototwo_____sep_____coocco____id,
          ocsc.__auto__id as OrgClueStCaps_____sep_____ocsc____id,
          op.__auto__id as OrgPrep_____sep_____op____id,
          co.__auto__id as Coonetotwo_____sep_____co____id
  from  CoOcCozerototwo coocco,
        OrgClueStCaps ocsc,
        OrgPrep op,
        Coonetotwo co
  where FollowsTok(coocco.match, ocsc.match, 0, 0)
     and FollowsTok(ocsc.match, op.match, 0, 0)
     and FollowsTok(op.match, co.match, 0, 0)
     and Not(ContainsRegex(/[\t\r\n]/, CombineSpans(coocco.match, co.match)));

output view CoOcCozerototwoOcscOpCo;

create view OrganizationR11_no_quantifier as
  select  CombineSpans(OP.match, CO.block) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          CO.__auto__id as __Subquery__245__Temp_____sep_____CO____id,
          P.__auto__id as OrgPrep_____sep_____P____id,
          OP.__auto__id as OrgClueStIndPrefixCaps_____sep_____OP____id
  from  __Subquery__245__Temp CO,
        OrgPrep P,
        OrgClueStIndPrefixCaps OP
  where FollowsTok(OP.match, P.match, 0, 0)
     and FollowsTok(P.match, CO.block, 0, 0)
     and Not(ContainsRegex(/[\n\r]/, CombineSpans(OP.match, CO.block)))
     and Not(ContainsDict('dictionaries/industryType_prefix.dict', CO.block));

output view OrganizationR11_no_quantifier;

create view OrganizationR11_with_quantifier as
  select  CombineSpans(CO.block, O.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          CO.__auto__id as __Subquery__247__Temp_____sep_____CO____id,
          O.__auto__id as OrganizationR11_no_quantifier_____sep_____O____id
  from  __Subquery__247__Temp CO,
        OrganizationR11_no_quantifier O
  where FollowsTok(CO.block, O.match, 0, 0);

output view OrganizationR11_with_quantifier;

create view OrganizationR11_no_the as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__248__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__248__TempOp__1 Op);

output view OrganizationR11_no_the;

create view Org5791011 as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__249__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__249__TempOp__1 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__249__TempOp__2 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__249__TempOp__3 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__249__TempOp__4 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__249__TempOp__5 Op);

output view Org5791011;

create view InitialWord as
  select  R.match as word,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__250__Temp_____sep_____R____id
  from  __Subquery__250__Temp R
  where Not(MatchesRegex(/M\.D\./, R.match));

output view InitialWord;

create view WeakInitialWord as
  select  R.match as word,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__251__Temp_____sep_____R____id
  from  __Subquery__251__Temp R
  where Not(ContainsRegex(/[\p{Upper}]{3}/, R.match));

output view WeakInitialWord;

create view ExpandedOrg5791011R1 as
  select  CombineSpans(ab.match, org5791011.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          ab.__auto__id as AllCapsOrg_____sep_____ab____id,
          org5791011.__auto__id as Org5791011_____sep_____org5791011____id
  from  AllCapsOrg ab,
        Org5791011 org5791011
  where FollowsTok(ab.match, org5791011.match, 0, 0)
     and Not(ContainsRegex(/[\n\r]/, SpanBetween(ab.match, org5791011.match)));

output view ExpandedOrg5791011R1;

create view ExpandedOrg5791011R2 as
  select  CombineSpans(ab.word, org5791011.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          ab.__auto__id as InitialWord_____sep_____ab____id,
          org5791011.__auto__id as Org5791011_____sep_____org5791011____id
  from  InitialWord ab,
        Org5791011 org5791011
  where FollowsTok(ab.word, org5791011.match, 0, 0)
     and Not(ContainsRegex(/[\n\r]/, SpanBetween(ab.word, org5791011.match)));

output view ExpandedOrg5791011R2;

create view ExpandedOrg5791011 as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__252__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__252__TempOp__1 Op);

output view ExpandedOrg5791011;

create view TheOrg5791011 as
  select  CombineSpans(C.match, org5791011.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          the.__auto__id as The_____sep_____the____id,
          C.__auto__id as CoOc_____sep_____C____id,
          org5791011.__auto__id as Org5791011_____sep_____org5791011____id
  from  The the,
        CoOc C,
        Org5791011 org5791011
  where FollowsTok(the.match, C.match, 0, 0)
     and FollowsTok(C.match, org5791011.match, 0, 0);

output view TheOrg5791011;

create view ExpandedOrg5791011WithAnd1 as
  select  CombineSpans(C.match, O.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as Coonetothree_____sep_____C____id,
          O.__auto__id as Org5791011_____sep_____O____id
  from  Coonetothree C,
        Org5791011 O
  where FollowsTok(C.match, O.match, 0, 1)
     and MatchesRegex(/\s+[&]\s+/, SpanBetween(C.match, O.match))
     and Not(ContainsRegex(/[\t\n\r]/, CombineSpans(C.match, O.match)));

output view ExpandedOrg5791011WithAnd1;

create view ExpandedOrg5791011WithAnd2 as
  select  CombineSpans(C.match, O.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as AllCapsOrg_____sep_____C____id,
          O.__auto__id as ExpandedOrg5791011WithAnd1_____sep_____O____id
  from  AllCapsOrg C,
        ExpandedOrg5791011WithAnd1 O
  where FollowsTok(C.match, O.match, 0, 0)
     and Not(ContainsRegex(/[\t\n\r]/, SpanBetween(C.match, O.match)));

output view ExpandedOrg5791011WithAnd2;

create view ExpandedOrg5791011WithAnd3 as
  select  CombineSpans(I.word, O.match) as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          I.__auto__id as InitialWord_____sep_____I____id,
          O.__auto__id as ExpandedOrg5791011WithAnd1_____sep_____O____id
  from  InitialWord I,
        ExpandedOrg5791011WithAnd1 O
  where FollowsTok(I.word, O.match, 0, 0)
     and Not(ContainsRegex(/[\t\n\r]/, SpanBetween(I.word, O.match)));

output view ExpandedOrg5791011WithAnd3;

create view ExpandedOrg5791011WithAnd as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__253__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__253__TempOp__1 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__253__TempOp__2 Op);

output view ExpandedOrg5791011WithAnd;

create view OrgAll as
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__254__TempOp__0 Op)
  union all
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__254__TempOp__1 Op)
  union all
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__254__TempOp__2 Op)
  union all
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__254__TempOp__3 Op)
  union all
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__254__TempOp__4 Op)
  union all
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__254__TempOp__5 Op)
  union all
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__254__TempOp__6 Op)
  union all
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__254__TempOp__7 Op);

output view OrgAll;

create view OrgSentence as
  select  Op.org as org,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__255__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__255__TempOp__1 Op,
        __Minus__255__Temp __t
  where Equals(Op.org, __t.org);

output view OrgSentence;

create dictionary "FilterPersonDict"
with case insensitive
as (
  'Travel',
  'Fellow',
  'Sir',
  'IBMer',
  'Researcher',
  'All',
  'Tell',
  'Friends',
  'Friend',
  'Colleague',
  'Colleagues',
  'Managers',
  'If',
  'Customer',
  'Users',
  'User',
  'Valued',
  'Executive',
  'Chairs',
  'New',
  'Owner',
  'Conference',
  'Please',
  'Outlook',
  'Lotus',
  'Notes',
  'This',
  'That',
  'There',
  'Here',
  'Subscribers',
  'What',
  'When',
  'Where',
  'Which',
  'With',
  'While',
  'Thanks',
  'Thanksgiving',
  'Senator',
  'Platinum',
  'Perspective',
  'Manager',
  'Ambassador',
  'Professor',
  'Dear',
  'Contact',
  'Cheers',
  'Athelet',
  'And',
  'Act',
  'But',
  'Hello',
  'Call',
  'From',
  'Center',
  'The',
  'Take',
  'Junior',
  'Both',
  'Communities',
  'Greetings',
  'Hope',
  'Restaurants',
  'Properties',
  'Let',
  'Corp',
  'Memorial',
  'You',
  'Your',
  'Our',
  'My',
  'His',
  'Her',
  'Their',
  'Popcorn',
  'Name',
  'July',
  'June',
  'Join',
  'Business',
  'Administrative',
  'South',
  'Members',
  'Address',
  'Please',
  'List',
  'Public',
  'Inc',
  'Parkway',
  'Brother',
  'Buy',
  'Then',
  'Services',
  'Statements',
  'President',
  'Commissioner',
  'Commitment',
  'Commits',
  'Hey',
  'Director',
  'End',
  'Exit',
  'Experiences',
  'Finance',
  'Elementary',
  'Wednesday',
  'Nov',
  'Infrastructure',
  'Inside',
  'Convention',
  'Judge',
  'Lady',
  'Friday',
  'Project',
  'Projected',
  'Recalls',
  'Regards',
  'Recently',
  'Administration',
  'Independence',
  'Denied',
  'Unfortunately',
  'Under',
  'Uncle',
  'Utility',
  'Unlike',
  'Was',
  'Were',
  'Secretary',
  'Speaker',
  'Chairman',
  'Consider',
  'Consultant',
  'County',
  'Court',
  'Defensive',
  'Northwestern',
  'Place',
  'Hi',
  'Futures',
  'Athlete',
  'Invitational',
  'System',
  'International',
  'Main',
  'Online',
  'Ideally',
  'If',
  'Our',
  'About',
  'Analyst',
  'On',
  'Of',
  'By',
  'HR',
  'Mkt',
  'Pre',
  'Post',
  'Condominium',
  'Ice',
  'Surname',
  'Lastname',
  'firstname',
  'Name',
  'familyname',
  'Ciao',
  'Hola',
  'Bonjour',
  'Pro',
  'Bono',
  'Enterprises',
  'Group',
  'Said',
  'Says',
  'Assistant',
  'Vice',
  'Warden',
  'Contribution',
  'Research',
  'Development',
  'Product',
  'Sales',
  'Support',
  'Manager',
  'Telephone',
  'Phone',
  'Contact',
  'Information',
  'Electronics',
  'Managed',
  'West',
  'East',
  'North',
  'South',
  'Teaches',
  'Ministry',
  'Church',
  'Association',
  'Laboratories',
  'Living',
  'Community',
  'Visiting',
  'Officer',
  'After',
  'Pls',
  'FYI',
  'Only',
  'Additionally',
  'Adding',
  'Acquire',
  'Addition',
  'America',
  'Another',
  'Anyway',
  'Associate',
  'At',
  'Athletes',
  'It',
  'Enron',
  'EnronXGate',
  'Have',
  'However',
  'Company',
  'Companies'
);


create dictionary "GreetingsDict"
with case insensitive
as (
  'Hey',
  'Hi',
  'Hello',
  'Dear',
  'Liebe',
  'Lieber',
  'Herr',
  'Frau',
  'Hallo',
  'Ciao',
  'Hola',
  'Bonjour'
);


create dictionary "InitialDict"
with case insensitive
as (
  'rev.',
  'col.',
  'reverend',
  'prof.',
  'professor.',
  'lady',
  'miss.',
  'mrs.',
  'mrs',
  'mr.',
  'pt.',
  'ms.',
  'messrs.',
  'dr.',
  'master.',
  'marquis',
  'monsieur',
  'ds',
  'di',
  'herr',
  'Fraeulein',
  'Doktor',
  'Herr Doktor',
  'Frau Doktor',
  'Herr Professor',
  'Frau professor',
  'Baron',
  'graf'
);


create view Initial as
  select  D.match as initial,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__256__Temp_____sep_____D____id
  from  __Subquery__256__Temp D;

output view Initial;

create dictionary "PersonSuffixDict"
with case insensitive
as (
  ',jr.',
  ',jr',
  'III',
  'IV',
  'V',
  'VI'
);


create view PersonSuffix as
  select  D.match as suffix,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__257__Temp_____sep_____D____id
  from  __Subquery__257__Temp D;

output view PersonSuffix;

create view CapsPerson as
  select  R.match as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__258__Temp_____sep_____R____id
  from  __Subquery__258__Temp R
  where Not(ContainsDicts('FilterPersonDict', 'dictionaries/filterPerson_german.dict', 'InitialDict', 'StrongPhoneVariantDictionary', 'dictionaries/stateList.dict', 'dictionaries/organization_suffix.dict', 'dictionaries/industryType_suffix.dict', 'dictionaries/streetSuffix_forPerson.dict', R.match))
     and Not(MatchesRegex(/(\p{Lu}\p{M}*)+-.*([\p{Ll}\p{Lo}]\p{M}*).*/, R.match))
     and Not(MatchesRegex(/.*([\p{Ll}\p{Lo}]\p{M}*).*-(\p{Lu}\p{M}*)+/, R.match));

output view CapsPerson;

create view CapsPersonNoP as
  select  CP.name as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          CP.__auto__id as CapsPerson_____sep_____CP____id
  from  CapsPerson CP
  where Not(ContainsRegex(/'/, CP.name));

output view CapsPersonNoP;

create view StrictCapsPersonR as
  select  R.match as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__259__Temp_____sep_____R____id
  from  __Subquery__259__Temp R;

output view StrictCapsPersonR;

create view StrictCapsPerson as
  select  R.name as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as StrictCapsPersonR_____sep_____R____id
  from  StrictCapsPersonR R
  where MatchesRegex(/\b\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){1,20}\b/, R.name);

output view StrictCapsPerson;

create view StrictLastName1 as
  select  D.match as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__260__Temp_____sep_____D____id
  from  __Subquery__260__Temp D
  where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictLastName1;

create view StrictLastName2 as
  select  D.match as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__261__Temp_____sep_____D____id
  from  __Subquery__261__Temp D
  where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictLastName2;

create view StrictLastName3 as
  select  D.match as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__262__Temp_____sep_____D____id
  from  __Subquery__262__Temp D
  where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictLastName3;

create view StrictLastName4 as
  select  D.match as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__263__Temp_____sep_____D____id
  from  __Subquery__263__Temp D
  where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictLastName4;

create view StrictLastName5 as
  select  D.match as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__264__Temp_____sep_____D____id
  from  __Subquery__264__Temp D
  where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictLastName5;

create view StrictLastName6 as
  select  D.match as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__265__Temp_____sep_____D____id
  from  __Subquery__265__Temp D
  where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictLastName6;

create view StrictLastName7 as
  select  D.match as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__266__Temp_____sep_____D____id
  from  __Subquery__266__Temp D
  where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictLastName7;

create view StrictLastName8 as
  select  D.match as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__267__Temp_____sep_____D____id
  from  __Subquery__267__Temp D
  where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictLastName8;

create view StrictLastName9 as
  select  D.match as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__268__Temp_____sep_____D____id
  from  __Subquery__268__Temp D
  where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictLastName9;

create view StrictLastName as
  (select  Op.lastname as lastname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__269__TempOp__0 Op)
  union all
  (select  Op.lastname as lastname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__269__TempOp__1 Op)
  union all
  (select  Op.lastname as lastname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__269__TempOp__2 Op)
  union all
  (select  Op.lastname as lastname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__269__TempOp__3 Op)
  union all
  (select  Op.lastname as lastname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__269__TempOp__4 Op)
  union all
  (select  Op.lastname as lastname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__269__TempOp__5 Op)
  union all
  (select  Op.lastname as lastname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__269__TempOp__6 Op)
  union all
  (select  Op.lastname as lastname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__269__TempOp__7 Op)
  union all
  (select  Op.lastname as lastname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__269__TempOp__8 Op);

output view StrictLastName;

create view RelaxedLastName1 as
  select  CombineSpans(SL.lastname, CP.name) as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          SL.__auto__id as StrictLastName_____sep_____SL____id,
          CP.__auto__id as StrictCapsPerson_____sep_____CP____id
  from  StrictLastName SL,
        StrictCapsPerson CP
  where FollowsTok(SL.lastname, CP.name, 1, 1)
     and MatchesRegex(/\-/, SpanBetween(SL.lastname, CP.name));

output view RelaxedLastName1;

create view RelaxedLastName2 as
  select  CombineSpans(CP.name, SL.lastname) as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          SL.__auto__id as StrictLastName_____sep_____SL____id,
          CP.__auto__id as StrictCapsPerson_____sep_____CP____id
  from  StrictLastName SL,
        StrictCapsPerson CP
  where FollowsTok(CP.name, SL.lastname, 1, 1)
     and MatchesRegex(/\-/, SpanBetween(CP.name, SL.lastname));

output view RelaxedLastName2;

create view LastNameAll as
  (select  Op.lastname as lastname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__270__TempOp__0 Op)
  union all
  (select  Op.lastname as lastname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__270__TempOp__1 Op)
  union all
  (select  Op.lastname as lastname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__270__TempOp__2 Op);

output view LastNameAll;

create view ValidLastNameAll as
  select  N.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          N.__auto__id as LastNameAll_____sep_____N____id
  from  LastNameAll N
  where Not(MatchesRegex(/(\p{Lu}\p{M}*)+-.*([\p{Ll}\p{Lo}]\p{M}*).*/, N.lastname))
     and Not(MatchesRegex(/.*([\p{Ll}\p{Lo}]\p{M}*).*-(\p{Lu}\p{M}*)+/, N.lastname));

output view ValidLastNameAll;

create view LastName as
  select  __t2.lastname as lastname,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__271__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__271__Temp__1 __t1,
        __Consolidate__271__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.lastname;

output view LastName;

create view StrictFirstName1 as
  select  D.match as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__272__Temp_____sep_____D____id
  from  __Subquery__272__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictFirstName1;

create view StrictFirstName2 as
  select  D.match as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__273__Temp_____sep_____D____id
  from  __Subquery__273__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictFirstName2;

create view StrictFirstName3 as
  select  D.match as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__274__Temp_____sep_____D____id
  from  __Subquery__274__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictFirstName3;

create view StrictFirstName4 as
  select  D.match as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__275__Temp_____sep_____D____id
  from  __Subquery__275__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictFirstName4;

create view StrictFirstName5 as
  select  D.match as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__276__Temp_____sep_____D____id
  from  __Subquery__276__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictFirstName5;

create view StrictFirstName6 as
  select  D.match as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__277__Temp_____sep_____D____id
  from  __Subquery__277__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictFirstName6;

create view StrictFirstName7 as
  select  D.match as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__278__Temp_____sep_____D____id
  from  __Subquery__278__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictFirstName7;

create view StrictFirstName8 as
  select  D.match as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__279__Temp_____sep_____D____id
  from  __Subquery__279__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictFirstName8;

create view StrictFirstName9 as
  select  D.match as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__280__Temp_____sep_____D____id
  from  __Subquery__280__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view StrictFirstName9;

create view StrictFirstName as
  (select  Op.firstname as firstname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__281__TempOp__0 Op)
  union all
  (select  Op.firstname as firstname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__281__TempOp__1 Op)
  union all
  (select  Op.firstname as firstname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__281__TempOp__2 Op)
  union all
  (select  Op.firstname as firstname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__281__TempOp__3 Op)
  union all
  (select  Op.firstname as firstname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__281__TempOp__4 Op)
  union all
  (select  Op.firstname as firstname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__281__TempOp__5 Op)
  union all
  (select  Op.firstname as firstname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__281__TempOp__6 Op)
  union all
  (select  Op.firstname as firstname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__281__TempOp__7 Op)
  union all
  (select  Op.firstname as firstname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__281__TempOp__8 Op);

output view StrictFirstName;

create view RelaxedFirstName1 as
  select  CombineSpans(S.firstname, CP.name) as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictFirstName_____sep_____S____id,
          CP.__auto__id as StrictCapsPerson_____sep_____CP____id
  from  StrictFirstName S,
        StrictCapsPerson CP
  where FollowsTok(S.firstname, CP.name, 1, 1)
     and MatchesRegex(/\-/, SpanBetween(S.firstname, CP.name));

output view RelaxedFirstName1;

create view RelaxedFirstName2 as
  select  CombineSpans(CP.name, S.firstname) as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictFirstName_____sep_____S____id,
          CP.__auto__id as StrictCapsPerson_____sep_____CP____id
  from  StrictFirstName S,
        StrictCapsPerson CP
  where FollowsTok(CP.name, S.firstname, 1, 1)
     and MatchesRegex(/\-/, SpanBetween(CP.name, S.firstname));

output view RelaxedFirstName2;

create view FirstNameAll as
  (select  Op.firstname as firstname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__282__TempOp__0 Op)
  union all
  (select  Op.firstname as firstname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__282__TempOp__1 Op)
  union all
  (select  Op.firstname as firstname,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__282__TempOp__2 Op);

output view FirstNameAll;

create view ValidFirstNameAll as
  select  N.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          N.__auto__id as FirstNameAll_____sep_____N____id
  from  FirstNameAll N
  where Not(MatchesRegex(/(\p{Lu}\p{M}*)+-.*([\p{Ll}\p{Lo}]\p{M}*).*/, N.firstname))
     and Not(MatchesRegex(/.*([\p{Ll}\p{Lo}]\p{M}*).*-(\p{Lu}\p{M}*)+/, N.firstname));

output view ValidFirstNameAll;

create view FirstName as
  select  __t2.firstname as firstname,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__283__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__283__Temp__1 __t1,
        __Consolidate__283__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.firstname;

output view FirstName;

create view NameDict as
  select  D.match as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__284__Temp_____sep_____D____id
  from  __Subquery__284__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view NameDict;

create view NameDict1 as
  select  D.match as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__285__Temp_____sep_____D____id
  from  __Subquery__285__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view NameDict1;

create view NameDict2 as
  select  D.match as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__286__Temp_____sep_____D____id
  from  __Subquery__286__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view NameDict2;

create view NameDict3 as
  select  D.match as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__287__Temp_____sep_____D____id
  from  __Subquery__287__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view NameDict3;

create view NameDict4 as
  select  D.match as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__288__Temp_____sep_____D____id
  from  __Subquery__288__Temp D
  where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);

output view NameDict4;

create view NamesAll as
  (select  Op.name as name,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__289__TempOp__0 Op)
  union all
  (select  Op.name as name,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__289__TempOp__1 Op)
  union all
  (select  Op.name as name,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__289__TempOp__2 Op)
  union all
  (select  Op.name as name,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__289__TempOp__3 Op)
  union all
  (select  Op.name as name,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__289__TempOp__4 Op)
  union all
  (select  Op.name as name,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__289__TempOp__5 Op)
  union all
  (select  Op.name as name,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__289__TempOp__6 Op);

output view NamesAll;

create view PersonDict as
  select  __t2.name as name,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__290__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__290__Temp__1 __t1,
        __Consolidate__290__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.name;

output view PersonDict;

create view Person3P1 as
  select  CombineSpans(F.firstname, L.lastname) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          F.__auto__id as StrictFirstName_____sep_____F____id,
          S.__auto__id as StrictCapsPersonR_____sep_____S____id,
          L.__auto__id as StrictLastName_____sep_____L____id
  from  StrictFirstName F,
        StrictCapsPersonR S,
        StrictLastName L
  where FollowsTok(F.firstname, S.name, 0, 0)
     and FollowsTok(S.name, L.lastname, 0, 0)
     and Not(Equals(GetText(F.firstname), GetText(L.lastname)))
     and Not(Equals(GetText(F.firstname), GetText(S.name)))
     and Not(Equals(GetText(S.name), GetText(L.lastname)))
     and Not(ContainsRegex(/[\n\r\t]/, SpanBetween(F.firstname, L.lastname)));

output view Person3P1;

create view Person3P2 as
  select  CombineSpans(P.name, L.lastname) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonDict_____sep_____P____id,
          S.__auto__id as StrictCapsPersonR_____sep_____S____id,
          L.__auto__id as StrictLastName_____sep_____L____id
  from  PersonDict P,
        StrictCapsPersonR S,
        StrictLastName L
  where FollowsTok(P.name, S.name, 0, 0)
     and FollowsTok(S.name, L.lastname, 0, 0)
     and Not(Equals(GetText(P.name), GetText(L.lastname)))
     and Not(Equals(GetText(P.name), GetText(S.name)))
     and Not(Equals(GetText(S.name), GetText(L.lastname)))
     and Not(ContainsRegex(/[\n\r\t]/, SpanBetween(P.name, L.lastname)));

output view Person3P2;

create view Person3P3 as
  select  CombineSpans(F.firstname, P.name) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonDict_____sep_____P____id,
          S.__auto__id as StrictCapsPersonR_____sep_____S____id,
          F.__auto__id as StrictFirstName_____sep_____F____id
  from  PersonDict P,
        StrictCapsPersonR S,
        StrictFirstName F
  where FollowsTok(S.name, P.name, 0, 0)
     and FollowsTok(F.firstname, S.name, 0, 0)
     and Not(Equals(GetText(P.name), GetText(F.firstname)))
     and Not(Equals(GetText(P.name), GetText(S.name)))
     and Not(Equals(GetText(S.name), GetText(F.firstname)))
     and Not(ContainsRegex(/[\n\r\t]/, SpanBetween(F.firstname, P.name)));

output view Person3P3;

create view Person1 as
  select  CombineSpans(CP1.name, CP2.name) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          I.__auto__id as Initial_____sep_____I____id,
          CP1.__auto__id as CapsPerson_____sep_____CP1____id,
          IW.__auto__id as InitialWord_____sep_____IW____id,
          CP2.__auto__id as CapsPerson_____sep_____CP2____id
  from  Initial I,
        CapsPerson CP1,
        InitialWord IW,
        CapsPerson CP2
  where FollowsTok(I.initial, CP1.name, 0, 0)
     and FollowsTok(CP1.name, IW.word, 0, 0)
     and FollowsTok(IW.word, CP2.name, 0, 0);

output view Person1;

create view Person1a1 as
  select  CP1.name as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          I.__auto__id as Initial_____sep_____I____id,
          CP1.__auto__id as CapsPerson_____sep_____CP1____id
  from  Initial I,
        CapsPerson CP1
  where FollowsTok(I.initial, CP1.name, 0, 0)
     and Not(ContainsRegex(/[\n\t]/, SpanBetween(I.initial, CP1.name)));

output view Person1a1;

create view Person1a2 as
  select  CombineSpans(name.block, CP1.name) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          I.__auto__id as Initial_____sep_____I____id,
          name.__auto__id as __Subquery__292__Temp_____sep_____name____id,
          CP1.__auto__id as CapsPerson_____sep_____CP1____id
  from  Initial I,
        __Subquery__292__Temp name,
        CapsPerson CP1
  where FollowsTok(I.initial, name.block, 0, 0)
     and FollowsTok(name.block, CP1.name, 0, 0)
     and Not(ContainsRegex(/[\n\t]/, CombineSpans(I.initial, CP1.name)));

output view Person1a2;

create view Person1a as
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__293__TempOp__0 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__293__TempOp__1 Op);

output view Person1a;

create view Person1a_more as
  select  name.block as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          I.__auto__id as Initial_____sep_____I____id,
          name.__auto__id as __Subquery__295__Temp_____sep_____name____id
  from  Initial I,
        __Subquery__295__Temp name
  where FollowsTok(I.initial, name.block, 0, 0)
     and Not(ContainsRegex(/[\n\t]/, name.block))
     and Not(ContainsRegex(/[\n\t]/, SpanBetween(I.initial, name.block)));

output view Person1a_more;

create view Person3 as
  select  CombineSpans(P1.name, P2.name) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P1.__auto__id as PersonDict_____sep_____P1____id,
          IW.__auto__id as WeakInitialWord_____sep_____IW____id,
          P2.__auto__id as PersonDict_____sep_____P2____id
  from  PersonDict P1,
        WeakInitialWord IW,
        PersonDict P2
  where FollowsTok(P1.name, IW.word, 0, 0)
     and FollowsTok(IW.word, P2.name, 0, 0)
     and Not(Equals(GetText(P1.name), GetText(P2.name)));

output view Person3;

create view Person3r1 as
  select  CombineSpans(FN.firstname, CP.name) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          FN.__auto__id as FirstName_____sep_____FN____id,
          IW.__auto__id as InitialWord_____sep_____IW____id,
          CP.__auto__id as CapsPerson_____sep_____CP____id
  from  FirstName FN,
        InitialWord IW,
        CapsPerson CP
  where FollowsTok(FN.firstname, IW.word, 0, 0)
     and FollowsTok(IW.word, CP.name, 0, 0);

output view Person3r1;

create view Person3r2 as
  select  CombineSpans(CP.name, LN.lastname) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          LN.__auto__id as LastName_____sep_____LN____id,
          IW.__auto__id as InitialWord_____sep_____IW____id,
          CP.__auto__id as CapsPerson_____sep_____CP____id
  from  LastName LN,
        InitialWord IW,
        CapsPerson CP
  where FollowsTok(CP.name, IW.word, 0, 0)
     and FollowsTok(IW.word, LN.lastname, 0, 0);

output view Person3r2;

create view Person4WithNewLine as
  select  CombineSpans(FN.firstname, LN.lastname) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          FN.__auto__id as FirstName_____sep_____FN____id,
          LN.__auto__id as LastName_____sep_____LN____id
  from  FirstName FN,
        LastName LN
  where FollowsTok(FN.firstname, LN.lastname, 0, 0);

output view Person4WithNewLine;

create view Person4WrongCandidates as
  select  FN.firstname as firstname,
          LN.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          FN.__auto__id as FirstName_____sep_____FN____id,
          LN.__auto__id as LastName_____sep_____LN____id
  from  FirstName FN,
        LastName LN
  where FollowsTok(FN.firstname, LN.lastname, 0, 0)
     and ContainsRegex(/[\n\r]/, SpanBetween(FN.firstname, LN.lastname));

output view Person4WrongCandidates;

create view Person4 as
  select  Op.person as person,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__296__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__296__TempOp__1 Op,
        __Minus__296__Temp __t
  where Equals(Op.person, __t.person);

output view Person4;

create view Person4a as
  select  CombineSpans(LN.lastname, FN.firstname) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          FN.__auto__id as FirstName_____sep_____FN____id,
          LN.__auto__id as LastName_____sep_____LN____id
  from  FirstName FN,
        LastName LN
  where FollowsTok(LN.lastname, FN.firstname, 0, 1)
     and ContainsRegex(/,/, SpanBetween(LN.lastname, FN.firstname));

output view Person4a;

create view Person4ar1 as
  select  CombineSpans(CP.name, FN.firstname) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          FN.__auto__id as FirstName_____sep_____FN____id,
          CP.__auto__id as CapsPerson_____sep_____CP____id
  from  FirstName FN,
        CapsPerson CP
  where FollowsTok(CP.name, FN.firstname, 1, 1)
     and ContainsRegex(/,/, SpanBetween(CP.name, FN.firstname))
     and Not(MatchesRegex(/(.|\n|\r)*(\.|\?|!|'|\sat|\sin)( )*/, LeftContext(CP.name, 10)))
     and Not(MatchesRegex(/(?i)(.+fully)/, CP.name))
     and GreaterThan(GetBegin(CP.name), 10);

output view Person4ar1;

create view Person4ar2 as
  select  CombineSpans(LN.lastname, CP.name) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          CP.__auto__id as CapsPerson_____sep_____CP____id,
          LN.__auto__id as LastName_____sep_____LN____id
  from  CapsPerson CP,
        LastName LN
  where FollowsTok(LN.lastname, CP.name, 0, 1)
     and ContainsRegex(/,/, SpanBetween(LN.lastname, CP.name));

output view Person4ar2;

create view Person2 as
  select  CombineSpans(IW.word, CP.name) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          IW.__auto__id as InitialWord_____sep_____IW____id,
          P.__auto__id as PersonDict_____sep_____P____id,
          CP.__auto__id as CapsPerson_____sep_____CP____id
  from  InitialWord IW,
        PersonDict P,
        CapsPerson CP
  where FollowsTok(IW.word, P.name, 0, 0)
     and FollowsTok(P.name, CP.name, 0, 0);

output view Person2;

create view Person2a as
  select  CombineSpans(IW.word, P.name) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          IW.__auto__id as InitialWord_____sep_____IW____id,
          CP.__auto__id as CapsPerson_____sep_____CP____id,
          P.__auto__id as PersonDict_____sep_____P____id
  from  InitialWord IW,
        CapsPerson CP,
        PersonDict P
  where FollowsTok(IW.word, CP.name, 0, 0)
     and FollowsTok(CP.name, P.name, 0, 0);

output view Person2a;

create view Person4r1 as
  select  CombineSpans(FN.firstname, CP.name) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          FN.__auto__id as FirstName_____sep_____FN____id,
          CP.__auto__id as CapsPerson_____sep_____CP____id
  from  FirstName FN,
        CapsPerson CP
  where FollowsTok(FN.firstname, CP.name, 0, 0);

output view Person4r1;

create view Person4r2 as
  select  CombineSpans(CP.name, LN.lastname) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          CP.__auto__id as CapsPerson_____sep_____CP____id,
          LN.__auto__id as LastName_____sep_____LN____id
  from  CapsPerson CP,
        LastName LN
  where FollowsTok(CP.name, LN.lastname, 0, 0);

output view Person4r2;

create view Person5 as
  select  CombineSpans(IW.word, FN.firstname) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          IW.__auto__id as InitialWord_____sep_____IW____id,
          FN.__auto__id as FirstName_____sep_____FN____id
  from  InitialWord IW,
        FirstName FN
  where FollowsTok(IW.word, FN.firstname, 0, 0);

output view Person5;

create view Person6 as
  select  CombineSpans(IW.word, LN.lastname) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          IW.__auto__id as InitialWord_____sep_____IW____id,
          LN.__auto__id as LastName_____sep_____LN____id
  from  InitialWord IW,
        LastName LN
  where FollowsTok(IW.word, LN.lastname, 0, 0);

output view Person6;

create view PersonStrongWithNewLine as
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__297__TempOp__0 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__297__TempOp__1 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__297__TempOp__2 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__297__TempOp__3 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__297__TempOp__4 Op);

output view PersonStrongWithNewLine;

create view PersonStrong as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonStrongWithNewLine_____sep_____P____id
  from  PersonStrongWithNewLine P
  where Not(ContainsRegex(/[\n\r]/, P.person));

output view PersonStrong;

create view PersonStrongSingleTokenOnly as
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__298__TempOp__0 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__298__TempOp__1 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__298__TempOp__2 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__298__TempOp__3 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__298__TempOp__4 Op);

output view PersonStrongSingleTokenOnly;

create view PersonStrongSingleTokenOnlyExpanded as
  select  CombineSpans(P.person, S.suffix) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonStrongSingleTokenOnly_____sep_____P____id,
          S.__auto__id as PersonSuffix_____sep_____S____id
  from  PersonStrongSingleTokenOnly P,
        PersonSuffix S
  where FollowsTok(P.person, S.suffix, 0, 0);

output view PersonStrongSingleTokenOnlyExpanded;

create view PersonStrongSingleToken as
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__299__TempOp__0 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__299__TempOp__1 Op);

output view PersonStrongSingleToken;

create view PersonWeak1WithNewLine as
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__300__TempOp__0 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__300__TempOp__1 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__300__TempOp__2 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__300__TempOp__3 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__300__TempOp__4 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__300__TempOp__5 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__300__TempOp__6 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__300__TempOp__7 Op);

output view PersonWeak1WithNewLine;

create view PersonWeak1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonWeak1WithNewLine_____sep_____P____id
  from  PersonWeak1WithNewLine P
  where Not(ContainsRegex(/[\n\r]/, P.person));

output view PersonWeak1;

create view PersonWeak2WithNewLine as
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__301__TempOp__0 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__301__TempOp__1 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__301__TempOp__2 Op);

output view PersonWeak2WithNewLine;

create view PersonWeak2 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonWeak2WithNewLine_____sep_____P____id
  from  PersonWeak2WithNewLine P
  where Not(ContainsRegex(/[\n\r]/, P.person))
     and Not(MatchesRegex(/(.|\n|\r)*,[ \t]*(\p{Lu}\p{M}*(\p{L}\p{M}*|[-'.])*[ \t]*){0,2}/, LeftContext(P.person, 50)))
     and Not(MatchesRegex(/[ \t]*(\p{Lu}\p{M}*(\p{L}\p{M}*|[-'.])*[ \t]*){0,2}([,&]|(\b(and)[ \t]+))(.|\s)*/, RightContext(P.person, 50)))
     and Not(ContainsDict('GreetingsDict', LeftContext(P.person, 15)));

output view PersonWeak2;

create view PersonFirstNameLastName as
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__302__TempOp__0 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__302__TempOp__1 Op);

output view PersonFirstNameLastName;

create view InvalidPersonWeak2 as
  select  P2.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P2.__auto__id as PersonWeak2_____sep_____P2____id,
          P1.__auto__id as PersonFirstNameLastName_____sep_____P1____id
  from  PersonWeak2 P2,
        PersonFirstNameLastName P1
  where Overlaps(P1.person, P2.person);

output view InvalidPersonWeak2;

create view ValidPersonWeak2 as
  select  Op.person as person,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__303__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__303__TempOp__1 Op,
        __Minus__303__Temp __t
  where Equals(Op.person, __t.person);

output view ValidPersonWeak2;

create view PersonWeakWithoutNewLine as
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__304__TempOp__0 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__304__TempOp__1 Op);

output view PersonWeakWithoutNewLine;

create view PersonWeakOverlap as
  select  P1.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P1.__auto__id as PersonWeakWithoutNewLine_____sep_____P1____id,
          P2.__auto__id as PersonStrong_____sep_____P2____id
  from  PersonWeakWithoutNewLine P1,
        PersonStrong P2
  where Overlaps(P1.person, P2.person);

output view PersonWeakOverlap;

create view PersonWeakOnly as
  select  Op.person as person,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__305__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__305__TempOp__1 Op,
        __Minus__305__Temp __t
  where Equals(Op.person, __t.person);

output view PersonWeakOnly;

create view PersonAll as
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__306__TempOp__0 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__306__TempOp__1 Op);

output view PersonAll;

create view PersonCorrect as
  select  PA.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          PA.__auto__id as PersonAll_____sep_____PA____id
  from  PersonAll PA
  where Not(MatchesRegex(/((\p{Lu}\p{M}*)|-)+[,\s]+\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*.*/, PA.person))
     and Not(MatchesRegex(/\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*.*[,\s]+((\p{Lu}\p{M}*)|-)+/, PA.person))
     and Not(MatchesRegex(/U\.\s*S\.\s*.+/, PA.person));

output view PersonCorrect;

create view PersonCorrectExpanded as
  select  CombineSpans(P.person, S.suffix) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonCorrect_____sep_____P____id,
          S.__auto__id as PersonSuffix_____sep_____S____id
  from  PersonCorrect P,
        PersonSuffix S
  where FollowsTok(P.person, S.suffix, 0, 0);

output view PersonCorrectExpanded;

create view PersonCorrectAll as
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__307__TempOp__0 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__307__TempOp__1 Op);

output view PersonCorrectAll;

create view PersonSentence as
  select  Op.person as person,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__308__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__308__TempOp__1 Op,
        __Minus__308__Temp __t
  where Equals(Op.person, __t.person);

output view PersonSentence;

create view PlaceConsolidated as
  select  __t2.loc as loc,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__309__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__309__Temp__1 __t1,
        __Consolidate__309__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.loc;

output view PlaceConsolidated;

create view WrongPlaceConsolidated as
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__310__TempOp__0 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__310__TempOp__1 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__310__TempOp__2 Op)
  union all
  (select  Op.loc as loc,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__310__TempOp__3 Op);

output view WrongPlaceConsolidated;

create view FinalPlaceConsolidated as
  select  Op.loc as loc,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__311__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__311__TempOp__1 Op,
        __Minus__311__Temp __t
  where Equals(Op.loc, __t.loc);

output view FinalPlaceConsolidated;

create view UrlEmailPlace as
  select  R.loc as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as FinalPlaceConsolidated_____sep_____R____id
  from  FinalPlaceConsolidated R;

output view UrlEmailPlace;

create view OrgWithinUrlEmailPlace as
  select  O.org as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as OrgSentence_____sep_____O____id,
          UEP.__auto__id as UrlEmailPlace_____sep_____UEP____id
  from  OrgSentence O,
        UrlEmailPlace UEP
  where Contains(UEP.match, O.org);

output view OrgWithinUrlEmailPlace;

create view OrgOverlapTime as
  select  O.org as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as OrgSentence_____sep_____O____id,
          t.__auto__id as Times_____sep_____t____id
  from  OrgSentence O,
        Times t
  where Overlaps(t.match, O.org);

output view OrgOverlapTime;

create view InvalidOrg as
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__312__TempOp__0 Op)
  union all
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__312__TempOp__1 Op);

output view InvalidOrg;

create view ValidOrg as
  select  Op.org as org,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__313__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__313__TempOp__1 Op,
        __Minus__313__Temp __t
  where Equals(Op.org, __t.org);

output view ValidOrg;

create view ValidOrgConsolidated as
  select  __t2.org as org,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__314__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__314__Temp__1 __t1,
        __Consolidate__314__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.org;

output view ValidOrgConsolidated;

create view FinalOrgExpanded as
  select  CombineSpans(CO.match, C.org) as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as ValidOrgConsolidated_____sep_____C____id,
          CO.__auto__id as CapsOrg_____sep_____CO____id
  from  ValidOrgConsolidated C,
        CapsOrg CO
  where ContainsDict('OrgPartnershipDict', C.org)
     and FollowsTok(CO.match, C.org, 0, 2)
     and MatchesRegex(/\s*,?\s*&\s*/, SpanBetween(CO.match, C.org));

output view FinalOrgExpanded;

create view FinalOrgAll as
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__315__TempOp__0 Op)
  union all
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__315__TempOp__1 Op)
  union all
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__315__TempOp__2 Op)
  union all
  (select  Op.org as org,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__315__TempOp__3 Op);

output view FinalOrgAll;

create view FinalOrgConsolidated as
  select  __t2.org as org,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__316__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__316__Temp__1 __t1,
        __Consolidate__316__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.org;

output view FinalOrgConsolidated;

create view FinalOrgConsolidatedWithoutDots as
  select  O.org as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as FinalOrgConsolidated_____sep_____O____id
  from  FinalOrgConsolidated O;

output view FinalOrgConsolidatedWithoutDots;

create view CitiesAll as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__317__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__317__TempOp__1 Op);

output view CitiesAll;

create view UrlEmailPlaceOrg as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__318__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__318__TempOp__1 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__318__TempOp__2 Op);

output view UrlEmailPlaceOrg;

create view PersonWithinUrlEmailPlaceOrg as
  select  PS.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          PS.__auto__id as PersonSentence_____sep_____PS____id,
          R.__auto__id as UrlEmailPlaceOrg_____sep_____R____id
  from  PersonSentence PS,
        UrlEmailPlaceOrg R
  where Contains(R.match, PS.person);

output view PersonWithinUrlEmailPlaceOrg;

create view PersonOverlapsWithCities as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonSentence_____sep_____P____id,
          C.__auto__id as CitiesAll_____sep_____C____id
  from  PersonSentence P,
        CitiesAll C
  where Overlaps(C.match, P.person)
     and Not(Contains(P.person, C.match))
     and Not(Contains(C.match, P.person));

output view PersonOverlapsWithCities;

create view InvalidPerson as
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__319__TempOp__0 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__319__TempOp__1 Op);

output view InvalidPerson;

create view ValidPerson as
  select  Op.person as person,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__320__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__320__TempOp__1 Op,
        __Minus__320__Temp __t
  where Equals(Op.person, __t.person);

output view ValidPerson;

create view FinalPersonConsolidated as
  select  __t2.person as person,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__321__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__321__Temp__1 __t1,
        __Consolidate__321__Temp__2 __t2
  where Or(GreaterThan(GetBegin(__t1.__consolidate__target), GetBegin(__t2.__consolidate__target)), Equals(GetBegin(__t1.__consolidate__target), GetBegin(__t2.__consolidate__target)))
     and Overlaps(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.person;

output view FinalPersonConsolidated;

create view UrlEmailPlaceOrgPerson as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__322__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__322__TempOp__1 Op);

output view UrlEmailPlaceOrgPerson;

create view PersonStrongSingleTokenWithinUrlEmailPlaceOrg as
  select  PS.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          PS.__auto__id as PersonStrongSingleToken_____sep_____PS____id,
          R.__auto__id as UrlEmailPlaceOrgPerson_____sep_____R____id
  from  PersonStrongSingleToken PS,
        UrlEmailPlaceOrgPerson R
  where Contains(R.match, PS.person);

output view PersonStrongSingleTokenWithinUrlEmailPlaceOrg;

create view FinalPersonStrongSingleToken as
  select  Op.person as person,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__323__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__323__TempOp__1 Op,
        __Minus__323__Temp __t
  where Equals(Op.person, __t.person);

output view FinalPersonStrongSingleToken;

create view FinalPersonStrongSingleTokenConsolidated as
  select  __t2.person as person,
          AutoID() as __auto__id,
          List(__t1.__auto__id) as __Consolidate__324__Temp__1_____sep_______t1____id,
          'STMT_TYPE_CONSOLIDATE' as __stmt__type
  from  __Consolidate__324__Temp__1 __t1,
        __Consolidate__324__Temp__2 __t2
  where ContainedWithin(__t1.__consolidate__target, __t2.__consolidate__target)
  group by __t2.person;

output view FinalPersonStrongSingleTokenConsolidated;

create view PersonStrongSingleTokenOverlaps as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as FinalPersonStrongSingleTokenConsolidated_____sep_____P____id,
          P1.__auto__id as FinalPersonConsolidated_____sep_____P1____id
  from  FinalPersonStrongSingleTokenConsolidated P,
        FinalPersonConsolidated P1
  where Overlaps(P.person, P1.person);

output view PersonStrongSingleTokenOverlaps;

create view PersonStrongSingleTokenNonOverlaps as
  select  Op.person as person,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__325__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__325__TempOp__1 Op,
        __Minus__325__Temp __t
  where Equals(Op.person, __t.person);

output view PersonStrongSingleTokenNonOverlaps;

create view PersonFinalAllMatches as
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__326__TempOp__0 Op)
  union all
  (select  Op.person as person,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__326__TempOp__1 Op);

output view PersonFinalAllMatches;

create view InvalidPersonFragments as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__327__Temp_____sep_____D____id
  from  __Subquery__327__Temp D;

output view InvalidPersonFragments;

create view InvalidPersonFinalAllMatches as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAllMatches_____sep_____P____id,
          F.__auto__id as InvalidPersonFragments_____sep_____F____id
  from  PersonFinalAllMatches P,
        InvalidPersonFragments F
  where Overlaps(F.match, P.person);

output view InvalidPersonFinalAllMatches;

create view PersonFinalAllCandidate as
  select  Op.person as person,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__328__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__328__TempOp__1 Op,
        __Minus__328__Temp __t
  where Equals(Op.person, __t.person);

output view PersonFinalAllCandidate;

create view PersonContext as
  select  LeftContext(R.person, 20) as lc,
          R.person as person,
          RightContext(R.person, 20) as rc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as PersonFinalAllCandidate_____sep_____R____id
  from  PersonFinalAllCandidate R;

output view PersonContext;

create view PersonLeftContext as
  select  R.match as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__329__Temp_____sep_____R____id
  from  __Subquery__329__Temp R
  where ContainsDict('dictionaries/filterPerson_LCDict.dict', R.match);

output view PersonLeftContext;

create view PersonRightContext as
  select  R.match as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as __Subquery__330__Temp_____sep_____R____id
  from  __Subquery__330__Temp R
  where ContainsDict('dictionaries/filterPerson_RCDict.dict', R.match);

output view PersonRightContext;

create view PersonFinalAllCandidateToDeleteLC as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAllCandidate_____sep_____P____id,
          PLC.__auto__id as PersonLeftContext_____sep_____PLC____id
  from  PersonFinalAllCandidate P,
        PersonLeftContext PLC
  where FollowsTok(PLC.name, P.person, 0, 1)
     and MatchesRegex(/\W+/, SpanBetween(PLC.name, P.person));

output view PersonFinalAllCandidateToDeleteLC;

create view PersonFinalAllCandidateToDeleteLC1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAllCandidate_____sep_____P____id,
          PLC.__auto__id as PersonLeftContext_____sep_____PLC____id
  from  PersonFinalAllCandidate P,
        PersonLeftContext PLC
  where FollowsTok(PLC.name, P.person, 0, 1)
     and MatchesRegex(/\W+/, SpanBetween(PLC.name, P.person))
     and MatchesRegex(/.+(ing)/, PLC.name)
     and MatchesRegex(/.+,.+/, P.person);

output view PersonFinalAllCandidateToDeleteLC1;

create view PersonFinalAllCandidateToDeleteRC as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAllCandidate_____sep_____P____id,
          PRC.__auto__id as PersonRightContext_____sep_____PRC____id
  from  PersonFinalAllCandidate P,
        PersonRightContext PRC
  where FollowsTok(P.person, PRC.name, 0, 1)
     and MatchesRegex(/\W+/, SpanBetween(P.person, PRC.name));

output view PersonFinalAllCandidateToDeleteRC;

create view PersonFinalAllNoLC as
  select  Op.person as person,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__331__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__331__TempOp__1 Op,
        __Minus__331__Temp __t
  where Equals(Op.person, __t.person);

output view PersonFinalAllNoLC;

create view PersonFinalAllNoLC1 as
  select  Op.person as person,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__332__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__332__TempOp__1 Op,
        __Minus__332__Temp __t
  where Equals(Op.person, __t.person);

output view PersonFinalAllNoLC1;

create view PersonFinalAll as
  select  Op.person as person,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__333__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__333__TempOp__1 Op,
        __Minus__333__Temp __t
  where Equals(Op.person, __t.person);

output view PersonFinalAll;

create view PersonFinalAllWithDots as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAll_____sep_____P____id
  from  PersonFinalAll P
  where MatchesRegex(/[\.\/]/, LeftContext(P.person, 1))
     and MatchesRegex(/[\.\/]/, RightContext(P.person, 1))
     and MatchesRegex(/[\p{Upper}]+/, P.person);

output view PersonFinalAllWithDots;

create view PersonFinalAllWithoutDots as
  select  Op.person as person,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__334__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__334__TempOp__1 Op,
        __Minus__334__Temp __t
  where Equals(Op.person, __t.person);

output view PersonFinalAllWithoutDots;

create view __Base__228__Temp as
  extract blocks
    with count between 1 and 2
    and separation between 0 and 0 tokens
    on CapsOrg.match as block
  from CapsOrg CapsOrg;

output view __Base__228__Temp;

create view __Base__230__Temp as
  extract blocks
    with count between 1 and 3
    and separation between 0 and 0 tokens
    on CapsOrg.match as block
  from CapsOrg CapsOrg;

output view __Base__230__Temp;

create view __Base__244__Temp as
  extract blocks
    with count between 1 and 3
    and separation between 0 and 0 tokens
    on CapsOrg.match as block
  from CapsOrg CapsOrg;

output view __Base__244__Temp;

create view __Base__246__Temp as
  extract blocks
    with count between 1 and 3
    and separation between 0 and 0 tokens
    on CapsOrg.match as block
  from CapsOrg CapsOrg;

output view __Base__246__Temp;

create view __Base__291__Temp as
  extract blocks
    with count between 1 and 2
    and separation between 0 and 0 tokens
    on InitialWord.word as block
  from InitialWord InitialWord;

output view __Base__291__Temp;

create view __Base__294__Temp as
  extract blocks
    with count between 2 and 3
    and separation between 0 and 0 tokens
    on CapsPerson.name as block
  from CapsPerson CapsPerson;

output view __Base__294__Temp;

create view __Consolidate__146__Temp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as DateIntervalWithOptionalYear_____sep_____R____id,
          R.match as __consolidate__target
  from  DateIntervalWithOptionalYear R;

output view __Consolidate__146__Temp__1;

create view __Consolidate__146__Temp__2 as
  select  __t1.match as match,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__146__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__146__Temp__2;

create view __Consolidate__149__Temp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as DateAll_____sep_____R____id,
          R.match as __consolidate__target
  from  DateAll R;

output view __Consolidate__149__Temp__1;

create view __Consolidate__149__Temp__2 as
  select  __t1.match as match,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__149__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'LeftToRight';

output view __Consolidate__149__Temp__2;

create view __Consolidate__153__Temp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as TimeAll_____sep_____R____id,
          R.match as __consolidate__target
  from  TimeAll R;

output view __Consolidate__153__Temp__1;

create view __Consolidate__153__Temp__2 as
  select  __t1.match as match,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__153__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__153__Temp__2;

create view __Consolidate__170__Temp__1 as
  select  C.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as PhoneNumAll_____sep_____C____id,
          C.num as __consolidate__target
  from  PhoneNumAll C;

output view __Consolidate__170__Temp__1;

create view __Consolidate__170__Temp__2 as
  select  __t1.num as num,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__170__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__170__Temp__2;

create view __Consolidate__202__Temp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as GermanStreetOptionalNameWithSuffix_____sep_____R____id,
          R.match as __consolidate__target
  from  GermanStreetOptionalNameWithSuffix R;

output view __Consolidate__202__Temp__1;

create view __Consolidate__202__Temp__2 as
  select  __t1.match as match,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__202__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__202__Temp__2;

create view __Consolidate__241__Temp__1 as
  select  o.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          o.__auto__id as CoOcscOpCoOcCoAll_____sep_____o____id,
          o.match as __consolidate__target
  from  CoOcscOpCoOcCoAll o;

output view __Consolidate__241__Temp__1;

create view __Consolidate__241__Temp__2 as
  select  __t1.match as match,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__241__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__241__Temp__2;

create view __Consolidate__271__Temp__1 as
  select  C.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as ValidLastNameAll_____sep_____C____id,
          C.lastname as __consolidate__target
  from  ValidLastNameAll C;

output view __Consolidate__271__Temp__1;

create view __Consolidate__271__Temp__2 as
  select  __t1.lastname as lastname,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__271__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__271__Temp__2;

create view __Consolidate__283__Temp__1 as
  select  C.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as ValidFirstNameAll_____sep_____C____id,
          C.firstname as __consolidate__target
  from  ValidFirstNameAll C;

output view __Consolidate__283__Temp__1;

create view __Consolidate__283__Temp__2 as
  select  __t1.firstname as firstname,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__283__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__283__Temp__2;

create view __Consolidate__290__Temp__1 as
  select  C.name as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as NamesAll_____sep_____C____id,
          C.name as __consolidate__target
  from  NamesAll C;

output view __Consolidate__290__Temp__1;

create view __Consolidate__290__Temp__2 as
  select  __t1.name as name,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__290__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__290__Temp__2;

create view __Consolidate__309__Temp__1 as
  select  C.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as PlaceAll_____sep_____C____id,
          C.loc as __consolidate__target
  from  PlaceAll C;

output view __Consolidate__309__Temp__1;

create view __Consolidate__309__Temp__2 as
  select  __t1.loc as loc,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__309__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__309__Temp__2;

create view __Consolidate__314__Temp__1 as
  select  C.org as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as ValidOrg_____sep_____C____id,
          C.org as __consolidate__target
  from  ValidOrg C;

output view __Consolidate__314__Temp__1;

create view __Consolidate__314__Temp__2 as
  select  __t1.org as org,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__314__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__314__Temp__2;

create view __Consolidate__316__Temp__1 as
  select  C.org as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as FinalOrgAll_____sep_____C____id,
          C.org as __consolidate__target
  from  FinalOrgAll C;

output view __Consolidate__316__Temp__1;

create view __Consolidate__316__Temp__2 as
  select  __t1.org as org,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__316__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__316__Temp__2;

create view __Consolidate__321__Temp__1 as
  select  C.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as ValidPerson_____sep_____C____id,
          C.person as __consolidate__target
  from  ValidPerson C;

output view __Consolidate__321__Temp__1;

create view __Consolidate__321__Temp__2 as
  select  __t1.person as person,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__321__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'LeftToRight';

output view __Consolidate__321__Temp__2;

create view __Consolidate__324__Temp__1 as
  select  C.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as FinalPersonStrongSingleToken_____sep_____C____id,
          C.person as __consolidate__target
  from  FinalPersonStrongSingleToken C;

output view __Consolidate__324__Temp__1;

create view __Consolidate__324__Temp__2 as
  select  __t1.person as person,
          __t1.__consolidate__target as __consolidate__target
  from  __Consolidate__324__Temp__1 __t1
  consolidate on __t1.__consolidate__target using 'ContainedWithin';

output view __Consolidate__324__Temp__2;

create view __Minus__237__Temp as
  select  __t.match as match
  from  
    ((select  Op.match as match
      from  __Minus__237__TempOp__1 Op)
    minus
    (select  Op.match as match
      from  __Minus__237__TempOp__2 Op)
    ) __t
  group by __t.match;

output view __Minus__237__Temp;

create view __Minus__237__TempOp__1 as
  select  C.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as CoOcsicAll_____sep_____C____id
  from  CoOcsicAll C;

output view __Minus__237__TempOp__1;

create view __Minus__237__TempOp__2 as
  select  C.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as NonOrgs_____sep_____C____id
  from  NonOrgs C;

output view __Minus__237__TempOp__2;

create view __Minus__238__Temp as
  select  __t.match as match
  from  
    ((select  Op.match as match
      from  __Minus__238__TempOp__1 Op)
    minus
    (select  Op.match as match
      from  __Minus__238__TempOp__2 Op)
    ) __t
  group by __t.match;

output view __Minus__238__Temp;

create view __Minus__238__TempOp__1 as
  select  C.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as CoOcsscAll_____sep_____C____id
  from  CoOcsscAll C;

output view __Minus__238__TempOp__1;

create view __Minus__238__TempOp__2 as
  select  C.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as NonOrgs_____sep_____C____id
  from  NonOrgs C;

output view __Minus__238__TempOp__2;

create view __Minus__239__Temp as
  select  __t.match as match
  from  
    ((select  Op.match as match
      from  __Minus__239__TempOp__1 Op)
    minus
    (select  Op.match as match
      from  __Minus__239__TempOp__2 Op)
    ) __t
  group by __t.match;

output view __Minus__239__Temp;

create view __Minus__239__TempOp__1 as
  select  o.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          o.__auto__id as OcscOpCoOcCoAll_____sep_____o____id
  from  OcscOpCoOcCoAll o;

output view __Minus__239__TempOp__1;

create view __Minus__239__TempOp__2 as
  select  o.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          o.__auto__id as OcscOpCoOcCoInvalid_____sep_____o____id
  from  OcscOpCoOcCoInvalid o;

output view __Minus__239__TempOp__2;

create view __Minus__255__Temp as
  select  __t.org as org
  from  
    ((select  Op.org as org
      from  __Minus__255__TempOp__1 Op)
    minus
    (select  Op.org as org
      from  __Minus__255__TempOp__2 Op)
    ) __t
  group by __t.org;

output view __Minus__255__Temp;

create view __Minus__255__TempOp__1 as
  select  OA.org as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          OA.__auto__id as OrgAll_____sep_____OA____id
  from  OrgAll OA
  where Not(ContainsRegex(/[\n\r]/, OA.org))
     and Not(ContainsDict('FilterOrgDict', OA.org))
     and Not(ContainsDict('dictionaries/filterOrg_german.dict', OA.org));

output view __Minus__255__TempOp__1;

create view __Minus__255__TempOp__2 as
  select  OA.org as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as SentenceBoundary_____sep_____S____id,
          OA.__auto__id as OrgAll_____sep_____OA____id
  from  SentenceBoundary S,
        OrgAll OA
  where Contains(OA.org, S.boundary);

output view __Minus__255__TempOp__2;

create view __Minus__296__Temp as
  select  __t.person as person
  from  
    ((select  Op.person as person
      from  __Minus__296__TempOp__1 Op)
    minus
    (select  Op.person as person
      from  __Minus__296__TempOp__2 Op)
    ) __t
  group by __t.person;

output view __Minus__296__Temp;

create view __Minus__296__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person4WithNewLine_____sep_____P____id
  from  Person4WithNewLine P;

output view __Minus__296__TempOp__1;

create view __Minus__296__TempOp__2 as
  select  CombineSpans(P.firstname, P.lastname) as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person4WrongCandidates_____sep_____P____id
  from  Person4WrongCandidates P
  where Equals(GetText(P.firstname), GetText(P.lastname));

output view __Minus__296__TempOp__2;

create view __Minus__303__Temp as
  select  __t.person as person
  from  
    ((select  Op.person as person
      from  __Minus__303__TempOp__1 Op)
    minus
    (select  Op.person as person
      from  __Minus__303__TempOp__2 Op)
    ) __t
  group by __t.person;

output view __Minus__303__Temp;

create view __Minus__303__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonWeak2_____sep_____P____id
  from  PersonWeak2 P;

output view __Minus__303__TempOp__1;

create view __Minus__303__TempOp__2 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as InvalidPersonWeak2_____sep_____P____id
  from  InvalidPersonWeak2 P;

output view __Minus__303__TempOp__2;

create view __Minus__305__Temp as
  select  __t.person as person
  from  
    ((select  Op.person as person
      from  __Minus__305__TempOp__1 Op)
    minus
    (select  Op.person as person
      from  __Minus__305__TempOp__2 Op)
    ) __t
  group by __t.person;

output view __Minus__305__Temp;

create view __Minus__305__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonWeakWithoutNewLine_____sep_____P____id
  from  PersonWeakWithoutNewLine P;

output view __Minus__305__TempOp__1;

create view __Minus__305__TempOp__2 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonWeakOverlap_____sep_____P____id
  from  PersonWeakOverlap P;

output view __Minus__305__TempOp__2;

create view __Minus__308__Temp as
  select  __t.person as person
  from  
    ((select  Op.person as person
      from  __Minus__308__TempOp__1 Op)
    minus
    (select  Op.person as person
      from  __Minus__308__TempOp__2 Op)
    ) __t
  group by __t.person;

output view __Minus__308__Temp;

create view __Minus__308__TempOp__1 as
  select  PA.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          PA.__auto__id as PersonCorrectAll_____sep_____PA____id
  from  PersonCorrectAll PA;

output view __Minus__308__TempOp__1;

create view __Minus__308__TempOp__2 as
  select  PA.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          PA.__auto__id as PersonCorrectAll_____sep_____PA____id,
          S.__auto__id as SentenceBoundary_____sep_____S____id
  from  PersonCorrectAll PA,
        SentenceBoundary S
  where Contains(PA.person, S.boundary);

output view __Minus__308__TempOp__2;

create view __Minus__311__Temp as
  select  __t.loc as loc
  from  
    ((select  Op.loc as loc
      from  __Minus__311__TempOp__1 Op)
    minus
    (select  Op.loc as loc
      from  __Minus__311__TempOp__2 Op)
    ) __t
  group by __t.loc;

output view __Minus__311__Temp;

create view __Minus__311__TempOp__1 as
  select  P.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PlaceConsolidated_____sep_____P____id
  from  PlaceConsolidated P;

output view __Minus__311__TempOp__1;

create view __Minus__311__TempOp__2 as
  select  WP.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          WP.__auto__id as WrongPlaceConsolidated_____sep_____WP____id
  from  WrongPlaceConsolidated WP;

output view __Minus__311__TempOp__2;

create view __Minus__313__Temp as
  select  __t.org as org
  from  
    ((select  Op.org as org
      from  __Minus__313__TempOp__1 Op)
    minus
    (select  Op.org as org
      from  __Minus__313__TempOp__2 Op)
    ) __t
  group by __t.org;

output view __Minus__313__Temp;

create view __Minus__313__TempOp__1 as
  select  O.org as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as OrgSentence_____sep_____O____id
  from  OrgSentence O;

output view __Minus__313__TempOp__1;

create view __Minus__313__TempOp__2 as
  select  OP.org as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          OP.__auto__id as InvalidOrg_____sep_____OP____id
  from  InvalidOrg OP;

output view __Minus__313__TempOp__2;

create view __Minus__320__Temp as
  select  __t.person as person
  from  
    ((select  Op.person as person
      from  __Minus__320__TempOp__1 Op)
    minus
    (select  Op.person as person
      from  __Minus__320__TempOp__2 Op)
    ) __t
  group by __t.person;

output view __Minus__320__Temp;

create view __Minus__320__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonSentence_____sep_____P____id
  from  PersonSentence P;

output view __Minus__320__TempOp__1;

create view __Minus__320__TempOp__2 as
  select  P1.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P1.__auto__id as InvalidPerson_____sep_____P1____id
  from  InvalidPerson P1;

output view __Minus__320__TempOp__2;

create view __Minus__323__Temp as
  select  __t.person as person
  from  
    ((select  Op.person as person
      from  __Minus__323__TempOp__1 Op)
    minus
    (select  Op.person as person
      from  __Minus__323__TempOp__2 Op)
    ) __t
  group by __t.person;

output view __Minus__323__Temp;

create view __Minus__323__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonStrongSingleToken_____sep_____P____id
  from  PersonStrongSingleToken P;

output view __Minus__323__TempOp__1;

create view __Minus__323__TempOp__2 as
  select  P1.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P1.__auto__id as PersonStrongSingleTokenWithinUrlEmailPlaceOrg_____sep_____P1____id
  from  PersonStrongSingleTokenWithinUrlEmailPlaceOrg P1;

output view __Minus__323__TempOp__2;

create view __Minus__325__Temp as
  select  __t.person as person
  from  
    ((select  Op.person as person
      from  __Minus__325__TempOp__1 Op)
    minus
    (select  Op.person as person
      from  __Minus__325__TempOp__2 Op)
    ) __t
  group by __t.person;

output view __Minus__325__Temp;

create view __Minus__325__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as FinalPersonStrongSingleTokenConsolidated_____sep_____P____id
  from  FinalPersonStrongSingleTokenConsolidated P;

output view __Minus__325__TempOp__1;

create view __Minus__325__TempOp__2 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonStrongSingleTokenOverlaps_____sep_____P____id
  from  PersonStrongSingleTokenOverlaps P;

output view __Minus__325__TempOp__2;

create view __Minus__328__Temp as
  select  __t.person as person
  from  
    ((select  Op.person as person
      from  __Minus__328__TempOp__1 Op)
    minus
    (select  Op.person as person
      from  __Minus__328__TempOp__2 Op)
    ) __t
  group by __t.person;

output view __Minus__328__Temp;

create view __Minus__328__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAllMatches_____sep_____P____id
  from  PersonFinalAllMatches P;

output view __Minus__328__TempOp__1;

create view __Minus__328__TempOp__2 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as InvalidPersonFinalAllMatches_____sep_____P____id
  from  InvalidPersonFinalAllMatches P;

output view __Minus__328__TempOp__2;

create view __Minus__331__Temp as
  select  __t.person as person
  from  
    ((select  Op.person as person
      from  __Minus__331__TempOp__1 Op)
    minus
    (select  Op.person as person
      from  __Minus__331__TempOp__2 Op)
    ) __t
  group by __t.person;

output view __Minus__331__Temp;

create view __Minus__331__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAllCandidate_____sep_____P____id
  from  PersonFinalAllCandidate P;

output view __Minus__331__TempOp__1;

create view __Minus__331__TempOp__2 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAllCandidateToDeleteLC_____sep_____P____id
  from  PersonFinalAllCandidateToDeleteLC P;

output view __Minus__331__TempOp__2;

create view __Minus__332__Temp as
  select  __t.person as person
  from  
    ((select  Op.person as person
      from  __Minus__332__TempOp__1 Op)
    minus
    (select  Op.person as person
      from  __Minus__332__TempOp__2 Op)
    ) __t
  group by __t.person;

output view __Minus__332__Temp;

create view __Minus__332__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAllNoLC_____sep_____P____id
  from  PersonFinalAllNoLC P;

output view __Minus__332__TempOp__1;

create view __Minus__332__TempOp__2 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAllCandidateToDeleteLC1_____sep_____P____id
  from  PersonFinalAllCandidateToDeleteLC1 P;

output view __Minus__332__TempOp__2;

create view __Minus__333__Temp as
  select  __t.person as person
  from  
    ((select  Op.person as person
      from  __Minus__333__TempOp__1 Op)
    minus
    (select  Op.person as person
      from  __Minus__333__TempOp__2 Op)
    ) __t
  group by __t.person;

output view __Minus__333__Temp;

create view __Minus__333__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAllNoLC1_____sep_____P____id
  from  PersonFinalAllNoLC1 P;

output view __Minus__333__TempOp__1;

create view __Minus__333__TempOp__2 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAllCandidateToDeleteRC_____sep_____P____id
  from  PersonFinalAllCandidateToDeleteRC P;

output view __Minus__333__TempOp__2;

create view __Minus__334__Temp as
  select  __t.person as person
  from  
    ((select  Op.person as person
      from  __Minus__334__TempOp__1 Op)
    minus
    (select  Op.person as person
      from  __Minus__334__TempOp__2 Op)
    ) __t
  group by __t.person;

output view __Minus__334__Temp;

create view __Minus__334__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAll_____sep_____P____id
  from  PersonFinalAll P;

output view __Minus__334__TempOp__1;

create view __Minus__334__TempOp__2 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonFinalAllWithDots_____sep_____P____id
  from  PersonFinalAllWithDots P;

output view __Minus__334__TempOp__2;

create view __Subquery__137__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(([\.\?!]+\s)|(\n\s*\n))/
    with flags 'DOTALL'
    on Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__137__Temp;

create view __Subquery__138__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /((20)|(19)|(18)|(17)|(16))[\d][\d]/
    with flags 'DOTALL'
    on between 1 and 4 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__138__Temp;

create view __Subquery__139__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /((0)|(1)|(2)|(3))?[\d]( )*[\-]( )*((0)|(1)|(2)|(3))?[\d]/
    with flags 'DOTALL'
    on between 1 and 5 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__139__Temp;

create view __Subquery__140__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /\d[\d\p{Alpha}\-\,]*(( )*\d[\d\p{Alpha}]*)?/
    with flags 'DOTALL'
    on between 1 and 15 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__140__Temp;

create view __Subquery__141__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/month.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__141__Temp;

create view __Subquery__142__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/wkday.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__142__Temp;

create view __Subquery__143__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/timeZone.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__143__Temp;

create view __Subquery__147__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(\d{1,2}|\d{4})[\-\/]\d{1,2}[\-\/]\d{1,4}/
    with flags 'DOTALL'
    on between 1 and 12 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__147__Temp;

create view __Subquery__150__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(\d{1,2}:\d{2}(:\d{2})?|\d{1,2}-\d{1,2})\s*(A|P)?/
    with flags 'DOTALL'
    on between 1 and 6 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__150__Temp;

create view __Subquery__151__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /\d{1,2}([:.][0-5]\d)?\s*(-\s*\d{1,2}([:.][0-5]\d)?)?/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__151__Temp;

create view __Subquery__154__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'StrongPhoneVariantDictionary'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__154__Temp;

create view __Subquery__155__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(\+\s*){0,2}[\d(]([\d ()\-.\/]){9,20}\d/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__155__Temp;

create view __Subquery__156__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    StrongPhone.__auto__id as StrongPhone_____sep_____StrongPhone____id,
    regex /[\d(].+/
    with flags 'DOTALL'
    on between 1 and 10 tokens in StrongPhone.num
    return group 0 as match
  from StrongPhone StrongPhone;

output view __Subquery__156__Temp;

create view __Subquery__157__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'PhoneVariants'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__157__Temp;

create view __Subquery__158__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /\(?\d{2,4}[\.\-]?\)?(\s*\(0\)\s*)?(\s*[\-\.]\s*)?(\s*[\s\.\-]\(?\d{1,2}(\s*\d{2}\s*){1,2}\)?)?(\s*[\s\.\-]?\d{2,4})(\s*[\s\.-]?\d{1,4}){1,3}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__158__Temp;

create view __Subquery__159__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(\+\s*)?\(\s*[1-9]\d{2}\s*\)\s*[\-\.]?\d{3}[\-\.\s*]?\d{4}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__159__Temp;

create view __Subquery__160__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(\+\s*)?[1-9]\d{2}\s*[\s\-\.]\d{3}[\-\.\s]\s*\d{4}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__160__Temp;

create view __Subquery__161__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /\+?(1[\-\.\s]\s*)?(\(\s*)?[1-9]\d{2}(\s*\))?[\-\. ]\d{3}[\-\. ]\d{4}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__161__Temp;

create view __Subquery__162__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(\+?1[\-\.\s]\s*)?8\d{2}\s*[\s\-\.][A-Z\d]{3}[\.\-]?[A-Z]{4}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__162__Temp;

create view __Subquery__163__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /[Xx][\.\-]?\d{4,5}/
    with flags 'DOTALL'
    on between 1 and 3 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__163__Temp;

create view __Subquery__164__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /[Ee]xt\s*[\.\-\:]?\s*\d{3,5}/
    with flags 'CASE_INSENSITIVE'
    on between 1 and 3 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__164__Temp;

create view __Subquery__165__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /([1-9]\d{1,2}\s*[\(\s\-\.]((\d{2}\s*[\)\s\-\.]\d{8})|(\d{5}\s*[\)\s\-\.]\d{5})|(\d{2}\s*[\)\s\-\.]\d{4}\s*[\s\-\.]\d{4})))/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__165__Temp;

create view __Subquery__166__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(972[\-\.]\d{1,2}[\-\.]\d{7})/
    with flags 'DOTALL'
    on between 1 and 5 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__166__Temp;

create view __Subquery__171__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /\p{Upper}[\p{Lower}\&\.-\/]{1,20}/
    with flags 'DOTALL'
    on between 1 and 25 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__171__Temp;

create view __Subquery__173__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/city.dict'
    with flags 'Exact'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__173__Temp;

create view __Subquery__174__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/country.dict'
    with flags 'Exact'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__174__Temp;

create view __Subquery__175__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/stateList.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__175__Temp;

create view __Subquery__176__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/stateListAbbrev.dict'
    with flags 'Exact'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__176__Temp;

create view __Subquery__177__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/stateListAbbrev.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__177__Temp;

create view __Subquery__180__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/streetSuffix.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__180__Temp;

create view __Subquery__181__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/streetSuffix_weak.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__181__Temp;

create view __Subquery__183__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/secondaryUnit.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__183__Temp;

create view __Subquery__184__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /[0-9]{5}(\-[0-9]{4})?/
    with flags 'DOTALL'
    on between 1 and 3 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__184__Temp;

create view __Subquery__185__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(([1-9\p{Alpha}][\d\p{Alpha}\-\,]*)?\d[\d\p{Alpha}\-\,]*)\b/
    with flags 'DOTALL'
    on between 1 and 20 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__185__Temp;

create view __Subquery__186__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /\d{1,5}-?[A-Z]?/
    with flags 'DOTALL'
    on between 1 and 3 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__186__Temp;

create view __Subquery__187__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'HighwayDict'
    with flags 'Exact'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__187__Temp;

create view __Subquery__189__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /[1-9]\d{0,2}(\s*(N|S|E|W))?(\s*(N|S|E|W))?/
    with flags 'DOTALL'
    on between 1 and 3 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__189__Temp;

create view __Subquery__193__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(D-)?[0-9]{4,5}/
    with flags 'DOTALL'
    on between 1 and 3 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__193__Temp;

create view __Subquery__194__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/city_german.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__194__Temp;

create view __Subquery__196__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20})?([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]ämme|[Gg]asse|[Gg]aerten|[Gg]ärten|[Hh]alde|[Hh]öfe|[Hh]of|[Hh]oefe|[Ll]andstraße|[Ll]andstrasse|[Mm]ärkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]lätze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]traße|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)\s*,?\s*([[1-9]\p{L}\p{M}*\-\,])*\d([\d\p{L}\p{M}*\/\-\,])*/
    with flags 'DOTALL'
    on between 1 and 25 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__196__Temp;

create view __Subquery__197__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(An [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*(Brücke|Park|Postfach|Hauptbahnhof)\b\s*,?\s*([[1-9]\p{L}\p{M}*\-\,])*\d([\d\p{L}\p{M}*\/\-\,])*/
    with flags 'DOTALL'
    on between 1 and 25 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__197__Temp;

create view __Subquery__199__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}/
    with flags 'DOTALL'
    on between 1 and 25 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__199__Temp;

create view __Subquery__203__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]ämme|[Gg]asse|[Gg]aerten|[Gg]ärten|[Hh]alde|[Hh]öfe|[Hh]of|[Hh]oefe|[Ll]andstraße|[Ll]andstrasse|[Mm]ärkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]lätze|[Pp]laetze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]traße|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)[ \t]+([Aa]n [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}\s*,?\s*([[1-9]\p{L}\p{M}*\-\,]*\d[\d\p{L}\p{M}*\/\-\,]*)/
    with flags 'DOTALL'
    on between 1 and 25 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__203__Temp;

create view __Subquery__206__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /((\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*[\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}]{1,20}\s*[\/]\s*)((\p{Lu}\p{M}*(\p{L}\p{M}*){1,20}\s*){1,2}[\/]\s*){1,2}(\p{Lu}\p{M}*){2,20}(@(\p{L}\p{M}*){2,20})?)/
    with flags 'DOTALL'
    on between 1 and 15 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__206__Temp;

create view __Subquery__207__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(((\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,10}(['-]\p{L}\p{M}*)?(\p{L}\p{M}*){1,10}\s+))?((\p{Lu}\p{M}*\.?){1,2}\s+)?(\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}(['-]\p{L}\p{M}*(\p{L}\p{M}*){1,8})?\w{0,2}\s*[\/]\s*)((\p{Lu}\p{M}*(\p{L}\p{M}*){1,20}\s*){1,2}[\/]\s*){1,2}(\p{Lu}\p{M}*){2,20}(@(\p{L}\p{M}*){1,20})?)/
    with flags 'DOTALL'
    on between 1 and 15 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__207__Temp;

create view __Subquery__209__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Email2.__auto__id as Email2_____sep_____Email2____id,
    regex /[a-zA-Z]+/
    with flags 'DOTALL'
    on between 1 and 1 tokens in Email2.annot
    return group 0 as match
  from Email2 Email2;

output view __Subquery__209__Temp;

create view __Subquery__210__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Email2.__auto__id as Email2_____sep_____Email2____id,
    regex /[a-zA-Z]+/
    with flags 'DOTALL'
    on between 1 and 1 tokens in Email2.annot
    return group 0 as match
  from Email2 Email2;

output view __Subquery__210__Temp;

create view __Subquery__211__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'OrgConjDict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__211__Temp;

create view __Subquery__212__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'OrgPrepDict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__212__Temp;

create view __Subquery__213__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'TheDict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__213__Temp;

create view __Subquery__214__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /\p{Lu}\p{M}*([\p{Ll}\p{Lo}]\p{M}*|[\&\.'\-\,])+\b/
    with flags 'DOTALL'
    on between 1 and 6 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__214__Temp;

create view __Subquery__215__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /(\p{Lu}\p{M}*){1,2}((\s*&\s*)?(\p{Lu}\p{M}*)+|([\p{Ll}\p{Lo}]\p{M}*)+(\p{Lu}\p{M}*)([\p{Ll}\p{Lo}]\p{M}*)+)/
    with flags 'DOTALL'
    on between 1 and 3 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__215__Temp;

create view __Subquery__216__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'DotComSuffixDict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__216__Temp;

create view __Subquery__217__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    DotComContext.__auto__id as DotComContext_____sep_____DotComContext____id,
    regex /[a-zA-Z][\w\&\-]+$/
    with flags 'DOTALL'
    on between 1 and 25 tokens in DotComContext.lc
    return group 0 as match
  from DotComContext DotComContext;

output view __Subquery__217__Temp;

create view __Subquery__218__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/industryType_suffix.dict'
    with flags 'Exact'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__218__Temp;

create view __Subquery__219__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/industryType_prefix.dict'
    with flags 'Exact'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__219__Temp;

create view __Subquery__220__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/organization_suffix.dict'
    with flags 'Exact'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__220__Temp;

create view __Subquery__223__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/organization_full_case.dict'
    with flags 'Exact'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__223__Temp;

create view __Subquery__224__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/organization_media.dict'
    with flags 'Exact'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__224__Temp;

create view __Subquery__225__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/organization_newspaper.dict'
    with flags 'Exact'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__225__Temp;

create view __Subquery__226__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/organization_full_noCase.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__226__Temp;

create view __Subquery__229__Temp as
  select  Op.block as block,
          AutoID() as __auto__id
  from  __Base__228__Temp Op;

output view __Subquery__229__Temp;

create view __Subquery__231__Temp as
  select  Op.block as block,
          AutoID() as __auto__id
  from  __Base__230__Temp Op;

output view __Subquery__231__Temp;

create view __Subquery__232__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/continent.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__232__Temp;

create view __Subquery__233__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/nationality.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__233__Temp;

create view __Subquery__234__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'OrgToAvoidDict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__234__Temp;

create view __Subquery__245__Temp as
  select  Op.block as block,
          AutoID() as __auto__id
  from  __Base__244__Temp Op;

output view __Subquery__245__Temp;

create view __Subquery__247__Temp as
  select  Op.block as block,
          AutoID() as __auto__id
  from  __Base__246__Temp Op;

output view __Subquery__247__Temp;

create view __Subquery__250__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /([\p{Upper}]\.\s*){1,5}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__250__Temp;

create view __Subquery__251__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /([\p{Upper}]\.?\s*){1,5}/
    with flags 'DOTALL'
    on between 1 and 10 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__251__Temp;

create view __Subquery__256__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'InitialDict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__256__Temp;

create view __Subquery__257__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'PersonSuffixDict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__257__Temp;

create view __Subquery__258__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    regex /\p{Lu}\p{M}*(\p{L}\p{M}*){0,10}(['-][\p{Lu}\p{M}*])?(\p{L}\p{M}*){1,10}/
    with flags 'DOTALL'
    on between 1 and 4 tokens in Doc.text
    return group 0 as match
  from Doc Doc;

output view __Subquery__258__Temp;

create view __Subquery__259__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    CapsPersonNoP.__auto__id as CapsPersonNoP_____sep_____CapsPersonNoP____id,
    regex /\p{Lu}\p{M}*(\p{L}\p{M}*){1,20}/
    with flags 'DOTALL'
    on between 1 and 1 tokens in CapsPersonNoP.name
    return group 0 as match
  from CapsPersonNoP CapsPersonNoP;

output view __Subquery__259__Temp;

create view __Subquery__260__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/strictLast.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__260__Temp;

create view __Subquery__261__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/strictLast_german.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__261__Temp;

create view __Subquery__262__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/strictLast_german_bluePages.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__262__Temp;

create view __Subquery__263__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/uniqMostCommonSurname.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__263__Temp;

create view __Subquery__264__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/strictLast_italy.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__264__Temp;

create view __Subquery__265__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/strictLast_france.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__265__Temp;

create view __Subquery__266__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/strictLast_spain.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__266__Temp;

create view __Subquery__267__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/strictLast_india.partial.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__267__Temp;

create view __Subquery__268__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/strictLast_israel.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__268__Temp;

create view __Subquery__272__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/strictFirst.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__272__Temp;

create view __Subquery__273__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/strictFirst_german.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__273__Temp;

create view __Subquery__274__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/strictNickName.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__274__Temp;

create view __Subquery__275__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/strictFirst_german_bluePages.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__275__Temp;

create view __Subquery__276__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/strictFirst_italy.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__276__Temp;

create view __Subquery__277__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/strictFirst_france.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__277__Temp;

create view __Subquery__278__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/strictFirst_spain.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__278__Temp;

create view __Subquery__279__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/strictFirst_india.partial.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__279__Temp;

create view __Subquery__280__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/strictFirst_israel.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__280__Temp;

create view __Subquery__284__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/name.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__284__Temp;

create view __Subquery__285__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/name_italy.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__285__Temp;

create view __Subquery__286__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/name_france.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__286__Temp;

create view __Subquery__287__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/name_spain.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__287__Temp;

create view __Subquery__288__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/names/name_israel.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__288__Temp;

create view __Subquery__292__Temp as
  select  Op.block as block,
          AutoID() as __auto__id
  from  __Base__291__Temp Op;

output view __Subquery__292__Temp;

create view __Subquery__295__Temp as
  select  Op.block as block,
          AutoID() as __auto__id
  from  __Base__294__Temp Op;

output view __Subquery__295__Temp;

create view __Subquery__327__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    Doc.__auto__id as Doc_____sep_____Doc____id,
    dictionary 'dictionaries/invalidPersonFragment.dict'
    with flags 'IgnoreCase'
    on Doc.text as match
  from Doc Doc;

output view __Subquery__327__Temp;

create view __Subquery__329__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    PersonContext.__auto__id as PersonContext_____sep_____PersonContext____id,
    regex /(\p{L}\p{M}*){1,20}\s+$/
    with flags 'DOTALL'
    on between 1 and 5 tokens in PersonContext.lc
    return group 0 as match
  from PersonContext PersonContext;

output view __Subquery__329__Temp;

create view __Subquery__330__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    PersonContext.__auto__id as PersonContext_____sep_____PersonContext____id,
    regex /(\p{L}\p{M}*){1,20}\s+$/
    with flags 'DOTALL'
    on between 1 and 5 tokens in PersonContext.rc
    return group 0 as match
  from PersonContext PersonContext;

output view __Subquery__330__Temp;

create view __Union__144__TempOp__0 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as DateInterval1_____sep_____d____id
  from  DateInterval1 d;

output view __Union__144__TempOp__0;

create view __Union__144__TempOp__1 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as DateInterval2_____sep_____d____id
  from  DateInterval2 d;

output view __Union__144__TempOp__1;

create view __Union__145__TempOp__0 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as DateIntervalWithoutYear_____sep_____d____id
  from  DateIntervalWithoutYear d;

output view __Union__145__TempOp__0;

create view __Union__145__TempOp__1 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as DateIntervalWithYear_____sep_____d____id
  from  DateIntervalWithYear d;

output view __Union__145__TempOp__1;

create view __Union__148__TempOp__0 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as Date1to3_____sep_____d____id
  from  Date1to3 d;

output view __Union__148__TempOp__0;

create view __Union__148__TempOp__1 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as Date4to5_____sep_____d____id
  from  Date4to5 d;

output view __Union__148__TempOp__1;

create view __Union__148__TempOp__10 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as Date14_____sep_____d____id
  from  Date14 d;

output view __Union__148__TempOp__10;

create view __Union__148__TempOp__2 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as Date6_____sep_____d____id
  from  Date6 d;

output view __Union__148__TempOp__2;

create view __Union__148__TempOp__3 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as Date7_____sep_____d____id
  from  Date7 d;

output view __Union__148__TempOp__3;

create view __Union__148__TempOp__4 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as Date8_____sep_____d____id
  from  Date8 d;

output view __Union__148__TempOp__4;

create view __Union__148__TempOp__5 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as Date9_____sep_____d____id
  from  Date9 d;

output view __Union__148__TempOp__5;

create view __Union__148__TempOp__6 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as Date10_____sep_____d____id
  from  Date10 d;

output view __Union__148__TempOp__6;

create view __Union__148__TempOp__7 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as Date11_____sep_____d____id
  from  Date11 d;

output view __Union__148__TempOp__7;

create view __Union__148__TempOp__8 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as Date12_____sep_____d____id
  from  Date12 d;

output view __Union__148__TempOp__8;

create view __Union__148__TempOp__9 as
  select  d.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          d.__auto__id as Date13_____sep_____d____id
  from  Date13 d;

output view __Union__148__TempOp__9;

create view __Union__152__TempOp__0 as
  select  t.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          t.__auto__id as Time1_____sep_____t____id
  from  Time1 t;

output view __Union__152__TempOp__0;

create view __Union__152__TempOp__1 as
  select  t.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          t.__auto__id as Time2_____sep_____t____id
  from  Time2 t;

output view __Union__152__TempOp__1;

create view __Union__152__TempOp__2 as
  select  t.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          t.__auto__id as Time2Plus_____sep_____t____id
  from  Time2Plus t;

output view __Union__152__TempOp__2;

create view __Union__152__TempOp__3 as
  select  t.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          t.__auto__id as Time3_____sep_____t____id
  from  Time3 t;

output view __Union__152__TempOp__3;

create view __Union__152__TempOp__4 as
  select  t.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          t.__auto__id as Time4_____sep_____t____id
  from  Time4 t;

output view __Union__152__TempOp__4;

create view __Union__167__TempOp__0 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R1a_____sep_____P____id
  from  PhoneNumber_R1a P;

output view __Union__167__TempOp__0;

create view __Union__167__TempOp__1 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R1b_2_____sep_____P____id
  from  PhoneNumber_R1b_2 P;

output view __Union__167__TempOp__1;

create view __Union__167__TempOp__2 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R2a_____sep_____P____id
  from  PhoneNumber_R2a P;

output view __Union__167__TempOp__2;

create view __Union__167__TempOp__3 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R3_____sep_____P____id
  from  PhoneNumber_R3 P;

output view __Union__167__TempOp__3;

create view __Union__167__TempOp__4 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R3a_____sep_____P____id
  from  PhoneNumber_R3a P;

output view __Union__167__TempOp__4;

create view __Union__167__TempOp__5 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R7a_7b_7c_____sep_____P____id
  from  PhoneNumber_R7a_7b_7c P;

output view __Union__167__TempOp__5;

create view __Union__167__TempOp__6 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R8ILPhone_____sep_____P____id
  from  PhoneNumber_R8ILPhone P;

output view __Union__167__TempOp__6;

create view __Union__167__TempOp__7 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as StrongPhoneNumber_____sep_____P____id
  from  StrongPhoneNumber P;

output view __Union__167__TempOp__7;

create view __Union__168__TempOp__0 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R4_____sep_____P____id
  from  PhoneNumber_R4 P;

output view __Union__168__TempOp__0;

create view __Union__168__TempOp__1 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumber_R5_____sep_____P____id
  from  PhoneNumber_R5 P;

output view __Union__168__TempOp__1;

create view __Union__169__TempOp__0 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumFull_____sep_____P____id
  from  PhoneNumFull P;

output view __Union__169__TempOp__0;

create view __Union__169__TempOp__1 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as ExtensionNums_____sep_____P____id
  from  ExtensionNums P;

output view __Union__169__TempOp__1;

create view __Union__169__TempOp__2 as
  select  P.num as num,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PhoneNumWithExtension_____sep_____P____id
  from  PhoneNumWithExtension P;

output view __Union__169__TempOp__2;

create view __Union__172__TempOp__0 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as CapsPlace_____sep_____R____id
  from  CapsPlace R;

output view __Union__172__TempOp__0;

create view __Union__172__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as CapsPlaceTwo_____sep_____R____id
  from  CapsPlaceTwo R;

output view __Union__172__TempOp__1;

create view __Union__178__TempOp__0 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as State_____sep_____S____id
  from  State S;

output view __Union__178__TempOp__0;

create view __Union__178__TempOp__1 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StateStrongAbbrev_____sep_____S____id
  from  StateStrongAbbrev S;

output view __Union__178__TempOp__1;

create view __Union__179__TempOp__0 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as State_____sep_____S____id
  from  State S;

output view __Union__179__TempOp__0;

create view __Union__179__TempOp__1 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StateWeakAbbrev_____sep_____S____id
  from  StateWeakAbbrev S;

output view __Union__179__TempOp__1;

create view __Union__182__TempOp__0 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StreetSuffix_____sep_____S____id
  from  StreetSuffix S;

output view __Union__182__TempOp__0;

create view __Union__182__TempOp__1 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StreetSuffixWeak_____sep_____S____id
  from  StreetSuffixWeak S;

output view __Union__182__TempOp__1;

create view __Union__188__TempOp__0 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as HighwayDictionary_____sep_____R____id
  from  HighwayDictionary R;

output view __Union__188__TempOp__0;

create view __Union__188__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as StateStrongAbbrev_____sep_____R____id
  from  StateStrongAbbrev R;

output view __Union__188__TempOp__1;

create view __Union__190__TempOp__0 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StreetAddressAll_____sep_____S____id
  from  StreetAddressAll S;

output view __Union__190__TempOp__0;

create view __Union__190__TempOp__1 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as HighwayAddress_____sep_____S____id
  from  HighwayAddress S;

output view __Union__190__TempOp__1;

create view __Union__191__TempOp__0 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StreetHighwayAddressAll_____sep_____S____id
  from  StreetHighwayAddressAll S;

output view __Union__191__TempOp__0;

create view __Union__191__TempOp__1 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StreetAddressUnit_____sep_____S____id
  from  StreetAddressUnit S;

output view __Union__191__TempOp__1;

create view __Union__192__TempOp__0 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StreetAddressWithCity_____sep_____S____id
  from  StreetAddressWithCity S;

output view __Union__192__TempOp__0;

create view __Union__192__TempOp__1 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StreetAddressWithCityWeakState_____sep_____S____id
  from  StreetAddressWithCityWeakState S;

output view __Union__192__TempOp__1;

create view __Union__195__TempOp__0 as
  select  GCZ1.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          GCZ1.__auto__id as GermanCityZipcode1_____sep_____GCZ1____id
  from  GermanCityZipcode1 GCZ1;

output view __Union__195__TempOp__0;

create view __Union__195__TempOp__1 as
  select  GCZ2.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          GCZ2.__auto__id as GermanCityZipcode2_____sep_____GCZ2____id
  from  GermanCityZipcode2 GCZ2;

output view __Union__195__TempOp__1;

create view __Union__198__TempOp__0 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as GermanStreetAddressSuffix1_____sep_____R____id
  from  GermanStreetAddressSuffix1 R;

output view __Union__198__TempOp__0;

create view __Union__198__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as GermanStreetAddressSuffix2_____sep_____R____id
  from  GermanStreetAddressSuffix2 R;

output view __Union__198__TempOp__1;

create view __Union__200__TempOp__0 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as GermanCapsPlace_____sep_____R____id
  from  GermanCapsPlace R;

output view __Union__200__TempOp__0;

create view __Union__200__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as GermanCapsPlaceTwo_____sep_____R____id
  from  GermanCapsPlaceTwo R;

output view __Union__200__TempOp__1;

create view __Union__201__TempOp__0 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as GermanStreetNameWithSuffix_____sep_____R____id
  from  GermanStreetNameWithSuffix R;

output view __Union__201__TempOp__0;

create view __Union__201__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as GermanStreetAddressSuffix_____sep_____R____id
  from  GermanStreetAddressSuffix R;

output view __Union__201__TempOp__1;

create view __Union__204__TempOp__0 as
  select  GSA1.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          GSA1.__auto__id as GermanStreetAddress1_____sep_____GSA1____id
  from  GermanStreetAddress1 GSA1;

output view __Union__204__TempOp__0;

create view __Union__204__TempOp__1 as
  select  GSA2.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          GSA2.__auto__id as GermanStreetAddress2_____sep_____GSA2____id
  from  GermanStreetAddress2 GSA2;

output view __Union__204__TempOp__1;

create view __Union__205__TempOp__0 as
  select  R.match as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as StreetAddressWithCityOptionalStateZipcode_____sep_____R____id
  from  StreetAddressWithCityOptionalStateZipcode R;

output view __Union__205__TempOp__0;

create view __Union__205__TempOp__1 as
  select  R.match as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as StreetAddressWithCityStrongState_____sep_____R____id
  from  StreetAddressWithCityStrongState R;

output view __Union__205__TempOp__1;

create view __Union__205__TempOp__2 as
  select  R.match as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as GermanAddress_____sep_____R____id
  from  GermanAddress R;

output view __Union__205__TempOp__2;

create view __Union__208__TempOp__0 as
  select  Email2_a.annot as annot,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Email2_a.__auto__id as Email2_a_____sep_____Email2_a____id
  from  Email2_a Email2_a;

output view __Union__208__TempOp__0;

create view __Union__208__TempOp__1 as
  select  Email2_b.annot as annot,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Email2_b.__auto__id as Email2_b_____sep_____Email2_b____id
  from  Email2_b Email2_b;

output view __Union__208__TempOp__1;

create view __Union__221__TempOp__0 as
  select  OCSIC.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          OCSIC.__auto__id as OrgClueStIndCaps_____sep_____OCSIC____id
  from  OrgClueStIndCaps OCSIC;

output view __Union__221__TempOp__0;

create view __Union__221__TempOp__1 as
  select  OCSSC.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          OCSSC.__auto__id as OrgClueStSuffixCaps_____sep_____OCSSC____id
  from  OrgClueStSuffixCaps OCSSC;

output view __Union__221__TempOp__1;

create view __Union__222__TempOp__0 as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__223__Temp_____sep_____D____id
  from  __Subquery__223__Temp D;

output view __Union__222__TempOp__0;

create view __Union__222__TempOp__1 as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__224__Temp_____sep_____D____id
  from  __Subquery__224__Temp D;

output view __Union__222__TempOp__1;

create view __Union__222__TempOp__2 as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__225__Temp_____sep_____D____id
  from  __Subquery__225__Temp D;

output view __Union__222__TempOp__2;

create view __Union__227__TempOp__0 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as OrgFullNoCase_____sep_____R____id
  from  OrgFullNoCase R;

output view __Union__227__TempOp__0;

create view __Union__227__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as OrgFullCase_____sep_____R____id
  from  OrgFullCase R;

output view __Union__227__TempOp__1;

create view __Union__235__TempOp__0 as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as Continents_____sep_____D____id
  from  Continents D;

output view __Union__235__TempOp__0;

create view __Union__235__TempOp__1 as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as Nationalities_____sep_____D____id
  from  Nationalities D;

output view __Union__235__TempOp__1;

create view __Union__235__TempOp__2 as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as Country_____sep_____D____id
  from  Country D;

output view __Union__235__TempOp__2;

create view __Union__235__TempOp__3 as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as State_____sep_____D____id
  from  State D;

output view __Union__235__TempOp__3;

create view __Union__235__TempOp__4 as
  select  D.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as OrgToAvoid_____sep_____D____id
  from  OrgToAvoid D;

output view __Union__235__TempOp__4;

create view __Union__236__TempOp__0 as
  select  C.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as CoOcsic1_____sep_____C____id
  from  CoOcsic1 C;

output view __Union__236__TempOp__0;

create view __Union__236__TempOp__1 as
  select  C.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as CoOcsic2_____sep_____C____id
  from  CoOcsic2 C;

output view __Union__236__TempOp__1;

create view __Union__240__TempOp__0 as
  select  o.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          o.__auto__id as OcscOpCoOcCo_____sep_____o____id
  from  OcscOpCoOcCo o;

output view __Union__240__TempOp__0;

create view __Union__240__TempOp__1 as
  select  o.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          o.__auto__id as CoOcscOpCoOcCo_____sep_____o____id
  from  CoOcscOpCoOcCo o;

output view __Union__240__TempOp__1;

create view __Union__242__TempOp__0 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as OrgFull_____sep_____R____id
  from  OrgFull R;

output view __Union__242__TempOp__0;

create view __Union__242__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as OfCo_____sep_____R____id
  from  OfCo R;

output view __Union__242__TempOp__1;

create view __Union__243__TempOp__0 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as CoOc_____sep_____R____id
  from  CoOc R;

output view __Union__243__TempOp__0;

create view __Union__243__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as CoOcCo_____sep_____R____id
  from  CoOcCo R;

output view __Union__243__TempOp__1;

create view __Union__248__TempOp__0 as
  select  O.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as OrganizationR11_no_quantifier_____sep_____O____id
  from  OrganizationR11_no_quantifier O;

output view __Union__248__TempOp__0;

create view __Union__248__TempOp__1 as
  select  O.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as OrganizationR11_with_quantifier_____sep_____O____id
  from  OrganizationR11_with_quantifier O;

output view __Union__248__TempOp__1;

create view __Union__249__TempOp__0 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as CoOcscOpCoOcCoConsolidated_____sep_____R____id
  from  CoOcscOpCoOcCoConsolidated R;

output view __Union__249__TempOp__0;

create view __Union__249__TempOp__1 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as CoOcsic_____sep_____R____id
  from  CoOcsic R;

output view __Union__249__TempOp__1;

create view __Union__249__TempOp__2 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as CoOcssc_____sep_____R____id
  from  CoOcssc R;

output view __Union__249__TempOp__2;

create view __Union__249__TempOp__3 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as CoOcscOpCo_____sep_____R____id
  from  CoOcscOpCo R;

output view __Union__249__TempOp__3;

create view __Union__249__TempOp__4 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as OrganizationR11_no_the_____sep_____R____id
  from  OrganizationR11_no_the R;

output view __Union__249__TempOp__4;

create view __Union__249__TempOp__5 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as CoOcsicEx_____sep_____R____id
  from  CoOcsicEx R;

output view __Union__249__TempOp__5;

create view __Union__252__TempOp__0 as
  select  O.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as ExpandedOrg5791011R1_____sep_____O____id
  from  ExpandedOrg5791011R1 O;

output view __Union__252__TempOp__0;

create view __Union__252__TempOp__1 as
  select  O.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as ExpandedOrg5791011R2_____sep_____O____id
  from  ExpandedOrg5791011R2 O;

output view __Union__252__TempOp__1;

create view __Union__253__TempOp__0 as
  select  O.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as ExpandedOrg5791011WithAnd1_____sep_____O____id
  from  ExpandedOrg5791011WithAnd1 O;

output view __Union__253__TempOp__0;

create view __Union__253__TempOp__1 as
  select  O.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as ExpandedOrg5791011WithAnd2_____sep_____O____id
  from  ExpandedOrg5791011WithAnd2 O;

output view __Union__253__TempOp__1;

create view __Union__253__TempOp__2 as
  select  O.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as ExpandedOrg5791011WithAnd3_____sep_____O____id
  from  ExpandedOrg5791011WithAnd3 O;

output view __Union__253__TempOp__2;

create view __Union__254__TempOp__0 as
  select  R.match as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as DotCom_____sep_____R____id
  from  DotCom R;

output view __Union__254__TempOp__0;

create view __Union__254__TempOp__1 as
  select  R.match as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as OrgFull_____sep_____R____id
  from  OrgFull R;

output view __Union__254__TempOp__1;

create view __Union__254__TempOp__2 as
  select  R.match as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as Org5791011_____sep_____R____id
  from  Org5791011 R;

output view __Union__254__TempOp__2;

create view __Union__254__TempOp__3 as
  select  R.match as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as TheOrg5791011_____sep_____R____id
  from  TheOrg5791011 R;

output view __Union__254__TempOp__3;

create view __Union__254__TempOp__4 as
  select  R.match as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as ExpandedOrg5791011_____sep_____R____id
  from  ExpandedOrg5791011 R;

output view __Union__254__TempOp__4;

create view __Union__254__TempOp__5 as
  select  R.match as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as ExpandedOrg5791011WithAnd_____sep_____R____id
  from  ExpandedOrg5791011WithAnd R;

output view __Union__254__TempOp__5;

create view __Union__254__TempOp__6 as
  select  R.match as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as OfCoOcsc_____sep_____R____id
  from  OfCoOcsc R;

output view __Union__254__TempOp__6;

create view __Union__254__TempOp__7 as
  select  R.match as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as CoOcCozerototwoOcscOpCo_____sep_____R____id
  from  CoOcCozerototwoOcscOpCo R;

output view __Union__254__TempOp__7;

create view __Union__269__TempOp__0 as
  select  S.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictLastName1_____sep_____S____id
  from  StrictLastName1 S;

output view __Union__269__TempOp__0;

create view __Union__269__TempOp__1 as
  select  S.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictLastName2_____sep_____S____id
  from  StrictLastName2 S;

output view __Union__269__TempOp__1;

create view __Union__269__TempOp__2 as
  select  S.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictLastName3_____sep_____S____id
  from  StrictLastName3 S;

output view __Union__269__TempOp__2;

create view __Union__269__TempOp__3 as
  select  S.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictLastName4_____sep_____S____id
  from  StrictLastName4 S;

output view __Union__269__TempOp__3;

create view __Union__269__TempOp__4 as
  select  S.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictLastName5_____sep_____S____id
  from  StrictLastName5 S;

output view __Union__269__TempOp__4;

create view __Union__269__TempOp__5 as
  select  S.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictLastName6_____sep_____S____id
  from  StrictLastName6 S;

output view __Union__269__TempOp__5;

create view __Union__269__TempOp__6 as
  select  S.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictLastName7_____sep_____S____id
  from  StrictLastName7 S;

output view __Union__269__TempOp__6;

create view __Union__269__TempOp__7 as
  select  S.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictLastName8_____sep_____S____id
  from  StrictLastName8 S;

output view __Union__269__TempOp__7;

create view __Union__269__TempOp__8 as
  select  S.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictLastName9_____sep_____S____id
  from  StrictLastName9 S;

output view __Union__269__TempOp__8;

create view __Union__270__TempOp__0 as
  select  N.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          N.__auto__id as StrictLastName_____sep_____N____id
  from  StrictLastName N;

output view __Union__270__TempOp__0;

create view __Union__270__TempOp__1 as
  select  N.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          N.__auto__id as RelaxedLastName1_____sep_____N____id
  from  RelaxedLastName1 N;

output view __Union__270__TempOp__1;

create view __Union__270__TempOp__2 as
  select  N.lastname as lastname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          N.__auto__id as RelaxedLastName2_____sep_____N____id
  from  RelaxedLastName2 N;

output view __Union__270__TempOp__2;

create view __Union__281__TempOp__0 as
  select  S.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictFirstName1_____sep_____S____id
  from  StrictFirstName1 S;

output view __Union__281__TempOp__0;

create view __Union__281__TempOp__1 as
  select  S.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictFirstName2_____sep_____S____id
  from  StrictFirstName2 S;

output view __Union__281__TempOp__1;

create view __Union__281__TempOp__2 as
  select  S.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictFirstName3_____sep_____S____id
  from  StrictFirstName3 S;

output view __Union__281__TempOp__2;

create view __Union__281__TempOp__3 as
  select  S.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictFirstName4_____sep_____S____id
  from  StrictFirstName4 S;

output view __Union__281__TempOp__3;

create view __Union__281__TempOp__4 as
  select  S.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictFirstName5_____sep_____S____id
  from  StrictFirstName5 S;

output view __Union__281__TempOp__4;

create view __Union__281__TempOp__5 as
  select  S.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictFirstName6_____sep_____S____id
  from  StrictFirstName6 S;

output view __Union__281__TempOp__5;

create view __Union__281__TempOp__6 as
  select  S.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictFirstName7_____sep_____S____id
  from  StrictFirstName7 S;

output view __Union__281__TempOp__6;

create view __Union__281__TempOp__7 as
  select  S.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictFirstName8_____sep_____S____id
  from  StrictFirstName8 S;

output view __Union__281__TempOp__7;

create view __Union__281__TempOp__8 as
  select  S.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as StrictFirstName9_____sep_____S____id
  from  StrictFirstName9 S;

output view __Union__281__TempOp__8;

create view __Union__282__TempOp__0 as
  select  N.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          N.__auto__id as StrictFirstName_____sep_____N____id
  from  StrictFirstName N;

output view __Union__282__TempOp__0;

create view __Union__282__TempOp__1 as
  select  N.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          N.__auto__id as RelaxedFirstName1_____sep_____N____id
  from  RelaxedFirstName1 N;

output view __Union__282__TempOp__1;

create view __Union__282__TempOp__2 as
  select  N.firstname as firstname,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          N.__auto__id as RelaxedFirstName2_____sep_____N____id
  from  RelaxedFirstName2 N;

output view __Union__282__TempOp__2;

create view __Union__289__TempOp__0 as
  select  P.name as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as NameDict_____sep_____P____id
  from  NameDict P;

output view __Union__289__TempOp__0;

create view __Union__289__TempOp__1 as
  select  P.name as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as NameDict1_____sep_____P____id
  from  NameDict1 P;

output view __Union__289__TempOp__1;

create view __Union__289__TempOp__2 as
  select  P.name as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as NameDict2_____sep_____P____id
  from  NameDict2 P;

output view __Union__289__TempOp__2;

create view __Union__289__TempOp__3 as
  select  P.name as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as NameDict3_____sep_____P____id
  from  NameDict3 P;

output view __Union__289__TempOp__3;

create view __Union__289__TempOp__4 as
  select  P.name as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as NameDict4_____sep_____P____id
  from  NameDict4 P;

output view __Union__289__TempOp__4;

create view __Union__289__TempOp__5 as
  select  P.firstname as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as FirstName_____sep_____P____id
  from  FirstName P;

output view __Union__289__TempOp__5;

create view __Union__289__TempOp__6 as
  select  P.lastname as name,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as LastName_____sep_____P____id
  from  LastName P;

output view __Union__289__TempOp__6;

create view __Union__293__TempOp__0 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person1a1_____sep_____P____id
  from  Person1a1 P;

output view __Union__293__TempOp__0;

create view __Union__293__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person1a2_____sep_____P____id
  from  Person1a2 P;

output view __Union__293__TempOp__1;

create view __Union__297__TempOp__0 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person1_____sep_____P____id
  from  Person1 P;

output view __Union__297__TempOp__0;

create view __Union__297__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person1a_more_____sep_____P____id
  from  Person1a_more P;

output view __Union__297__TempOp__1;

create view __Union__297__TempOp__2 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person3_____sep_____P____id
  from  Person3 P;

output view __Union__297__TempOp__2;

create view __Union__297__TempOp__3 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person4_____sep_____P____id
  from  Person4 P;

output view __Union__297__TempOp__3;

create view __Union__297__TempOp__4 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person3P1_____sep_____P____id
  from  Person3P1 P;

output view __Union__297__TempOp__4;

create view __Union__298__TempOp__0 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person5_____sep_____P____id
  from  Person5 P;

output view __Union__298__TempOp__0;

create view __Union__298__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person6_____sep_____P____id
  from  Person6 P;

output view __Union__298__TempOp__1;

create view __Union__298__TempOp__2 as
  select  P.firstname as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as FirstName_____sep_____P____id
  from  FirstName P;

output view __Union__298__TempOp__2;

create view __Union__298__TempOp__3 as
  select  P.lastname as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as LastName_____sep_____P____id
  from  LastName P;

output view __Union__298__TempOp__3;

create view __Union__298__TempOp__4 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person1a_____sep_____P____id
  from  Person1a P;

output view __Union__298__TempOp__4;

create view __Union__299__TempOp__0 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonStrongSingleTokenOnly_____sep_____P____id
  from  PersonStrongSingleTokenOnly P;

output view __Union__299__TempOp__0;

create view __Union__299__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonStrongSingleTokenOnlyExpanded_____sep_____P____id
  from  PersonStrongSingleTokenOnlyExpanded P;

output view __Union__299__TempOp__1;

create view __Union__300__TempOp__0 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person3r1_____sep_____P____id
  from  Person3r1 P;

output view __Union__300__TempOp__0;

create view __Union__300__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person3r2_____sep_____P____id
  from  Person3r2 P;

output view __Union__300__TempOp__1;

create view __Union__300__TempOp__2 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person4r1_____sep_____P____id
  from  Person4r1 P;

output view __Union__300__TempOp__2;

create view __Union__300__TempOp__3 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person4r2_____sep_____P____id
  from  Person4r2 P;

output view __Union__300__TempOp__3;

create view __Union__300__TempOp__4 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person2_____sep_____P____id
  from  Person2 P;

output view __Union__300__TempOp__4;

create view __Union__300__TempOp__5 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person2a_____sep_____P____id
  from  Person2a P;

output view __Union__300__TempOp__5;

create view __Union__300__TempOp__6 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person3P2_____sep_____P____id
  from  Person3P2 P;

output view __Union__300__TempOp__6;

create view __Union__300__TempOp__7 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person3P3_____sep_____P____id
  from  Person3P3 P;

output view __Union__300__TempOp__7;

create view __Union__301__TempOp__0 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person4a_____sep_____P____id
  from  Person4a P;

output view __Union__301__TempOp__0;

create view __Union__301__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person4ar1_____sep_____P____id
  from  Person4ar1 P;

output view __Union__301__TempOp__1;

create view __Union__301__TempOp__2 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as Person4ar2_____sep_____P____id
  from  Person4ar2 P;

output view __Union__301__TempOp__2;

create view __Union__302__TempOp__0 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonStrong_____sep_____P____id
  from  PersonStrong P;

output view __Union__302__TempOp__0;

create view __Union__302__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonWeak1_____sep_____P____id
  from  PersonWeak1 P;

output view __Union__302__TempOp__1;

create view __Union__304__TempOp__0 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonWeak1_____sep_____P____id
  from  PersonWeak1 P;

output view __Union__304__TempOp__0;

create view __Union__304__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as ValidPersonWeak2_____sep_____P____id
  from  ValidPersonWeak2 P;

output view __Union__304__TempOp__1;

create view __Union__306__TempOp__0 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonWeakOnly_____sep_____P____id
  from  PersonWeakOnly P;

output view __Union__306__TempOp__0;

create view __Union__306__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonStrong_____sep_____P____id
  from  PersonStrong P;

output view __Union__306__TempOp__1;

create view __Union__307__TempOp__0 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonCorrect_____sep_____P____id
  from  PersonCorrect P;

output view __Union__307__TempOp__0;

create view __Union__307__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonCorrectExpanded_____sep_____P____id
  from  PersonCorrectExpanded P;

output view __Union__307__TempOp__1;

create view __Union__310__TempOp__0 as
  select  P.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PlaceConsolidated_____sep_____P____id,
          D.__auto__id as Dates_____sep_____D____id
  from  PlaceConsolidated P,
        Dates D
  where Overlaps(D.match, P.loc);

output view __Union__310__TempOp__0;

create view __Union__310__TempOp__1 as
  select  P.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PlaceConsolidated_____sep_____P____id,
          T.__auto__id as Times_____sep_____T____id
  from  PlaceConsolidated P,
        Times T
  where Overlaps(T.match, P.loc);

output view __Union__310__TempOp__1;

create view __Union__310__TempOp__2 as
  select  P.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PlaceConsolidated_____sep_____P____id,
          T.__auto__id as PhoneNumCons_____sep_____T____id
  from  PlaceConsolidated P,
        PhoneNumCons T
  where Overlaps(T.num, P.loc);

output view __Union__310__TempOp__2;

create view __Union__310__TempOp__3 as
  select  P.loc as loc,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as WrongPlaces_____sep_____P____id
  from  WrongPlaces P;

output view __Union__310__TempOp__3;

create view __Union__312__TempOp__0 as
  select  OP.org as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          OP.__auto__id as OrgWithinUrlEmailPlace_____sep_____OP____id
  from  OrgWithinUrlEmailPlace OP;

output view __Union__312__TempOp__0;

create view __Union__312__TempOp__1 as
  select  OP.org as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          OP.__auto__id as OrgOverlapTime_____sep_____OP____id
  from  OrgOverlapTime OP;

output view __Union__312__TempOp__1;

create view __Union__315__TempOp__0 as
  select  O.org as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as ValidOrgConsolidated_____sep_____O____id
  from  ValidOrgConsolidated O;

output view __Union__315__TempOp__0;

create view __Union__315__TempOp__1 as
  select  O.org as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as FinalOrgExpanded_____sep_____O____id
  from  FinalOrgExpanded O;

output view __Union__315__TempOp__1;

create view __Union__315__TempOp__2 as
  select  O.match as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as OrgWithinNotesEmail1_____sep_____O____id
  from  OrgWithinNotesEmail1 O;

output view __Union__315__TempOp__2;

create view __Union__315__TempOp__3 as
  select  O.match as org,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          O.__auto__id as OrgWithinNotesEmail2_____sep_____O____id
  from  OrgWithinNotesEmail2 O;

output view __Union__315__TempOp__3;

create view __Union__317__TempOp__0 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as USCity_____sep_____S____id
  from  USCity S;

output view __Union__317__TempOp__0;

create view __Union__317__TempOp__1 as
  select  S.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          S.__auto__id as GermanCities_____sep_____S____id
  from  GermanCities S;

output view __Union__317__TempOp__1;

create view __Union__318__TempOp__0 as
  select  R.loc as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as FinalPlaceConsolidated_____sep_____R____id
  from  FinalPlaceConsolidated R;

output view __Union__318__TempOp__0;

create view __Union__318__TempOp__1 as
  select  R.org as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as FinalOrgConsolidatedWithoutDots_____sep_____R____id
  from  FinalOrgConsolidatedWithoutDots R;

output view __Union__318__TempOp__1;

create view __Union__318__TempOp__2 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as CitiesAll_____sep_____R____id
  from  CitiesAll R;

output view __Union__318__TempOp__2;

create view __Union__319__TempOp__0 as
  select  P1.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P1.__auto__id as PersonWithinUrlEmailPlaceOrg_____sep_____P1____id
  from  PersonWithinUrlEmailPlaceOrg P1;

output view __Union__319__TempOp__0;

create view __Union__319__TempOp__1 as
  select  P1.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P1.__auto__id as PersonOverlapsWithCities_____sep_____P1____id
  from  PersonOverlapsWithCities P1;

output view __Union__319__TempOp__1;

create view __Union__322__TempOp__0 as
  select  R.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as UrlEmailPlaceOrg_____sep_____R____id
  from  UrlEmailPlaceOrg R;

output view __Union__322__TempOp__0;

create view __Union__322__TempOp__1 as
  select  R.person as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          R.__auto__id as FinalPersonConsolidated_____sep_____R____id
  from  FinalPersonConsolidated R;

output view __Union__322__TempOp__1;

create view __Union__326__TempOp__0 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as FinalPersonConsolidated_____sep_____P____id
  from  FinalPersonConsolidated P;

output view __Union__326__TempOp__0;

create view __Union__326__TempOp__1 as
  select  P.person as person,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          P.__auto__id as PersonStrongSingleTokenNonOverlaps_____sep_____P____id
  from  PersonStrongSingleTokenNonOverlaps P
  where Not(MatchesRegex(/.{1,2}/, P.person));

output view __Union__326__TempOp__1;

