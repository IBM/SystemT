module genericModule;


create view CountryMapping as
  select  toUpperCase(T.term) as name,
          toUpperCase(T.normalForm) as code,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as countryMapping_EN_____sep_____T____id
  from  countryMapping_EN T;

output view CountryMapping;

create dictionary "GeoCountryNameDict" from table "countryMapping_EN"
with entries from term
and case insensitive;

create dictionary "GeoCountryCodeDict" from table "countryMapping_EN"
with entries from normalForm
and case insensitive;

create dictionary "GeoCountryNameInvalid"
with case insensitive
as (
  'US'
);


create view RegionMapping as
  select  toUpperCase(T.term) as name,
          toUpperCase(T.normalForm) as code,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as regionMapping_EN_____sep_____T____id
  from  regionMapping_EN T;

output view RegionMapping;

create dictionary "GeoRegionNameDict" from table "regionMapping_EN"
with entries from term
and case insensitive;

create dictionary "GeoRegionCodeDict" from table "regionMapping_EN"
with entries from normalForm
and case insensitive;

create view SiteMapping as
  select  toUpperCase(T.term) as name,
          toUpperCase(T.normalForm) as code,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          -1 as siteMapping_EN_____sep_____T____id
  from  siteMapping_EN T;

output view SiteMapping;

create dictionary "GeoSiteNameDict" from table "siteMapping_EN"
with entries from term
and case insensitive;

create dictionary "GeoSiteCodeDict" from table "siteMapping_EN"
with entries from normalForm
and case insensitive;

