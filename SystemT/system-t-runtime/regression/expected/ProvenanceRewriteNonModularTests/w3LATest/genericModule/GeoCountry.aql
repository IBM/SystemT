module genericModule;


create view Country_HQURLPath_All as
  select  GetText(G.country) as match,
          ConstructEvidence('HQURLPath', GetString(G.country)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          G.__auto__id as GeoHQ_____sep_____G____id
  from  GeoHQ G
  where Not(Equals('', GetText(G.country)));

output view Country_HQURLPath_All;

create view Country_HQURLPath as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country_HQURLPath__Temp Op;

output view Country_HQURLPath;

create view Country_Seg1_All as
  select  GetText(T.match) as match,
          ConstructEvidence(GetString('Seg1'), GetString(T.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__25__Temp_____sep_____T____id
  from  __Subquery__25__Temp T;

output view Country_Seg1_All;

create view Country_Seg1 as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country_Seg1__Temp Op;

output view Country_Seg1;

create view Country_Seg2_FirstMain_All as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__26__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__26__TempOp__1 Op);

output view Country_Seg2_FirstMain_All;

create view Country_Seg2_FirstMain as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country_Seg2_FirstMain__Temp Op;

output view Country_Seg2_FirstMain;

create view Country_Title_H1_All as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__29__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__29__TempOp__1 Op);

output view Country_Title_H1_All;

create view Country_Title_H1 as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country_Title_H1__Temp Op;

output view Country_Title_H1;

create view Country_H2_All as
  select  GetText(H.match) as match,
          ConstructEvidence(GetString('H2'), GetString(H.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          H.__auto__id as __Subquery__32__Temp_____sep_____H____id
  from  __Subquery__32__Temp H;

output view Country_H2_All;

create view Country_H2 as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country_H2__Temp Op;

output view Country_H2;

create view Country_MetaCountry_All as
  select  GetText(MC.match) as match,
          ConstructEvidence(GetString('MetaCountry'), GetString(MC.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          MC.__auto__id as Country_MetaCountry_2letters_____sep_____MC____id
  from  Country_MetaCountry_2letters MC;

output view Country_MetaCountry_All;

create view Country_MetaCountry as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country_MetaCountry__Temp Op;

output view Country_MetaCountry;

create view Country_MetaLanguage_All as
  select  GetText(ML.match) as match,
          ConstructEvidence(GetString('MetaLanguage'), GetString(ML.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          ML.__auto__id as Country_MetaLanguage_2letters_____sep_____ML____id
  from  Country_MetaLanguage_2letters ML;

output view Country_MetaLanguage_All;

create view Country_MetaLanguage as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country_MetaLanguage__Temp Op;

output view Country_MetaLanguage;

create view Country_URLPath_All as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__33__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__33__TempOp__1 Op);

output view Country_URLPath_All;

create view Country_URLPath as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country_URLPath__Temp Op;

output view Country_URLPath;

create view Country_MetaKeywords_MetaDescription_All as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__36__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__36__TempOp__1 Op);

output view Country_MetaKeywords_MetaDescription_All;

create view Country_MetaKeywords_MetaDescription as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country_MetaKeywords_MetaDescription__Temp Op;

output view Country_MetaKeywords_MetaDescription;

create view Country_URLHost_All as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__39__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__39__TempOp__1 Op);

output view Country_URLHost_All;

create view Country_URLHost as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country_URLHost__Temp Op;

output view Country_URLHost;

create view Country0_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country0___Temp Op;

output view Country0_;

create view Country0 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__41__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__41__TempOp__1 Op);

output view Country0;

create view Country1_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country1___Temp Op;

output view Country1_;

create view Country1 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__42__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__42__TempOp__1 Op);

output view Country1;

create view Country2_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country2___Temp Op;

output view Country2_;

create view Country2 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__43__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__43__TempOp__1 Op);

output view Country2;

create view Country3_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country3___Temp Op;

output view Country3_;

create view Country3 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__44__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__44__TempOp__1 Op);

output view Country3;

create view Country4_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country4___Temp Op;

output view Country4_;

create view Country4 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__45__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__45__TempOp__1 Op);

output view Country4;

create view Country5_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country5___Temp Op;

output view Country5_;

create view Country5 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__46__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__46__TempOp__1 Op);

output view Country5;

create view Country6_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country6___Temp Op;

output view Country6_;

create view Country6 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__47__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__47__TempOp__1 Op);

output view Country6;

create view Country7_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country7___Temp Op;

output view Country7_;

create view Country7 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__48__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__48__TempOp__1 Op);

output view Country7;

create view Country8_ as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__Country8___Temp Op;

output view Country8_;

create view Country8 as
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__49__TempOp__0 Op)
  union all
  (select  Op.match as match,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__49__TempOp__1 Op);

output view Country8;

create dictionary "IgnoreCADict"
with case insensitive
as (
  'CA'
);


create view Country8Invalid as
  select  C.match as match,
          C.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as Country8_____sep_____C____id,
          U.__auto__id as PageURL_____sep_____U____id
  from  Country8 C,
        PageURL U
  where ContainsRegex(/\/siteserv\//, U.url)
     and MatchesDict('IgnoreCADict', C.match);

output view Country8Invalid;

create view Country8Valid as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__50__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__50__TempOp__1 Op,
        __Minus__50__Temp __t
  where Equals(Op.match, __t.match)
     and Equals(Op.evidence, __t.evidence);

output view Country8Valid;

create view CountryFinal as
  select  Op.match as match,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__CountryFinal__Temp Op;

output view CountryFinal;

create view CountryWithCode as
  select  C.match as match,
          M.code as code,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as CountryFinal_____sep_____C____id,
          M.__auto__id as CountryMapping_____sep_____M____id
  from  CountryFinal C,
        CountryMapping M
  where Equals(GetText(C.match), GetText(M.name));

output view CountryWithCode;

create view CountryNoCode as
  select  Op.match as match,
          AutoID() as __auto__id,
          Op.__auto__id as __Minus__51__TempOp__1_____sep_____Op____id,
          'STMT_TYPE_MINUS' as __stmt__type
  from  __Minus__51__TempOp__1 Op,
        __Minus__51__Temp __t
  where Equals(Op.match, __t.match);

output view CountryNoCode;

create view CountryNormalized as
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__52__TempOp__0 Op)
  union all
  (select  Op.match as match,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__52__TempOp__1 Op);

output view CountryNormalized;

create view CountryEvidenceAll as
  select  Op.id as id,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__CountryEvidenceAll__Temp Op;

output view CountryEvidenceAll;

create view CountryEvidence as
  select  Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__CountryEvidence__Temp Op;

output view CountryEvidence;

create view CountryAgg as
  select  Op.country as country,
          AutoID() as __auto__id
  from  __Base__CountryAgg__Temp Op;

output view CountryAgg;

create dictionary "InvalidCountryFromURLHostDict"
with case insensitive
as (
  'URLHost:DE'
);


create view CountryWithEvidence as
  select  Case(MatchesDict('InvalidCountryFromURLHostDict', E.evidence), 'N/A', toUpperCase(C.country)) as country,
          E.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as CountryAgg_____sep_____C____id,
          E.__auto__id as CountryEvidence_____sep_____E____id
  from  CountryAgg C,
        CountryEvidence E;

output view CountryWithEvidence;

create view CountryMissing as
  select  Op.country as country,
          Op.evidence as evidence,
          AutoID() as __auto__id
  from  __Base__CountryMissing__Temp Op;

output view CountryMissing;

create view GeoCountry as
  (select  Op.country as country,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__53__TempOp__0 Op)
  union all
  (select  Op.country as country,
            Op.evidence as evidence,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__53__TempOp__1 Op);

output view GeoCountry;

create view __Base__Country0___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Country_Seg1 R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Country_HQURLPath Country_HQURLPath
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Country0___Temp;

create view __Base__Country1___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Country_Seg2_FirstMain R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Country0 Country0
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Country1___Temp;

create view __Base__Country2___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Country_Title_H1 R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Country1 Country1
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Country2___Temp;

create view __Base__Country3___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Country_H2 R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Country2 Country2
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Country3___Temp;

create view __Base__Country4___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Country_MetaCountry R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Country3 Country3
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Country4___Temp;

create view __Base__Country5___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Country_MetaLanguage R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Country4 Country4
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Country5___Temp;

create view __Base__Country6___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Country_URLPath R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Country5 Country5
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Country6___Temp;

create view __Base__Country7___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Country_MetaKeywords_MetaDescription R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Country6 Country6
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Country7___Temp;

create view __Base__Country8___Temp as
  select  R2.match as match,
          R2.evidence as evidence
  from  Country_URLHost R2,

        (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
        from  
          (select  Count(*) as cnt
          from  Country7 Country7
          ) S
        ) R1
  where Equals(R1.xsists, 0);

output view __Base__Country8___Temp;

create view __Base__CountryAgg__Temp as
  select  ListJoin(C.match, ';') as country
  from  
    (select  C.id as id,
            List(C.match) as match
    from  
      (select  1 as id,
              GetText(C.match) as match
      from  CountryNormalized C
      group by GetText(C.match)
      ) C
    group by C.id
    ) C;

output view __Base__CountryAgg__Temp;

create view __Base__CountryEvidenceAll__Temp as
  select  C.id as id,
          GetText(C.evidence) as evidence
  from  
    ((select  1 as id,
              C.evidence as evidence
      from  Country_HQURLPath C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Country_Seg1 C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Country_Seg2_FirstMain C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Country_Title_H1 C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Country_H2 C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Country_MetaCountry C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Country_MetaLanguage C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Country_URLPath C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Country_MetaKeywords_MetaDescription C)
    union all
    (select  1 as id,
              C.evidence as evidence
      from  Country_URLHost C)
    ) C
  group by C.id, GetText(C.evidence)
  order by GetText(C.evidence);

output view __Base__CountryEvidenceAll__Temp;

create view __Base__CountryEvidence__Temp as
  select  ListJoin(C.evidence, ';') as evidence
  from  
    (select  C.id as id,
            List(C.evidence) as evidence
    from  CountryEvidenceAll C
    group by C.id
    ) C;

output view __Base__CountryEvidence__Temp;

create view __Base__CountryFinal__Temp as
  select  GetText(C.match) as match,
          GetText(C.evidence) as evidence
  from  
    (select  toUpperCase(C.match) as match,
            C.evidence as evidence
    from  Country8Valid C
    ) C
  group by GetText(C.match), GetText(C.evidence);

output view __Base__CountryFinal__Temp;

create view __Base__CountryMissing__Temp as
  select  'N/A' as country,
          '' as evidence
  from  
    (select  Case(GreaterThan(S.cnt, 0), 1, 0) as xsists
    from  
      (select  Count(*) as cnt
      from  CountryWithEvidence CountryWithEvidence
      ) S
    ) R1
  where Equals(R1.xsists, 0);

output view __Base__CountryMissing__Temp;

create view __Base__Country_H2__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Country_H2_All R,

        (select  Count(*) as cnt
        from  Country_H2_All Country_H2_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Country_H2__Temp;

create view __Base__Country_HQURLPath__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Country_HQURLPath_All R,

        (select  Count(*) as cnt
        from  Country_HQURLPath_All Country_HQURLPath_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Country_HQURLPath__Temp;

create view __Base__Country_MetaCountry__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Country_MetaCountry_All R,

        (select  Count(*) as cnt
        from  Country_MetaCountry_All Country_MetaCountry_All
        ) C
  where Not(GreaterThan(C.cnt, 10));

output view __Base__Country_MetaCountry__Temp;

create view __Base__Country_MetaKeywords_MetaDescription__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Country_MetaKeywords_MetaDescription_All R,

        (select  Count(*) as cnt
        from  Country_MetaKeywords_MetaDescription_All Country_MetaKeywords_MetaDescription_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Country_MetaKeywords_MetaDescription__Temp;

create view __Base__Country_MetaLanguage__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Country_MetaLanguage_All R,

        (select  Count(*) as cnt
        from  Country_MetaLanguage_All Country_MetaLanguage_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Country_MetaLanguage__Temp;

create view __Base__Country_Seg1__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Country_Seg1_All R,

        (select  Count(*) as cnt
        from  Country_Seg1_All Country_Seg1_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Country_Seg1__Temp;

create view __Base__Country_Seg2_FirstMain__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Country_Seg2_FirstMain_All R,

        (select  Count(*) as cnt
        from  Country_Seg2_FirstMain_All Country_Seg2_FirstMain_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Country_Seg2_FirstMain__Temp;

create view __Base__Country_Title_H1__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Country_Title_H1_All R,

        (select  Count(*) as cnt
        from  Country_Title_H1_All Country_Title_H1_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Country_Title_H1__Temp;

create view __Base__Country_URLHost__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Country_URLHost_All R,

        (select  Count(*) as cnt
        from  Country_URLHost_All Country_URLHost_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Country_URLHost__Temp;

create view __Base__Country_URLPath__Temp as
  select  R.match as match,
          R.evidence as evidence
  from  Country_URLPath_All R,

        (select  Count(*) as cnt
        from  Country_URLPath_All Country_URLPath_All
        ) C
  where Not(GreaterThan(C.cnt, 6));

output view __Base__Country_URLPath__Temp;

create view __Minus__50__Temp as
  select  __t.match as match,
          __t.evidence as evidence
  from  
    ((select  Op.match as match,
              Op.evidence as evidence
      from  __Minus__50__TempOp__1 Op)
    minus
    (select  Op.match as match,
              Op.evidence as evidence
      from  __Minus__50__TempOp__2 Op)
    ) __t
  group by __t.match, __t.evidence;

output view __Minus__50__Temp;

create view __Minus__50__TempOp__1 as
  select  C.match as match,
          C.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as Country8_____sep_____C____id
  from  Country8 C;

output view __Minus__50__TempOp__1;

create view __Minus__50__TempOp__2 as
  select  C.match as match,
          C.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as Country8Invalid_____sep_____C____id
  from  Country8Invalid C;

output view __Minus__50__TempOp__2;

create view __Minus__51__Temp as
  select  __t.match as match
  from  
    ((select  Op.match as match
      from  __Minus__51__TempOp__1 Op)
    minus
    (select  Op.match as match
      from  __Minus__51__TempOp__2 Op)
    ) __t
  group by __t.match;

output view __Minus__51__Temp;

create view __Minus__51__TempOp__1 as
  select  C.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as CountryFinal_____sep_____C____id
  from  CountryFinal C;

output view __Minus__51__TempOp__1;

create view __Minus__51__TempOp__2 as
  select  C.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as CountryWithCode_____sep_____C____id
  from  CountryWithCode C;

output view __Minus__51__TempOp__2;

create view __Subquery__25__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    T.__auto__id as Seg1_____sep_____T____id,
    dictionary 'GeoCountryNameDict'
    on T.seg as match
  from Seg1 T
  having Not(MatchesDict('GeoCountryNameInvalid', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__25__Temp;

create view __Subquery__27__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    T.__auto__id as Seg2_____sep_____T____id,
    dictionary 'GeoCountryNameDict'
    on T.seg as match
  from Seg2 T
  having Not(MatchesDict('GeoCountryNameInvalid', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__27__Temp;

create view __Subquery__28__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    FM.__auto__id as FirstMainFinal_____sep_____FM____id,
    dictionary 'GeoCountryNameDict'
    on FM.content as match
  from FirstMainFinal FM
  having Not(MatchesDict('GeoCountryNameInvalid', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__28__Temp;

create view __Subquery__30__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    T.__auto__id as TitleFinal_____sep_____T____id,
    dictionary 'GeoCountryNameDict'
    on T.content as match
  from TitleFinal T
  having Not(MatchesDict('GeoCountryNameInvalid', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__30__Temp;

create view __Subquery__31__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    H.__auto__id as H1_____sep_____H____id,
    dictionary 'GeoCountryNameDict'
    on H.match as match
  from H1 H
  having Not(MatchesDict('GeoCountryNameInvalid', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__31__Temp;

create view __Subquery__32__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    H.__auto__id as H2_____sep_____H____id,
    dictionary 'GeoCountryNameDict'
    on H.match as match
  from H2 H
  having Not(MatchesDict('GeoCountryNameInvalid', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__32__Temp;

create view __Subquery__34__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    dictionary 'GeoCountryNameDict'
    on U.actualPath as match
  from PageURL U
  having Not(MatchesDict('GeoCountryNameInvalid', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__34__Temp;

create view __Subquery__35__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    P.__auto__id as URLPathFirst3Seg_____sep_____P____id,
    dictionary 'GeoCountryCodeDict'
    on P.seg as match
  from URLPathFirst3Seg P
  consolidate on match using 'ContainedWithin';

output view __Subquery__35__Temp;

create view __Subquery__37__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    D.__auto__id as MetaDescription_____sep_____D____id,
    dictionary 'GeoCountryNameDict'
    on D.content as match
  from MetaDescription D
  having Not(MatchesDict('GeoCountryNameInvalid', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__37__Temp;

create view __Subquery__38__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    K.__auto__id as MetaKeywords_____sep_____K____id,
    dictionary 'GeoCountryNameDict'
    on K.content as match
  from MetaKeywords K
  having Not(MatchesDict('GeoCountryNameInvalid', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__38__Temp;

create view __Subquery__40__Temp as
  extract AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_DICT' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    dictionary 'GeoCountryNameDict'
    on U.host as match
  from PageURL U
  having Not(MatchesDict('GeoCountryNameInvalid', match))
  consolidate on match using 'ContainedWithin';

output view __Subquery__40__Temp;

create view __Union__26__TempOp__0 as
  select  GetText(T.match) as match,
          ConstructEvidence(GetString('Seg2'), GetString(T.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__27__Temp_____sep_____T____id
  from  __Subquery__27__Temp T;

output view __Union__26__TempOp__0;

create view __Union__26__TempOp__1 as
  select  GetText(FM.match) as match,
          ConstructEvidence(GetString('FirstMainHead'), GetString(FM.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          FM.__auto__id as __Subquery__28__Temp_____sep_____FM____id
  from  __Subquery__28__Temp FM;

output view __Union__26__TempOp__1;

create view __Union__29__TempOp__0 as
  select  GetText(T.match) as match,
          ConstructEvidence(GetString('Title'), GetString(T.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__30__Temp_____sep_____T____id
  from  __Subquery__30__Temp T;

output view __Union__29__TempOp__0;

create view __Union__29__TempOp__1 as
  select  GetText(H.match) as match,
          ConstructEvidence(GetString('H1'), GetString(H.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          H.__auto__id as __Subquery__31__Temp_____sep_____H____id
  from  __Subquery__31__Temp H;

output view __Union__29__TempOp__1;

create view __Union__33__TempOp__0 as
  select  GetText(U.match) as match,
          ConstructEvidence(GetString('URLPath'), GetString(U.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          U.__auto__id as __Subquery__34__Temp_____sep_____U____id
  from  __Subquery__34__Temp U;

output view __Union__33__TempOp__0;

create view __Union__33__TempOp__1 as
  select  GetText(U.match) as match,
          ConstructEvidence(GetString('URLPath'), GetString(U.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          U.__auto__id as __Subquery__35__Temp_____sep_____U____id
  from  __Subquery__35__Temp U;

output view __Union__33__TempOp__1;

create view __Union__36__TempOp__0 as
  select  GetText(D.match) as match,
          ConstructEvidence(GetString('MetaDescription'), GetString(D.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          D.__auto__id as __Subquery__37__Temp_____sep_____D____id
  from  __Subquery__37__Temp D;

output view __Union__36__TempOp__0;

create view __Union__36__TempOp__1 as
  select  GetText(K.match) as match,
          ConstructEvidence(GetString('MetaKeywords'), GetString(K.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          K.__auto__id as __Subquery__38__Temp_____sep_____K____id
  from  __Subquery__38__Temp K;

output view __Union__36__TempOp__1;

create view __Union__39__TempOp__0 as
  select  GetText(U.match) as match,
          ConstructEvidence(GetString('URLHost'), GetString(U.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          U.__auto__id as __Subquery__40__Temp_____sep_____U____id
  from  __Subquery__40__Temp U;

output view __Union__39__TempOp__0;

create view __Union__39__TempOp__1 as
  select  GetText(U.match) as match,
          ConstructEvidence(GetString('URLHost'), GetString(U.match)) as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          U.__auto__id as Country_URLHost_2letters_____sep_____U____id
  from  Country_URLHost_2letters U;

output view __Union__39__TempOp__1;

create view __Union__41__TempOp__0 as
  select  Country_HQURLPath.match as match,
          Country_HQURLPath.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country_HQURLPath.__auto__id as Country_HQURLPath_____sep_____Country_HQURLPath____id
  from  Country_HQURLPath Country_HQURLPath;

output view __Union__41__TempOp__0;

create view __Union__41__TempOp__1 as
  select  Country0_.match as match,
          Country0_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country0_.__auto__id as Country0______sep_____Country0_____id
  from  Country0_ Country0_;

output view __Union__41__TempOp__1;

create view __Union__42__TempOp__0 as
  select  Country0.match as match,
          Country0.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country0.__auto__id as Country0_____sep_____Country0____id
  from  Country0 Country0;

output view __Union__42__TempOp__0;

create view __Union__42__TempOp__1 as
  select  Country1_.match as match,
          Country1_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country1_.__auto__id as Country1______sep_____Country1_____id
  from  Country1_ Country1_;

output view __Union__42__TempOp__1;

create view __Union__43__TempOp__0 as
  select  Country1.match as match,
          Country1.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country1.__auto__id as Country1_____sep_____Country1____id
  from  Country1 Country1;

output view __Union__43__TempOp__0;

create view __Union__43__TempOp__1 as
  select  Country2_.match as match,
          Country2_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country2_.__auto__id as Country2______sep_____Country2_____id
  from  Country2_ Country2_;

output view __Union__43__TempOp__1;

create view __Union__44__TempOp__0 as
  select  Country2.match as match,
          Country2.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country2.__auto__id as Country2_____sep_____Country2____id
  from  Country2 Country2;

output view __Union__44__TempOp__0;

create view __Union__44__TempOp__1 as
  select  Country3_.match as match,
          Country3_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country3_.__auto__id as Country3______sep_____Country3_____id
  from  Country3_ Country3_;

output view __Union__44__TempOp__1;

create view __Union__45__TempOp__0 as
  select  Country3.match as match,
          Country3.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country3.__auto__id as Country3_____sep_____Country3____id
  from  Country3 Country3;

output view __Union__45__TempOp__0;

create view __Union__45__TempOp__1 as
  select  Country4_.match as match,
          Country4_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country4_.__auto__id as Country4______sep_____Country4_____id
  from  Country4_ Country4_;

output view __Union__45__TempOp__1;

create view __Union__46__TempOp__0 as
  select  Country4.match as match,
          Country4.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country4.__auto__id as Country4_____sep_____Country4____id
  from  Country4 Country4;

output view __Union__46__TempOp__0;

create view __Union__46__TempOp__1 as
  select  Country5_.match as match,
          Country5_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country5_.__auto__id as Country5______sep_____Country5_____id
  from  Country5_ Country5_;

output view __Union__46__TempOp__1;

create view __Union__47__TempOp__0 as
  select  Country5.match as match,
          Country5.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country5.__auto__id as Country5_____sep_____Country5____id
  from  Country5 Country5;

output view __Union__47__TempOp__0;

create view __Union__47__TempOp__1 as
  select  Country6_.match as match,
          Country6_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country6_.__auto__id as Country6______sep_____Country6_____id
  from  Country6_ Country6_;

output view __Union__47__TempOp__1;

create view __Union__48__TempOp__0 as
  select  Country6.match as match,
          Country6.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country6.__auto__id as Country6_____sep_____Country6____id
  from  Country6 Country6;

output view __Union__48__TempOp__0;

create view __Union__48__TempOp__1 as
  select  Country7_.match as match,
          Country7_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country7_.__auto__id as Country7______sep_____Country7_____id
  from  Country7_ Country7_;

output view __Union__48__TempOp__1;

create view __Union__49__TempOp__0 as
  select  Country7.match as match,
          Country7.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country7.__auto__id as Country7_____sep_____Country7____id
  from  Country7 Country7;

output view __Union__49__TempOp__0;

create view __Union__49__TempOp__1 as
  select  Country8_.match as match,
          Country8_.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          Country8_.__auto__id as Country8______sep_____Country8_____id
  from  Country8_ Country8_;

output view __Union__49__TempOp__1;

create view __Union__52__TempOp__0 as
  select  C.code as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as CountryWithCode_____sep_____C____id
  from  CountryWithCode C;

output view __Union__52__TempOp__0;

create view __Union__52__TempOp__1 as
  select  C.match as match,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          C.__auto__id as CountryNoCode_____sep_____C____id
  from  CountryNoCode C;

output view __Union__52__TempOp__1;

create view __Union__53__TempOp__0 as
  select  CountryWithEvidence.country as country,
          CountryWithEvidence.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          CountryWithEvidence.__auto__id as CountryWithEvidence_____sep_____CountryWithEvidence____id
  from  CountryWithEvidence CountryWithEvidence;

output view __Union__53__TempOp__0;

create view __Union__53__TempOp__1 as
  select  CountryMissing.country as country,
          CountryMissing.evidence as evidence,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          CountryMissing.__auto__id as CountryMissing_____sep_____CountryMissing____id
  from  CountryMissing CountryMissing;

output view __Union__53__TempOp__1;

