module genericModule;


create function getNormalName(
  url Text  ,host Text  ,path Text  ,L ScalarList)
return ScalarList like L
external_name 'LocalAnalysisUDFs.jar:com.ibm.gumshoe.la.udf.URLHomeUDF!getNormalName'
language java
deterministic
return null on null input

;


create view UrlNewsPattern1 as
  select  tmp.date as date,
          tmp.name as name,
          'news' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          tmp.__auto__id as __Subquery__463__Temp_____sep_____tmp____id
  from  __Subquery__463__Temp tmp;

output view UrlNewsPattern1;

create view UrlNewsPattern1a as
  select  tmp.date as date,
          tmp.name as name,
          'news' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          tmp.__auto__id as __Subquery__464__Temp_____sep_____tmp____id
  from  __Subquery__464__Temp tmp;

output view UrlNewsPattern1a;



create view UrlNewsPattern1c as
  select  T.date as date,
          T.name as name,
          'news' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__465__Temp_____sep_____T____id
  from  __Subquery__465__Temp T;

output view UrlNewsPattern1c;

create view UrlNewsPattern2 as
  select  StringConcat3(GetText(T.date1), GetText(T.date2), GetText(T.date4)) as date,
          T.name as name,
          'news' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__466__Temp_____sep_____T____id
  from  __Subquery__466__Temp T;

output view UrlNewsPattern2;

create view UrlNewsPattern3 as
  select  StringConcat3(GetText(T.date1), GetText(T.date2), GetText(T.zero)) as date,
          T.name as name,
          'news' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__467__Temp_____sep_____T____id
  from  __Subquery__467__Temp T;

output view UrlNewsPattern3;

create view UrlNewsPattern4 as
  select  StringConcat3(GetText(T.date1), GetText(T.date2), GetText(T.date3)) as date,
          T.name as name,
          'news' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__468__Temp_____sep_____T____id
  from  __Subquery__468__Temp T;

output view UrlNewsPattern4;

create view UrlNewsPattern4a as
  select  StringConcat3(GetText(T.ty), GetText(T.date1), GetText(T.date2)) as date,
          T.name as name,
          'news' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__469__Temp_____sep_____T____id
  from  __Subquery__469__Temp T;

output view UrlNewsPattern4a;

create view UrlNewsPattern4b as
  select  StringConcat3(GetText(T.date1), GetText(T.date2), GetText(T.zero)) as date,
          T.name as name,
          'news' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__470__Temp_____sep_____T____id
  from  __Subquery__470__Temp T;

output view UrlNewsPattern4b;

create view UrlNewsPatternCatchAll as
  select  T.name as name,
          'news' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__471__Temp_____sep_____T____id
  from  __Subquery__471__Temp T;

output view UrlNewsPatternCatchAll;

create view UrlPrPattern1 as
  select  T.name as name,
          'pr' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__472__Temp_____sep_____T____id
  from  __Subquery__472__Temp T;

output view UrlPrPattern1;

create view UrlPrPattern2 as
  select  '' as name,
          'pr' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__473__Temp_____sep_____T____id
  from  __Subquery__473__Temp T;

output view UrlPrPattern2;

create view Urlw3kiPattern as
  select  T.name as name,
          'w3ki;HQ' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__474__Temp_____sep_____T____id
  from  __Subquery__474__Temp T;

output view Urlw3kiPattern;



create view UrlBluepediaLinksPattern as
  select  T.name as name,
          'bp_special;links' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__475__Temp_____sep_____T____id
  from  __Subquery__475__Temp T;

output view UrlBluepediaLinksPattern;

create view UrlBluepediaCategoryPattern as
  select  T.name as name,
          'bp_special;category' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__476__Temp_____sep_____T____id
  from  __Subquery__476__Temp T;

output view UrlBluepediaCategoryPattern;

create view UrlBluepediaLinksandCategory as
  (select  Op.name as name,
            Op.label as label,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__477__TempOp__0 Op)
  union all
  (select  Op.name as name,
            Op.label as label,
            AutoID() as __auto__id,
            'STMT_TYPE_UNION' as __stmt__type,
            Op.__auto__id as __union_op__id
    from  __Union__477__TempOp__1 Op);

output view UrlBluepediaLinksandCategory;







create view UrlPathEndsWithWSS as
  select  U.proto as proto,
          U.host as host,
          U.port as port,
          U.actualPath as actualPath,
          U.query as query,
          U.fragment as fragment,
          U.url as url,
          U.urlid as urlid,
          U.page as page,
          U.anchortext as anchortext,
          U.normUrl as normUrl,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          U.__auto__id as PageURL_____sep_____U____id
  from  PageURL U
  where ContainsRegex(/login.wss\z/, U.query);

output view UrlPathEndsWithWSS;

create view UrlLoginwssCode as
  select  T.name as name,
          'backend_login_code' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__478__Temp_____sep_____T____id
  from  __Subquery__478__Temp T;

output view UrlLoginwssCode;

create view UrlHostName as
  select  T.name as name,
          'host;HQ' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as __Subquery__479__Temp_____sep_____T____id
  from  __Subquery__479__Temp T;

output view UrlHostName;

















create view __Subquery__463__Temp as
  extract U.actualPath as path,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /\/(w3.{0,3}_news).nsf\/.*\/(?:(\d{1,8})_)?([\w\d\.-]+)\./
    with flags 'DOTALL'
    on U.url
    return group 0 as match
       and group 2 as date
       and group 3 as name
  from PageURL U
  having containsText(path, match);

output view __Subquery__463__Temp;

create view __Subquery__464__Temp as
  extract U.actualPath as path,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /\/(news)\/(\d{1,8})_(\w+)\./
    with flags 'DOTALL'
    on U.url
    return group 0 as match
       and group 2 as date
       and group 3 as name
  from PageURL U
  having containsText(path, match);

output view __Subquery__464__Temp;

create view __Subquery__465__Temp as
  extract U.actualPath as path,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /\/([^\/]+)\/(news)\/.*\/(\d{8})(?:_\d+)?\./
    with flags 'DOTALL'
    on U.url
    return group 0 as match
       and group 3 as date
       and group 1 as name
  from PageURL U
  having containsText(path, match);

output view __Subquery__465__Temp;

create view __Subquery__466__Temp as
  extract U.actualPath as path,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /\/(news)\/.+\/(\d{4})\/(\d{2})\/(\w+\D)_(\d{2})_(\d{2})_/
    with flags 'DOTALL'
    on U.url
    return group 0 as match
       and group 2 as date1
       and group 3 as date2
       and group 5 as date3
       and group 6 as date4
       and group 4 as name
  from PageURL U
  having containsText(path, match);

output view __Subquery__466__Temp;

create view __Subquery__467__Temp as
  extract U.actualPath as path,
    '00' as zero,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /\/(news)\/.+\/(\d{4})\/(\d{2})\/(\w+\D)\./
    with flags 'DOTALL'
    on U.url
    return group 0 as match
       and group 2 as date1
       and group 3 as date2
       and group 4 as name
  from PageURL U
  having containsText(path, match);

output view __Subquery__467__Temp;

create view __Subquery__468__Temp as
  extract U.actualPath as path,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /\/(stories)\/(\d{4})\/(\d{2})_(\d{2})[_\d]*_([\w\d\.-]+)\./
    with flags 'DOTALL'
    on U.url
    return group 0 as match
       and group 2 as date1
       and group 3 as date2
       and group 4 as date3
       and group 5 as name
  from PageURL U
  having containsText(path, match);

output view __Subquery__468__Temp;

create view __Subquery__469__Temp as
  extract U.actualPath as path,
    '20' as ty,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /\/(stories)\/(\d{2})\/(\d{4})_([\w\d\.-]+)\./
    with flags 'DOTALL'
    on U.url
    return group 0 as match
       and group 2 as date1
       and group 3 as date2
       and group 4 as name
  from PageURL U
  having containsText(path, match);

output view __Subquery__469__Temp;

create view __Subquery__470__Temp as
  extract U.actualPath as path,
    '00' as zero,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /\/(top_stories)\/(\d{4})\/(\d{2})\/([\w\d\.-]+)\./
    with flags 'DOTALL'
    on U.url
    return group 0 as match
       and group 2 as date1
       and group 3 as date2
       and group 4 as name
  from PageURL U
  having containsText(path, match);

output view __Subquery__470__Temp;

create view __Subquery__471__Temp as
  extract U.actualPath as path,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /\/([^\/]+)\/(news)\//
    with flags 'DOTALL'
    on U.url
    return group 0 as match
       and group 1 as name
  from PageURL U
  having containsText(path, match);

output view __Subquery__471__Temp;

create view __Subquery__472__Temp as
  extract U.actualPath as path,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /\/pr(?:_.\w+)?\.nsf\/pages\/(.*)\.html/
    with flags 'DOTALL'
    on U.url
    return group 1 as name
  from PageURL U
  having containsText(path, name);

output view __Subquery__472__Temp;

create view __Subquery__473__Temp as
  extract U.actualPath as path,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /\/press\/..\/..\/(?:pressrelease|presskit)\/(.*)\.wss/
    with flags 'DOTALL'
    on U.url
    return group 0 as match
  from PageURL U
  having containsText(path, match);

output view __Subquery__473__Temp;

create view __Subquery__474__Temp as
  extract U.actualPath as path,
    U.host as host,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /\A\/w3ki\/display\/(\w+)\/\z/
    with flags 'DOTALL'
    on U.url
    return group 1 as name
  from PageURL U
  having Equals('w3.webahead.ibm.com', GetText(host))
     and containsText(path, name);

output view __Subquery__474__Temp;

create view __Subquery__475__Temp as
  extract U.actualPath as path,
    U.host as host,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /Special:Whatlinkshere\/(\w+)|Spezial:Verweisliste(\w+)/
    with flags 'DOTALL'
    on U.url
    return group 1 as name
  from PageURL U
  having MatchesRegex(/w3.\.ibm\.com\/bluepedia/, host)
     and containsText(path, name);

output view __Subquery__475__Temp;

create view __Subquery__476__Temp as
  extract U.actualPath as path,
    U.host as host,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /Category:(\w+)/
    with flags 'DOTALL'
    on U.url
    return group 1 as name
  from PageURL U
  having MatchesRegex(/w3.\.ibm\.com\/bluepedia/, host)
     and containsText(path, name);

output view __Subquery__476__Temp;

create view __Subquery__478__Temp as
  extract U.query as query,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as UrlPathEndsWithWSS_____sep_____U____id,
    regex /code=([^&]+)$/
    with flags 'DOTALL'
    on U.url
    return group 1 as name
  from UrlPathEndsWithWSS U
  having NotNull(query)
     and Not(Equals('', GetText(query)))
     and containsText(query, name);

output view __Subquery__478__Temp;

create view __Subquery__479__Temp as
  extract U.host as host,
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    U.__auto__id as PageURL_____sep_____U____id,
    regex /^\w+[:\/\.]+([^\/]+)[\.\/]/
    with flags 'DOTALL'
    on U.url
    return group 1 as name
  from PageURL U
  having NotNull(host)
     and Not(Equals('', GetText(host)))
     and containsText(host, name);

output view __Subquery__479__Temp;

create view __Union__477__TempOp__0 as
  select  T.name as name,
          'bp_special;links' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as UrlBluepediaLinksPattern_____sep_____T____id
  from  UrlBluepediaLinksPattern T;

output view __Union__477__TempOp__0;

create view __Union__477__TempOp__1 as
  select  T.name as name,
          'bp_special;category' as label,
          AutoID() as __auto__id,
          'STMT_TYPE_SELECT' as __stmt__type,
          T.__auto__id as UrlBluepediaCategoryPattern_____sep_____T____id
  from  UrlBluepediaCategoryPattern T;

output view __Union__477__TempOp__1;

