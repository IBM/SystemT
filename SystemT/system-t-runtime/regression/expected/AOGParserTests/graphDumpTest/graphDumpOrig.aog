$Document = DocScan(
  (
    "text" => "Text"
  )
);
CreateDict(
    "name" => "FilterOrgDict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "FilterPersonDict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "FilterPhoneNum",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "HighwayDict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "InitialDict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "OrgConjDict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "OrgPrepDict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "PhoneVariants",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "StrongPhoneVariantDictionary",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "TheDict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/CITY.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/COUNTRY.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/GENERALCITY.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/PLACE_CLUES_OF.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/PLACE_CLUES_P.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/PLACE_CLUES_P_STRONG.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/Statelist.abbrev.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/Statelist.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/abbreviations.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/continents.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/filterOrgGerman.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/filterPersonGerman.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/germanFamilyNamesBluepages.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/germanFirstNames.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/germanFirstNamesBluepages.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/germanLastNames.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/germancities.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/industry_types_prefix.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/industry_types_retained.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/names.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/nationalities.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/organization_full_case.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/organization_full_nocase.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/organization_suffixes.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/secondaryUnit.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/streetSuffixes.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/streetSuffixesForPerson.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/streetSuffixesWeak.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/strictNickNames.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/strictfirst.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

CreateDict(
    "name" => "dictionaries/lotus/strictlast.dict",
    "language" => "de,es,en,fr,it,x_unspecified",
    "case" => "insensitive",
    "isExternal" => "false",
    "lemma_match" => "false"
);

$_{"CapsOrg❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b\p{Lu}\p{M}*[[\p{Ll}\p{Lo}]\p{M}*\&\.'\-\,]+\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"CapsPerson❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b\p{Lu}\p{M}*(\p{L}\p{M}*){0,10}(['-][\p{Lu}\p{M}*])?(\p{L}\p{M}*){1,10}\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"CapsPlace❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b\p{Upper}[\p{Lower}\&\.-\/]{1,20}\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"Continents❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_continents_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"Country❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_COUNTRY_dict_WITH_Exact_OVER_Document_text
  )
);

$_{"DotCom❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/(?<!\.)\b[\w\&\-]+\.com\b(?!\/)/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"Email1❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b((?i)([_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.(([0-9]{1,3})|([a-zA-Z]{2,3})|(aero|coop|info|museum|name))))\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"Email2_a❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b((\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*[\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}]{1,20}\s*[\/]\s*)((\p{Lu}\p{M}*(\p{L}\p{M}*){1,20}\s*){1,2}[\/]\s*){1,2}(\p{Lu}\p{M}*){2,20}(@(\p{L}\p{M}*){2,20})?)(?!\/)\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"Email2_b❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b((\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,10}(['-]\p{L}\p{M}*)?(\p{L}\p{M}*){1,10}\s+)(\p{Lu}\p{M}*\s+)?(\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}(['-]\p{L}\p{M}*(\p{L}\p{M}*){1,8})?\w{0,2}\s*[\/]\s*)((\p{Lu}\p{M}*(\p{L}\p{M}*){1,20}\s*){1,2}[\/]\s*){1,2}(\p{Lu}\p{M}*){2,20}(@(\p{L}\p{M}*){1,20})?)(?!\/)\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"GermanCities❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_germancities_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"GermanStreetAddress1❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b(Am\s+)?\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}[ \t]*(-(\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}-){1,2})?[ \t]*([Aa]n [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]�mme|[Gg]asse|[Gg]aerten|[Gg]�rten|[Hh]alde|[Hh]�fe|[Hh]of|[Hh]oefe|[Ll]andstra�e|[Ll]andstrasse|[Mm]�rkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]l�tze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]tra�e|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)\s*,?\s*([[1-9]\p{L}\p{M}*\-\,])*\d([\d\p{L}\p{M}*\/\-\,])*/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"GermanStreetAddress2❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b([Aa]llee|[Bb]erg|[Cc]haussee|[Dd]amm|[Dd]�mme|[Gg]asse|[Gg]aerten|[Gg]�rten|[Hh]alde|[Hh]�fe|[Hh]of|[Hh]oefe|[Ll]andstra�e|[Ll]andstrasse|[Mm]�rkte|[Mm]arkt|[Mm]aerkte|[Pp]fad|[Pp]latz|[Pp]l�tze|[Pp]laetze|[Rr]ing|[Ss]teig|[Ss]tr\.|[Ss]tra�e|[Ss]trasse|[Uu]fer|[Ww]eg|[Zz]eile)[ \t]+([Aa]n [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}\s*,?\s*([[1-9]\p{L}\p{M}*\-\,]*\d[\d\p{L}\p{M}*\/\-\,]*)/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"GermanStreetAddress3❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/(\b\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}[ \t]*(-(\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){0,20}-){1,2})?[ \t]*)?(An [dD]er|[Aa]m|[dD]ie|[dD]er|[dD]as)?[ \t]*(Br�cke|Park|Postfach|Hauptbahnhof)\b\s*,?\s*([[1-9]\p{L}\p{M}*\-\,]*\d[\d\p{L}\p{M}*\/\-\,]*)/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"GermanZipcode❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b(D-)?[0-9]{4,5}\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"HighwayDictionary❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_HighwayDict_WITH_Exact_OVER_Document_text
  )
);

$_{"HighwayNum❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b\d{1,3}(\s*(N|S|E|W))?(\s*(N|S|E|W))?\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"Initial❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_InitialDict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"InitialWord❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b([\p{Upper}]\.\s*){1,5}\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"NameDict❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_names_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"Nationalities❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_nationalities_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"NumCP❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b([[1-9]\p{Alpha}\-\,]*\d[\d\p{Alpha}\-\,]*)\s+(\p{Upper}\.?\s)?(\p{Upper}[\p{Lower}\&]{1,20}|\d{1,3}(st|nd|rd|th))\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"NumForHighwayAddress❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b\d{1,5}-?[A-Z]?\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"OrgClueStIndCaps❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_industry_types_retained_dict_WITH_Exact_OVER_Document_text
  )
);

$_{"OrgClueStIndPrefixCaps❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_industry_types_prefix_dict_WITH_Exact_OVER_Document_text
  )
);

$_{"OrgClueStSuffixCaps❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_organization_suffixes_dict_WITH_Exact_OVER_Document_text
  )
);

$_{"OrgConj❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_OrgConjDict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"OrgFullCase❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_organization_full_case_dict_WITH_Exact_OVER_Document_text
  )
);

$_{"OrgFullNoCase❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_organization_full_nocase_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"OrgPrep❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_OrgPrepDict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"PhoneFilter❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_FilterPhoneNum_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"PhoneNumberInstance❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/(([Nn](umber|o|um)|#)\s*(is\s*)?)?(\.\s*)?(:\s*)?(\+\s*){0,2}[\d(]([\d ()\-.\/]){9,20}\d\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"PhoneNumber_R1b_2❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/(\+\s*)?\(\s*[1-9]\d{2}\s*\)\s*[\-\.]?\d{3}[\-\.\s*]?\d{4}\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"PhoneNumber_R2a❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b(\+\s*)?[1-9]\d{2}\s*[\s\-\.]\d{3}[\-\.\s]\s*\d{4}\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"PhoneNumber_R3❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b\+?(1[\-\.\s]\s*)?(\(\s*)?[1-9]\d{2}(\s*\))?[\-\. ]\d{3}[\-\. ]\d{4}\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"PhoneNumber_R3a❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b\+?1[\-\.\s]\s*8\d{2}\s*[\s\-\.][A-Z]{7}\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"PhoneNumber_R4❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b[Xx][\.\-]?\d{4,5}\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"PhoneNumber_R5❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\bext\s*[\.\-\:]?\s*\d{3,5}\b/, (0 => "match"), "CASE_INSENSITIVE", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"PhoneNumber_R8ILPhone❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b(972[\-\.]\d{1,2}[\-\.]\d{7})\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"PhoneVariant❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_PhoneVariants_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"SecondaryUnitNoCase❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_secondaryUnit_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"State❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_Statelist_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"StateStrongAbbrev❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_Statelist_abbrev_dict_WITH_Exact_OVER_Document_text
  )
);

$_{"StateWeakAbbrev❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_Statelist_abbrev_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"StreetSuffixNoCase❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_streetSuffixes_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"StreetSuffixWeakNoCase❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_streetSuffixesWeak_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"StrictCapsPerson❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){1,20}\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"StrictFirstName1❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_strictfirst_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"StrictFirstName2❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_germanFirstNames_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"StrictFirstName3❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_strictNickNames_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"StrictFirstName4❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_germanFirstNamesBluepages_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"StrictLastName1❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_strictlast_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"StrictLastName2❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_germanLastNames_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"StrictLastName3❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_germanFamilyNamesBluepages_dict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"StrongPhoneVariant❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_StrongPhoneVariantDictionary_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"The❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_TheDict_WITH_IgnoreCase_OVER_Document_text
  )
);

$_{"URL1❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b((ht|f)tps?:\/\/\w+[\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,})\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"URL1a❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b(\w+[\w\-:&=_?\/~.<>@:]+\.(com|edu|org)\/[\w&_?~.<>@:][\w\-:&=_?\/~.<>@:]+[\w\-:&=_?\/~]{2,})\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"URL2❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b(((([\w]+:)\/\/)|(w\w+\.))(([\d\w]|%[a-fA-f\d]{2,2})+(:([\d\w]|%[a-fA-f\d]{2,2})+)?@)?([\d\w][-\d\w]{0,253}[\d\w]\.)+[\w]{2,4}(:[\d]+)?(\/([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)*(\?(&?([-+_~.\d\w]|%[a-fA-f\d]{2,2})=?)*)?(#([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)?)\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"USCity❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Project(
    (
      "text" => "Document.text",
      "__sdm_match" => "match"
    ),
    $SDM_OUTPUT_dictionaries_lotus_CITY_dict_WITH_Exact_OVER_Document_text
  )
);

$_{"WeakInitialWord❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b([\p{Upper}]\.?\s*){1,5}\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"Zipcode❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b[0-9]{5}(\-[0-9]{4})?\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$sentence_1 =
Select(
  Not(
    ContainsDict(
      StringConst(
        "dictionaries/lotus/abbreviations.dict"
      ),
      CombineSpans(
        LeftContextTok(
          GetCol(
            "boundary"
          ),
          IntConst(
            1
          )
        ),
        GetCol(
          "boundary"
        )
      )
    )
  ),
  Project(
    (
      "D.text" => "text",
      "boundary" => "boundary"
    ),
    FastRegex(/(([\.\?!]+\s)|(\n\s*\n))/, (0 => "boundary"), "DOTALL", "D.text",
      Project(
        (
          "text" => "D.text"
        ),
        $Document
      )
    )
  )
);

$_{"PhoneNumber_R1a❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\(?\d{2,4}[\.\-]?\)?(\s*\(0\)\s*)?(\s*[\-\.]\s*)?(\s*[\s\.\-]\(?\d{1,2}(\s*\d{2}\s*){1,2}\)?)?(\s*[\s\.\-]?\d{2,4})(\s*[\s\.-]?\d{1,4}){1,3}\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$_{"PhoneNumber_R7a_7b_7c❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  Regex(/\b([1-9]\d{1,2}\s*[\(\s\-\.]((\d{2}\s*[\)\s\-\.]\d{8})|(\d{5}\s*[\)\s\-\.]\d{5})|(\d{2}\s*[\)\s\-\.]\d{4}\s*[\s\-\.]\d{4})))\b/, (0 => "match"), "DOTALL", "Document.text",
    Project(
      (
        "text" => "Document.text"
      ),
      $Document
    )
  )
);

$CapsOrg =
Project(
  (
    "R.match" => "match"
  ),
  Select(
    Not(
      ContainsDict(
        StringConst(
          "dictionaries/lotus/industry_types_prefix.dict"
        ),
        GetCol(
          "R.match"
        )
      )
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $_{"CapsOrg❡subquery1"}
    )
  )
);

$CapsPerson =
Project(
  (
    "R.match" => "name"
  ),
  Select(
    And(
      Not(
        ContainsDict(
          StringConst(
            "FilterPersonDict"
          ),
          GetCol(
            "R.match"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "InitialDict"
          ),
          GetCol(
            "R.match"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "dictionaries/lotus/Statelist.dict"
          ),
          GetCol(
            "R.match"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "dictionaries/lotus/filterPersonGerman.dict"
          ),
          GetCol(
            "R.match"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "dictionaries/lotus/industry_types_retained.dict"
          ),
          GetCol(
            "R.match"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "dictionaries/lotus/organization_suffixes.dict"
          ),
          GetCol(
            "R.match"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "dictionaries/lotus/streetSuffixesForPerson.dict"
          ),
          GetCol(
            "R.match"
          )
        )
      )
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $_{"CapsPerson❡subquery1"}
    )
  )
);

$CapsPlace =
Project(
  (
    "R.match" => "match"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"CapsPlace❡subquery1"}
  )
);

$CapsPlaceTwo =
Project(
  (
    "@@genericModule@@CapsPlaceTwo@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "cp1.match"
      ),
      GetCol(
        "cp2.match"
      )
    ) => "@@genericModule@@CapsPlaceTwo@@match",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "cp1.match"
        ),
        GetCol(
          "cp2.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "match" => "cp1.match"
        ),
        $CapsPlace
      ),
      Project(
        (
          "match" => "cp2.match"
        ),
        $CapsPlace
      )
    )
  )
);

$CoCo =
Project(
  (
    "@@genericModule@@CoCo@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "co1.match"
      ),
      GetCol(
        "co2.match"
      )
    ) => "@@genericModule@@CoCo@@match",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "co1.match"
        ),
        GetCol(
          "co2.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "match" => "co1.match"
        ),
        $CapsOrg
      ),
      Project(
        (
          "match" => "co2.match"
        ),
        $CapsOrg
      )
    )
  )
);

$CoCoCo =
Project(
  (
    "@@genericModule@@CoCoCo@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "coco.match"
      ),
      GetCol(
        "co.match"
      )
    ) => "@@genericModule@@CoCoCo@@match",
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "co.match"
        ),
        GetCol(
          "coco.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "match" => "co.match"
        ),
        $CapsOrg
      ),
      Project(
        (
          "match" => "coco.match"
        ),
        $CoCo
      )
    )
  )
);

$Continents =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"Continents❡subquery1"}
  )
);

$Coonetotwo =
Union(
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $CapsOrg
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $CoCo
    )
  )
);

$Country =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"Country❡subquery1"}
  )
);

$DotCom =
Project(
  (
    "R.match" => "match"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"DotCom❡subquery1"}
  )
);

$Email1 =
Project(
  (
    "R.match" => "annot"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"Email1❡subquery1"}
  )
);

$Email2_a =
Project(
  (
    "R.match" => "annot"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"Email2_a❡subquery1"}
  )
);

$Email2_b =
Project(
  (
    "R.match" => "annot"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"Email2_b❡subquery1"}
  )
);

$GermanCities =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"GermanCities❡subquery1"}
  )
);

$GermanStreetAddress1 =
Project(
  (
    "R.match" => "match"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"GermanStreetAddress1❡subquery1"}
  )
);

$GermanStreetAddress2 =
Project(
  (
    "R.match" => "match"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"GermanStreetAddress2❡subquery1"}
  )
);

$GermanStreetAddress3 =
Project(
  (
    "R.match" => "match"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"GermanStreetAddress3❡subquery1"}
  )
);

$GermanZipcode =
Project(
  (
    "R.match" => "match"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"GermanZipcode❡subquery1"}
  )
);

$HighwayDictionary =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"HighwayDictionary❡subquery1"}
  )
);

$HighwayNum =
Project(
  (
    "R.match" => "match"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"HighwayNum❡subquery1"}
  )
);

$Initial =
Project(
  (
    "D.match" => "initial"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"Initial❡subquery1"}
  )
);

$InitialWord =
Project(
  (
    "R.match" => "word"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"InitialWord❡subquery1"}
  )
);

$InternetEmail =
Project(
  (
    "Email1.annot" => "email"
  ),
  Project(
    (
      "annot" => "Email1.annot"
    ),
    $Email1
  )
);

$NameDict =
Project(
  (
    "D.match" => "name"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /\p{Lu}\p{M}*.{1,20}/,
        "SimpleRegex"
      ),
      GetCol(
        "D.match"
      )
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $_{"NameDict❡subquery1"}
    )
  )
);

$Nationalities =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"Nationalities❡subquery1"}
  )
);

$NonOrgDictMatches =
Union(
  Project(
    (
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $Continents
    )
  ),
  Project(
    (
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $Nationalities
    )
  ),
  Project(
    (
      "D.match" => "match"
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $Country
    )
  )
);

$NumCP =
Project(
  (
    "R.match" => "match"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"NumCP❡subquery1"}
  )
);

$NumForHighwayAddress =
Project(
  (
    "R.match" => "match"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"NumForHighwayAddress❡subquery1"}
  )
);

$OrgClueStIndCaps =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"OrgClueStIndCaps❡subquery1"}
  )
);

$OrgClueStIndPrefixCaps =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"OrgClueStIndPrefixCaps❡subquery1"}
  )
);

$OrgClueStSuffixCaps =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"OrgClueStSuffixCaps❡subquery1"}
  )
);

$OrgConj =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"OrgConj❡subquery1"}
  )
);

$OrgFullCase =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"OrgFullCase❡subquery1"}
  )
);

$OrgFullNoCase =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"OrgFullNoCase❡subquery1"}
  )
);

$OrgPrep =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"OrgPrep❡subquery1"}
  )
);

$Person1 =
Project(
  (
    "@@genericModule@@Person1@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "CP1.name"
      ),
      GetCol(
        "CP2.name"
      )
    ) => "@@genericModule@@Person1@@person",
    Select(
      And(
        FollowsTok(
          GetCol(
            "I.initial"
          ),
          GetCol(
            "CP1.name"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        FollowsTok(
          GetCol(
            "CP1.name"
          ),
          GetCol(
            "IW.word"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "IW.word"
          ),
          GetCol(
            "CP2.name"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Select(
          FollowsTok(
            GetCol(
              "I.initial"
            ),
            GetCol(
              "CP1.name"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          AdjacentJoin(
            FollowsTok(
              GetCol(
                "CP1.name"
              ),
              GetCol(
                "IW.word"
              ),
              IntConst(
                0
              ),
              IntConst(
                0
              )
            ),
            AdjacentJoin(
              FollowsTok(
                GetCol(
                  "I.initial"
                ),
                GetCol(
                  "CP1.name"
                ),
                IntConst(
                  0
                ),
                IntConst(
                  0
                )
              ),
              Project(
                (
                  "initial" => "I.initial"
                ),
                $Initial
              ),
              Project(
                (
                  "name" => "CP1.name"
                ),
                $CapsPerson
              )
            ),
            Project(
              (
                "word" => "IW.word"
              ),
              $InitialWord
            )
          )
        ),
        Project(
          (
            "name" => "CP2.name"
          ),
          $CapsPerson
        )
      )
    )
  )
);

$Person1a =
Project(
  (
    "CP1.name" => "person"
  ),
  AdjacentJoin(
    FollowsTok(
      GetCol(
        "I.initial"
      ),
      GetCol(
        "CP1.name"
      ),
      IntConst(
        0
      ),
      IntConst(
        0
      )
    ),
    Project(
      (
        "initial" => "I.initial"
      ),
      $Initial
    ),
    Project(
      (
        "name" => "CP1.name"
      ),
      $CapsPerson
    )
  )
);

$PersonalNotesEmail =
Project(
  (
    "Email2_b.annot" => "email"
  ),
  Project(
    (
      "annot" => "Email2_b.annot"
    ),
    $Email2_b
  )
);

$PhoneFilter =
Project(
  (
    "D.match" => "annot"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"PhoneFilter❡subquery1"}
  )
);

$PhoneNumberInstance =
Project(
  (
    "R.match" => "match"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"PhoneNumberInstance❡subquery1"}
  )
);

$PhoneNumber_R1b_2 =
Project(
  (
    "R.match" => "num"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"PhoneNumber_R1b_2❡subquery1"}
  )
);

$PhoneNumber_R2a =
Project(
  (
    "R.match" => "num"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"PhoneNumber_R2a❡subquery1"}
  )
);

$PhoneNumber_R3 =
Project(
  (
    "R.match" => "num"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"PhoneNumber_R3❡subquery1"}
  )
);

$PhoneNumber_R3a =
Project(
  (
    "R.match" => "num"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"PhoneNumber_R3a❡subquery1"}
  )
);

$PhoneNumber_R4 =
Project(
  (
    "R.match" => "num"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"PhoneNumber_R4❡subquery1"}
  )
);

$PhoneNumber_R5 =
Project(
  (
    "R.match" => "num"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"PhoneNumber_R5❡subquery1"}
  )
);

$PhoneNumber_R8ILPhone =
Project(
  (
    "R.match" => "num"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"PhoneNumber_R8ILPhone❡subquery1"}
  )
);

$PhoneVariant =
Project(
  (
    "D.match" => "annot"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"PhoneVariant❡subquery1"}
  )
);

$SecondaryUnitNoCase =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"SecondaryUnitNoCase❡subquery1"}
  )
);

$State =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"State❡subquery1"}
  )
);

$StateStrongAbbrev =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"StateStrongAbbrev❡subquery1"}
  )
);

$StateStrongAll =
Union(
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $State
    )
  ),
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $StateStrongAbbrev
    )
  )
);

$StateWeakAbbrev =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"StateWeakAbbrev❡subquery1"}
  )
);

$StateWeakAll =
Union(
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $State
    )
  ),
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $StateWeakAbbrev
    )
  )
);

$StreetSuffixNoCase =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"StreetSuffixNoCase❡subquery1"}
  )
);

$StreetSuffixWeakNoCase =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"StreetSuffixWeakNoCase❡subquery1"}
  )
);

$StrictCapsPerson =
Project(
  (
    "R.match" => "name"
  ),
  Select(
    And(
      Not(
        ContainsDict(
          StringConst(
            "FilterPersonDict"
          ),
          GetCol(
            "R.match"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "InitialDict"
          ),
          GetCol(
            "R.match"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "dictionaries/lotus/GENERALCITY.dict"
          ),
          GetCol(
            "R.match"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "dictionaries/lotus/Statelist.dict"
          ),
          GetCol(
            "R.match"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "dictionaries/lotus/filterPersonGerman.dict"
          ),
          GetCol(
            "R.match"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "dictionaries/lotus/industry_types_retained.dict"
          ),
          GetCol(
            "R.match"
          )
        )
      ),
      Not(
        ContainsDict(
          StringConst(
            "dictionaries/lotus/organization_suffixes.dict"
          ),
          GetCol(
            "R.match"
          )
        )
      )
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $_{"StrictCapsPerson❡subquery1"}
    )
  )
);

$StrictFirstName1 =
Project(
  (
    "D.match" => "firstname"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /\p{Lu}\p{M}*.{1,20}/,
        "SimpleRegex"
      ),
      GetCol(
        "D.match"
      )
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $_{"StrictFirstName1❡subquery1"}
    )
  )
);

$StrictFirstName2 =
Project(
  (
    "D.match" => "firstname"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /\p{Lu}\p{M}*.{1,20}/,
        "SimpleRegex"
      ),
      GetCol(
        "D.match"
      )
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $_{"StrictFirstName2❡subquery1"}
    )
  )
);

$StrictFirstName3 =
Project(
  (
    "D.match" => "firstname"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /\p{Lu}\p{M}*.{1,20}/,
        "SimpleRegex"
      ),
      GetCol(
        "D.match"
      )
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $_{"StrictFirstName3❡subquery1"}
    )
  )
);

$StrictFirstName4 =
Project(
  (
    "D.match" => "firstname"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /\p{Lu}\p{M}*.{1,20}/,
        "SimpleRegex"
      ),
      GetCol(
        "D.match"
      )
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $_{"StrictFirstName4❡subquery1"}
    )
  )
);

$StrictLastName1 =
Project(
  (
    "D.match" => "lastname"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /\p{Lu}\p{M}*.{1,20}/,
        "SimpleRegex"
      ),
      GetCol(
        "D.match"
      )
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $_{"StrictLastName1❡subquery1"}
    )
  )
);

$StrictLastName2 =
Project(
  (
    "D.match" => "lastname"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /\p{Lu}\p{M}*.{1,20}/,
        "SimpleRegex"
      ),
      GetCol(
        "D.match"
      )
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $_{"StrictLastName2❡subquery1"}
    )
  )
);

$StrictLastName3 =
Project(
  (
    "D.match" => "lastname"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /\p{Lu}\p{M}*.{1,20}/,
        "SimpleRegex"
      ),
      GetCol(
        "D.match"
      )
    ),
    Project(
      (
        "match" => "D.match"
      ),
      $_{"StrictLastName3❡subquery1"}
    )
  )
);

$StrongPhoneVariant =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"StrongPhoneVariant❡subquery1"}
  )
);

$The =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"The❡subquery1"}
  )
);

$URL1 =
Project(
  (
    "R.match" => "annot"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"URL1❡subquery1"}
  )
);

$URL1a =
Project(
  (
    "R.match" => "annot"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"URL1a❡subquery1"}
  )
);

$URL2 =
Project(
  (
    "R.match" => "annot"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"URL2❡subquery1"}
  )
);

$USCity =
Project(
  (
    "D.match" => "match"
  ),
  Project(
    (
      "match" => "D.match"
    ),
    $_{"USCity❡subquery1"}
  )
);

$WeakInitialWord =
Project(
  (
    "R.match" => "word"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"WeakInitialWord❡subquery1"}
  )
);

$Zipcode =
Project(
  (
    "R.match" => "match"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"Zipcode❡subquery1"}
  )
);

$ZipcodeAll =
Union(
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $Zipcode
    )
  ),
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $GermanZipcode
    )
  )
);

$Zipcodes =
Project(
  (
    "C.match" => "loc"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "C.match"
    ),
    Project(
      (
        "match" => "C.match"
      ),
      $ZipcodeAll
    )
  )
);

$sentence =
Project(
  (
    "sentence" => "sentence"
  ),
  Split("B.text", "B.boundary", 2, "sentence",
    Project(
      (
        "text" => "B.text",
        "boundary" => "B.boundary"
      ),
      $sentence_1
    )
  )
);

$AllStates =
Project(
  (
    "S.match" => "loc"
  ),
  Project(
    (
      "match" => "S.match"
    ),
    $StateStrongAll
  )
);

$CapsPlaceOnetoTwo =
Union(
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $CapsPlace
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $CapsPlaceTwo
    )
  )
);

$CitiesAll =
Union(
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $USCity
    )
  ),
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $GermanCities
    )
  )
);

$CoOc =
Project(
  (
    "@@genericModule@@CoOc@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "co.match"
      ),
      GetCol(
        "oc.match"
      )
    ) => "@@genericModule@@CoOc@@match",
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "oc.match"
        ),
        GetCol(
          "co.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "match" => "oc.match"
        ),
        $OrgConj
      ),
      Project(
        (
          "match" => "co.match"
        ),
        $Coonetotwo
      )
    )
  )
);

$CoOcCo =
Project(
  (
    "@@genericModule@@CoOcCo@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "cooc.match"
      ),
      GetCol(
        "co.match"
      )
    ) => "@@genericModule@@CoOcCo@@match",
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "co.match"
        ),
        GetCol(
          "cooc.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "match" => "co.match"
        ),
        $Coonetotwo
      ),
      Project(
        (
          "match" => "cooc.match"
        ),
        $CoOc
      )
    )
  )
);

$CoOcCozerototwo =
Union(
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $CoOc
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $CoOcCo
    )
  )
);

$Coonetothree =
Union(
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $Coonetotwo
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $CoCoCo
    )
  )
);

$CorrectPhoneNumberInstance =
Project(
  (
    "R.match" => "match"
  ),
  Select(
    Not(
      ContainsRegex(
        RegexConst(
          /(\(.+\()|(\).+\)|(\/.+\/)|(\([^)]*$))/,
          "JavaRegex"
        ),
        GetCol(
          "R.match"
        )
      )
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $PhoneNumberInstance
    )
  )
);

$Email2 =
Union(
  Project(
    (
      "Email2_a.annot" => "annot"
    ),
    Project(
      (
        "annot" => "Email2_a.annot"
      ),
      $Email2_a
    )
  ),
  Project(
    (
      "Email2_b.annot" => "annot"
    ),
    Project(
      (
        "annot" => "Email2_b.annot"
      ),
      $Email2_b
    )
  )
);

$ExtensionNums =
Union(
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $PhoneNumber_R4
    )
  ),
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $PhoneNumber_R5
    )
  )
);

$GermanCityZipcode1 =
Project(
  (
    "@@genericModule@@GermanCityZipcode1@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "GZ.match"
      ),
      GetCol(
        "GC.match"
      )
    ) => "@@genericModule@@GermanCityZipcode1@@match",
    Select(
      MatchesRegex(
        RegexConst(
          /\s*,?\s*/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "GZ.match"
          ),
          GetCol(
            "GC.match"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "GC.match"
          ),
          GetCol(
            "GZ.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            2
          )
        ),
        Project(
          (
            "match" => "GC.match"
          ),
          $GermanCities
        ),
        Project(
          (
            "match" => "GZ.match"
          ),
          $GermanZipcode
        )
      )
    )
  )
);

$GermanCityZipcode2 =
Project(
  (
    "@@genericModule@@GermanCityZipcode2@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "GC.match"
      ),
      GetCol(
        "GZ.match"
      )
    ) => "@@genericModule@@GermanCityZipcode2@@match",
    Select(
      MatchesRegex(
        RegexConst(
          /\s*((am Main)|([\-\/]?\p{Lu}\p{M}*(\p{L}\p{M}*)+))?\s*,?\s*/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "GC.match"
          ),
          GetCol(
            "GZ.match"
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "GC.match"
          ),
          GetCol(
            "GZ.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            3
          )
        ),
        Project(
          (
            "match" => "GC.match"
          ),
          $GermanCities
        ),
        Project(
          (
            "match" => "GZ.match"
          ),
          $GermanZipcode
        )
      )
    )
  )
);

$GermanStreetAddress =
Union(
  Project(
    (
      "GSA1.match" => "match"
    ),
    Project(
      (
        "match" => "GSA1.match"
      ),
      $GermanStreetAddress1
    )
  ),
  Project(
    (
      "GSA2.match" => "match"
    ),
    Project(
      (
        "match" => "GSA2.match"
      ),
      $GermanStreetAddress2
    )
  ),
  Project(
    (
      "GSA3.match" => "match"
    ),
    Project(
      (
        "match" => "GSA3.match"
      ),
      $GermanStreetAddress3
    )
  )
);

$HighwayStateDictionary =
Union(
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $HighwayDictionary
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $StateStrongAbbrev
    )
  )
);

$NotesEmail =
Project(
  (
    "C.annot" => "email"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "C.annot"
    ),
    Project(
      (
        "annot" => "C.annot"
      ),
      $Email2
    )
  )
);

$OrgClueStCaps =
Union(
  Project(
    (
      "OCSIC.match" => "match"
    ),
    Project(
      (
        "match" => "OCSIC.match"
      ),
      $OrgClueStIndCaps
    )
  ),
  Project(
    (
      "OCSSC.match" => "match"
    ),
    Project(
      (
        "match" => "OCSSC.match"
      ),
      $OrgClueStSuffixCaps
    )
  )
);

$OrgFull =
Union(
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $OrgFullNoCase
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $OrgFullCase
    )
  )
);

$PhoneNumber_R1a =
Project(
  (
    "R.match" => "num"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /\s*\.{0,10}\s*/,
        "SimpleRegex"
      ),
      SpanBetween(
        GetCol(
          "Var.annot"
        ),
        GetCol(
          "R.match"
        )
      )
    ),
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "Var.annot"
        ),
        GetCol(
          "R.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          2
        )
      ),
      Project(
        (
          "annot" => "Var.annot"
        ),
        $PhoneVariant
      ),
      Project(
        (
          "match" => "R.match"
        ),
        $_{"PhoneNumber_R1a❡subquery1"}
      )
    )
  )
);

$PhoneNumber_R7a_7b_7c =
Project(
  (
    "R.match" => "num"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /\s*\.{0,10}\s*/,
        "SimpleRegex"
      ),
      SpanBetween(
        GetCol(
          "Var.annot"
        ),
        GetCol(
          "R.match"
        )
      )
    ),
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "Var.annot"
        ),
        GetCol(
          "R.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          2
        )
      ),
      Project(
        (
          "annot" => "Var.annot"
        ),
        $PhoneVariant
      ),
      Project(
        (
          "match" => "R.match"
        ),
        $_{"PhoneNumber_R7a_7b_7c❡subquery1"}
      )
    )
  )
);

$SecondaryUnit =
Project(
  (
    "S.match" => "match"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /(\#)|(\p{Upper}[\p{Lower}\&]{1,20})/,
        "SimpleRegex"
      ),
      GetCol(
        "S.match"
      )
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $SecondaryUnitNoCase
    )
  )
);

$StreetSuffix =
Project(
  (
    "S.match" => "match"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /^\p{Upper}[\p{Lower}\&]{1,20}.?/,
        "JavaRegex"
      ),
      GetCol(
        "S.match"
      )
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $StreetSuffixNoCase
    )
  )
);

$StreetSuffixWeak =
Project(
  (
    "S.match" => "match"
  ),
  Select(
    MatchesRegex(
      RegexConst(
        /^\p{Upper}[\p{Lower}\&]{1,20}/,
        "JavaRegex"
      ),
      GetCol(
        "S.match"
      )
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $StreetSuffixWeakNoCase
    )
  )
);

$StrictFirstName =
Union(
  Project(
    (
      "S.firstname" => "firstname"
    ),
    Project(
      (
        "firstname" => "S.firstname"
      ),
      $StrictFirstName1
    )
  ),
  Project(
    (
      "S.firstname" => "firstname"
    ),
    Project(
      (
        "firstname" => "S.firstname"
      ),
      $StrictFirstName2
    )
  ),
  Project(
    (
      "S.firstname" => "firstname"
    ),
    Project(
      (
        "firstname" => "S.firstname"
      ),
      $StrictFirstName3
    )
  ),
  Project(
    (
      "S.firstname" => "firstname"
    ),
    Project(
      (
        "firstname" => "S.firstname"
      ),
      $StrictFirstName4
    )
  )
);

$StrictLastName =
Union(
  Project(
    (
      "S.lastname" => "lastname"
    ),
    Project(
      (
        "lastname" => "S.lastname"
      ),
      $StrictLastName1
    )
  ),
  Project(
    (
      "S.lastname" => "lastname"
    ),
    Project(
      (
        "lastname" => "S.lastname"
      ),
      $StrictLastName2
    )
  ),
  Project(
    (
      "S.lastname" => "lastname"
    ),
    Project(
      (
        "lastname" => "S.lastname"
      ),
      $StrictLastName3
    )
  )
);

$StrongPhone =
Project(
  (
    "@@genericModule@@StrongPhone@@num" => "num"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "SPV.match"
      ),
      GetCol(
        "PNI.match"
      )
    ) => "@@genericModule@@StrongPhone@@num",
    Select(
      And(
        MatchesRegex(
          RegexConst(
            /\W*/,
            "SimpleRegex"
          ),
          SpanBetween(
            GetCol(
              "SPV.match"
            ),
            GetCol(
              "PNI.match"
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /[\n\r]/,
              "SimpleRegex"
            ),
            SpanBetween(
              GetCol(
                "SPV.match"
              ),
              GetCol(
                "PNI.match"
              )
            )
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "SPV.match"
          ),
          GetCol(
            "PNI.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "match" => "SPV.match"
          ),
          $StrongPhoneVariant
        ),
        Project(
          (
            "match" => "PNI.match"
          ),
          $CorrectPhoneNumberInstance
        )
      )
    )
  )
);

$URL1a_2 =
Union(
  Project(
    (
      "U.annot" => "annot"
    ),
    Project(
      (
        "annot" => "U.annot"
      ),
      $URL1a
    )
  ),
  Project(
    (
      "U.annot" => "annot"
    ),
    Project(
      (
        "annot" => "U.annot"
      ),
      $URL2
    )
  )
);

$AllCities =
Project(
  (
    "C.match" => "loc"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "C.match"
    ),
    Project(
      (
        "match" => "C.match"
      ),
      $CitiesAll
    )
  )
);

$CoOcCozerototwoOcscOpCo =
Project(
  (
    "@@genericModule@@CoOcCozerototwoOcscOpCo@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "coocco.match"
      ),
      GetCol(
        "co.match"
      )
    ) => "@@genericModule@@CoOcCozerototwoOcscOpCo@@match",
    Select(
      And(
        FollowsTok(
          GetCol(
            "coocco.match"
          ),
          GetCol(
            "ocsc.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        FollowsTok(
          GetCol(
            "ocsc.match"
          ),
          GetCol(
            "op.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "op.match"
          ),
          GetCol(
            "co.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Select(
          FollowsTok(
            GetCol(
              "coocco.match"
            ),
            GetCol(
              "ocsc.match"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          AdjacentJoin(
            FollowsTok(
              GetCol(
                "ocsc.match"
              ),
              GetCol(
                "op.match"
              ),
              IntConst(
                0
              ),
              IntConst(
                0
              )
            ),
            AdjacentJoin(
              FollowedByTok(
                GetCol(
                  "ocsc.match"
                ),
                GetCol(
                  "coocco.match"
                ),
                IntConst(
                  0
                ),
                IntConst(
                  0
                )
              ),
              Project(
                (
                  "match" => "ocsc.match"
                ),
                $OrgClueStCaps
              ),
              Project(
                (
                  "match" => "coocco.match"
                ),
                $CoOcCozerototwo
              )
            ),
            Project(
              (
                "match" => "op.match"
              ),
              $OrgPrep
            )
          )
        ),
        Project(
          (
            "match" => "co.match"
          ),
          $Coonetotwo
        )
      )
    )
  )
);

$CoOcscOpCo =
Project(
  (
    "@@genericModule@@CoOcscOpCo@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "coco1.match"
      ),
      GetCol(
        "coco2.match"
      )
    ) => "@@genericModule@@CoOcscOpCo@@match",
    Select(
      And(
        FollowsTok(
          GetCol(
            "coco1.match"
          ),
          GetCol(
            "ocsc.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        FollowsTok(
          GetCol(
            "ocsc.match"
          ),
          GetCol(
            "op.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "op.match"
          ),
          GetCol(
            "coco2.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Select(
          FollowsTok(
            GetCol(
              "coco1.match"
            ),
            GetCol(
              "ocsc.match"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          AdjacentJoin(
            FollowsTok(
              GetCol(
                "ocsc.match"
              ),
              GetCol(
                "op.match"
              ),
              IntConst(
                0
              ),
              IntConst(
                0
              )
            ),
            AdjacentJoin(
              FollowedByTok(
                GetCol(
                  "ocsc.match"
                ),
                GetCol(
                  "coco1.match"
                ),
                IntConst(
                  0
                ),
                IntConst(
                  0
                )
              ),
              Project(
                (
                  "match" => "ocsc.match"
                ),
                $OrgClueStCaps
              ),
              Project(
                (
                  "match" => "coco1.match"
                ),
                $Coonetotwo
              )
            ),
            Project(
              (
                "match" => "op.match"
              ),
              $OrgPrep
            )
          )
        ),
        Project(
          (
            "match" => "coco2.match"
          ),
          $Coonetotwo
        )
      )
    )
  )
);

$CoOcsic1 =
Project(
  (
    "@@genericModule@@CoOcsic1@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "coco.match"
      ),
      GetCol(
        "ocsic.match"
      )
    ) => "@@genericModule@@CoOcsic1@@match",
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "ocsic.match"
        ),
        GetCol(
          "coco.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "match" => "ocsic.match"
        ),
        $OrgClueStIndCaps
      ),
      Project(
        (
          "match" => "coco.match"
        ),
        $Coonetothree
      )
    )
  )
);

$CoOcsic2 =
Project(
  (
    "@@genericModule@@CoOcsic2@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "coco.match"
      ),
      GetCol(
        "ocsic.match"
      )
    ) => "@@genericModule@@CoOcsic2@@match",
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "ocsic.match"
        ),
        GetCol(
          "coco.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "match" => "ocsic.match"
        ),
        $OrgClueStSuffixCaps
      ),
      Project(
        (
          "match" => "coco.match"
        ),
        $Coonetothree
      )
    )
  )
);

$CoOcsicAll =
Union(
  Project(
    (
      "C.match" => "match"
    ),
    Project(
      (
        "match" => "C.match"
      ),
      $CoOcsic1
    )
  ),
  Project(
    (
      "C.match" => "match"
    ),
    Project(
      (
        "match" => "C.match"
      ),
      $CoOcsic2
    )
  )
);

$CoOcsicEx =
Project(
  (
    "@@genericModule@@CoOcsicEx@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "C.match"
      ),
      GetCol(
        "S.match"
      )
    ) => "@@genericModule@@CoOcsicEx@@match",
    Select(
      FollowsTok(
        GetCol(
          "O.match"
        ),
        GetCol(
          "S.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "O.match"
          ),
          GetCol(
            "C.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        AdjacentJoin(
          FollowedByTok(
            GetCol(
              "S.match"
            ),
            GetCol(
              "O.match"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          Project(
            (
              "match" => "S.match"
            ),
            $OrgClueStSuffixCaps
          ),
          Project(
            (
              "match" => "O.match"
            ),
            $CapsOrg
          )
        ),
        Project(
          (
            "match" => "C.match"
          ),
          $CoOcsic1
        )
      )
    )
  )
);

$CoOcssc =
Project(
  (
    "@@genericModule@@CoOcssc@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "coco.match"
      ),
      GetCol(
        "ocssc.match"
      )
    ) => "@@genericModule@@CoOcssc@@match",
    Select(
      MatchesRegex(
        RegexConst(
          /\s*[,\s]\s*/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "coco.match"
          ),
          GetCol(
            "ocssc.match"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "ocssc.match"
          ),
          GetCol(
            "coco.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "match" => "ocssc.match"
          ),
          $OrgClueStSuffixCaps
        ),
        Project(
          (
            "match" => "coco.match"
          ),
          $Coonetothree
        )
      )
    )
  )
);

$Email =
Union(
  Project(
    (
      "Email1.annot" => "email"
    ),
    Project(
      (
        "annot" => "Email1.annot"
      ),
      $Email1
    )
  ),
  Project(
    (
      "Email2.annot" => "email"
    ),
    Project(
      (
        "annot" => "Email2.annot"
      ),
      $Email2
    )
  )
);

$GermanCityZipcode =
Union(
  Project(
    (
      "GCZ1.match" => "match"
    ),
    Project(
      (
        "match" => "GCZ1.match"
      ),
      $GermanCityZipcode1
    )
  ),
  Project(
    (
      "GCZ2.match" => "match"
    ),
    Project(
      (
        "match" => "GCZ2.match"
      ),
      $GermanCityZipcode2
    )
  )
);

$HighwayAddressPart =
Project(
  (
    "@@genericModule@@HighwayAddressPart@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "nc.match"
      ),
      GetCol(
        "rs.match"
      )
    ) => "@@genericModule@@HighwayAddressPart@@match",
    Select(
      MatchesRegex(
        RegexConst(
          /\W+((N|S|E|W)\W+)?/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "nc.match"
          ),
          GetCol(
            "rs.match"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "rs.match"
          ),
          GetCol(
            "nc.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            2
          )
        ),
        Project(
          (
            "match" => "rs.match"
          ),
          $HighwayStateDictionary
        ),
        Project(
          (
            "match" => "nc.match"
          ),
          $NumForHighwayAddress
        )
      )
    )
  )
);

$NonOrgs =
Project(
  (
    "@@genericModule@@NonOrgs@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "NO.match"
      ),
      GetCol(
        "OC.match"
      )
    ) => "@@genericModule@@NonOrgs@@match",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "NO.match"
        ),
        GetCol(
          "OC.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "match" => "NO.match"
        ),
        $NonOrgDictMatches
      ),
      Project(
        (
          "match" => "OC.match"
        ),
        $OrgClueStCaps
      )
    )
  )
);

$OcscOpCoOcCo =
Project(
  (
    "@@genericModule@@OcscOpCoOcCo@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "ocsc.match"
      ),
      GetCol(
        "coco2.match"
      )
    ) => "@@genericModule@@OcscOpCoOcCo@@match",
    Select(
      And(
        FollowsTok(
          GetCol(
            "coco1.match"
          ),
          GetCol(
            "oc.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        FollowsTok(
          GetCol(
            "oc.match"
          ),
          GetCol(
            "coco2.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        FollowsTok(
          GetCol(
            "op.match"
          ),
          GetCol(
            "coco1.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "op.match"
          ),
          GetCol(
            "ocsc.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Select(
          And(
            FollowsTok(
              GetCol(
                "coco1.match"
              ),
              GetCol(
                "oc.match"
              ),
              IntConst(
                0
              ),
              IntConst(
                0
              )
            ),
            FollowsTok(
              GetCol(
                "oc.match"
              ),
              GetCol(
                "coco2.match"
              ),
              IntConst(
                0
              ),
              IntConst(
                0
              )
            )
          ),
          AdjacentJoin(
            FollowedByTok(
              GetCol(
                "coco1.match"
              ),
              GetCol(
                "op.match"
              ),
              IntConst(
                0
              ),
              IntConst(
                0
              )
            ),
            Select(
              FollowsTok(
                GetCol(
                  "coco1.match"
                ),
                GetCol(
                  "oc.match"
                ),
                IntConst(
                  0
                ),
                IntConst(
                  0
                )
              ),
              AdjacentJoin(
                FollowsTok(
                  GetCol(
                    "oc.match"
                  ),
                  GetCol(
                    "coco2.match"
                  ),
                  IntConst(
                    0
                  ),
                  IntConst(
                    0
                  )
                ),
                AdjacentJoin(
                  FollowedByTok(
                    GetCol(
                      "oc.match"
                    ),
                    GetCol(
                      "coco1.match"
                    ),
                    IntConst(
                      0
                    ),
                    IntConst(
                      0
                    )
                  ),
                  Project(
                    (
                      "match" => "oc.match"
                    ),
                    $OrgConj
                  ),
                  Project(
                    (
                      "match" => "coco1.match"
                    ),
                    $Coonetotwo
                  )
                ),
                Project(
                  (
                    "match" => "coco2.match"
                  ),
                  $Coonetotwo
                )
              )
            ),
            Project(
              (
                "match" => "op.match"
              ),
              $OrgPrep
            )
          )
        ),
        Project(
          (
            "match" => "ocsc.match"
          ),
          $OrgClueStCaps
        )
      )
    )
  )
);

$OfCo =
Project(
  (
    "@@genericModule@@OfCo@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "of.match"
      ),
      GetCol(
        "coco.match"
      )
    ) => "@@genericModule@@OfCo@@match",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "of.match"
        ),
        GetCol(
          "coco.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "match" => "of.match"
        ),
        $OrgFull
      ),
      Project(
        (
          "match" => "coco.match"
        ),
        $Coonetotwo
      )
    )
  )
);

$OfCozerototwo =
Union(
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $OrgFull
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $OfCo
    )
  )
);

$Person3P1 =
Project(
  (
    "@@genericModule@@Person3P1@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "F.firstname"
      ),
      GetCol(
        "L.lastname"
      )
    ) => "@@genericModule@@Person3P1@@person",
    Select(
      And(
        FollowsTok(
          GetCol(
            "F.firstname"
          ),
          GetCol(
            "S.name"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /[\n\r\t]/,
              "SimpleRegex"
            ),
            SpanBetween(
              GetCol(
                "F.firstname"
              ),
              GetCol(
                "L.lastname"
              )
            )
          )
        ),
        Not(
          Equals(
            GetText(
              GetCol(
                "F.firstname"
              )
            ),
            GetText(
              GetCol(
                "L.lastname"
              )
            )
          )
        ),
        Not(
          Equals(
            GetText(
              GetCol(
                "F.firstname"
              )
            ),
            GetText(
              GetCol(
                "S.name"
              )
            )
          )
        ),
        Not(
          Equals(
            GetText(
              GetCol(
                "S.name"
              )
            ),
            GetText(
              GetCol(
                "L.lastname"
              )
            )
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "S.name"
          ),
          GetCol(
            "L.lastname"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Select(
          Not(
            Equals(
              GetText(
                GetCol(
                  "F.firstname"
                )
              ),
              GetText(
                GetCol(
                  "S.name"
                )
              )
            )
          ),
          AdjacentJoin(
            FollowsTok(
              GetCol(
                "F.firstname"
              ),
              GetCol(
                "S.name"
              ),
              IntConst(
                0
              ),
              IntConst(
                0
              )
            ),
            Project(
              (
                "firstname" => "F.firstname"
              ),
              $StrictFirstName
            ),
            Project(
              (
                "name" => "S.name"
              ),
              $StrictCapsPerson
            )
          )
        ),
        Project(
          (
            "lastname" => "L.lastname"
          ),
          $StrictLastName
        )
      )
    )
  )
);

$RelaxedFirstName1 =
Project(
  (
    "@@genericModule@@RelaxedFirstName1@@firstname" => "firstname"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S.firstname"
      ),
      GetCol(
        "CP.name"
      )
    ) => "@@genericModule@@RelaxedFirstName1@@firstname",
    Select(
      MatchesRegex(
        RegexConst(
          /\-/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "S.firstname"
          ),
          GetCol(
            "CP.name"
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "S.firstname"
          ),
          GetCol(
            "CP.name"
          ),
          IntConst(
            1
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "firstname" => "S.firstname"
          ),
          $StrictFirstName
        ),
        Project(
          (
            "name" => "CP.name"
          ),
          $StrictCapsPerson
        )
      )
    )
  )
);

$RelaxedFirstName2 =
Project(
  (
    "@@genericModule@@RelaxedFirstName2@@firstname" => "firstname"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "CP.name"
      ),
      GetCol(
        "S.firstname"
      )
    ) => "@@genericModule@@RelaxedFirstName2@@firstname",
    Select(
      MatchesRegex(
        RegexConst(
          /\-/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "CP.name"
          ),
          GetCol(
            "S.firstname"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "S.firstname"
          ),
          GetCol(
            "CP.name"
          ),
          IntConst(
            1
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "firstname" => "S.firstname"
          ),
          $StrictFirstName
        ),
        Project(
          (
            "name" => "CP.name"
          ),
          $StrictCapsPerson
        )
      )
    )
  )
);

$RelaxedLastName1 =
Project(
  (
    "@@genericModule@@RelaxedLastName1@@lastname" => "lastname"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "SL.lastname"
      ),
      GetCol(
        "CP.name"
      )
    ) => "@@genericModule@@RelaxedLastName1@@lastname",
    Select(
      MatchesRegex(
        RegexConst(
          /\-/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "SL.lastname"
          ),
          GetCol(
            "CP.name"
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "SL.lastname"
          ),
          GetCol(
            "CP.name"
          ),
          IntConst(
            1
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "lastname" => "SL.lastname"
          ),
          $StrictLastName
        ),
        Project(
          (
            "name" => "CP.name"
          ),
          $StrictCapsPerson
        )
      )
    )
  )
);

$RelaxedLastName2 =
Project(
  (
    "@@genericModule@@RelaxedLastName2@@lastname" => "lastname"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "CP.name"
      ),
      GetCol(
        "SL.lastname"
      )
    ) => "@@genericModule@@RelaxedLastName2@@lastname",
    Select(
      MatchesRegex(
        RegexConst(
          /\-/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "CP.name"
          ),
          GetCol(
            "SL.lastname"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "SL.lastname"
          ),
          GetCol(
            "CP.name"
          ),
          IntConst(
            1
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "lastname" => "SL.lastname"
          ),
          $StrictLastName
        ),
        Project(
          (
            "name" => "CP.name"
          ),
          $StrictCapsPerson
        )
      )
    )
  )
);

$StreetSuffixAll =
Union(
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $StreetSuffix
    )
  ),
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $StreetSuffixWeak
    )
  )
);

$CoOcscOpCoOcCo =
Project(
  (
    "@@genericModule@@CoOcscOpCoOcCo@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "coco.match"
      ),
      GetCol(
        "R1.match"
      )
    ) => "@@genericModule@@CoOcscOpCoOcCo@@match",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "coco.match"
        ),
        GetCol(
          "R1.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "match" => "coco.match"
        ),
        $Coonetotwo
      ),
      Project(
        (
          "match" => "R1.match"
        ),
        $OcscOpCoOcCo
      )
    )
  )
);

$CoOcsic =
Difference(
  Project(
    (
      "C.match" => "match"
    ),
    Project(
      (
        "match" => "C.match"
      ),
      $CoOcsicAll
    )
  ),
  Project(
    (
      "C.match" => "match"
    ),
    Project(
      (
        "match" => "C.match"
      ),
      $NonOrgs
    )
  ));

$FirstNameAll =
Union(
  Project(
    (
      "N.firstname" => "firstname"
    ),
    Project(
      (
        "firstname" => "N.firstname"
      ),
      $StrictFirstName
    )
  ),
  Project(
    (
      "N.firstname" => "firstname"
    ),
    Project(
      (
        "firstname" => "N.firstname"
      ),
      $RelaxedFirstName1
    )
  ),
  Project(
    (
      "N.firstname" => "firstname"
    ),
    Project(
      (
        "firstname" => "N.firstname"
      ),
      $RelaxedFirstName2
    )
  )
);

$GermanAddress =
Project(
  (
    "@@genericModule@@GermanAddress@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "GSA.match"
      ),
      GetCol(
        "GCZ.match"
      )
    ) => "@@genericModule@@GermanAddress@@match",
    Select(
      MatchesRegex(
        RegexConst(
          /\W*([Gg]ermany|Deutsch\s*[Ll]and)?.{0,5}\W*/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "GSA.match"
          ),
          GetCol(
            "GCZ.match"
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "GSA.match"
          ),
          GetCol(
            "GCZ.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            3
          )
        ),
        Project(
          (
            "match" => "GSA.match"
          ),
          $GermanStreetAddress
        ),
        Project(
          (
            "match" => "GCZ.match"
          ),
          $GermanCityZipcode
        )
      )
    )
  )
);

$HighwayAddress =
Project(
  (
    "@@genericModule@@HighwayAddress@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "ra.match"
      ),
      GetCol(
        "hn.match"
      )
    ) => "@@genericModule@@HighwayAddress@@match",
    Select(
      MatchesRegex(
        RegexConst(
          /\W+/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "ra.match"
          ),
          GetCol(
            "hn.match"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "hn.match"
          ),
          GetCol(
            "ra.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "match" => "hn.match"
          ),
          $HighwayNum
        ),
        Project(
          (
            "match" => "ra.match"
          ),
          $HighwayAddressPart
        )
      )
    )
  )
);

$LastNameAll =
Union(
  Project(
    (
      "N.lastname" => "lastname"
    ),
    Project(
      (
        "lastname" => "N.lastname"
      ),
      $StrictLastName
    )
  ),
  Project(
    (
      "N.lastname" => "lastname"
    ),
    Project(
      (
        "lastname" => "N.lastname"
      ),
      $RelaxedLastName1
    )
  ),
  Project(
    (
      "N.lastname" => "lastname"
    ),
    Project(
      (
        "lastname" => "N.lastname"
      ),
      $RelaxedLastName2
    )
  )
);

$OfCoOcsc =
Project(
  (
    "@@genericModule@@OfCoOcsc@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "of.match"
      ),
      GetCol(
        "ocsc.match"
      )
    ) => "@@genericModule@@OfCoOcsc@@match",
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "ocsc.match"
        ),
        GetCol(
          "of.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "match" => "ocsc.match"
        ),
        $OrgClueStCaps
      ),
      Project(
        (
          "match" => "of.match"
        ),
        $OfCozerototwo
      )
    )
  )
);

$StreetAddressAll =
Project(
  (
    "@@genericModule@@StreetAddressAll@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "nc.match"
      ),
      GetCol(
        "ssw.match"
      )
    ) => "@@genericModule@@StreetAddressAll@@match",
    Select(
      MatchesRegex(
        RegexConst(
          /\s*(\p{Upper}[\p{Lower}\&]+\s*){0,3}/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "nc.match"
          ),
          GetCol(
            "ssw.match"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "ssw.match"
          ),
          GetCol(
            "nc.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            2
          )
        ),
        Project(
          (
            "match" => "ssw.match"
          ),
          $StreetSuffixAll
        ),
        Project(
          (
            "match" => "nc.match"
          ),
          $NumCP
        )
      )
    )
  )
);

$StreetHighwayAddressAll =
Union(
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $StreetAddressAll
    )
  ),
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $HighwayAddress
    )
  )
);

$FirstName =
Project(
  (
    "C.firstname" => "firstname"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "C.firstname"
    ),
    Project(
      (
        "firstname" => "C.firstname"
      ),
      $FirstNameAll
    )
  )
);

$LastName =
Project(
  (
    "C.lastname" => "lastname"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "C.lastname"
    ),
    Project(
      (
        "lastname" => "C.lastname"
      ),
      $LastNameAll
    )
  )
);

$NamesAll =
Union(
  Project(
    (
      "P.name" => "name"
    ),
    Project(
      (
        "name" => "P.name"
      ),
      $NameDict
    )
  ),
  Project(
    (
      "P.firstname" => "name"
    ),
    Project(
      (
        "firstname" => "P.firstname"
      ),
      $FirstName
    )
  ),
  Project(
    (
      "P.lastname" => "name"
    ),
    Project(
      (
        "lastname" => "P.lastname"
      ),
      $LastName
    )
  )
);

$Person3r1 =
Project(
  (
    "@@genericModule@@Person3r1@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "FN.firstname"
      ),
      GetCol(
        "CP.name"
      )
    ) => "@@genericModule@@Person3r1@@person",
    Select(
      FollowsTok(
        GetCol(
          "IW.word"
        ),
        GetCol(
          "CP.name"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "IW.word"
          ),
          GetCol(
            "FN.firstname"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        AdjacentJoin(
          FollowedByTok(
            GetCol(
              "CP.name"
            ),
            GetCol(
              "IW.word"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          Project(
            (
              "name" => "CP.name"
            ),
            $CapsPerson
          ),
          Project(
            (
              "word" => "IW.word"
            ),
            $InitialWord
          )
        ),
        Project(
          (
            "firstname" => "FN.firstname"
          ),
          $FirstName
        )
      )
    )
  )
);

$Person3r2 =
Project(
  (
    "@@genericModule@@Person3r2@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "CP.name"
      ),
      GetCol(
        "LN.lastname"
      )
    ) => "@@genericModule@@Person3r2@@person",
    Select(
      FollowsTok(
        GetCol(
          "CP.name"
        ),
        GetCol(
          "IW.word"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "IW.word"
          ),
          GetCol(
            "LN.lastname"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        AdjacentJoin(
          FollowsTok(
            GetCol(
              "CP.name"
            ),
            GetCol(
              "IW.word"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          Project(
            (
              "name" => "CP.name"
            ),
            $CapsPerson
          ),
          Project(
            (
              "word" => "IW.word"
            ),
            $InitialWord
          )
        ),
        Project(
          (
            "lastname" => "LN.lastname"
          ),
          $LastName
        )
      )
    )
  )
);

$Person4WithNewLine =
Project(
  (
    "@@genericModule@@Person4WithNewLine@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "FN.firstname"
      ),
      GetCol(
        "LN.lastname"
      )
    ) => "@@genericModule@@Person4WithNewLine@@person",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "FN.firstname"
        ),
        GetCol(
          "LN.lastname"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "firstname" => "FN.firstname"
        ),
        $FirstName
      ),
      Project(
        (
          "lastname" => "LN.lastname"
        ),
        $LastName
      )
    )
  )
);

$Person4Wrong =
Project(
  (
    "@@genericModule@@Person4Wrong@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "FN.firstname"
      ),
      GetCol(
        "LN.lastname"
      )
    ) => "@@genericModule@@Person4Wrong@@person",
    Select(
      And(
        ContainsRegex(
          RegexConst(
            /[\n\r]/,
            "SimpleRegex"
          ),
          SpanBetween(
            GetCol(
              "FN.firstname"
            ),
            GetCol(
              "LN.lastname"
            )
          )
        ),
        FollowsTok(
          GetCol(
            "FN.firstname"
          ),
          GetCol(
            "LN.lastname"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        )
      ),
      HashJoin(
        Equals(
          GetText(
            GetCol(
              "FN.firstname"
            )
          ),
          GetText(
            GetCol(
              "LN.lastname"
            )
          )
        ),
        Project(
          (
            "firstname" => "FN.firstname"
          ),
          $FirstName
        ),
        Project(
          (
            "lastname" => "LN.lastname"
          ),
          $LastName
        )
      )
    )
  )
);

$Person4a =
Project(
  (
    "@@genericModule@@Person4a@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "LN.lastname"
      ),
      GetCol(
        "FN.firstname"
      )
    ) => "@@genericModule@@Person4a@@person",
    Select(
      ContainsRegex(
        RegexConst(
          /,/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "LN.lastname"
          ),
          GetCol(
            "FN.firstname"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "FN.firstname"
          ),
          GetCol(
            "LN.lastname"
          ),
          IntConst(
            0
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "firstname" => "FN.firstname"
          ),
          $FirstName
        ),
        Project(
          (
            "lastname" => "LN.lastname"
          ),
          $LastName
        )
      )
    )
  )
);

$Person4ar1 =
Project(
  (
    "@@genericModule@@Person4ar1@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "CP.name"
      ),
      GetCol(
        "FN.firstname"
      )
    ) => "@@genericModule@@Person4ar1@@person",
    Select(
      ContainsRegex(
        RegexConst(
          /,/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "CP.name"
          ),
          GetCol(
            "FN.firstname"
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "CP.name"
          ),
          GetCol(
            "FN.firstname"
          ),
          IntConst(
            0
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "name" => "CP.name"
          ),
          $CapsPerson
        ),
        Project(
          (
            "firstname" => "FN.firstname"
          ),
          $FirstName
        )
      )
    )
  )
);

$Person4ar2 =
Project(
  (
    "@@genericModule@@Person4ar2@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "LN.lastname"
      ),
      GetCol(
        "CP.name"
      )
    ) => "@@genericModule@@Person4ar2@@person",
    Select(
      ContainsRegex(
        RegexConst(
          /,/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "LN.lastname"
          ),
          GetCol(
            "CP.name"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "CP.name"
          ),
          GetCol(
            "LN.lastname"
          ),
          IntConst(
            0
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "name" => "CP.name"
          ),
          $CapsPerson
        ),
        Project(
          (
            "lastname" => "LN.lastname"
          ),
          $LastName
        )
      )
    )
  )
);

$Person4r1 =
Project(
  (
    "@@genericModule@@Person4r1@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "FN.firstname"
      ),
      GetCol(
        "CP.name"
      )
    ) => "@@genericModule@@Person4r1@@person",
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "CP.name"
        ),
        GetCol(
          "FN.firstname"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "name" => "CP.name"
        ),
        $CapsPerson
      ),
      Project(
        (
          "firstname" => "FN.firstname"
        ),
        $FirstName
      )
    )
  )
);

$Person4r2 =
Project(
  (
    "@@genericModule@@Person4r2@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "CP.name"
      ),
      GetCol(
        "LN.lastname"
      )
    ) => "@@genericModule@@Person4r2@@person",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "CP.name"
        ),
        GetCol(
          "LN.lastname"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "name" => "CP.name"
        ),
        $CapsPerson
      ),
      Project(
        (
          "lastname" => "LN.lastname"
        ),
        $LastName
      )
    )
  )
);

$Person5 =
Project(
  (
    "@@genericModule@@Person5@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "IW.word"
      ),
      GetCol(
        "FN.firstname"
      )
    ) => "@@genericModule@@Person5@@person",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "IW.word"
        ),
        GetCol(
          "FN.firstname"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "word" => "IW.word"
        ),
        $InitialWord
      ),
      Project(
        (
          "firstname" => "FN.firstname"
        ),
        $FirstName
      )
    )
  )
);

$Person6 =
Project(
  (
    "@@genericModule@@Person6@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "IW.word"
      ),
      GetCol(
        "LN.lastname"
      )
    ) => "@@genericModule@@Person6@@person",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "IW.word"
        ),
        GetCol(
          "LN.lastname"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "word" => "IW.word"
        ),
        $InitialWord
      ),
      Project(
        (
          "lastname" => "LN.lastname"
        ),
        $LastName
      )
    )
  )
);

$PersonDict =
Project(
  (
    "C.name" => "name"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "C.name"
    ),
    Project(
      (
        "name" => "C.name"
      ),
      $NamesAll
    )
  )
);

$PersonStrongSingleToken =
Union(
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person5
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person6
    )
  ),
  Project(
    (
      "P.firstname" => "person"
    ),
    Project(
      (
        "firstname" => "P.firstname"
      ),
      $FirstName
    )
  ),
  Project(
    (
      "P.lastname" => "person"
    ),
    Project(
      (
        "lastname" => "P.lastname"
      ),
      $LastName
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person1a
    )
  )
);

$PersonWeak2WithNewLine =
Union(
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person4a
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person4ar1
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person4ar2
    )
  )
);

$StreetAddressUnit =
Project(
  (
    "@@genericModule@@StreetAddressUnit@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S.match"
      ),
      GetCol(
        "Su.match"
      )
    ) => "@@genericModule@@StreetAddressUnit@@match",
    Select(
      MatchesRegex(
        RegexConst(
          /\s*\d*\s*,?\s*$/,
          "JavaRegex"
        ),
        SpanBetween(
          GetCol(
            "S.match"
          ),
          GetCol(
            "Su.match"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "Su.match"
          ),
          GetCol(
            "S.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            2
          )
        ),
        Project(
          (
            "match" => "Su.match"
          ),
          $SecondaryUnit
        ),
        Project(
          (
            "match" => "S.match"
          ),
          $StreetHighwayAddressAll
        )
      )
    )
  )
);

$Person2 =
Project(
  (
    "@@genericModule@@Person2@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "IW.word"
      ),
      GetCol(
        "CP.name"
      )
    ) => "@@genericModule@@Person2@@person",
    Select(
      FollowsTok(
        GetCol(
          "P.name"
        ),
        GetCol(
          "CP.name"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "P.name"
          ),
          GetCol(
            "IW.word"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        AdjacentJoin(
          FollowedByTok(
            GetCol(
              "CP.name"
            ),
            GetCol(
              "P.name"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          Project(
            (
              "name" => "CP.name"
            ),
            $CapsPerson
          ),
          Project(
            (
              "name" => "P.name"
            ),
            $PersonDict
          )
        ),
        Project(
          (
            "word" => "IW.word"
          ),
          $InitialWord
        )
      )
    )
  )
);

$Person2a =
Project(
  (
    "@@genericModule@@Person2a@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "IW.word"
      ),
      GetCol(
        "P.name"
      )
    ) => "@@genericModule@@Person2a@@person",
    Select(
      FollowsTok(
        GetCol(
          "IW.word"
        ),
        GetCol(
          "CP.name"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "CP.name"
          ),
          GetCol(
            "P.name"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        AdjacentJoin(
          FollowedByTok(
            GetCol(
              "CP.name"
            ),
            GetCol(
              "IW.word"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          Project(
            (
              "name" => "CP.name"
            ),
            $CapsPerson
          ),
          Project(
            (
              "word" => "IW.word"
            ),
            $InitialWord
          )
        ),
        Project(
          (
            "name" => "P.name"
          ),
          $PersonDict
        )
      )
    )
  )
);

$Person3 =
Project(
  (
    "@@genericModule@@Person3@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "P1.name"
      ),
      GetCol(
        "P2.name"
      )
    ) => "@@genericModule@@Person3@@person",
    Select(
      FollowsTok(
        GetCol(
          "P1.name"
        ),
        GetCol(
          "IW.word"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "IW.word"
          ),
          GetCol(
            "P2.name"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        AdjacentJoin(
          FollowedByTok(
            GetCol(
              "IW.word"
            ),
            GetCol(
              "P1.name"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          Project(
            (
              "word" => "IW.word"
            ),
            $WeakInitialWord
          ),
          Project(
            (
              "name" => "P1.name"
            ),
            $PersonDict
          )
        ),
        Project(
          (
            "name" => "P2.name"
          ),
          $PersonDict
        )
      )
    )
  )
);

$Person3P2 =
Project(
  (
    "@@genericModule@@Person3P2@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "P.name"
      ),
      GetCol(
        "L.lastname"
      )
    ) => "@@genericModule@@Person3P2@@person",
    Select(
      And(
        FollowsTok(
          GetCol(
            "S.name"
          ),
          GetCol(
            "L.lastname"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /[\n\r\t]/,
              "SimpleRegex"
            ),
            SpanBetween(
              GetCol(
                "P.name"
              ),
              GetCol(
                "L.lastname"
              )
            )
          )
        ),
        Not(
          Equals(
            GetText(
              GetCol(
                "P.name"
              )
            ),
            GetText(
              GetCol(
                "L.lastname"
              )
            )
          )
        ),
        Not(
          Equals(
            GetText(
              GetCol(
                "P.name"
              )
            ),
            GetText(
              GetCol(
                "S.name"
              )
            )
          )
        ),
        Not(
          Equals(
            GetText(
              GetCol(
                "S.name"
              )
            ),
            GetText(
              GetCol(
                "L.lastname"
              )
            )
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "S.name"
          ),
          GetCol(
            "P.name"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Select(
          Not(
            Equals(
              GetText(
                GetCol(
                  "S.name"
                )
              ),
              GetText(
                GetCol(
                  "L.lastname"
                )
              )
            )
          ),
          AdjacentJoin(
            FollowedByTok(
              GetCol(
                "L.lastname"
              ),
              GetCol(
                "S.name"
              ),
              IntConst(
                0
              ),
              IntConst(
                0
              )
            ),
            Project(
              (
                "lastname" => "L.lastname"
              ),
              $StrictLastName
            ),
            Project(
              (
                "name" => "S.name"
              ),
              $StrictCapsPerson
            )
          )
        ),
        Project(
          (
            "name" => "P.name"
          ),
          $PersonDict
        )
      )
    )
  )
);

$Person3P3 =
Project(
  (
    "@@genericModule@@Person3P3@@person" => "person"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "F.firstname"
      ),
      GetCol(
        "P.name"
      )
    ) => "@@genericModule@@Person3P3@@person",
    Select(
      And(
        FollowsTok(
          GetCol(
            "F.firstname"
          ),
          GetCol(
            "S.name"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /[\n\r\t]/,
              "SimpleRegex"
            ),
            SpanBetween(
              GetCol(
                "F.firstname"
              ),
              GetCol(
                "P.name"
              )
            )
          )
        ),
        Not(
          Equals(
            GetText(
              GetCol(
                "P.name"
              )
            ),
            GetText(
              GetCol(
                "F.firstname"
              )
            )
          )
        ),
        Not(
          Equals(
            GetText(
              GetCol(
                "P.name"
              )
            ),
            GetText(
              GetCol(
                "S.name"
              )
            )
          )
        ),
        Not(
          Equals(
            GetText(
              GetCol(
                "S.name"
              )
            ),
            GetText(
              GetCol(
                "F.firstname"
              )
            )
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "S.name"
          ),
          GetCol(
            "P.name"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Select(
          Not(
            Equals(
              GetText(
                GetCol(
                  "S.name"
                )
              ),
              GetText(
                GetCol(
                  "F.firstname"
                )
              )
            )
          ),
          AdjacentJoin(
            FollowsTok(
              GetCol(
                "F.firstname"
              ),
              GetCol(
                "S.name"
              ),
              IntConst(
                0
              ),
              IntConst(
                0
              )
            ),
            Project(
              (
                "firstname" => "F.firstname"
              ),
              $StrictFirstName
            ),
            Project(
              (
                "name" => "S.name"
              ),
              $StrictCapsPerson
            )
          )
        ),
        Project(
          (
            "name" => "P.name"
          ),
          $PersonDict
        )
      )
    )
  )
);

$Person4 =
Difference(
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person4WithNewLine
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person4Wrong
    )
  ));

$PersonWeak1WithNewLine =
Union(
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person3r1
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person3r2
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person4r1
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person4r2
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person2
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person2a
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person3P2
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person3P3
    )
  )
);

$PersonWeak2 =
Project(
  (
    "P.person" => "person"
  ),
  Select(
    Not(
      ContainsRegex(
        RegexConst(
          /[\n\r]/,
          "SimpleRegex"
        ),
        GetCol(
          "P.person"
        )
      )
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $PersonWeak2WithNewLine
    )
  )
);

$StreetAddressOptionalUnit =
Union(
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $StreetHighwayAddressAll
    )
  ),
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $StreetAddressUnit
    )
  )
);

$StreetAddressWithCity =
Project(
  (
    "@@genericModule@@StreetAddressWithCity@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "S.match"
      ),
      GetCol(
        "cp.match"
      )
    ) => "@@genericModule@@StreetAddressWithCity@@match",
    AdjacentJoin(
      FollowedByTok(
        GetCol(
          "cp.match"
        ),
        GetCol(
          "S.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          5
        )
      ),
      Project(
        (
          "match" => "cp.match"
        ),
        $CapsPlaceOnetoTwo
      ),
      Project(
        (
          "match" => "S.match"
        ),
        $StreetAddressOptionalUnit
      )
    )
  )
);

$StreetAddressWithCityStrongState =
Project(
  (
    "@@genericModule@@StreetAddressWithCityStrongState@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "Sawc.match"
      ),
      GetCol(
        "Sa.match"
      )
    ) => "@@genericModule@@StreetAddressWithCityStrongState@@match",
    Select(
      MatchesRegex(
        RegexConst(
          /\s*,?\s*/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "Sawc.match"
          ),
          GetCol(
            "Sa.match"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "Sa.match"
          ),
          GetCol(
            "Sawc.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "match" => "Sa.match"
          ),
          $StateStrongAll
        ),
        Project(
          (
            "match" => "Sawc.match"
          ),
          $StreetAddressWithCity
        )
      )
    )
  )
);

$StreetAddressWithCityWeakState =
Project(
  (
    "@@genericModule@@StreetAddressWithCityWeakState@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "Sawc.match"
      ),
      GetCol(
        "Sa.match"
      )
    ) => "@@genericModule@@StreetAddressWithCityWeakState@@match",
    Select(
      MatchesRegex(
        RegexConst(
          /\s*,?\s*/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "Sawc.match"
          ),
          GetCol(
            "Sa.match"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "Sa.match"
          ),
          GetCol(
            "Sawc.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "match" => "Sa.match"
          ),
          $StateWeakAll
        ),
        Project(
          (
            "match" => "Sawc.match"
          ),
          $StreetAddressWithCity
        )
      )
    )
  )
);

$PersonWeak1 =
Project(
  (
    "P.person" => "person"
  ),
  Select(
    Not(
      ContainsRegex(
        RegexConst(
          /[\n\r]/,
          "SimpleRegex"
        ),
        GetCol(
          "P.person"
        )
      )
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $PersonWeak1WithNewLine
    )
  )
);

$StreetAddressWithCityOptionalWeakState =
Union(
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $StreetAddressWithCity
    )
  ),
  Project(
    (
      "S.match" => "match"
    ),
    Project(
      (
        "match" => "S.match"
      ),
      $StreetAddressWithCityWeakState
    )
  )
);

$StreetAddressWithCityOptionalStateZipcode =
Project(
  (
    "@@genericModule@@StreetAddressWithCityOptionalStateZipcode@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "Sawcos.match"
      ),
      GetCol(
        "z.match"
      )
    ) => "@@genericModule@@StreetAddressWithCityOptionalStateZipcode@@match",
    Select(
      ContainsRegex(
        RegexConst(
          /^\s*,?\s*$/,
          "JavaRegex"
        ),
        SpanBetween(
          GetCol(
            "Sawcos.match"
          ),
          GetCol(
            "z.match"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "z.match"
          ),
          GetCol(
            "Sawcos.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "match" => "z.match"
          ),
          $Zipcode
        ),
        Project(
          (
            "match" => "Sawcos.match"
          ),
          $StreetAddressWithCityOptionalWeakState
        )
      )
    )
  )
);

$PlaceAll =
Union(
  Project(
    (
      "R.match" => "loc"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $StreetAddressWithCityOptionalStateZipcode
    )
  ),
  Project(
    (
      "R.match" => "loc"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $StreetAddressWithCityStrongState
    )
  ),
  Project(
    (
      "R.match" => "loc"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $GermanAddress
    )
  )
);

$PlaceConsolidated =
Project(
  (
    "C.loc" => "loc"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "C.loc"
    ),
    Project(
      (
        "loc" => "C.loc"
      ),
      $PlaceAll
    )
  )
);

$_{"OrganizationR11_no_quantifier❡subquery1"} =
Project(
  (
    "block" => "block"
  ),
  BlockTok(0, 1, 3, "CapsOrg.match", "block",
    Project(
      (
        "match" => "CapsOrg.match"
      ),
      $CapsOrg
    )
  )
);

$_{"OrganizationR11_with_quantifier❡subquery1"} =
Project(
  (
    "block" => "block"
  ),
  BlockTok(0, 1, 3, "CapsOrg.match", "block",
    Project(
      (
        "match" => "CapsOrg.match"
      ),
      $CapsOrg
    )
  )
);

$_{"Person1a_more❡subquery1"} =
Project(
  (
    "block" => "block"
  ),
  BlockTok(0, 2, 3, "CapsPerson.name", "block",
    Project(
      (
        "name" => "CapsPerson.name"
      ),
      $CapsPerson
    )
  )
);

$_{"StrongPhoneNumber❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  FastRegex(/[\d(].+/, (0 => "match"), "DOTALL", "StrongPhone.num",
    Project(
      (
        "num" => "StrongPhone.num"
      ),
      $StrongPhone
    )
  )
);

$_{"URL1a_2BeginwithProtocol❡subquery1"} =
Project(
  (
    "match" => "match"
  ),
  FastRegex(/(ht|f)tps?.+/, (0 => "match"), "DOTALL", "URL1a_2.annot",
    Project(
      (
        "annot" => "URL1a_2.annot"
      ),
      $URL1a_2
    )
  )
);

$OrganizationR11_no_quantifier =
Project(
  (
    "@@genericModule@@OrganizationR11_no_quantifier@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "OP.match"
      ),
      GetCol(
        "CO.block"
      )
    ) => "@@genericModule@@OrganizationR11_no_quantifier@@match",
    Select(
      And(
        FollowsTok(
          GetCol(
            "OP.match"
          ),
          GetCol(
            "P.match"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /[\n\r]/,
              "SimpleRegex"
            ),
            SpanBetween(
              GetCol(
                "OP.match"
              ),
              GetCol(
                "CO.block"
              )
            )
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "P.match"
          ),
          GetCol(
            "CO.block"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        AdjacentJoin(
          FollowsTok(
            GetCol(
              "OP.match"
            ),
            GetCol(
              "P.match"
            ),
            IntConst(
              0
            ),
            IntConst(
              0
            )
          ),
          Project(
            (
              "match" => "OP.match"
            ),
            $OrgClueStIndPrefixCaps
          ),
          Project(
            (
              "match" => "P.match"
            ),
            $OrgPrep
          )
        ),
        Project(
          (
            "block" => "CO.block"
          ),
          $_{"OrganizationR11_no_quantifier❡subquery1"}
        )
      )
    )
  )
);

$OrganizationR11_with_quantifier =
Project(
  (
    "@@genericModule@@OrganizationR11_with_quantifier@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "CO.block"
      ),
      GetCol(
        "O.match"
      )
    ) => "@@genericModule@@OrganizationR11_with_quantifier@@match",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "CO.block"
        ),
        GetCol(
          "O.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "block" => "CO.block"
        ),
        $_{"OrganizationR11_with_quantifier❡subquery1"}
      ),
      Project(
        (
          "match" => "O.match"
        ),
        $OrganizationR11_no_quantifier
      )
    )
  )
);

$Person1a_more =
Project(
  (
    "name.block" => "person"
  ),
  AdjacentJoin(
    FollowsTok(
      GetCol(
        "I.initial"
      ),
      GetCol(
        "name.block"
      ),
      IntConst(
        0
      ),
      IntConst(
        0
      )
    ),
    Project(
      (
        "initial" => "I.initial"
      ),
      $Initial
    ),
    Select(
      Not(
        ContainsRegex(
          RegexConst(
            /[\n\t]/,
            "SimpleRegex"
          ),
          GetCol(
            "name.block"
          )
        )
      ),
      Project(
        (
          "block" => "name.block"
        ),
        $_{"Person1a_more❡subquery1"}
      )
    )
  )
);

$OrganizationR11_no_the =
Union(
  Project(
    (
      "O.match" => "match"
    ),
    Project(
      (
        "match" => "O.match"
      ),
      $OrganizationR11_no_quantifier
    )
  ),
  Project(
    (
      "O.match" => "match"
    ),
    Project(
      (
        "match" => "O.match"
      ),
      $OrganizationR11_with_quantifier
    )
  )
);

$StrongPhoneNumber =
Project(
  (
    "R.match" => "num"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"StrongPhoneNumber❡subquery1"}
  )
);

$URL1a_2BeginwithProtocol =
Project(
  (
    "R.match" => "annot"
  ),
  Project(
    (
      "match" => "R.match"
    ),
    $_{"URL1a_2BeginwithProtocol❡subquery1"}
  )
);

$PhoneNumFull =
Union(
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $PhoneNumber_R1a
    )
  ),
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $PhoneNumber_R1b_2
    )
  ),
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $PhoneNumber_R2a
    )
  ),
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $PhoneNumber_R3
    )
  ),
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $PhoneNumber_R3a
    )
  ),
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $PhoneNumber_R7a_7b_7c
    )
  ),
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $PhoneNumber_R8ILPhone
    )
  ),
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $StrongPhoneNumber
    )
  )
);

$PhoneNumWithExtension =
Project(
  (
    "@@genericModule@@PhoneNumWithExtension@@num" => "num"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "P.num"
      ),
      GetCol(
        "E.num"
      )
    ) => "@@genericModule@@PhoneNumWithExtension@@num",
    Select(
      Not(
        ContainsRegex(
          RegexConst(
            /[\n\r]/,
            "SimpleRegex"
          ),
          SpanBetween(
            GetCol(
              "P.num"
            ),
            GetCol(
              "E.num"
            )
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "E.num"
          ),
          GetCol(
            "P.num"
          ),
          IntConst(
            0
          ),
          IntConst(
            0
          )
        ),
        Project(
          (
            "num" => "E.num"
          ),
          $ExtensionNums
        ),
        Project(
          (
            "num" => "P.num"
          ),
          $PhoneNumFull
        )
      )
    )
  )
);

$URL1a_2All =
Union(
  Project(
    (
      "U.annot" => "annot"
    ),
    Project(
      (
        "annot" => "U.annot"
      ),
      $URL1a_2
    )
  ),
  Project(
    (
      "U.annot" => "annot"
    ),
    Project(
      (
        "annot" => "U.annot"
      ),
      $URL1a_2BeginwithProtocol
    )
  )
);

$URL1a_2Consolidated =
Project(
  (
    "C.annot" => "annot"
  ),
  Consolidate(
    "NotContainedWithin",
    GetCol(
      "C.annot"
    ),
    Project(
      (
        "annot" => "C.annot"
      ),
      $URL1a_2All
    )
  )
);

$URLWeakOverlap =
Project(
  (
    "U2.annot" => "annot"
  ),
  SortMergeJoin(
    Overlaps(
      GetCol(
        "U1.annot"
      ),
      GetCol(
        "U2.annot"
      )
    ),
    Project(
      (
        "annot" => "U1.annot"
      ),
      $URL1
    ),
    Project(
      (
        "annot" => "U2.annot"
      ),
      $URL1a_2Consolidated
    )
  )
);

$Org5791011 =
Union(
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $CoOcscOpCoOcCo
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $OcscOpCoOcCo
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $CoOcsic
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $CoOcssc
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $CoOcscOpCo
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $OrganizationR11_no_the
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $CoOcsicEx
    )
  )
);

$PhoneNumAll =
Union(
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $PhoneNumFull
    )
  ),
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $ExtensionNums
    )
  ),
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $PhoneNumWithExtension
    )
  )
);

$PhoneNumCons =
Project(
  (
    "C.num" => "num"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "C.num"
    ),
    Project(
      (
        "num" => "C.num"
      ),
      $PhoneNumAll
    )
  )
);

$TheOrg5791011 =
Project(
  (
    "@@genericModule@@TheOrg5791011@@match" => "match"
  ),
  ApplyFunc(
    CombineSpans(
      GetCol(
        "the.match"
      ),
      GetCol(
        "org5791011.match"
      )
    ) => "@@genericModule@@TheOrg5791011@@match",
    AdjacentJoin(
      FollowsTok(
        GetCol(
          "the.match"
        ),
        GetCol(
          "org5791011.match"
        ),
        IntConst(
          0
        ),
        IntConst(
          0
        )
      ),
      Project(
        (
          "match" => "the.match"
        ),
        $The
      ),
      Project(
        (
          "match" => "org5791011.match"
        ),
        $Org5791011
      )
    )
  )
);

$URLWeakOnly =
Difference(
  Project(
    (
      "U.annot" => "annot"
    ),
    Project(
      (
        "annot" => "U.annot"
      ),
      $URL1a_2Consolidated
    )
  ),
  Project(
    (
      "U.annot" => "annot"
    ),
    Project(
      (
        "annot" => "U.annot"
      ),
      $URLWeakOverlap
    )
  ));

$NonPhoneNum =
Union(
  Project(
    (
      "P.num" => "num"
    ),
    Select(
      MatchesRegex(
        RegexConst(
          /\s*\:*\s*\.{0,10}\s*\+*\s*/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "F.annot"
          ),
          GetCol(
            "P.num"
          )
        )
      ),
      AdjacentJoin(
        FollowsTok(
          GetCol(
            "F.annot"
          ),
          GetCol(
            "P.num"
          ),
          IntConst(
            0
          ),
          IntConst(
            4
          )
        ),
        Project(
          (
            "annot" => "F.annot"
          ),
          $PhoneFilter
        ),
        Project(
          (
            "num" => "P.num"
          ),
          $PhoneNumCons
        )
      )
    )
  ),
  Project(
    (
      "P.num" => "num"
    ),
    Select(
      MatchesRegex(
        RegexConst(
          /\s*[\(\[]\s*/,
          "SimpleRegex"
        ),
        SpanBetween(
          GetCol(
            "P.num"
          ),
          GetCol(
            "F.annot"
          )
        )
      ),
      AdjacentJoin(
        FollowedByTok(
          GetCol(
            "F.annot"
          ),
          GetCol(
            "P.num"
          ),
          IntConst(
            0
          ),
          IntConst(
            1
          )
        ),
        Project(
          (
            "annot" => "F.annot"
          ),
          $PhoneFilter
        ),
        Project(
          (
            "num" => "P.num"
          ),
          $PhoneNumCons
        )
      )
    )
  )
);

$OrgAll =
Union(
  Project(
    (
      "R.match" => "org"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $DotCom
    )
  ),
  Project(
    (
      "R.match" => "org"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $OrgFull
    )
  ),
  Project(
    (
      "R.match" => "org"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $Org5791011
    )
  ),
  Project(
    (
      "R.match" => "org"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $TheOrg5791011
    )
  ),
  Project(
    (
      "R.match" => "org"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $OfCoOcsc
    )
  ),
  Project(
    (
      "R.match" => "org"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $CoOcCozerototwoOcscOpCo
    )
  )
);

$OrgSentence =
Project(
  (
    "OA.org" => "org"
  ),
  SortMergeJoin(
    Contains(
      GetCol(
        "S.sentence"
      ),
      GetCol(
        "OA.org"
      )
    ),
    Project(
      (
        "sentence" => "S.sentence"
      ),
      $sentence
    ),
    Select(
      And(
        Not(
          ContainsDict(
            StringConst(
              "FilterOrgDict"
            ),
            GetCol(
              "OA.org"
            )
          )
        ),
        Not(
          ContainsDict(
            StringConst(
              "dictionaries/lotus/filterOrgGerman.dict"
            ),
            GetCol(
              "OA.org"
            )
          )
        ),
        Not(
          ContainsRegex(
            RegexConst(
              /[\n\r]/,
              "SimpleRegex"
            ),
            GetCol(
              "OA.org"
            )
          )
        )
      ),
      Project(
        (
          "org" => "OA.org"
        ),
        $OrgAll
      )
    )
  )
);

$PhoneNumOnly =
Difference(
  Project(
    (
      "P.num" => "num"
    ),
    Project(
      (
        "num" => "P.num"
      ),
      $PhoneNumCons
    )
  ),
  Project(
    (
      "NP.num" => "num"
    ),
    Project(
      (
        "num" => "NP.num"
      ),
      $NonPhoneNum
    )
  ));

$PhoneNumber =
Project(
  (
    "P.num" => "num"
  ),
  Project(
    (
      "num" => "P.num"
    ),
    $PhoneNumOnly
  )
);

$URLAll =
Union(
  Project(
    (
      "URL1.annot" => "annot"
    ),
    Project(
      (
        "annot" => "URL1.annot"
      ),
      $URL1
    )
  ),
  Project(
    (
      "URLWeakOnly.annot" => "annot"
    ),
    Project(
      (
        "annot" => "URLWeakOnly.annot"
      ),
      $URLWeakOnly
    )
  )
);

$PersonStrongWithNewLine =
Union(
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person1
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person1a_more
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person3
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person4
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $Person3P1
    )
  )
);

$URL =
Project(
  (
    "C.annot" => "url"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "C.annot"
    ),
    Project(
      (
        "annot" => "C.annot"
      ),
      $URLAll
    )
  )
);

$UrlEmail =
Union(
  Project(
    (
      "R.email" => "match"
    ),
    Project(
      (
        "email" => "R.email"
      ),
      $Email
    )
  ),
  Project(
    (
      "R.url" => "match"
    ),
    Project(
      (
        "url" => "R.url"
      ),
      $URL
    )
  )
);

$PersonStrong =
Project(
  (
    "P.person" => "person"
  ),
  Select(
    Not(
      ContainsRegex(
        RegexConst(
          /[\n\r]/,
          "SimpleRegex"
        ),
        GetCol(
          "P.person"
        )
      )
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $PersonStrongWithNewLine
    )
  )
);

$PersonFirstNameLastName =
Union(
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $PersonStrong
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $PersonWeak1
    )
  )
);

$InvalidPersonWeak2 =
Project(
  (
    "P2.person" => "person"
  ),
  SortMergeJoin(
    Overlaps(
      GetCol(
        "P2.person"
      ),
      GetCol(
        "P1.person"
      )
    ),
    Project(
      (
        "person" => "P2.person"
      ),
      $PersonWeak2
    ),
    Project(
      (
        "person" => "P1.person"
      ),
      $PersonFirstNameLastName
    )
  )
);

$ValidPersonWeak2 =
Difference(
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $PersonWeak2
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $InvalidPersonWeak2
    )
  ));

$WrongPlaceConsolidated =
Project(
  (
    "P.loc" => "loc"
  ),
  SortMergeJoin(
    Contains(
      GetCol(
        "UE.match"
      ),
      GetCol(
        "P.loc"
      )
    ),
    Project(
      (
        "match" => "UE.match"
      ),
      $UrlEmail
    ),
    Project(
      (
        "loc" => "P.loc"
      ),
      $PlaceConsolidated
    )
  )
);

$FinalPlaceConsolidated =
Difference(
  Project(
    (
      "P.loc" => "loc"
    ),
    Project(
      (
        "loc" => "P.loc"
      ),
      $PlaceConsolidated
    )
  ),
  Project(
    (
      "WP.loc" => "loc"
    ),
    Project(
      (
        "loc" => "WP.loc"
      ),
      $WrongPlaceConsolidated
    )
  ));

$PersonWeakWithoutNewLine =
Union(
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $PersonWeak1
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $ValidPersonWeak2
    )
  )
);

$Place =
Project(
  (
    "P.loc" => "loc"
  ),
  Consolidate(
    "OverlapOrdered",
    GetCol(
      "P.loc"
    ),
    Project(
      (
        "loc" => "P.loc"
      ),
      $FinalPlaceConsolidated
    )
  )
);

$UrlEmailPlace =
Union(
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $UrlEmail
    )
  ),
  Project(
    (
      "R.loc" => "match"
    ),
    Project(
      (
        "loc" => "R.loc"
      ),
      $FinalPlaceConsolidated
    )
  )
);

$OrgWithinUrlEmailPlace =
Project(
  (
    "O.org" => "org"
  ),
  SortMergeJoin(
    Contains(
      GetCol(
        "uep.match"
      ),
      GetCol(
        "O.org"
      )
    ),
    Project(
      (
        "match" => "uep.match"
      ),
      $UrlEmailPlace
    ),
    Project(
      (
        "org" => "O.org"
      ),
      $OrgSentence
    )
  )
);

$PersonWeakOverlap =
Project(
  (
    "P1.person" => "person"
  ),
  SortMergeJoin(
    Overlaps(
      GetCol(
        "P2.person"
      ),
      GetCol(
        "P1.person"
      )
    ),
    Project(
      (
        "person" => "P2.person"
      ),
      $PersonStrong
    ),
    Project(
      (
        "person" => "P1.person"
      ),
      $PersonWeakWithoutNewLine
    )
  )
);

$ValidOrg =
Difference(
  Project(
    (
      "O.org" => "org"
    ),
    Project(
      (
        "org" => "O.org"
      ),
      $OrgSentence
    )
  ),
  Project(
    (
      "OP.org" => "org"
    ),
    Project(
      (
        "org" => "OP.org"
      ),
      $OrgWithinUrlEmailPlace
    )
  ));

$FinalOrgConsolidated =
Project(
  (
    "C.org" => "org"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "C.org"
    ),
    Project(
      (
        "org" => "C.org"
      ),
      $ValidOrg
    )
  )
);

$Organization =
Project(
  (
    "O.org" => "org"
  ),
  Consolidate(
    "OverlapOrdered",
    GetCol(
      "O.org"
    ),
    Project(
      (
        "org" => "O.org"
      ),
      $FinalOrgConsolidated
    )
  )
);

$PersonWeakOnly =
Difference(
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $PersonWeakWithoutNewLine
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $PersonWeakOverlap
    )
  ));

$UrlEmailPlaceOrg =
Union(
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $UrlEmailPlace
    )
  ),
  Project(
    (
      "R.org" => "match"
    ),
    Project(
      (
        "org" => "R.org"
      ),
      $FinalOrgConsolidated
    )
  ),
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $USCity
    )
  )
);

$PersonAll =
Union(
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $PersonWeakOnly
    )
  ),
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $PersonStrong
    )
  )
);

$PersonCorrect =
Project(
  (
    "PA.person" => "person"
  ),
  Select(
    And(
      Not(
        MatchesRegex(
          RegexConst(
            /(\p{Lu}\p{M}*)+[,\s]+\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*.+/,
            "SimpleRegex"
          ),
          GetCol(
            "PA.person"
          )
        )
      ),
      Not(
        MatchesRegex(
          RegexConst(
            /U\.\s*S\.\s*.+/,
            "SimpleRegex"
          ),
          GetCol(
            "PA.person"
          )
        )
      ),
      Not(
        MatchesRegex(
          RegexConst(
            /\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*.+[,\s]+(\p{Lu}\p{M}*)+/,
            "SimpleRegex"
          ),
          GetCol(
            "PA.person"
          )
        )
      )
    ),
    Project(
      (
        "person" => "PA.person"
      ),
      $PersonAll
    )
  )
);

$PersonSentence =
Project(
  (
    "PA.person" => "person"
  ),
  SortMergeJoin(
    Contains(
      GetCol(
        "S.sentence"
      ),
      GetCol(
        "PA.person"
      )
    ),
    Project(
      (
        "sentence" => "S.sentence"
      ),
      $sentence
    ),
    Project(
      (
        "person" => "PA.person"
      ),
      $PersonCorrect
    )
  )
);

$PersonWithinUrlEmailPlaceOrg =
Project(
  (
    "PS.person" => "person"
  ),
  SortMergeJoin(
    ContainedWithin(
      GetCol(
        "PS.person"
      ),
      GetCol(
        "R.match"
      )
    ),
    Project(
      (
        "person" => "PS.person"
      ),
      $PersonSentence
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $UrlEmailPlaceOrg
    )
  )
);

$PersonOverlapsWithCities =
Project(
  (
    "P.person" => "person"
  ),
  Select(
    And(
      Not(
        Contains(
          GetCol(
            "C.match"
          ),
          GetCol(
            "P.person"
          )
        )
      ),
      Not(
        Contains(
          GetCol(
            "P.person"
          ),
          GetCol(
            "C.match"
          )
        )
      )
    ),
    SortMergeJoin(
      Overlaps(
        GetCol(
          "C.match"
        ),
        GetCol(
          "P.person"
        )
      ),
      Project(
        (
          "match" => "C.match"
        ),
        $CitiesAll
      ),
      Project(
        (
          "person" => "P.person"
        ),
        $PersonSentence
      )
    )
  )
);

$InvalidPerson =
Union(
  Project(
    (
      "P1.person" => "person"
    ),
    Project(
      (
        "person" => "P1.person"
      ),
      $PersonWithinUrlEmailPlaceOrg
    )
  ),
  Project(
    (
      "P1.person" => "person"
    ),
    Project(
      (
        "person" => "P1.person"
      ),
      $PersonOverlapsWithCities
    )
  )
);

$ValidPerson =
Difference(
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $PersonSentence
    )
  ),
  Project(
    (
      "P1.person" => "person"
    ),
    Project(
      (
        "person" => "P1.person"
      ),
      $InvalidPerson
    )
  ));

$FinalPersonConsolidated =
Project(
  (
    "C.person" => "person"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "C.person"
    ),
    Project(
      (
        "person" => "C.person"
      ),
      $ValidPerson
    )
  )
);

$Person =
Project(
  (
    "P.person" => "person"
  ),
  Consolidate(
    "OverlapOrdered",
    GetCol(
      "P.person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $FinalPersonConsolidated
    )
  )
);

$UrlEmailPlaceOrgPerson =
Union(
  Project(
    (
      "R.match" => "match"
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $UrlEmailPlaceOrg
    )
  ),
  Project(
    (
      "R.person" => "match"
    ),
    Project(
      (
        "person" => "R.person"
      ),
      $FinalPersonConsolidated
    )
  )
);

$PersonStrongSingleTokenWithinUrlEmailPlaceOrg =
Project(
  (
    "PS.person" => "person"
  ),
  SortMergeJoin(
    ContainedWithin(
      GetCol(
        "PS.person"
      ),
      GetCol(
        "R.match"
      )
    ),
    Project(
      (
        "person" => "PS.person"
      ),
      $PersonStrongSingleToken
    ),
    Project(
      (
        "match" => "R.match"
      ),
      $UrlEmailPlaceOrgPerson
    )
  )
);

$FinalPersonStrongSingleToken =
Difference(
  Project(
    (
      "P.person" => "person"
    ),
    Project(
      (
        "person" => "P.person"
      ),
      $PersonStrongSingleToken
    )
  ),
  Project(
    (
      "P1.person" => "person"
    ),
    Project(
      (
        "person" => "P1.person"
      ),
      $PersonStrongSingleTokenWithinUrlEmailPlaceOrg
    )
  ));

$FinalPersonStrongSingleTokenConsolidated =
Project(
  (
    "C.person" => "person"
  ),
  Consolidate(
    "ContainedWithin",
    GetCol(
      "C.person"
    ),
    Project(
      (
        "person" => "C.person"
      ),
      $FinalPersonStrongSingleToken
    )
  )
);

$PersonSingleToken =
Project(
  (
    "P.person" => "person"
  ),
  Project(
    (
      "person" => "P.person"
    ),
    $FinalPersonStrongSingleTokenConsolidated
  )
);

# Dicts() operator created through Shared Dictionary Matching
(
  $SDM_TMP_dictionaries_lotus_continents_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_COUNTRY_dict_WITH_Exact_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_germancities_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_HighwayDict_WITH_Exact_OVER_Document_text,
  $SDM_TMP_InitialDict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_names_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_nationalities_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_industry_types_retained_dict_WITH_Exact_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_industry_types_prefix_dict_WITH_Exact_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_organization_suffixes_dict_WITH_Exact_OVER_Document_text,
  $SDM_TMP_OrgConjDict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_organization_full_case_dict_WITH_Exact_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_organization_full_nocase_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_OrgPrepDict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_FilterPhoneNum_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_PhoneVariants_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_secondaryUnit_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_Statelist_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_Statelist_abbrev_dict_WITH_Exact_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_Statelist_abbrev_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_streetSuffixes_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_streetSuffixesWeak_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_strictfirst_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_germanFirstNames_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_strictNickNames_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_germanFirstNamesBluepages_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_strictlast_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_germanLastNames_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_germanFamilyNamesBluepages_dict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_StrongPhoneVariantDictionary_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_TheDict_WITH_IgnoreCase_OVER_Document_text,
  $SDM_TMP_dictionaries_lotus_CITY_dict_WITH_Exact_OVER_Document_text
) = 
Dicts(
  (
    "dictionaries/lotus/continents.dict" => "IgnoreCase",
    "dictionaries/lotus/COUNTRY.dict" => "Exact",
    "dictionaries/lotus/germancities.dict" => "IgnoreCase",
    "HighwayDict" => "Exact",
    "InitialDict" => "IgnoreCase",
    "dictionaries/lotus/names.dict" => "IgnoreCase",
    "dictionaries/lotus/nationalities.dict" => "IgnoreCase",
    "dictionaries/lotus/industry_types_retained.dict" => "Exact",
    "dictionaries/lotus/industry_types_prefix.dict" => "Exact",
    "dictionaries/lotus/organization_suffixes.dict" => "Exact",
    "OrgConjDict" => "IgnoreCase",
    "dictionaries/lotus/organization_full_case.dict" => "Exact",
    "dictionaries/lotus/organization_full_nocase.dict" => "IgnoreCase",
    "OrgPrepDict" => "IgnoreCase",
    "FilterPhoneNum" => "IgnoreCase",
    "PhoneVariants" => "IgnoreCase",
    "dictionaries/lotus/secondaryUnit.dict" => "IgnoreCase",
    "dictionaries/lotus/Statelist.dict" => "IgnoreCase",
    "dictionaries/lotus/Statelist.abbrev.dict" => "Exact",
    "dictionaries/lotus/Statelist.abbrev.dict" => "IgnoreCase",
    "dictionaries/lotus/streetSuffixes.dict" => "IgnoreCase",
    "dictionaries/lotus/streetSuffixesWeak.dict" => "IgnoreCase",
    "dictionaries/lotus/strictfirst.dict" => "IgnoreCase",
    "dictionaries/lotus/germanFirstNames.dict" => "IgnoreCase",
    "dictionaries/lotus/strictNickNames.dict" => "IgnoreCase",
    "dictionaries/lotus/germanFirstNamesBluepages.dict" => "IgnoreCase",
    "dictionaries/lotus/strictlast.dict" => "IgnoreCase",
    "dictionaries/lotus/germanLastNames.dict" => "IgnoreCase",
    "dictionaries/lotus/germanFamilyNamesBluepages.dict" => "IgnoreCase",
    "StrongPhoneVariantDictionary" => "IgnoreCase",
    "TheDict" => "IgnoreCase",
    "dictionaries/lotus/CITY.dict" => "Exact"
  ),
  "text", "__sdm_match", $Document
);

# Apply labels to outputs of generated Dicts() operator.
$SDM_OUTPUT_dictionaries_lotus_continents_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_continents_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_COUNTRY_dict_WITH_Exact_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_COUNTRY_dict_WITH_Exact_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_germancities_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_germancities_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_HighwayDict_WITH_Exact_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_HighwayDict_WITH_Exact_OVER_Document_text);
$SDM_OUTPUT_InitialDict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_InitialDict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_names_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_names_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_nationalities_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_nationalities_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_industry_types_retained_dict_WITH_Exact_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_industry_types_retained_dict_WITH_Exact_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_industry_types_prefix_dict_WITH_Exact_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_industry_types_prefix_dict_WITH_Exact_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_organization_suffixes_dict_WITH_Exact_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_organization_suffixes_dict_WITH_Exact_OVER_Document_text);
$SDM_OUTPUT_OrgConjDict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_OrgConjDict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_organization_full_case_dict_WITH_Exact_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_organization_full_case_dict_WITH_Exact_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_organization_full_nocase_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_organization_full_nocase_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_OrgPrepDict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_OrgPrepDict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_FilterPhoneNum_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_FilterPhoneNum_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_PhoneVariants_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_PhoneVariants_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_secondaryUnit_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_secondaryUnit_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_Statelist_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_Statelist_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_Statelist_abbrev_dict_WITH_Exact_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_Statelist_abbrev_dict_WITH_Exact_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_Statelist_abbrev_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_Statelist_abbrev_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_streetSuffixes_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_streetSuffixes_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_streetSuffixesWeak_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_streetSuffixesWeak_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_strictfirst_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_strictfirst_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_germanFirstNames_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_germanFirstNames_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_strictNickNames_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_strictNickNames_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_germanFirstNamesBluepages_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_germanFirstNamesBluepages_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_strictlast_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_strictlast_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_germanLastNames_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_germanLastNames_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_germanFamilyNamesBluepages_dict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_germanFamilyNamesBluepages_dict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_StrongPhoneVariantDictionary_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_StrongPhoneVariantDictionary_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_TheDict_WITH_IgnoreCase_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_TheDict_WITH_IgnoreCase_OVER_Document_text);
$SDM_OUTPUT_dictionaries_lotus_CITY_dict_WITH_Exact_OVER_Document_text = Project(("__sdm_match" => "__sdm_match", "text" => "text" ), $SDM_TMP_dictionaries_lotus_CITY_dict_WITH_Exact_OVER_Document_text);


Output: $AllCities, $AllStates, $InternetEmail, $NotesEmail, $Organization, $Person, $PersonSingleToken, $PersonalNotesEmail, $PhoneNumber, $Place, $URL, $Zipcodes;
